(self["webpackChunkbrowser_app"] = self["webpackChunkbrowser_app"] || []).push([["vendors-node_modules_theia_editor_lib_browser_editor-frontend-module_js-node_modules_theia_ed-74a151"],{

/***/ "../node_modules/css-loader/dist/cjs.js!../node_modules/@theia/editor/node_modules/@theia/core/src/browser/style/hover-service.css":
/*!*****************************************************************************************************************************************!*\
  !*** ../node_modules/css-loader/dist/cjs.js!../node_modules/@theia/editor/node_modules/@theia/core/src/browser/style/hover-service.css ***!
  \*****************************************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../../../../../css-loader/dist/runtime/sourceMaps.js */ "../node_modules/css-loader/dist/runtime/sourceMaps.js");
/* harmony import */ var _css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../../../../../css-loader/dist/runtime/api.js */ "../node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, `/********************************************************************************
 * Copyright (C) 2022 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
 ********************************************************************************/

/* Adapted from https://github.com/microsoft/vscode/blob/7d9b1c37f8e5ae3772782ba3b09d827eb3fdd833/src/vs/workbench/services/hover/browser/hoverService.ts */

:root {
  --theia-hover-max-width: 500px;
  --theia-hover-preview-width: 300px;
}

.theia-hover {
  font-family: var(--theia-ui-font-family);
  font-size: var(--theia-ui-font-size1);
  color: var(--theia-editorHoverWidget-foreground);
  background-color: var(--theia-editorHoverWidget-background);
  border: 1px solid var(--theia-editorHoverWidget-border);
  padding: var(--theia-ui-padding);
  max-width: var(--theia-hover-max-width);
}

.theia-hover .hover-row:not(:first-child):not(:empty) {
  border-top: 1px solid var(--theia-editorHoverWidgetInternalBorder);
}

.theia-hover hr {
  border-top: 1px solid var(--theia-editorHoverWidgetInternalBorder);
  border-bottom: 0px solid var(--theia-editorHoverWidgetInternalBorder);
  margin: var(--theia-ui-padding) calc(var(--theia-ui-padding) * -1);
}

.theia-hover a {
  color: var(--theia-textLink-foreground);
}

.theia-hover a:hover {
  color: var(--theia-textLink-active-foreground);
}

.theia-hover .hover-row .actions {
  background-color: var(--theia-editorHoverWidget-statusBarBackground);
}

.theia-hover code {
  background-color: var(--theia-textCodeBlock-background);
  font-family: var(--theia-code-font-family);
}

.theia-hover::before {
  content: "";
  position: absolute;
}

.theia-hover.top::before {
  left: var(--theia-hover-before-position);
  bottom: -5px;
  border-top: 5px solid var(--theia-editorHoverWidget-border);
  border-left: 5px solid transparent;
  border-right: 5px solid transparent;
}

.theia-hover.bottom::before {
  left: var(--theia-hover-before-position);
  top: -5px;
  border-bottom: 5px solid var(--theia-editorHoverWidget-border);
  border-left: 5px solid transparent;
  border-right: 5px solid transparent;
}

.theia-hover.left::before {
  top: var(--theia-hover-before-position);
  right: -5px;
  border-left: 5px solid var(--theia-editorHoverWidget-border);
  border-top: 5px solid transparent;
  border-bottom: 5px solid transparent;
}

.theia-hover.right::before {
  top: var(--theia-hover-before-position);
  left: -5px;
  border-right: 5px solid var(--theia-editorHoverWidget-border);
  border-top: 5px solid transparent;
  border-bottom: 5px solid transparent;
}

.theia-hover.extended-tab-preview {
  border-radius: 10px;
  width: var(--theia-hover-preview-width);
}
`, "",{"version":3,"sources":["webpack://./../node_modules/@theia/editor/node_modules/@theia/core/src/browser/style/hover-service.css"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;iFAciF;;AAEjF,2JAA2J;;AAE3J;EACE,8BAA8B;EAC9B,kCAAkC;AACpC;;AAEA;EACE,wCAAwC;EACxC,qCAAqC;EACrC,gDAAgD;EAChD,2DAA2D;EAC3D,uDAAuD;EACvD,gCAAgC;EAChC,uCAAuC;AACzC;;AAEA;EACE,kEAAkE;AACpE;;AAEA;EACE,kEAAkE;EAClE,qEAAqE;EACrE,kEAAkE;AACpE;;AAEA;EACE,uCAAuC;AACzC;;AAEA;EACE,8CAA8C;AAChD;;AAEA;EACE,oEAAoE;AACtE;;AAEA;EACE,uDAAuD;EACvD,0CAA0C;AAC5C;;AAEA;EACE,WAAW;EACX,kBAAkB;AACpB;;AAEA;EACE,wCAAwC;EACxC,YAAY;EACZ,2DAA2D;EAC3D,kCAAkC;EAClC,mCAAmC;AACrC;;AAEA;EACE,wCAAwC;EACxC,SAAS;EACT,8DAA8D;EAC9D,kCAAkC;EAClC,mCAAmC;AACrC;;AAEA;EACE,uCAAuC;EACvC,WAAW;EACX,4DAA4D;EAC5D,iCAAiC;EACjC,oCAAoC;AACtC;;AAEA;EACE,uCAAuC;EACvC,UAAU;EACV,6DAA6D;EAC7D,iCAAiC;EACjC,oCAAoC;AACtC;;AAEA;EACE,mBAAmB;EACnB,uCAAuC;AACzC","sourcesContent":["/********************************************************************************\n * Copyright (C) 2022 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n ********************************************************************************/\n\n/* Adapted from https://github.com/microsoft/vscode/blob/7d9b1c37f8e5ae3772782ba3b09d827eb3fdd833/src/vs/workbench/services/hover/browser/hoverService.ts */\n\n:root {\n  --theia-hover-max-width: 500px;\n  --theia-hover-preview-width: 300px;\n}\n\n.theia-hover {\n  font-family: var(--theia-ui-font-family);\n  font-size: var(--theia-ui-font-size1);\n  color: var(--theia-editorHoverWidget-foreground);\n  background-color: var(--theia-editorHoverWidget-background);\n  border: 1px solid var(--theia-editorHoverWidget-border);\n  padding: var(--theia-ui-padding);\n  max-width: var(--theia-hover-max-width);\n}\n\n.theia-hover .hover-row:not(:first-child):not(:empty) {\n  border-top: 1px solid var(--theia-editorHoverWidgetInternalBorder);\n}\n\n.theia-hover hr {\n  border-top: 1px solid var(--theia-editorHoverWidgetInternalBorder);\n  border-bottom: 0px solid var(--theia-editorHoverWidgetInternalBorder);\n  margin: var(--theia-ui-padding) calc(var(--theia-ui-padding) * -1);\n}\n\n.theia-hover a {\n  color: var(--theia-textLink-foreground);\n}\n\n.theia-hover a:hover {\n  color: var(--theia-textLink-active-foreground);\n}\n\n.theia-hover .hover-row .actions {\n  background-color: var(--theia-editorHoverWidget-statusBarBackground);\n}\n\n.theia-hover code {\n  background-color: var(--theia-textCodeBlock-background);\n  font-family: var(--theia-code-font-family);\n}\n\n.theia-hover::before {\n  content: \"\";\n  position: absolute;\n}\n\n.theia-hover.top::before {\n  left: var(--theia-hover-before-position);\n  bottom: -5px;\n  border-top: 5px solid var(--theia-editorHoverWidget-border);\n  border-left: 5px solid transparent;\n  border-right: 5px solid transparent;\n}\n\n.theia-hover.bottom::before {\n  left: var(--theia-hover-before-position);\n  top: -5px;\n  border-bottom: 5px solid var(--theia-editorHoverWidget-border);\n  border-left: 5px solid transparent;\n  border-right: 5px solid transparent;\n}\n\n.theia-hover.left::before {\n  top: var(--theia-hover-before-position);\n  right: -5px;\n  border-left: 5px solid var(--theia-editorHoverWidget-border);\n  border-top: 5px solid transparent;\n  border-bottom: 5px solid transparent;\n}\n\n.theia-hover.right::before {\n  top: var(--theia-hover-before-position);\n  left: -5px;\n  border-right: 5px solid var(--theia-editorHoverWidget-border);\n  border-top: 5px solid transparent;\n  border-bottom: 5px solid transparent;\n}\n\n.theia-hover.extended-tab-preview {\n  border-radius: 10px;\n  width: var(--theia-hover-preview-width);\n}\n"],"sourceRoot":""}]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "../node_modules/css-loader/dist/cjs.js!../node_modules/@theia/editor/node_modules/@theia/core/src/browser/style/select-component.css":
/*!********************************************************************************************************************************************!*\
  !*** ../node_modules/css-loader/dist/cjs.js!../node_modules/@theia/editor/node_modules/@theia/core/src/browser/style/select-component.css ***!
  \********************************************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../../../../../css-loader/dist/runtime/sourceMaps.js */ "../node_modules/css-loader/dist/runtime/sourceMaps.js");
/* harmony import */ var _css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../../../../../css-loader/dist/runtime/api.js */ "../node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, `/********************************************************************************
 * Copyright (C) 2022 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
 ********************************************************************************/

.theia-select-component-container {
  /* required to set z-index */
  position: fixed;
  /* dialog overlay has a z-index of 5000 */
  z-index: 6000;
}

.theia-select-component {
  background-color: var(--theia-dropdown-background);
  cursor: pointer;
  outline: var(--theia-dropdown-border) solid 1px;
  outline-offset: -1px;
  min-height: 23px;
  min-width: 90px;
  padding: 0px 8px;
  display: flex;
  align-items: center;
  user-select: none;
  border-radius: 2px;
}

.theia-select-component .theia-select-component-label {
  width: 100%;
  color: var(--theia-dropdown-foreground);
  white-space: nowrap;
  text-overflow: ellipsis;
  overflow: hidden;
}

.theia-select-component:focus {
  outline-color: var(--theia-focusBorder);
}

.theia-select-component-dropdown {
  font-family: var(--theia-ui-font-family);
  font-size: var(--theia-ui-font-size1);
  color: var(--theia-foreground);
  background-color: var(--theia-settings-dropdownBackground);
  outline: var(--theia-focusBorder) solid 1px;
  outline-offset: -1px;
  user-select: none;
  overflow: auto;
  border-radius: 2px;
}

.theia-select-component-dropdown .theia-select-component-option {
  text-overflow: ellipsis;
  overflow: hidden;
  display: flex;
  padding: 0px 5px;
  line-height: 22px;
}

.theia-select-component-dropdown .theia-select-component-description {
  padding: 6px 5px;
}

.theia-select-component-dropdown .theia-select-component-description:first-child {
  border-bottom: 1px solid var(--theia-editorWidget-border);
  margin-bottom: 2px;
}

.theia-select-component-dropdown .theia-select-component-description:last-child {
  border-top: 1px solid var(--theia-editorWidget-border);
  margin-top: 2px;
}

.theia-select-component-dropdown .theia-select-component-option .theia-select-component-option-value {
  width: 100%;
}

.theia-select-component-dropdown .theia-select-component-option .theia-select-component-option-detail {
  padding-left: 4px;
}

.theia-select-component-dropdown .theia-select-component-option:not(.selected) .theia-select-component-option-detail {
  color: var(--theia-textLink-foreground);
}

.theia-select-component-dropdown .theia-select-component-option.selected {
  color: var(--theia-list-activeSelectionForeground);
  cursor: pointer;
  background: var(--theia-list-activeSelectionBackground);
}

.theia-select-component-dropdown .theia-select-component-separator {
  width: 84px;
  height: 1px;
  margin: 3px 3px;
  background: var(--theia-foreground);
}
`, "",{"version":3,"sources":["webpack://./../node_modules/@theia/editor/node_modules/@theia/core/src/browser/style/select-component.css"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;iFAciF;;AAEjF;EACE,4BAA4B;EAC5B,eAAe;EACf,yCAAyC;EACzC,aAAa;AACf;;AAEA;EACE,kDAAkD;EAClD,eAAe;EACf,+CAA+C;EAC/C,oBAAoB;EACpB,gBAAgB;EAChB,eAAe;EACf,gBAAgB;EAChB,aAAa;EACb,mBAAmB;EACnB,iBAAiB;EACjB,kBAAkB;AACpB;;AAEA;EACE,WAAW;EACX,uCAAuC;EACvC,mBAAmB;EACnB,uBAAuB;EACvB,gBAAgB;AAClB;;AAEA;EACE,uCAAuC;AACzC;;AAEA;EACE,wCAAwC;EACxC,qCAAqC;EACrC,8BAA8B;EAC9B,0DAA0D;EAC1D,2CAA2C;EAC3C,oBAAoB;EACpB,iBAAiB;EACjB,cAAc;EACd,kBAAkB;AACpB;;AAEA;EACE,uBAAuB;EACvB,gBAAgB;EAChB,aAAa;EACb,gBAAgB;EAChB,iBAAiB;AACnB;;AAEA;EACE,gBAAgB;AAClB;;AAEA;EACE,yDAAyD;EACzD,kBAAkB;AACpB;;AAEA;EACE,sDAAsD;EACtD,eAAe;AACjB;;AAEA;EACE,WAAW;AACb;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,uCAAuC;AACzC;;AAEA;EACE,kDAAkD;EAClD,eAAe;EACf,uDAAuD;AACzD;;AAEA;EACE,WAAW;EACX,WAAW;EACX,eAAe;EACf,mCAAmC;AACrC","sourcesContent":["/********************************************************************************\n * Copyright (C) 2022 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n ********************************************************************************/\n\n.theia-select-component-container {\n  /* required to set z-index */\n  position: fixed;\n  /* dialog overlay has a z-index of 5000 */\n  z-index: 6000;\n}\n\n.theia-select-component {\n  background-color: var(--theia-dropdown-background);\n  cursor: pointer;\n  outline: var(--theia-dropdown-border) solid 1px;\n  outline-offset: -1px;\n  min-height: 23px;\n  min-width: 90px;\n  padding: 0px 8px;\n  display: flex;\n  align-items: center;\n  user-select: none;\n  border-radius: 2px;\n}\n\n.theia-select-component .theia-select-component-label {\n  width: 100%;\n  color: var(--theia-dropdown-foreground);\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  overflow: hidden;\n}\n\n.theia-select-component:focus {\n  outline-color: var(--theia-focusBorder);\n}\n\n.theia-select-component-dropdown {\n  font-family: var(--theia-ui-font-family);\n  font-size: var(--theia-ui-font-size1);\n  color: var(--theia-foreground);\n  background-color: var(--theia-settings-dropdownBackground);\n  outline: var(--theia-focusBorder) solid 1px;\n  outline-offset: -1px;\n  user-select: none;\n  overflow: auto;\n  border-radius: 2px;\n}\n\n.theia-select-component-dropdown .theia-select-component-option {\n  text-overflow: ellipsis;\n  overflow: hidden;\n  display: flex;\n  padding: 0px 5px;\n  line-height: 22px;\n}\n\n.theia-select-component-dropdown .theia-select-component-description {\n  padding: 6px 5px;\n}\n\n.theia-select-component-dropdown .theia-select-component-description:first-child {\n  border-bottom: 1px solid var(--theia-editorWidget-border);\n  margin-bottom: 2px;\n}\n\n.theia-select-component-dropdown .theia-select-component-description:last-child {\n  border-top: 1px solid var(--theia-editorWidget-border);\n  margin-top: 2px;\n}\n\n.theia-select-component-dropdown .theia-select-component-option .theia-select-component-option-value {\n  width: 100%;\n}\n\n.theia-select-component-dropdown .theia-select-component-option .theia-select-component-option-detail {\n  padding-left: 4px;\n}\n\n.theia-select-component-dropdown .theia-select-component-option:not(.selected) .theia-select-component-option-detail {\n  color: var(--theia-textLink-foreground);\n}\n\n.theia-select-component-dropdown .theia-select-component-option.selected {\n  color: var(--theia-list-activeSelectionForeground);\n  cursor: pointer;\n  background: var(--theia-list-activeSelectionBackground);\n}\n\n.theia-select-component-dropdown .theia-select-component-separator {\n  width: 84px;\n  height: 1px;\n  margin: 3px 3px;\n  background: var(--theia-foreground);\n}\n"],"sourceRoot":""}]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "../node_modules/css-loader/dist/cjs.js!../node_modules/@theia/editor/node_modules/@theia/core/src/browser/tree/tree-compression/tree-compression.css":
/*!************************************************************************************************************************************************************!*\
  !*** ../node_modules/css-loader/dist/cjs.js!../node_modules/@theia/editor/node_modules/@theia/core/src/browser/tree/tree-compression/tree-compression.css ***!
  \************************************************************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../../../../../../css-loader/dist/runtime/sourceMaps.js */ "../node_modules/css-loader/dist/runtime/sourceMaps.js");
/* harmony import */ var _css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../../../../../../css-loader/dist/runtime/api.js */ "../node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, `/********************************************************************************
 * Copyright (C) 2022 Ericsson and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
 ********************************************************************************/

.theia-tree-compressed-selected {
  text-decoration: underline;
}

.theia-tree-compressed-label-separator {
  padding: 0 2px;
  opacity: 0.5;
}

.theia-tree-compressed-label-part:hover {
  text-decoration: underline;
}
`, "",{"version":3,"sources":["webpack://./../node_modules/@theia/editor/node_modules/@theia/core/src/browser/tree/tree-compression/tree-compression.css"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;iFAciF;;AAEjF;EACE,0BAA0B;AAC5B;;AAEA;EACE,cAAc;EACd,YAAY;AACd;;AAEA;EACE,0BAA0B;AAC5B","sourcesContent":["/********************************************************************************\n * Copyright (C) 2022 Ericsson and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n ********************************************************************************/\n\n.theia-tree-compressed-selected {\n  text-decoration: underline;\n}\n\n.theia-tree-compressed-label-separator {\n  padding: 0 2px;\n  opacity: 0.5;\n}\n\n.theia-tree-compressed-label-part:hover {\n  text-decoration: underline;\n}\n"],"sourceRoot":""}]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "../node_modules/css-loader/dist/cjs.js!../node_modules/@theia/editor/src/browser/language-status/editor-language-status.css":
/*!***********************************************************************************************************************************!*\
  !*** ../node_modules/css-loader/dist/cjs.js!../node_modules/@theia/editor/src/browser/language-status/editor-language-status.css ***!
  \***********************************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../../css-loader/dist/runtime/sourceMaps.js */ "../node_modules/css-loader/dist/runtime/sourceMaps.js");
/* harmony import */ var _css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../../css-loader/dist/runtime/api.js */ "../node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, `/********************************************************************************
 * Copyright (C) 2022 Ericsson and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
 ********************************************************************************/

/* Copied from https://github.com/microsoft/vscode/blob/7d9b1c37f8e5ae3772782ba3b09d827eb3fdd833/src/vs/workbench/contrib/languageStatus/browser/media/languageStatus.css */

.hover-language-status {
  display: flex;
  padding: 4px 8px;
}

.hover-language-status:not(:last-child) {
  border-bottom: 1px solid var(--theia-notifications-border);
}

.hover-language-status > .severity {
  padding-right: 8px;
  flex: 1;
  margin: auto;
  display: none;
}

.hover-language-status > .severity.sev3 {
  color: var(--theia-notificationsErrorIcon-foreground);
}

.hover-language-status > .severity.sev2 {
  color: var(--theia-notificationsInfoIcon-foreground);
}

.hover-language-status > .severity.show {
  display: inherit;
}

.hover-language-status > .element {
  display: flex;
  justify-content: space-between;
  vertical-align: middle;
  flex-grow: 100;
}

.hover-language-status > .element > .left > .detail:not(:empty)::before {
  /* en-dash */
  content: "–";
  padding: 0 4px;
  opacity: 0.6;
}

.hover-language-status > .element > .left > .label:empty {
  display: none;
}

.hover-language-status > .element .left {
  margin: auto 0;
}

.hover-language-status > .element .right {
  margin: auto 0;
  display: flex;
}

.hover-language-status > .element .right:not(:empty) {
  padding-left: 16px;
}

.hover-language-status > .element .right .language-status-link {
  margin: auto 0;
  white-space: nowrap;

  /* ADDED STYLES - NOT FROM VSCODE */
  text-decoration: none;
}

/* ADDED STYLES - NOT FROM VSCODE */
.hover-language-status > .element .right .language-status-link:hover {
  color: var(--theia-textLink-foreground);
}

.hover-language-status
  > .element
  .right
  .language-status-action-bar:not(:first-child) {
  padding-left: 8px;
}

/* ADDED STYLES - NOT FROM VSCODE */
.hover-language-status > .element .right .language-status-action-bar a {
  color: var(--theia-editorHoverWidget-foreground);
}
`, "",{"version":3,"sources":["webpack://./../node_modules/@theia/editor/src/browser/language-status/editor-language-status.css"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;iFAciF;;AAEjF,2KAA2K;;AAE3K;EACE,aAAa;EACb,gBAAgB;AAClB;;AAEA;EACE,0DAA0D;AAC5D;;AAEA;EACE,kBAAkB;EAClB,OAAO;EACP,YAAY;EACZ,aAAa;AACf;;AAEA;EACE,qDAAqD;AACvD;;AAEA;EACE,oDAAoD;AACtD;;AAEA;EACE,gBAAgB;AAClB;;AAEA;EACE,aAAa;EACb,8BAA8B;EAC9B,sBAAsB;EACtB,cAAc;AAChB;;AAEA;EACE,YAAY;EACZ,YAAY;EACZ,cAAc;EACd,YAAY;AACd;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,cAAc;AAChB;;AAEA;EACE,cAAc;EACd,aAAa;AACf;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,cAAc;EACd,mBAAmB;;EAEnB,mCAAmC;EACnC,qBAAqB;AACvB;;AAEA,mCAAmC;AACnC;EACE,uCAAuC;AACzC;;AAEA;;;;EAIE,iBAAiB;AACnB;;AAEA,mCAAmC;AACnC;EACE,gDAAgD;AAClD","sourcesContent":["/********************************************************************************\n * Copyright (C) 2022 Ericsson and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n ********************************************************************************/\n\n/* Copied from https://github.com/microsoft/vscode/blob/7d9b1c37f8e5ae3772782ba3b09d827eb3fdd833/src/vs/workbench/contrib/languageStatus/browser/media/languageStatus.css */\n\n.hover-language-status {\n  display: flex;\n  padding: 4px 8px;\n}\n\n.hover-language-status:not(:last-child) {\n  border-bottom: 1px solid var(--theia-notifications-border);\n}\n\n.hover-language-status > .severity {\n  padding-right: 8px;\n  flex: 1;\n  margin: auto;\n  display: none;\n}\n\n.hover-language-status > .severity.sev3 {\n  color: var(--theia-notificationsErrorIcon-foreground);\n}\n\n.hover-language-status > .severity.sev2 {\n  color: var(--theia-notificationsInfoIcon-foreground);\n}\n\n.hover-language-status > .severity.show {\n  display: inherit;\n}\n\n.hover-language-status > .element {\n  display: flex;\n  justify-content: space-between;\n  vertical-align: middle;\n  flex-grow: 100;\n}\n\n.hover-language-status > .element > .left > .detail:not(:empty)::before {\n  /* en-dash */\n  content: \"–\";\n  padding: 0 4px;\n  opacity: 0.6;\n}\n\n.hover-language-status > .element > .left > .label:empty {\n  display: none;\n}\n\n.hover-language-status > .element .left {\n  margin: auto 0;\n}\n\n.hover-language-status > .element .right {\n  margin: auto 0;\n  display: flex;\n}\n\n.hover-language-status > .element .right:not(:empty) {\n  padding-left: 16px;\n}\n\n.hover-language-status > .element .right .language-status-link {\n  margin: auto 0;\n  white-space: nowrap;\n\n  /* ADDED STYLES - NOT FROM VSCODE */\n  text-decoration: none;\n}\n\n/* ADDED STYLES - NOT FROM VSCODE */\n.hover-language-status > .element .right .language-status-link:hover {\n  color: var(--theia-textLink-foreground);\n}\n\n.hover-language-status\n  > .element\n  .right\n  .language-status-action-bar:not(:first-child) {\n  padding-left: 8px;\n}\n\n/* ADDED STYLES - NOT FROM VSCODE */\n.hover-language-status > .element .right .language-status-action-bar a {\n  color: var(--theia-editorHoverWidget-foreground);\n}\n"],"sourceRoot":""}]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "../node_modules/css-loader/dist/cjs.js!../node_modules/@theia/editor/src/browser/style/index.css":
/*!********************************************************************************************************!*\
  !*** ../node_modules/css-loader/dist/cjs.js!../node_modules/@theia/editor/src/browser/style/index.css ***!
  \********************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../../css-loader/dist/runtime/sourceMaps.js */ "../node_modules/css-loader/dist/runtime/sourceMaps.js");
/* harmony import */ var _css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../../css-loader/dist/runtime/api.js */ "../node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, `/********************************************************************************
 * Copyright (C) 2020 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
 ********************************************************************************/

.theia-editor {
  height: 100%;
}
`, "",{"version":3,"sources":["webpack://./../node_modules/@theia/editor/src/browser/style/index.css"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;iFAciF;;AAEjF;EACE,YAAY;AACd","sourcesContent":["/********************************************************************************\n * Copyright (C) 2020 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n ********************************************************************************/\n\n.theia-editor {\n  height: 100%;\n}\n"],"sourceRoot":""}]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "../node_modules/@theia/editor/lib/browser/editor-command.js":
/*!*******************************************************************!*\
  !*** ../node_modules/@theia/editor/lib/browser/editor-command.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2017 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var EditorCommandContribution_1;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.EditorCommandContribution = exports.EditorCommands = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../node_modules/@theia/editor/node_modules/@theia/core/shared/inversify/index.js");
const common_1 = __webpack_require__(/*! @theia/core/lib/common */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/index.js");
const uri_1 = __webpack_require__(/*! @theia/core/lib/common/uri */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/uri.js");
const browser_1 = __webpack_require__(/*! @theia/core/lib/browser */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/index.js");
const editor_manager_1 = __webpack_require__(/*! ./editor-manager */ "../node_modules/@theia/editor/lib/browser/editor-manager.js");
const editor_preferences_1 = __webpack_require__(/*! ./editor-preferences */ "../node_modules/@theia/editor/lib/browser/editor-preferences.js");
const core_1 = __webpack_require__(/*! @theia/core */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/index.js");
const language_service_1 = __webpack_require__(/*! @theia/core/lib/browser/language-service */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/language-service.js");
const supported_encodings_1 = __webpack_require__(/*! @theia/core/lib/browser/supported-encodings */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/supported-encodings.js");
const nls_1 = __webpack_require__(/*! @theia/core/lib/common/nls */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/nls.js");
var EditorCommands;
(function (EditorCommands) {
    const EDITOR_CATEGORY = 'Editor';
    const EDITOR_CATEGORY_KEY = nls_1.nls.getDefaultKey(EDITOR_CATEGORY);
    EditorCommands.GOTO_LINE_COLUMN = common_1.Command.toDefaultLocalizedCommand({
        id: 'editor.action.gotoLine',
        label: 'Go to Line/Column'
    });
    /**
     * Show editor references
     */
    EditorCommands.SHOW_REFERENCES = {
        id: 'textEditor.commands.showReferences'
    };
    /**
     * Change indentation configuration (i.e., indent using tabs / spaces, and how many spaces per tab)
     */
    EditorCommands.CONFIG_INDENTATION = {
        id: 'textEditor.commands.configIndentation'
    };
    EditorCommands.CONFIG_EOL = common_1.Command.toDefaultLocalizedCommand({
        id: 'textEditor.commands.configEol',
        category: EDITOR_CATEGORY,
        label: 'Change End of Line Sequence'
    });
    EditorCommands.INDENT_USING_SPACES = common_1.Command.toDefaultLocalizedCommand({
        id: 'textEditor.commands.indentUsingSpaces',
        category: EDITOR_CATEGORY,
        label: 'Indent Using Spaces'
    });
    EditorCommands.INDENT_USING_TABS = common_1.Command.toDefaultLocalizedCommand({
        id: 'textEditor.commands.indentUsingTabs',
        category: EDITOR_CATEGORY,
        label: 'Indent Using Tabs'
    });
    EditorCommands.CHANGE_LANGUAGE = common_1.Command.toDefaultLocalizedCommand({
        id: 'textEditor.change.language',
        category: EDITOR_CATEGORY,
        label: 'Change Language Mode'
    });
    EditorCommands.CHANGE_ENCODING = common_1.Command.toDefaultLocalizedCommand({
        id: 'textEditor.change.encoding',
        category: EDITOR_CATEGORY,
        label: 'Change File Encoding'
    });
    EditorCommands.REVERT_EDITOR = common_1.Command.toDefaultLocalizedCommand({
        id: 'workbench.action.files.revert',
        category: browser_1.CommonCommands.FILE_CATEGORY,
        label: 'Revert File',
    });
    EditorCommands.REVERT_AND_CLOSE = common_1.Command.toDefaultLocalizedCommand({
        id: 'workbench.action.revertAndCloseActiveEditor',
        category: browser_1.CommonCommands.VIEW_CATEGORY,
        label: 'Revert and Close Editor'
    });
    /**
     * Command for going back to the last editor navigation location.
     */
    EditorCommands.GO_BACK = common_1.Command.toDefaultLocalizedCommand({
        id: 'textEditor.commands.go.back',
        category: EDITOR_CATEGORY,
        label: 'Go Back'
    });
    /**
     * Command for going to the forthcoming editor navigation location.
     */
    EditorCommands.GO_FORWARD = common_1.Command.toDefaultLocalizedCommand({
        id: 'textEditor.commands.go.forward',
        category: EDITOR_CATEGORY,
        label: 'Go Forward'
    });
    /**
     * Command that reveals the last text edit location, if any.
     */
    EditorCommands.GO_LAST_EDIT = common_1.Command.toDefaultLocalizedCommand({
        id: 'textEditor.commands.go.lastEdit',
        category: EDITOR_CATEGORY,
        label: 'Go to Last Edit Location'
    });
    /**
     * Command that clears the editor navigation history.
     */
    EditorCommands.CLEAR_EDITOR_HISTORY = common_1.Command.toDefaultLocalizedCommand({
        id: 'textEditor.commands.clear.history',
        category: EDITOR_CATEGORY,
        label: 'Clear Editor History'
    });
    /**
     * Command that displays all editors that are currently opened.
     */
    EditorCommands.SHOW_ALL_OPENED_EDITORS = common_1.Command.toLocalizedCommand({
        id: 'workbench.action.showAllEditors',
        category: browser_1.CommonCommands.VIEW_CATEGORY,
        label: 'Show All Opened Editors'
    }, 'theia/editor/showAllEditors', EDITOR_CATEGORY_KEY);
    /**
     * Command that toggles the minimap.
     */
    EditorCommands.TOGGLE_MINIMAP = common_1.Command.toDefaultLocalizedCommand({
        id: 'editor.action.toggleMinimap',
        category: browser_1.CommonCommands.VIEW_CATEGORY,
        label: 'Toggle Minimap'
    });
    /**
     * Command that toggles the rendering of whitespace characters in the editor.
     */
    EditorCommands.TOGGLE_RENDER_WHITESPACE = common_1.Command.toDefaultLocalizedCommand({
        id: 'editor.action.toggleRenderWhitespace',
        category: browser_1.CommonCommands.VIEW_CATEGORY,
        label: 'Toggle Render Whitespace'
    });
    /**
     * Command that toggles the word wrap.
     */
    EditorCommands.TOGGLE_WORD_WRAP = common_1.Command.toDefaultLocalizedCommand({
        id: 'editor.action.toggleWordWrap',
        label: 'View: Toggle Word Wrap'
    });
    /**
     * Command that toggles sticky scroll.
     */
    EditorCommands.TOGGLE_STICKY_SCROLL = common_1.Command.toLocalizedCommand({
        id: 'editor.action.toggleStickyScroll',
        category: browser_1.CommonCommands.VIEW_CATEGORY,
        label: 'Toggle Sticky Scroll',
    }, 'theia/editor/toggleStickyScroll', EDITOR_CATEGORY_KEY);
    /**
     * Command that re-opens the last closed editor.
     */
    EditorCommands.REOPEN_CLOSED_EDITOR = common_1.Command.toDefaultLocalizedCommand({
        id: 'workbench.action.reopenClosedEditor',
        category: browser_1.CommonCommands.VIEW_CATEGORY,
        label: 'Reopen Closed Editor'
    });
    /**
     * Opens a second instance of the current editor, splitting the view in the direction specified.
     */
    EditorCommands.SPLIT_EDITOR_RIGHT = common_1.Command.toDefaultLocalizedCommand({
        id: 'workbench.action.splitEditorRight',
        category: browser_1.CommonCommands.VIEW_CATEGORY,
        label: 'Split Editor Right'
    });
    EditorCommands.SPLIT_EDITOR_DOWN = common_1.Command.toDefaultLocalizedCommand({
        id: 'workbench.action.splitEditorDown',
        category: browser_1.CommonCommands.VIEW_CATEGORY,
        label: 'Split Editor Down'
    });
    EditorCommands.SPLIT_EDITOR_UP = common_1.Command.toDefaultLocalizedCommand({
        id: 'workbench.action.splitEditorUp',
        category: browser_1.CommonCommands.VIEW_CATEGORY,
        label: 'Split Editor Up'
    });
    EditorCommands.SPLIT_EDITOR_LEFT = common_1.Command.toDefaultLocalizedCommand({
        id: 'workbench.action.splitEditorLeft',
        category: browser_1.CommonCommands.VIEW_CATEGORY,
        label: 'Split Editor Left'
    });
    /**
     * Default horizontal split: right.
     */
    EditorCommands.SPLIT_EDITOR_HORIZONTAL = common_1.Command.toDefaultLocalizedCommand({
        id: 'workbench.action.splitEditor',
        category: browser_1.CommonCommands.VIEW_CATEGORY,
        label: 'Split Editor'
    });
    /**
     * Default vertical split: down.
     */
    EditorCommands.SPLIT_EDITOR_VERTICAL = common_1.Command.toDefaultLocalizedCommand({
        id: 'workbench.action.splitEditorOrthogonal',
        category: browser_1.CommonCommands.VIEW_CATEGORY,
        label: 'Split Editor Orthogonal'
    });
})(EditorCommands = exports.EditorCommands || (exports.EditorCommands = {}));
let EditorCommandContribution = EditorCommandContribution_1 = class EditorCommandContribution {
    init() {
        this.editorPreferences.onPreferenceChanged(e => {
            if (e.preferenceName === 'files.autoSave' && e.newValue !== 'off') {
                this.shell.saveAll();
            }
        });
    }
    registerCommands(registry) {
        registry.registerCommand(EditorCommands.SHOW_REFERENCES);
        registry.registerCommand(EditorCommands.CONFIG_INDENTATION);
        registry.registerCommand(EditorCommands.CONFIG_EOL);
        registry.registerCommand(EditorCommands.INDENT_USING_SPACES);
        registry.registerCommand(EditorCommands.INDENT_USING_TABS);
        registry.registerCommand(EditorCommands.REVERT_EDITOR);
        registry.registerCommand(EditorCommands.REVERT_AND_CLOSE);
        registry.registerCommand(EditorCommands.CHANGE_LANGUAGE, {
            isEnabled: () => this.canConfigureLanguage(),
            isVisible: () => this.canConfigureLanguage(),
            execute: () => this.configureLanguage()
        });
        registry.registerCommand(EditorCommands.CHANGE_ENCODING, {
            isEnabled: () => this.canConfigureEncoding(),
            isVisible: () => this.canConfigureEncoding(),
            execute: () => this.configureEncoding()
        });
        registry.registerCommand(EditorCommands.GO_BACK);
        registry.registerCommand(EditorCommands.GO_FORWARD);
        registry.registerCommand(EditorCommands.GO_LAST_EDIT);
        registry.registerCommand(EditorCommands.CLEAR_EDITOR_HISTORY);
        registry.registerCommand(EditorCommands.TOGGLE_MINIMAP);
        registry.registerCommand(EditorCommands.TOGGLE_RENDER_WHITESPACE);
        registry.registerCommand(EditorCommands.TOGGLE_WORD_WRAP);
        registry.registerCommand(EditorCommands.TOGGLE_STICKY_SCROLL);
        registry.registerCommand(EditorCommands.REOPEN_CLOSED_EDITOR);
        registry.registerCommand(browser_1.CommonCommands.AUTO_SAVE, {
            isToggled: () => this.isAutoSaveOn(),
            execute: () => this.toggleAutoSave()
        });
    }
    canConfigureLanguage() {
        const widget = this.editorManager.currentEditor;
        const editor = widget && widget.editor;
        return !!editor && !!this.languages.languages;
    }
    async configureLanguage() {
        var _a;
        const widget = this.editorManager.currentEditor;
        const editor = widget && widget.editor;
        if (!editor || !this.languages.languages) {
            return;
        }
        const current = editor.document.languageId;
        const items = [
            { label: nls_1.nls.localizeByDefault('Auto Detect'), value: 'autoDetect' },
            { type: 'separator', label: nls_1.nls.localizeByDefault('languages (identifier)') },
            ...(this.languages.languages.map(language => this.toQuickPickLanguage(language, current))).sort((e, e2) => e.label.localeCompare(e2.label))
        ];
        const selectedMode = await ((_a = this.quickInputService) === null || _a === void 0 ? void 0 : _a.showQuickPick(items, { placeholder: nls_1.nls.localizeByDefault('Select Language Mode') }));
        if (selectedMode && ('value' in selectedMode)) {
            if (selectedMode.value === 'autoDetect') {
                editor.detectLanguage();
            }
            else if (selectedMode.value) {
                editor.setLanguage(selectedMode.value.id);
            }
        }
    }
    canConfigureEncoding() {
        const widget = this.editorManager.currentEditor;
        const editor = widget && widget.editor;
        return !!editor;
    }
    async configureEncoding() {
        var _a, _b;
        const widget = this.editorManager.currentEditor;
        const editor = widget && widget.editor;
        if (!editor) {
            return;
        }
        const reopenWithEncodingPick = { label: nls_1.nls.localizeByDefault('Reopen with Encoding'), value: 'reopen' };
        const saveWithEncodingPick = { label: nls_1.nls.localizeByDefault('Save with Encoding'), value: 'save' };
        const actionItems = [
            reopenWithEncodingPick,
            saveWithEncodingPick
        ];
        const selectedEncoding = await ((_a = this.quickInputService) === null || _a === void 0 ? void 0 : _a.showQuickPick(actionItems, { placeholder: nls_1.nls.localizeByDefault('Select Action') }));
        if (!selectedEncoding) {
            return;
        }
        const isReopenWithEncoding = (selectedEncoding.value === reopenWithEncodingPick.value);
        const configuredEncoding = this.preferencesService.get('files.encoding', 'utf8', editor.uri.toString());
        const resource = await this.resourceProvider(editor.uri);
        const guessedEncoding = resource.guessEncoding ? await resource.guessEncoding() : undefined;
        resource.dispose();
        const encodingItems = Object.keys(supported_encodings_1.SUPPORTED_ENCODINGS)
            .sort((k1, k2) => {
            if (k1 === configuredEncoding) {
                return -1;
            }
            else if (k2 === configuredEncoding) {
                return 1;
            }
            return supported_encodings_1.SUPPORTED_ENCODINGS[k1].order - supported_encodings_1.SUPPORTED_ENCODINGS[k2].order;
        })
            .filter(k => {
            if (k === guessedEncoding && guessedEncoding !== configuredEncoding) {
                return false; // do not show encoding if it is the guessed encoding that does not match the configured
            }
            return !isReopenWithEncoding || !supported_encodings_1.SUPPORTED_ENCODINGS[k].encodeOnly; // hide those that can only be used for encoding if we are about to decode
        })
            .map(key => ({ label: supported_encodings_1.SUPPORTED_ENCODINGS[key].labelLong, value: { id: key, description: key } }));
        // Insert guessed encoding
        if (guessedEncoding && configuredEncoding !== guessedEncoding && supported_encodings_1.SUPPORTED_ENCODINGS[guessedEncoding]) {
            encodingItems.unshift({
                label: `${nls_1.nls.localizeByDefault('Guessed from content')}: ${supported_encodings_1.SUPPORTED_ENCODINGS[guessedEncoding].labelLong}`,
                value: { id: guessedEncoding, description: guessedEncoding }
            });
        }
        const selectedFileEncoding = await ((_b = this.quickInputService) === null || _b === void 0 ? void 0 : _b.showQuickPick(encodingItems, {
            placeholder: isReopenWithEncoding ?
                nls_1.nls.localizeByDefault('Select File Encoding to Reopen File') :
                nls_1.nls.localizeByDefault('Select File Encoding to Save with')
        }));
        if (!selectedFileEncoding) {
            return;
        }
        if (editor.document.dirty && isReopenWithEncoding) {
            this.messageService.info(nls_1.nls.localize('theia/editor/dirtyEncoding', 'The file is dirty. Please save it first before reopening it with another encoding.'));
            return;
        }
        else if (selectedFileEncoding.value) {
            editor.setEncoding(selectedFileEncoding.value.id, isReopenWithEncoding ? 1 /* Decode */ : 0 /* Encode */);
        }
    }
    toQuickPickLanguage(value, current) {
        const languageUri = this.toLanguageUri(value);
        const icon = this.labelProvider.getIcon(languageUri);
        const iconClasses = icon !== '' ? [icon + ' file-icon'] : undefined;
        const configured = current === value.id;
        return {
            value,
            label: value.name,
            description: nls_1.nls.localizeByDefault(`({0})${configured ? ' - Configured Language' : ''}`, value.id),
            iconClasses
        };
    }
    toLanguageUri(language) {
        const extension = language.extensions.values().next();
        if (extension.value) {
            return new uri_1.default('file:///' + extension.value);
        }
        const filename = language.filenames.values().next();
        if (filename.value) {
            return new uri_1.default('file:///' + filename.value);
        }
        return new uri_1.default('file:///.txt');
    }
    isAutoSaveOn() {
        const autoSave = this.preferencesService.get(EditorCommandContribution_1.AUTOSAVE_PREFERENCE);
        return autoSave !== 'off';
    }
    async toggleAutoSave() {
        this.preferencesService.updateValue(EditorCommandContribution_1.AUTOSAVE_PREFERENCE, this.isAutoSaveOn() ? 'off' : 'afterDelay');
    }
};
EditorCommandContribution.AUTOSAVE_PREFERENCE = 'files.autoSave';
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(browser_1.ApplicationShell),
    (0, tslib_1.__metadata)("design:type", browser_1.ApplicationShell)
], EditorCommandContribution.prototype, "shell", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(browser_1.PreferenceService),
    (0, tslib_1.__metadata)("design:type", Object)
], EditorCommandContribution.prototype, "preferencesService", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(editor_preferences_1.EditorPreferences),
    (0, tslib_1.__metadata)("design:type", Object)
], EditorCommandContribution.prototype, "editorPreferences", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(browser_1.QuickInputService),
    (0, inversify_1.optional)(),
    (0, tslib_1.__metadata)("design:type", Object)
], EditorCommandContribution.prototype, "quickInputService", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(core_1.MessageService),
    (0, tslib_1.__metadata)("design:type", core_1.MessageService)
], EditorCommandContribution.prototype, "messageService", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(browser_1.LabelProvider),
    (0, tslib_1.__metadata)("design:type", browser_1.LabelProvider)
], EditorCommandContribution.prototype, "labelProvider", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(language_service_1.LanguageService),
    (0, tslib_1.__metadata)("design:type", language_service_1.LanguageService)
], EditorCommandContribution.prototype, "languages", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(editor_manager_1.EditorManager),
    (0, tslib_1.__metadata)("design:type", editor_manager_1.EditorManager)
], EditorCommandContribution.prototype, "editorManager", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(core_1.ResourceProvider),
    (0, tslib_1.__metadata)("design:type", Function)
], EditorCommandContribution.prototype, "resourceProvider", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.postConstruct)(),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", []),
    (0, tslib_1.__metadata)("design:returntype", void 0)
], EditorCommandContribution.prototype, "init", null);
EditorCommandContribution = EditorCommandContribution_1 = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)()
], EditorCommandContribution);
exports.EditorCommandContribution = EditorCommandContribution;


/***/ }),

/***/ "../node_modules/@theia/editor/lib/browser/editor-contribution.js":
/*!************************************************************************!*\
  !*** ../node_modules/@theia/editor/lib/browser/editor-contribution.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2017 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.EditorContribution = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
const editor_manager_1 = __webpack_require__(/*! ./editor-manager */ "../node_modules/@theia/editor/lib/browser/editor-manager.js");
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../node_modules/@theia/editor/node_modules/@theia/core/shared/inversify/index.js");
const status_bar_1 = __webpack_require__(/*! @theia/core/lib/browser/status-bar/status-bar */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/status-bar/status-bar.js");
const browser_1 = __webpack_require__(/*! @theia/core/lib/browser */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/index.js");
const context_key_service_1 = __webpack_require__(/*! @theia/core/lib/browser/context-key-service */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/context-key-service.js");
const core_1 = __webpack_require__(/*! @theia/core */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/index.js");
const editor_command_1 = __webpack_require__(/*! ./editor-command */ "../node_modules/@theia/editor/lib/browser/editor-command.js");
const supported_encodings_1 = __webpack_require__(/*! @theia/core/lib/browser/supported-encodings */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/supported-encodings.js");
const nls_1 = __webpack_require__(/*! @theia/core/lib/common/nls */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/nls.js");
const current_widget_command_adapter_1 = __webpack_require__(/*! @theia/core/lib/browser/shell/current-widget-command-adapter */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/shell/current-widget-command-adapter.js");
const editor_widget_1 = __webpack_require__(/*! ./editor-widget */ "../node_modules/@theia/editor/lib/browser/editor-widget.js");
const editor_language_status_service_1 = __webpack_require__(/*! ./language-status/editor-language-status-service */ "../node_modules/@theia/editor/lib/browser/language-status/editor-language-status-service.js");
let EditorContribution = class EditorContribution {
    constructor() {
        this.toDisposeOnCurrentEditorChanged = new core_1.DisposableCollection();
    }
    onStart() {
        this.initEditorContextKeys();
        this.updateStatusBar();
        this.editorManager.onCurrentEditorChanged(() => this.updateStatusBar());
    }
    initEditorContextKeys() {
        const editorIsOpen = this.contextKeyService.createKey('editorIsOpen', false);
        const textCompareEditorVisible = this.contextKeyService.createKey('textCompareEditorVisible', false);
        const updateContextKeys = () => {
            const widgets = this.editorManager.all;
            editorIsOpen.set(!!widgets.length);
            textCompareEditorVisible.set(widgets.some(widget => browser_1.DiffUris.isDiffUri(widget.editor.uri)));
        };
        updateContextKeys();
        for (const widget of this.editorManager.all) {
            widget.disposed.connect(updateContextKeys);
        }
        this.editorManager.onCreated(widget => {
            updateContextKeys();
            widget.disposed.connect(updateContextKeys);
        });
    }
    updateStatusBar() {
        this.toDisposeOnCurrentEditorChanged.dispose();
        const widget = this.editorManager.currentEditor;
        const editor = widget && widget.editor;
        this.updateLanguageStatus(editor);
        this.updateEncodingStatus(editor);
        this.setCursorPositionStatus(editor);
        if (editor) {
            this.toDisposeOnCurrentEditorChanged.pushAll([
                editor.onLanguageChanged(() => this.updateLanguageStatus(editor)),
                editor.onEncodingChanged(() => this.updateEncodingStatus(editor)),
                editor.onCursorPositionChanged(() => this.setCursorPositionStatus(editor))
            ]);
        }
    }
    updateLanguageStatus(editor) {
        this.languageStatusService.updateLanguageStatus(editor);
    }
    updateEncodingStatus(editor) {
        if (!editor) {
            this.statusBar.removeElement('editor-status-encoding');
            return;
        }
        this.statusBar.setElement('editor-status-encoding', {
            text: supported_encodings_1.SUPPORTED_ENCODINGS[editor.getEncoding()].labelShort,
            alignment: status_bar_1.StatusBarAlignment.RIGHT,
            priority: 10,
            command: editor_command_1.EditorCommands.CHANGE_ENCODING.id,
            tooltip: nls_1.nls.localizeByDefault('Select Encoding')
        });
    }
    setCursorPositionStatus(editor) {
        if (!editor) {
            this.statusBar.removeElement('editor-status-cursor-position');
            return;
        }
        const { cursor } = editor;
        this.statusBar.setElement('editor-status-cursor-position', {
            text: nls_1.nls.localizeByDefault('Ln {0}, Col {1}', cursor.line + 1, editor.getVisibleColumn(cursor)),
            alignment: status_bar_1.StatusBarAlignment.RIGHT,
            priority: 100,
            tooltip: editor_command_1.EditorCommands.GOTO_LINE_COLUMN.label,
            command: editor_command_1.EditorCommands.GOTO_LINE_COLUMN.id
        });
    }
    registerCommands(commands) {
        commands.registerCommand(editor_command_1.EditorCommands.SHOW_ALL_OPENED_EDITORS, {
            execute: () => { var _a; return (_a = this.quickInputService) === null || _a === void 0 ? void 0 : _a.open('edt '); }
        });
        const splitHandlerFactory = (splitMode) => new current_widget_command_adapter_1.CurrentWidgetCommandAdapter(this.shell, {
            isEnabled: title => (title === null || title === void 0 ? void 0 : title.owner) instanceof editor_widget_1.EditorWidget,
            execute: async (title) => {
                if ((title === null || title === void 0 ? void 0 : title.owner) instanceof editor_widget_1.EditorWidget) {
                    const selection = title.owner.editor.selection;
                    const newEditor = await this.editorManager.openToSide(title.owner.editor.uri, { selection, widgetOptions: { mode: splitMode, ref: title.owner } });
                    const oldEditorState = title.owner.editor.storeViewState();
                    newEditor.editor.restoreViewState(oldEditorState);
                }
            }
        });
        commands.registerCommand(editor_command_1.EditorCommands.SPLIT_EDITOR_HORIZONTAL, splitHandlerFactory('split-right'));
        commands.registerCommand(editor_command_1.EditorCommands.SPLIT_EDITOR_VERTICAL, splitHandlerFactory('split-bottom'));
        commands.registerCommand(editor_command_1.EditorCommands.SPLIT_EDITOR_RIGHT, splitHandlerFactory('split-right'));
        commands.registerCommand(editor_command_1.EditorCommands.SPLIT_EDITOR_DOWN, splitHandlerFactory('split-bottom'));
        commands.registerCommand(editor_command_1.EditorCommands.SPLIT_EDITOR_UP, splitHandlerFactory('split-top'));
        commands.registerCommand(editor_command_1.EditorCommands.SPLIT_EDITOR_LEFT, splitHandlerFactory('split-left'));
    }
    registerKeybindings(keybindings) {
        keybindings.registerKeybinding({
            command: editor_command_1.EditorCommands.SHOW_ALL_OPENED_EDITORS.id,
            keybinding: 'ctrlcmd+k ctrlcmd+p'
        });
        keybindings.registerKeybinding({
            command: editor_command_1.EditorCommands.SPLIT_EDITOR_HORIZONTAL.id,
            keybinding: 'ctrlcmd+\\',
        });
        keybindings.registerKeybinding({
            command: editor_command_1.EditorCommands.SPLIT_EDITOR_VERTICAL.id,
            keybinding: 'ctrlcmd+k ctrlcmd+\\',
        });
    }
    registerMenus(registry) {
        registry.registerMenuAction(browser_1.SHELL_TABBAR_CONTEXT_SPLIT, {
            commandId: editor_command_1.EditorCommands.SPLIT_EDITOR_UP.id,
            label: nls_1.nls.localizeByDefault('Split Up'),
            order: '1',
        });
        registry.registerMenuAction(browser_1.SHELL_TABBAR_CONTEXT_SPLIT, {
            commandId: editor_command_1.EditorCommands.SPLIT_EDITOR_DOWN.id,
            label: nls_1.nls.localizeByDefault('Split Down'),
            order: '2',
        });
        registry.registerMenuAction(browser_1.SHELL_TABBAR_CONTEXT_SPLIT, {
            commandId: editor_command_1.EditorCommands.SPLIT_EDITOR_LEFT.id,
            label: nls_1.nls.localizeByDefault('Split Left'),
            order: '3',
        });
        registry.registerMenuAction(browser_1.SHELL_TABBAR_CONTEXT_SPLIT, {
            commandId: editor_command_1.EditorCommands.SPLIT_EDITOR_RIGHT.id,
            label: nls_1.nls.localizeByDefault('Split Right'),
            order: '4',
        });
    }
};
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(status_bar_1.StatusBar),
    (0, tslib_1.__metadata)("design:type", Object)
], EditorContribution.prototype, "statusBar", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(editor_manager_1.EditorManager),
    (0, tslib_1.__metadata)("design:type", editor_manager_1.EditorManager)
], EditorContribution.prototype, "editorManager", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(editor_language_status_service_1.EditorLanguageStatusService),
    (0, tslib_1.__metadata)("design:type", editor_language_status_service_1.EditorLanguageStatusService)
], EditorContribution.prototype, "languageStatusService", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(browser_1.ApplicationShell),
    (0, tslib_1.__metadata)("design:type", browser_1.ApplicationShell)
], EditorContribution.prototype, "shell", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(context_key_service_1.ContextKeyService),
    (0, tslib_1.__metadata)("design:type", Object)
], EditorContribution.prototype, "contextKeyService", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(browser_1.QuickInputService),
    (0, inversify_1.optional)(),
    (0, tslib_1.__metadata)("design:type", Object)
], EditorContribution.prototype, "quickInputService", void 0);
EditorContribution = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)()
], EditorContribution);
exports.EditorContribution = EditorContribution;


/***/ }),

/***/ "../node_modules/@theia/editor/lib/browser/editor-frontend-module.js":
/*!***************************************************************************!*\
  !*** ../node_modules/@theia/editor/lib/browser/editor-frontend-module.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
__webpack_require__(/*! ../../src/browser/style/index.css */ "../node_modules/@theia/editor/src/browser/style/index.css");
__webpack_require__(/*! ../../src/browser/language-status/editor-language-status.css */ "../node_modules/@theia/editor/src/browser/language-status/editor-language-status.css");
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../node_modules/@theia/editor/node_modules/@theia/core/shared/inversify/index.js");
const common_1 = __webpack_require__(/*! @theia/core/lib/common */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/index.js");
const browser_1 = __webpack_require__(/*! @theia/core/lib/browser */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/index.js");
const browser_2 = __webpack_require__(/*! @theia/variable-resolver/lib/browser */ "../node_modules/@theia/editor/node_modules/@theia/variable-resolver/lib/browser/index.js");
const editor_manager_1 = __webpack_require__(/*! ./editor-manager */ "../node_modules/@theia/editor/lib/browser/editor-manager.js");
const editor_contribution_1 = __webpack_require__(/*! ./editor-contribution */ "../node_modules/@theia/editor/lib/browser/editor-contribution.js");
const editor_menu_1 = __webpack_require__(/*! ./editor-menu */ "../node_modules/@theia/editor/lib/browser/editor-menu.js");
const editor_command_1 = __webpack_require__(/*! ./editor-command */ "../node_modules/@theia/editor/lib/browser/editor-command.js");
const editor_keybinding_1 = __webpack_require__(/*! ./editor-keybinding */ "../node_modules/@theia/editor/lib/browser/editor-keybinding.js");
const editor_preferences_1 = __webpack_require__(/*! ./editor-preferences */ "../node_modules/@theia/editor/lib/browser/editor-preferences.js");
const editor_widget_factory_1 = __webpack_require__(/*! ./editor-widget-factory */ "../node_modules/@theia/editor/lib/browser/editor-widget-factory.js");
const editor_navigation_contribution_1 = __webpack_require__(/*! ./editor-navigation-contribution */ "../node_modules/@theia/editor/lib/browser/editor-navigation-contribution.js");
const navigation_location_updater_1 = __webpack_require__(/*! ./navigation/navigation-location-updater */ "../node_modules/@theia/editor/lib/browser/navigation/navigation-location-updater.js");
const navigation_location_service_1 = __webpack_require__(/*! ./navigation/navigation-location-service */ "../node_modules/@theia/editor/lib/browser/navigation/navigation-location-service.js");
const navigation_location_similarity_1 = __webpack_require__(/*! ./navigation/navigation-location-similarity */ "../node_modules/@theia/editor/lib/browser/navigation/navigation-location-similarity.js");
const editor_variable_contribution_1 = __webpack_require__(/*! ./editor-variable-contribution */ "../node_modules/@theia/editor/lib/browser/editor-variable-contribution.js");
const quick_access_1 = __webpack_require__(/*! @theia/core/lib/browser/quick-input/quick-access */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/quick-input/quick-access.js");
const quick_editor_service_1 = __webpack_require__(/*! ./quick-editor-service */ "../node_modules/@theia/editor/lib/browser/quick-editor-service.js");
const editor_language_status_service_1 = __webpack_require__(/*! ./language-status/editor-language-status-service */ "../node_modules/@theia/editor/lib/browser/language-status/editor-language-status-service.js");
const editor_linenumber_contribution_1 = __webpack_require__(/*! ./editor-linenumber-contribution */ "../node_modules/@theia/editor/lib/browser/editor-linenumber-contribution.js");
const undo_redo_service_1 = __webpack_require__(/*! ./undo-redo-service */ "../node_modules/@theia/editor/lib/browser/undo-redo-service.js");
exports["default"] = new inversify_1.ContainerModule(bind => {
    (0, editor_preferences_1.bindEditorPreferences)(bind);
    bind(editor_widget_factory_1.EditorWidgetFactory).toSelf().inSingletonScope();
    bind(browser_1.WidgetFactory).toService(editor_widget_factory_1.EditorWidgetFactory);
    bind(editor_manager_1.EditorManager).toSelf().inSingletonScope();
    bind(browser_1.OpenHandler).toService(editor_manager_1.EditorManager);
    bind(editor_command_1.EditorCommandContribution).toSelf().inSingletonScope();
    bind(common_1.CommandContribution).toService(editor_command_1.EditorCommandContribution);
    bind(editor_menu_1.EditorMenuContribution).toSelf().inSingletonScope();
    bind(common_1.MenuContribution).toService(editor_menu_1.EditorMenuContribution);
    bind(editor_keybinding_1.EditorKeybindingContribution).toSelf().inSingletonScope();
    bind(browser_1.KeybindingContribution).toService(editor_keybinding_1.EditorKeybindingContribution);
    bind(editor_contribution_1.EditorContribution).toSelf().inSingletonScope();
    bind(browser_1.FrontendApplicationContribution).toService(editor_contribution_1.EditorContribution);
    bind(editor_language_status_service_1.EditorLanguageStatusService).toSelf().inSingletonScope();
    bind(editor_linenumber_contribution_1.EditorLineNumberContribution).toSelf().inSingletonScope();
    bind(browser_1.FrontendApplicationContribution).toService(editor_linenumber_contribution_1.EditorLineNumberContribution);
    bind(editor_navigation_contribution_1.EditorNavigationContribution).toSelf().inSingletonScope();
    bind(browser_1.FrontendApplicationContribution).toService(editor_navigation_contribution_1.EditorNavigationContribution);
    bind(navigation_location_service_1.NavigationLocationService).toSelf().inSingletonScope();
    bind(navigation_location_updater_1.NavigationLocationUpdater).toSelf().inSingletonScope();
    bind(navigation_location_similarity_1.NavigationLocationSimilarity).toSelf().inSingletonScope();
    bind(browser_2.VariableContribution).to(editor_variable_contribution_1.EditorVariableContribution).inSingletonScope();
    [common_1.CommandContribution, browser_1.KeybindingContribution, common_1.MenuContribution].forEach(serviceIdentifier => {
        bind(serviceIdentifier).toService(editor_contribution_1.EditorContribution);
    });
    bind(quick_editor_service_1.QuickEditorService).toSelf().inSingletonScope();
    bind(quick_access_1.QuickAccessContribution).to(quick_editor_service_1.QuickEditorService);
    bind(editor_manager_1.CurrentEditorAccess).toSelf().inSingletonScope();
    bind(editor_manager_1.ActiveEditorAccess).toSelf().inSingletonScope();
    bind(editor_manager_1.EditorAccess).to(editor_manager_1.CurrentEditorAccess).inSingletonScope().whenTargetNamed(editor_manager_1.EditorAccess.CURRENT);
    bind(editor_manager_1.EditorAccess).to(editor_manager_1.ActiveEditorAccess).inSingletonScope().whenTargetNamed(editor_manager_1.EditorAccess.ACTIVE);
    bind(undo_redo_service_1.UndoRedoService).toSelf().inSingletonScope();
});


/***/ }),

/***/ "../node_modules/@theia/editor/lib/browser/editor-generated-preference-schema.js":
/*!***************************************************************************************!*\
  !*** ../node_modules/@theia/editor/lib/browser/editor-generated-preference-schema.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (C) 2022 Ericsson and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.editorGeneratedPreferenceProperties = void 0;
const core_1 = __webpack_require__(/*! @theia/core */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/index.js");
/* eslint-disable @typescript-eslint/quotes,max-len,no-null/no-null */
/**
 * Please do not modify this file by hand. It should be generated automatically
 * during a Monaco uplift using the command registered by monaco-editor-preference-extractor.ts
 * The only manual work required is fixing preferences with type 'array' or 'object'.
 */
exports.editorGeneratedPreferenceProperties = {
    "editor.tabSize": {
        "type": "number",
        "default": 4,
        "minimum": 1,
        "markdownDescription": core_1.nls.localize("theia/editor/editor.tabSize", "The number of spaces a tab is equal to. This setting is overridden based on the file contents when `#editor.detectIndentation#` is on."),
        "restricted": false
    },
    "editor.indentSize": {
        "anyOf": [
            {
                "type": "string",
                "enum": [
                    "tabSize"
                ]
            },
            {
                "type": "number",
                "minimum": 1
            }
        ],
        "default": "tabSize",
        "markdownDescription": core_1.nls.localizeByDefault("The number of spaces used for indentation or `\"tabSize\"` to use the value from `#editor.tabSize#`. This setting is overridden based on the file contents when `#editor.detectIndentation#` is on."),
        "restricted": false
    },
    "editor.insertSpaces": {
        "type": "boolean",
        "default": true,
        "markdownDescription": core_1.nls.localize("theia/editor/editor.insertSpaces", "Insert spaces when pressing `Tab`. This setting is overridden based on the file contents when `#editor.detectIndentation#` is on."),
        "restricted": false
    },
    "editor.detectIndentation": {
        "type": "boolean",
        "default": true,
        "markdownDescription": core_1.nls.localize("theia/editor/editor.detectIndentation", "Controls whether `#editor.tabSize#` and `#editor.insertSpaces#` will be automatically detected when a file is opened based on the file contents."),
        "restricted": false
    },
    "editor.trimAutoWhitespace": {
        "type": "boolean",
        "default": true,
        "description": core_1.nls.localizeByDefault("Remove trailing auto inserted whitespace."),
        "restricted": false
    },
    "editor.largeFileOptimizations": {
        "type": "boolean",
        "default": true,
        "description": core_1.nls.localizeByDefault("Special handling for large files to disable certain memory intensive features."),
        "restricted": false
    },
    "editor.wordBasedSuggestions": {
        "type": "boolean",
        "default": true,
        "description": core_1.nls.localizeByDefault("Controls whether completions should be computed based on words in the document."),
        "restricted": false
    },
    "editor.wordBasedSuggestionsMode": {
        "enum": [
            "currentDocument",
            "matchingDocuments",
            "allDocuments"
        ],
        "default": "matchingDocuments",
        "enumDescriptions": [
            core_1.nls.localizeByDefault("Only suggest words from the active document."),
            core_1.nls.localizeByDefault("Suggest words from all open documents of the same language."),
            core_1.nls.localizeByDefault("Suggest words from all open documents.")
        ],
        "description": core_1.nls.localizeByDefault("Controls from which documents word based completions are computed."),
        "restricted": false
    },
    "editor.semanticHighlighting.enabled": {
        "enum": [
            true,
            false,
            "configuredByTheme"
        ],
        "enumDescriptions": [
            core_1.nls.localizeByDefault("Semantic highlighting enabled for all color themes."),
            core_1.nls.localizeByDefault("Semantic highlighting disabled for all color themes."),
            core_1.nls.localizeByDefault("Semantic highlighting is configured by the current color theme's `semanticHighlighting` setting.")
        ],
        "default": "configuredByTheme",
        "description": core_1.nls.localizeByDefault("Controls whether the semanticHighlighting is shown for the languages that support it."),
        "restricted": false
    },
    "editor.stablePeek": {
        "type": "boolean",
        "default": false,
        "markdownDescription": core_1.nls.localizeByDefault("Keep peek editors open even when double-clicking their content or when hitting `Escape`."),
        "restricted": false
    },
    "editor.maxTokenizationLineLength": {
        "type": "integer",
        "default": 20000,
        "description": core_1.nls.localizeByDefault("Lines above this length will not be tokenized for performance reasons"),
        "restricted": false
    },
    "editor.experimental.asyncTokenization": {
        "type": "boolean",
        "default": false,
        "description": core_1.nls.localizeByDefault("Controls whether the tokenization should happen asynchronously on a web worker."),
        "tags": [
            "experimental"
        ],
        "restricted": false
    },
    "editor.experimental.asyncTokenizationLogging": {
        "type": "boolean",
        "default": false,
        "description": core_1.nls.localizeByDefault("Controls whether async tokenization should be logged. For debugging only."),
        "restricted": false
    },
    "editor.experimental.asyncTokenizationVerification": {
        "type": "boolean",
        "default": false,
        "description": core_1.nls.localizeByDefault("Controls whether async tokenization should be verified against legacy background tokenization. Might slow down tokenization. For debugging only."),
        "tags": [
            "experimental"
        ],
        "restricted": false
    },
    "editor.language.brackets": {
        "type": [
            "array",
            "null"
        ],
        "default": null,
        "description": core_1.nls.localizeByDefault("Defines the bracket symbols that increase or decrease the indentation."),
        "items": {
            "type": "array",
            "items": [
                {
                    "type": "string",
                    "description": core_1.nls.localizeByDefault("The opening bracket character or string sequence.")
                },
                {
                    "type": "string",
                    "description": core_1.nls.localizeByDefault("The closing bracket character or string sequence.")
                }
            ]
        },
        "restricted": false
    },
    "editor.language.colorizedBracketPairs": {
        "type": [
            "array",
            "null"
        ],
        "default": null,
        "description": core_1.nls.localizeByDefault("Defines the bracket pairs that are colorized by their nesting level if bracket pair colorization is enabled."),
        "items": {
            "type": "array",
            "items": [
                {
                    "type": "string",
                    "description": core_1.nls.localizeByDefault("The opening bracket character or string sequence.")
                },
                {
                    "type": "string",
                    "description": core_1.nls.localizeByDefault("The closing bracket character or string sequence.")
                }
            ]
        },
        "restricted": false
    },
    "diffEditor.maxComputationTime": {
        "type": "number",
        "default": 5000,
        "description": core_1.nls.localizeByDefault("Timeout in milliseconds after which diff computation is cancelled. Use 0 for no timeout."),
        "restricted": false
    },
    "diffEditor.maxFileSize": {
        "type": "number",
        "default": 50,
        "description": core_1.nls.localizeByDefault("Maximum file size in MB for which to compute diffs. Use 0 for no limit."),
        "restricted": false
    },
    "diffEditor.renderSideBySide": {
        "type": "boolean",
        "default": true,
        "description": core_1.nls.localizeByDefault("Controls whether the diff editor shows the diff side by side or inline."),
        "restricted": false
    },
    "diffEditor.renderSideBySideInlineBreakpoint": {
        "type": "number",
        "default": 900,
        "description": core_1.nls.localizeByDefault("If the diff editor width is smaller than this value, the inline view is used."),
        "restricted": false
    },
    "diffEditor.useInlineViewWhenSpaceIsLimited": {
        "type": "boolean",
        "default": true,
        "description": core_1.nls.localizeByDefault("If enabled and the editor width is too small, the inline view is used."),
        "restricted": false
    },
    "diffEditor.renderMarginRevertIcon": {
        "type": "boolean",
        "default": true,
        "description": core_1.nls.localizeByDefault("When enabled, the diff editor shows arrows in its glyph margin to revert changes."),
        "restricted": false
    },
    "diffEditor.ignoreTrimWhitespace": {
        "type": "boolean",
        "default": true,
        "description": core_1.nls.localizeByDefault("When enabled, the diff editor ignores changes in leading or trailing whitespace."),
        "restricted": false
    },
    "diffEditor.renderIndicators": {
        "type": "boolean",
        "default": true,
        "description": core_1.nls.localizeByDefault("Controls whether the diff editor shows +/- indicators for added/removed changes."),
        "restricted": false
    },
    "diffEditor.codeLens": {
        "type": "boolean",
        "default": false,
        "description": core_1.nls.localizeByDefault("Controls whether the editor shows CodeLens."),
        "restricted": false
    },
    "diffEditor.wordWrap": {
        "type": "string",
        "enum": [
            "off",
            "on",
            "inherit"
        ],
        "default": "inherit",
        "markdownEnumDescriptions": [
            core_1.nls.localizeByDefault("Lines will never wrap."),
            core_1.nls.localizeByDefault("Lines will wrap at the viewport width."),
            core_1.nls.localize("theia/editor/diffEditor.wordWrap2", "Lines will wrap according to the `#editor.wordWrap#` setting.")
        ],
        "restricted": false
    },
    "diffEditor.diffAlgorithm": {
        "type": "string",
        "enum": [
            "legacy",
            "advanced"
        ],
        "default": "advanced",
        "markdownEnumDescriptions": [
            core_1.nls.localizeByDefault("Uses the legacy diffing algorithm."),
            core_1.nls.localizeByDefault("Uses the advanced diffing algorithm.")
        ],
        "tags": [
            "experimental"
        ],
        "restricted": false
    },
    "diffEditor.hideUnchangedRegions.enabled": {
        "type": "boolean",
        "default": false,
        "markdownDescription": core_1.nls.localizeByDefault("Controls whether the diff editor shows unchanged regions."),
        "restricted": false
    },
    "diffEditor.hideUnchangedRegions.revealLineCount": {
        "type": "integer",
        "default": 20,
        "markdownDescription": core_1.nls.localizeByDefault("Controls how many lines are used for unchanged regions."),
        "minimum": 1,
        "restricted": false
    },
    "diffEditor.hideUnchangedRegions.minimumLineCount": {
        "type": "integer",
        "default": 3,
        "markdownDescription": core_1.nls.localizeByDefault("Controls how many lines are used as a minimum for unchanged regions."),
        "minimum": 1,
        "restricted": false
    },
    "diffEditor.hideUnchangedRegions.contextLineCount": {
        "type": "integer",
        "default": 3,
        "markdownDescription": core_1.nls.localizeByDefault("Controls how many lines are used as context when comparing unchanged regions."),
        "minimum": 1,
        "restricted": false
    },
    "diffEditor.experimental.showMoves": {
        "type": "boolean",
        "default": false,
        "markdownDescription": core_1.nls.localizeByDefault("Controls whether the diff editor should show detected code moves."),
        "restricted": false
    },
    "diffEditor.experimental.showEmptyDecorations": {
        "type": "boolean",
        "default": true,
        "description": core_1.nls.localizeByDefault("Controls whether the diff editor shows empty decorations to see where characters got inserted or deleted."),
        "restricted": false
    },
    "editor.acceptSuggestionOnCommitCharacter": {
        "markdownDescription": core_1.nls.localizeByDefault("Controls whether suggestions should be accepted on commit characters. For example, in JavaScript, the semi-colon (`;`) can be a commit character that accepts a suggestion and types that character."),
        "type": "boolean",
        "default": true,
        "restricted": false
    },
    "editor.acceptSuggestionOnEnter": {
        "markdownEnumDescriptions": [
            "",
            core_1.nls.localizeByDefault("Only accept a suggestion with `Enter` when it makes a textual change."),
            ""
        ],
        "markdownDescription": core_1.nls.localizeByDefault("Controls whether suggestions should be accepted on `Enter`, in addition to `Tab`. Helps to avoid ambiguity between inserting new lines or accepting suggestions."),
        "type": "string",
        "enum": [
            "on",
            "smart",
            "off"
        ],
        "default": "on",
        "restricted": false
    },
    "editor.accessibilitySupport": {
        "type": "string",
        "enum": [
            "auto",
            "on",
            "off"
        ],
        "enumDescriptions": [
            core_1.nls.localize("theia/editor/editor.accessibilitySupport0", "Use platform APIs to detect when a Screen Reader is attached"),
            core_1.nls.localize("theia/editor/editor.accessibilitySupport1", "Optimize for usage with a Screen Reader"),
            core_1.nls.localize("theia/editor/editor.accessibilitySupport2", "Assume a screen reader is not attached")
        ],
        "default": "auto",
        "tags": [
            "accessibility"
        ],
        "description": core_1.nls.localizeByDefault("Controls if the UI should run in a mode where it is optimized for screen readers."),
        "restricted": false
    },
    "editor.accessibilityPageSize": {
        "description": core_1.nls.localizeByDefault("Controls the number of lines in the editor that can be read out by a screen reader at once. When we detect a screen reader we automatically set the default to be 500. Warning: this has a performance implication for numbers larger than the default."),
        "tags": [
            "accessibility"
        ],
        "type": "integer",
        "default": 10,
        "minimum": 1,
        "maximum": 1073741824,
        "restricted": false
    },
    "editor.autoClosingBrackets": {
        "enumDescriptions": [
            "",
            core_1.nls.localizeByDefault("Use language configurations to determine when to autoclose brackets."),
            core_1.nls.localizeByDefault("Autoclose brackets only when the cursor is to the left of whitespace."),
            ""
        ],
        "description": core_1.nls.localizeByDefault("Controls whether the editor should automatically close brackets after the user adds an opening bracket."),
        "type": "string",
        "enum": [
            "always",
            "languageDefined",
            "beforeWhitespace",
            "never"
        ],
        "default": "languageDefined",
        "restricted": false
    },
    "editor.autoClosingComments": {
        "enumDescriptions": [
            "",
            core_1.nls.localizeByDefault("Use language configurations to determine when to autoclose comments."),
            core_1.nls.localizeByDefault("Autoclose comments only when the cursor is to the left of whitespace."),
            ""
        ],
        "description": core_1.nls.localizeByDefault("Controls whether the editor should automatically close comments after the user adds an opening comment."),
        "type": "string",
        "enum": [
            "always",
            "languageDefined",
            "beforeWhitespace",
            "never"
        ],
        "default": "languageDefined",
        "restricted": false
    },
    "editor.screenReaderAnnounceInlineSuggestion": {
        "description": core_1.nls.localizeByDefault("Control whether inline suggestions are announced by a screen reader."),
        "tags": [
            "accessibility"
        ],
        "type": "boolean",
        "default": true,
        "restricted": false
    },
    "editor.autoClosingDelete": {
        "enumDescriptions": [
            "",
            core_1.nls.localizeByDefault("Remove adjacent closing quotes or brackets only if they were automatically inserted."),
            ""
        ],
        "description": core_1.nls.localizeByDefault("Controls whether the editor should remove adjacent closing quotes or brackets when deleting."),
        "type": "string",
        "enum": [
            "always",
            "auto",
            "never"
        ],
        "default": "auto",
        "restricted": false
    },
    "editor.autoClosingOvertype": {
        "enumDescriptions": [
            "",
            core_1.nls.localizeByDefault("Type over closing quotes or brackets only if they were automatically inserted."),
            ""
        ],
        "description": core_1.nls.localizeByDefault("Controls whether the editor should type over closing quotes or brackets."),
        "type": "string",
        "enum": [
            "always",
            "auto",
            "never"
        ],
        "default": "auto",
        "restricted": false
    },
    "editor.autoClosingQuotes": {
        "enumDescriptions": [
            "",
            core_1.nls.localizeByDefault("Use language configurations to determine when to autoclose quotes."),
            core_1.nls.localizeByDefault("Autoclose quotes only when the cursor is to the left of whitespace."),
            ""
        ],
        "description": core_1.nls.localizeByDefault("Controls whether the editor should automatically close quotes after the user adds an opening quote."),
        "type": "string",
        "enum": [
            "always",
            "languageDefined",
            "beforeWhitespace",
            "never"
        ],
        "default": "languageDefined",
        "restricted": false
    },
    "editor.autoIndent": {
        "enumDescriptions": [
            core_1.nls.localizeByDefault("The editor will not insert indentation automatically."),
            core_1.nls.localizeByDefault("The editor will keep the current line's indentation."),
            core_1.nls.localizeByDefault("The editor will keep the current line's indentation and honor language defined brackets."),
            core_1.nls.localizeByDefault("The editor will keep the current line's indentation, honor language defined brackets and invoke special onEnterRules defined by languages."),
            core_1.nls.localizeByDefault("The editor will keep the current line's indentation, honor language defined brackets, invoke special onEnterRules defined by languages, and honor indentationRules defined by languages.")
        ],
        "description": core_1.nls.localizeByDefault("Controls whether the editor should automatically adjust the indentation when users type, paste, move or indent lines."),
        "type": "string",
        "enum": [
            "none",
            "keep",
            "brackets",
            "advanced",
            "full"
        ],
        "default": "full",
        "restricted": false
    },
    "editor.autoSurround": {
        "enumDescriptions": [
            core_1.nls.localizeByDefault("Use language configurations to determine when to automatically surround selections."),
            core_1.nls.localizeByDefault("Surround with quotes but not brackets."),
            core_1.nls.localizeByDefault("Surround with brackets but not quotes."),
            ""
        ],
        "description": core_1.nls.localizeByDefault("Controls whether the editor should automatically surround selections when typing quotes or brackets."),
        "type": "string",
        "enum": [
            "languageDefined",
            "quotes",
            "brackets",
            "never"
        ],
        "default": "languageDefined",
        "restricted": false
    },
    "editor.bracketPairColorization.enabled": {
        "type": "boolean",
        "default": true,
        "markdownDescription": core_1.nls.localize("theia/editor/editor.bracketPairColorization.enabled", "Controls whether bracket pair colorization is enabled or not. Use `#workbench.colorCustomizations#` to override the bracket highlight colors."),
        "restricted": false
    },
    "editor.bracketPairColorization.independentColorPoolPerBracketType": {
        "type": "boolean",
        "default": false,
        "description": core_1.nls.localizeByDefault("Controls whether each bracket type has its own independent color pool."),
        "restricted": false
    },
    "editor.guides.bracketPairs": {
        "type": [
            "boolean",
            "string"
        ],
        "enum": [
            true,
            "active",
            false
        ],
        "enumDescriptions": [
            core_1.nls.localizeByDefault("Enables bracket pair guides."),
            core_1.nls.localizeByDefault("Enables bracket pair guides only for the active bracket pair."),
            core_1.nls.localizeByDefault("Disables bracket pair guides.")
        ],
        "default": false,
        "description": core_1.nls.localizeByDefault("Controls whether bracket pair guides are enabled or not."),
        "restricted": false
    },
    "editor.guides.bracketPairsHorizontal": {
        "type": [
            "boolean",
            "string"
        ],
        "enum": [
            true,
            "active",
            false
        ],
        "enumDescriptions": [
            core_1.nls.localizeByDefault("Enables horizontal guides as addition to vertical bracket pair guides."),
            core_1.nls.localizeByDefault("Enables horizontal guides only for the active bracket pair."),
            core_1.nls.localizeByDefault("Disables horizontal bracket pair guides.")
        ],
        "default": "active",
        "description": core_1.nls.localizeByDefault("Controls whether horizontal bracket pair guides are enabled or not."),
        "restricted": false
    },
    "editor.guides.highlightActiveBracketPair": {
        "type": "boolean",
        "default": true,
        "description": core_1.nls.localizeByDefault("Controls whether the editor should highlight the active bracket pair."),
        "restricted": false
    },
    "editor.guides.indentation": {
        "type": "boolean",
        "default": true,
        "description": core_1.nls.localizeByDefault("Controls whether the editor should render indent guides."),
        "restricted": false
    },
    "editor.guides.highlightActiveIndentation": {
        "type": [
            "boolean",
            "string"
        ],
        "enum": [
            true,
            "always",
            false
        ],
        "enumDescriptions": [
            core_1.nls.localizeByDefault("Highlights the active indent guide."),
            core_1.nls.localizeByDefault("Highlights the active indent guide even if bracket guides are highlighted."),
            core_1.nls.localizeByDefault("Do not highlight the active indent guide.")
        ],
        "default": true,
        "description": core_1.nls.localizeByDefault("Controls whether the editor should highlight the active indent guide."),
        "restricted": false
    },
    "editor.codeLens": {
        "description": core_1.nls.localizeByDefault("Controls whether the editor shows CodeLens."),
        "type": "boolean",
        "default": true,
        "restricted": false
    },
    "editor.codeLensFontFamily": {
        "description": core_1.nls.localizeByDefault("Controls the font family for CodeLens."),
        "type": "string",
        "default": "",
        "restricted": false
    },
    "editor.codeLensFontSize": {
        "type": "integer",
        "default": 0,
        "minimum": 0,
        "maximum": 100,
        "markdownDescription": core_1.nls.localizeByDefault("Controls the font size in pixels for CodeLens. When set to 0, 90% of `#editor.fontSize#` is used."),
        "restricted": false
    },
    "editor.colorDecorators": {
        "description": core_1.nls.localizeByDefault("Controls whether the editor should render the inline color decorators and color picker."),
        "type": "boolean",
        "default": true,
        "restricted": false
    },
    "editor.colorDecoratorsLimit": {
        "markdownDescription": core_1.nls.localizeByDefault("Controls the max number of color decorators that can be rendered in an editor at once."),
        "type": "integer",
        "default": 500,
        "minimum": 1,
        "maximum": 1000000,
        "restricted": false
    },
    "editor.columnSelection": {
        "description": core_1.nls.localizeByDefault("Enable that the selection with the mouse and keys is doing column selection."),
        "type": "boolean",
        "default": false,
        "restricted": false
    },
    "editor.comments.insertSpace": {
        "type": "boolean",
        "default": true,
        "description": core_1.nls.localizeByDefault("Controls whether a space character is inserted when commenting."),
        "restricted": false
    },
    "editor.comments.ignoreEmptyLines": {
        "type": "boolean",
        "default": true,
        "description": core_1.nls.localizeByDefault("Controls if empty lines should be ignored with toggle, add or remove actions for line comments."),
        "restricted": false
    },
    "editor.copyWithSyntaxHighlighting": {
        "description": core_1.nls.localizeByDefault("Controls whether syntax highlighting should be copied into the clipboard."),
        "type": "boolean",
        "default": true,
        "restricted": false
    },
    "editor.cursorBlinking": {
        "description": core_1.nls.localizeByDefault("Control the cursor animation style."),
        "type": "string",
        "enum": [
            "blink",
            "smooth",
            "phase",
            "expand",
            "solid"
        ],
        "default": "blink",
        "restricted": false
    },
    "editor.cursorSmoothCaretAnimation": {
        "enumDescriptions": [
            core_1.nls.localizeByDefault("Smooth caret animation is disabled."),
            core_1.nls.localizeByDefault("Smooth caret animation is enabled only when the user moves the cursor with an explicit gesture."),
            core_1.nls.localizeByDefault("Smooth caret animation is always enabled.")
        ],
        "description": core_1.nls.localizeByDefault("Controls whether the smooth caret animation should be enabled."),
        "type": "string",
        "enum": [
            "off",
            "explicit",
            "on"
        ],
        "default": "off",
        "restricted": false
    },
    "editor.cursorStyle": {
        "description": core_1.nls.localizeByDefault("Controls the cursor style."),
        "type": "string",
        "enum": [
            "line",
            "block",
            "underline",
            "line-thin",
            "block-outline",
            "underline-thin"
        ],
        "default": "line",
        "restricted": false
    },
    "editor.cursorSurroundingLines": {
        "description": core_1.nls.localizeByDefault("Controls the minimal number of visible leading lines (minimum 0) and trailing lines (minimum 1) surrounding the cursor. Known as 'scrollOff' or 'scrollOffset' in some other editors."),
        "type": "integer",
        "default": 0,
        "minimum": 0,
        "maximum": 1073741824,
        "restricted": false
    },
    "editor.cursorSurroundingLinesStyle": {
        "enumDescriptions": [
            core_1.nls.localizeByDefault("`cursorSurroundingLines` is enforced only when triggered via the keyboard or API."),
            core_1.nls.localizeByDefault("`cursorSurroundingLines` is enforced always.")
        ],
        "markdownDescription": core_1.nls.localizeByDefault("Controls when `#cursorSurroundingLines#` should be enforced."),
        "type": "string",
        "enum": [
            "default",
            "all"
        ],
        "default": "default",
        "restricted": false
    },
    "editor.cursorWidth": {
        "markdownDescription": core_1.nls.localizeByDefault("Controls the width of the cursor when `#editor.cursorStyle#` is set to `line`."),
        "type": "integer",
        "default": 0,
        "minimum": 0,
        "maximum": 1073741824,
        "restricted": false
    },
    "editor.dragAndDrop": {
        "description": core_1.nls.localizeByDefault("Controls whether the editor should allow moving selections via drag and drop."),
        "type": "boolean",
        "default": true,
        "restricted": false
    },
    "editor.dropIntoEditor.enabled": {
        "type": "boolean",
        "default": true,
        "markdownDescription": core_1.nls.localizeByDefault("Controls whether you can drag and drop a file into a text editor by holding down `shift` (instead of opening the file in an editor)."),
        "restricted": false
    },
    "editor.dropIntoEditor.showDropSelector": {
        "type": "string",
        "markdownDescription": core_1.nls.localizeByDefault("Controls if a widget is shown when dropping files into the editor. This widget lets you control how the file is dropped."),
        "enum": [
            "afterDrop",
            "never"
        ],
        "enumDescriptions": [
            core_1.nls.localizeByDefault("Show the drop selector widget after a file is dropped into the editor."),
            core_1.nls.localizeByDefault("Never show the drop selector widget. Instead the default drop provider is always used.")
        ],
        "default": "afterDrop",
        "restricted": false
    },
    "editor.emptySelectionClipboard": {
        "description": core_1.nls.localizeByDefault("Controls whether copying without a selection copies the current line."),
        "type": "boolean",
        "default": true,
        "restricted": false
    },
    "editor.experimentalWhitespaceRendering": {
        "enumDescriptions": [
            core_1.nls.localizeByDefault("Use a new rendering method with svgs."),
            core_1.nls.localizeByDefault("Use a new rendering method with font characters."),
            core_1.nls.localizeByDefault("Use the stable rendering method.")
        ],
        "description": core_1.nls.localizeByDefault("Controls whether whitespace is rendered with a new, experimental method."),
        "type": "string",
        "enum": [
            "svg",
            "font",
            "off"
        ],
        "default": "svg",
        "restricted": false
    },
    "editor.fastScrollSensitivity": {
        "markdownDescription": core_1.nls.localizeByDefault("Scrolling speed multiplier when pressing `Alt`."),
        "type": "number",
        "default": 5,
        "restricted": false
    },
    "editor.find.cursorMoveOnType": {
        "type": "boolean",
        "default": true,
        "description": core_1.nls.localizeByDefault("Controls whether the cursor should jump to find matches while typing."),
        "restricted": false
    },
    "editor.find.seedSearchStringFromSelection": {
        "type": "string",
        "enum": [
            "never",
            "always",
            "selection"
        ],
        "default": "always",
        "enumDescriptions": [
            core_1.nls.localizeByDefault("Never seed search string from the editor selection."),
            core_1.nls.localizeByDefault("Always seed search string from the editor selection, including word at cursor position."),
            core_1.nls.localizeByDefault("Only seed search string from the editor selection.")
        ],
        "description": core_1.nls.localizeByDefault("Controls whether the search string in the Find Widget is seeded from the editor selection."),
        "restricted": false
    },
    "editor.find.autoFindInSelection": {
        "type": "string",
        "enum": [
            "never",
            "always",
            "multiline"
        ],
        "default": "never",
        "enumDescriptions": [
            core_1.nls.localizeByDefault("Never turn on Find in Selection automatically (default)."),
            core_1.nls.localizeByDefault("Always turn on Find in Selection automatically."),
            core_1.nls.localizeByDefault("Turn on Find in Selection automatically when multiple lines of content are selected.")
        ],
        "description": core_1.nls.localizeByDefault("Controls the condition for turning on Find in Selection automatically."),
        "restricted": false
    },
    "editor.find.addExtraSpaceOnTop": {
        "type": "boolean",
        "default": true,
        "description": core_1.nls.localizeByDefault("Controls whether the Find Widget should add extra lines on top of the editor. When true, you can scroll beyond the first line when the Find Widget is visible."),
        "restricted": false
    },
    "editor.find.loop": {
        "type": "boolean",
        "default": true,
        "description": core_1.nls.localizeByDefault("Controls whether the search automatically restarts from the beginning (or the end) when no further matches can be found."),
        "restricted": false
    },
    "editor.folding": {
        "description": core_1.nls.localizeByDefault("Controls whether the editor has code folding enabled."),
        "type": "boolean",
        "default": true,
        "restricted": false
    },
    "editor.foldingStrategy": {
        "enumDescriptions": [
            core_1.nls.localizeByDefault("Use a language-specific folding strategy if available, else the indentation-based one."),
            core_1.nls.localizeByDefault("Use the indentation-based folding strategy.")
        ],
        "description": core_1.nls.localizeByDefault("Controls the strategy for computing folding ranges."),
        "type": "string",
        "enum": [
            "auto",
            "indentation"
        ],
        "default": "auto",
        "restricted": false
    },
    "editor.foldingHighlight": {
        "description": core_1.nls.localizeByDefault("Controls whether the editor should highlight folded ranges."),
        "type": "boolean",
        "default": true,
        "restricted": false
    },
    "editor.foldingImportsByDefault": {
        "description": core_1.nls.localizeByDefault("Controls whether the editor automatically collapses import ranges."),
        "type": "boolean",
        "default": false,
        "restricted": false
    },
    "editor.foldingMaximumRegions": {
        "description": core_1.nls.localizeByDefault("The maximum number of foldable regions. Increasing this value may result in the editor becoming less responsive when the current source has a large number of foldable regions."),
        "type": "integer",
        "default": 5000,
        "minimum": 10,
        "maximum": 65000,
        "restricted": false
    },
    "editor.unfoldOnClickAfterEndOfLine": {
        "description": core_1.nls.localizeByDefault("Controls whether clicking on the empty content after a folded line will unfold the line."),
        "type": "boolean",
        "default": false,
        "restricted": false
    },
    "editor.fontFamily": {
        "description": core_1.nls.localizeByDefault("Controls the font family."),
        "type": "string",
        "default": core_1.isOSX ? 'Menlo, Monaco, \'Courier New\', monospace' : core_1.isWindows ? 'Consolas, \'Courier New\', monospace' : '\'Droid Sans Mono\', \'monospace\', monospace',
        "restricted": false
    },
    "editor.fontLigatures": {
        "anyOf": [
            {
                "type": "boolean",
                "description": core_1.nls.localizeByDefault("Enables/Disables font ligatures ('calt' and 'liga' font features). Change this to a string for fine-grained control of the 'font-feature-settings' CSS property.")
            },
            {
                "type": "string",
                "description": core_1.nls.localizeByDefault("Explicit 'font-feature-settings' CSS property. A boolean can be passed instead if one only needs to turn on/off ligatures.")
            }
        ],
        "description": core_1.nls.localizeByDefault("Configures font ligatures or font features. Can be either a boolean to enable/disable ligatures or a string for the value of the CSS 'font-feature-settings' property."),
        "default": false,
        "restricted": false
    },
    "editor.fontSize": {
        "type": "number",
        "minimum": 6,
        "maximum": 100,
        "default": core_1.isOSX ? 12 : 14,
        "description": core_1.nls.localizeByDefault("Controls the font size in pixels."),
        "restricted": false
    },
    "editor.fontWeight": {
        "anyOf": [
            {
                "type": "number",
                "minimum": 1,
                "maximum": 1000,
                "errorMessage": "Only \"normal\" and \"bold\" keywords or numbers between 1 and 1000 are allowed."
            },
            {
                "type": "string",
                "pattern": "^(normal|bold|1000|[1-9][0-9]{0,2})$"
            },
            {
                "enum": [
                    "normal",
                    "bold",
                    "100",
                    "200",
                    "300",
                    "400",
                    "500",
                    "600",
                    "700",
                    "800",
                    "900"
                ]
            }
        ],
        "default": "normal",
        "description": core_1.nls.localizeByDefault("Controls the font weight. Accepts \"normal\" and \"bold\" keywords or numbers between 1 and 1000."),
        "restricted": false
    },
    "editor.fontVariations": {
        "anyOf": [
            {
                "type": "boolean",
                "description": core_1.nls.localizeByDefault("Enables/Disables the translation from font-weight to font-variation-settings. Change this to a string for fine-grained control of the 'font-variation-settings' CSS property.")
            },
            {
                "type": "string",
                "description": core_1.nls.localizeByDefault("Explicit 'font-variation-settings' CSS property. A boolean can be passed instead if one only needs to translate font-weight to font-variation-settings.")
            }
        ],
        "description": core_1.nls.localizeByDefault("Configures font variations. Can be either a boolean to enable/disable the translation from font-weight to font-variation-settings or a string for the value of the CSS 'font-variation-settings' property."),
        "default": false,
        "restricted": false
    },
    "editor.formatOnPaste": {
        "description": core_1.nls.localizeByDefault("Controls whether the editor should automatically format the pasted content. A formatter must be available and the formatter should be able to format a range in a document."),
        "type": "boolean",
        "default": false,
        "restricted": false
    },
    "editor.formatOnType": {
        "description": core_1.nls.localizeByDefault("Controls whether the editor should automatically format the line after typing."),
        "type": "boolean",
        "default": false,
        "restricted": false
    },
    "editor.glyphMargin": {
        "description": core_1.nls.localizeByDefault("Controls whether the editor should render the vertical glyph margin. Glyph margin is mostly used for debugging."),
        "type": "boolean",
        "default": true,
        "restricted": false
    },
    "editor.gotoLocation.multiple": {
        "deprecationMessage": "This setting is deprecated, please use separate settings like 'editor.editor.gotoLocation.multipleDefinitions' or 'editor.editor.gotoLocation.multipleImplementations' instead.",
        "default": null,
        "restricted": false
    },
    "editor.gotoLocation.multipleDefinitions": {
        "description": core_1.nls.localizeByDefault("Controls the behavior the 'Go to Definition'-command when multiple target locations exist."),
        "type": "string",
        "enum": [
            "peek",
            "gotoAndPeek",
            "goto"
        ],
        "default": "peek",
        "enumDescriptions": [
            core_1.nls.localizeByDefault("Show Peek view of the results (default)"),
            core_1.nls.localizeByDefault("Go to the primary result and show a Peek view"),
            core_1.nls.localizeByDefault("Go to the primary result and enable Peek-less navigation to others")
        ],
        "restricted": false
    },
    "editor.gotoLocation.multipleTypeDefinitions": {
        "description": core_1.nls.localizeByDefault("Controls the behavior the 'Go to Type Definition'-command when multiple target locations exist."),
        "type": "string",
        "enum": [
            "peek",
            "gotoAndPeek",
            "goto"
        ],
        "default": "peek",
        "enumDescriptions": [
            core_1.nls.localizeByDefault("Show Peek view of the results (default)"),
            core_1.nls.localizeByDefault("Go to the primary result and show a Peek view"),
            core_1.nls.localizeByDefault("Go to the primary result and enable Peek-less navigation to others")
        ],
        "restricted": false
    },
    "editor.gotoLocation.multipleDeclarations": {
        "description": core_1.nls.localizeByDefault("Controls the behavior the 'Go to Declaration'-command when multiple target locations exist."),
        "type": "string",
        "enum": [
            "peek",
            "gotoAndPeek",
            "goto"
        ],
        "default": "peek",
        "enumDescriptions": [
            core_1.nls.localizeByDefault("Show Peek view of the results (default)"),
            core_1.nls.localizeByDefault("Go to the primary result and show a Peek view"),
            core_1.nls.localizeByDefault("Go to the primary result and enable Peek-less navigation to others")
        ],
        "restricted": false
    },
    "editor.gotoLocation.multipleImplementations": {
        "description": core_1.nls.localizeByDefault("Controls the behavior the 'Go to Implementations'-command when multiple target locations exist."),
        "type": "string",
        "enum": [
            "peek",
            "gotoAndPeek",
            "goto"
        ],
        "default": "peek",
        "enumDescriptions": [
            core_1.nls.localizeByDefault("Show Peek view of the results (default)"),
            core_1.nls.localizeByDefault("Go to the primary result and show a Peek view"),
            core_1.nls.localizeByDefault("Go to the primary result and enable Peek-less navigation to others")
        ],
        "restricted": false
    },
    "editor.gotoLocation.multipleReferences": {
        "description": core_1.nls.localizeByDefault("Controls the behavior the 'Go to References'-command when multiple target locations exist."),
        "type": "string",
        "enum": [
            "peek",
            "gotoAndPeek",
            "goto"
        ],
        "default": "peek",
        "enumDescriptions": [
            core_1.nls.localizeByDefault("Show Peek view of the results (default)"),
            core_1.nls.localizeByDefault("Go to the primary result and show a Peek view"),
            core_1.nls.localizeByDefault("Go to the primary result and enable Peek-less navigation to others")
        ],
        "restricted": false
    },
    "editor.gotoLocation.alternativeDefinitionCommand": {
        "type": "string",
        "default": "editor.action.goToReferences",
        "enum": [
            "",
            "editor.action.referenceSearch.trigger",
            "editor.action.goToReferences",
            "editor.action.peekImplementation",
            "editor.action.goToImplementation",
            "editor.action.peekTypeDefinition",
            "editor.action.goToTypeDefinition",
            "editor.action.peekDeclaration",
            "editor.action.revealDeclaration",
            "editor.action.peekDefinition",
            "editor.action.revealDefinitionAside",
            "editor.action.revealDefinition"
        ],
        "description": core_1.nls.localizeByDefault("Alternative command id that is being executed when the result of 'Go to Definition' is the current location."),
        "restricted": false
    },
    "editor.gotoLocation.alternativeTypeDefinitionCommand": {
        "type": "string",
        "default": "editor.action.goToReferences",
        "enum": [
            "",
            "editor.action.referenceSearch.trigger",
            "editor.action.goToReferences",
            "editor.action.peekImplementation",
            "editor.action.goToImplementation",
            "editor.action.peekTypeDefinition",
            "editor.action.goToTypeDefinition",
            "editor.action.peekDeclaration",
            "editor.action.revealDeclaration",
            "editor.action.peekDefinition",
            "editor.action.revealDefinitionAside",
            "editor.action.revealDefinition"
        ],
        "description": core_1.nls.localizeByDefault("Alternative command id that is being executed when the result of 'Go to Type Definition' is the current location."),
        "restricted": false
    },
    "editor.gotoLocation.alternativeDeclarationCommand": {
        "type": "string",
        "default": "editor.action.goToReferences",
        "enum": [
            "",
            "editor.action.referenceSearch.trigger",
            "editor.action.goToReferences",
            "editor.action.peekImplementation",
            "editor.action.goToImplementation",
            "editor.action.peekTypeDefinition",
            "editor.action.goToTypeDefinition",
            "editor.action.peekDeclaration",
            "editor.action.revealDeclaration",
            "editor.action.peekDefinition",
            "editor.action.revealDefinitionAside",
            "editor.action.revealDefinition"
        ],
        "description": core_1.nls.localizeByDefault("Alternative command id that is being executed when the result of 'Go to Declaration' is the current location."),
        "restricted": false
    },
    "editor.gotoLocation.alternativeImplementationCommand": {
        "type": "string",
        "default": "",
        "enum": [
            "",
            "editor.action.referenceSearch.trigger",
            "editor.action.goToReferences",
            "editor.action.peekImplementation",
            "editor.action.goToImplementation",
            "editor.action.peekTypeDefinition",
            "editor.action.goToTypeDefinition",
            "editor.action.peekDeclaration",
            "editor.action.revealDeclaration",
            "editor.action.peekDefinition",
            "editor.action.revealDefinitionAside",
            "editor.action.revealDefinition"
        ],
        "description": core_1.nls.localizeByDefault("Alternative command id that is being executed when the result of 'Go to Implementation' is the current location."),
        "restricted": false
    },
    "editor.gotoLocation.alternativeReferenceCommand": {
        "type": "string",
        "default": "",
        "enum": [
            "",
            "editor.action.referenceSearch.trigger",
            "editor.action.goToReferences",
            "editor.action.peekImplementation",
            "editor.action.goToImplementation",
            "editor.action.peekTypeDefinition",
            "editor.action.goToTypeDefinition",
            "editor.action.peekDeclaration",
            "editor.action.revealDeclaration",
            "editor.action.peekDefinition",
            "editor.action.revealDefinitionAside",
            "editor.action.revealDefinition"
        ],
        "description": core_1.nls.localizeByDefault("Alternative command id that is being executed when the result of 'Go to Reference' is the current location."),
        "restricted": false
    },
    "editor.hideCursorInOverviewRuler": {
        "description": core_1.nls.localizeByDefault("Controls whether the cursor should be hidden in the overview ruler."),
        "type": "boolean",
        "default": false,
        "restricted": false
    },
    "editor.hover.enabled": {
        "type": "boolean",
        "default": true,
        "description": core_1.nls.localizeByDefault("Controls whether the hover is shown."),
        "restricted": false
    },
    "editor.hover.delay": {
        "type": "number",
        "default": 300,
        "minimum": 0,
        "maximum": 10000,
        "description": core_1.nls.localizeByDefault("Controls the delay in milliseconds after which the hover is shown."),
        "restricted": false
    },
    "editor.hover.sticky": {
        "type": "boolean",
        "default": true,
        "description": core_1.nls.localizeByDefault("Controls whether the hover should remain visible when mouse is moved over it."),
        "restricted": false
    },
    "editor.hover.hidingDelay": {
        "type": "integer",
        "minimum": 0,
        "default": 300,
        "description": core_1.nls.localize("theia/editor/editor.hover.hidingDelay", "Controls the delay in milliseconds after thich the hover is hidden. Requires `editor.hover.sticky` to be enabled."),
        "restricted": false
    },
    "editor.hover.above": {
        "type": "boolean",
        "default": true,
        "description": core_1.nls.localizeByDefault("Prefer showing hovers above the line, if there's space."),
        "restricted": false
    },
    "editor.inlineSuggest.enabled": {
        "type": "boolean",
        "default": true,
        "description": core_1.nls.localizeByDefault("Controls whether to automatically show inline suggestions in the editor."),
        "restricted": false
    },
    "editor.inlineSuggest.showToolbar": {
        "type": "string",
        "default": "onHover",
        "enum": [
            "always",
            "onHover"
        ],
        "enumDescriptions": [
            core_1.nls.localizeByDefault("Show the inline suggestion toolbar whenever an inline suggestion is shown."),
            core_1.nls.localizeByDefault("Show the inline suggestion toolbar when hovering over an inline suggestion.")
        ],
        "description": core_1.nls.localizeByDefault("Controls when to show the inline suggestion toolbar."),
        "restricted": false
    },
    "editor.inlineSuggest.suppressSuggestions": {
        "type": "boolean",
        "default": false,
        "description": core_1.nls.localizeByDefault("Controls how inline suggestions interact with the suggest widget. If enabled, the suggest widget is not shown automatically when inline suggestions are available."),
        "restricted": false
    },
    "editor.letterSpacing": {
        "description": core_1.nls.localizeByDefault("Controls the letter spacing in pixels."),
        "type": "number",
        "default": 0,
        "restricted": false
    },
    "editor.lightbulb.enabled": {
        "type": "boolean",
        "default": true,
        "description": core_1.nls.localizeByDefault("Enables the Code Action lightbulb in the editor."),
        "restricted": false
    },
    "editor.lineHeight": {
        "markdownDescription": core_1.nls.localizeByDefault("Controls the line height. \n - Use 0 to automatically compute the line height from the font size.\n - Values between 0 and 8 will be used as a multiplier with the font size.\n - Values greater than or equal to 8 will be used as effective values."),
        "type": "number",
        "default": 0,
        "restricted": false
    },
    "editor.lineNumbers": {
        "type": "string",
        "enum": [
            "off",
            "on",
            "relative",
            "interval"
        ],
        "enumDescriptions": [
            core_1.nls.localizeByDefault("Line numbers are not rendered."),
            core_1.nls.localizeByDefault("Line numbers are rendered as absolute number."),
            core_1.nls.localizeByDefault("Line numbers are rendered as distance in lines to cursor position."),
            core_1.nls.localizeByDefault("Line numbers are rendered every 10 lines.")
        ],
        "default": "on",
        "description": core_1.nls.localizeByDefault("Controls the display of line numbers."),
        "restricted": false
    },
    "editor.linkedEditing": {
        "description": core_1.nls.localizeByDefault("Controls whether the editor has linked editing enabled. Depending on the language, related symbols such as HTML tags, are updated while editing."),
        "type": "boolean",
        "default": false,
        "restricted": false
    },
    "editor.links": {
        "description": core_1.nls.localizeByDefault("Controls whether the editor should detect links and make them clickable."),
        "type": "boolean",
        "default": true,
        "restricted": false
    },
    "editor.matchBrackets": {
        "description": core_1.nls.localizeByDefault("Highlight matching brackets."),
        "type": "string",
        "enum": [
            "always",
            "near",
            "never"
        ],
        "default": "always",
        "restricted": false
    },
    "editor.minimap.enabled": {
        "type": "boolean",
        "default": true,
        "description": core_1.nls.localizeByDefault("Controls whether the minimap is shown."),
        "restricted": false
    },
    "editor.minimap.autohide": {
        "type": "boolean",
        "default": false,
        "description": core_1.nls.localizeByDefault("Controls whether the minimap is hidden automatically."),
        "restricted": false
    },
    "editor.minimap.size": {
        "type": "string",
        "enum": [
            "proportional",
            "fill",
            "fit"
        ],
        "enumDescriptions": [
            core_1.nls.localizeByDefault("The minimap has the same size as the editor contents (and might scroll)."),
            core_1.nls.localizeByDefault("The minimap will stretch or shrink as necessary to fill the height of the editor (no scrolling)."),
            core_1.nls.localizeByDefault("The minimap will shrink as necessary to never be larger than the editor (no scrolling).")
        ],
        "default": "proportional",
        "description": core_1.nls.localizeByDefault("Controls the size of the minimap."),
        "restricted": false
    },
    "editor.minimap.side": {
        "type": "string",
        "enum": [
            "left",
            "right"
        ],
        "default": "right",
        "description": core_1.nls.localizeByDefault("Controls the side where to render the minimap."),
        "restricted": false
    },
    "editor.minimap.showSlider": {
        "type": "string",
        "enum": [
            "always",
            "mouseover"
        ],
        "default": "mouseover",
        "description": core_1.nls.localizeByDefault("Controls when the minimap slider is shown."),
        "restricted": false
    },
    "editor.minimap.scale": {
        "type": "number",
        "default": 1,
        "minimum": 1,
        "maximum": 3,
        "enum": [
            1,
            2,
            3
        ],
        "description": core_1.nls.localizeByDefault("Scale of content drawn in the minimap: 1, 2 or 3."),
        "restricted": false
    },
    "editor.minimap.renderCharacters": {
        "type": "boolean",
        "default": true,
        "description": core_1.nls.localizeByDefault("Render the actual characters on a line as opposed to color blocks."),
        "restricted": false
    },
    "editor.minimap.maxColumn": {
        "type": "number",
        "default": 120,
        "description": core_1.nls.localizeByDefault("Limit the width of the minimap to render at most a certain number of columns."),
        "restricted": false
    },
    "editor.mouseWheelScrollSensitivity": {
        "markdownDescription": core_1.nls.localizeByDefault("A multiplier to be used on the `deltaX` and `deltaY` of mouse wheel scroll events."),
        "type": "number",
        "default": 1,
        "restricted": false
    },
    "editor.mouseWheelZoom": {
        "markdownDescription": core_1.nls.localizeByDefault("Zoom the font of the editor when using mouse wheel and holding `Ctrl`."),
        "type": "boolean",
        "default": false,
        "restricted": false
    },
    "editor.multiCursorMergeOverlapping": {
        "description": core_1.nls.localizeByDefault("Merge multiple cursors when they are overlapping."),
        "type": "boolean",
        "default": true,
        "restricted": false
    },
    "editor.multiCursorModifier": {
        "markdownEnumDescriptions": [
            core_1.nls.localizeByDefault("Maps to `Control` on Windows and Linux and to `Command` on macOS."),
            core_1.nls.localizeByDefault("Maps to `Alt` on Windows and Linux and to `Option` on macOS.")
        ],
        "markdownDescription": core_1.nls.localizeByDefault("The modifier to be used to add multiple cursors with the mouse. The Go to Definition and Open Link mouse gestures will adapt such that they do not conflict with the [multicursor modifier](https://code.visualstudio.com/docs/editor/codebasics#_multicursor-modifier)."),
        "type": "string",
        "enum": [
            "ctrlCmd",
            "alt"
        ],
        "default": "alt",
        "restricted": false
    },
    "editor.multiCursorPaste": {
        "markdownEnumDescriptions": [
            core_1.nls.localizeByDefault("Each cursor pastes a single line of the text."),
            core_1.nls.localizeByDefault("Each cursor pastes the full text.")
        ],
        "markdownDescription": core_1.nls.localizeByDefault("Controls pasting when the line count of the pasted text matches the cursor count."),
        "type": "string",
        "enum": [
            "spread",
            "full"
        ],
        "default": "spread",
        "restricted": false
    },
    "editor.multiCursorLimit": {
        "markdownDescription": core_1.nls.localizeByDefault("Controls the max number of cursors that can be in an active editor at once."),
        "type": "integer",
        "default": 10000,
        "minimum": 1,
        "maximum": 100000,
        "restricted": false
    },
    "editor.occurrencesHighlight": {
        "description": core_1.nls.localizeByDefault("Controls whether the editor should highlight semantic symbol occurrences."),
        "type": "boolean",
        "default": true,
        "restricted": false
    },
    "editor.overviewRulerBorder": {
        "description": core_1.nls.localizeByDefault("Controls whether a border should be drawn around the overview ruler."),
        "type": "boolean",
        "default": true,
        "restricted": false
    },
    "editor.padding.top": {
        "type": "number",
        "default": 0,
        "minimum": 0,
        "maximum": 1000,
        "description": core_1.nls.localizeByDefault("Controls the amount of space between the top edge of the editor and the first line."),
        "restricted": false
    },
    "editor.padding.bottom": {
        "type": "number",
        "default": 0,
        "minimum": 0,
        "maximum": 1000,
        "description": core_1.nls.localizeByDefault("Controls the amount of space between the bottom edge of the editor and the last line."),
        "restricted": false
    },
    "editor.pasteAs.enabled": {
        "type": "boolean",
        "default": true,
        "markdownDescription": core_1.nls.localizeByDefault("Controls whether you can paste content in different ways."),
        "restricted": false
    },
    "editor.pasteAs.showPasteSelector": {
        "type": "string",
        "markdownDescription": core_1.nls.localizeByDefault("Controls if a widget is shown when pasting content in to the editor. This widget lets you control how the file is pasted."),
        "enum": [
            "afterPaste",
            "never"
        ],
        "enumDescriptions": [
            core_1.nls.localizeByDefault("Show the paste selector widget after content is pasted into the editor."),
            core_1.nls.localizeByDefault("Never show the paste selector widget. Instead the default pasting behavior is always used.")
        ],
        "default": "afterPaste",
        "restricted": false
    },
    "editor.parameterHints.enabled": {
        "type": "boolean",
        "default": true,
        "description": core_1.nls.localizeByDefault("Enables a pop-up that shows parameter documentation and type information as you type."),
        "restricted": false
    },
    "editor.parameterHints.cycle": {
        "type": "boolean",
        "default": true,
        "description": core_1.nls.localizeByDefault("Controls whether the parameter hints menu cycles or closes when reaching the end of the list."),
        "restricted": false
    },
    "editor.peekWidgetDefaultFocus": {
        "enumDescriptions": [
            core_1.nls.localizeByDefault("Focus the tree when opening peek"),
            core_1.nls.localizeByDefault("Focus the editor when opening peek")
        ],
        "description": core_1.nls.localizeByDefault("Controls whether to focus the inline editor or the tree in the peek widget."),
        "type": "string",
        "enum": [
            "tree",
            "editor"
        ],
        "default": "tree",
        "restricted": false
    },
    "editor.definitionLinkOpensInPeek": {
        "description": core_1.nls.localizeByDefault("Controls whether the Go to Definition mouse gesture always opens the peek widget."),
        "type": "boolean",
        "default": false,
        "restricted": false
    },
    "editor.quickSuggestions": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "strings": {
                "anyOf": [
                    {
                        "type": "boolean"
                    },
                    {
                        "type": "string",
                        "enum": [
                            "on",
                            "inline",
                            "off"
                        ],
                        "enumDescriptions": [
                            core_1.nls.localizeByDefault("Quick suggestions show inside the suggest widget"),
                            core_1.nls.localizeByDefault("Quick suggestions show as ghost text"),
                            core_1.nls.localizeByDefault("Quick suggestions are disabled")
                        ]
                    }
                ],
                "default": "off",
                "description": core_1.nls.localizeByDefault("Enable quick suggestions inside strings.")
            },
            "comments": {
                "anyOf": [
                    {
                        "type": "boolean"
                    },
                    {
                        "type": "string",
                        "enum": [
                            "on",
                            "inline",
                            "off"
                        ],
                        "enumDescriptions": [
                            core_1.nls.localizeByDefault("Quick suggestions show inside the suggest widget"),
                            core_1.nls.localizeByDefault("Quick suggestions show as ghost text"),
                            core_1.nls.localizeByDefault("Quick suggestions are disabled")
                        ]
                    }
                ],
                "default": "off",
                "description": core_1.nls.localizeByDefault("Enable quick suggestions inside comments.")
            },
            "other": {
                "anyOf": [
                    {
                        "type": "boolean"
                    },
                    {
                        "type": "string",
                        "enum": [
                            "on",
                            "inline",
                            "off"
                        ],
                        "enumDescriptions": [
                            core_1.nls.localizeByDefault("Quick suggestions show inside the suggest widget"),
                            core_1.nls.localizeByDefault("Quick suggestions show as ghost text"),
                            core_1.nls.localizeByDefault("Quick suggestions are disabled")
                        ]
                    }
                ],
                "default": "on",
                "description": core_1.nls.localizeByDefault("Enable quick suggestions outside of strings and comments.")
            }
        },
        "default": {
            "other": "on",
            "comments": "off",
            "strings": "off"
        },
        "markdownDescription": core_1.nls.localize("theia/editor/editor.quickSuggestions", "Controls whether suggestions should automatically show up while typing. This can be controlled for typing in comments, strings, and other code. Quick suggestion can be configured to show as ghost text or with the suggest widget. Also be aware of the '#editor.suggestOnTriggerCharacters#'-setting which controls if suggestions are triggered by special characters."),
        "restricted": false
    },
    "editor.quickSuggestionsDelay": {
        "description": core_1.nls.localizeByDefault("Controls the delay in milliseconds after which quick suggestions will show up."),
        "type": "integer",
        "default": 10,
        "minimum": 0,
        "maximum": 1073741824,
        "restricted": false
    },
    "editor.renameOnType": {
        "description": core_1.nls.localizeByDefault("Controls whether the editor auto renames on type."),
        "markdownDeprecationMessage": "Deprecated, use `editor.linkedEditing` instead.",
        "type": "boolean",
        "default": false,
        "restricted": false,
        "deprecationMessage": "Deprecated, use `editor.linkedEditing` instead."
    },
    "editor.renderControlCharacters": {
        "description": core_1.nls.localizeByDefault("Controls whether the editor should render control characters."),
        "restricted": true,
        "type": "boolean",
        "default": true
    },
    "editor.renderFinalNewline": {
        "description": core_1.nls.localizeByDefault("Render last line number when the file ends with a newline."),
        "type": "string",
        "enum": [
            "off",
            "on",
            "dimmed"
        ],
        "default": "on",
        "restricted": false
    },
    "editor.renderLineHighlight": {
        "enumDescriptions": [
            "",
            "",
            "",
            core_1.nls.localizeByDefault("Highlights both the gutter and the current line.")
        ],
        "description": core_1.nls.localizeByDefault("Controls how the editor should render the current line highlight."),
        "type": "string",
        "enum": [
            "none",
            "gutter",
            "line",
            "all"
        ],
        "default": "line",
        "restricted": false
    },
    "editor.renderLineHighlightOnlyWhenFocus": {
        "description": core_1.nls.localizeByDefault("Controls if the editor should render the current line highlight only when the editor is focused."),
        "type": "boolean",
        "default": false,
        "restricted": false
    },
    "editor.renderWhitespace": {
        "enumDescriptions": [
            "",
            core_1.nls.localizeByDefault("Render whitespace characters except for single spaces between words."),
            core_1.nls.localizeByDefault("Render whitespace characters only on selected text."),
            core_1.nls.localizeByDefault("Render only trailing whitespace characters."),
            ""
        ],
        "description": core_1.nls.localizeByDefault("Controls how the editor should render whitespace characters."),
        "type": "string",
        "enum": [
            "none",
            "boundary",
            "selection",
            "trailing",
            "all"
        ],
        "default": "selection",
        "restricted": false
    },
    "editor.roundedSelection": {
        "description": core_1.nls.localizeByDefault("Controls whether selections should have rounded corners."),
        "type": "boolean",
        "default": true,
        "restricted": false
    },
    "editor.rulers": {
        "type": "array",
        "items": {
            "anyOf": [
                {
                    "type": "number",
                    "description": core_1.nls.localizeByDefault("Number of monospace characters at which this editor ruler will render.")
                },
                {
                    "type": [
                        "object"
                    ],
                    "properties": {
                        "column": {
                            "type": "number",
                            "description": core_1.nls.localizeByDefault("Number of monospace characters at which this editor ruler will render.")
                        },
                        "color": {
                            "type": "string",
                            "description": core_1.nls.localizeByDefault("Color of this editor ruler."),
                            "format": "color-hex"
                        }
                    }
                }
            ]
        },
        "default": [],
        "description": core_1.nls.localizeByDefault("Render vertical rulers after a certain number of monospace characters. Use multiple values for multiple rulers. No rulers are drawn if array is empty."),
        "restricted": false
    },
    "editor.scrollbar.vertical": {
        "type": "string",
        "enum": [
            "auto",
            "visible",
            "hidden"
        ],
        "enumDescriptions": [
            core_1.nls.localizeByDefault("The vertical scrollbar will be visible only when necessary."),
            core_1.nls.localizeByDefault("The vertical scrollbar will always be visible."),
            core_1.nls.localizeByDefault("The vertical scrollbar will always be hidden.")
        ],
        "default": "auto",
        "description": core_1.nls.localizeByDefault("Controls the visibility of the vertical scrollbar."),
        "restricted": false
    },
    "editor.scrollbar.horizontal": {
        "type": "string",
        "enum": [
            "auto",
            "visible",
            "hidden"
        ],
        "enumDescriptions": [
            core_1.nls.localizeByDefault("The horizontal scrollbar will be visible only when necessary."),
            core_1.nls.localizeByDefault("The horizontal scrollbar will always be visible."),
            core_1.nls.localizeByDefault("The horizontal scrollbar will always be hidden.")
        ],
        "default": "auto",
        "description": core_1.nls.localizeByDefault("Controls the visibility of the horizontal scrollbar."),
        "restricted": false
    },
    "editor.scrollbar.verticalScrollbarSize": {
        "type": "number",
        "default": 14,
        "description": core_1.nls.localizeByDefault("The width of the vertical scrollbar."),
        "restricted": false
    },
    "editor.scrollbar.horizontalScrollbarSize": {
        "type": "number",
        "default": 12,
        "description": core_1.nls.localizeByDefault("The height of the horizontal scrollbar."),
        "restricted": false
    },
    "editor.scrollbar.scrollByPage": {
        "type": "boolean",
        "default": false,
        "description": core_1.nls.localizeByDefault("Controls whether clicks scroll by page or jump to click position."),
        "restricted": false
    },
    "editor.scrollBeyondLastColumn": {
        "description": core_1.nls.localizeByDefault("Controls the number of extra characters beyond which the editor will scroll horizontally."),
        "type": "integer",
        "default": 4,
        "minimum": 0,
        "maximum": 1073741824,
        "restricted": false
    },
    "editor.scrollBeyondLastLine": {
        "description": core_1.nls.localizeByDefault("Controls whether the editor will scroll beyond the last line."),
        "type": "boolean",
        "default": true,
        "restricted": false
    },
    "editor.scrollPredominantAxis": {
        "description": core_1.nls.localizeByDefault("Scroll only along the predominant axis when scrolling both vertically and horizontally at the same time. Prevents horizontal drift when scrolling vertically on a trackpad."),
        "type": "boolean",
        "default": true,
        "restricted": false
    },
    "editor.selectionHighlight": {
        "description": core_1.nls.localizeByDefault("Controls whether the editor should highlight matches similar to the selection."),
        "type": "boolean",
        "default": true,
        "restricted": false
    },
    "editor.showFoldingControls": {
        "enumDescriptions": [
            core_1.nls.localizeByDefault("Always show the folding controls."),
            core_1.nls.localizeByDefault("Never show the folding controls and reduce the gutter size."),
            core_1.nls.localizeByDefault("Only show the folding controls when the mouse is over the gutter.")
        ],
        "description": core_1.nls.localizeByDefault("Controls when the folding controls on the gutter are shown."),
        "type": "string",
        "enum": [
            "always",
            "never",
            "mouseover"
        ],
        "default": "mouseover",
        "restricted": false
    },
    "editor.showUnused": {
        "description": core_1.nls.localizeByDefault("Controls fading out of unused code."),
        "type": "boolean",
        "default": true,
        "restricted": false
    },
    "editor.snippetSuggestions": {
        "enumDescriptions": [
            core_1.nls.localizeByDefault("Show snippet suggestions on top of other suggestions."),
            core_1.nls.localizeByDefault("Show snippet suggestions below other suggestions."),
            core_1.nls.localizeByDefault("Show snippets suggestions with other suggestions."),
            core_1.nls.localizeByDefault("Do not show snippet suggestions.")
        ],
        "description": core_1.nls.localizeByDefault("Controls whether snippets are shown with other suggestions and how they are sorted."),
        "type": "string",
        "enum": [
            "top",
            "bottom",
            "inline",
            "none"
        ],
        "default": "inline",
        "restricted": false
    },
    "editor.smartSelect.selectLeadingAndTrailingWhitespace": {
        "description": core_1.nls.localizeByDefault("Whether leading and trailing whitespace should always be selected."),
        "default": true,
        "type": "boolean",
        "restricted": false
    },
    "editor.smartSelect.selectSubwords": {
        "description": core_1.nls.localizeByDefault("Whether subwords (like 'foo' in 'fooBar' or 'foo_bar') should be selected."),
        "default": true,
        "type": "boolean",
        "restricted": false
    },
    "editor.smoothScrolling": {
        "description": core_1.nls.localizeByDefault("Controls whether the editor will scroll using an animation."),
        "type": "boolean",
        "default": false,
        "restricted": false
    },
    "editor.stickyScroll.enabled": {
        "type": "boolean",
        "default": false,
        "description": core_1.nls.localizeByDefault("Shows the nested current scopes during the scroll at the top of the editor."),
        "restricted": false
    },
    "editor.stickyScroll.maxLineCount": {
        "type": "number",
        "default": 5,
        "minimum": 1,
        "maximum": 10,
        "description": core_1.nls.localizeByDefault("Defines the maximum number of sticky lines to show."),
        "restricted": false
    },
    "editor.stickyScroll.defaultModel": {
        "type": "string",
        "enum": [
            "outlineModel",
            "foldingProviderModel",
            "indentationModel"
        ],
        "default": "outlineModel",
        "description": core_1.nls.localizeByDefault("Defines the model to use for determining which lines to stick. If the outline model does not exist, it will fall back on the folding provider model which falls back on the indentation model. This order is respected in all three cases."),
        "restricted": false
    },
    "editor.stickyScroll.scrollWithEditor": {
        "type": "boolean",
        "default": true,
        "description": core_1.nls.localize("theia/editor/editor.stickyScroll.scrollWithEditor", "Enable scrolling of the sticky scroll widget with the editor's horizontal scrollbar."),
        "restricted": false
    },
    "editor.stickyTabStops": {
        "description": core_1.nls.localizeByDefault("Emulate selection behavior of tab characters when using spaces for indentation. Selection will stick to tab stops."),
        "type": "boolean",
        "default": false,
        "restricted": false
    },
    "editor.suggest.insertMode": {
        "type": "string",
        "enum": [
            "insert",
            "replace"
        ],
        "enumDescriptions": [
            core_1.nls.localizeByDefault("Insert suggestion without overwriting text right of the cursor."),
            core_1.nls.localizeByDefault("Insert suggestion and overwrite text right of the cursor.")
        ],
        "default": "insert",
        "description": core_1.nls.localizeByDefault("Controls whether words are overwritten when accepting completions. Note that this depends on extensions opting into this feature."),
        "restricted": false
    },
    "editor.suggest.filterGraceful": {
        "type": "boolean",
        "default": true,
        "description": core_1.nls.localizeByDefault("Controls whether filtering and sorting suggestions accounts for small typos."),
        "restricted": false
    },
    "editor.suggest.localityBonus": {
        "type": "boolean",
        "default": false,
        "description": core_1.nls.localizeByDefault("Controls whether sorting favors words that appear close to the cursor."),
        "restricted": false
    },
    "editor.suggest.shareSuggestSelections": {
        "type": "boolean",
        "default": false,
        "markdownDescription": core_1.nls.localizeByDefault("Controls whether remembered suggestion selections are shared between multiple workspaces and windows (needs `#editor.suggestSelection#`)."),
        "restricted": false
    },
    "editor.suggest.selectionMode": {
        "type": "string",
        "enum": [
            "always",
            "never",
            "whenTriggerCharacter",
            "whenQuickSuggestion"
        ],
        "enumDescriptions": [
            core_1.nls.localizeByDefault("Always select a suggestion when automatically triggering IntelliSense."),
            core_1.nls.localizeByDefault("Never select a suggestion when automatically triggering IntelliSense."),
            core_1.nls.localizeByDefault("Select a suggestion only when triggering IntelliSense from a trigger character."),
            core_1.nls.localizeByDefault("Select a suggestion only when triggering IntelliSense as you type.")
        ],
        "default": "always",
        "markdownDescription": core_1.nls.localizeByDefault("Controls whether a suggestion is selected when the widget shows. Note that this only applies to automatically triggered suggestions (`#editor.quickSuggestions#` and `#editor.suggestOnTriggerCharacters#`) and that a suggestion is always selected when explicitly invoked, e.g via `Ctrl+Space`."),
        "restricted": false
    },
    "editor.suggest.snippetsPreventQuickSuggestions": {
        "type": "boolean",
        "default": false,
        "description": core_1.nls.localizeByDefault("Controls whether an active snippet prevents quick suggestions."),
        "restricted": false
    },
    "editor.suggest.showIcons": {
        "type": "boolean",
        "default": true,
        "description": core_1.nls.localizeByDefault("Controls whether to show or hide icons in suggestions."),
        "restricted": false
    },
    "editor.suggest.showStatusBar": {
        "type": "boolean",
        "default": false,
        "description": core_1.nls.localizeByDefault("Controls the visibility of the status bar at the bottom of the suggest widget."),
        "restricted": false
    },
    "editor.suggest.preview": {
        "type": "boolean",
        "default": false,
        "description": core_1.nls.localizeByDefault("Controls whether to preview the suggestion outcome in the editor."),
        "restricted": false
    },
    "editor.suggest.showInlineDetails": {
        "type": "boolean",
        "default": true,
        "description": core_1.nls.localizeByDefault("Controls whether suggest details show inline with the label or only in the details widget."),
        "restricted": false
    },
    "editor.suggest.maxVisibleSuggestions": {
        "type": "number",
        "deprecationMessage": "This setting is deprecated. The suggest widget can now be resized.",
        "default": 0,
        "restricted": false
    },
    "editor.suggest.filteredTypes": {
        "type": "object",
        "deprecationMessage": "This setting is deprecated, please use separate settings like 'editor.suggest.showKeywords' or 'editor.suggest.showSnippets' instead.",
        "default": {},
        "restricted": false
    },
    "editor.suggest.showMethods": {
        "type": "boolean",
        "default": true,
        "markdownDescription": core_1.nls.localizeByDefault("When enabled IntelliSense shows `method`-suggestions."),
        "restricted": false
    },
    "editor.suggest.showFunctions": {
        "type": "boolean",
        "default": true,
        "markdownDescription": core_1.nls.localizeByDefault("When enabled IntelliSense shows `function`-suggestions."),
        "restricted": false
    },
    "editor.suggest.showConstructors": {
        "type": "boolean",
        "default": true,
        "markdownDescription": core_1.nls.localizeByDefault("When enabled IntelliSense shows `constructor`-suggestions."),
        "restricted": false
    },
    "editor.suggest.showDeprecated": {
        "type": "boolean",
        "default": true,
        "markdownDescription": core_1.nls.localizeByDefault("When enabled IntelliSense shows `deprecated`-suggestions."),
        "restricted": false
    },
    "editor.suggest.matchOnWordStartOnly": {
        "type": "boolean",
        "default": true,
        "markdownDescription": core_1.nls.localizeByDefault("When enabled IntelliSense filtering requires that the first character matches on a word start. For example, `c` on `Console` or `WebContext` but _not_ on `description`. When disabled IntelliSense will show more results but still sorts them by match quality."),
        "restricted": false
    },
    "editor.suggest.showFields": {
        "type": "boolean",
        "default": true,
        "markdownDescription": core_1.nls.localizeByDefault("When enabled IntelliSense shows `field`-suggestions."),
        "restricted": false
    },
    "editor.suggest.showVariables": {
        "type": "boolean",
        "default": true,
        "markdownDescription": core_1.nls.localizeByDefault("When enabled IntelliSense shows `variable`-suggestions."),
        "restricted": false
    },
    "editor.suggest.showClasses": {
        "type": "boolean",
        "default": true,
        "markdownDescription": core_1.nls.localizeByDefault("When enabled IntelliSense shows `class`-suggestions."),
        "restricted": false
    },
    "editor.suggest.showStructs": {
        "type": "boolean",
        "default": true,
        "markdownDescription": core_1.nls.localizeByDefault("When enabled IntelliSense shows `struct`-suggestions."),
        "restricted": false
    },
    "editor.suggest.showInterfaces": {
        "type": "boolean",
        "default": true,
        "markdownDescription": core_1.nls.localizeByDefault("When enabled IntelliSense shows `interface`-suggestions."),
        "restricted": false
    },
    "editor.suggest.showModules": {
        "type": "boolean",
        "default": true,
        "markdownDescription": core_1.nls.localizeByDefault("When enabled IntelliSense shows `module`-suggestions."),
        "restricted": false
    },
    "editor.suggest.showProperties": {
        "type": "boolean",
        "default": true,
        "markdownDescription": core_1.nls.localizeByDefault("When enabled IntelliSense shows `property`-suggestions."),
        "restricted": false
    },
    "editor.suggest.showEvents": {
        "type": "boolean",
        "default": true,
        "markdownDescription": core_1.nls.localizeByDefault("When enabled IntelliSense shows `event`-suggestions."),
        "restricted": false
    },
    "editor.suggest.showOperators": {
        "type": "boolean",
        "default": true,
        "markdownDescription": core_1.nls.localizeByDefault("When enabled IntelliSense shows `operator`-suggestions."),
        "restricted": false
    },
    "editor.suggest.showUnits": {
        "type": "boolean",
        "default": true,
        "markdownDescription": core_1.nls.localizeByDefault("When enabled IntelliSense shows `unit`-suggestions."),
        "restricted": false
    },
    "editor.suggest.showValues": {
        "type": "boolean",
        "default": true,
        "markdownDescription": core_1.nls.localizeByDefault("When enabled IntelliSense shows `value`-suggestions."),
        "restricted": false
    },
    "editor.suggest.showConstants": {
        "type": "boolean",
        "default": true,
        "markdownDescription": core_1.nls.localizeByDefault("When enabled IntelliSense shows `constant`-suggestions."),
        "restricted": false
    },
    "editor.suggest.showEnums": {
        "type": "boolean",
        "default": true,
        "markdownDescription": core_1.nls.localizeByDefault("When enabled IntelliSense shows `enum`-suggestions."),
        "restricted": false
    },
    "editor.suggest.showEnumMembers": {
        "type": "boolean",
        "default": true,
        "markdownDescription": core_1.nls.localizeByDefault("When enabled IntelliSense shows `enumMember`-suggestions."),
        "restricted": false
    },
    "editor.suggest.showKeywords": {
        "type": "boolean",
        "default": true,
        "markdownDescription": core_1.nls.localizeByDefault("When enabled IntelliSense shows `keyword`-suggestions."),
        "restricted": false
    },
    "editor.suggest.showWords": {
        "type": "boolean",
        "default": true,
        "markdownDescription": core_1.nls.localizeByDefault("When enabled IntelliSense shows `text`-suggestions."),
        "restricted": false
    },
    "editor.suggest.showColors": {
        "type": "boolean",
        "default": true,
        "markdownDescription": core_1.nls.localizeByDefault("When enabled IntelliSense shows `color`-suggestions."),
        "restricted": false
    },
    "editor.suggest.showFiles": {
        "type": "boolean",
        "default": true,
        "markdownDescription": core_1.nls.localizeByDefault("When enabled IntelliSense shows `file`-suggestions."),
        "restricted": false
    },
    "editor.suggest.showReferences": {
        "type": "boolean",
        "default": true,
        "markdownDescription": core_1.nls.localizeByDefault("When enabled IntelliSense shows `reference`-suggestions."),
        "restricted": false
    },
    "editor.suggest.showCustomcolors": {
        "type": "boolean",
        "default": true,
        "markdownDescription": core_1.nls.localizeByDefault("When enabled IntelliSense shows `customcolor`-suggestions."),
        "restricted": false
    },
    "editor.suggest.showFolders": {
        "type": "boolean",
        "default": true,
        "markdownDescription": core_1.nls.localizeByDefault("When enabled IntelliSense shows `folder`-suggestions."),
        "restricted": false
    },
    "editor.suggest.showTypeParameters": {
        "type": "boolean",
        "default": true,
        "markdownDescription": core_1.nls.localizeByDefault("When enabled IntelliSense shows `typeParameter`-suggestions."),
        "restricted": false
    },
    "editor.suggest.showSnippets": {
        "type": "boolean",
        "default": true,
        "markdownDescription": core_1.nls.localizeByDefault("When enabled IntelliSense shows `snippet`-suggestions."),
        "restricted": false
    },
    "editor.suggest.showUsers": {
        "type": "boolean",
        "default": true,
        "markdownDescription": core_1.nls.localizeByDefault("When enabled IntelliSense shows `user`-suggestions."),
        "restricted": false
    },
    "editor.suggest.showIssues": {
        "type": "boolean",
        "default": true,
        "markdownDescription": core_1.nls.localizeByDefault("When enabled IntelliSense shows `issues`-suggestions."),
        "restricted": false
    },
    "editor.suggestFontSize": {
        "markdownDescription": core_1.nls.localize("theia/editor/editor.suggestFontSize", "Font size for the suggest widget. When set to `0`, the value of `#editor.fontSize#` is used."),
        "type": "integer",
        "default": 0,
        "minimum": 0,
        "maximum": 1000,
        "restricted": false
    },
    "editor.suggestLineHeight": {
        "markdownDescription": core_1.nls.localize("theia/editor/editor.suggestLineHeight", "Line height for the suggest widget. When set to `0`, the value of `#editor.lineHeight#` is used. The minimum value is 8."),
        "type": "integer",
        "default": 0,
        "minimum": 0,
        "maximum": 1000,
        "restricted": false
    },
    "editor.suggestOnTriggerCharacters": {
        "description": core_1.nls.localizeByDefault("Controls whether suggestions should automatically show up when typing trigger characters."),
        "type": "boolean",
        "default": true,
        "restricted": false
    },
    "editor.suggestSelection": {
        "markdownEnumDescriptions": [
            core_1.nls.localizeByDefault("Always select the first suggestion."),
            core_1.nls.localizeByDefault("Select recent suggestions unless further typing selects one, e.g. `console.| -> console.log` because `log` has been completed recently."),
            core_1.nls.localizeByDefault("Select suggestions based on previous prefixes that have completed those suggestions, e.g. `co -> console` and `con -> const`.")
        ],
        "description": core_1.nls.localizeByDefault("Controls how suggestions are pre-selected when showing the suggest list."),
        "type": "string",
        "enum": [
            "first",
            "recentlyUsed",
            "recentlyUsedByPrefix"
        ],
        "default": "first",
        "restricted": false
    },
    "editor.tabCompletion": {
        "enumDescriptions": [
            core_1.nls.localizeByDefault("Tab complete will insert the best matching suggestion when pressing tab."),
            core_1.nls.localizeByDefault("Disable tab completions."),
            core_1.nls.localizeByDefault("Tab complete snippets when their prefix match. Works best when 'quickSuggestions' aren't enabled.")
        ],
        "description": core_1.nls.localizeByDefault("Enables tab completions."),
        "type": "string",
        "enum": [
            "on",
            "off",
            "onlySnippets"
        ],
        "default": "off",
        "restricted": false
    },
    "editor.unicodeHighlight.nonBasicASCII": {
        "restricted": true,
        "type": [
            "boolean",
            "string"
        ],
        "enum": [
            true,
            false,
            "inUntrustedWorkspace"
        ],
        "default": "inUntrustedWorkspace",
        "description": core_1.nls.localizeByDefault("Controls whether all non-basic ASCII characters are highlighted. Only characters between U+0020 and U+007E, tab, line-feed and carriage-return are considered basic ASCII.")
    },
    "editor.unicodeHighlight.invisibleCharacters": {
        "restricted": true,
        "type": "boolean",
        "default": true,
        "description": core_1.nls.localizeByDefault("Controls whether characters that just reserve space or have no width at all are highlighted.")
    },
    "editor.unicodeHighlight.ambiguousCharacters": {
        "restricted": true,
        "type": "boolean",
        "default": true,
        "description": core_1.nls.localizeByDefault("Controls whether characters are highlighted that can be confused with basic ASCII characters, except those that are common in the current user locale.")
    },
    "editor.unicodeHighlight.includeComments": {
        "restricted": true,
        "type": [
            "boolean",
            "string"
        ],
        "enum": [
            true,
            false,
            "inUntrustedWorkspace"
        ],
        "default": "inUntrustedWorkspace",
        "description": core_1.nls.localizeByDefault("Controls whether characters in comments should also be subject to Unicode highlighting.")
    },
    "editor.unicodeHighlight.includeStrings": {
        "restricted": true,
        "type": [
            "boolean",
            "string"
        ],
        "enum": [
            true,
            false,
            "inUntrustedWorkspace"
        ],
        "default": true,
        "description": core_1.nls.localizeByDefault("Controls whether characters in strings should also be subject to Unicode highlighting.")
    },
    "editor.unicodeHighlight.allowedCharacters": {
        "restricted": true,
        "type": "object",
        "default": {},
        "description": core_1.nls.localizeByDefault("Defines allowed characters that are not being highlighted."),
        "additionalProperties": {
            "type": "boolean"
        }
    },
    "editor.unicodeHighlight.allowedLocales": {
        "restricted": true,
        "type": "object",
        "additionalProperties": {
            "type": "boolean"
        },
        "default": {
            "_os": true,
            "_vscode": true
        },
        "description": core_1.nls.localizeByDefault("Unicode characters that are common in allowed locales are not being highlighted.")
    },
    "editor.unusualLineTerminators": {
        "enumDescriptions": [
            core_1.nls.localizeByDefault("Unusual line terminators are automatically removed."),
            core_1.nls.localizeByDefault("Unusual line terminators are ignored."),
            core_1.nls.localizeByDefault("Unusual line terminators prompt to be removed.")
        ],
        "description": core_1.nls.localizeByDefault("Remove unusual line terminators that might cause problems."),
        "type": "string",
        "enum": [
            "auto",
            "off",
            "prompt"
        ],
        "default": "prompt",
        "restricted": false
    },
    "editor.useTabStops": {
        "description": core_1.nls.localizeByDefault("Inserting and deleting whitespace follows tab stops."),
        "type": "boolean",
        "default": true,
        "restricted": false
    },
    "editor.wordBreak": {
        "markdownEnumDescriptions": [
            core_1.nls.localizeByDefault("Use the default line break rule."),
            core_1.nls.localizeByDefault("Word breaks should not be used for Chinese/Japanese/Korean (CJK) text. Non-CJK text behavior is the same as for normal.")
        ],
        "description": core_1.nls.localizeByDefault("Controls the word break rules used for Chinese/Japanese/Korean (CJK) text."),
        "type": "string",
        "enum": [
            "normal",
            "keepAll"
        ],
        "default": "normal",
        "restricted": false
    },
    "editor.wordSeparators": {
        "description": core_1.nls.localizeByDefault("Characters that will be used as word separators when doing word related navigations or operations."),
        "type": "string",
        "default": "`~!@#$%^&*()-=+[{]}\\|;:'\",.<>/?",
        "restricted": false
    },
    "editor.wordWrap": {
        "markdownEnumDescriptions": [
            core_1.nls.localizeByDefault("Lines will never wrap."),
            core_1.nls.localizeByDefault("Lines will wrap at the viewport width."),
            core_1.nls.localizeByDefault("Lines will wrap at `#editor.wordWrapColumn#`."),
            core_1.nls.localizeByDefault("Lines will wrap at the minimum of viewport and `#editor.wordWrapColumn#`.")
        ],
        "description": core_1.nls.localizeByDefault("Controls how lines should wrap."),
        "type": "string",
        "enum": [
            "off",
            "on",
            "wordWrapColumn",
            "bounded"
        ],
        "default": "off",
        "restricted": false
    },
    "editor.wordWrapColumn": {
        "markdownDescription": core_1.nls.localizeByDefault("Controls the wrapping column of the editor when `#editor.wordWrap#` is `wordWrapColumn` or `bounded`."),
        "type": "integer",
        "default": 80,
        "minimum": 1,
        "maximum": 1073741824,
        "restricted": false
    },
    "editor.wrappingIndent": {
        "type": "string",
        "enum": [
            "none",
            "same",
            "indent",
            "deepIndent"
        ],
        "enumDescriptions": [
            core_1.nls.localizeByDefault("No indentation. Wrapped lines begin at column 1."),
            core_1.nls.localizeByDefault("Wrapped lines get the same indentation as the parent."),
            core_1.nls.localizeByDefault("Wrapped lines get +1 indentation toward the parent."),
            core_1.nls.localizeByDefault("Wrapped lines get +2 indentation toward the parent.")
        ],
        "description": core_1.nls.localizeByDefault("Controls the indentation of wrapped lines."),
        "default": "same",
        "restricted": false
    },
    "editor.wrappingStrategy": {
        "enumDescriptions": [
            core_1.nls.localizeByDefault("Assumes that all characters are of the same width. This is a fast algorithm that works correctly for monospace fonts and certain scripts (like Latin characters) where glyphs are of equal width."),
            core_1.nls.localizeByDefault("Delegates wrapping points computation to the browser. This is a slow algorithm, that might cause freezes for large files, but it works correctly in all cases.")
        ],
        "type": "string",
        "enum": [
            "simple",
            "advanced"
        ],
        "default": "simple",
        "description": core_1.nls.localizeByDefault("Controls the algorithm that computes wrapping points. Note that when in accessibility mode, advanced will be used for the best experience."),
        "restricted": false
    },
    "editor.showDeprecated": {
        "description": core_1.nls.localizeByDefault("Controls strikethrough deprecated variables."),
        "type": "boolean",
        "default": true,
        "restricted": false
    },
    "editor.inlayHints.enabled": {
        "type": "string",
        "default": "on",
        "description": core_1.nls.localizeByDefault("Enables the inlay hints in the editor."),
        "enum": [
            "on",
            "onUnlessPressed",
            "offUnlessPressed",
            "off"
        ],
        "markdownEnumDescriptions": [
            core_1.nls.localizeByDefault("Inlay hints are enabled"),
            core_1.nls.localize("theia/editor/editor.inlayHints.enabled1", "Inlay hints are showing by default and hide when holding Ctrl+Alt"),
            core_1.nls.localize("theia/editor/editor.inlayHints.enabled2", "Inlay hints are hidden by default and show when holding Ctrl+Alt"),
            core_1.nls.localizeByDefault("Inlay hints are disabled")
        ],
        "restricted": false
    },
    "editor.inlayHints.fontSize": {
        "type": "number",
        "default": 0,
        "markdownDescription": core_1.nls.localize("theia/editor/editor.inlayHints.fontSize", "Controls font size of inlay hints in the editor. As default the `#editor.fontSize#` is used when the configured value is less than `5` or greater than the editor font size."),
        "restricted": false
    },
    "editor.inlayHints.fontFamily": {
        "type": "string",
        "default": "",
        "markdownDescription": core_1.nls.localize("theia/editor/editor.inlayHints.fontFamily", "Controls font family of inlay hints in the editor. When set to empty, the `#editor.fontFamily#` is used."),
        "restricted": false
    },
    "editor.inlayHints.padding": {
        "type": "boolean",
        "default": false,
        "description": core_1.nls.localizeByDefault("Enables the padding around the inlay hints in the editor."),
        "restricted": false
    },
    "editor.tabFocusMode": {
        "markdownDescription": core_1.nls.localizeByDefault("Controls whether the editor receives tabs or defers them to the workbench for navigation."),
        "type": "boolean",
        "default": false,
        "restricted": false
    },
    "editor.defaultColorDecorators": {
        "markdownDescription": core_1.nls.localizeByDefault("Controls whether inline color decorations should be shown using the default document color provider"),
        "type": "boolean",
        "default": false,
        "restricted": false
    },
    "editor.colorDecoratorsActivatedOn": {
        "enumDescriptions": [
            core_1.nls.localizeByDefault("Make the color picker appear both on click and hover of the color decorator"),
            core_1.nls.localizeByDefault("Make the color picker appear on hover of the color decorator"),
            core_1.nls.localizeByDefault("Make the color picker appear on click of the color decorator")
        ],
        "description": core_1.nls.localizeByDefault("Controls the condition to make a color picker appear from a color decorator"),
        "type": "string",
        "enum": [
            "clickAndHover",
            "hover",
            "click"
        ],
        "default": "clickAndHover",
        "restricted": false
    },
    "editor.inlineCompletionsAccessibilityVerbose": {
        "description": core_1.nls.localizeByDefault("Controls whether the accessibility hint should be provided to screen reader users when an inline completion is shown."),
        "type": "boolean",
        "default": false,
        "restricted": false
    },
    "editor.codeActionWidget.showHeaders": {
        "type": "boolean",
        "description": core_1.nls.localizeByDefault("Enable/disable showing group headers in the Code Action menu."),
        "default": true,
        "restricted": false
    },
    "editor.codeActionWidget.includeNearbyQuickfixes": {
        "type": "boolean",
        "description": core_1.nls.localize("theia/editor/editor.codeActionWidget.includeNearbyQuickfixes", "Enable/disable showing nearest quickfix within a line when not currently on a diagnostic."),
        "default": false,
        "restricted": false
    },
    "editor.experimental.dropIntoEditor.defaultProvider": {
        "type": "object",
        "description": core_1.nls.localizeByDefault("Configures the default drop provider to use for content of a given mime type."),
        "default": {},
        "additionalProperties": {
            "type": "string"
        },
        "restricted": false
    },
    "editor.rename.enablePreview": {
        "description": core_1.nls.localizeByDefault("Enable/disable the ability to preview changes before renaming"),
        "default": true,
        "type": "boolean",
        "restricted": false
    },
    "editor.find.globalFindClipboard": {
        "type": "boolean",
        "default": false,
        "description": core_1.nls.localizeByDefault("Controls whether the Find Widget should read or modify the shared find clipboard on macOS."),
        "included": core_1.isOSX
    },
    "editor.selectionClipboard": {
        "type": "boolean",
        "default": true,
        "description": core_1.nls.localizeByDefault("Controls whether the Linux primary clipboard should be supported."),
        "included": !core_1.isOSX && !core_1.isWindows
    }
};


/***/ }),

/***/ "../node_modules/@theia/editor/lib/browser/editor-keybinding.js":
/*!**********************************************************************!*\
  !*** ../node_modules/@theia/editor/lib/browser/editor-keybinding.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.EditorKeybindingContribution = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../node_modules/@theia/editor/node_modules/@theia/core/shared/inversify/index.js");
const environment_1 = __webpack_require__(/*! @theia/core/shared/@theia/application-package/lib/environment */ "../node_modules/@theia/editor/node_modules/@theia/core/shared/@theia/application-package/lib/environment/index.js");
const os_1 = __webpack_require__(/*! @theia/core/lib/common/os */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/os.js");
const editor_command_1 = __webpack_require__(/*! ./editor-command */ "../node_modules/@theia/editor/lib/browser/editor-command.js");
let EditorKeybindingContribution = class EditorKeybindingContribution {
    registerKeybindings(registry) {
        registry.registerKeybindings({
            command: editor_command_1.EditorCommands.GO_BACK.id,
            keybinding: os_1.isOSX ? 'ctrl+-' : os_1.isWindows ? 'alt+left' : /* isLinux */ 'ctrl+alt+-'
        }, {
            command: editor_command_1.EditorCommands.GO_FORWARD.id,
            keybinding: os_1.isOSX ? 'ctrl+shift+-' : os_1.isWindows ? 'alt+right' : /* isLinux */ 'ctrl+shift+-'
        }, {
            command: editor_command_1.EditorCommands.GO_LAST_EDIT.id,
            keybinding: 'ctrl+alt+q'
        }, {
            command: editor_command_1.EditorCommands.TOGGLE_WORD_WRAP.id,
            keybinding: 'alt+z'
        }, {
            command: editor_command_1.EditorCommands.REOPEN_CLOSED_EDITOR.id,
            keybinding: this.isElectron() ? 'ctrlcmd+shift+t' : 'alt+shift+t'
        });
    }
    isElectron() {
        return environment_1.environment.electron.is();
    }
};
EditorKeybindingContribution = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)()
], EditorKeybindingContribution);
exports.EditorKeybindingContribution = EditorKeybindingContribution;


/***/ }),

/***/ "../node_modules/@theia/editor/lib/browser/editor-linenumber-contribution.js":
/*!***********************************************************************************!*\
  !*** ../node_modules/@theia/editor/lib/browser/editor-linenumber-contribution.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2023 STMicroelectronics and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.EditorLineNumberContribution = exports.EDITOR_LINENUMBER_CONTEXT_MENU = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
const editor_manager_1 = __webpack_require__(/*! ./editor-manager */ "../node_modules/@theia/editor/lib/browser/editor-manager.js");
const editor_1 = __webpack_require__(/*! ./editor */ "../node_modules/@theia/editor/lib/browser/editor.js");
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../node_modules/@theia/editor/node_modules/@theia/core/shared/inversify/index.js");
const browser_1 = __webpack_require__(/*! @theia/core/lib/browser */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/index.js");
const context_key_service_1 = __webpack_require__(/*! @theia/core/lib/browser/context-key-service */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/context-key-service.js");
const core_1 = __webpack_require__(/*! @theia/core */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/index.js");
exports.EDITOR_LINENUMBER_CONTEXT_MENU = ['editor_linenumber_context_menu'];
let EditorLineNumberContribution = class EditorLineNumberContribution {
    onStart() {
        this.editorManager.onCreated(editor => this.addLineNumberContextMenu(editor));
    }
    addLineNumberContextMenu(editorWidget) {
        const editor = editorWidget.editor;
        if (editor) {
            const disposables = new core_1.DisposableCollection();
            disposables.push(editor.onMouseDown(event => this.handleContextMenu(editor, event)));
            const dispose = () => disposables.dispose();
            editorWidget.disposed.connect(dispose);
            disposables.push(core_1.Disposable.create(() => editorWidget.disposed.disconnect(dispose)));
        }
    }
    handleContextMenu(editor, event) {
        if (event.target && (event.target.type === editor_1.MouseTargetType.GUTTER_LINE_NUMBERS || event.target.type === editor_1.MouseTargetType.GUTTER_GLYPH_MARGIN)) {
            if (event.event.button === 2) {
                editor.focus();
                const lineNumber = lineNumberFromPosition(event.target.position);
                const contextKeyService = this.contextKeyService.createOverlay([['editorLineNumber', lineNumber]]);
                const uri = editor.getResourceUri();
                const args = [{
                        lineNumber: lineNumber,
                        column: 1,
                        uri: uri['codeUri'],
                    }];
                setTimeout(() => {
                    this.contextMenuRenderer.render({
                        menuPath: exports.EDITOR_LINENUMBER_CONTEXT_MENU,
                        anchor: event.event,
                        args,
                        contextKeyService
                    });
                });
            }
        }
    }
};
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(context_key_service_1.ContextKeyService),
    (0, tslib_1.__metadata)("design:type", Object)
], EditorLineNumberContribution.prototype, "contextKeyService", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(browser_1.ContextMenuRenderer),
    (0, tslib_1.__metadata)("design:type", browser_1.ContextMenuRenderer)
], EditorLineNumberContribution.prototype, "contextMenuRenderer", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(editor_manager_1.EditorManager),
    (0, tslib_1.__metadata)("design:type", editor_manager_1.EditorManager)
], EditorLineNumberContribution.prototype, "editorManager", void 0);
EditorLineNumberContribution = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)()
], EditorLineNumberContribution);
exports.EditorLineNumberContribution = EditorLineNumberContribution;
function lineNumberFromPosition(position) {
    // position.line is 0-based line position, where the expected editor line number is 1-based.
    if (position) {
        return position.line + 1;
    }
    return undefined;
}


/***/ }),

/***/ "../node_modules/@theia/editor/lib/browser/editor-manager.js":
/*!*******************************************************************!*\
  !*** ../node_modules/@theia/editor/lib/browser/editor-manager.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2017 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ActiveEditorAccess = exports.CurrentEditorAccess = exports.EditorAccess = exports.EditorManager = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../node_modules/@theia/editor/node_modules/@theia/core/shared/inversify/index.js");
const common_1 = __webpack_require__(/*! @theia/core/lib/common */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/index.js");
const browser_1 = __webpack_require__(/*! @theia/core/lib/browser */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/index.js");
const editor_widget_1 = __webpack_require__(/*! ./editor-widget */ "../node_modules/@theia/editor/lib/browser/editor-widget.js");
const editor_1 = __webpack_require__(/*! ./editor */ "../node_modules/@theia/editor/lib/browser/editor.js");
const editor_widget_factory_1 = __webpack_require__(/*! ./editor-widget-factory */ "../node_modules/@theia/editor/lib/browser/editor-widget-factory.js");
let EditorManager = class EditorManager extends browser_1.NavigatableWidgetOpenHandler {
    constructor() {
        super(...arguments);
        this.id = editor_widget_factory_1.EditorWidgetFactory.ID;
        this.label = 'Code Editor';
        this.editorCounters = new Map();
        this.onActiveEditorChangedEmitter = new common_1.Emitter();
        /**
         * Emit when the active editor is changed.
         */
        this.onActiveEditorChanged = this.onActiveEditorChangedEmitter.event;
        this.onCurrentEditorChangedEmitter = new common_1.Emitter();
        /**
         * Emit when the current editor is changed.
         */
        this.onCurrentEditorChanged = this.onCurrentEditorChangedEmitter.event;
        this.recentlyVisibleIds = [];
    }
    init() {
        super.init();
        this.shell.onDidChangeActiveWidget(() => this.updateActiveEditor());
        this.shell.onDidChangeCurrentWidget(() => this.updateCurrentEditor());
        this.shell.onDidDoubleClickMainArea(() => this.commands.executeCommand(browser_1.CommonCommands.NEW_UNTITLED_TEXT_FILE.id));
        this.onCreated(widget => {
            widget.onDidChangeVisibility(() => {
                if (widget.isVisible) {
                    this.addRecentlyVisible(widget);
                }
                this.updateCurrentEditor();
            });
            this.checkCounterForWidget(widget);
            widget.disposed.connect(() => {
                this.removeFromCounter(widget);
                this.removeRecentlyVisible(widget);
                this.updateCurrentEditor();
            });
        });
        for (const widget of this.all) {
            if (widget.isVisible) {
                this.addRecentlyVisible(widget);
            }
        }
        this.updateCurrentEditor();
    }
    getByUri(uri, options) {
        return this.getWidget(uri, options);
    }
    getOrCreateByUri(uri, options) {
        return this.getOrCreateWidget(uri, options);
    }
    tryGetPendingWidget(uri, options) {
        const editorPromise = super.tryGetPendingWidget(uri, options);
        if (editorPromise) {
            // Reveal selection before attachment to manage nav stack. (https://github.com/eclipse-theia/theia/issues/8955)
            if (!(editorPromise instanceof browser_1.Widget)) {
                editorPromise.then(editor => this.revealSelection(editor, options, uri));
            }
            else {
                this.revealSelection(editorPromise, options);
            }
        }
        return editorPromise;
    }
    async getWidget(uri, options) {
        const editor = await super.getWidget(uri, options);
        if (editor) {
            // Reveal selection before attachment to manage nav stack. (https://github.com/eclipse-theia/theia/issues/8955)
            this.revealSelection(editor, options, uri);
        }
        return editor;
    }
    async getOrCreateWidget(uri, options) {
        const editor = await super.getOrCreateWidget(uri, options);
        // Reveal selection before attachment to manage nav stack. (https://github.com/eclipse-theia/theia/issues/8955)
        this.revealSelection(editor, options, uri);
        return editor;
    }
    get recentlyVisible() {
        const id = this.recentlyVisibleIds[0];
        return id && this.all.find(w => w.id === id) || undefined;
    }
    addRecentlyVisible(widget) {
        this.removeRecentlyVisible(widget);
        this.recentlyVisibleIds.unshift(widget.id);
    }
    removeRecentlyVisible(widget) {
        const index = this.recentlyVisibleIds.indexOf(widget.id);
        if (index !== -1) {
            this.recentlyVisibleIds.splice(index, 1);
        }
    }
    /**
     * The active editor.
     * If there is an active editor (one that has focus), active and current are the same.
     */
    get activeEditor() {
        return this._activeEditor;
    }
    setActiveEditor(active) {
        if (this._activeEditor !== active) {
            this._activeEditor = active;
            this.onActiveEditorChangedEmitter.fire(this._activeEditor);
        }
    }
    updateActiveEditor() {
        const widget = this.shell.activeWidget;
        if (widget instanceof editor_widget_1.EditorWidget) {
            this.addRecentlyVisible(widget);
            this.setActiveEditor(widget);
        }
        else {
            this.setActiveEditor(undefined);
        }
    }
    /**
     * The most recently activated editor (which might not have the focus anymore, hence it is not active).
     * If no editor has focus, e.g. when a context menu is shown, the active editor is `undefined`, but current might be the editor that was active before the menu popped up.
     */
    get currentEditor() {
        return this._currentEditor;
    }
    setCurrentEditor(current) {
        if (this._currentEditor !== current) {
            this._currentEditor = current;
            this.onCurrentEditorChangedEmitter.fire(this._currentEditor);
        }
    }
    updateCurrentEditor() {
        const widget = this.shell.currentWidget;
        if (widget instanceof editor_widget_1.EditorWidget) {
            this.setCurrentEditor(widget);
        }
        else if (!this._currentEditor || !this._currentEditor.isVisible || this.currentEditor !== this.recentlyVisible) {
            this.setCurrentEditor(this.recentlyVisible);
        }
    }
    canHandle(uri, options) {
        return 100;
    }
    open(uri, options) {
        var _a;
        if ((options === null || options === void 0 ? void 0 : options.counter) === undefined) {
            const insertionOptions = this.shell.getInsertionOptions(options === null || options === void 0 ? void 0 : options.widgetOptions);
            // Definitely creating a new tabbar - no widget can match.
            if ((_a = insertionOptions.addOptions.mode) === null || _a === void 0 ? void 0 : _a.startsWith('split')) {
                return super.open(uri, { counter: this.createCounterForUri(uri), ...options });
            }
            // Check the target tabbar for an existing widget.
            const tabbar = insertionOptions.addOptions.ref && this.shell.getTabBarFor(insertionOptions.addOptions.ref);
            if (tabbar) {
                const currentUri = uri.toString();
                for (const title of tabbar.titles) {
                    if (title.owner instanceof editor_widget_1.EditorWidget) {
                        const { uri: otherWidgetUri, id } = this.extractIdFromWidget(title.owner);
                        if (otherWidgetUri === currentUri) {
                            return super.open(uri, { counter: id, ...options });
                        }
                    }
                }
            }
            // If the user has opted to prefer to open an existing editor even if it's on a different tab, check if we have anything about the URI.
            if (this.preferenceService.get('workbench.editor.revealIfOpen', false)) {
                const counter = this.getCounterForUri(uri);
                if (counter !== undefined) {
                    return super.open(uri, { counter, ...options });
                }
            }
            // Open a new widget.
            return super.open(uri, { counter: this.createCounterForUri(uri), ...options });
        }
        return super.open(uri, options);
    }
    /**
     * Opens an editor to the side of the current editor. Defaults to opening to the right.
     * To modify direction, pass options with `{widgetOptions: {mode: ...}}`
     */
    openToSide(uri, options) {
        const counter = this.createCounterForUri(uri);
        const splitOptions = { widgetOptions: { mode: 'split-right' }, ...options, counter };
        return this.open(uri, splitOptions);
    }
    revealSelection(widget, input, uri) {
        let inputSelection = input === null || input === void 0 ? void 0 : input.selection;
        if (!inputSelection && uri) {
            const match = /^L?(\d+)(?:,(\d+))?/.exec(uri.fragment);
            if (match) {
                // support file:///some/file.js#73,84
                // support file:///some/file.js#L73
                inputSelection = {
                    start: {
                        line: parseInt(match[1]) - 1,
                        character: match[2] ? parseInt(match[2]) - 1 : 0
                    }
                };
            }
        }
        if (inputSelection) {
            const editor = widget.editor;
            const selection = this.getSelection(widget, inputSelection);
            if (editor_1.Position.is(selection)) {
                editor.cursor = selection;
                editor.revealPosition(selection);
            }
            else if (editor_1.Range.is(selection)) {
                editor.cursor = selection.end;
                editor.selection = selection;
                editor.revealRange(selection);
            }
        }
    }
    getSelection(widget, selection) {
        const { start, end } = selection;
        if (editor_1.Position.is(start)) {
            if (editor_1.Position.is(end)) {
                return widget.editor.document.toValidRange({ start, end });
            }
            return widget.editor.document.toValidPosition(start);
        }
        const line = start && start.line !== undefined && start.line >= 0 ? start.line : undefined;
        if (line === undefined) {
            return undefined;
        }
        const character = start && start.character !== undefined && start.character >= 0 ? start.character : widget.editor.document.getLineMaxColumn(line);
        const endLine = end && end.line !== undefined && end.line >= 0 ? end.line : undefined;
        if (endLine === undefined) {
            return { line, character };
        }
        const endCharacter = end && end.character !== undefined && end.character >= 0 ? end.character : widget.editor.document.getLineMaxColumn(endLine);
        return {
            start: { line, character },
            end: { line: endLine, character: endCharacter }
        };
    }
    removeFromCounter(widget) {
        const { id, uri } = this.extractIdFromWidget(widget);
        if (uri && !Number.isNaN(id)) {
            let max = -Infinity;
            this.all.forEach(editor => {
                const candidateID = this.extractIdFromWidget(editor);
                if ((candidateID.uri === uri) && (candidateID.id > max)) {
                    max = candidateID.id;
                }
            });
            if (max > -Infinity) {
                this.editorCounters.set(uri, max);
            }
            else {
                this.editorCounters.delete(uri);
            }
        }
    }
    extractIdFromWidget(widget) {
        const uri = widget.editor.uri.toString();
        const id = Number(widget.id.slice(widget.id.lastIndexOf(':') + 1));
        return { id, uri };
    }
    checkCounterForWidget(widget) {
        var _a;
        const { id, uri } = this.extractIdFromWidget(widget);
        const numericalId = Number(id);
        if (uri && !Number.isNaN(numericalId)) {
            const highestKnownId = (_a = this.editorCounters.get(uri)) !== null && _a !== void 0 ? _a : -Infinity;
            if (numericalId > highestKnownId) {
                this.editorCounters.set(uri, numericalId);
            }
        }
    }
    createCounterForUri(uri) {
        var _a;
        const identifier = uri.toString();
        const next = ((_a = this.editorCounters.get(identifier)) !== null && _a !== void 0 ? _a : 0) + 1;
        return next;
    }
    getCounterForUri(uri) {
        var _a;
        const idWithoutCounter = editor_widget_factory_1.EditorWidgetFactory.createID(uri);
        const counterOfMostRecentlyVisibleEditor = (_a = this.recentlyVisibleIds.find(id => id.startsWith(idWithoutCounter))) === null || _a === void 0 ? void 0 : _a.slice(idWithoutCounter.length + 1);
        return counterOfMostRecentlyVisibleEditor === undefined ? undefined : parseInt(counterOfMostRecentlyVisibleEditor);
    }
    getOrCreateCounterForUri(uri) {
        var _a;
        return (_a = this.getCounterForUri(uri)) !== null && _a !== void 0 ? _a : this.createCounterForUri(uri);
    }
    createWidgetOptions(uri, options) {
        var _a;
        const navigatableOptions = super.createWidgetOptions(uri, options);
        navigatableOptions.counter = (_a = options === null || options === void 0 ? void 0 : options.counter) !== null && _a !== void 0 ? _a : this.getOrCreateCounterForUri(uri);
        return navigatableOptions;
    }
};
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(common_1.CommandService),
    (0, tslib_1.__metadata)("design:type", Object)
], EditorManager.prototype, "commands", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(browser_1.PreferenceService),
    (0, tslib_1.__metadata)("design:type", Object)
], EditorManager.prototype, "preferenceService", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.postConstruct)(),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", []),
    (0, tslib_1.__metadata)("design:returntype", void 0)
], EditorManager.prototype, "init", null);
EditorManager = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)()
], EditorManager);
exports.EditorManager = EditorManager;
/**
 * Provides direct access to the underlying text editor.
 */
let EditorAccess = class EditorAccess {
    /**
     * The URI of the underlying document from the editor.
     */
    get uri() {
        const editor = this.editor;
        if (editor) {
            return editor.uri.toString();
        }
        return undefined;
    }
    /**
     * The selection location from the text editor.
     */
    get selection() {
        const editor = this.editor;
        if (editor) {
            const uri = editor.uri.toString();
            const range = editor.selection;
            return {
                range,
                uri
            };
        }
        return undefined;
    }
    /**
     * The unique identifier of the language the current editor belongs to.
     */
    get languageId() {
        const editor = this.editor;
        if (editor) {
            return editor.document.languageId;
        }
        return undefined;
    }
    /**
     * The text editor.
     */
    get editor() {
        const editorWidget = this.editorWidget();
        if (editorWidget) {
            return editorWidget.editor;
        }
        return undefined;
    }
};
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(EditorManager),
    (0, tslib_1.__metadata)("design:type", EditorManager)
], EditorAccess.prototype, "editorManager", void 0);
EditorAccess = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)()
], EditorAccess);
exports.EditorAccess = EditorAccess;
/**
 * Provides direct access to the currently active text editor.
 */
let CurrentEditorAccess = class CurrentEditorAccess extends EditorAccess {
    editorWidget() {
        return this.editorManager.currentEditor;
    }
};
CurrentEditorAccess = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)()
], CurrentEditorAccess);
exports.CurrentEditorAccess = CurrentEditorAccess;
/**
 * Provides access to the active text editor.
 */
let ActiveEditorAccess = class ActiveEditorAccess extends EditorAccess {
    editorWidget() {
        return this.editorManager.activeEditor;
    }
};
ActiveEditorAccess = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)()
], ActiveEditorAccess);
exports.ActiveEditorAccess = ActiveEditorAccess;
(function (EditorAccess) {
    EditorAccess.CURRENT = 'current-editor-access';
    EditorAccess.ACTIVE = 'active-editor-access';
})(EditorAccess = exports.EditorAccess || (exports.EditorAccess = {}));
exports.EditorAccess = EditorAccess;


/***/ }),

/***/ "../node_modules/@theia/editor/lib/browser/editor-menu.js":
/*!****************************************************************!*\
  !*** ../node_modules/@theia/editor/lib/browser/editor-menu.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2017 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.EditorMenuContribution = exports.EditorMainMenu = exports.EditorContextMenu = exports.EDITOR_CONTEXT_MENU = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../node_modules/@theia/editor/node_modules/@theia/core/shared/inversify/index.js");
const core_1 = __webpack_require__(/*! @theia/core */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/index.js");
const browser_1 = __webpack_require__(/*! @theia/core/lib/browser */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/index.js");
const editor_command_1 = __webpack_require__(/*! ./editor-command */ "../node_modules/@theia/editor/lib/browser/editor-command.js");
const nls_1 = __webpack_require__(/*! @theia/core/lib/common/nls */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/nls.js");
exports.EDITOR_CONTEXT_MENU = ['editor_context_menu'];
/**
 * Editor context menu default groups should be aligned
 * with VS Code default groups: https://code.visualstudio.com/api/references/contribution-points#contributes.menus
 */
var EditorContextMenu;
(function (EditorContextMenu) {
    EditorContextMenu.NAVIGATION = [...exports.EDITOR_CONTEXT_MENU, 'navigation'];
    EditorContextMenu.MODIFICATION = [...exports.EDITOR_CONTEXT_MENU, '1_modification'];
    EditorContextMenu.CUT_COPY_PASTE = [...exports.EDITOR_CONTEXT_MENU, '9_cutcopypaste'];
    EditorContextMenu.COMMANDS = [...exports.EDITOR_CONTEXT_MENU, 'z_commands'];
    EditorContextMenu.UNDO_REDO = [...exports.EDITOR_CONTEXT_MENU, '1_undo'];
})(EditorContextMenu = exports.EditorContextMenu || (exports.EditorContextMenu = {}));
var EditorMainMenu;
(function (EditorMainMenu) {
    /**
     * The main `Go` menu item.
     */
    EditorMainMenu.GO = [...core_1.MAIN_MENU_BAR, '5_go'];
    /**
     * Navigation menu group in the `Go` main-menu.
     */
    EditorMainMenu.NAVIGATION_GROUP = [...EditorMainMenu.GO, '1_navigation_group'];
    /**
     * Context management group in the `Go` main menu: Pane and editor switching commands.
     */
    EditorMainMenu.CONTEXT_GROUP = [...EditorMainMenu.GO, '1.1_context_group'];
    /**
     * Submenu for switching panes in the main area.
     */
    EditorMainMenu.PANE_GROUP = [...EditorMainMenu.CONTEXT_GROUP, '2_pane_group'];
    EditorMainMenu.BY_NUMBER = [...EditorMainMenu.PANE_GROUP, '1_by_number'];
    EditorMainMenu.NEXT_PREVIOUS = [...EditorMainMenu.PANE_GROUP, '2_by_location'];
    /**
     * Workspace menu group in the `Go` main-menu.
     */
    EditorMainMenu.WORKSPACE_GROUP = [...EditorMainMenu.GO, '2_workspace_group'];
    /**
     * Language features menu group in the `Go` main-menu.
     */
    EditorMainMenu.LANGUAGE_FEATURES_GROUP = [...EditorMainMenu.GO, '3_language_features_group'];
    /**
     * Location menu group in the `Go` main-menu.
     */
    EditorMainMenu.LOCATION_GROUP = [...EditorMainMenu.GO, '4_locations'];
})(EditorMainMenu = exports.EditorMainMenu || (exports.EditorMainMenu = {}));
let EditorMenuContribution = class EditorMenuContribution {
    registerMenus(registry) {
        registry.registerMenuAction(EditorContextMenu.UNDO_REDO, {
            commandId: browser_1.CommonCommands.UNDO.id
        });
        registry.registerMenuAction(EditorContextMenu.UNDO_REDO, {
            commandId: browser_1.CommonCommands.REDO.id
        });
        registry.registerMenuAction(EditorContextMenu.CUT_COPY_PASTE, {
            commandId: browser_1.CommonCommands.CUT.id,
            order: '0'
        });
        registry.registerMenuAction(EditorContextMenu.CUT_COPY_PASTE, {
            commandId: browser_1.CommonCommands.COPY.id,
            order: '1'
        });
        registry.registerMenuAction(EditorContextMenu.CUT_COPY_PASTE, {
            commandId: browser_1.CommonCommands.PASTE.id,
            order: '2'
        });
        // Editor navigation. Go > Back and Go > Forward.
        registry.registerSubmenu(EditorMainMenu.GO, nls_1.nls.localizeByDefault('Go'));
        registry.registerMenuAction(EditorMainMenu.NAVIGATION_GROUP, {
            commandId: editor_command_1.EditorCommands.GO_BACK.id,
            label: editor_command_1.EditorCommands.GO_BACK.label,
            order: '1'
        });
        registry.registerMenuAction(EditorMainMenu.NAVIGATION_GROUP, {
            commandId: editor_command_1.EditorCommands.GO_FORWARD.id,
            label: editor_command_1.EditorCommands.GO_FORWARD.label,
            order: '2'
        });
        registry.registerMenuAction(EditorMainMenu.NAVIGATION_GROUP, {
            commandId: editor_command_1.EditorCommands.GO_LAST_EDIT.id,
            label: nls_1.nls.localizeByDefault('Last Edit Location'),
            order: '3'
        });
        registry.registerSubmenu(EditorMainMenu.PANE_GROUP, nls_1.nls.localizeByDefault('Switch Group'));
        registry.registerMenuAction(EditorMainMenu.BY_NUMBER, {
            commandId: 'workbench.action.focusFirstEditorGroup',
            label: nls_1.nls.localizeByDefault('Group 1'),
        });
        registry.registerMenuAction(EditorMainMenu.BY_NUMBER, {
            commandId: 'workbench.action.focusSecondEditorGroup',
            label: nls_1.nls.localizeByDefault('Group 2'),
        });
        registry.registerMenuAction(EditorMainMenu.BY_NUMBER, {
            commandId: 'workbench.action.focusThirdEditorGroup',
            label: nls_1.nls.localizeByDefault('Group 3'),
        });
        registry.registerMenuAction(EditorMainMenu.BY_NUMBER, {
            commandId: 'workbench.action.focusFourthEditorGroup',
            label: nls_1.nls.localizeByDefault('Group 4'),
        });
        registry.registerMenuAction(EditorMainMenu.BY_NUMBER, {
            commandId: 'workbench.action.focusFifthEditorGroup',
            label: nls_1.nls.localizeByDefault('Group 5'),
        });
        registry.registerMenuAction(EditorMainMenu.NEXT_PREVIOUS, {
            commandId: browser_1.CommonCommands.NEXT_TAB_GROUP.id,
            label: nls_1.nls.localizeByDefault('Next Group'),
            order: '1'
        });
        registry.registerMenuAction(EditorMainMenu.NEXT_PREVIOUS, {
            commandId: browser_1.CommonCommands.PREVIOUS_TAB_GROUP.id,
            label: nls_1.nls.localizeByDefault('Previous Group'),
            order: '2'
        });
        registry.registerMenuAction(EditorMainMenu.LOCATION_GROUP, {
            commandId: editor_command_1.EditorCommands.GOTO_LINE_COLUMN.id,
            order: '1'
        });
        // Toggle Commands.
        registry.registerMenuAction(browser_1.CommonMenus.VIEW_TOGGLE, {
            commandId: editor_command_1.EditorCommands.TOGGLE_WORD_WRAP.id,
            order: '0'
        });
        registry.registerMenuAction(browser_1.CommonMenus.VIEW_TOGGLE, {
            commandId: editor_command_1.EditorCommands.TOGGLE_MINIMAP.id,
            order: '1',
        });
        registry.registerMenuAction(browser_1.CommonMenus.VIEW_TOGGLE, {
            commandId: browser_1.CommonCommands.TOGGLE_BREADCRUMBS.id,
            order: '2',
        });
        registry.registerMenuAction(browser_1.CommonMenus.VIEW_TOGGLE, {
            commandId: editor_command_1.EditorCommands.TOGGLE_RENDER_WHITESPACE.id,
            order: '3'
        });
        registry.registerMenuAction(browser_1.CommonMenus.VIEW_TOGGLE, {
            commandId: editor_command_1.EditorCommands.TOGGLE_STICKY_SCROLL.id,
            order: '4'
        });
        registry.registerMenuAction(browser_1.CommonMenus.FILE_CLOSE, {
            commandId: browser_1.CommonCommands.CLOSE_MAIN_TAB.id,
            label: nls_1.nls.localizeByDefault('Close Editor'),
            order: '1'
        });
        registry.registerMenuAction(browser_1.CommonMenus.VIEW_EDITOR_SUBMENU_SPLIT, {
            commandId: editor_command_1.EditorCommands.SPLIT_EDITOR_RIGHT.id,
            label: nls_1.nls.localizeByDefault('Split Editor Right'),
            order: '0'
        });
        registry.registerMenuAction(browser_1.CommonMenus.VIEW_EDITOR_SUBMENU_SPLIT, {
            commandId: editor_command_1.EditorCommands.SPLIT_EDITOR_LEFT.id,
            label: nls_1.nls.localizeByDefault('Split Editor Left'),
            order: '1'
        });
        registry.registerMenuAction(browser_1.CommonMenus.VIEW_EDITOR_SUBMENU_SPLIT, {
            commandId: editor_command_1.EditorCommands.SPLIT_EDITOR_UP.id,
            label: nls_1.nls.localizeByDefault('Split Editor Up'),
            order: '2'
        });
        registry.registerMenuAction(browser_1.CommonMenus.VIEW_EDITOR_SUBMENU_SPLIT, {
            commandId: editor_command_1.EditorCommands.SPLIT_EDITOR_DOWN.id,
            label: nls_1.nls.localizeByDefault('Split Editor Down'),
            order: '3'
        });
        registry.registerMenuAction(browser_1.CommonMenus.VIEW_EDITOR_SUBMENU_ORTHO, {
            commandId: editor_command_1.EditorCommands.SPLIT_EDITOR_HORIZONTAL.id,
            label: nls_1.nls.localize('theia/editor/splitHorizontal', 'Split Editor Horizontal'),
            order: '1'
        });
        registry.registerMenuAction(browser_1.CommonMenus.VIEW_EDITOR_SUBMENU_ORTHO, {
            commandId: editor_command_1.EditorCommands.SPLIT_EDITOR_VERTICAL.id,
            label: nls_1.nls.localize('theia/editor/splitVertical', 'Split Editor Vertical'),
            order: '2'
        });
        registry.registerSubmenu(browser_1.CommonMenus.VIEW_EDITOR_SUBMENU, nls_1.nls.localizeByDefault('Editor Layout'));
    }
};
EditorMenuContribution = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)()
], EditorMenuContribution);
exports.EditorMenuContribution = EditorMenuContribution;


/***/ }),

/***/ "../node_modules/@theia/editor/lib/browser/editor-navigation-contribution.js":
/*!***********************************************************************************!*\
  !*** ../node_modules/@theia/editor/lib/browser/editor-navigation-contribution.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var EditorNavigationContribution_1;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.EditorNavigationContribution = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../node_modules/@theia/editor/node_modules/@theia/core/shared/inversify/index.js");
const logger_1 = __webpack_require__(/*! @theia/core/lib/common/logger */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/logger.js");
const storage_service_1 = __webpack_require__(/*! @theia/core/lib/browser/storage-service */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/storage-service.js");
const disposable_1 = __webpack_require__(/*! @theia/core/lib/common/disposable */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/disposable.js");
const command_1 = __webpack_require__(/*! @theia/core/lib/common/command */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/command.js");
const editor_command_1 = __webpack_require__(/*! ./editor-command */ "../node_modules/@theia/editor/lib/browser/editor-command.js");
const editor_manager_1 = __webpack_require__(/*! ./editor-manager */ "../node_modules/@theia/editor/lib/browser/editor-manager.js");
const navigation_location_1 = __webpack_require__(/*! ./navigation/navigation-location */ "../node_modules/@theia/editor/lib/browser/navigation/navigation-location.js");
const navigation_location_service_1 = __webpack_require__(/*! ./navigation/navigation-location-service */ "../node_modules/@theia/editor/lib/browser/navigation/navigation-location-service.js");
const browser_1 = __webpack_require__(/*! @theia/core/lib/browser */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/index.js");
const dialogs_1 = __webpack_require__(/*! @theia/core/lib/browser/dialogs */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/dialogs.js");
const core_1 = __webpack_require__(/*! @theia/core */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/index.js");
let EditorNavigationContribution = EditorNavigationContribution_1 = class EditorNavigationContribution {
    constructor() {
        this.toDispose = new disposable_1.DisposableCollection();
        this.toDisposePerCurrentEditor = new disposable_1.DisposableCollection();
    }
    init() {
        this.toDispose.pushAll([
            // TODO listen on file resource changes, if a file gets deleted, remove the corresponding navigation locations (if any).
            // This would require introducing the FS dependency in the editor extension.
            this.editorManager.onCurrentEditorChanged(this.onCurrentEditorChanged.bind(this)),
            this.editorManager.onCreated(widget => {
                this.locationStack.removeClosedEditor(widget.editor.uri);
                widget.disposed.connect(() => this.locationStack.addClosedEditor({
                    uri: widget.editor.uri,
                    viewState: widget.editor.storeViewState()
                }));
            })
        ]);
        this.commandRegistry.registerHandler(editor_command_1.EditorCommands.GO_BACK.id, {
            execute: () => this.locationStack.back(),
            isEnabled: () => this.locationStack.canGoBack()
        });
        this.commandRegistry.registerHandler(editor_command_1.EditorCommands.GO_FORWARD.id, {
            execute: () => this.locationStack.forward(),
            isEnabled: () => this.locationStack.canGoForward()
        });
        this.commandRegistry.registerHandler(editor_command_1.EditorCommands.GO_LAST_EDIT.id, {
            execute: () => this.locationStack.reveal(this.locationStack.lastEditLocation()),
            isEnabled: () => !!this.locationStack.lastEditLocation()
        });
        this.commandRegistry.registerHandler(editor_command_1.EditorCommands.CLEAR_EDITOR_HISTORY.id, {
            execute: async () => {
                const shouldClear = await new dialogs_1.ConfirmDialog({
                    title: core_1.nls.localizeByDefault('Clear Editor History'),
                    msg: core_1.nls.localizeByDefault('Do you want to clear the history of recently opened editors?'),
                    ok: dialogs_1.Dialog.YES,
                    cancel: dialogs_1.Dialog.NO
                }).open();
                if (shouldClear) {
                    this.locationStack.clearHistory();
                }
            },
            isEnabled: () => this.locationStack.locations().length > 0
        });
        this.commandRegistry.registerHandler(editor_command_1.EditorCommands.TOGGLE_MINIMAP.id, {
            execute: () => this.toggleMinimap(),
            isEnabled: () => true,
            isToggled: () => this.isMinimapEnabled()
        });
        this.commandRegistry.registerHandler(editor_command_1.EditorCommands.TOGGLE_RENDER_WHITESPACE.id, {
            execute: () => this.toggleRenderWhitespace(),
            isEnabled: () => true,
            isToggled: () => this.isRenderWhitespaceEnabled()
        });
        this.commandRegistry.registerHandler(editor_command_1.EditorCommands.TOGGLE_WORD_WRAP.id, {
            execute: () => this.toggleWordWrap(),
            isEnabled: () => true,
        });
        this.commandRegistry.registerHandler(editor_command_1.EditorCommands.TOGGLE_STICKY_SCROLL.id, {
            execute: () => this.toggleStickyScroll(),
            isEnabled: () => true,
            isToggled: () => this.isStickyScrollEnabled()
        });
        this.commandRegistry.registerHandler(editor_command_1.EditorCommands.REOPEN_CLOSED_EDITOR.id, {
            execute: () => this.reopenLastClosedEditor()
        });
        this.installMouseNavigationSupport();
    }
    async installMouseNavigationSupport() {
        const mouseNavigationSupport = new disposable_1.DisposableCollection();
        const updateMouseNavigationListener = () => {
            mouseNavigationSupport.dispose();
            if (this.shouldNavigateWithMouse()) {
                mouseNavigationSupport.push((0, browser_1.addEventListener)(document.body, 'mousedown', event => this.onMouseDown(event), true));
            }
        };
        this.toDispose.push(this.preferenceService.onPreferenceChanged(change => {
            if (change.preferenceName === EditorNavigationContribution_1.MOUSE_NAVIGATION_PREFERENCE) {
                updateMouseNavigationListener();
            }
        }));
        updateMouseNavigationListener();
        this.toDispose.push(mouseNavigationSupport);
    }
    async onMouseDown(event) {
        // Support navigation in history when mouse buttons 4/5 are pressed
        switch (event.button) {
            case 3:
                event.preventDefault();
                this.locationStack.back();
                break;
            case 4:
                event.preventDefault();
                this.locationStack.forward();
                break;
        }
    }
    /**
     * Reopens the last closed editor with its stored view state if possible from history.
     * If the editor cannot be restored, continue to the next editor in history.
     */
    async reopenLastClosedEditor() {
        const lastClosedEditor = this.locationStack.getLastClosedEditor();
        if (lastClosedEditor === undefined) {
            return;
        }
        try {
            const widget = await this.editorManager.open(lastClosedEditor.uri);
            widget.editor.restoreViewState(lastClosedEditor.viewState);
        }
        catch {
            this.locationStack.removeClosedEditor(lastClosedEditor.uri);
            this.reopenLastClosedEditor();
        }
    }
    async onStart() {
        this.restoreState();
    }
    onStop() {
        this.storeState();
        this.dispose();
    }
    dispose() {
        this.toDispose.dispose();
    }
    /**
     * Toggle the editor word wrap behavior.
     */
    async toggleWordWrap() {
        // Get the current word wrap.
        const wordWrap = this.preferenceService.get('editor.wordWrap');
        if (wordWrap === undefined) {
            return;
        }
        // The list of allowed word wrap values.
        const values = ['off', 'on', 'wordWrapColumn', 'bounded'];
        // Get the index of the current value, and toggle to the next available value.
        const index = values.indexOf(wordWrap) + 1;
        if (index > -1) {
            this.preferenceService.set('editor.wordWrap', values[index % values.length], browser_1.PreferenceScope.User);
        }
    }
    /**
     * Toggle the display of sticky scroll in the editor.
     */
    async toggleStickyScroll() {
        const value = this.preferenceService.get('editor.stickyScroll.enabled');
        this.preferenceService.set('editor.stickyScroll.enabled', !value, browser_1.PreferenceScope.User);
    }
    /**
     * Toggle the display of minimap in the editor.
     */
    async toggleMinimap() {
        const value = this.preferenceService.get('editor.minimap.enabled');
        this.preferenceService.set('editor.minimap.enabled', !value, browser_1.PreferenceScope.User);
    }
    /**
     * Toggle the rendering of whitespace in the editor.
     */
    async toggleRenderWhitespace() {
        const renderWhitespace = this.preferenceService.get('editor.renderWhitespace');
        let updatedRenderWhitespace;
        if (renderWhitespace === 'none') {
            updatedRenderWhitespace = 'all';
        }
        else {
            updatedRenderWhitespace = 'none';
        }
        this.preferenceService.set('editor.renderWhitespace', updatedRenderWhitespace, browser_1.PreferenceScope.User);
    }
    onCurrentEditorChanged(editorWidget) {
        this.toDisposePerCurrentEditor.dispose();
        if (editorWidget) {
            const { editor } = editorWidget;
            this.toDisposePerCurrentEditor.pushAll([
                // Instead of registering an `onCursorPositionChanged` listener, we treat the zero length selection as a cursor position change.
                // Otherwise we would have two events for a single cursor change interaction.
                editor.onSelectionChanged(selection => this.onSelectionChanged(editor, selection)),
                editor.onDocumentContentChanged(event => this.onDocumentContentChanged(editor, event))
            ]);
            this.locationStack.register(navigation_location_1.NavigationLocation.create(editor, editor.selection));
        }
    }
    onCursorPositionChanged(editor, position) {
        this.locationStack.register(navigation_location_1.NavigationLocation.create(editor, position));
    }
    onSelectionChanged(editor, selection) {
        if (this.isZeroLengthRange(selection)) {
            this.onCursorPositionChanged(editor, selection.start);
        }
        else {
            this.locationStack.register(navigation_location_1.NavigationLocation.create(editor, selection));
        }
    }
    onDocumentContentChanged(editor, event) {
        if (event.contentChanges.length > 0) {
            this.locationStack.register(navigation_location_1.NavigationLocation.create(editor, event.contentChanges[0]));
        }
    }
    /**
     * `true` if the `range` argument has zero length. In other words, the `start` and the `end` positions are the same. Otherwise, `false`.
     */
    isZeroLengthRange(range) {
        const { start, end } = range;
        return start.line === end.line && start.character === end.character;
    }
    async storeState() {
        this.storageService.setData(EditorNavigationContribution_1.ID, {
            locations: this.locationStack.locations().map(navigation_location_1.NavigationLocation.toObject)
        });
        this.storageService.setData(EditorNavigationContribution_1.CLOSED_EDITORS_KEY, {
            closedEditors: this.shouldStoreClosedEditors() ? this.locationStack.closedEditorsStack.map(navigation_location_1.RecentlyClosedEditor.toObject) : []
        });
    }
    async restoreState() {
        await this.restoreNavigationLocations();
        await this.restoreClosedEditors();
    }
    async restoreNavigationLocations() {
        const raw = await this.storageService.getData(EditorNavigationContribution_1.ID);
        if (raw && raw.locations) {
            const locations = [];
            for (let i = 0; i < raw.locations.length; i++) {
                const location = navigation_location_1.NavigationLocation.fromObject(raw.locations[i]);
                if (location) {
                    locations.push(location);
                }
                else {
                    this.logger.warn('Could not restore the state of the editor navigation history.');
                    return;
                }
            }
            this.locationStack.register(...locations);
        }
    }
    async restoreClosedEditors() {
        const raw = await this.storageService.getData(EditorNavigationContribution_1.CLOSED_EDITORS_KEY);
        if (raw && raw.closedEditors) {
            for (let i = 0; i < raw.closedEditors.length; i++) {
                const editor = navigation_location_1.RecentlyClosedEditor.fromObject(raw.closedEditors[i]);
                if (editor) {
                    this.locationStack.addClosedEditor(editor);
                }
                else {
                    this.logger.warn('Could not restore the state of the closed editors stack.');
                }
            }
        }
    }
    isMinimapEnabled() {
        return !!this.preferenceService.get('editor.minimap.enabled');
    }
    isRenderWhitespaceEnabled() {
        const renderWhitespace = this.preferenceService.get('editor.renderWhitespace');
        return renderWhitespace === 'none' ? false : true;
    }
    shouldStoreClosedEditors() {
        return !!this.preferenceService.get('editor.history.persistClosedEditors');
    }
    shouldNavigateWithMouse() {
        return !!this.preferenceService.get(EditorNavigationContribution_1.MOUSE_NAVIGATION_PREFERENCE);
    }
    isStickyScrollEnabled() {
        return !!this.preferenceService.get('editor.stickyScroll.enabled');
    }
};
EditorNavigationContribution.ID = 'editor-navigation-contribution';
EditorNavigationContribution.CLOSED_EDITORS_KEY = 'recently-closed-editors';
EditorNavigationContribution.MOUSE_NAVIGATION_PREFERENCE = 'workbench.editor.mouseBackForwardToNavigate';
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(logger_1.ILogger),
    (0, tslib_1.__metadata)("design:type", Object)
], EditorNavigationContribution.prototype, "logger", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(editor_manager_1.EditorManager),
    (0, tslib_1.__metadata)("design:type", editor_manager_1.EditorManager)
], EditorNavigationContribution.prototype, "editorManager", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(navigation_location_service_1.NavigationLocationService),
    (0, tslib_1.__metadata)("design:type", navigation_location_service_1.NavigationLocationService)
], EditorNavigationContribution.prototype, "locationStack", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(storage_service_1.StorageService),
    (0, tslib_1.__metadata)("design:type", Object)
], EditorNavigationContribution.prototype, "storageService", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(browser_1.PreferenceService),
    (0, tslib_1.__metadata)("design:type", Object)
], EditorNavigationContribution.prototype, "preferenceService", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(command_1.CommandRegistry),
    (0, tslib_1.__metadata)("design:type", command_1.CommandRegistry)
], EditorNavigationContribution.prototype, "commandRegistry", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.postConstruct)(),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", []),
    (0, tslib_1.__metadata)("design:returntype", void 0)
], EditorNavigationContribution.prototype, "init", null);
EditorNavigationContribution = EditorNavigationContribution_1 = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)()
], EditorNavigationContribution);
exports.EditorNavigationContribution = EditorNavigationContribution;


/***/ }),

/***/ "../node_modules/@theia/editor/lib/browser/editor-preferences.js":
/*!***********************************************************************!*\
  !*** ../node_modules/@theia/editor/lib/browser/editor-preferences.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.bindEditorPreferences = exports.createEditorPreferences = exports.EditorPreferences = exports.EditorPreferenceContribution = exports.editorPreferenceSchema = void 0;
const preferences_1 = __webpack_require__(/*! @theia/core/lib/browser/preferences */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/preferences/index.js");
const injectable_preference_proxy_1 = __webpack_require__(/*! @theia/core/lib/browser/preferences/injectable-preference-proxy */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/preferences/injectable-preference-proxy.js");
const nls_1 = __webpack_require__(/*! @theia/core/lib/common/nls */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/nls.js");
const core_1 = __webpack_require__(/*! @theia/core */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/index.js");
const editor_generated_preference_schema_1 = __webpack_require__(/*! ./editor-generated-preference-schema */ "../node_modules/@theia/editor/lib/browser/editor-generated-preference-schema.js");
/* eslint-disable @theia/localization-check,max-len,no-null/no-null */
// #region src/vs/workbench/contrib/codeActions/browser/codeActionsContribution.ts
const codeActionsContributionSchema = {
    'editor.codeActionsOnSave': {
        oneOf: [
            {
                type: 'object',
                properties: {
                    'source.fixAll': {
                        type: 'boolean',
                        description: nls_1.nls.localizeByDefault('Controls whether auto fix action should be run on file save.')
                    }
                },
                additionalProperties: {
                    type: 'boolean'
                },
            },
            {
                type: 'array',
                items: { type: 'string' }
            }
        ],
        default: {},
        description: nls_1.nls.localizeByDefault('Code action kinds to be run on save.'),
        scope: 'language-overridable',
    }
};
// #endregion
// #region src/vs/workbench/contrib/files/browser/files.contribution.ts
const fileContributionSchema = {
    'editor.formatOnSave': {
        'type': 'boolean',
        'description': nls_1.nls.localizeByDefault('Format a file on save. A formatter must be available, the file must not be saved after delay, and the editor must not be shutting down.'),
        'scope': preferences_1.PreferenceScope.fromString('language-overridable'),
    },
    'editor.formatOnSaveMode': {
        'type': 'string',
        'default': 'file',
        'enum': [
            'file',
            'modifications',
            'modificationsIfAvailable'
        ],
        'enumDescriptions': [
            nls_1.nls.localizeByDefault('Format the whole file.'),
            nls_1.nls.localizeByDefault('Format modifications (requires source control).'),
            nls_1.nls.localize('theia/editor/editor.formatOnSaveMode.modificationsIfAvailable', "Will attempt to format modifications only (requires source control). If source control can't be used, then the whole file will be formatted."),
        ],
        'markdownDescription': nls_1.nls.localizeByDefault('Controls if format on save formats the whole file or only modifications. Only applies when `#editor.formatOnSave#` is enabled.'),
        'scope': preferences_1.PreferenceScope.fromString('language-overridable'),
    },
    // Include this, even though it is not strictly an `editor`preference.
    'files.eol': {
        'type': 'string',
        'enum': [
            '\n',
            '\r\n',
            'auto'
        ],
        'enumDescriptions': [
            nls_1.nls.localizeByDefault('LF'),
            nls_1.nls.localizeByDefault('CRLF'),
            nls_1.nls.localizeByDefault('Uses operating system specific end of line character.')
        ],
        'default': 'auto',
        'description': nls_1.nls.localizeByDefault('The default end of line character.'),
        'scope': preferences_1.PreferenceScope.fromString('language-overridable')
    },
    // We used to call these `editor.autoSave` and `editor.autoSaveDelay`.
    'files.autoSave': {
        'type': 'string',
        'enum': ['off', 'afterDelay', 'onFocusChange', 'onWindowChange'],
        'markdownEnumDescriptions': [
            nls_1.nls.localize('theia/editor/files.autoSave.off', 'An editor with changes is never automatically saved.'),
            nls_1.nls.localize('theia/editor/files.autoSave.afterDelay', 'An editor with changes is automatically saved after the configured `#files.autoSaveDelay#`.'),
            nls_1.nls.localize('theia/editor/files.autoSave.onFocusChange', 'An editor with changes is automatically saved when the editor loses focus.'),
            nls_1.nls.localize('theia/editor/files.autoSave.onWindowChange', 'An editor with changes is automatically saved when the window loses focus.')
        ],
        'default': core_1.environment.electron.is() ? 'off' : 'afterDelay',
        'markdownDescription': nls_1.nls.localize('theia/editor/files.autoSave', 'Controls [auto save](https://code.visualstudio.com/docs/editor/codebasics#_save-auto-save) of editors that have unsaved changes.', 'off', 'afterDelay', 'onFocusChange', 'onWindowChange', 'afterDelay')
    },
    'files.autoSaveDelay': {
        'type': 'number',
        'default': 1000,
        'minimum': 0,
        'markdownDescription': nls_1.nls.localizeByDefault('Controls the delay in milliseconds after which an editor with unsaved changes is saved automatically. Only applies when `#files.autoSave#` is set to `{0}`.', 'afterDelay')
    },
    'files.refactoring.autoSave': {
        'type': 'boolean',
        'default': true,
        'description': nls_1.nls.localizeByDefault('Controls if files that were part of a refactoring are saved automatically')
    }
};
// #endregion
// #region src/vs/workbench/contrib/format/browser/formatActionsMultiple.ts
// This schema depends on a lot of private stuff in the file, so this is a stripped down version.
const formatActionsMultipleSchema = {
    'editor.defaultFormatter': {
        description: nls_1.nls.localizeByDefault('Defines a default formatter which takes precedence over all other formatter settings. Must be the identifier of an extension contributing a formatter.'),
        type: ['string', 'null'],
        default: null,
    }
};
// #endregion
// #region Custom Theia extensions to editor preferences
const theiaEditorSchema = {
    'editor.formatOnSaveTimeout': {
        'type': 'number',
        'default': 750,
        'description': nls_1.nls.localize('theia/editor/formatOnSaveTimeout', 'Timeout in milliseconds after which the formatting that is run on file save is cancelled.')
    },
    'editor.history.persistClosedEditors': {
        'type': 'boolean',
        'default': false,
        'description': nls_1.nls.localize('theia/editor/persistClosedEditors', 'Controls whether to persist closed editor history for the workspace across window reloads.')
    },
};
// #endregion
const combinedProperties = {
    ...editor_generated_preference_schema_1.editorGeneratedPreferenceProperties,
    ...codeActionsContributionSchema,
    ...fileContributionSchema,
    ...formatActionsMultipleSchema,
    ...theiaEditorSchema
};
exports.editorPreferenceSchema = {
    'type': 'object',
    'scope': 'resource',
    'overridable': true,
    'properties': combinedProperties,
};
exports.EditorPreferenceContribution = Symbol('EditorPreferenceContribution');
exports.EditorPreferences = Symbol('EditorPreferences');
/**
 * @deprecated @since 1.23.0
 *
 * By default, editor preferences now use a validated preference proxy created by the PreferenceProxyFactory binding.
 * This function will create an unvalidated preference proxy.
 * See {@link bindEditorPreferences}
 */
function createEditorPreferences(preferences, schema = exports.editorPreferenceSchema) {
    return (0, preferences_1.createPreferenceProxy)(preferences, schema);
}
exports.createEditorPreferences = createEditorPreferences;
function bindEditorPreferences(bind) {
    bind(exports.EditorPreferences).toDynamicValue(ctx => {
        const factory = ctx.container.get(injectable_preference_proxy_1.PreferenceProxyFactory);
        return factory(exports.editorPreferenceSchema);
    }).inSingletonScope();
    bind(exports.EditorPreferenceContribution).toConstantValue({ schema: exports.editorPreferenceSchema });
    bind(preferences_1.PreferenceContribution).toService(exports.EditorPreferenceContribution);
}
exports.bindEditorPreferences = bindEditorPreferences;


/***/ }),

/***/ "../node_modules/@theia/editor/lib/browser/editor-variable-contribution.js":
/*!*********************************************************************************!*\
  !*** ../node_modules/@theia/editor/lib/browser/editor-variable-contribution.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 Red Hat, Inc. and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.EditorVariableContribution = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../node_modules/@theia/editor/node_modules/@theia/core/shared/inversify/index.js");
const editor_manager_1 = __webpack_require__(/*! ./editor-manager */ "../node_modules/@theia/editor/lib/browser/editor-manager.js");
let EditorVariableContribution = class EditorVariableContribution {
    registerVariables(variables) {
        variables.registerVariable({
            name: 'lineNumber',
            description: 'The current line number in the currently opened file',
            resolve: () => {
                const editor = this.getCurrentEditor();
                return editor ? `${editor.cursor.line + 1}` : undefined;
            }
        });
        variables.registerVariable({
            name: 'selectedText',
            description: 'The current selected text in the active file',
            resolve: () => {
                const editor = this.getCurrentEditor();
                return editor ? editor.document.getText(editor.selection) : undefined;
            }
        });
    }
    getCurrentEditor() {
        const currentEditor = this.editorManager.currentEditor;
        if (!currentEditor) {
            return undefined;
        }
        return currentEditor.editor;
    }
};
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(editor_manager_1.EditorManager),
    (0, tslib_1.__metadata)("design:type", editor_manager_1.EditorManager)
], EditorVariableContribution.prototype, "editorManager", void 0);
EditorVariableContribution = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)()
], EditorVariableContribution);
exports.EditorVariableContribution = EditorVariableContribution;


/***/ }),

/***/ "../node_modules/@theia/editor/lib/browser/editor-widget-factory.js":
/*!**************************************************************************!*\
  !*** ../node_modules/@theia/editor/lib/browser/editor-widget-factory.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var EditorWidgetFactory_1;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.EditorWidgetFactory = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../node_modules/@theia/editor/node_modules/@theia/core/shared/inversify/index.js");
const uri_1 = __webpack_require__(/*! @theia/core/lib/common/uri */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/uri.js");
const common_1 = __webpack_require__(/*! @theia/core/lib/common */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/index.js");
const browser_1 = __webpack_require__(/*! @theia/core/lib/browser */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/index.js");
const editor_widget_1 = __webpack_require__(/*! ./editor-widget */ "../node_modules/@theia/editor/lib/browser/editor-widget.js");
const editor_1 = __webpack_require__(/*! ./editor */ "../node_modules/@theia/editor/lib/browser/editor.js");
let EditorWidgetFactory = EditorWidgetFactory_1 = class EditorWidgetFactory {
    constructor() {
        this.id = EditorWidgetFactory_1.ID;
    }
    static createID(uri, counter) {
        return EditorWidgetFactory_1.ID
            + `:${uri.toString()}`
            + (counter !== undefined ? `:${counter}` : '');
    }
    createWidget(options) {
        const uri = new uri_1.default(options.uri);
        return this.createEditor(uri, options);
    }
    async createEditor(uri, options) {
        const newEditor = await this.constructEditor(uri);
        this.setLabels(newEditor, uri);
        const labelListener = this.labelProvider.onDidChange(event => {
            if (event.affects(uri)) {
                this.setLabels(newEditor, uri);
            }
        });
        newEditor.onDispose(() => labelListener.dispose());
        newEditor.id = EditorWidgetFactory_1.createID(uri, options === null || options === void 0 ? void 0 : options.counter);
        newEditor.title.closable = true;
        return newEditor;
    }
    async constructEditor(uri) {
        const textEditor = await this.editorProvider(uri);
        return new editor_widget_1.EditorWidget(textEditor, this.selectionService);
    }
    setLabels(editor, uri) {
        editor.title.caption = uri.path.fsPath();
        if (editor.editor.isReadonly) {
            editor.title.caption += ` • ${common_1.nls.localizeByDefault('Read-only')}`;
        }
        const icon = this.labelProvider.getIcon(uri);
        editor.title.label = this.labelProvider.getName(uri);
        editor.title.iconClass = icon + ' file-icon';
    }
};
EditorWidgetFactory.ID = 'code-editor-opener';
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(browser_1.LabelProvider),
    (0, tslib_1.__metadata)("design:type", browser_1.LabelProvider)
], EditorWidgetFactory.prototype, "labelProvider", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(editor_1.TextEditorProvider),
    (0, tslib_1.__metadata)("design:type", Function)
], EditorWidgetFactory.prototype, "editorProvider", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(common_1.SelectionService),
    (0, tslib_1.__metadata)("design:type", common_1.SelectionService)
], EditorWidgetFactory.prototype, "selectionService", void 0);
EditorWidgetFactory = EditorWidgetFactory_1 = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)()
], EditorWidgetFactory);
exports.EditorWidgetFactory = EditorWidgetFactory;


/***/ }),

/***/ "../node_modules/@theia/editor/lib/browser/editor-widget.js":
/*!******************************************************************!*\
  !*** ../node_modules/@theia/editor/lib/browser/editor-widget.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2017 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.EditorWidget = void 0;
const common_1 = __webpack_require__(/*! @theia/core/lib/common */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/index.js");
const browser_1 = __webpack_require__(/*! @theia/core/lib/browser */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/index.js");
const algorithm_1 = __webpack_require__(/*! @theia/core/shared/@phosphor/algorithm */ "../node_modules/@theia/editor/node_modules/@theia/core/shared/@phosphor/algorithm/index.js");
class EditorWidget extends browser_1.BaseWidget {
    constructor(editor, selectionService) {
        super(editor);
        this.editor = editor;
        this.selectionService = selectionService;
        this.toDisposeOnTabbarChange = new common_1.DisposableCollection();
        this.isExtractable = true;
        this.addClass('theia-editor');
        if (editor.isReadonly) {
            (0, browser_1.lock)(this.title);
        }
        this.toDispose.push(this.editor);
        this.toDispose.push(this.toDisposeOnTabbarChange);
        this.toDispose.push(this.editor.onSelectionChanged(() => this.setSelection()));
        this.toDispose.push(this.editor.onFocusChanged(() => this.setSelection()));
        this.toDispose.push(this.editor.onDidChangeReadOnly(isReadonly => {
            if (isReadonly) {
                (0, browser_1.lock)(this.title);
            }
            else {
                (0, browser_1.unlock)(this.title);
            }
        }));
        this.toDispose.push(common_1.Disposable.create(() => {
            if (this.selectionService.selection === this.editor) {
                this.selectionService.selection = undefined;
            }
        }));
    }
    setSelection() {
        if (this.editor.isFocused() && this.selectionService.selection !== this.editor) {
            this.selectionService.selection = this.editor;
        }
    }
    get saveable() {
        return this.editor.document;
    }
    getResourceUri() {
        return this.editor.getResourceUri();
    }
    createMoveToUri(resourceUri) {
        return this.editor.createMoveToUri(resourceUri);
    }
    onActivateRequest(msg) {
        super.onActivateRequest(msg);
        this.editor.focus();
        this.selectionService.selection = this.editor;
    }
    onAfterAttach(msg) {
        super.onAfterAttach(msg);
        if (this.isVisible) {
            this.editor.refresh();
        }
        this.checkForTabbarChange();
    }
    checkForTabbarChange() {
        const { parent } = this;
        if (parent instanceof browser_1.DockPanel) {
            const newTabbar = (0, algorithm_1.find)(parent.tabBars(), tabbar => !!tabbar.titles.find(title => title === this.title));
            if (this.currentTabbar !== newTabbar) {
                this.toDisposeOnTabbarChange.dispose();
                const listener = () => this.checkForTabbarChange();
                parent.layoutModified.connect(listener);
                this.toDisposeOnTabbarChange.push(common_1.Disposable.create(() => parent.layoutModified.disconnect(listener)));
                const last = this.currentTabbar;
                this.currentTabbar = newTabbar;
                this.handleTabBarChange(last, newTabbar);
            }
        }
    }
    handleTabBarChange(oldTabBar, newTabBar) {
        const ownSaveable = browser_1.Saveable.get(this);
        const competingEditors = ownSaveable && (newTabBar === null || newTabBar === void 0 ? void 0 : newTabBar.titles.filter(title => title !== this.title
            && (title.owner instanceof EditorWidget)
            && title.owner.editor.uri.isEqual(this.editor.uri)
            && browser_1.Saveable.get(title.owner) === ownSaveable));
        competingEditors === null || competingEditors === void 0 ? void 0 : competingEditors.forEach(title => title.owner.close());
    }
    onAfterShow(msg) {
        super.onAfterShow(msg);
        this.editor.refresh();
    }
    onResize(msg) {
        if (msg.width < 0 || msg.height < 0) {
            this.editor.resizeToFit();
        }
        else {
            this.editor.setSize(msg);
        }
    }
    storeState() {
        var _a;
        return ((_a = this.getResourceUri()) === null || _a === void 0 ? void 0 : _a.scheme) === common_1.UNTITLED_SCHEME ? undefined : this.editor.storeViewState();
    }
    restoreState(oldState) {
        this.editor.restoreViewState(oldState);
    }
    get onDispose() {
        return this.toDispose.onDispose;
    }
}
exports.EditorWidget = EditorWidget;


/***/ }),

/***/ "../node_modules/@theia/editor/lib/browser/editor.js":
/*!***********************************************************!*\
  !*** ../node_modules/@theia/editor/lib/browser/editor.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CustomEditorWidget = exports.TextEditorSelection = exports.MouseTargetType = exports.TextDocumentContentChangeDelta = exports.TextEditorProvider = exports.Location = exports.Range = exports.Position = void 0;
const vscode_languageserver_protocol_1 = __webpack_require__(/*! @theia/core/shared/vscode-languageserver-protocol */ "../node_modules/@theia/editor/node_modules/@theia/core/shared/vscode-languageserver-protocol/index.js");
Object.defineProperty(exports, "Position", ({ enumerable: true, get: function () { return vscode_languageserver_protocol_1.Position; } }));
Object.defineProperty(exports, "Range", ({ enumerable: true, get: function () { return vscode_languageserver_protocol_1.Range; } }));
Object.defineProperty(exports, "Location", ({ enumerable: true, get: function () { return vscode_languageserver_protocol_1.Location; } }));
const uri_1 = __webpack_require__(/*! @theia/core/lib/common/uri */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/uri.js");
const common_1 = __webpack_require__(/*! @theia/core/lib/common */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/index.js");
Object.defineProperty(exports, "TextDocumentContentChangeDelta", ({ enumerable: true, get: function () { return common_1.TextDocumentContentChangeDelta; } }));
exports.TextEditorProvider = Symbol('TextEditorProvider');
/**
 * Type of hit element with the mouse in the editor.
 * Copied from monaco editor.
 */
var MouseTargetType;
(function (MouseTargetType) {
    /**
     * Mouse is on top of an unknown element.
     */
    MouseTargetType[MouseTargetType["UNKNOWN"] = 0] = "UNKNOWN";
    /**
     * Mouse is on top of the textarea used for input.
     */
    MouseTargetType[MouseTargetType["TEXTAREA"] = 1] = "TEXTAREA";
    /**
     * Mouse is on top of the glyph margin
     */
    MouseTargetType[MouseTargetType["GUTTER_GLYPH_MARGIN"] = 2] = "GUTTER_GLYPH_MARGIN";
    /**
     * Mouse is on top of the line numbers
     */
    MouseTargetType[MouseTargetType["GUTTER_LINE_NUMBERS"] = 3] = "GUTTER_LINE_NUMBERS";
    /**
     * Mouse is on top of the line decorations
     */
    MouseTargetType[MouseTargetType["GUTTER_LINE_DECORATIONS"] = 4] = "GUTTER_LINE_DECORATIONS";
    /**
     * Mouse is on top of the whitespace left in the gutter by a view zone.
     */
    MouseTargetType[MouseTargetType["GUTTER_VIEW_ZONE"] = 5] = "GUTTER_VIEW_ZONE";
    /**
     * Mouse is on top of text in the content.
     */
    MouseTargetType[MouseTargetType["CONTENT_TEXT"] = 6] = "CONTENT_TEXT";
    /**
     * Mouse is on top of empty space in the content (e.g. after line text or below last line)
     */
    MouseTargetType[MouseTargetType["CONTENT_EMPTY"] = 7] = "CONTENT_EMPTY";
    /**
     * Mouse is on top of a view zone in the content.
     */
    MouseTargetType[MouseTargetType["CONTENT_VIEW_ZONE"] = 8] = "CONTENT_VIEW_ZONE";
    /**
     * Mouse is on top of a content widget.
     */
    MouseTargetType[MouseTargetType["CONTENT_WIDGET"] = 9] = "CONTENT_WIDGET";
    /**
     * Mouse is on top of the decorations overview ruler.
     */
    MouseTargetType[MouseTargetType["OVERVIEW_RULER"] = 10] = "OVERVIEW_RULER";
    /**
     * Mouse is on top of a scrollbar.
     */
    MouseTargetType[MouseTargetType["SCROLLBAR"] = 11] = "SCROLLBAR";
    /**
     * Mouse is on top of an overlay widget.
     */
    MouseTargetType[MouseTargetType["OVERLAY_WIDGET"] = 12] = "OVERLAY_WIDGET";
    /**
     * Mouse is outside of the editor.
     */
    MouseTargetType[MouseTargetType["OUTSIDE_EDITOR"] = 13] = "OUTSIDE_EDITOR";
})(MouseTargetType = exports.MouseTargetType || (exports.MouseTargetType = {}));
var TextEditorSelection;
(function (TextEditorSelection) {
    function is(arg) {
        return (0, common_1.isObject)(arg) && arg.uri instanceof uri_1.default;
    }
    TextEditorSelection.is = is;
})(TextEditorSelection = exports.TextEditorSelection || (exports.TextEditorSelection = {}));
var CustomEditorWidget;
(function (CustomEditorWidget) {
    function is(arg) {
        return !!arg && 'modelRef' in arg;
    }
    CustomEditorWidget.is = is;
})(CustomEditorWidget = exports.CustomEditorWidget || (exports.CustomEditorWidget = {}));


/***/ }),

/***/ "../node_modules/@theia/editor/lib/browser/language-status/editor-language-status-service.js":
/*!***************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/lib/browser/language-status/editor-language-status-service.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2022 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var EditorLanguageStatusService_1;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.EditorLanguageStatusService = exports.LanguageStatusSeverity = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../node_modules/@theia/editor/node_modules/@theia/core/shared/inversify/index.js");
const browser_1 = __webpack_require__(/*! @theia/core/lib/browser */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/index.js");
const language_service_1 = __webpack_require__(/*! @theia/core/lib/browser/language-service */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/language-service.js");
const core_1 = __webpack_require__(/*! @theia/core */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/index.js");
const editor_command_1 = __webpack_require__(/*! ../editor-command */ "../node_modules/@theia/editor/lib/browser/editor-command.js");
const language_selector_1 = __webpack_require__(/*! ../../common/language-selector */ "../node_modules/@theia/editor/lib/common/language-selector.js");
const uri_1 = __webpack_require__(/*! @theia/core/lib/common/uri */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/uri.js");
const editor_manager_1 = __webpack_require__(/*! ../editor-manager */ "../node_modules/@theia/editor/lib/browser/editor-manager.js");
const severity_1 = __webpack_require__(/*! @theia/core/lib/common/severity */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/severity.js");
const label_parser_1 = __webpack_require__(/*! @theia/core/lib/browser/label-parser */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/label-parser.js");
/**
 * Represents the severity of a language status item.
 */
var LanguageStatusSeverity;
(function (LanguageStatusSeverity) {
    LanguageStatusSeverity[LanguageStatusSeverity["Information"] = 0] = "Information";
    LanguageStatusSeverity[LanguageStatusSeverity["Warning"] = 1] = "Warning";
    LanguageStatusSeverity[LanguageStatusSeverity["Error"] = 2] = "Error";
})(LanguageStatusSeverity = exports.LanguageStatusSeverity || (exports.LanguageStatusSeverity = {}));
let EditorLanguageStatusService = EditorLanguageStatusService_1 = class EditorLanguageStatusService {
    constructor() {
        this.status = new Map();
        this.pinnedCommands = new Set();
    }
    setLanguageStatusItem(handle, item) {
        this.status.set(handle, item);
        this.updateLanguageStatusItems();
    }
    removeLanguageStatusItem(handle) {
        this.status.delete(handle);
        this.updateLanguageStatusItems();
    }
    updateLanguageStatus(editor) {
        if (!editor) {
            this.statusBar.removeElement(EditorLanguageStatusService_1.LANGUAGE_MODE_ID);
            return;
        }
        const language = this.languages.getLanguage(editor.document.languageId);
        const languageName = language ? language.name : '';
        this.statusBar.setElement(EditorLanguageStatusService_1.LANGUAGE_MODE_ID, {
            text: languageName,
            alignment: browser_1.StatusBarAlignment.RIGHT,
            priority: 1,
            command: editor_command_1.EditorCommands.CHANGE_LANGUAGE.id,
            tooltip: core_1.nls.localizeByDefault('Select Language Mode')
        });
        this.updateLanguageStatusItems(editor);
    }
    updateLanguageStatusItems(editor = this.editorAccess.editor) {
        if (!editor) {
            this.statusBar.removeElement(EditorLanguageStatusService_1.LANGUAGE_STATUS_ID);
            this.updatePinnedItems();
            return;
        }
        const uri = new uri_1.default(editor.document.uri);
        const items = Array.from(this.status.values())
            .filter(item => (0, language_selector_1.score)(item.selector, uri.scheme, uri.path.toString(), editor.document.languageId, true))
            .sort((left, right) => right.severity - left.severity);
        if (!items.length) {
            this.statusBar.removeElement(EditorLanguageStatusService_1.LANGUAGE_STATUS_ID);
            return;
        }
        const severityText = items[0].severity === severity_1.Severity.Info
            ? '$(bracket)'
            : items[0].severity === severity_1.Severity.Warning
                ? '$(bracket-dot)'
                : '$(bracket-error)';
        this.statusBar.setElement(EditorLanguageStatusService_1.LANGUAGE_STATUS_ID, {
            text: severityText,
            alignment: browser_1.StatusBarAlignment.RIGHT,
            priority: 2,
            tooltip: this.createTooltip(items),
            affinity: { id: EditorLanguageStatusService_1.LANGUAGE_MODE_ID, alignment: browser_1.StatusBarAlignment.LEFT, compact: true },
        });
        this.updatePinnedItems(items);
    }
    updatePinnedItems(items) {
        const toRemoveFromStatusBar = new Set(this.pinnedCommands);
        items === null || items === void 0 ? void 0 : items.forEach(item => {
            if (toRemoveFromStatusBar.has(item.id)) {
                toRemoveFromStatusBar.delete(item.id);
                this.statusBar.setElement(item.id, this.toPinnedItem(item));
            }
        });
        toRemoveFromStatusBar.forEach(id => this.statusBar.removeElement(id));
    }
    toPinnedItem(item) {
        return {
            text: item.label,
            affinity: { id: EditorLanguageStatusService_1.LANGUAGE_MODE_ID, alignment: browser_1.StatusBarAlignment.RIGHT, compact: false },
            alignment: browser_1.StatusBarAlignment.RIGHT,
            onclick: item.command && (e => { var _a, _b; e.preventDefault(); this.commandRegistry.executeCommand(item.command.id, ...((_b = (_a = item.command) === null || _a === void 0 ? void 0 : _a.arguments) !== null && _b !== void 0 ? _b : [])); }),
        };
    }
    createTooltip(items) {
        var _a, _b;
        const hoverContainer = document.createElement('div');
        hoverContainer.classList.add('hover-row');
        for (const item of items) {
            const itemContainer = document.createElement('div');
            itemContainer.classList.add('hover-language-status');
            {
                const severityContainer = document.createElement('div');
                severityContainer.classList.add('severity', `sev${item.severity}`);
                severityContainer.classList.toggle('show', item.severity === severity_1.Severity.Error || item.severity === severity_1.Severity.Warning);
                {
                    const severityIcon = document.createElement('span');
                    severityIcon.className = this.getSeverityIconClasses(item.severity);
                    severityContainer.appendChild(severityIcon);
                }
                itemContainer.appendChild(severityContainer);
            }
            const textContainer = document.createElement('div');
            textContainer.className = 'element';
            const labelContainer = document.createElement('div');
            labelContainer.className = 'left';
            const label = document.createElement('span');
            label.classList.add('label');
            this.renderWithIcons(label, item.busy ? `$(sync~spin)\u00A0\u00A0${item.label}` : item.label);
            labelContainer.appendChild(label);
            const detail = document.createElement('span');
            detail.classList.add('detail');
            this.renderWithIcons(detail, item.detail);
            labelContainer.appendChild(detail);
            textContainer.appendChild(labelContainer);
            const commandContainer = document.createElement('div');
            commandContainer.classList.add('right');
            if (item.command) {
                const link = document.createElement('a');
                link.classList.add('language-status-link');
                link.href = new uri_1.default()
                    .withScheme('command')
                    .withPath(item.command.id)
                    .withQuery(item.command.arguments ? encodeURIComponent(JSON.stringify(item.command.arguments)) : '')
                    .toString(false);
                link.onclick = e => { var _a, _b; e.preventDefault(); this.commandRegistry.executeCommand(item.command.id, ...((_b = (_a = item.command) === null || _a === void 0 ? void 0 : _a.arguments) !== null && _b !== void 0 ? _b : [])); };
                link.textContent = (_a = item.command.title) !== null && _a !== void 0 ? _a : item.command.id;
                link.title = (_b = item.command.tooltip) !== null && _b !== void 0 ? _b : '';
                link.ariaRoleDescription = 'button';
                link.ariaDisabled = 'false';
                commandContainer.appendChild(link);
                const pinContainer = document.createElement('div');
                pinContainer.classList.add('language-status-action-bar');
                const pin = document.createElement('a');
                this.setPinProperties(pin, item.id);
                pin.onclick = e => { e.preventDefault(); this.togglePinned(item); this.setPinProperties(pin, item.id); };
                pinContainer.appendChild(pin);
                commandContainer.appendChild(pinContainer);
            }
            textContainer.appendChild(commandContainer);
            itemContainer.append(textContainer);
            hoverContainer.appendChild(itemContainer);
        }
        return hoverContainer;
    }
    setPinProperties(pin, id) {
        pin.className = this.pinnedCommands.has(id) ? (0, browser_1.codicon)('pinned', true) : (0, browser_1.codicon)('pin', true);
        pin.ariaRoleDescription = 'button';
        const pinText = this.pinnedCommands.has(id)
            ? core_1.nls.localizeByDefault('Remove from Status Bar')
            : core_1.nls.localizeByDefault('Add to Status Bar');
        pin.ariaLabel = pinText;
        pin.title = pinText;
    }
    togglePinned(item) {
        if (this.pinnedCommands.has(item.id)) {
            this.pinnedCommands.delete(item.id);
            this.statusBar.removeElement(item.id);
        }
        else {
            this.pinnedCommands.add(item.id);
            this.statusBar.setElement(item.id, this.toPinnedItem(item));
        }
    }
    getSeverityIconClasses(severity) {
        switch (severity) {
            case severity_1.Severity.Error: return (0, browser_1.codicon)('error');
            case severity_1.Severity.Warning: return (0, browser_1.codicon)('info');
            default: return (0, browser_1.codicon)('check');
        }
    }
    renderWithIcons(host, text) {
        if (text) {
            for (const chunk of this.labelParser.parse(text)) {
                if (typeof chunk === 'string') {
                    host.append(chunk);
                }
                else {
                    const iconSpan = document.createElement('span');
                    const className = (0, browser_1.codicon)(chunk.name) + (chunk.animation ? ` fa-${chunk.animation}` : '');
                    iconSpan.className = className;
                    host.append(iconSpan);
                }
            }
        }
    }
};
EditorLanguageStatusService.LANGUAGE_MODE_ID = 'editor-status-language';
EditorLanguageStatusService.LANGUAGE_STATUS_ID = 'editor-language-status-items';
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(browser_1.StatusBar),
    (0, tslib_1.__metadata)("design:type", Object)
], EditorLanguageStatusService.prototype, "statusBar", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(language_service_1.LanguageService),
    (0, tslib_1.__metadata)("design:type", language_service_1.LanguageService)
], EditorLanguageStatusService.prototype, "languages", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(editor_manager_1.CurrentEditorAccess),
    (0, tslib_1.__metadata)("design:type", editor_manager_1.CurrentEditorAccess)
], EditorLanguageStatusService.prototype, "editorAccess", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(core_1.CommandRegistry),
    (0, tslib_1.__metadata)("design:type", core_1.CommandRegistry)
], EditorLanguageStatusService.prototype, "commandRegistry", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(label_parser_1.LabelParser),
    (0, tslib_1.__metadata)("design:type", label_parser_1.LabelParser)
], EditorLanguageStatusService.prototype, "labelParser", void 0);
EditorLanguageStatusService = EditorLanguageStatusService_1 = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)()
], EditorLanguageStatusService);
exports.EditorLanguageStatusService = EditorLanguageStatusService;


/***/ }),

/***/ "../node_modules/@theia/editor/lib/browser/navigation/navigation-location-service.js":
/*!*******************************************************************************************!*\
  !*** ../node_modules/@theia/editor/lib/browser/navigation/navigation-location-service.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var NavigationLocationService_1;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.NavigationLocationService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../node_modules/@theia/editor/node_modules/@theia/core/shared/inversify/index.js");
const logger_1 = __webpack_require__(/*! @theia/core/lib/common/logger */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/logger.js");
const opener_service_1 = __webpack_require__(/*! @theia/core/lib/browser/opener-service */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/opener-service.js");
const navigation_location_updater_1 = __webpack_require__(/*! ./navigation-location-updater */ "../node_modules/@theia/editor/lib/browser/navigation/navigation-location-updater.js");
const navigation_location_similarity_1 = __webpack_require__(/*! ./navigation-location-similarity */ "../node_modules/@theia/editor/lib/browser/navigation/navigation-location-similarity.js");
const navigation_location_1 = __webpack_require__(/*! ./navigation-location */ "../node_modules/@theia/editor/lib/browser/navigation/navigation-location.js");
/**
 * The navigation location service.
 * It also stores and manages navigation locations and recently closed editors.
 */
let NavigationLocationService = NavigationLocationService_1 = class NavigationLocationService {
    constructor() {
        this.pointer = -1;
        this.stack = [];
        this.canRegister = true;
        this.recentlyClosedEditors = [];
    }
    /**
     * Registers the give locations into the service.
     */
    register(...locations) {
        if (this.canRegister) {
            const max = this.maxStackItems();
            [...locations].forEach(location => {
                if (navigation_location_1.ContentChangeLocation.is(location)) {
                    this._lastEditLocation = location;
                }
                const current = this.currentLocation();
                this.debug(`Registering new location: ${navigation_location_1.NavigationLocation.toString(location)}.`);
                if (!this.isSimilar(current, location)) {
                    this.debug('Before location registration.');
                    this.debug(this.stackDump);
                    // Just like in VSCode; if we are not at the end of stack, we remove anything after.
                    if (this.stack.length > this.pointer + 1) {
                        this.debug(`Discarding all locations after ${this.pointer}.`);
                        this.stack = this.stack.slice(0, this.pointer + 1);
                    }
                    this.stack.push(location);
                    this.pointer = this.stack.length - 1;
                    if (this.stack.length > max) {
                        this.debug('Trimming exceeding locations.');
                        this.stack.shift();
                        this.pointer--;
                    }
                    this.debug('Updating preceding navigation locations.');
                    for (let i = this.stack.length - 1; i >= 0; i--) {
                        const candidate = this.stack[i];
                        const update = this.updater.affects(candidate, location);
                        if (update === undefined) {
                            this.debug(`Erasing obsolete location: ${navigation_location_1.NavigationLocation.toString(candidate)}.`);
                            this.stack.splice(i, 1);
                            this.pointer--;
                        }
                        else if (typeof update !== 'boolean') {
                            this.debug(`Updating location at index: ${i} => ${navigation_location_1.NavigationLocation.toString(candidate)}.`);
                            this.stack[i] = update;
                        }
                    }
                    this.debug('After location registration.');
                    this.debug(this.stackDump);
                }
                else {
                    if (current) {
                        this.debug(`The new location ${navigation_location_1.NavigationLocation.toString(location)} is similar to the current one: ${navigation_location_1.NavigationLocation.toString(current)}. Aborting.`);
                    }
                }
            });
        }
    }
    /**
     * Navigates one back. Returns with the previous location, or `undefined` if it could not navigate back.
     */
    async back() {
        this.debug('Navigating back.');
        if (this.canGoBack()) {
            this.pointer--;
            await this.reveal();
            this.debug(this.stackDump);
            return this.currentLocation();
        }
        this.debug('Cannot navigate back.');
        return undefined;
    }
    /**
     * Navigates one forward. Returns with the next location, or `undefined` if it could not go forward.
     */
    async forward() {
        this.debug('Navigating forward.');
        if (this.canGoForward()) {
            this.pointer++;
            await this.reveal();
            this.debug(this.stackDump);
            return this.currentLocation();
        }
        this.debug('Cannot navigate forward.');
        return undefined;
    }
    /**
     * Checks whether the service can go [`back`](#back).
     */
    canGoBack() {
        return this.pointer >= 1;
    }
    /**
     * Checks whether the service can go [`forward`](#forward).
     */
    canGoForward() {
        return this.pointer >= 0 && this.pointer !== this.stack.length - 1;
    }
    /**
     * Returns with all known navigation locations in chronological order.
     */
    locations() {
        return this.stack;
    }
    /**
     * Returns with the current location.
     */
    currentLocation() {
        return this.stack[this.pointer];
    }
    /**
     * Returns with the location of the most recent edition if any. If there were no modifications,
     * returns `undefined`.
     */
    lastEditLocation() {
        return this._lastEditLocation;
    }
    /**
     * Clears the total history.
     */
    clearHistory() {
        this.stack = [];
        this.pointer = -1;
        this._lastEditLocation = undefined;
        this.recentlyClosedEditors = [];
    }
    /**
     * Reveals the location argument. If not given, reveals the `current location`. Does nothing, if the argument is `undefined`.
     */
    async reveal(location = this.currentLocation()) {
        if (location === undefined) {
            return;
        }
        try {
            this.canRegister = false;
            const { uri } = location;
            const options = this.toOpenerOptions(location);
            await (0, opener_service_1.open)(this.openerService, uri, options);
        }
        catch (e) {
            this.logger.error(`Error occurred while revealing location: ${navigation_location_1.NavigationLocation.toString(location)}.`, e);
        }
        finally {
            this.canRegister = true;
        }
    }
    /**
     * `true` if the two locations are similar.
     */
    isSimilar(left, right) {
        return this.similarity.similar(left, right);
    }
    /**
     * Returns with the number of navigation locations that the application can handle and manage.
     * When the number of locations exceeds this number, old locations will be erased.
     */
    maxStackItems() {
        return NavigationLocationService_1.MAX_STACK_ITEMS;
    }
    /**
     * Returns with the opener option for the location argument.
     */
    toOpenerOptions(location) {
        let { start } = navigation_location_1.NavigationLocation.range(location);
        // Here, the `start` and represents the previous state that has been updated with the `text`.
        // So we calculate the range by appending the `text` length to the `start`.
        if (navigation_location_1.ContentChangeLocation.is(location)) {
            start = { ...start, character: start.character + location.context.text.length };
        }
        return {
            selection: navigation_location_1.Range.create(start, start)
        };
    }
    async debug(message) {
        this.logger.trace(typeof message === 'string' ? message : message());
    }
    get stackDump() {
        return `----- Navigation location stack [${new Date()}] -----
Pointer: ${this.pointer}
${this.stack.map((location, i) => `${i}: ${JSON.stringify(navigation_location_1.NavigationLocation.toObject(location))}`).join('\n')}
----- o -----`;
    }
    /**
     * Get the recently closed editors stack in chronological order.
     *
     * @returns readonly closed editors stack.
     */
    get closedEditorsStack() {
        return this.recentlyClosedEditors;
    }
    /**
     * Get the last recently closed editor.
     *
     * @returns the recently closed editor if it exists.
     */
    getLastClosedEditor() {
        return this.recentlyClosedEditors[this.recentlyClosedEditors.length - 1];
    }
    /**
     * Add the recently closed editor to the history.
     *
     * @param editor the recently closed editor.
     */
    addClosedEditor(editor) {
        this.removeClosedEditor(editor.uri);
        this.recentlyClosedEditors.push(editor);
        // Removes the oldest entry from the history if the maximum size is reached.
        if (this.recentlyClosedEditors.length > NavigationLocationService_1.MAX_RECENTLY_CLOSED_EDITORS) {
            this.recentlyClosedEditors.shift();
        }
    }
    /**
     * Remove all occurrences of the given editor in the history if they exist.
     *
     * @param uri the uri of the editor that should be removed from the history.
     */
    removeClosedEditor(uri) {
        this.recentlyClosedEditors = this.recentlyClosedEditors.filter(e => !uri.isEqual(e.uri));
    }
};
NavigationLocationService.MAX_STACK_ITEMS = 30;
NavigationLocationService.MAX_RECENTLY_CLOSED_EDITORS = 20;
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(logger_1.ILogger),
    (0, tslib_1.__metadata)("design:type", Object)
], NavigationLocationService.prototype, "logger", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(opener_service_1.OpenerService),
    (0, tslib_1.__metadata)("design:type", Object)
], NavigationLocationService.prototype, "openerService", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(navigation_location_updater_1.NavigationLocationUpdater),
    (0, tslib_1.__metadata)("design:type", navigation_location_updater_1.NavigationLocationUpdater)
], NavigationLocationService.prototype, "updater", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(navigation_location_similarity_1.NavigationLocationSimilarity),
    (0, tslib_1.__metadata)("design:type", navigation_location_similarity_1.NavigationLocationSimilarity)
], NavigationLocationService.prototype, "similarity", void 0);
NavigationLocationService = NavigationLocationService_1 = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)()
], NavigationLocationService);
exports.NavigationLocationService = NavigationLocationService;


/***/ }),

/***/ "../node_modules/@theia/editor/lib/browser/navigation/navigation-location-similarity.js":
/*!**********************************************************************************************!*\
  !*** ../node_modules/@theia/editor/lib/browser/navigation/navigation-location-similarity.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var NavigationLocationSimilarity_1;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.NavigationLocationSimilarity = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../node_modules/@theia/editor/node_modules/@theia/core/shared/inversify/index.js");
const navigation_location_1 = __webpack_require__(/*! ./navigation-location */ "../node_modules/@theia/editor/lib/browser/navigation/navigation-location.js");
/**
 * Service for checking whether two navigation locations are similar or not.
 */
let NavigationLocationSimilarity = NavigationLocationSimilarity_1 = class NavigationLocationSimilarity {
    /**
     * `true` if the `left` and `right` locations are withing +- 10 lines in the same editor. Otherwise, `false`.
     */
    similar(left, right) {
        if (left === undefined || right === undefined) {
            return left === right;
        }
        if (left.uri.toString() !== right.uri.toString()) {
            return false;
        }
        const leftRange = navigation_location_1.NavigationLocation.range(left);
        const rightRange = navigation_location_1.NavigationLocation.range(right);
        if (leftRange === undefined || rightRange === undefined) {
            return leftRange === rightRange;
        }
        const leftLineNumber = Math.min(leftRange.start.line, leftRange.end.line);
        const rightLineNumber = Math.min(rightRange.start.line, rightRange.end.line);
        return Math.abs(leftLineNumber - rightLineNumber) < this.getThreshold();
    }
    getThreshold() {
        return NavigationLocationSimilarity_1.EDITOR_SELECTION_THRESHOLD;
    }
};
/**
 * The number of lines to move in the editor to justify for new state.
 */
NavigationLocationSimilarity.EDITOR_SELECTION_THRESHOLD = 10;
NavigationLocationSimilarity = NavigationLocationSimilarity_1 = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)()
], NavigationLocationSimilarity);
exports.NavigationLocationSimilarity = NavigationLocationSimilarity;


/***/ }),

/***/ "../node_modules/@theia/editor/lib/browser/navigation/navigation-location-updater.js":
/*!*******************************************************************************************!*\
  !*** ../node_modules/@theia/editor/lib/browser/navigation/navigation-location-updater.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.NavigationLocationUpdater = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../node_modules/@theia/editor/node_modules/@theia/core/shared/inversify/index.js");
const navigation_location_1 = __webpack_require__(/*! ./navigation-location */ "../node_modules/@theia/editor/lib/browser/navigation/navigation-location.js");
/**
 * A navigation location updater that is responsible for adapting editor navigation locations.
 *
 * 1. Inserting or deleting text before the position shifts the position accordingly.
 * 2. Inserting text at the position offset shifts the position accordingly.
 * 3. Inserting or deleting text strictly contained by the position shrinks or stretches the position.
 * 4. Inserting or deleting text after a position does not affect the position.
 * 5. Deleting text which strictly contains the position deletes the position.
 * Note that the position is not deleted if its only shrunken to length zero. To delete a position, the modification must delete from
 * strictly before to strictly after the position.
 * 6. Replacing text contained by the position shrinks or expands the position (but does not shift it), such that the final position
 * contains the original position and the replacing text.
 * 7. Replacing text overlapping the position in other ways is considered as a sequence of first deleting the replaced text and
 * afterwards inserting the new text. Thus, a position is shrunken and can then be shifted (if the replaced text overlaps the offset of the position).
 */
let NavigationLocationUpdater = class NavigationLocationUpdater {
    /**
     * Checks whether `candidateLocation` has to be updated when applying `other`.
     *  - `false` if the `other` does not affect the `candidateLocation`.
     *  - A `NavigationLocation` object if the `candidateLocation` has to be replaced with the return value.
     *  - `undefined` if the candidate has to be deleted.
     *
     * If the `otherLocation` is not a `ContentChangeLocation` or it does not contain any actual content changes, this method returns with `false`
     */
    affects(candidateLocation, otherLocation) {
        if (!navigation_location_1.ContentChangeLocation.is(otherLocation)) {
            return false;
        }
        if (candidateLocation.uri.toString() !== otherLocation.uri.toString()) {
            return false;
        }
        const candidate = navigation_location_1.NavigationLocation.range(candidateLocation);
        const other = navigation_location_1.NavigationLocation.range(otherLocation);
        if (candidate === undefined || other === undefined) {
            return false;
        }
        const { uri, type } = candidateLocation;
        const modification = otherLocation.context.text;
        const newLineCount = modification.split(/[\n\r]/g).length - 1;
        // Spec (1. and 2.)
        if (other.end.line < candidate.start.line
            || (other.end.line === candidate.start.line && other.end.character <= candidate.start.character)) {
            // Shortcut for the general case. The user is typing above the candidate range. Nothing to do.
            if (other.start.line === other.end.line && newLineCount === 0) {
                return false;
            }
            const lineDiff = other.start.line - other.end.line + newLineCount;
            let startCharacter = candidate.start.character;
            let endCharacter = candidate.end.character;
            if (other.start.line !== other.end.line) {
                startCharacter = other.start.character + (candidate.start.character - other.end.character) + (modification.length - (modification.lastIndexOf('\n') + 1));
                endCharacter = candidate.start.line === candidate.end.line
                    ? candidate.end.character + startCharacter - candidate.start.character
                    : candidate.end.character;
            }
            const context = this.handleBefore(candidateLocation, other, lineDiff, startCharacter, endCharacter);
            return {
                uri,
                type,
                context
            };
        }
        // Spec (3.,  5., and 6.)
        if (this.contained(other, candidate)) {
            const endLine = candidate.end.line - other.end.line + candidate.start.line + newLineCount;
            let endCharacter = candidate.end.character - (other.end.character - other.start.character) + modification.length;
            if (newLineCount > 0) {
                if (candidate.end.line === other.end.line) {
                    endCharacter = modification.length - (modification.lastIndexOf('\n') + 1) + (candidate.end.character - other.end.character);
                }
                else {
                    endCharacter = endCharacter - 1;
                }
            }
            const context = this.handleInside(candidateLocation, endLine, endCharacter);
            return {
                uri,
                type,
                context
            };
        }
        // Spec (5.)
        if (other.start.line === candidate.start.line && other.start.character === candidate.start.character
            && (other.end.line > candidate.end.line || (other.end.line === candidate.end.line && other.end.character > candidate.end.character))) {
            return undefined;
        }
        // Spec (4.)
        if (candidate.end.line < other.start.line
            || (candidate.end.line === other.start.line && candidate.end.character < other.end.character)) {
            return false;
        }
        return false;
    }
    handleInside(candidate, endLine, endCharacter) {
        if (navigation_location_1.CursorLocation.is(candidate)) {
            throw new Error('Modifications are not allowed inside a cursor location.');
        }
        const { start } = navigation_location_1.NavigationLocation.range(candidate);
        const range = {
            start,
            end: {
                line: endLine,
                character: endCharacter
            }
        };
        if (navigation_location_1.SelectionLocation.is(candidate)) {
            return range;
        }
        if (navigation_location_1.ContentChangeLocation.is(candidate)) {
            const { rangeLength, text } = candidate.context;
            return {
                range,
                rangeLength,
                text
            };
        }
        throw new Error(`Unexpected navigation location: ${navigation_location_1.NavigationLocation.toString(candidate)}.`);
    }
    handleBefore(candidate, modification, lineDiff, startCharacter, endCharacter) {
        let range = navigation_location_1.NavigationLocation.range(candidate);
        range = this.shiftLine(range, lineDiff);
        range = {
            start: {
                line: range.start.line,
                character: startCharacter
            },
            end: {
                line: range.end.line,
                character: endCharacter
            }
        };
        if (navigation_location_1.CursorLocation.is(candidate)) {
            return range.start;
        }
        if (navigation_location_1.SelectionLocation.is(candidate)) {
            return range;
        }
        if (navigation_location_1.ContentChangeLocation.is(candidate)) {
            const { rangeLength, text } = candidate.context;
            return {
                range,
                rangeLength,
                text
            };
        }
        throw new Error(`Unexpected navigation location: ${navigation_location_1.NavigationLocation.toString(candidate)}.`);
    }
    shiftLine(input, diff) {
        if (navigation_location_1.Position.is(input)) {
            const { line, character } = input;
            return {
                line: line + diff,
                character
            };
        }
        const { start, end } = input;
        return {
            start: this.shiftLine(start, diff),
            end: this.shiftLine(end, diff)
        };
    }
    /**
     * `true` if `subRange` is strictly contained in the `range`. Otherwise, `false`.
     */
    contained(subRange, range) {
        if (subRange.start.line > range.start.line && subRange.end.line < range.end.line) {
            return true;
        }
        if (subRange.start.line < range.start.line || subRange.end.line > range.end.line) {
            return false;
        }
        if (subRange.start.line === range.start.line && subRange.start.character < range.start.character) {
            return false;
        }
        if (subRange.end.line === range.end.line && subRange.end.character > range.end.character) {
            return false;
        }
        return true;
    }
};
NavigationLocationUpdater = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)()
], NavigationLocationUpdater);
exports.NavigationLocationUpdater = NavigationLocationUpdater;


/***/ }),

/***/ "../node_modules/@theia/editor/lib/browser/navigation/navigation-location.js":
/*!***********************************************************************************!*\
  !*** ../node_modules/@theia/editor/lib/browser/navigation/navigation-location.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ContentChangeLocation = exports.SelectionLocation = exports.CursorLocation = exports.RecentlyClosedEditor = exports.NavigationLocation = exports.Range = exports.Position = void 0;
const uri_1 = __webpack_require__(/*! @theia/core/lib/common/uri */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/uri.js");
const editor_1 = __webpack_require__(/*! ../editor */ "../node_modules/@theia/editor/lib/browser/editor.js");
Object.defineProperty(exports, "Position", ({ enumerable: true, get: function () { return editor_1.Position; } }));
Object.defineProperty(exports, "Range", ({ enumerable: true, get: function () { return editor_1.Range; } }));
var NavigationLocation;
(function (NavigationLocation) {
    /**
     * The navigation location type.
     */
    let Type;
    (function (Type) {
        /**
         * Cursor position change type.
         */
        Type[Type["CURSOR"] = 0] = "CURSOR";
        /**
         * Text selection change type.
         */
        Type[Type["SELECTION"] = 1] = "SELECTION";
        /**
         * Content change type.
         */
        Type[Type["CONTENT_CHANGE"] = 2] = "CONTENT_CHANGE";
    })(Type = NavigationLocation.Type || (NavigationLocation.Type = {}));
    let Context;
    (function (Context) {
        /**
         * Returns with the type for the context.
         */
        function getType(context) {
            if (editor_1.Position.is(context)) {
                return Type.CURSOR;
            }
            if (editor_1.Range.is(context)) {
                return Type.SELECTION;
            }
            if (editor_1.TextDocumentContentChangeDelta.is(context)) {
                return Type.CONTENT_CHANGE;
            }
            throw new Error(`Unexpected context for type: ${context}.`);
        }
        Context.getType = getType;
    })(Context = NavigationLocation.Context || (NavigationLocation.Context = {}));
})(NavigationLocation = exports.NavigationLocation || (exports.NavigationLocation = {}));
(function (NavigationLocation) {
    /**
     * Transforms the location into an object that can be safely serialized.
     */
    function toObject(location) {
        const { uri, type } = location;
        const context = (() => {
            if (CursorLocation.is(location)) {
                return CursorLocation.toObject(location.context);
            }
            if (SelectionLocation.is(location)) {
                return SelectionLocation.toObject(location.context);
            }
            if (ContentChangeLocation.is(location)) {
                return ContentChangeLocation.toObject(location.context);
            }
        })();
        return {
            uri: uri.toString(),
            type,
            context
        };
    }
    NavigationLocation.toObject = toObject;
    /**
     * Returns with the navigation location object from its serialized counterpart.
     */
    function fromObject(object) {
        const { uri, type } = object;
        if (uri !== undefined && type !== undefined && object.context !== undefined) {
            const context = (() => {
                switch (type) {
                    case NavigationLocation.Type.CURSOR: return CursorLocation.fromObject(object.context);
                    case NavigationLocation.Type.SELECTION: return SelectionLocation.fromObject(object.context);
                    case NavigationLocation.Type.CONTENT_CHANGE: return ContentChangeLocation.fromObject(object.context);
                }
            })();
            if (context) {
                return {
                    uri: toUri(uri),
                    context,
                    type
                };
            }
        }
        return undefined;
    }
    NavigationLocation.fromObject = fromObject;
    /**
     * Returns with the context of the location as a `Range`.
     */
    function range(location) {
        if (CursorLocation.is(location)) {
            return editor_1.Range.create(location.context, location.context);
        }
        if (SelectionLocation.is(location)) {
            return location.context;
        }
        if (ContentChangeLocation.is(location)) {
            return location.context.range;
        }
        throw new Error(`Unexpected navigation location: ${location}.`);
    }
    NavigationLocation.range = range;
    /**
     * Creates a new navigation location object.
     */
    function create(uri, context) {
        const type = NavigationLocation.Context.getType(context);
        return {
            uri: toUri(uri),
            type,
            context
        };
    }
    NavigationLocation.create = create;
    /**
     * Returns with the human-consumable (JSON) string representation of the location argument.
     */
    function toString(location) {
        return JSON.stringify(toObject(location));
    }
    NavigationLocation.toString = toString;
})(NavigationLocation = exports.NavigationLocation || (exports.NavigationLocation = {}));
function toUri(arg) {
    if (arg instanceof uri_1.default) {
        return arg;
    }
    if (typeof arg === 'string') {
        return new uri_1.default(arg);
    }
    return arg.uri;
}
var RecentlyClosedEditor;
(function (RecentlyClosedEditor) {
    /**
     * Transform a RecentlyClosedEditor into an object for storing.
     *
     * @param closedEditor the editor needs to be transformed.
     */
    function toObject(closedEditor) {
        const { uri, viewState } = closedEditor;
        return {
            uri: uri.toString(),
            viewState: viewState
        };
    }
    RecentlyClosedEditor.toObject = toObject;
    /**
     * Transform the given object to a RecentlyClosedEditor object if possible.
     */
    function fromObject(object) {
        const { uri, viewState } = object;
        if (uri !== undefined && viewState !== undefined) {
            return {
                uri: toUri(uri),
                viewState: viewState
            };
        }
        return undefined;
    }
    RecentlyClosedEditor.fromObject = fromObject;
})(RecentlyClosedEditor = exports.RecentlyClosedEditor || (exports.RecentlyClosedEditor = {}));
var CursorLocation;
(function (CursorLocation) {
    /**
     * `true` if the argument is a cursor location. Otherwise, `false`.
     */
    function is(location) {
        return location.type === NavigationLocation.Type.CURSOR;
    }
    CursorLocation.is = is;
    /**
     * Returns with the serialized format of the position argument.
     */
    function toObject(context) {
        const { line, character } = context;
        return {
            line,
            character
        };
    }
    CursorLocation.toObject = toObject;
    /**
     * Returns with the position from its serializable counterpart, or `undefined`.
     */
    function fromObject(object) {
        if (object.line !== undefined && object.character !== undefined) {
            const { line, character } = object;
            return {
                line,
                character
            };
        }
        return undefined;
    }
    CursorLocation.fromObject = fromObject;
})(CursorLocation = exports.CursorLocation || (exports.CursorLocation = {}));
var SelectionLocation;
(function (SelectionLocation) {
    /**
     * `true` if the argument is a selection location.
     */
    function is(location) {
        return location.type === NavigationLocation.Type.SELECTION;
    }
    SelectionLocation.is = is;
    /**
     * Converts the range argument into a serializable object.
     */
    function toObject(context) {
        const { start, end } = context;
        return {
            start: CursorLocation.toObject(start),
            end: CursorLocation.toObject(end)
        };
    }
    SelectionLocation.toObject = toObject;
    /**
     * Creates a range object from its serializable counterpart. Returns with `undefined` if the argument cannot be converted into a range.
     */
    function fromObject(object) {
        if (!!object.start && !!object.end) {
            const start = CursorLocation.fromObject(object.start);
            const end = CursorLocation.fromObject(object.end);
            if (start && end) {
                return {
                    start,
                    end
                };
            }
        }
        return undefined;
    }
    SelectionLocation.fromObject = fromObject;
})(SelectionLocation = exports.SelectionLocation || (exports.SelectionLocation = {}));
var ContentChangeLocation;
(function (ContentChangeLocation) {
    /**
     * `true` if the argument is a content change location. Otherwise, `false`.
     */
    function is(location) {
        return location.type === NavigationLocation.Type.CONTENT_CHANGE;
    }
    ContentChangeLocation.is = is;
    /**
     * Returns with a serializable object representing the arguments.
     */
    function toObject(context) {
        return {
            range: SelectionLocation.toObject(context.range),
            rangeLength: context.rangeLength,
            text: context.text
        };
    }
    ContentChangeLocation.toObject = toObject;
    /**
     * Returns with a text document change delta for the argument. `undefined` if the argument cannot be mapped to a content change delta.
     */
    function fromObject(object) {
        if (!!object.range && object.rangeLength !== undefined && object.text !== undefined) {
            const range = SelectionLocation.fromObject(object.range);
            const rangeLength = object.rangeLength;
            const text = object.text;
            if (!!range) {
                return {
                    range,
                    rangeLength: rangeLength,
                    text: text
                };
            }
        }
        else {
            return undefined;
        }
    }
    ContentChangeLocation.fromObject = fromObject;
})(ContentChangeLocation = exports.ContentChangeLocation || (exports.ContentChangeLocation = {}));


/***/ }),

/***/ "../node_modules/@theia/editor/lib/browser/quick-editor-service.js":
/*!*************************************************************************!*\
  !*** ../node_modules/@theia/editor/lib/browser/quick-editor-service.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2021 SAP SE or an SAP affiliate company and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var QuickEditorService_1;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.QuickEditorService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../node_modules/@theia/editor/node_modules/@theia/core/shared/inversify/index.js");
const common_1 = __webpack_require__(/*! @theia/core/lib/common */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/index.js");
const label_provider_1 = __webpack_require__(/*! @theia/core/lib/browser/label-provider */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/label-provider.js");
const quick_access_1 = __webpack_require__(/*! @theia/core/lib/browser/quick-input/quick-access */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/quick-input/quick-access.js");
const quick_input_service_1 = __webpack_require__(/*! @theia/core/lib/browser/quick-input/quick-input-service */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/quick-input/quick-input-service.js");
const browser_1 = __webpack_require__(/*! @theia/core/lib/browser */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/index.js");
let QuickEditorService = QuickEditorService_1 = class QuickEditorService {
    constructor() {
        this.groupLocalizations = [];
    }
    registerQuickAccessProvider() {
        this.quickAccessRegistry.registerQuickAccessProvider({
            getInstance: () => this,
            prefix: QuickEditorService_1.PREFIX,
            placeholder: '',
            helpEntries: [{ description: 'Show All Opened Editors', needsEditor: false }]
        });
    }
    getPicks(filter, token) {
        const editorItems = [];
        const hasUri = (widget) => Boolean(browser_1.NavigatableWidget.getUri(widget));
        const handleWidgets = (widgets, label) => {
            if (widgets.length) {
                editorItems.push({ type: 'separator', label });
            }
            editorItems.push(...widgets.map(widget => this.toItem(widget)));
        };
        const handleSplittableArea = (tabbars, labelPrefix) => {
            tabbars.forEach((tabbar, index) => {
                const editorsOnTabbar = tabbar.titles.reduce((widgets, title) => {
                    if (hasUri(title.owner)) {
                        widgets.push(title.owner);
                    }
                    return widgets;
                }, []);
                const label = tabbars.length > 1 ? `${labelPrefix} ${this.getGroupLocalization(index)}` : labelPrefix;
                handleWidgets(editorsOnTabbar, label);
            });
        };
        handleSplittableArea(this.shell.mainAreaTabBars, browser_1.ApplicationShell.areaLabels.main);
        handleSplittableArea(this.shell.bottomAreaTabBars, browser_1.ApplicationShell.areaLabels.bottom);
        for (const area of ['left', 'right']) {
            const editorsInArea = this.shell.getWidgets(area).filter(hasUri);
            handleWidgets(editorsInArea, browser_1.ApplicationShell.areaLabels[area]);
        }
        return (0, quick_input_service_1.filterItems)(editorItems.slice(), filter);
    }
    getGroupLocalization(index) {
        return this.groupLocalizations[index] || common_1.nls.localizeByDefault('Group {0}', index + 1);
    }
    toItem(widget) {
        const uri = browser_1.NavigatableWidget.getUri(widget);
        const icon = this.labelProvider.getIcon(uri);
        const iconClasses = icon === '' ? undefined : [icon + ' file-icon'];
        return {
            label: this.labelProvider.getName(uri),
            description: this.labelProvider.getDetails(uri),
            iconClasses,
            ariaLabel: uri.path.fsPath(),
            alwaysShow: true,
            execute: () => this.shell.activateWidget(widget.id),
        };
    }
};
QuickEditorService.PREFIX = 'edt ';
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(label_provider_1.LabelProvider),
    (0, tslib_1.__metadata)("design:type", label_provider_1.LabelProvider)
], QuickEditorService.prototype, "labelProvider", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(quick_access_1.QuickAccessRegistry),
    (0, tslib_1.__metadata)("design:type", Object)
], QuickEditorService.prototype, "quickAccessRegistry", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(browser_1.ApplicationShell),
    (0, tslib_1.__metadata)("design:type", browser_1.ApplicationShell)
], QuickEditorService.prototype, "shell", void 0);
QuickEditorService = QuickEditorService_1 = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)()
], QuickEditorService);
exports.QuickEditorService = QuickEditorService;


/***/ }),

/***/ "../node_modules/@theia/editor/lib/browser/undo-redo-service.js":
/*!**********************************************************************!*\
  !*** ../node_modules/@theia/editor/lib/browser/undo-redo-service.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2021 SAP SE or an SAP affiliate company and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
// copied and modified from https://github.com/microsoft/vscode/blob/53eac52308c4611000a171cc7bf1214293473c78/src/vs/platform/undoRedo/common/undoRedoService.ts#
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ResourceEditStack = exports.UndoRedoService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../node_modules/@theia/editor/node_modules/@theia/core/shared/inversify/index.js");
let UndoRedoService = class UndoRedoService {
    constructor() {
        this.editStacks = new Map();
    }
    pushElement(resource, undo, redo) {
        let editStack;
        if (this.editStacks.has(resource.toString())) {
            editStack = this.editStacks.get(resource.toString());
        }
        else {
            editStack = new ResourceEditStack();
            this.editStacks.set(resource.toString(), editStack);
        }
        editStack.pushElement({ undo, redo });
    }
    removeElements(resource) {
        if (this.editStacks.has(resource.toString())) {
            this.editStacks.delete(resource.toString());
        }
    }
    undo(resource) {
        if (!this.editStacks.has(resource.toString())) {
            return;
        }
        const editStack = this.editStacks.get(resource.toString());
        const element = editStack.getClosestPastElement();
        if (!element) {
            return;
        }
        editStack.moveBackward(element);
        element.undo();
    }
    redo(resource) {
        if (!this.editStacks.has(resource.toString())) {
            return;
        }
        const editStack = this.editStacks.get(resource.toString());
        const element = editStack.getClosestFutureElement();
        if (!element) {
            return;
        }
        editStack.moveForward(element);
        element.redo();
    }
};
UndoRedoService = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)()
], UndoRedoService);
exports.UndoRedoService = UndoRedoService;
class ResourceEditStack {
    constructor() {
        this.past = [];
        this.future = [];
    }
    pushElement(element) {
        this.future = [];
        this.past.push(element);
    }
    getClosestPastElement() {
        if (this.past.length === 0) {
            return undefined;
        }
        return this.past[this.past.length - 1];
    }
    getClosestFutureElement() {
        if (this.future.length === 0) {
            return undefined;
        }
        return this.future[this.future.length - 1];
    }
    moveBackward(element) {
        this.past.pop();
        this.future.push(element);
    }
    moveForward(element) {
        this.future.pop();
        this.past.push(element);
    }
}
exports.ResourceEditStack = ResourceEditStack;


/***/ }),

/***/ "../node_modules/@theia/editor/lib/common/language-selector.js":
/*!*********************************************************************!*\
  !*** ../node_modules/@theia/editor/lib/common/language-selector.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2020 Red Hat, Inc. and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.score = void 0;
const glob_1 = __webpack_require__(/*! @theia/core/lib/common/glob */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/glob.js");
function score(selector, uriScheme, path, candidateLanguage, candidateIsSynchronized) {
    if (Array.isArray(selector)) {
        let ret = 0;
        for (const filter of selector) {
            const value = score(filter, uriScheme, path, candidateLanguage, candidateIsSynchronized);
            if (value === 10) {
                return value;
            }
            if (value > ret) {
                ret = value;
            }
        }
        return ret;
    }
    else if (typeof selector === 'string') {
        if (!candidateIsSynchronized) {
            return 0;
        }
        if (selector === '*') {
            return 5;
        }
        else if (selector === candidateLanguage) {
            return 10;
        }
        else {
            return 0;
        }
    }
    else if (selector) {
        const { language, pattern, scheme, hasAccessToAllModels } = selector;
        if (!candidateIsSynchronized && !hasAccessToAllModels) {
            return 0;
        }
        let result = 0;
        if (scheme) {
            if (scheme === uriScheme) {
                result = 10;
            }
            else if (scheme === '*') {
                result = 5;
            }
            else {
                return 0;
            }
        }
        if (language) {
            if (language === candidateLanguage) {
                result = 10;
            }
            else if (language === '*') {
                result = Math.max(result, 5);
            }
            else {
                return 0;
            }
        }
        if (pattern) {
            if (pattern === path || (0, glob_1.match)(pattern, path)) {
                result = 10;
            }
            else {
                return 0;
            }
        }
        return result;
    }
    else {
        return 0;
    }
}
exports.score = score;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/application-package/lib/api.js":
/*!****************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/application-package/lib/api.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2021 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DEFAULT_SUPPORTED_API_VERSION = void 0;
/**
 * The default supported API version the framework supports.
 * The version should be in the format `x.y.z`.
 */
exports.DEFAULT_SUPPORTED_API_VERSION = '1.87.2';


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/application-package/lib/application-props.js":
/*!******************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/application-package/lib/application-props.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ApplicationProps = exports.NpmRegistryProps = exports.GeneratorConfig = exports.BackendApplicationConfig = exports.FrontendApplicationConfig = exports.DefaultTheme = exports.ElectronFrontendApplicationConfig = void 0;
exports.deepmerge = __webpack_require__(/*! deepmerge */ "../node_modules/deepmerge/dist/cjs.js");
var ElectronFrontendApplicationConfig;
(function (ElectronFrontendApplicationConfig) {
    ElectronFrontendApplicationConfig.DEFAULT = {
        windowOptions: {},
        showWindowEarly: true
    };
})(ElectronFrontendApplicationConfig = exports.ElectronFrontendApplicationConfig || (exports.ElectronFrontendApplicationConfig = {}));
var DefaultTheme;
(function (DefaultTheme) {
    function defaultForOSTheme(theme) {
        if (typeof theme === 'string') {
            return theme;
        }
        if (typeof window !== 'undefined' &&
            window.matchMedia &&
            window.matchMedia('(prefers-color-scheme: dark)').matches) {
            return theme.dark;
        }
        return theme.light;
    }
    DefaultTheme.defaultForOSTheme = defaultForOSTheme;
    function defaultBackgroundColor(dark) {
        // The default light background color is based on the `colors#editor.background` value from
        // `packages/monaco/data/monaco-themes/vscode/dark_vs.json` and the dark background comes from the `light_vs.json`.
        return dark ? '#1E1E1E' : '#FFFFFF';
    }
    DefaultTheme.defaultBackgroundColor = defaultBackgroundColor;
})(DefaultTheme = exports.DefaultTheme || (exports.DefaultTheme = {}));
var FrontendApplicationConfig;
(function (FrontendApplicationConfig) {
    FrontendApplicationConfig.DEFAULT = {
        applicationName: 'Eclipse Theia',
        defaultTheme: { light: 'light', dark: 'dark' },
        defaultIconTheme: 'theia-file-icons',
        electron: ElectronFrontendApplicationConfig.DEFAULT,
        defaultLocale: '',
        validatePreferencesSchema: true,
        reloadOnReconnect: false
    };
})(FrontendApplicationConfig = exports.FrontendApplicationConfig || (exports.FrontendApplicationConfig = {}));
var BackendApplicationConfig;
(function (BackendApplicationConfig) {
    BackendApplicationConfig.DEFAULT = {
        singleInstance: false,
        frontendConnectionTimeout: 0
    };
})(BackendApplicationConfig = exports.BackendApplicationConfig || (exports.BackendApplicationConfig = {}));
var GeneratorConfig;
(function (GeneratorConfig) {
    GeneratorConfig.DEFAULT = {
        preloadTemplate: ''
    };
})(GeneratorConfig = exports.GeneratorConfig || (exports.GeneratorConfig = {}));
var NpmRegistryProps;
(function (NpmRegistryProps) {
    NpmRegistryProps.DEFAULT = {
        next: false,
        registry: 'https://registry.npmjs.org/'
    };
})(NpmRegistryProps = exports.NpmRegistryProps || (exports.NpmRegistryProps = {}));
var ApplicationProps;
(function (ApplicationProps) {
    let ApplicationTarget;
    (function (ApplicationTarget) {
        ApplicationTarget["browser"] = "browser";
        ApplicationTarget["electron"] = "electron";
        ApplicationTarget["browserOnly"] = "browser-only";
    })(ApplicationTarget = ApplicationProps.ApplicationTarget || (ApplicationProps.ApplicationTarget = {}));
    ;
    ApplicationProps.DEFAULT = {
        ...NpmRegistryProps.DEFAULT,
        target: 'browser',
        backend: {
            config: BackendApplicationConfig.DEFAULT
        },
        frontend: {
            config: FrontendApplicationConfig.DEFAULT
        },
        generator: {
            config: GeneratorConfig.DEFAULT
        }
    };
})(ApplicationProps = exports.ApplicationProps || (exports.ApplicationProps = {}));


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/application-package/lib/environment.js":
/*!************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/application-package/lib/environment.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.environment = void 0;
const isElectron = __webpack_require__(/*! is-electron */ "../node_modules/is-electron/index.js");
/**
 * The electron specific environment.
 */
class ElectronEnv {
    constructor() {
        /**
         * Environment variable that can be accessed on the `process` to check if running in electron or not.
         */
        this.THEIA_ELECTRON_VERSION = 'THEIA_ELECTRON_VERSION';
    }
    /**
     * `true` if running in electron. Otherwise, `false`.
     *
     * Can be called from both the `main` and the render process. Also works for forked cluster workers.
     */
    is() {
        return isElectron();
    }
    /**
     * `true` if running in Electron in development mode. Otherwise, `false`.
     *
     * Cannot be used from the browser. From the browser, it is always `false`.
     */
    isDevMode() {
        return this.is()
            && typeof process !== 'undefined'
            // `defaultApp` does not exist on the Node.js API, but on electron (`electron.d.ts`).
            && (process.defaultApp || /node_modules[/\\]electron[/\\]/.test(process.execPath)); // eslint-disable-line @typescript-eslint/no-explicit-any
    }
    /**
     * Creates and return with a new environment object which always contains the `ELECTRON_RUN_AS_NODE: 1` property pair.
     * This should be used to `spawn` and `fork` a new Node.js process from the Node.js shipped with Electron. Otherwise, a new Electron
     * process will be spawned which [has side-effects](https://github.com/eclipse-theia/theia/issues/5385).
     *
     * If called from the backend and the `env` argument is not defined, it falls back to `process.env` such as Node.js behaves
     * with the [`SpawnOptions`](https://nodejs.org/api/child_process.html#child_process_child_process_spawn_command_args_options).
     * If `env` is defined, it will be shallow-copied.
     *
     * Calling this function from the frontend does not make any sense, hence throw an error.
     */
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    runAsNodeEnv(env) {
        if (typeof process === 'undefined') {
            throw new Error("'process' cannot be undefined.");
        }
        return {
            ...(env === undefined ? process.env : env),
            ELECTRON_RUN_AS_NODE: 1
        };
    }
}
const electron = new ElectronEnv();
const environment = { electron };
exports.environment = environment;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/about-dialog.js":
/*!******************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/about-dialog.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AboutDialog = exports.AboutDialogProps = exports.ABOUT_EXTENSIONS_CLASS = exports.ABOUT_CONTENT_CLASS = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
const React = __webpack_require__(/*! react */ "../node_modules/react/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/es/inversify.js");
const dialogs_1 = __webpack_require__(/*! ./dialogs */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/dialogs.js");
const react_dialog_1 = __webpack_require__(/*! ./dialogs/react-dialog */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/dialogs/react-dialog.js");
const application_protocol_1 = __webpack_require__(/*! ../common/application-protocol */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/application-protocol.js");
const frontend_application_config_provider_1 = __webpack_require__(/*! ./frontend-application-config-provider */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/frontend-application-config-provider.js");
const api_1 = __webpack_require__(/*! @theia/application-package/lib/api */ "../node_modules/@theia/editor/node_modules/@theia/application-package/lib/api.js");
const window_service_1 = __webpack_require__(/*! ./window/window-service */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/window/window-service.js");
const keys_1 = __webpack_require__(/*! ./keys */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/keys.js");
const nls_1 = __webpack_require__(/*! ../common/nls */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/nls.js");
exports.ABOUT_CONTENT_CLASS = 'theia-aboutDialog';
exports.ABOUT_EXTENSIONS_CLASS = 'theia-aboutExtensions';
let AboutDialogProps = class AboutDialogProps extends dialogs_1.DialogProps {
};
AboutDialogProps = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)()
], AboutDialogProps);
exports.AboutDialogProps = AboutDialogProps;
let AboutDialog = class AboutDialog extends react_dialog_1.ReactDialog {
    constructor(props) {
        super({
            title: frontend_application_config_provider_1.FrontendApplicationConfigProvider.get().applicationName,
        });
        this.props = props;
        this.extensionsInfos = [];
        /**
         * Open a link in an external window.
         * @param url the link.
         */
        this.doOpenExternalLink = (url) => this.windowService.openNewWindow(url, { external: true });
        this.doOpenExternalLinkEnter = (e, url) => {
            if (this.isEnterKey(e)) {
                this.doOpenExternalLink(url);
            }
        };
        this.appendAcceptButton(dialogs_1.Dialog.OK);
    }
    init() {
        this.doInit();
    }
    async doInit() {
        this.applicationInfo = await this.appServer.getApplicationInfo();
        this.extensionsInfos = await this.appServer.getExtensionsInfos();
        this.update();
    }
    renderHeader() {
        const applicationInfo = this.applicationInfo;
        const compatibilityUrl = 'https://eclipse-theia.github.io/vscode-theia-comparator/status.html';
        const detailsLabel = nls_1.nls.localizeByDefault('Details');
        const versionLabel = nls_1.nls.localize('theia/core/about/version', 'Version');
        const defaultApiLabel = nls_1.nls.localize('theia/core/about/defaultApi', 'Default {0} API', 'VS Code');
        const compatibilityLabel = nls_1.nls.localize('theia/core/about/compatibility', '{0} Compatibility', 'VS Code');
        return React.createElement(React.Fragment, null,
            React.createElement("h3", null, detailsLabel),
            React.createElement("div", { className: 'about-details' },
                applicationInfo && React.createElement("p", null, `${versionLabel}: ${applicationInfo.version}`),
                React.createElement("p", null, `${defaultApiLabel}: ${api_1.DEFAULT_SUPPORTED_API_VERSION}`),
                React.createElement("p", null,
                    React.createElement("a", { role: 'button', tabIndex: 0, onClick: () => this.doOpenExternalLink(compatibilityUrl), onKeyDown: (e) => this.doOpenExternalLinkEnter(e, compatibilityUrl) }, compatibilityLabel))));
    }
    renderExtensions() {
        const extensionsInfos = this.extensionsInfos;
        return React.createElement(React.Fragment, null,
            React.createElement("h3", null, "List of extensions"),
            React.createElement("ul", { className: exports.ABOUT_EXTENSIONS_CLASS }, extensionsInfos
                .sort((a, b) => a.name.toLowerCase().localeCompare(b.name.toLowerCase()))
                .map((extension) => React.createElement("li", { key: extension.name },
                extension.name,
                " ",
                extension.version))));
    }
    render() {
        return React.createElement("div", { className: exports.ABOUT_CONTENT_CLASS },
            this.renderHeader(),
            this.renderExtensions());
    }
    onAfterAttach(msg) {
        super.onAfterAttach(msg);
        this.update();
    }
    isEnterKey(e) {
        var _a;
        return keys_1.Key.ENTER.keyCode === ((_a = keys_1.KeyCode.createKeyCode(e.nativeEvent).key) === null || _a === void 0 ? void 0 : _a.keyCode);
    }
    get value() { return undefined; }
};
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(application_protocol_1.ApplicationServer),
    (0, tslib_1.__metadata)("design:type", Object)
], AboutDialog.prototype, "appServer", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(window_service_1.WindowService),
    (0, tslib_1.__metadata)("design:type", Object)
], AboutDialog.prototype, "windowService", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.postConstruct)(),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", []),
    (0, tslib_1.__metadata)("design:returntype", void 0)
], AboutDialog.prototype, "init", null);
AboutDialog = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)(),
    (0, tslib_1.__param)(0, (0, inversify_1.inject)(AboutDialogProps)),
    (0, tslib_1.__metadata)("design:paramtypes", [AboutDialogProps])
], AboutDialog);
exports.AboutDialog = AboutDialog;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/authentication-service.js":
/*!****************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/authentication-service.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2020 Red Hat, Inc. and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.readAllowedExtensions = exports.AuthenticationServiceImpl = exports.AuthenticationService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
// code copied and modified from https://github.com/microsoft/vscode/blob/1.47.3/src/vs/workbench/services/authentication/browser/authenticationService.ts
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/es/inversify.js");
const event_1 = __webpack_require__(/*! ../common/event */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/event.js");
const storage_service_1 = __webpack_require__(/*! ../browser/storage-service */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/storage-service.js");
const disposable_1 = __webpack_require__(/*! ../common/disposable */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/disposable.js");
const menu_1 = __webpack_require__(/*! ../common/menu */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/menu/index.js");
const command_1 = __webpack_require__(/*! ../common/command */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/command.js");
const nls_1 = __webpack_require__(/*! ../common/nls */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/nls.js");
exports.AuthenticationService = Symbol('AuthenticationService');
let AuthenticationServiceImpl = class AuthenticationServiceImpl {
    constructor() {
        this.noAccountsCommand = { id: 'noAccounts' };
        this.signInRequestItems = new Map();
        this.sessionMap = new Map();
        this.authenticationProviders = new Map();
        this.onDidRegisterAuthenticationProviderEmitter = new event_1.Emitter();
        this.onDidRegisterAuthenticationProvider = this.onDidRegisterAuthenticationProviderEmitter.event;
        this.onDidUnregisterAuthenticationProviderEmitter = new event_1.Emitter();
        this.onDidUnregisterAuthenticationProvider = this.onDidUnregisterAuthenticationProviderEmitter.event;
        this.onDidChangeSessionsEmitter = new event_1.Emitter();
        this.onDidChangeSessions = this.onDidChangeSessionsEmitter.event;
    }
    init() {
        this.onDidChangeSessions(event => this.handleSessionChange(event));
        this.commands.registerCommand(this.noAccountsCommand, {
            execute: () => { },
            isEnabled: () => false
        });
    }
    async handleSessionChange(changeEvent) {
        var _a;
        if (changeEvent.event.added && changeEvent.event.added.length > 0) {
            const sessions = await this.getSessions(changeEvent.providerId);
            sessions.forEach(session => {
                if (!this.sessionMap.get(session.id)) {
                    this.sessionMap.set(session.id, this.createAccountUi(changeEvent.providerId, changeEvent.label, session));
                }
            });
        }
        for (const removed of changeEvent.event.removed || []) {
            const sessionId = typeof removed === 'string' ? removed : removed === null || removed === void 0 ? void 0 : removed.id;
            if (sessionId) {
                (_a = this.sessionMap.get(sessionId)) === null || _a === void 0 ? void 0 : _a.dispose();
                this.sessionMap.delete(sessionId);
            }
        }
    }
    createAccountUi(providerId, providerLabel, session) {
        // unregister old commands and menus if present (there is only one per account but there may be several sessions per account)
        const providerAccountId = `account-sign-out-${providerId}-${session.account.id}`;
        this.commands.unregisterCommand(providerAccountId);
        const providerAccountSubmenu = [...menu_1.ACCOUNTS_SUBMENU, providerAccountId];
        this.menus.unregisterMenuAction({ commandId: providerAccountId }, providerAccountSubmenu);
        // register new command and menu entry for the sessions account
        const disposables = new disposable_1.DisposableCollection();
        disposables.push(this.commands.registerCommand({ id: providerAccountId }, {
            execute: async () => {
                this.signOutOfAccount(providerId, session.account.label);
            }
        }));
        this.menus.registerSubmenu(providerAccountSubmenu, `${session.account.label} (${providerLabel})`);
        disposables.push(this.menus.registerMenuAction(providerAccountSubmenu, {
            label: nls_1.nls.localizeByDefault('Sign Out'),
            commandId: providerAccountId
        }));
        return disposables;
    }
    getProviderIds() {
        const providerIds = [];
        this.authenticationProviders.forEach(provider => {
            providerIds.push(provider.id);
        });
        return providerIds;
    }
    isAuthenticationProviderRegistered(id) {
        return this.authenticationProviders.has(id);
    }
    updateAccountsMenuItem() {
        let hasSession = false;
        this.authenticationProviders.forEach(async (provider) => {
            hasSession = hasSession || provider.hasSessions();
        });
        if (hasSession && this.noAccountsMenuItem) {
            this.noAccountsMenuItem.dispose();
            this.noAccountsMenuItem = undefined;
        }
        if (!hasSession && !this.noAccountsMenuItem) {
            this.noAccountsMenuItem = this.menus.registerMenuAction(menu_1.ACCOUNTS_MENU, {
                label: 'You are not signed in to any accounts',
                order: '0',
                commandId: this.noAccountsCommand.id
            });
        }
    }
    registerAuthenticationProvider(id, authenticationProvider) {
        if (this.authenticationProviders.get(id)) {
            throw new Error(`An authentication provider with id '${id}' is already registered.`);
        }
        this.authenticationProviders.set(id, authenticationProvider);
        this.onDidRegisterAuthenticationProviderEmitter.fire({ id, label: authenticationProvider.label });
        this.updateAccountsMenuItem();
        console.log(`An authentication provider with id '${id}' was registered.`);
    }
    unregisterAuthenticationProvider(id) {
        const provider = this.authenticationProviders.get(id);
        if (provider) {
            this.authenticationProviders.delete(id);
            this.onDidUnregisterAuthenticationProviderEmitter.fire({ id, label: provider.label });
            this.updateAccountsMenuItem();
        }
        else {
            console.error(`Failed to unregister an authentication provider. A provider with id '${id}' was not found.`);
        }
    }
    async updateSessions(id, event) {
        const provider = this.authenticationProviders.get(id);
        if (provider) {
            await provider.updateSessionItems(event);
            this.onDidChangeSessionsEmitter.fire({ providerId: id, label: provider.label, event: event });
            this.updateAccountsMenuItem();
            if (event.added) {
                await this.updateNewSessionRequests(provider);
            }
        }
        else {
            console.error(`Failed to update an authentication session. An authentication provider with id '${id}' was not found.`);
        }
    }
    async updateNewSessionRequests(provider) {
        const existingRequestsForProvider = this.signInRequestItems.get(provider.id);
        if (!existingRequestsForProvider) {
            return;
        }
        const sessions = await provider.getSessions();
        Object.keys(existingRequestsForProvider).forEach(requestedScopes => {
            if (sessions.some(session => session.scopes.slice().sort().join('') === requestedScopes)) {
                const sessionRequest = existingRequestsForProvider[requestedScopes];
                if (sessionRequest) {
                    sessionRequest.disposables.forEach(item => item.dispose());
                }
                delete existingRequestsForProvider[requestedScopes];
                if (Object.keys(existingRequestsForProvider).length === 0) {
                    this.signInRequestItems.delete(provider.id);
                }
                else {
                    this.signInRequestItems.set(provider.id, existingRequestsForProvider);
                }
            }
        });
    }
    async requestNewSession(providerId, scopes, extensionId, extensionName) {
        let provider = this.authenticationProviders.get(providerId);
        if (!provider) {
            // Activate has already been called for the authentication provider, but it cannot block on registering itself
            // since this is sync and returns a disposable. So, wait for registration event to fire that indicates the
            // provider is now in the map.
            await new Promise((resolve, _) => {
                this.onDidRegisterAuthenticationProvider(e => {
                    if (e.id === providerId) {
                        provider = this.authenticationProviders.get(providerId);
                        resolve(undefined);
                    }
                });
            });
        }
        if (provider) {
            const providerRequests = this.signInRequestItems.get(providerId);
            const scopesList = scopes.sort().join('');
            const extensionHasExistingRequest = providerRequests
                && providerRequests[scopesList]
                && providerRequests[scopesList].requestingExtensionIds.indexOf(extensionId) > -1;
            if (extensionHasExistingRequest) {
                return;
            }
            const menuItem = this.menus.registerMenuAction(menu_1.ACCOUNTS_SUBMENU, {
                label: `Sign in to use ${extensionName} (1)`,
                order: '1',
                commandId: `${extensionId}signIn`,
            });
            const signInCommand = this.commands.registerCommand({ id: `${extensionId}signIn` }, {
                execute: async () => {
                    const session = await this.login(providerId, scopes);
                    // Add extension to allow list since user explicitly signed in on behalf of it
                    const allowList = await readAllowedExtensions(this.storageService, providerId, session.account.label);
                    if (!allowList.find(allowed => allowed.id === extensionId)) {
                        allowList.push({ id: extensionId, name: extensionName });
                        this.storageService.setData(`authentication-trusted-extensions-${providerId}-${session.account.label}`, JSON.stringify(allowList));
                    }
                    // And also set it as the preferred account for the extension
                    this.storageService.setData(`authentication-session-${extensionName}-${providerId}`, session.id);
                }
            });
            if (providerRequests) {
                const existingRequest = providerRequests[scopesList] || { disposables: [], requestingExtensionIds: [] };
                providerRequests[scopesList] = {
                    disposables: [...existingRequest.disposables, menuItem, signInCommand],
                    requestingExtensionIds: [...existingRequest.requestingExtensionIds, extensionId]
                };
                this.signInRequestItems.set(providerId, providerRequests);
            }
            else {
                this.signInRequestItems.set(providerId, {
                    [scopesList]: {
                        disposables: [menuItem, signInCommand],
                        requestingExtensionIds: [extensionId]
                    }
                });
            }
        }
    }
    getLabel(id) {
        const authProvider = this.authenticationProviders.get(id);
        if (authProvider) {
            return authProvider.label;
        }
        else {
            throw new Error(`No authentication provider '${id}' is currently registered.`);
        }
    }
    supportsMultipleAccounts(id) {
        const authProvider = this.authenticationProviders.get(id);
        if (authProvider) {
            return authProvider.supportsMultipleAccounts;
        }
        else {
            throw new Error(`No authentication provider '${id}' is currently registered.`);
        }
    }
    async getSessions(id, scopes) {
        const authProvider = this.authenticationProviders.get(id);
        if (authProvider) {
            return authProvider.getSessions(scopes);
        }
        else {
            throw new Error(`No authentication provider '${id}' is currently registered.`);
        }
    }
    async login(id, scopes) {
        const authProvider = this.authenticationProviders.get(id);
        if (authProvider) {
            return authProvider.createSession(scopes);
        }
        else {
            throw new Error(`No authentication provider '${id}' is currently registered.`);
        }
    }
    async logout(id, sessionId) {
        const authProvider = this.authenticationProviders.get(id);
        if (authProvider) {
            return authProvider.removeSession(sessionId);
        }
        else {
            throw new Error(`No authentication provider '${id}' is currently registered.`);
        }
    }
    async signOutOfAccount(id, accountName) {
        const authProvider = this.authenticationProviders.get(id);
        if (authProvider) {
            return authProvider.signOut(accountName);
        }
        else {
            throw new Error(`No authentication provider '${id}' is currently registered.`);
        }
    }
};
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(menu_1.MenuModelRegistry),
    (0, tslib_1.__metadata)("design:type", menu_1.MenuModelRegistry)
], AuthenticationServiceImpl.prototype, "menus", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(command_1.CommandRegistry),
    (0, tslib_1.__metadata)("design:type", command_1.CommandRegistry)
], AuthenticationServiceImpl.prototype, "commands", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(storage_service_1.StorageService),
    (0, tslib_1.__metadata)("design:type", Object)
], AuthenticationServiceImpl.prototype, "storageService", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.postConstruct)(),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", []),
    (0, tslib_1.__metadata)("design:returntype", void 0)
], AuthenticationServiceImpl.prototype, "init", null);
AuthenticationServiceImpl = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)()
], AuthenticationServiceImpl);
exports.AuthenticationServiceImpl = AuthenticationServiceImpl;
async function readAllowedExtensions(storageService, providerId, accountName) {
    let trustedExtensions = [];
    try {
        const trustedExtensionSrc = await storageService.getData(`authentication-trusted-extensions-${providerId}-${accountName}`);
        if (trustedExtensionSrc) {
            trustedExtensions = JSON.parse(trustedExtensionSrc);
        }
    }
    catch (err) {
        console.error(err);
    }
    return trustedExtensions;
}
exports.readAllowedExtensions = readAllowedExtensions;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/breadcrumbs/breadcrumb-popup-container.js":
/*!********************************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/breadcrumbs/breadcrumb-popup-container.js ***!
  \********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2019 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BreadcrumbPopupContainer = exports.BreadcrumbID = exports.BreadcrumbPopupContainerFactory = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
const inversify_1 = __webpack_require__(/*! ../../../shared/inversify */ "../node_modules/@theia/editor/node_modules/@theia/core/shared/inversify/index.js");
const common_1 = __webpack_require__(/*! ../../common */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/index.js");
const disposable_1 = __webpack_require__(/*! ../../common/disposable */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/disposable.js");
const context_menu_renderer_1 = __webpack_require__(/*! ../context-menu-renderer */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/context-menu-renderer.js");
const react_renderer_1 = __webpack_require__(/*! ../widgets/react-renderer */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/widgets/react-renderer.js");
const breadcrumbs_constants_1 = __webpack_require__(/*! ./breadcrumbs-constants */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/breadcrumbs/breadcrumbs-constants.js");
exports.BreadcrumbPopupContainerFactory = Symbol('BreadcrumbPopupContainerFactory');
exports.BreadcrumbID = Symbol('BreadcrumbID');
/**
 * This class creates a popup container at the given position
 * so that contributions can attach their HTML elements
 * as children of `BreadcrumbPopupContainer#container`.
 *
 * - `dispose()` is called on blur or on hit on escape
 */
let BreadcrumbPopupContainer = class BreadcrumbPopupContainer {
    constructor() {
        this.onDidDisposeEmitter = new common_1.Emitter();
        this.toDispose = new disposable_1.DisposableCollection(this.onDidDisposeEmitter);
        this.onFocusOut = (event) => {
            if (!(event.relatedTarget instanceof Element) || !this._container.contains(event.relatedTarget)) {
                this.dispose();
            }
        };
        this.escFunction = (event) => {
            if (event.key === 'Escape' || event.key === 'Esc') {
                this.dispose();
            }
        };
    }
    get onDidDispose() {
        return this.onDidDisposeEmitter.event;
    }
    get container() {
        return this._container;
    }
    get isOpen() {
        return this._isOpen;
    }
    init() {
        this._container = this.createPopupDiv(this.position);
        document.addEventListener('keyup', this.escFunction);
        this._container.focus();
        this._isOpen = true;
    }
    createPopupDiv(position) {
        const result = window.document.createElement('div');
        result.className = breadcrumbs_constants_1.Styles.BREADCRUMB_POPUP;
        result.style.left = `${position.x}px`;
        result.style.top = `${position.y}px`;
        result.tabIndex = 0;
        result.addEventListener('focusout', this.onFocusOut);
        this.parent.appendChild(result);
        return result;
    }
    dispose() {
        if (!this.toDispose.disposed) {
            this.onDidDisposeEmitter.fire();
            this.toDispose.dispose();
            this._container.remove();
            this._isOpen = false;
            document.removeEventListener('keyup', this.escFunction);
        }
    }
};
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(react_renderer_1.RendererHost),
    (0, tslib_1.__metadata)("design:type", Object)
], BreadcrumbPopupContainer.prototype, "parent", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(exports.BreadcrumbID),
    (0, tslib_1.__metadata)("design:type", String)
], BreadcrumbPopupContainer.prototype, "breadcrumbId", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(context_menu_renderer_1.Coordinate),
    (0, tslib_1.__metadata)("design:type", Object)
], BreadcrumbPopupContainer.prototype, "position", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.postConstruct)(),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", []),
    (0, tslib_1.__metadata)("design:returntype", void 0)
], BreadcrumbPopupContainer.prototype, "init", null);
BreadcrumbPopupContainer = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)()
], BreadcrumbPopupContainer);
exports.BreadcrumbPopupContainer = BreadcrumbPopupContainer;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/breadcrumbs/breadcrumb-renderer.js":
/*!*************************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/breadcrumbs/breadcrumb-renderer.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2019 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DefaultBreadcrumbRenderer = exports.BreadcrumbRenderer = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
const React = __webpack_require__(/*! react */ "../node_modules/react/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/es/inversify.js");
const breadcrumbs_constants_1 = __webpack_require__(/*! ./breadcrumbs-constants */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/breadcrumbs/breadcrumbs-constants.js");
exports.BreadcrumbRenderer = Symbol('BreadcrumbRenderer');
let DefaultBreadcrumbRenderer = class DefaultBreadcrumbRenderer {
    render(breadcrumb, onMouseDown) {
        return React.createElement("li", { key: breadcrumb.id, title: breadcrumb.longLabel, className: breadcrumbs_constants_1.Styles.BREADCRUMB_ITEM + (!onMouseDown ? '' : ' ' + breadcrumbs_constants_1.Styles.BREADCRUMB_ITEM_HAS_POPUP), onMouseDown: event => onMouseDown && onMouseDown(breadcrumb, event), tabIndex: 0, "data-breadcrumb-id": breadcrumb.id },
            breadcrumb.iconClass && React.createElement("span", { className: breadcrumb.iconClass }),
            " ",
            React.createElement("span", null,
                " ",
                breadcrumb.label));
    }
};
DefaultBreadcrumbRenderer = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)()
], DefaultBreadcrumbRenderer);
exports.DefaultBreadcrumbRenderer = DefaultBreadcrumbRenderer;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/breadcrumbs/breadcrumbs-constants.js":
/*!***************************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/breadcrumbs/breadcrumbs-constants.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2019 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BreadcrumbsContribution = exports.Styles = void 0;
var Styles;
(function (Styles) {
    Styles.BREADCRUMBS = 'theia-breadcrumbs';
    Styles.BREADCRUMB_ITEM = 'theia-breadcrumb-item';
    Styles.BREADCRUMB_POPUP_OVERLAY_CONTAINER = 'theia-breadcrumbs-popups-overlay';
    Styles.BREADCRUMB_POPUP = 'theia-breadcrumbs-popup';
    Styles.BREADCRUMB_ITEM_HAS_POPUP = 'theia-breadcrumb-item-haspopup';
})(Styles = exports.Styles || (exports.Styles = {}));
exports.BreadcrumbsContribution = Symbol('BreadcrumbsContribution');


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/breadcrumbs/breadcrumbs-renderer.js":
/*!**************************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/breadcrumbs/breadcrumbs-renderer.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2019 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BreadcrumbsRendererFactory = exports.BreadcrumbsRenderer = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
const React = __webpack_require__(/*! react */ "../node_modules/react/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/es/inversify.js");
const widgets_1 = __webpack_require__(/*! ../widgets */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/widgets/index.js");
const breadcrumbs_service_1 = __webpack_require__(/*! ./breadcrumbs-service */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/breadcrumbs/breadcrumbs-service.js");
const breadcrumb_renderer_1 = __webpack_require__(/*! ./breadcrumb-renderer */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/breadcrumbs/breadcrumb-renderer.js");
const perfect_scrollbar_1 = __webpack_require__(/*! perfect-scrollbar */ "../node_modules/perfect-scrollbar/dist/perfect-scrollbar.esm.js");
const common_1 = __webpack_require__(/*! ../../common */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/index.js");
const core_preferences_1 = __webpack_require__(/*! ../core-preferences */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/core-preferences.js");
const breadcrumbs_constants_1 = __webpack_require__(/*! ./breadcrumbs-constants */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/breadcrumbs/breadcrumbs-constants.js");
const label_provider_1 = __webpack_require__(/*! ../label-provider */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/label-provider.js");
let BreadcrumbsRenderer = class BreadcrumbsRenderer extends widgets_1.ReactRenderer {
    constructor() {
        super(...arguments);
        this.onDidChangeActiveStateEmitter = new common_1.Emitter();
        this.breadcrumbs = [];
        this.refreshCancellationMarker = { canceled: true };
        this.togglePopup = (breadcrumb, event) => {
            var _a;
            event.stopPropagation();
            event.preventDefault();
            let openPopup = true;
            if ((_a = this.popup) === null || _a === void 0 ? void 0 : _a.isOpen) {
                this.popup.dispose();
                // There is a popup open. If the popup is the popup that belongs to the currently clicked breadcrumb
                // just close the popup. If another breadcrumb was clicked, open the new popup immediately.
                openPopup = this.popup.breadcrumbId !== breadcrumb.id;
            }
            else {
                this.popup = undefined;
            }
            if (openPopup) {
                const { currentTarget } = event;
                const breadcrumbElement = currentTarget.closest(`.${breadcrumbs_constants_1.Styles.BREADCRUMB_ITEM}`);
                if (breadcrumbElement) {
                    const { left: x, bottom: y } = breadcrumbElement.getBoundingClientRect();
                    this.breadcrumbsService.openPopup(breadcrumb, { x, y }).then(popup => { this.popup = popup; });
                }
            }
        };
    }
    get onDidChangeActiveState() {
        return this.onDidChangeActiveStateEmitter.event;
    }
    get active() {
        return !!this.breadcrumbs.length;
    }
    get breadCrumbsContainer() {
        var _a;
        return (_a = this.host.firstElementChild) !== null && _a !== void 0 ? _a : undefined;
    }
    init() {
        this.toDispose.push(this.onDidChangeActiveStateEmitter);
        this.toDispose.push(this.breadcrumbsService.onDidChangeBreadcrumbs(uri => {
            var _a;
            if ((_a = this.uri) === null || _a === void 0 ? void 0 : _a.isEqual(uri)) {
                this.refresh(this.uri);
            }
        }));
        this.toDispose.push(this.corePreferences.onPreferenceChanged(change => {
            if (change.preferenceName === 'breadcrumbs.enabled') {
                this.refresh(this.uri);
            }
        }));
        this.toDispose.push(this.labelProvider.onDidChange(() => this.refresh(this.uri)));
    }
    dispose() {
        super.dispose();
        this.toDispose.dispose();
        if (this.popup) {
            this.popup.dispose();
        }
        if (this.scrollbar) {
            this.scrollbar.destroy();
            this.scrollbar = undefined;
        }
    }
    async refresh(uri) {
        this.uri = uri;
        this.refreshCancellationMarker.canceled = true;
        const currentCallCanceled = { canceled: false };
        this.refreshCancellationMarker = currentCallCanceled;
        let breadcrumbs;
        if (uri && this.corePreferences['breadcrumbs.enabled']) {
            breadcrumbs = await this.breadcrumbsService.getBreadcrumbs(uri);
        }
        else {
            breadcrumbs = [];
        }
        if (currentCallCanceled.canceled) {
            return;
        }
        const wasActive = this.active;
        this.breadcrumbs = breadcrumbs;
        const isActive = this.active;
        if (wasActive !== isActive) {
            this.onDidChangeActiveStateEmitter.fire(isActive);
        }
        this.update();
    }
    update() {
        this.render();
        if (!this.scrollbar) {
            this.createScrollbar();
        }
        else {
            this.scrollbar.update();
        }
        this.scrollToEnd();
    }
    createScrollbar() {
        const { breadCrumbsContainer } = this;
        if (breadCrumbsContainer) {
            this.scrollbar = new perfect_scrollbar_1.default(breadCrumbsContainer, {
                handlers: ['drag-thumb', 'keyboard', 'wheel', 'touch'],
                useBothWheelAxes: true,
                scrollXMarginOffset: 4,
                suppressScrollY: true
            });
        }
    }
    scrollToEnd() {
        const { breadCrumbsContainer } = this;
        if (breadCrumbsContainer) {
            breadCrumbsContainer.scrollLeft = breadCrumbsContainer.scrollWidth;
        }
    }
    doRender() {
        return React.createElement("ul", { className: breadcrumbs_constants_1.Styles.BREADCRUMBS }, this.renderBreadcrumbs());
    }
    renderBreadcrumbs() {
        return this.breadcrumbs.map(breadcrumb => this.breadcrumbRenderer.render(breadcrumb, this.togglePopup));
    }
};
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(breadcrumbs_service_1.BreadcrumbsService),
    (0, tslib_1.__metadata)("design:type", breadcrumbs_service_1.BreadcrumbsService)
], BreadcrumbsRenderer.prototype, "breadcrumbsService", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(breadcrumb_renderer_1.BreadcrumbRenderer),
    (0, tslib_1.__metadata)("design:type", Object)
], BreadcrumbsRenderer.prototype, "breadcrumbRenderer", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(core_preferences_1.CorePreferences),
    (0, tslib_1.__metadata)("design:type", Object)
], BreadcrumbsRenderer.prototype, "corePreferences", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(label_provider_1.LabelProvider),
    (0, tslib_1.__metadata)("design:type", label_provider_1.LabelProvider)
], BreadcrumbsRenderer.prototype, "labelProvider", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.postConstruct)(),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", []),
    (0, tslib_1.__metadata)("design:returntype", void 0)
], BreadcrumbsRenderer.prototype, "init", null);
BreadcrumbsRenderer = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)()
], BreadcrumbsRenderer);
exports.BreadcrumbsRenderer = BreadcrumbsRenderer;
exports.BreadcrumbsRendererFactory = Symbol('BreadcrumbsRendererFactory');


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/breadcrumbs/breadcrumbs-service.js":
/*!*************************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/breadcrumbs/breadcrumbs-service.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2019 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BreadcrumbsService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/es/inversify.js");
const common_1 = __webpack_require__(/*! ../../common */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/index.js");
const breadcrumb_popup_container_1 = __webpack_require__(/*! ./breadcrumb-popup-container */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/breadcrumbs/breadcrumb-popup-container.js");
const breadcrumbs_constants_1 = __webpack_require__(/*! ./breadcrumbs-constants */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/breadcrumbs/breadcrumbs-constants.js");
let BreadcrumbsService = class BreadcrumbsService {
    constructor() {
        this.hasSubscribed = false;
        this.onDidChangeBreadcrumbsEmitter = new common_1.Emitter();
    }
    init() {
        this.createOverlayContainer();
    }
    createOverlayContainer() {
        this.popupsOverlayContainer = window.document.createElement('div');
        this.popupsOverlayContainer.id = breadcrumbs_constants_1.Styles.BREADCRUMB_POPUP_OVERLAY_CONTAINER;
        if (window.document.body) {
            window.document.body.appendChild(this.popupsOverlayContainer);
        }
    }
    /**
     * Subscribe to this event emitter to be notified when the breadcrumbs have changed.
     * The URI is the URI of the editor the breadcrumbs have changed for.
     */
    get onDidChangeBreadcrumbs() {
        // This lazy subscription is to address problems in inversify's instantiation routine
        // related to use of the IconThemeService by different components instantiated by the
        // ContributionProvider.
        if (!this.hasSubscribed) {
            this.subscribeToContributions();
        }
        return this.onDidChangeBreadcrumbsEmitter.event;
    }
    /**
     * Subscribes to the onDidChangeBreadcrumbs events for all contributions.
     */
    subscribeToContributions() {
        this.hasSubscribed = true;
        for (const contribution of this.contributions.getContributions()) {
            contribution.onDidChangeBreadcrumbs(uri => this.onDidChangeBreadcrumbsEmitter.fire(uri));
        }
    }
    /**
     * Returns the breadcrumbs for a given URI, possibly an empty list.
     */
    async getBreadcrumbs(uri) {
        const result = [];
        for (const contribution of await this.prioritizedContributions()) {
            result.push(...await contribution.computeBreadcrumbs(uri));
        }
        return result;
    }
    async prioritizedContributions() {
        const prioritized = await common_1.Prioritizeable.prioritizeAll(this.contributions.getContributions(), contribution => contribution.priority);
        return prioritized.map(p => p.value).reverse();
    }
    /**
     * Opens a popup for the given breadcrumb at the given position.
     */
    async openPopup(breadcrumb, position) {
        const contribution = this.contributions.getContributions().find(c => c.type === breadcrumb.type);
        if (contribution) {
            const popup = this.breadcrumbPopupContainerFactory(this.popupsOverlayContainer, breadcrumb.id, position);
            const popupContent = await contribution.attachPopupContent(breadcrumb, popup.container);
            if (popupContent && popup.isOpen) {
                popup.onDidDispose(() => popupContent.dispose());
            }
            else {
                popupContent === null || popupContent === void 0 ? void 0 : popupContent.dispose();
            }
            return popup;
        }
    }
};
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(common_1.ContributionProvider),
    (0, inversify_1.named)(breadcrumbs_constants_1.BreadcrumbsContribution),
    (0, tslib_1.__metadata)("design:type", Object)
], BreadcrumbsService.prototype, "contributions", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(breadcrumb_popup_container_1.BreadcrumbPopupContainerFactory),
    (0, tslib_1.__metadata)("design:type", Function)
], BreadcrumbsService.prototype, "breadcrumbPopupContainerFactory", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.postConstruct)(),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", []),
    (0, tslib_1.__metadata)("design:returntype", void 0)
], BreadcrumbsService.prototype, "init", null);
BreadcrumbsService = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)()
], BreadcrumbsService);
exports.BreadcrumbsService = BreadcrumbsService;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/breadcrumbs/index.js":
/*!***********************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/breadcrumbs/index.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2019 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./breadcrumb-popup-container */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/breadcrumbs/breadcrumb-popup-container.js"), exports);
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./breadcrumb-renderer */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/breadcrumbs/breadcrumb-renderer.js"), exports);
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./breadcrumbs-renderer */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/breadcrumbs/breadcrumbs-renderer.js"), exports);
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./breadcrumbs-service */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/breadcrumbs/breadcrumbs-service.js"), exports);
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./breadcrumbs-constants */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/breadcrumbs/breadcrumbs-constants.js"), exports);


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/browser.js":
/*!*************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/browser.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2017 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.measureTextHeight = exports.measureTextWidth = exports.preventNavigation = exports.parseCssTime = exports.parseCssMagnitude = exports.animationFrame = exports.isBasicWasmSupported = exports.isNative = exports.isIPad = exports.isSafari = exports.isChrome = exports.isWebKit = exports.isFirefox = exports.isOpera = exports.isEdgeOrIE = exports.isEdge = exports.isIE = void 0;
const common_1 = __webpack_require__(/*! ../common */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/index.js");
const userAgent = typeof navigator !== 'undefined' ? navigator.userAgent : '';
exports.isIE = (userAgent.indexOf('Trident') >= 0);
exports.isEdge = (userAgent.indexOf('Edge/') >= 0);
exports.isEdgeOrIE = exports.isIE || exports.isEdge;
exports.isOpera = (userAgent.indexOf('Opera') >= 0);
exports.isFirefox = (userAgent.indexOf('Firefox') >= 0);
exports.isWebKit = (userAgent.indexOf('AppleWebKit') >= 0);
exports.isChrome = (userAgent.indexOf('Chrome') >= 0);
exports.isSafari = (userAgent.indexOf('Chrome') === -1) && (userAgent.indexOf('Safari') >= 0);
exports.isIPad = (userAgent.indexOf('iPad') >= 0);
// eslint-disable-next-line @typescript-eslint/no-explicit-any
/**
 * @deprecated us Environment.electron.is
 */
exports.isNative = common_1.environment.electron.is();
// eslint-disable-next-line @typescript-eslint/no-explicit-any
exports.isBasicWasmSupported = typeof window.WebAssembly !== 'undefined';
/**
 * Resolves after the next animation frame if no parameter is given,
 * or after the given number of animation frames.
 */
function animationFrame(n = 1) {
    return new Promise(resolve => {
        function frameFunc() {
            if (n <= 0) {
                resolve();
            }
            else {
                n--;
                requestAnimationFrame(frameFunc);
            }
        }
        frameFunc();
    });
}
exports.animationFrame = animationFrame;
function parseCssMagnitude(value, defaultValue) {
    if (value) {
        let parsed;
        if (value.endsWith('px')) {
            parsed = parseFloat(value.substring(0, value.length - 2));
        }
        else {
            parsed = parseFloat(value);
        }
        if (!isNaN(parsed)) {
            return parsed;
        }
    }
    return defaultValue;
}
exports.parseCssMagnitude = parseCssMagnitude;
function parseCssTime(time, defaultValue) {
    if (time) {
        let parsed;
        if (time.endsWith('ms')) {
            parsed = parseFloat(time.substring(0, time.length - 2));
        }
        else if (time.endsWith('s')) {
            parsed = parseFloat(time.substring(0, time.length - 1)) * 1000;
        }
        else {
            parsed = parseFloat(time);
        }
        if (!isNaN(parsed)) {
            return parsed;
        }
    }
    return defaultValue;
}
exports.parseCssTime = parseCssTime;
function getMonacoEditorScroll(elem) {
    const linesContent = elem.querySelector('.lines-content');
    const viewLines = elem.querySelector('.view-lines');
    // eslint-disable-next-line no-null/no-null
    if (linesContent === null || viewLines === null) {
        return undefined;
    }
    const linesContentStyle = linesContent.style;
    const elemStyle = elem.style;
    const viewLinesStyle = viewLines.style;
    return {
        left: -parseCssMagnitude(linesContentStyle.left, 0),
        top: -parseCssMagnitude(linesContentStyle.top, 0),
        maxLeft: parseCssMagnitude(viewLinesStyle.width, 0) - parseCssMagnitude(elemStyle.width, 0),
        maxTop: parseCssMagnitude(viewLinesStyle.height, 0) - parseCssMagnitude(elemStyle.height, 0)
    };
}
/**
 * Prevent browser back/forward navigation of a mouse wheel event.
 */
function preventNavigation(event) {
    const { currentTarget, deltaX, deltaY } = event;
    const absDeltaX = Math.abs(deltaX);
    const absDeltaY = Math.abs(deltaY);
    let elem = event.target;
    while (elem && elem !== currentTarget) {
        let scroll;
        if (elem.classList.contains('monaco-scrollable-element')) {
            scroll = getMonacoEditorScroll(elem);
        }
        else {
            scroll = {
                left: elem.scrollLeft,
                top: elem.scrollTop,
                maxLeft: elem.scrollWidth - elem.clientWidth,
                maxTop: elem.scrollHeight - elem.clientHeight
            };
        }
        if (scroll) {
            const scrollH = scroll.maxLeft > 0 && (deltaX < 0 && scroll.left > 0 || deltaX > 0 && scroll.left < scroll.maxLeft);
            const scrollV = scroll.maxTop > 0 && (deltaY < 0 && scroll.top > 0 || deltaY > 0 && scroll.top < scroll.maxTop);
            if (scrollH && scrollV || scrollH && absDeltaX > absDeltaY || scrollV && absDeltaY > absDeltaX) {
                // The event is consumed by the scrollable child element
                return;
            }
        }
        elem = elem.parentElement;
    }
    event.preventDefault();
    event.stopPropagation();
}
exports.preventNavigation = preventNavigation;
function measureTextWidth(text, style) {
    const measureElement = getMeasurementElement(style);
    text = Array.isArray(text) ? text : [text];
    let width = 0;
    for (const item of text) {
        measureElement.textContent = item;
        width = Math.max(measureElement.getBoundingClientRect().width, width);
    }
    return width;
}
exports.measureTextWidth = measureTextWidth;
function measureTextHeight(text, style) {
    const measureElement = getMeasurementElement(style);
    text = Array.isArray(text) ? text : [text];
    let height = 0;
    for (const item of text) {
        measureElement.textContent = item;
        height = Math.max(measureElement.getBoundingClientRect().height, height);
    }
    return height;
}
exports.measureTextHeight = measureTextHeight;
const defaultStyle = document.createElement('div').style;
defaultStyle.fontFamily = 'var(--theia-ui-font-family)';
defaultStyle.fontSize = 'var(--theia-ui-font-size1)';
defaultStyle.visibility = 'hidden';
function getMeasurementElement(style) {
    let measureElement = document.getElementById('measure');
    if (!measureElement) {
        measureElement = document.createElement('span');
        measureElement.id = 'measure';
        measureElement.style.fontFamily = defaultStyle.fontFamily;
        measureElement.style.fontSize = defaultStyle.fontSize;
        measureElement.style.visibility = defaultStyle.visibility;
        document.body.appendChild(measureElement);
    }
    const measureStyle = measureElement.style;
    // Reset styling first
    for (let i = 0; i < measureStyle.length; i++) {
        const property = measureStyle[i];
        measureStyle.setProperty(property, defaultStyle.getPropertyValue(property));
    }
    // Apply new styling
    if (style) {
        for (const [key, value] of Object.entries(style)) {
            measureStyle.setProperty(key, value);
        }
    }
    return measureElement;
}


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/clipboard-service.js":
/*!***********************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/clipboard-service.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2019 RedHat and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ClipboardService = void 0;
exports.ClipboardService = Symbol('ClipboardService');


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/color-registry.js":
/*!********************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/color-registry.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2019 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ColorRegistry = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/es/inversify.js");
const disposable_1 = __webpack_require__(/*! ../common/disposable */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/disposable.js");
const event_1 = __webpack_require__(/*! ../common/event */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/event.js");
let ColorRegistry = class ColorRegistry {
    constructor() {
        this.onDidChangeEmitter = new event_1.Emitter();
        this.onDidChange = this.onDidChangeEmitter.event;
    }
    fireDidChange() {
        this.onDidChangeEmitter.fire(undefined);
    }
    *getColors() { }
    getCurrentCssVariable(id) {
        const value = this.getCurrentColor(id);
        if (!value) {
            return undefined;
        }
        const name = this.toCssVariableName(id);
        return { name, value };
    }
    toCssVariableName(id, prefix = 'theia') {
        return `--${prefix}-${id.replace(/\./g, '-')}`;
    }
    getCurrentColor(id) {
        return undefined;
    }
    register(...definitions) {
        const result = new disposable_1.DisposableCollection(...definitions.map(definition => this.doRegister(definition)));
        this.fireDidChange();
        return result;
    }
    doRegister(definition) {
        return disposable_1.Disposable.NULL;
    }
};
ColorRegistry = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)()
], ColorRegistry);
exports.ColorRegistry = ColorRegistry;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/common-frontend-contribution.js":
/*!**********************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/common-frontend-contribution.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2017 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CommonFrontendContribution = exports.CLASSNAME_OS_LINUX = exports.CLASSNAME_OS_WINDOWS = exports.CLASSNAME_OS_MAC = exports.RECENT_COMMANDS_STORAGE_KEY = exports.supportPaste = exports.supportCopy = exports.supportCut = exports.CommonCommands = exports.CommonMenus = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
/* eslint-disable max-len, @typescript-eslint/indent */
const debounce = __webpack_require__(/*! lodash.debounce */ "../node_modules/lodash.debounce/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/es/inversify.js");
const menu_1 = __webpack_require__(/*! ../common/menu */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/menu/index.js");
const command_1 = __webpack_require__(/*! ../common/command */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/command.js");
const uri_command_handler_1 = __webpack_require__(/*! ../common/uri-command-handler */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/uri-command-handler.js");
const selection_service_1 = __webpack_require__(/*! ../common/selection-service */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/selection-service.js");
const message_service_1 = __webpack_require__(/*! ../common/message-service */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/message-service.js");
const opener_service_1 = __webpack_require__(/*! ../browser/opener-service */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/opener-service.js");
const application_shell_1 = __webpack_require__(/*! ./shell/application-shell */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/shell/application-shell.js");
const tab_bars_1 = __webpack_require__(/*! ./shell/tab-bars */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/shell/tab-bars.js");
const about_dialog_1 = __webpack_require__(/*! ./about-dialog */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/about-dialog.js");
const browser = __webpack_require__(/*! ./browser */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/browser.js");
const uri_1 = __webpack_require__(/*! ../common/uri */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/uri.js");
const context_key_service_1 = __webpack_require__(/*! ./context-key-service */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/context-key-service.js");
const os_1 = __webpack_require__(/*! ../common/os */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/os.js");
const resource_context_key_1 = __webpack_require__(/*! ./resource-context-key */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/resource-context-key.js");
const selection_1 = __webpack_require__(/*! ../common/selection */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/selection.js");
const storage_service_1 = __webpack_require__(/*! ./storage-service */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/storage-service.js");
const navigatable_1 = __webpack_require__(/*! ./navigatable */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/navigatable.js");
const quick_view_service_1 = __webpack_require__(/*! ./quick-input/quick-view-service */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/quick-input/quick-view-service.js");
const environment_1 = __webpack_require__(/*! @theia/application-package/lib/environment */ "../node_modules/@theia/editor/node_modules/@theia/application-package/lib/environment.js");
const icon_theme_service_1 = __webpack_require__(/*! ./icon-theme-service */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/icon-theme-service.js");
const color_1 = __webpack_require__(/*! ../common/color */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/color.js");
const core_preferences_1 = __webpack_require__(/*! ./core-preferences */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/core-preferences.js");
const theming_1 = __webpack_require__(/*! ./theming */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/theming.js");
const preferences_1 = __webpack_require__(/*! ./preferences */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/preferences/index.js");
const clipboard_service_1 = __webpack_require__(/*! ./clipboard-service */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/clipboard-service.js");
const encoding_registry_1 = __webpack_require__(/*! ./encoding-registry */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/encoding-registry.js");
const encodings_1 = __webpack_require__(/*! ../common/encodings */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/encodings.js");
const env_variables_1 = __webpack_require__(/*! ../common/env-variables */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/env-variables/index.js");
const authentication_service_1 = __webpack_require__(/*! ./authentication-service */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/authentication-service.js");
const saveable_1 = __webpack_require__(/*! ./saveable */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/saveable.js");
const quick_input_1 = __webpack_require__(/*! ./quick-input */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/quick-input/index.js");
const localization_1 = __webpack_require__(/*! ../common/i18n/localization */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/i18n/localization.js");
const nls_1 = __webpack_require__(/*! ../common/nls */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/nls.js");
const current_widget_command_adapter_1 = __webpack_require__(/*! ./shell/current-widget-command-adapter */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/shell/current-widget-command-adapter.js");
const dialogs_1 = __webpack_require__(/*! ./dialogs */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/dialogs.js");
const window_service_1 = __webpack_require__(/*! ./window/window-service */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/window/window-service.js");
const frontend_application_config_provider_1 = __webpack_require__(/*! ./frontend-application-config-provider */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/frontend-application-config-provider.js");
const decoration_style_1 = __webpack_require__(/*! ./decoration-style */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/decoration-style.js");
const widgets_1 = __webpack_require__(/*! ./widgets */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/widgets/index.js");
const save_resource_service_1 = __webpack_require__(/*! ./save-resource-service */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/save-resource-service.js");
const user_working_directory_provider_1 = __webpack_require__(/*! ./user-working-directory-provider */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/user-working-directory-provider.js");
const common_1 = __webpack_require__(/*! ../common */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/index.js");
const language_quick_pick_service_1 = __webpack_require__(/*! ./i18n/language-quick-pick-service */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/i18n/language-quick-pick-service.js");
var CommonMenus;
(function (CommonMenus) {
    CommonMenus.FILE = [...menu_1.MAIN_MENU_BAR, '1_file'];
    CommonMenus.FILE_NEW_TEXT = [...CommonMenus.FILE, '1_new_text'];
    CommonMenus.FILE_NEW = [...CommonMenus.FILE, '1_new'];
    CommonMenus.FILE_OPEN = [...CommonMenus.FILE, '2_open'];
    CommonMenus.FILE_SAVE = [...CommonMenus.FILE, '3_save'];
    CommonMenus.FILE_AUTOSAVE = [...CommonMenus.FILE, '4_autosave'];
    CommonMenus.FILE_SETTINGS = [...CommonMenus.FILE, '5_settings'];
    CommonMenus.FILE_SETTINGS_SUBMENU = [...CommonMenus.FILE_SETTINGS, '1_settings_submenu'];
    CommonMenus.FILE_SETTINGS_SUBMENU_OPEN = [...CommonMenus.FILE_SETTINGS_SUBMENU, '1_settings_submenu_open'];
    CommonMenus.FILE_SETTINGS_SUBMENU_THEME = [...CommonMenus.FILE_SETTINGS_SUBMENU, '2_settings_submenu_theme'];
    CommonMenus.FILE_CLOSE = [...CommonMenus.FILE, '6_close'];
    CommonMenus.FILE_NEW_CONTRIBUTIONS = 'file/newFile';
    CommonMenus.EDIT = [...menu_1.MAIN_MENU_BAR, '2_edit'];
    CommonMenus.EDIT_UNDO = [...CommonMenus.EDIT, '1_undo'];
    CommonMenus.EDIT_CLIPBOARD = [...CommonMenus.EDIT, '2_clipboard'];
    CommonMenus.EDIT_FIND = [...CommonMenus.EDIT, '3_find'];
    CommonMenus.VIEW = [...menu_1.MAIN_MENU_BAR, '4_view'];
    CommonMenus.VIEW_PRIMARY = [...CommonMenus.VIEW, '0_primary'];
    CommonMenus.VIEW_APPEARANCE = [...CommonMenus.VIEW, '1_appearance'];
    CommonMenus.VIEW_APPEARANCE_SUBMENU = [...CommonMenus.VIEW_APPEARANCE, '1_appearance_submenu'];
    CommonMenus.VIEW_APPEARANCE_SUBMENU_SCREEN = [...CommonMenus.VIEW_APPEARANCE_SUBMENU, '2_appearance_submenu_screen'];
    CommonMenus.VIEW_APPEARANCE_SUBMENU_BAR = [...CommonMenus.VIEW_APPEARANCE_SUBMENU, '3_appearance_submenu_bar'];
    CommonMenus.VIEW_EDITOR_SUBMENU = [...CommonMenus.VIEW_APPEARANCE, '2_editor_submenu'];
    CommonMenus.VIEW_EDITOR_SUBMENU_SPLIT = [...CommonMenus.VIEW_EDITOR_SUBMENU, '1_editor_submenu_split'];
    CommonMenus.VIEW_EDITOR_SUBMENU_ORTHO = [...CommonMenus.VIEW_EDITOR_SUBMENU, '2_editor_submenu_ortho'];
    CommonMenus.VIEW_VIEWS = [...CommonMenus.VIEW, '2_views'];
    CommonMenus.VIEW_LAYOUT = [...CommonMenus.VIEW, '3_layout'];
    CommonMenus.VIEW_TOGGLE = [...CommonMenus.VIEW, '4_toggle'];
    CommonMenus.MANAGE_GENERAL = [...menu_1.MANAGE_MENU, '1_manage_general'];
    CommonMenus.MANAGE_SETTINGS = [...menu_1.MANAGE_MENU, '2_manage_settings'];
    CommonMenus.MANAGE_SETTINGS_THEMES = [...CommonMenus.MANAGE_SETTINGS, '1_manage_settings_themes'];
    // last menu item
    CommonMenus.HELP = [...menu_1.MAIN_MENU_BAR, '9_help'];
})(CommonMenus = exports.CommonMenus || (exports.CommonMenus = {}));
var CommonCommands;
(function (CommonCommands) {
    CommonCommands.FILE_CATEGORY = 'File';
    CommonCommands.VIEW_CATEGORY = 'View';
    CommonCommands.CREATE_CATEGORY = 'Create';
    CommonCommands.PREFERENCES_CATEGORY = 'Preferences';
    CommonCommands.MANAGE_CATEGORY = 'Manage';
    CommonCommands.FILE_CATEGORY_KEY = nls_1.nls.getDefaultKey(CommonCommands.FILE_CATEGORY);
    CommonCommands.VIEW_CATEGORY_KEY = nls_1.nls.getDefaultKey(CommonCommands.VIEW_CATEGORY);
    CommonCommands.PREFERENCES_CATEGORY_KEY = nls_1.nls.getDefaultKey(CommonCommands.PREFERENCES_CATEGORY);
    CommonCommands.OPEN = {
        id: 'core.open',
    };
    CommonCommands.CUT = command_1.Command.toDefaultLocalizedCommand({
        id: 'core.cut',
        label: 'Cut'
    });
    CommonCommands.COPY = command_1.Command.toDefaultLocalizedCommand({
        id: 'core.copy',
        label: 'Copy'
    });
    CommonCommands.PASTE = command_1.Command.toDefaultLocalizedCommand({
        id: 'core.paste',
        label: 'Paste'
    });
    CommonCommands.COPY_PATH = command_1.Command.toDefaultLocalizedCommand({
        id: 'core.copy.path',
        label: 'Copy Path'
    });
    CommonCommands.UNDO = command_1.Command.toDefaultLocalizedCommand({
        id: 'core.undo',
        label: 'Undo'
    });
    CommonCommands.REDO = command_1.Command.toDefaultLocalizedCommand({
        id: 'core.redo',
        label: 'Redo'
    });
    CommonCommands.SELECT_ALL = command_1.Command.toDefaultLocalizedCommand({
        id: 'core.selectAll',
        label: 'Select All'
    });
    CommonCommands.FIND = command_1.Command.toDefaultLocalizedCommand({
        id: 'core.find',
        label: 'Find'
    });
    CommonCommands.REPLACE = command_1.Command.toDefaultLocalizedCommand({
        id: 'core.replace',
        label: 'Replace'
    });
    CommonCommands.NEXT_TAB = command_1.Command.toDefaultLocalizedCommand({
        id: 'core.nextTab',
        category: CommonCommands.VIEW_CATEGORY,
        label: 'Show Next Tab'
    });
    CommonCommands.PREVIOUS_TAB = command_1.Command.toDefaultLocalizedCommand({
        id: 'core.previousTab',
        category: CommonCommands.VIEW_CATEGORY,
        label: 'Show Previous Tab'
    });
    CommonCommands.NEXT_TAB_IN_GROUP = command_1.Command.toLocalizedCommand({
        id: 'core.nextTabInGroup',
        category: CommonCommands.VIEW_CATEGORY,
        label: 'Switch to Next Tab in Group'
    }, 'theia/core/common/showNextTabInGroup', CommonCommands.VIEW_CATEGORY_KEY);
    CommonCommands.PREVIOUS_TAB_IN_GROUP = command_1.Command.toLocalizedCommand({
        id: 'core.previousTabInGroup',
        category: CommonCommands.VIEW_CATEGORY,
        label: 'Switch to Previous Tab in Group'
    }, 'theia/core/common/showPreviousTabInGroup', CommonCommands.VIEW_CATEGORY_KEY);
    CommonCommands.NEXT_TAB_GROUP = command_1.Command.toLocalizedCommand({
        id: 'core.nextTabGroup',
        category: CommonCommands.VIEW_CATEGORY,
        label: 'Switch to Next Tab Group'
    }, 'theia/core/common/showNextTabGroup', CommonCommands.VIEW_CATEGORY_KEY);
    CommonCommands.PREVIOUS_TAB_GROUP = command_1.Command.toLocalizedCommand({
        id: 'core.previousTabBar',
        category: CommonCommands.VIEW_CATEGORY,
        label: 'Switch to Previous Tab Group'
    }, 'theia/core/common/showPreviousTabGroup', CommonCommands.VIEW_CATEGORY_KEY);
    CommonCommands.CLOSE_TAB = command_1.Command.toLocalizedCommand({
        id: 'core.close.tab',
        category: CommonCommands.VIEW_CATEGORY,
        label: 'Close Tab'
    }, 'theia/core/common/closeTab', CommonCommands.VIEW_CATEGORY_KEY);
    CommonCommands.CLOSE_OTHER_TABS = command_1.Command.toLocalizedCommand({
        id: 'core.close.other.tabs',
        category: CommonCommands.VIEW_CATEGORY,
        label: 'Close Other Tabs'
    }, 'theia/core/common/closeOthers', CommonCommands.VIEW_CATEGORY_KEY);
    CommonCommands.CLOSE_SAVED_TABS = command_1.Command.toDefaultLocalizedCommand({
        id: 'workbench.action.closeUnmodifiedEditors',
        category: CommonCommands.VIEW_CATEGORY,
        label: 'Close Saved Editors in Group',
    });
    CommonCommands.CLOSE_RIGHT_TABS = command_1.Command.toLocalizedCommand({
        id: 'core.close.right.tabs',
        category: CommonCommands.VIEW_CATEGORY,
        label: 'Close Tabs to the Right'
    }, 'theia/core/common/closeRight', CommonCommands.VIEW_CATEGORY_KEY);
    CommonCommands.CLOSE_ALL_TABS = command_1.Command.toLocalizedCommand({
        id: 'core.close.all.tabs',
        category: CommonCommands.VIEW_CATEGORY,
        label: 'Close All Tabs'
    }, 'theia/core/common/closeAll', CommonCommands.VIEW_CATEGORY_KEY);
    CommonCommands.CLOSE_MAIN_TAB = command_1.Command.toLocalizedCommand({
        id: 'core.close.main.tab',
        category: CommonCommands.VIEW_CATEGORY,
        label: 'Close Tab in Main Area'
    }, 'theia/core/common/closeTabMain', CommonCommands.VIEW_CATEGORY_KEY);
    CommonCommands.CLOSE_OTHER_MAIN_TABS = command_1.Command.toLocalizedCommand({
        id: 'core.close.other.main.tabs',
        category: CommonCommands.VIEW_CATEGORY,
        label: 'Close Other Tabs in Main Area'
    }, 'theia/core/common/closeOtherTabMain', CommonCommands.VIEW_CATEGORY_KEY);
    CommonCommands.CLOSE_ALL_MAIN_TABS = command_1.Command.toLocalizedCommand({
        id: 'core.close.all.main.tabs',
        category: CommonCommands.VIEW_CATEGORY,
        label: 'Close All Tabs in Main Area'
    }, 'theia/core/common/closeAllTabMain', CommonCommands.VIEW_CATEGORY_KEY);
    CommonCommands.COLLAPSE_PANEL = command_1.Command.toLocalizedCommand({
        id: 'core.collapse.tab',
        category: CommonCommands.VIEW_CATEGORY,
        label: 'Collapse Side Panel'
    }, 'theia/core/common/collapseTab', CommonCommands.VIEW_CATEGORY_KEY);
    CommonCommands.COLLAPSE_ALL_PANELS = command_1.Command.toLocalizedCommand({
        id: 'core.collapse.all.tabs',
        category: CommonCommands.VIEW_CATEGORY,
        label: 'Collapse All Side Panels'
    }, 'theia/core/common/collapseAllTabs', CommonCommands.VIEW_CATEGORY_KEY);
    CommonCommands.TOGGLE_BOTTOM_PANEL = command_1.Command.toLocalizedCommand({
        id: 'core.toggle.bottom.panel',
        category: CommonCommands.VIEW_CATEGORY,
        label: 'Toggle Bottom Panel'
    }, 'theia/core/common/collapseBottomPanel', CommonCommands.VIEW_CATEGORY_KEY);
    CommonCommands.TOGGLE_STATUS_BAR = command_1.Command.toDefaultLocalizedCommand({
        id: 'workbench.action.toggleStatusbarVisibility',
        category: CommonCommands.VIEW_CATEGORY,
        label: 'Toggle Status Bar Visibility'
    });
    CommonCommands.PIN_TAB = command_1.Command.toDefaultLocalizedCommand({
        id: 'workbench.action.pinEditor',
        category: CommonCommands.VIEW_CATEGORY,
        label: 'Pin Editor'
    });
    CommonCommands.UNPIN_TAB = command_1.Command.toDefaultLocalizedCommand({
        id: 'workbench.action.unpinEditor',
        category: CommonCommands.VIEW_CATEGORY,
        label: 'Unpin Editor'
    });
    CommonCommands.TOGGLE_MAXIMIZED = command_1.Command.toLocalizedCommand({
        id: 'core.toggleMaximized',
        category: CommonCommands.VIEW_CATEGORY,
        label: 'Toggle Maximized'
    }, 'theia/core/common/toggleMaximized', CommonCommands.VIEW_CATEGORY_KEY);
    CommonCommands.OPEN_VIEW = command_1.Command.toDefaultLocalizedCommand({
        id: 'core.openView',
        category: CommonCommands.VIEW_CATEGORY,
        label: 'Open View...'
    });
    CommonCommands.SHOW_MENU_BAR = command_1.Command.toDefaultLocalizedCommand({
        id: 'window.menuBarVisibility',
        category: CommonCommands.VIEW_CATEGORY,
        label: 'Toggle Menu Bar'
    });
    /**
     * Command Parameters:
     * - `fileName`: string
     * - `directory`: URI
     */
    CommonCommands.NEW_FILE = command_1.Command.toDefaultLocalizedCommand({
        id: 'workbench.action.files.newFile',
        category: CommonCommands.FILE_CATEGORY
    });
    CommonCommands.NEW_UNTITLED_TEXT_FILE = command_1.Command.toDefaultLocalizedCommand({
        id: 'workbench.action.files.newUntitledTextFile',
        category: CommonCommands.FILE_CATEGORY,
        label: 'New Untitled Text File'
    });
    CommonCommands.NEW_UNTITLED_FILE = command_1.Command.toDefaultLocalizedCommand({
        id: 'workbench.action.files.newUntitledFile',
        category: CommonCommands.CREATE_CATEGORY,
        label: 'New File...'
    });
    CommonCommands.SAVE = command_1.Command.toDefaultLocalizedCommand({
        id: 'core.save',
        category: CommonCommands.FILE_CATEGORY,
        label: 'Save',
    });
    CommonCommands.SAVE_AS = command_1.Command.toDefaultLocalizedCommand({
        id: 'file.saveAs',
        category: CommonCommands.FILE_CATEGORY,
        label: 'Save As...',
    });
    CommonCommands.SAVE_WITHOUT_FORMATTING = command_1.Command.toDefaultLocalizedCommand({
        id: 'core.saveWithoutFormatting',
        category: CommonCommands.FILE_CATEGORY,
        label: 'Save without Formatting',
    });
    CommonCommands.SAVE_ALL = command_1.Command.toDefaultLocalizedCommand({
        id: 'core.saveAll',
        category: CommonCommands.FILE_CATEGORY,
        label: 'Save All',
    });
    CommonCommands.AUTO_SAVE = command_1.Command.toDefaultLocalizedCommand({
        id: 'textEditor.commands.autosave',
        category: CommonCommands.FILE_CATEGORY,
        label: 'Auto Save',
    });
    CommonCommands.ABOUT_COMMAND = command_1.Command.toDefaultLocalizedCommand({
        id: 'core.about',
        label: 'About'
    });
    CommonCommands.OPEN_PREFERENCES = command_1.Command.toDefaultLocalizedCommand({
        id: 'preferences:open',
        category: CommonCommands.PREFERENCES_CATEGORY,
        label: 'Open Settings (UI)',
    });
    CommonCommands.SELECT_COLOR_THEME = command_1.Command.toDefaultLocalizedCommand({
        id: 'workbench.action.selectTheme',
        label: 'Color Theme',
        category: CommonCommands.PREFERENCES_CATEGORY
    });
    CommonCommands.SELECT_ICON_THEME = command_1.Command.toDefaultLocalizedCommand({
        id: 'workbench.action.selectIconTheme',
        label: 'File Icon Theme',
        category: CommonCommands.PREFERENCES_CATEGORY
    });
    CommonCommands.CONFIGURE_DISPLAY_LANGUAGE = command_1.Command.toDefaultLocalizedCommand({
        id: 'workbench.action.configureLanguage',
        label: 'Configure Display Language'
    });
    CommonCommands.TOGGLE_BREADCRUMBS = command_1.Command.toDefaultLocalizedCommand({
        id: 'breadcrumbs.toggle',
        label: 'Toggle Breadcrumbs',
        category: CommonCommands.VIEW_CATEGORY
    });
})(CommonCommands = exports.CommonCommands || (exports.CommonCommands = {}));
exports.supportCut = environment_1.environment.electron.is() || document.queryCommandSupported('cut');
exports.supportCopy = environment_1.environment.electron.is() || document.queryCommandSupported('copy');
// Chrome incorrectly returns true for document.queryCommandSupported('paste')
// when the paste feature is available but the calling script has insufficient
// privileges to actually perform the action
exports.supportPaste = environment_1.environment.electron.is() || (!browser.isChrome && document.queryCommandSupported('paste'));
exports.RECENT_COMMANDS_STORAGE_KEY = 'commands';
exports.CLASSNAME_OS_MAC = 'mac';
exports.CLASSNAME_OS_WINDOWS = 'windows';
exports.CLASSNAME_OS_LINUX = 'linux';
let CommonFrontendContribution = class CommonFrontendContribution {
    constructor(shell, selectionService, messageService, openerService, aboutDialog, localizationProvider, saveResourceService) {
        this.shell = shell;
        this.selectionService = selectionService;
        this.messageService = messageService;
        this.openerService = openerService;
        this.aboutDialog = aboutDialog;
        this.localizationProvider = localizationProvider;
        this.saveResourceService = saveResourceService;
        this.commonDecorationsStyleSheet = decoration_style_1.DecorationStyle.createStyleSheet('coreCommonDecorationsStyle');
        this.shouldPreventClose = false;
    }
    async configure(app) {
        // FIXME: This request blocks valuable startup time (~200ms).
        const configDirUri = await this.environments.getConfigDirUri();
        // Global settings
        this.encodingRegistry.registerOverride({
            encoding: encodings_1.UTF8,
            parent: new uri_1.default(configDirUri)
        });
        this.contextKeyService.createKey('isLinux', os_1.OS.type() === os_1.OS.Type.Linux);
        this.contextKeyService.createKey('isMac', os_1.OS.type() === os_1.OS.Type.OSX);
        this.contextKeyService.createKey('isWindows', os_1.OS.type() === os_1.OS.Type.Windows);
        this.contextKeyService.createKey('isWeb', !this.isElectron());
        this.pinnedKey = this.contextKeyService.createKey('activeEditorIsPinned', false);
        this.updatePinnedKey();
        this.shell.onDidChangeActiveWidget(() => this.updatePinnedKey());
        this.initResourceContextKeys();
        this.registerCtrlWHandling();
        this.setOsClass();
        this.updateStyles();
        this.preferences.ready.then(() => this.setSashProperties());
        this.preferences.onPreferenceChanged(e => this.handlePreferenceChange(e, app));
        app.shell.leftPanelHandler.addBottomMenu({
            id: 'settings-menu',
            iconClass: 'codicon codicon-settings-gear',
            title: nls_1.nls.localizeByDefault(CommonCommands.MANAGE_CATEGORY),
            menuPath: menu_1.MANAGE_MENU,
            order: 1,
        });
        const accountsMenu = {
            id: 'accounts-menu',
            iconClass: 'codicon codicon-person',
            title: nls_1.nls.localizeByDefault('Accounts'),
            menuPath: menu_1.ACCOUNTS_MENU,
            order: 0,
        };
        this.authenticationService.onDidRegisterAuthenticationProvider(() => {
            app.shell.leftPanelHandler.addBottomMenu(accountsMenu);
        });
        this.authenticationService.onDidUnregisterAuthenticationProvider(() => {
            if (this.authenticationService.getProviderIds().length === 0) {
                app.shell.leftPanelHandler.removeBottomMenu(accountsMenu.id);
            }
        });
    }
    setOsClass() {
        if (os_1.isOSX) {
            document.body.classList.add(exports.CLASSNAME_OS_MAC);
        }
        else if (os_1.isWindows) {
            document.body.classList.add(exports.CLASSNAME_OS_WINDOWS);
        }
        else {
            document.body.classList.add(exports.CLASSNAME_OS_LINUX);
        }
    }
    updateStyles() {
        document.body.classList.remove('theia-editor-highlightModifiedTabs');
        if (this.preferences['workbench.editor.highlightModifiedTabs']) {
            document.body.classList.add('theia-editor-highlightModifiedTabs');
        }
    }
    updatePinnedKey() {
        const activeTab = this.shell.findTabBar();
        const pinningTarget = activeTab && this.shell.findTitle(activeTab);
        const value = pinningTarget && (0, widgets_1.isPinned)(pinningTarget);
        this.pinnedKey.set(value);
    }
    handlePreferenceChange(e, app) {
        switch (e.preferenceName) {
            case 'workbench.editor.highlightModifiedTabs': {
                this.updateStyles();
                break;
            }
            case 'window.menuBarVisibility': {
                const { newValue } = e;
                const mainMenuId = 'main-menu';
                if (newValue === 'compact') {
                    this.shell.leftPanelHandler.addTopMenu({
                        id: mainMenuId,
                        iconClass: 'codicon codicon-menu',
                        title: nls_1.nls.localizeByDefault('Application Menu'),
                        menuPath: menu_1.MAIN_MENU_BAR,
                        order: 0,
                    });
                }
                else {
                    app.shell.leftPanelHandler.removeTopMenu(mainMenuId);
                }
                break;
            }
            case 'workbench.sash.hoverDelay':
            case 'workbench.sash.size': {
                this.setSashProperties();
                break;
            }
        }
    }
    setSashProperties() {
        const sashRule = `:root {
            --theia-sash-hoverDelay: ${this.preferences['workbench.sash.hoverDelay']}ms;
            --theia-sash-width: ${this.preferences['workbench.sash.size']}px;
        }`;
        decoration_style_1.DecorationStyle.deleteStyleRule(':root', this.commonDecorationsStyleSheet);
        this.commonDecorationsStyleSheet.insertRule(sashRule);
    }
    onStart() {
        this.storageService.getData(exports.RECENT_COMMANDS_STORAGE_KEY, { recent: [] })
            .then(tasks => this.commandRegistry.recent = tasks.recent);
    }
    onStop() {
        const recent = this.commandRegistry.recent;
        this.storageService.setData(exports.RECENT_COMMANDS_STORAGE_KEY, { recent });
        window.localStorage.setItem(icon_theme_service_1.IconThemeService.STORAGE_KEY, this.iconThemes.current);
        window.localStorage.setItem(theming_1.ThemeService.STORAGE_KEY, this.themeService.getCurrentTheme().id);
    }
    initResourceContextKeys() {
        const updateContextKeys = () => {
            const selection = this.selectionService.selection;
            const resourceUri = navigatable_1.Navigatable.is(selection) && selection.getResourceUri() || selection_1.UriSelection.getUri(selection);
            this.resourceContextKey.set(resourceUri);
        };
        updateContextKeys();
        this.selectionService.onSelectionChanged(updateContextKeys);
    }
    registerMenus(registry) {
        registry.registerSubmenu(CommonMenus.FILE, nls_1.nls.localizeByDefault('File'));
        registry.registerSubmenu(CommonMenus.EDIT, nls_1.nls.localizeByDefault('Edit'));
        registry.registerSubmenu(CommonMenus.VIEW, nls_1.nls.localizeByDefault('View'));
        registry.registerSubmenu(CommonMenus.HELP, nls_1.nls.localizeByDefault('Help'));
        // For plugins contributing create new file commands/menu-actions
        registry.registerIndependentSubmenu(CommonMenus.FILE_NEW_CONTRIBUTIONS, nls_1.nls.localizeByDefault('New File...'));
        registry.registerMenuAction(CommonMenus.FILE_SAVE, {
            commandId: CommonCommands.SAVE.id
        });
        registry.registerMenuAction(CommonMenus.FILE_SAVE, {
            commandId: CommonCommands.SAVE_ALL.id
        });
        registry.registerMenuAction(CommonMenus.FILE_AUTOSAVE, {
            commandId: CommonCommands.AUTO_SAVE.id
        });
        registry.registerSubmenu(CommonMenus.FILE_SETTINGS_SUBMENU, nls_1.nls.localizeByDefault(CommonCommands.PREFERENCES_CATEGORY));
        registry.registerMenuAction(CommonMenus.EDIT_UNDO, {
            commandId: CommonCommands.UNDO.id,
            order: '0'
        });
        registry.registerMenuAction(CommonMenus.EDIT_UNDO, {
            commandId: CommonCommands.REDO.id,
            order: '1'
        });
        registry.registerMenuAction(CommonMenus.EDIT_FIND, {
            commandId: CommonCommands.FIND.id,
            order: '0'
        });
        registry.registerMenuAction(CommonMenus.EDIT_FIND, {
            commandId: CommonCommands.REPLACE.id,
            order: '1'
        });
        registry.registerMenuAction(CommonMenus.EDIT_CLIPBOARD, {
            commandId: CommonCommands.CUT.id,
            order: '0'
        });
        registry.registerMenuAction(CommonMenus.EDIT_CLIPBOARD, {
            commandId: CommonCommands.COPY.id,
            order: '1'
        });
        registry.registerMenuAction(CommonMenus.EDIT_CLIPBOARD, {
            commandId: CommonCommands.PASTE.id,
            order: '2'
        });
        registry.registerMenuAction(CommonMenus.EDIT_CLIPBOARD, {
            commandId: CommonCommands.COPY_PATH.id,
            order: '3'
        });
        registry.registerMenuAction(CommonMenus.VIEW_APPEARANCE_SUBMENU_BAR, {
            commandId: CommonCommands.TOGGLE_BOTTOM_PANEL.id,
            order: '1'
        });
        registry.registerMenuAction(CommonMenus.VIEW_APPEARANCE_SUBMENU_BAR, {
            commandId: CommonCommands.TOGGLE_STATUS_BAR.id,
            order: '2',
            label: nls_1.nls.localizeByDefault('Toggle Status Bar Visibility')
        });
        registry.registerMenuAction(CommonMenus.VIEW_APPEARANCE_SUBMENU_BAR, {
            commandId: CommonCommands.COLLAPSE_ALL_PANELS.id,
            order: '3'
        });
        registry.registerMenuAction(tab_bars_1.SHELL_TABBAR_CONTEXT_CLOSE, {
            commandId: CommonCommands.CLOSE_TAB.id,
            label: nls_1.nls.localizeByDefault('Close'),
            order: '0'
        });
        registry.registerMenuAction(tab_bars_1.SHELL_TABBAR_CONTEXT_CLOSE, {
            commandId: CommonCommands.CLOSE_OTHER_TABS.id,
            label: nls_1.nls.localizeByDefault('Close Others'),
            order: '1'
        });
        registry.registerMenuAction(tab_bars_1.SHELL_TABBAR_CONTEXT_CLOSE, {
            commandId: CommonCommands.CLOSE_RIGHT_TABS.id,
            label: nls_1.nls.localizeByDefault('Close to the Right'),
            order: '2'
        });
        registry.registerMenuAction(tab_bars_1.SHELL_TABBAR_CONTEXT_CLOSE, {
            commandId: CommonCommands.CLOSE_SAVED_TABS.id,
            label: nls_1.nls.localizeByDefault('Close Saved'),
            order: '3',
        });
        registry.registerMenuAction(tab_bars_1.SHELL_TABBAR_CONTEXT_CLOSE, {
            commandId: CommonCommands.CLOSE_ALL_TABS.id,
            label: nls_1.nls.localizeByDefault('Close All'),
            order: '4'
        });
        registry.registerMenuAction(tab_bars_1.SHELL_TABBAR_CONTEXT_SPLIT, {
            commandId: CommonCommands.COLLAPSE_PANEL.id,
            label: CommonCommands.COLLAPSE_PANEL.label,
            order: '5'
        });
        registry.registerMenuAction(tab_bars_1.SHELL_TABBAR_CONTEXT_SPLIT, {
            commandId: CommonCommands.TOGGLE_MAXIMIZED.id,
            label: CommonCommands.TOGGLE_MAXIMIZED.label,
            order: '6'
        });
        registry.registerMenuAction(CommonMenus.VIEW_APPEARANCE_SUBMENU_SCREEN, {
            commandId: CommonCommands.TOGGLE_MAXIMIZED.id,
            label: CommonCommands.TOGGLE_MAXIMIZED.label,
            order: '6'
        });
        registry.registerMenuAction(tab_bars_1.SHELL_TABBAR_CONTEXT_COPY, {
            commandId: CommonCommands.COPY_PATH.id,
            label: CommonCommands.COPY_PATH.label,
            order: '1',
        });
        registry.registerMenuAction(CommonMenus.VIEW_APPEARANCE_SUBMENU_BAR, {
            commandId: CommonCommands.SHOW_MENU_BAR.id,
            label: nls_1.nls.localizeByDefault('Toggle Menu Bar'),
            order: '0'
        });
        registry.registerMenuAction(tab_bars_1.SHELL_TABBAR_CONTEXT_PIN, {
            commandId: CommonCommands.PIN_TAB.id,
            label: nls_1.nls.localizeByDefault('Pin'),
            order: '7'
        });
        registry.registerMenuAction(tab_bars_1.SHELL_TABBAR_CONTEXT_PIN, {
            commandId: CommonCommands.UNPIN_TAB.id,
            label: nls_1.nls.localizeByDefault('Unpin'),
            order: '8'
        });
        registry.registerMenuAction(CommonMenus.HELP, {
            commandId: CommonCommands.ABOUT_COMMAND.id,
            label: CommonCommands.ABOUT_COMMAND.label,
            order: '9'
        });
        registry.registerMenuAction(CommonMenus.VIEW_PRIMARY, {
            commandId: CommonCommands.OPEN_VIEW.id
        });
        registry.registerMenuAction(CommonMenus.FILE_SETTINGS_SUBMENU_THEME, {
            commandId: CommonCommands.SELECT_COLOR_THEME.id
        });
        registry.registerMenuAction(CommonMenus.FILE_SETTINGS_SUBMENU_THEME, {
            commandId: CommonCommands.SELECT_ICON_THEME.id
        });
        registry.registerSubmenu(CommonMenus.MANAGE_SETTINGS_THEMES, nls_1.nls.localizeByDefault('Themes'), { order: 'a50' });
        registry.registerMenuAction(CommonMenus.MANAGE_SETTINGS_THEMES, {
            commandId: CommonCommands.SELECT_COLOR_THEME.id,
            order: '0'
        });
        registry.registerMenuAction(CommonMenus.MANAGE_SETTINGS_THEMES, {
            commandId: CommonCommands.SELECT_ICON_THEME.id,
            order: '1'
        });
        registry.registerSubmenu(CommonMenus.VIEW_APPEARANCE_SUBMENU, nls_1.nls.localizeByDefault('Appearance'));
        registry.registerMenuAction(CommonMenus.FILE_NEW_TEXT, {
            commandId: CommonCommands.NEW_UNTITLED_TEXT_FILE.id,
            label: nls_1.nls.localizeByDefault('New Text File'),
            order: 'a'
        });
        registry.registerMenuAction(CommonMenus.FILE_NEW_TEXT, {
            commandId: CommonCommands.NEW_UNTITLED_FILE.id,
            label: nls_1.nls.localizeByDefault('New File...'),
            order: 'a1'
        });
    }
    registerCommands(commandRegistry) {
        commandRegistry.registerCommand(CommonCommands.OPEN, uri_command_handler_1.UriAwareCommandHandler.MultiSelect(this.selectionService, {
            execute: uris => uris.map(uri => (0, opener_service_1.open)(this.openerService, uri)),
        }));
        commandRegistry.registerCommand(CommonCommands.CUT, {
            execute: () => {
                if (exports.supportCut) {
                    document.execCommand('cut');
                }
                else {
                    this.messageService.warn(nls_1.nls.localize('theia/core/cutWarn', "Please use the browser's cut command or shortcut."));
                }
            }
        });
        commandRegistry.registerCommand(CommonCommands.COPY, {
            execute: () => {
                if (exports.supportCopy) {
                    document.execCommand('copy');
                }
                else {
                    this.messageService.warn(nls_1.nls.localize('theia/core/copyWarn', "Please use the browser's copy command or shortcut."));
                }
            }
        });
        commandRegistry.registerCommand(CommonCommands.PASTE, {
            execute: () => {
                if (exports.supportPaste) {
                    document.execCommand('paste');
                }
                else {
                    this.messageService.warn(nls_1.nls.localize('theia/core/pasteWarn', "Please use the browser's paste command or shortcut."));
                }
            }
        });
        commandRegistry.registerCommand(CommonCommands.COPY_PATH, uri_command_handler_1.UriAwareCommandHandler.MultiSelect(this.selectionService, {
            isVisible: uris => Array.isArray(uris) && uris.some(uri => uri instanceof uri_1.default),
            isEnabled: uris => Array.isArray(uris) && uris.some(uri => uri instanceof uri_1.default),
            execute: async (uris) => {
                if (uris.length) {
                    const lineDelimiter = os_1.EOL;
                    const text = uris.map(resource => resource.path.fsPath()).join(lineDelimiter);
                    await this.clipboardService.writeText(text);
                }
                else {
                    await this.messageService.info(nls_1.nls.localize('theia/core/copyInfo', 'Open a file first to copy its path'));
                }
            }
        }));
        commandRegistry.registerCommand(CommonCommands.UNDO, {
            execute: () => document.execCommand('undo')
        });
        commandRegistry.registerCommand(CommonCommands.REDO, {
            execute: () => document.execCommand('redo')
        });
        commandRegistry.registerCommand(CommonCommands.SELECT_ALL, {
            execute: () => document.execCommand('selectAll')
        });
        commandRegistry.registerCommand(CommonCommands.FIND, {
            execute: () => { }
        });
        commandRegistry.registerCommand(CommonCommands.REPLACE, {
            execute: () => { }
        });
        commandRegistry.registerCommand(CommonCommands.NEXT_TAB, {
            isEnabled: () => this.shell.currentTabBar !== undefined,
            execute: () => this.shell.activateNextTab()
        });
        commandRegistry.registerCommand(CommonCommands.PREVIOUS_TAB, {
            isEnabled: () => this.shell.currentTabBar !== undefined,
            execute: () => this.shell.activatePreviousTab()
        });
        commandRegistry.registerCommand(CommonCommands.NEXT_TAB_IN_GROUP, {
            isEnabled: () => this.shell.nextTabIndexInTabBar() !== -1,
            execute: () => this.shell.activateNextTabInTabBar()
        });
        commandRegistry.registerCommand(CommonCommands.PREVIOUS_TAB_IN_GROUP, {
            isEnabled: () => this.shell.previousTabIndexInTabBar() !== -1,
            execute: () => this.shell.activatePreviousTabInTabBar()
        });
        commandRegistry.registerCommand(CommonCommands.NEXT_TAB_GROUP, {
            isEnabled: () => this.shell.nextTabBar() !== undefined,
            execute: () => this.shell.activateNextTabBar()
        });
        commandRegistry.registerCommand(CommonCommands.PREVIOUS_TAB_GROUP, {
            isEnabled: () => this.shell.previousTabBar() !== undefined,
            execute: () => this.shell.activatePreviousTabBar()
        });
        commandRegistry.registerCommand(CommonCommands.CLOSE_TAB, new current_widget_command_adapter_1.CurrentWidgetCommandAdapter(this.shell, {
            isEnabled: title => Boolean(title === null || title === void 0 ? void 0 : title.closable),
            execute: (title, tabBar) => tabBar && this.shell.closeTabs(tabBar, candidate => candidate === title),
        }));
        commandRegistry.registerCommand(CommonCommands.CLOSE_OTHER_TABS, new current_widget_command_adapter_1.CurrentWidgetCommandAdapter(this.shell, {
            isEnabled: (title, tabbar) => Boolean(tabbar === null || tabbar === void 0 ? void 0 : tabbar.titles.some(candidate => candidate !== title && candidate.closable)),
            execute: (title, tabbar) => tabbar && this.shell.closeTabs(tabbar, candidate => candidate !== title && candidate.closable),
        }));
        commandRegistry.registerCommand(CommonCommands.CLOSE_SAVED_TABS, new current_widget_command_adapter_1.CurrentWidgetCommandAdapter(this.shell, {
            isEnabled: (_title, tabbar) => Boolean(tabbar === null || tabbar === void 0 ? void 0 : tabbar.titles.some(candidate => candidate.closable && !saveable_1.Saveable.isDirty(candidate.owner))),
            execute: (_title, tabbar) => tabbar && this.shell.closeTabs(tabbar, candidate => candidate.closable && !saveable_1.Saveable.isDirty(candidate.owner)),
        }));
        commandRegistry.registerCommand(CommonCommands.CLOSE_RIGHT_TABS, new current_widget_command_adapter_1.CurrentWidgetCommandAdapter(this.shell, {
            isEnabled: (title, tabbar) => {
                let targetSeen = false;
                return Boolean(tabbar === null || tabbar === void 0 ? void 0 : tabbar.titles.some(candidate => {
                    if (targetSeen && candidate.closable) {
                        return true;
                    }
                    ;
                    if (candidate === title) {
                        targetSeen = true;
                    }
                    ;
                }));
            },
            isVisible: (_title, tabbar) => {
                var _a;
                const area = (_a = (tabbar && this.shell.getAreaFor(tabbar))) !== null && _a !== void 0 ? _a : this.shell.currentTabArea;
                return area !== undefined && area !== 'left' && area !== 'right';
            },
            execute: (title, tabbar) => {
                if (tabbar) {
                    let targetSeen = false;
                    this.shell.closeTabs(tabbar, candidate => {
                        if (targetSeen && candidate.closable) {
                            return true;
                        }
                        ;
                        if (candidate === title) {
                            targetSeen = true;
                        }
                        ;
                        return false;
                    });
                }
            }
        }));
        commandRegistry.registerCommand(CommonCommands.CLOSE_ALL_TABS, new current_widget_command_adapter_1.CurrentWidgetCommandAdapter(this.shell, {
            isEnabled: (_title, tabbar) => Boolean(tabbar === null || tabbar === void 0 ? void 0 : tabbar.titles.some(title => title.closable)),
            execute: (_title, tabbar) => tabbar && this.shell.closeTabs(tabbar, candidate => candidate.closable),
        }));
        commandRegistry.registerCommand(CommonCommands.CLOSE_MAIN_TAB, {
            isEnabled: () => {
                const currentWidget = this.shell.getCurrentWidget('main');
                return currentWidget !== undefined && currentWidget.title.closable;
            },
            execute: () => this.shell.getCurrentWidget('main').close()
        });
        commandRegistry.registerCommand(CommonCommands.CLOSE_OTHER_MAIN_TABS, {
            isEnabled: () => {
                const currentWidget = this.shell.getCurrentWidget('main');
                return currentWidget !== undefined &&
                    this.shell.mainAreaTabBars.some(tb => tb.titles.some(title => title.owner !== currentWidget && title.closable));
            },
            execute: () => {
                const currentWidget = this.shell.getCurrentWidget('main');
                this.shell.closeTabs('main', title => title.owner !== currentWidget && title.closable);
            }
        });
        commandRegistry.registerCommand(CommonCommands.CLOSE_ALL_MAIN_TABS, {
            isEnabled: () => this.shell.mainAreaTabBars.some(tb => tb.titles.some(title => title.closable)),
            execute: () => this.shell.closeTabs('main', title => title.closable)
        });
        commandRegistry.registerCommand(CommonCommands.COLLAPSE_PANEL, new current_widget_command_adapter_1.CurrentWidgetCommandAdapter(this.shell, {
            isEnabled: (_title, tabbar) => Boolean(tabbar && application_shell_1.ApplicationShell.isSideArea(this.shell.getAreaFor(tabbar))),
            isVisible: (_title, tabbar) => Boolean(tabbar && application_shell_1.ApplicationShell.isSideArea(this.shell.getAreaFor(tabbar))),
            execute: (_title, tabbar) => tabbar && this.shell.collapsePanel(this.shell.getAreaFor(tabbar))
        }));
        commandRegistry.registerCommand(CommonCommands.COLLAPSE_ALL_PANELS, {
            execute: () => {
                this.shell.collapsePanel('left');
                this.shell.collapsePanel('right');
                this.shell.collapsePanel('bottom');
            }
        });
        commandRegistry.registerCommand(CommonCommands.TOGGLE_BOTTOM_PANEL, {
            isEnabled: () => this.shell.getWidgets('bottom').length > 0,
            execute: () => {
                if (this.shell.isExpanded('bottom')) {
                    this.shell.collapsePanel('bottom');
                }
                else {
                    this.shell.expandPanel('bottom');
                }
            }
        });
        commandRegistry.registerCommand(CommonCommands.TOGGLE_STATUS_BAR, {
            execute: () => this.preferenceService.updateValue('workbench.statusBar.visible', !this.preferences['workbench.statusBar.visible'])
        });
        commandRegistry.registerCommand(CommonCommands.TOGGLE_MAXIMIZED, new current_widget_command_adapter_1.CurrentWidgetCommandAdapter(this.shell, {
            isEnabled: title => Boolean((title === null || title === void 0 ? void 0 : title.owner) && this.shell.canToggleMaximized(title === null || title === void 0 ? void 0 : title.owner)),
            isVisible: title => Boolean((title === null || title === void 0 ? void 0 : title.owner) && this.shell.canToggleMaximized(title === null || title === void 0 ? void 0 : title.owner)),
            execute: title => (title === null || title === void 0 ? void 0 : title.owner) && this.shell.toggleMaximized(title === null || title === void 0 ? void 0 : title.owner),
        }));
        commandRegistry.registerCommand(CommonCommands.SHOW_MENU_BAR, {
            isEnabled: () => !os_1.isOSX,
            isVisible: () => !os_1.isOSX,
            execute: () => {
                const menuBarVisibility = 'window.menuBarVisibility';
                const visibility = this.preferences[menuBarVisibility];
                if (visibility !== 'compact') {
                    this.preferenceService.updateValue(menuBarVisibility, 'compact');
                }
                else {
                    this.preferenceService.updateValue(menuBarVisibility, 'classic');
                }
            }
        });
        commandRegistry.registerCommand(CommonCommands.SAVE, {
            execute: () => this.save({ formatType: 1 /* ON */ })
        });
        commandRegistry.registerCommand(CommonCommands.SAVE_AS, {
            isEnabled: () => this.saveResourceService.canSaveAs(this.shell.currentWidget),
            execute: () => {
                const { currentWidget } = this.shell;
                // No clue what could have happened between `isEnabled` and `execute`
                // when fetching currentWidget, so better to double-check:
                if (this.saveResourceService.canSaveAs(currentWidget)) {
                    this.saveResourceService.saveAs(currentWidget);
                }
                else {
                    this.messageService.error(nls_1.nls.localize('theia/workspace/failSaveAs', 'Cannot run "{0}" for the current widget.', CommonCommands.SAVE_AS.label));
                }
            },
        });
        commandRegistry.registerCommand(CommonCommands.SAVE_WITHOUT_FORMATTING, {
            execute: () => this.save({ formatType: 2 /* OFF */ })
        });
        commandRegistry.registerCommand(CommonCommands.SAVE_ALL, {
            execute: () => this.shell.saveAll({ formatType: 3 /* DIRTY */ })
        });
        commandRegistry.registerCommand(CommonCommands.ABOUT_COMMAND, {
            execute: () => this.openAbout()
        });
        commandRegistry.registerCommand(CommonCommands.OPEN_VIEW, {
            execute: () => { var _a; return (_a = this.quickInputService) === null || _a === void 0 ? void 0 : _a.open(quick_view_service_1.QuickViewService.PREFIX); }
        });
        commandRegistry.registerCommand(CommonCommands.SELECT_COLOR_THEME, {
            execute: () => this.selectColorTheme()
        });
        commandRegistry.registerCommand(CommonCommands.SELECT_ICON_THEME, {
            execute: () => this.selectIconTheme()
        });
        commandRegistry.registerCommand(CommonCommands.PIN_TAB, new current_widget_command_adapter_1.CurrentWidgetCommandAdapter(this.shell, {
            isEnabled: title => Boolean(title && !(0, widgets_1.isPinned)(title)),
            execute: title => this.togglePinned(title),
        }));
        commandRegistry.registerCommand(CommonCommands.UNPIN_TAB, new current_widget_command_adapter_1.CurrentWidgetCommandAdapter(this.shell, {
            isEnabled: title => Boolean(title && (0, widgets_1.isPinned)(title)),
            execute: title => this.togglePinned(title),
        }));
        commandRegistry.registerCommand(CommonCommands.CONFIGURE_DISPLAY_LANGUAGE, {
            execute: () => this.configureDisplayLanguage()
        });
        commandRegistry.registerCommand(CommonCommands.TOGGLE_BREADCRUMBS, {
            execute: () => this.toggleBreadcrumbs(),
            isToggled: () => this.isBreadcrumbsEnabled(),
        });
        commandRegistry.registerCommand(CommonCommands.NEW_UNTITLED_TEXT_FILE, {
            execute: async () => {
                const untitledUri = this.untitledResourceResolver.createUntitledURI('', await this.workingDirProvider.getUserWorkingDir());
                this.untitledResourceResolver.resolve(untitledUri);
                return (0, opener_service_1.open)(this.openerService, untitledUri);
            }
        });
        commandRegistry.registerCommand(CommonCommands.NEW_UNTITLED_FILE, {
            execute: async () => this.showNewFilePicker()
        });
        for (const [index, ordinal] of this.getOrdinalNumbers().entries()) {
            commandRegistry.registerCommand({ id: `workbench.action.focus${ordinal}EditorGroup`, label: index === 0 ? nls_1.nls.localizeByDefault('Focus First Editor Group') : '', category: nls_1.nls.localize(CommonCommands.VIEW_CATEGORY_KEY, CommonCommands.VIEW_CATEGORY) }, {
                isEnabled: () => this.shell.mainAreaTabBars.length > index,
                execute: () => {
                    var _a, _b;
                    const widget = (_b = (_a = this.shell.mainAreaTabBars[index]) === null || _a === void 0 ? void 0 : _a.currentTitle) === null || _b === void 0 ? void 0 : _b.owner;
                    if (widget) {
                        this.shell.activateWidget(widget.id);
                    }
                }
            });
        }
    }
    getOrdinalNumbers() {
        return ['First', 'Second', 'Third', 'Fourth', 'Fifth', 'Sixth', 'Seventh', 'Eighth', 'Ninth'];
    }
    isElectron() {
        return environment_1.environment.electron.is();
    }
    togglePinned(title) {
        if (title) {
            (0, widgets_1.togglePinned)(title);
            this.updatePinnedKey();
        }
    }
    registerKeybindings(registry) {
        if (exports.supportCut) {
            registry.registerKeybinding({
                command: CommonCommands.CUT.id,
                keybinding: 'ctrlcmd+x'
            });
        }
        if (exports.supportCopy) {
            registry.registerKeybinding({
                command: CommonCommands.COPY.id,
                keybinding: 'ctrlcmd+c'
            });
        }
        if (exports.supportPaste) {
            registry.registerKeybinding({
                command: CommonCommands.PASTE.id,
                keybinding: 'ctrlcmd+v'
            });
        }
        registry.registerKeybinding({
            command: CommonCommands.COPY_PATH.id,
            keybinding: os_1.isWindows ? 'shift+alt+c' : 'ctrlcmd+alt+c',
            when: '!editorFocus'
        });
        registry.registerKeybindings(
        // Edition
        {
            command: CommonCommands.UNDO.id,
            keybinding: 'ctrlcmd+z'
        }, {
            command: CommonCommands.REDO.id,
            keybinding: 'ctrlcmd+shift+z'
        }, {
            command: CommonCommands.SELECT_ALL.id,
            keybinding: 'ctrlcmd+a'
        }, {
            command: CommonCommands.FIND.id,
            keybinding: 'ctrlcmd+f'
        }, {
            command: CommonCommands.REPLACE.id,
            keybinding: 'ctrlcmd+alt+f'
        }, 
        // Tabs
        {
            command: CommonCommands.NEXT_TAB.id,
            keybinding: 'ctrlcmd+tab'
        }, {
            command: CommonCommands.NEXT_TAB.id,
            keybinding: 'ctrlcmd+alt+d'
        }, {
            command: CommonCommands.PREVIOUS_TAB.id,
            keybinding: 'ctrlcmd+shift+tab'
        }, {
            command: CommonCommands.PREVIOUS_TAB.id,
            keybinding: 'ctrlcmd+alt+a'
        }, {
            command: CommonCommands.CLOSE_MAIN_TAB.id,
            keybinding: this.isElectron() ? (os_1.isWindows ? 'ctrl+f4' : 'ctrlcmd+w') : 'alt+w'
        }, {
            command: CommonCommands.CLOSE_OTHER_MAIN_TABS.id,
            keybinding: 'ctrlcmd+alt+t'
        }, {
            command: CommonCommands.CLOSE_ALL_MAIN_TABS.id,
            keybinding: this.isElectron() ? 'ctrlCmd+k ctrlCmd+w' : 'alt+shift+w'
        }, 
        // Panels
        {
            command: CommonCommands.COLLAPSE_PANEL.id,
            keybinding: 'alt+c'
        }, {
            command: CommonCommands.TOGGLE_BOTTOM_PANEL.id,
            keybinding: 'ctrlcmd+j',
        }, {
            command: CommonCommands.COLLAPSE_ALL_PANELS.id,
            keybinding: 'alt+shift+c',
        }, {
            command: CommonCommands.TOGGLE_MAXIMIZED.id,
            keybinding: 'alt+m',
        }, 
        // Saving
        {
            command: CommonCommands.SAVE.id,
            keybinding: 'ctrlcmd+s'
        }, {
            command: CommonCommands.SAVE_WITHOUT_FORMATTING.id,
            keybinding: 'ctrlcmd+k s'
        }, {
            command: CommonCommands.SAVE_ALL.id,
            keybinding: 'ctrlcmd+alt+s'
        }, 
        // Theming
        {
            command: CommonCommands.SELECT_COLOR_THEME.id,
            keybinding: 'ctrlcmd+k ctrlcmd+t'
        }, {
            command: CommonCommands.PIN_TAB.id,
            keybinding: 'ctrlcmd+k shift+enter',
            when: '!activeEditorIsPinned'
        }, {
            command: CommonCommands.UNPIN_TAB.id,
            keybinding: 'ctrlcmd+k shift+enter',
            when: 'activeEditorIsPinned'
        }, {
            command: CommonCommands.NEW_UNTITLED_TEXT_FILE.id,
            keybinding: this.isElectron() ? 'ctrlcmd+n' : 'alt+n',
        }, {
            command: CommonCommands.NEW_UNTITLED_FILE.id,
            keybinding: 'ctrlcmd+alt+n'
        });
        for (const [index, ordinal] of this.getOrdinalNumbers().entries()) {
            registry.registerKeybinding({
                command: `workbench.action.focus${ordinal}EditorGroup`,
                keybinding: `ctrlcmd+${(index + 1) % 10}`,
            });
        }
    }
    async save(options) {
        const widget = this.shell.currentWidget;
        this.saveResourceService.save(widget, options);
    }
    async openAbout() {
        this.aboutDialog.open();
    }
    /**
     * registers event listener which make sure that
     * window doesn't get closed if CMD/CTRL W is pressed.
     * Too many users have that in their muscle memory.
     * Chrome doesn't let us rebind or prevent default the keybinding, so this
     * at least doesn't close the window immediately.
     */
    registerCtrlWHandling() {
        function isCtrlCmd(event) {
            return (os_1.isOSX && event.metaKey) || (!os_1.isOSX && event.ctrlKey);
        }
        window.document.addEventListener('keydown', event => {
            this.shouldPreventClose = isCtrlCmd(event) && event.code === 'KeyW';
        });
        window.document.addEventListener('keyup', () => {
            this.shouldPreventClose = false;
        });
    }
    onWillStop() {
        if (this.shouldPreventClose || this.shell.canSaveAll()) {
            return {
                reason: 'Dirty editors present',
                action: async () => {
                    const captionsToSave = this.unsavedTabsCaptions();
                    const untitledCaptionsToSave = this.unsavedUntitledTabsCaptions();
                    const shouldExit = await this.confirmExitWithOrWithoutSaving(captionsToSave, async () => {
                        await this.saveDirty(untitledCaptionsToSave);
                        await this.shell.saveAll();
                    });
                    const allSavedOrDoNotSave = (shouldExit === true && untitledCaptionsToSave.length === 0 // Should save and cancel if any captions failed to save
                    ) || shouldExit === false; // Do not save
                    this.shouldPreventClose = !allSavedOrDoNotSave;
                    return allSavedOrDoNotSave;
                }
            };
        }
    }
    // Asks the user to confirm whether they want to exit with or without saving the changes
    async confirmExitWithOrWithoutSaving(captionsToSave, performSave) {
        const div = document.createElement('div');
        div.innerText = nls_1.nls.localizeByDefault("Your changes will be lost if you don't save them.");
        let result;
        if (captionsToSave.length > 0) {
            const span = document.createElement('span');
            span.appendChild(document.createElement('br'));
            captionsToSave.forEach(cap => {
                const b = document.createElement('b');
                b.innerText = cap;
                span.appendChild(b);
                span.appendChild(document.createElement('br'));
            });
            span.appendChild(document.createElement('br'));
            div.appendChild(span);
            result = await new dialogs_1.ConfirmSaveDialog({
                title: nls_1.nls.localizeByDefault('Do you want to save the changes to the following {0} files?', captionsToSave.length),
                msg: div,
                dontSave: nls_1.nls.localizeByDefault("Don't Save"),
                save: nls_1.nls.localizeByDefault('Save All'),
                cancel: dialogs_1.Dialog.CANCEL
            }).open();
            if (result) {
                await performSave();
            }
        }
        else {
            // fallback if not passed with an empty caption-list.
            result = (0, dialogs_1.confirmExit)();
        }
        if (result !== undefined) {
            return result === true;
        }
        else {
            return undefined;
        }
        ;
    }
    unsavedTabsCaptions() {
        return this.shell.widgets
            .filter(widget => this.saveResourceService.canSave(widget))
            .map(widget => widget.title.label);
    }
    unsavedUntitledTabsCaptions() {
        return this.shell.widgets.filter(widget => { var _a; return ((_a = navigatable_1.NavigatableWidget.getUri(widget)) === null || _a === void 0 ? void 0 : _a.scheme) === common_1.UNTITLED_SCHEME && this.saveResourceService.canSaveAs(widget); });
    }
    async configureDisplayLanguage() {
        var _a, _b;
        const languageInfo = await this.languageQuickPickService.pickDisplayLanguage();
        if (languageInfo && !nls_1.nls.isSelectedLocale(languageInfo.languageId) && await this.confirmRestart((_b = (_a = languageInfo.localizedLanguageName) !== null && _a !== void 0 ? _a : languageInfo.languageName) !== null && _b !== void 0 ? _b : languageInfo.languageId)) {
            nls_1.nls.setLocale(languageInfo.languageId);
            this.windowService.setSafeToShutDown();
            this.windowService.reload();
        }
    }
    /**
     * saves any dirty widget in toSave
     * side effect - will pop all widgets from toSave that was saved
     * @param toSave
     */
    async saveDirty(toSave) {
        for (const widget of toSave) {
            const saveable = saveable_1.Saveable.get(widget);
            if (saveable === null || saveable === void 0 ? void 0 : saveable.dirty) {
                await this.saveResourceService.save(widget);
                if (!this.saveResourceService.canSave(widget)) {
                    toSave.pop();
                }
            }
        }
    }
    toggleBreadcrumbs() {
        const value = this.preferenceService.get('breadcrumbs.enabled');
        this.preferenceService.set('breadcrumbs.enabled', !value, preferences_1.PreferenceScope.User);
    }
    isBreadcrumbsEnabled() {
        return !!this.preferenceService.get('breadcrumbs.enabled');
    }
    async confirmRestart(languageName) {
        const appName = frontend_application_config_provider_1.FrontendApplicationConfigProvider.get().applicationName;
        const shouldRestart = await new dialogs_1.ConfirmDialog({
            title: nls_1.nls.localizeByDefault('Restart {0} to switch to {1}?', appName, languageName),
            msg: nls_1.nls.localizeByDefault('To change the display language to {0}, {1} needs to restart.', languageName, appName),
            ok: nls_1.nls.localizeByDefault('Restart'),
            cancel: dialogs_1.Dialog.CANCEL,
        }).open();
        return shouldRestart === true;
    }
    selectIconTheme() {
        var _a;
        let resetTo = this.iconThemes.getCurrent();
        const setTheme = (id, persist) => {
            const theme = this.iconThemes.getDefinition(id);
            if (theme) {
                this.iconThemes.setCurrent(theme, persist);
            }
        };
        const previewTheme = debounce(setTheme, 200);
        let items = [];
        for (const iconTheme of this.iconThemes.definitions) {
            items.push({
                id: iconTheme.id,
                label: iconTheme.label,
                description: iconTheme.description,
            });
        }
        items = items.sort((a, b) => {
            if (a.id === 'none') {
                return -1;
            }
            return a.label.localeCompare(b.label);
        });
        (_a = this.quickInputService) === null || _a === void 0 ? void 0 : _a.showQuickPick(items, {
            placeholder: nls_1.nls.localizeByDefault('Select File Icon Theme'),
            activeItem: items.find(item => item.id === (resetTo === null || resetTo === void 0 ? void 0 : resetTo.id)),
            onDidChangeSelection: (_, selectedItems) => {
                resetTo = undefined;
                setTheme(selectedItems[0].id, true);
            },
            onDidChangeActive: (_, activeItems) => {
                previewTheme(activeItems[0].id, false);
            },
            onDidHide: () => {
                if (resetTo) {
                    this.iconThemes.setCurrent(resetTo, false);
                }
            }
        });
    }
    selectColorTheme() {
        var _a;
        let resetTo = this.themeService.getCurrentTheme().id;
        const setTheme = (id, persist) => this.themeService.setCurrentTheme(id, persist);
        const previewTheme = debounce(setTheme, 200);
        const itemsByTheme = { light: [], dark: [], hc: [], hcLight: [] };
        const lightThemesSeparator = nls_1.nls.localizeByDefault('light themes');
        const darkThemesSeparator = nls_1.nls.localizeByDefault('dark themes');
        const highContrastThemesSeparator = nls_1.nls.localizeByDefault('high contrast themes');
        for (const theme of this.themeService.getThemes().sort((a, b) => a.label.localeCompare(b.label))) {
            const themeItems = itemsByTheme[theme.type];
            // Add a separator for the first item in the respective group.
            // High Contrast Themes despite dark or light should be grouped together.
            if (themeItems.length === 0 && theme.type !== 'hcLight') {
                let label = '';
                if (theme.type === 'light') {
                    label = lightThemesSeparator;
                }
                else if (theme.type === 'dark') {
                    label = darkThemesSeparator;
                }
                else {
                    label = highContrastThemesSeparator;
                }
                themeItems.push({
                    type: 'separator',
                    label
                });
            }
            themeItems.push({
                id: theme.id,
                label: theme.label,
                description: theme.description,
            });
        }
        const items = [...itemsByTheme.light, ...itemsByTheme.dark, ...itemsByTheme.hc, ...itemsByTheme.hcLight];
        (_a = this.quickInputService) === null || _a === void 0 ? void 0 : _a.showQuickPick(items, {
            placeholder: nls_1.nls.localizeByDefault('Select Color Theme (Up/Down Keys to Preview)'),
            activeItem: items.find(item => item.id === resetTo),
            onDidChangeSelection: (_, selectedItems) => {
                resetTo = undefined;
                setTheme(selectedItems[0].id, true);
            },
            onDidChangeActive: (_, activeItems) => {
                previewTheme(activeItems[0].id, false);
            },
            onDidHide: () => {
                if (resetTo) {
                    setTheme(resetTo, false);
                }
            }
        });
    }
    /**
     * @todo https://github.com/eclipse-theia/theia/issues/12824
     */
    async showNewFilePicker() {
        const newFileContributions = this.menuRegistry.getMenuNode(CommonMenus.FILE_NEW_CONTRIBUTIONS); // Add menus
        const items = [
            {
                label: nls_1.nls.localizeByDefault('New Text File'),
                description: nls_1.nls.localizeByDefault('Built-in'),
                execute: async () => this.commandRegistry.executeCommand(CommonCommands.NEW_UNTITLED_TEXT_FILE.id)
            },
            ...newFileContributions.children
                .flatMap(node => {
                if (node.children && node.children.length > 0) {
                    return node.children;
                }
                return node;
            })
                .filter(node => node.role || node.command)
                .map(node => {
                if (node.role) {
                    return { type: 'separator' };
                }
                const command = this.commandRegistry.getCommand(node.command);
                return {
                    label: command.label,
                    execute: async () => this.commandRegistry.executeCommand(command.id)
                };
            })
        ];
        const CREATE_NEW_FILE_ITEM_ID = 'create-new-file';
        const hasNewFileHandler = this.commandRegistry.getActiveHandler(CommonCommands.NEW_FILE.id) !== undefined;
        // Create a "Create New File" item only if there is a NEW_FILE command handler.
        const createNewFileItem = hasNewFileHandler ? {
            id: CREATE_NEW_FILE_ITEM_ID,
            label: nls_1.nls.localizeByDefault('Create New File ({0})'),
            description: nls_1.nls.localizeByDefault('Built-in'),
            execute: async () => {
                if (createNewFileItem === null || createNewFileItem === void 0 ? void 0 : createNewFileItem.value) {
                    const parent = await this.workingDirProvider.getUserWorkingDir();
                    // Exec NEW_FILE command with the file name and parent dir as arguments
                    return this.commandRegistry.executeCommand(CommonCommands.NEW_FILE.id, createNewFileItem.value, parent);
                }
            }
        } : undefined;
        this.quickInputService.showQuickPick(items, {
            title: nls_1.nls.localizeByDefault('New File...'),
            placeholder: nls_1.nls.localizeByDefault('Select File Type or Enter File Name...'),
            canSelectMany: false,
            onDidChangeValue: picker => {
                if (createNewFileItem === undefined) {
                    return;
                }
                // Dynamically show or hide the "Create New File" item based on the input value.
                if (picker.value) {
                    createNewFileItem.alwaysShow = true;
                    createNewFileItem.value = picker.value;
                    createNewFileItem.label = nls_1.nls.localizeByDefault('Create New File ({0})', picker.value);
                    picker.items = [...items, createNewFileItem];
                }
                else {
                    createNewFileItem.alwaysShow = false;
                    createNewFileItem.value = undefined;
                    picker.items = items.filter(item => item !== createNewFileItem);
                }
            }
        });
    }
    registerColors(colors) {
        colors.register(
        // Base Colors should be aligned with https://code.visualstudio.com/api/references/theme-color#base-colors
        // if not yet contributed by Monaco, check runtime css variables to learn
        { id: 'selection.background', defaults: { dark: '#217daf', light: '#c0dbf1' }, description: 'Overall border color for focused elements. This color is only used if not overridden by a component.' }, { id: 'icon.foreground', defaults: { dark: '#C5C5C5', light: '#424242', hcDark: '#FFFFFF', hcLight: '#292929' }, description: 'The default color for icons in the workbench.' }, { id: 'sash.hoverBorder', defaults: { dark: color_1.Color.transparent('focusBorder', 0.99), light: color_1.Color.transparent('focusBorder', 0.99), hcDark: 'focusBorder', hcLight: 'focusBorder' }, description: 'The hover border color for draggable sashes.' }, { id: 'sash.activeBorder', defaults: { dark: 'focusBorder', light: 'focusBorder', hcDark: 'focusBorder' }, description: 'The active border color for draggable sashes.' }, 
        // Window border colors should be aligned with https://code.visualstudio.com/api/references/theme-color#window-border
        {
            id: 'window.activeBorder', defaults: {
                hcDark: 'contrastBorder',
                hcLight: 'contrastBorder'
            }, description: 'The color used for the border of the window when it is active.'
        }, {
            id: 'window.inactiveBorder', defaults: {
                hcDark: 'contrastBorder',
                hcLight: 'contrastBorder'
            },
            description: 'The color used for the border of the window when it is inactive.'
        }, 
        // Buttons should be aligned with https://code.visualstudio.com/api/references/theme-color#button-control
        // if not yet contributed by Monaco, check runtime css variables to learn
        { id: 'button.foreground', defaults: { dark: color_1.Color.white, light: color_1.Color.white, hcDark: color_1.Color.white, hcLight: color_1.Color.white }, description: 'Button foreground color.' }, { id: 'button.background', defaults: { dark: '#0E639C', light: '#007ACC', hcDark: undefined, hcLight: '#0F4A85' }, description: 'Button background color.' }, { id: 'button.hoverBackground', defaults: { dark: color_1.Color.lighten('button.background', 0.2), light: color_1.Color.darken('button.background', 0.2) }, description: 'Button background color when hovering.' }, 
        // Activity Bar colors should be aligned with https://code.visualstudio.com/api/references/theme-color#activity-bar
        {
            id: 'activityBar.background', defaults: {
                dark: '#333333',
                light: '#2C2C2C',
                hcDark: '#000000',
                hcLight: '#FFFFFF'
            }, description: 'Activity bar background color. The activity bar is showing on the far left or right and allows to switch between views of the side bar.'
        }, {
            id: 'activityBar.foreground', defaults: {
                dark: color_1.Color.white,
                light: color_1.Color.white,
                hcDark: color_1.Color.white,
                hcLight: 'editor.foreground'
            }, description: 'Activity bar item foreground color when it is active. The activity bar is showing on the far left or right and allows to switch between views of the side bar.',
        }, {
            id: 'activityBar.inactiveForeground', defaults: {
                dark: color_1.Color.transparent('activityBar.foreground', 0.4),
                light: color_1.Color.transparent('activityBar.foreground', 0.4),
                hcDark: color_1.Color.white,
                hcLight: 'editor.foreground'
            }, description: 'Activity bar item foreground color when it is inactive. The activity bar is showing on the far left or right and allows to switch between views of the side bar.'
        }, {
            id: 'activityBar.border', defaults: {
                hcDark: 'contrastBorder',
                hcLight: 'contrastBorder'
            }, description: 'Activity bar border color separating to the side bar. The activity bar is showing on the far left or right and allows to switch between views of the side bar.'
        }, {
            id: 'activityBar.activeBorder', defaults: {
                dark: 'activityBar.foreground',
                light: 'activityBar.foreground',
                hcLight: 'contrastBorder'
            }, description: 'Activity bar border color for the active item. The activity bar is showing on the far left or right and allows to switch between views of the side bar.'
        }, {
            id: 'activityBar.activeFocusBorder', defaults: {
                hcLight: '#B5200D'
            }, description: 'Activity bar focus border color for the active item. The activity bar is showing on the far left or right and allows to switch between views of the side bar.'
        }, { id: 'activityBar.activeBackground', description: 'Activity bar background color for the active item. The activity bar is showing on the far left or right and allows to switch between views of the side bar.' }, {
            id: 'activityBar.dropBackground', defaults: {
                dark: color_1.Color.transparent('#ffffff', 0.12),
                light: color_1.Color.transparent('#ffffff', 0.12),
                hcDark: color_1.Color.transparent('#ffffff', 0.12),
            }, description: 'Drag and drop feedback color for the activity bar items. The color should have transparency so that the activity bar entries can still shine through. The activity bar is showing on the far left or right and allows to switch between views of the side bar.'
        }, {
            id: 'activityBarBadge.background', defaults: {
                dark: '#007ACC',
                light: '#007ACC',
                hcDark: '#000000',
                hcLight: '#0F4A85'
            }, description: 'Activity notification badge background color. The activity bar is showing on the far left or right and allows to switch between views of the side bar.'
        }, {
            id: 'activityBarBadge.foreground', defaults: {
                dark: color_1.Color.white,
                light: color_1.Color.white,
                hcDark: color_1.Color.white,
                hcLight: color_1.Color.white
            }, description: 'Activity notification badge foreground color. The activity bar is showing on the far left or right and allows to switch between views of the side bar.'
        }, 
        // Side Bar should be aligned with https://code.visualstudio.com/api/references/theme-color#side-bar
        // if not yet contributed by Monaco, check runtime css variables to learn
        { id: 'sideBar.background', defaults: { dark: '#252526', light: '#F3F3F3', hcDark: '#000000', hcLight: '#FFFFFF' }, description: 'Side bar background color. The side bar is the container for views like explorer and search.' }, { id: 'sideBar.foreground', description: 'Side bar foreground color. The side bar is the container for views like explorer and search.' }, { id: 'sideBarSectionHeader.background', defaults: { dark: '#80808033', light: '#80808033' }, description: 'Side bar section header background color. The side bar is the container for views like explorer and search.' }, { id: 'sideBarSectionHeader.foreground', description: 'Side bar foreground color. The side bar is the container for views like explorer and search.' }, { id: 'sideBarSectionHeader.border', defaults: { dark: 'contrastBorder', light: 'contrastBorder', hcDark: 'contrastBorder', hcLight: 'contrastBorder' }, description: 'Side bar section header border color. The side bar is the container for views like explorer and search.' }, 
        // Lists and Trees colors should be aligned with https://code.visualstudio.com/api/references/theme-color#lists-and-trees
        // if not yet contributed by Monaco, check runtime css variables to learn.
        // TODO: Following are not yet supported/no respective elements in theia:
        // list.focusBackground, list.focusForeground, list.inactiveFocusBackground, list.filterMatchBorder,
        // list.dropBackground, listFilterWidget.outline, listFilterWidget.noMatchesOutline
        // list.invalidItemForeground => tree node needs an respective class
        { id: 'list.activeSelectionBackground', defaults: { dark: '#094771', light: '#0074E8', hcLight: color_1.Color.transparent('#0F4A85', 0.1) }, description: 'List/Tree background color for the selected item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.' }, { id: 'list.activeSelectionForeground', defaults: { dark: '#FFF', light: '#FFF' }, description: 'List/Tree foreground color for the selected item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.' }, { id: 'list.inactiveSelectionBackground', defaults: { dark: '#37373D', light: '#E4E6F1', hcLight: color_1.Color.transparent('#0F4A85', 0.1) }, description: 'List/Tree background color for the selected item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not.' }, { id: 'list.inactiveSelectionForeground', description: 'List/Tree foreground color for the selected item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not.' }, { id: 'list.hoverBackground', defaults: { dark: '#2A2D2E', light: '#F0F0F0', hcLight: color_1.Color.transparent('#0F4A85', 0.1) }, description: 'List/Tree background when hovering over items using the mouse.' }, { id: 'list.hoverForeground', description: 'List/Tree foreground when hovering over items using the mouse.' }, { id: 'list.errorForeground', defaults: { dark: '#F88070', light: '#B01011' }, description: 'Foreground color of list items containing errors.' }, { id: 'list.warningForeground', defaults: { dark: '#CCA700', light: '#855F00' }, description: 'Foreground color of list items containing warnings.' }, { id: 'list.filterMatchBackground', defaults: { dark: 'editor.findMatchHighlightBackground', light: 'editor.findMatchHighlightBackground' }, description: 'Background color of the filtered match.' }, { id: 'list.highlightForeground', defaults: { dark: '#18A3FF', light: '#0066BF', hcDark: 'focusBorder', hcLight: 'focusBorder' }, description: 'List/Tree foreground color of the match highlights when searching inside the list/tree.' }, { id: 'list.focusHighlightForeground', defaults: { dark: 'list.highlightForeground', light: 'list.activeSelectionForeground', hcDark: 'list.highlightForeground', hcLight: 'list.highlightForeground' }, description: 'List/Tree foreground color of the match highlights on actively focused items when searching inside the list/tree.' }, { id: 'tree.inactiveIndentGuidesStroke', defaults: { dark: color_1.Color.transparent('tree.indentGuidesStroke', 0.4), light: color_1.Color.transparent('tree.indentGuidesStroke', 0.4), hcDark: color_1.Color.transparent('tree.indentGuidesStroke', 0.4) }, description: 'Tree stroke color for the inactive indentation guides.' }, 
        // Editor Group & Tabs colors should be aligned with https://code.visualstudio.com/api/references/theme-color#editor-groups-tabs
        {
            id: 'editorGroup.border',
            defaults: {
                dark: '#444444',
                light: '#E7E7E7',
                hcDark: 'contrastBorder',
                hcLight: 'contrastBorder'
            },
            description: 'Color to separate multiple editor groups from each other. Editor groups are the containers of editors.'
        }, {
            id: 'editorGroup.dropBackground',
            defaults: {
                dark: color_1.Color.transparent('#53595D', 0.5),
                light: color_1.Color.transparent('#2677CB', 0.18),
                hcLight: color_1.Color.transparent('#0F4A85', 0.50)
            },
            description: 'Background color when dragging editors around. The color should have transparency so that the editor contents can still shine through.'
        }, {
            id: 'editorGroupHeader.tabsBackground',
            defaults: {
                dark: '#252526',
                light: '#F3F3F3',
            },
            description: 'Background color of the editor group title header when tabs are enabled. Editor groups are the containers of editors.'
        }, {
            id: 'editorGroupHeader.tabsBorder',
            defaults: {
                hcDark: 'contrastBorder'
            },
            description: 'Border color of the editor group title header when tabs are enabled. Editor groups are the containers of editors.'
        }, {
            id: 'tab.activeBackground',
            defaults: {
                dark: 'editor.background',
                light: 'editor.background',
                hcDark: 'editor.background',
                hcLight: 'editor.background'
            },
            description: 'Active tab background color. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups.'
        }, {
            id: 'tab.unfocusedActiveBackground',
            defaults: {
                dark: 'tab.activeBackground',
                light: 'tab.activeBackground',
                hcDark: 'tab.activeBackground',
                hcLight: 'tab.activeBackground'
            },
            description: 'Active tab background color in an unfocused group. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups.'
        }, {
            id: 'tab.inactiveBackground',
            defaults: {
                dark: '#2D2D2D',
                light: '#ECECEC'
            },
            description: 'Inactive tab background color. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups.'
        }, {
            id: 'tab.activeForeground',
            defaults: {
                dark: color_1.Color.white,
                light: '#333333',
                hcDark: color_1.Color.white,
                hcLight: '#292929'
            }, description: 'Active tab foreground color in an active group. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups.'
        }, {
            id: 'tab.inactiveForeground', defaults: {
                dark: color_1.Color.transparent('tab.activeForeground', 0.5),
                light: color_1.Color.transparent('tab.activeForeground', 0.7),
                hcDark: color_1.Color.white,
                hcLight: '#292929'
            }, description: 'Inactive tab foreground color in an active group. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups.'
        }, {
            id: 'tab.unfocusedActiveForeground', defaults: {
                dark: color_1.Color.transparent('tab.activeForeground', 0.5),
                light: color_1.Color.transparent('tab.activeForeground', 0.7),
                hcDark: color_1.Color.white,
                hcLight: '#292929'
            }, description: 'Active tab foreground color in an unfocused group. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups.'
        }, {
            id: 'tab.unfocusedInactiveForeground', defaults: {
                dark: color_1.Color.transparent('tab.inactiveForeground', 0.5),
                light: color_1.Color.transparent('tab.inactiveForeground', 0.5),
                hcDark: color_1.Color.white,
                hcLight: '#292929'
            }, description: 'Inactive tab foreground color in an unfocused group. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups.'
        }, {
            id: 'tab.border', defaults: {
                dark: '#252526',
                light: '#F3F3F3',
                hcDark: 'contrastBorder',
                hcLight: 'contrastBorder'
            }, description: 'Border to separate tabs from each other. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups.'
        }, {
            id: 'tab.activeBorder',
            description: 'Border on the bottom of an active tab. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups.'
        }, {
            id: 'tab.unfocusedActiveBorder',
            defaults: {
                dark: color_1.Color.transparent('tab.activeBorder', 0.5),
                light: color_1.Color.transparent('tab.activeBorder', 0.7)
            },
            description: 'Border on the bottom of an active tab in an unfocused group. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups.'
        }, {
            id: 'tab.activeBorderTop',
            defaults: {
                hcLight: '#B5200D'
            },
            description: 'Border to the top of an active tab. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups.'
        }, {
            id: 'tab.unfocusedActiveBorderTop', defaults: {
                dark: color_1.Color.transparent('tab.activeBorderTop', 0.5),
                light: color_1.Color.transparent('tab.activeBorderTop', 0.7),
                hcLight: '#B5200D'
            }, description: 'Border to the top of an active tab in an unfocused group. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups.'
        }, {
            id: 'tab.hoverBackground',
            description: 'Tab background color when hovering. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups.'
        }, {
            id: 'tab.unfocusedHoverBackground', defaults: {
                dark: color_1.Color.transparent('tab.hoverBackground', 0.5),
                light: color_1.Color.transparent('tab.hoverBackground', 0.7)
            }, description: 'Tab background color in an unfocused group when hovering. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups.'
        }, {
            id: 'tab.hoverBorder',
            description: 'Border to highlight tabs when hovering. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups.'
        }, {
            id: 'tab.unfocusedHoverBorder', defaults: {
                dark: color_1.Color.transparent('tab.hoverBorder', 0.5),
                light: color_1.Color.transparent('tab.hoverBorder', 0.7),
                hcLight: 'contrastBorder'
            }, description: 'Border to highlight tabs in an unfocused group when hovering. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups.'
        }, {
            id: 'tab.activeModifiedBorder', defaults: {
                dark: '#3399CC',
                light: '#33AAEE',
                hcLight: 'contrastBorder'
            }, description: 'Border on the top of modified (dirty) active tabs in an active group. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups.'
        }, {
            id: 'tab.inactiveModifiedBorder', defaults: {
                dark: color_1.Color.transparent('tab.activeModifiedBorder', 0.5),
                light: color_1.Color.transparent('tab.activeModifiedBorder', 0.5),
                hcDark: color_1.Color.white,
                hcLight: 'contrastBorder'
            }, description: 'Border on the top of modified (dirty) inactive tabs in an active group. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups.'
        }, {
            id: 'tab.unfocusedActiveModifiedBorder', defaults: {
                dark: color_1.Color.transparent('tab.activeModifiedBorder', 0.5),
                light: color_1.Color.transparent('tab.activeModifiedBorder', 0.7),
                hcDark: color_1.Color.white,
                hcLight: 'contrastBorder'
            }, description: 'Border on the top of modified (dirty) active tabs in an unfocused group. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups.'
        }, {
            id: 'tab.unfocusedInactiveModifiedBorder', defaults: {
                dark: color_1.Color.transparent('tab.inactiveModifiedBorder', 0.5),
                light: color_1.Color.transparent('tab.inactiveModifiedBorder', 0.5),
                hcDark: color_1.Color.white,
                hcLight: 'contrastBorder'
            }, description: 'Border on the top of modified (dirty) inactive tabs in an unfocused group. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups.'
        }, 
        // Status bar colors should be aligned with https://code.visualstudio.com/api/references/theme-color#status-bar-colors
        // Not yet supported:
        // statusBarItem.prominentForeground, statusBarItem.prominentBackground, statusBarItem.prominentHoverBackground
        {
            id: 'statusBar.foreground', defaults: {
                dark: '#FFFFFF',
                light: '#FFFFFF',
                hcDark: '#FFFFFF',
                hcLight: 'editor.foreground'
            }, description: 'Status bar foreground color when a workspace is opened. The status bar is shown in the bottom of the window.'
        }, {
            id: 'statusBar.background', defaults: {
                dark: '#007ACC',
                light: '#007ACC'
            }, description: 'Status bar background color when a workspace is opened. The status bar is shown in the bottom of the window.'
        }, {
            id: 'statusBar.noFolderForeground', defaults: {
                dark: 'statusBar.foreground',
                light: 'statusBar.foreground',
                hcDark: 'statusBar.foreground',
                hcLight: 'statusBar.foreground'
            }, description: 'Status bar foreground color when no folder is opened. The status bar is shown in the bottom of the window.'
        }, {
            id: 'statusBar.noFolderBackground', defaults: {
                dark: '#68217A',
                light: '#68217A'
            }, description: 'Status bar background color when no folder is opened. The status bar is shown in the bottom of the window.'
        }, {
            id: 'statusBar.border', defaults: {
                hcDark: 'contrastBorder',
                hcLight: 'contrastBorder'
            }, description: 'Status bar border color separating to the sidebar and editor. The status bar is shown in the bottom of the window.'
        }, {
            id: 'statusBar.noFolderBorder', defaults: {
                dark: 'statusBar.border',
                light: 'statusBar.border',
                hcDark: 'statusBar.border',
                hcLight: 'statusBar.border'
            }, description: 'Status bar border color separating to the sidebar and editor when no folder is opened. The status bar is shown in the bottom of the window.'
        }, {
            id: 'statusBarItem.activeBackground', defaults: {
                dark: color_1.Color.rgba(255, 255, 255, 0.18),
                light: color_1.Color.rgba(255, 255, 255, 0.18),
                hcDark: color_1.Color.rgba(255, 255, 255, 0.18),
                hcLight: color_1.Color.rgba(0, 0, 0, 0.18)
            }, description: 'Status bar item background color when clicking. The status bar is shown in the bottom of the window.'
        }, {
            id: 'statusBarItem.hoverBackground', defaults: {
                dark: color_1.Color.rgba(255, 255, 255, 0.12),
                light: color_1.Color.rgba(255, 255, 255, 0.12),
                hcDark: color_1.Color.rgba(255, 255, 255, 0.12),
                hcLight: color_1.Color.rgba(0, 0, 0, 0.12)
            }, description: 'Status bar item background color when hovering. The status bar is shown in the bottom of the window.'
        }, {
            id: 'statusBarItem.errorBackground', defaults: {
                dark: color_1.Color.darken('errorBackground', 0.4),
                light: color_1.Color.darken('errorBackground', 0.4),
                hcDark: undefined,
                hcLight: '#B5200D'
            }, description: 'Status bar error items background color. Error items stand out from other status bar entries to indicate error conditions. The status bar is shown in the bottom of the window.'
        }, {
            id: 'statusBarItem.errorForeground', defaults: {
                dark: color_1.Color.white,
                light: color_1.Color.white,
                hcDark: color_1.Color.white,
                hcLight: color_1.Color.white
            }, description: 'Status bar error items foreground color. Error items stand out from other status bar entries to indicate error conditions. The status bar is shown in the bottom of the window.'
        }, {
            id: 'statusBarItem.warningBackground', defaults: {
                dark: color_1.Color.darken('warningBackground', 0.4),
                light: color_1.Color.darken('warningBackground', 0.4),
                hcDark: undefined,
                hcLight: '#895503'
            }, description: 'Status bar warning items background color. Warning items stand out from other status bar entries to indicate warning conditions. The status bar is shown in the bottom of the window.'
        }, {
            id: 'statusBarItem.warningForeground', defaults: {
                dark: color_1.Color.white,
                light: color_1.Color.white,
                hcDark: color_1.Color.white,
                hcLight: color_1.Color.white
            }, description: 'Status bar warning items foreground color. Warning items stand out from other status bar entries to indicate warning conditions. The status bar is shown in the bottom of the window.'
        }, 
        // Quickinput colors should be aligned with https://code.visualstudio.com/api/references/theme-color#quick-picker
        // if not yet contributed by Monaco, check runtime css variables to learn.
        {
            id: 'quickInput.background', defaults: {
                dark: 'editorWidget.background',
                light: 'editorWidget.background',
                hcDark: 'editorWidget.background',
                hcLight: 'editorWidget.background'
            }, description: 'Quick Input background color. The Quick Input widget is the container for views like the color theme picker.'
        }, {
            id: 'quickInput.foreground', defaults: {
                dark: 'editorWidget.foreground',
                light: 'editorWidget.foreground',
                hcDark: 'editorWidget.foreground',
                hcLight: 'editorWidget.foreground'
            }, description: 'Quick Input foreground color. The Quick Input widget is the container for views like the color theme picker.'
        }, {
            id: 'quickInput.list.focusBackground', defaults: {
                dark: undefined,
                light: undefined,
                hcDark: undefined,
                hcLight: undefined
            }, description: 'quickInput.list.focusBackground deprecation. Please use quickInputList.focusBackground instead'
        }, {
            id: 'quickInputList.focusForeground', defaults: {
                dark: 'list.activeSelectionForeground',
                light: 'list.activeSelectionForeground',
                hcDark: 'list.activeSelectionForeground',
                hcLight: 'list.activeSelectionForeground'
            }, description: 'Quick picker foreground color for the focused item'
        }, {
            id: 'quickInputList.focusBackground', defaults: {
                dark: 'list.activeSelectionBackground',
                light: 'list.activeSelectionBackground',
                hcDark: undefined
            }, description: 'Quick picker background color for the focused item.'
        }, 
        // Panel colors should be aligned with https://code.visualstudio.com/api/references/theme-color#panel-colors
        {
            id: 'panel.background', defaults: {
                dark: 'editor.background', light: 'editor.background', hcDark: 'editor.background', hcLight: 'editor.background'
            }, description: 'Panel background color. Panels are shown below the editor area and contain views like output and integrated terminal.'
        }, {
            id: 'panel.border', defaults: {
                dark: color_1.Color.transparent('#808080', 0.35), light: color_1.Color.transparent('#808080', 0.35), hcDark: 'contrastBorder', hcLight: 'contrastBorder'
            }, description: 'Panel border color to separate the panel from the editor. Panels are shown below the editor area and contain views like output and integrated terminal.'
        }, {
            id: 'panel.dropBackground', defaults: {
                dark: color_1.Color.rgba(255, 255, 255, 0.12), light: color_1.Color.transparent('#2677CB', 0.18), hcDark: color_1.Color.rgba(255, 255, 255, 0.12)
            }, description: 'Drag and drop feedback color for the panel title items. The color should have transparency so that the panel entries can still shine through. Panels are shown below the editor area and contain views like output and integrated terminal.'
        }, {
            id: 'panelTitle.activeForeground', defaults: {
                dark: '#E7E7E7', light: '#424242', hcDark: color_1.Color.white, hcLight: 'editor.foreground'
            }, description: 'Title color for the active panel. Panels are shown below the editor area and contain views like output and integrated terminal.'
        }, {
            id: 'panelTitle.inactiveForeground', defaults: {
                dark: color_1.Color.transparent('panelTitle.activeForeground', 0.6), light: color_1.Color.transparent('panelTitle.activeForeground', 0.75), hcDark: color_1.Color.white, hcLight: 'editor.foreground'
            }, description: 'Title color for the inactive panel. Panels are shown below the editor area and contain views like output and integrated terminal.'
        }, {
            id: 'panelTitle.activeBorder', defaults: {
                dark: 'panelTitle.activeForeground', light: 'panelTitle.activeForeground', hcDark: 'contrastBorder', hcLight: '#B5200D'
            }, description: 'Border color for the active panel title. Panels are shown below the editor area and contain views like output and integrated terminal.'
        }, {
            id: 'panelInput.border', defaults: { light: '#ddd' },
            description: 'Input box border for inputs in the panel.'
        }, {
            id: 'imagePreview.border', defaults: {
                dark: color_1.Color.transparent('#808080', 0.35), light: color_1.Color.transparent('#808080', 0.35), hcDark: 'contrastBorder', hcLight: 'contrastBorder'
            }, description: 'Border color for image in image preview.'
        }, 
        // Title Bar colors should be aligned with https://code.visualstudio.com/api/references/theme-color#title-bar-colors
        {
            id: 'titleBar.activeForeground', defaults: {
                dark: '#CCCCCC',
                light: '#333333',
                hcDark: '#FFFFFF',
                hcLight: '#292929'
            }, description: 'Title bar foreground when the window is active. Note that this color is currently only supported on macOS.'
        }, {
            id: 'titleBar.inactiveForeground', defaults: {
                dark: color_1.Color.transparent('titleBar.activeForeground', 0.6),
                light: color_1.Color.transparent('titleBar.activeForeground', 0.6),
                hcLight: '#292929'
            }, description: 'Title bar foreground when the window is inactive. Note that this color is currently only supported on macOS.'
        }, {
            id: 'titleBar.activeBackground', defaults: {
                dark: '#3C3C3C',
                light: '#DDDDDD',
                hcDark: '#000000',
                hcLight: '#FFFFFF'
            }, description: 'Title bar background when the window is active. Note that this color is currently only supported on macOS.'
        }, {
            id: 'titleBar.inactiveBackground', defaults: {
                dark: color_1.Color.transparent('titleBar.activeBackground', 0.6),
                light: color_1.Color.transparent('titleBar.activeBackground', 0.6)
            }, description: 'Title bar background when the window is inactive. Note that this color is currently only supported on macOS.'
        }, {
            id: 'titleBar.border', defaults: {
                hcDark: 'contrastBorder',
                hcLight: 'contrastBorder'
            }, description: 'Title bar border color. Note that this color is currently only supported on macOS.'
        }, 
        // Menu Bar colors should be aligned with https://code.visualstudio.com/api/references/theme-color#menu-bar-colors
        {
            id: 'menubar.selectionForeground', defaults: {
                dark: 'titleBar.activeForeground',
                light: 'titleBar.activeForeground',
                hcDark: 'titleBar.activeForeground',
                hcLight: 'titleBar.activeForeground'
            }, description: 'Foreground color of the selected menu item in the menubar.'
        }, {
            id: 'menubar.selectionBackground', defaults: {
                dark: 'toolbar.hoverBackground',
                light: 'toolbar.hoverBackground'
            }, description: 'Background color of the selected menu item in the menubar.'
        }, {
            id: 'menubar.selectionBorder', defaults: {
                hcDark: 'activeContrastBorder', hcLight: 'activeContrastBorder'
            }, description: 'Border color of the selected menu item in the menubar.'
        }, {
            id: 'menu.border', defaults: {
                hcDark: 'contrastBorder', hcLight: 'contrastBorder'
            }, description: 'Border color of menus.'
        }, {
            id: 'menu.foreground', defaults: {
                dark: 'dropdown.foreground', light: 'foreground', hcDark: 'dropdown.foreground', hcLight: 'dropdown.foreground'
            },
            description: 'Foreground color of menu items.'
        }, {
            id: 'menu.background', defaults: {
                dark: 'dropdown.background', light: 'dropdown.background', hcDark: 'dropdown.background', hcLight: 'dropdown.background'
            }, description: 'Background color of menu items.'
        }, {
            id: 'menu.selectionForeground', defaults: {
                dark: 'list.activeSelectionForeground', light: 'list.activeSelectionForeground', hcDark: 'list.activeSelectionForeground', hcLight: 'list.activeSelectionForeground'
            }, description: 'Foreground color of the selected menu item in menus.'
        }, {
            id: 'menu.selectionBackground', defaults: {
                dark: 'list.activeSelectionBackground', light: 'list.activeSelectionBackground', hcDark: 'list.activeSelectionBackground', hcLight: 'list.activeSelectionBackground'
            },
            description: 'Background color of the selected menu item in menus.'
        }, {
            id: 'menu.selectionBorder', defaults: {
                hcDark: 'activeContrastBorder', hcLight: 'activeContrastBorder'
            }, description: 'Border color of the selected menu item in menus.'
        }, {
            id: 'menu.separatorBackground', defaults: {
                dark: '#BBBBBB', light: '#888888', hcDark: 'contrastBorder', hcLight: 'contrastBorder'
            },
            description: 'Color of a separator menu item in menus.'
        }, 
        // Welcome Page colors should be aligned with https://code.visualstudio.com/api/references/theme-color#welcome-page
        { id: 'welcomePage.background', description: 'Background color for the Welcome page.' }, { id: 'welcomePage.buttonBackground', defaults: { dark: color_1.Color.rgba(0, 0, 0, .2), light: color_1.Color.rgba(0, 0, 0, .04), hcDark: color_1.Color.black, hcLight: color_1.Color.white }, description: 'Background color for the buttons on the Welcome page.' }, { id: 'welcomePage.buttonHoverBackground', defaults: { dark: color_1.Color.rgba(200, 235, 255, .072), light: color_1.Color.rgba(0, 0, 0, .10) }, description: 'Hover background color for the buttons on the Welcome page.' }, { id: 'walkThrough.embeddedEditorBackground', defaults: { dark: color_1.Color.rgba(0, 0, 0, .4), light: '#f4f4f4' }, description: 'Background color for the embedded editors on the Interactive Playground.' }, 
        // Dropdown colors should be aligned with https://code.visualstudio.com/api/references/theme-color#dropdown-control
        {
            id: 'dropdown.background', defaults: {
                light: color_1.Color.white,
                dark: '#3C3C3C',
                hcDark: color_1.Color.black,
                hcLight: color_1.Color.white
            }, description: 'Dropdown background.'
        }, {
            id: 'dropdown.listBackground', defaults: {
                hcDark: color_1.Color.black,
                hcLight: color_1.Color.white
            }, description: 'Dropdown list background.'
        }, {
            id: 'dropdown.foreground', defaults: {
                dark: '#F0F0F0',
                hcDark: color_1.Color.white,
                hcLight: 'foreground'
            }, description: 'Dropdown foreground.'
        }, {
            id: 'dropdown.border', defaults: {
                light: '#CECECE',
                dark: 'dropdown.background',
                hcDark: 'contrastBorder',
                hcLight: 'contrastBorder'
            }, description: 'Dropdown border.'
        }, 
        // Settings Editor colors should be aligned with https://code.visualstudio.com/api/references/theme-color#settings-editor-colors
        {
            id: 'settings.headerForeground', defaults: {
                light: '#444444', dark: '#e7e7e7', hcDark: '#ffffff', hcLight: '#292929'
            }, description: 'The foreground color for a section header or active title.'
        }, {
            id: 'settings.modifiedItemIndicator', defaults: {
                light: color_1.Color.rgba(102, 175, 224),
                dark: color_1.Color.rgba(12, 125, 157),
                hcDark: color_1.Color.rgba(0, 73, 122),
                hcLight: color_1.Color.rgba(102, 175, 224)
            }, description: 'The color of the modified setting indicator.'
        }, {
            id: 'settings.dropdownBackground', defaults: {
                dark: 'dropdown.background', light: 'dropdown.background', hcDark: 'dropdown.background', hcLight: 'dropdown.background'
            },
            description: 'Settings editor dropdown background.'
        }, {
            id: 'settings.dropdownForeground', defaults: {
                dark: 'dropdown.foreground', light: 'dropdown.foreground', hcDark: 'dropdown.foreground', hcLight: 'dropdown.foreground'
            }, description: 'Settings editor dropdown foreground.'
        }, {
            id: 'settings.dropdownBorder', defaults: {
                dark: 'dropdown.border', light: 'dropdown.border', hcDark: 'dropdown.border', hcLight: 'dropdown.border'
            }, description: 'Settings editor dropdown border.'
        }, {
            id: 'settings.dropdownListBorder', defaults: {
                dark: 'editorWidget.border', light: 'editorWidget.border', hcDark: 'editorWidget.border', hcLight: 'editorWidget.border'
            }, description: 'Settings editor dropdown list border. This surrounds the options and separates the options from the description.'
        }, {
            id: 'settings.checkboxBackground', defaults: {
                dark: 'checkbox.background', light: 'checkbox.background', hcDark: 'checkbox.background', hcLight: 'checkbox.background'
            }, description: 'Settings editor checkbox background.'
        }, {
            id: 'settings.checkboxForeground', defaults: {
                dark: 'checkbox.foreground', light: 'checkbox.foreground', hcDark: 'checkbox.foreground', hcLight: 'checkbox.foreground'
            }, description: 'Settings editor checkbox foreground.'
        }, {
            id: 'settings.checkboxBorder', defaults: {
                dark: 'checkbox.border', light: 'checkbox.border', hcDark: 'checkbox.border', hcLight: 'checkbox.border'
            }, description: 'Settings editor checkbox border.'
        }, {
            id: 'settings.textInputBackground', defaults: {
                dark: 'input.background', light: 'input.background', hcDark: 'input.background', hcLight: 'input.background'
            }, description: 'Settings editor text input box background.'
        }, {
            id: 'settings.textInputForeground', defaults: {
                dark: 'input.foreground', light: 'input.foreground', hcDark: 'input.foreground', hcLight: 'input.foreground'
            }, description: 'Settings editor text input box foreground.'
        }, {
            id: 'settings.textInputBorder', defaults: {
                dark: 'input.border', light: 'input.border', hcDark: 'input.border', hcLight: 'input.background'
            }, description: 'Settings editor text input box border.'
        }, {
            id: 'settings.numberInputBackground', defaults: {
                dark: 'input.background', light: 'input.background', hcDark: 'input.background', hcLight: 'input.background'
            }, description: 'Settings editor number input box background.'
        }, {
            id: 'settings.numberInputForeground', defaults: {
                dark: 'input.foreground', light: 'input.foreground', hcDark: 'input.foreground', hcLight: 'input.foreground'
            }, description: 'Settings editor number input box foreground.'
        }, {
            id: 'settings.numberInputBorder', defaults: {
                dark: 'input.border', light: 'input.border', hcDark: 'input.border', hcLight: 'input.border'
            }, description: 'Settings editor number input box border.'
        }, {
            id: 'settings.focusedRowBackground', defaults: {
                dark: color_1.Color.transparent('#808080', 0.14),
                light: color_1.Color.transparent('#808080', 0.03),
                hcDark: undefined,
                hcLight: undefined
            }, description: 'The background color of a settings row when focused.'
        }, {
            id: 'settings.rowHoverBackground', defaults: {
                dark: color_1.Color.transparent('#808080', 0.07),
                light: color_1.Color.transparent('#808080', 0.05),
                hcDark: undefined,
                hcLight: undefined
            }, description: 'The background color of a settings row when hovered.'
        }, {
            id: 'settings.focusedRowBorder', defaults: {
                dark: color_1.Color.rgba(255, 255, 255, 0.12),
                light: color_1.Color.rgba(0, 0, 0, 0.12),
                hcDark: 'focusBorder',
                hcLight: 'focusBorder'
            }, description: "The color of the row's top and bottom border when the row is focused."
        }, 
        // Toolbar Action colors should be aligned with https://code.visualstudio.com/api/references/theme-color#action-colors
        {
            id: 'toolbar.hoverBackground', defaults: {
                dark: '#5a5d5e50', light: '#b8b8b850', hcDark: undefined, hcLight: undefined
            }, description: 'Toolbar background when hovering over actions using the mouse.'
        }, 
        // Theia Variable colors
        {
            id: 'variable.name.color', defaults: {
                dark: '#C586C0',
                light: '#9B46B0',
                hcDark: '#C586C0'
            },
            description: 'Color of a variable name.'
        }, {
            id: 'variable.value.color', defaults: {
                dark: color_1.Color.rgba(204, 204, 204, 0.6),
                light: color_1.Color.rgba(108, 108, 108, 0.8),
                hcDark: color_1.Color.rgba(204, 204, 204, 0.6)
            },
            description: 'Color of a variable value.'
        }, {
            id: 'variable.number.variable.color', defaults: {
                dark: '#B5CEA8',
                light: '#09885A',
                hcDark: '#B5CEA8'
            },
            description: 'Value color of a number variable'
        }, {
            id: 'variable.boolean.variable.color', defaults: {
                dark: '#4E94CE',
                light: '#0000FF',
                hcDark: '#4E94CE'
            },
            description: 'Value color of a boolean variable'
        }, {
            id: 'variable.string.variable.color', defaults: {
                dark: '#CE9178',
                light: '#A31515',
                hcDark: '#CE9178'
            },
            description: 'Value color of a string variable'
        }, 
        // Theia ANSI colors
        {
            id: 'ansi.black.color', defaults: {
                dark: '#A0A0A0',
                light: color_1.Color.rgba(128, 128, 128),
                hcDark: '#A0A0A0'
            },
            description: 'ANSI black color'
        }, {
            id: 'ansi.red.color', defaults: {
                dark: '#A74747',
                light: '#BE1717',
                hcDark: '#A74747'
            },
            description: 'ANSI red color'
        }, {
            id: 'ansi.green.color', defaults: {
                dark: '#348F34',
                light: '#338A2F',
                hcDark: '#348F34'
            },
            description: 'ANSI green color'
        }, {
            id: 'ansi.yellow.color', defaults: {
                dark: '#5F4C29',
                light: '#BEB817',
                hcDark: '#5F4C29'
            },
            description: 'ANSI yellow color'
        }, {
            id: 'ansi.blue.color', defaults: {
                dark: '#6286BB',
                light: color_1.Color.rgba(0, 0, 139),
                hcDark: '#6286BB'
            },
            description: 'ANSI blue color'
        }, {
            id: 'ansi.magenta.color', defaults: {
                dark: '#914191',
                light: color_1.Color.rgba(139, 0, 139),
                hcDark: '#914191'
            },
            description: 'ANSI magenta color'
        }, {
            id: 'ansi.cyan.color', defaults: {
                dark: '#218D8D',
                light: color_1.Color.rgba(0, 139, 139),
                hcDark: '#218D8D'
            },
            description: 'ANSI cyan color'
        }, {
            id: 'ansi.white.color', defaults: {
                dark: '#707070',
                light: '#BDBDBD',
                hcDark: '#707070'
            },
            description: 'ANSI white color'
        }, 
        // Theia defaults
        // Base
        {
            id: 'errorBackground',
            defaults: {
                dark: 'inputValidation.errorBackground',
                light: 'inputValidation.errorBackground',
                hcDark: 'inputValidation.errorBackground'
            }, description: 'Background color of error widgets (like alerts or notifications).'
        }, {
            id: 'successBackground',
            defaults: {
                dark: 'editorGutter.addedBackground',
                light: 'editorGutter.addedBackground',
                hcDark: 'editorGutter.addedBackground'
            }, description: 'Background color of success widgets (like alerts or notifications).'
        }, {
            id: 'warningBackground',
            defaults: {
                dark: 'editorWarning.foreground',
                light: 'editorWarning.foreground',
                hcDark: 'editorWarning.border'
            }, description: 'Background color of warning widgets (like alerts or notifications).'
        }, {
            id: 'warningForeground',
            defaults: {
                dark: 'inputValidation.warningBackground',
                light: 'inputValidation.warningBackground',
                hcDark: 'inputValidation.warningBackground'
            }, description: 'Foreground color of warning widgets (like alerts or notifications).'
        }, 
        // Statusbar
        {
            id: 'statusBar.offlineBackground',
            defaults: {
                dark: 'editorWarning.foreground',
                light: 'editorWarning.foreground',
                hcDark: 'editorWarning.foreground',
                hcLight: 'editorWarning.foreground'
            }, description: 'Background of hovered statusbar item in case the theia server is offline.'
        }, {
            id: 'statusBar.offlineForeground',
            defaults: {
                dark: 'editor.background',
                light: 'editor.background',
                hcDark: 'editor.background',
                hcLight: 'editor.background'
            }, description: 'Background of hovered statusbar item in case the theia server is offline.'
        }, {
            id: 'statusBarItem.offlineHoverBackground',
            defaults: {
                dark: color_1.Color.lighten('statusBar.offlineBackground', 0.4),
                light: color_1.Color.lighten('statusBar.offlineBackground', 0.4),
                hcDark: color_1.Color.lighten('statusBar.offlineBackground', 0.4),
                hcLight: color_1.Color.lighten('statusBar.offlineBackground', 0.4)
            }, description: 'Background of hovered statusbar item in case the theia server is offline.'
        }, {
            id: 'statusBarItem.offlineActiveBackground',
            defaults: {
                dark: color_1.Color.lighten('statusBar.offlineBackground', 0.6),
                light: color_1.Color.lighten('statusBar.offlineBackground', 0.6),
                hcDark: color_1.Color.lighten('statusBar.offlineBackground', 0.6),
                hcLight: color_1.Color.lighten('statusBar.offlineBackground', 0.6)
            }, description: 'Background of active statusbar item in case the theia server is offline.'
        }, {
            id: 'statusBarItem.remoteBackground',
            defaults: {
                dark: 'activityBarBadge.background',
                light: 'activityBarBadge.background',
                hcDark: 'activityBarBadge.background',
                hcLight: 'activityBarBadge.background'
            }, description: 'Background color for the remote indicator on the status bar.'
        }, {
            id: 'statusBarItem.remoteForeground',
            defaults: {
                dark: 'activityBarBadge.foreground',
                light: 'activityBarBadge.foreground',
                hcDark: 'activityBarBadge.foreground',
                hcLight: 'activityBarBadge.foreground'
            }, description: 'Foreground color for the remote indicator on the status bar.'
        }, 
        // Buttons
        {
            id: 'secondaryButton.foreground',
            defaults: {
                dark: 'dropdown.foreground',
                light: 'dropdown.foreground',
                hcDark: 'dropdown.foreground',
                hcLight: 'dropdown.foreground'
            }, description: 'Foreground color of secondary buttons.'
        }, {
            id: 'secondaryButton.disabledForeground',
            defaults: {
                dark: color_1.Color.transparent('secondaryButton.foreground', 0.5),
                light: color_1.Color.transparent('secondaryButton.foreground', 0.5),
                hcDark: color_1.Color.transparent('secondaryButton.foreground', 0.5),
                hcLight: color_1.Color.transparent('secondaryButton.foreground', 0.5),
            }, description: 'Foreground color of secondary buttons.'
        }, {
            id: 'secondaryButton.background',
            defaults: {
                dark: color_1.Color.lighten('dropdown.background', 0.5),
                light: color_1.Color.lighten('dropdown.background', 0.5)
            }, description: 'Background color of secondary buttons.'
        }, {
            id: 'secondaryButton.hoverBackground',
            defaults: {
                dark: color_1.Color.lighten('secondaryButton.background', 0.2),
                light: color_1.Color.lighten('secondaryButton.background', 0.2)
            }, description: 'Background color when hovering secondary buttons.'
        }, {
            id: 'secondaryButton.disabledBackground',
            defaults: {
                dark: color_1.Color.transparent('secondaryButton.background', 0.6),
                light: color_1.Color.transparent('secondaryButton.background', 0.6)
            }, description: 'Background color when hovering secondary buttons.'
        }, {
            id: 'button.disabledForeground',
            defaults: {
                dark: color_1.Color.transparent('button.foreground', 0.5),
                light: color_1.Color.transparent('button.foreground', 0.5),
                hcDark: color_1.Color.transparent('button.foreground', 0.5)
            }, description: 'Foreground color of secondary buttons.'
        }, {
            id: 'button.disabledBackground',
            defaults: {
                dark: color_1.Color.transparent('button.background', 0.5),
                light: color_1.Color.transparent('button.background', 0.5)
            }, description: 'Background color of secondary buttons.'
        }, {
            id: 'editorGutter.commentRangeForeground',
            defaults: {
                dark: '#c5c5c5',
                light: '#c5c5c5',
                hcDark: color_1.Color.white,
                hcLight: color_1.Color.white
            }, description: 'Editor gutter decoration color for commenting ranges.'
        }, {
            id: 'breadcrumb.foreground',
            defaults: {
                dark: color_1.Color.transparent('foreground', 0.8),
                light: color_1.Color.transparent('foreground', 0.8),
                hcDark: color_1.Color.transparent('foreground', 0.8),
                hcLight: color_1.Color.transparent('foreground', 0.8)
            },
            description: 'Color of breadcrumb item text'
        }, {
            id: 'breadcrumb.background',
            defaults: {
                dark: 'editor.background',
                light: 'editor.background',
                hcDark: 'editor.background',
                hcLight: 'editor.background'
            },
            description: 'Color of breadcrumb item background'
        }, {
            id: 'breadcrumb.focusForeground',
            defaults: {
                dark: color_1.Color.lighten('foreground', 0.1),
                light: color_1.Color.darken('foreground', 0.2),
                hcDark: color_1.Color.lighten('foreground', 0.1),
                hcLight: color_1.Color.lighten('foreground', 0.1)
            },
            description: 'Color of breadcrumb item text when focused'
        }, {
            id: 'breadcrumb.activeSelectionForeground',
            defaults: {
                dark: color_1.Color.lighten('foreground', 0.1),
                light: color_1.Color.darken('foreground', 0.2),
                hcDark: color_1.Color.lighten('foreground', 0.1),
                hcLight: color_1.Color.lighten('foreground', 0.1)
            },
            description: 'Color of selected breadcrumb item'
        }, {
            id: 'breadcrumbPicker.background',
            defaults: {
                dark: 'editorWidget.background',
                light: 'editorWidget.background',
                hcDark: 'editorWidget.background',
                hcLight: 'editorWidget.background'
            },
            description: 'Background color of breadcrumb item picker'
        }, {
            id: 'mainToolbar.background',
            defaults: {
                dark: color_1.Color.lighten('activityBar.background', 0.1),
                light: color_1.Color.darken('activityBar.background', 0.1),
                hcDark: color_1.Color.lighten('activityBar.background', 0.1),
                hcLight: color_1.Color.lighten('activityBar.background', 0.1)
            },
            description: 'Background color of shell\'s global toolbar'
        }, {
            id: 'mainToolbar.foreground', defaults: {
                dark: color_1.Color.darken('activityBar.foreground', 0.1),
                light: color_1.Color.lighten('activityBar.foreground', 0.1),
                hcDark: color_1.Color.lighten('activityBar.foreground', 0.1),
                hcLight: color_1.Color.lighten('activityBar.foreground', 0.1),
            }, description: 'Foreground color of active toolbar item',
        }, {
            id: 'editorHoverWidgetInternalBorder',
            defaults: {
                dark: color_1.Color.transparent('editorHoverWidget.border', 0.5),
                light: color_1.Color.transparent('editorHoverWidget.border', 0.5),
                hcDark: color_1.Color.transparent('editorHoverWidget.border', 0.5),
                hcLight: color_1.Color.transparent('editorHoverWidget.border', 0.5)
            },
            description: 'The border between subelements of a hover widget'
        });
    }
};
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(context_key_service_1.ContextKeyService),
    (0, tslib_1.__metadata)("design:type", Object)
], CommonFrontendContribution.prototype, "contextKeyService", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(resource_context_key_1.ResourceContextKey),
    (0, tslib_1.__metadata)("design:type", resource_context_key_1.ResourceContextKey)
], CommonFrontendContribution.prototype, "resourceContextKey", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(command_1.CommandRegistry),
    (0, tslib_1.__metadata)("design:type", command_1.CommandRegistry)
], CommonFrontendContribution.prototype, "commandRegistry", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(menu_1.MenuModelRegistry),
    (0, tslib_1.__metadata)("design:type", menu_1.MenuModelRegistry)
], CommonFrontendContribution.prototype, "menuRegistry", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(storage_service_1.StorageService),
    (0, tslib_1.__metadata)("design:type", Object)
], CommonFrontendContribution.prototype, "storageService", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(quick_input_1.QuickInputService),
    (0, inversify_1.optional)(),
    (0, tslib_1.__metadata)("design:type", Object)
], CommonFrontendContribution.prototype, "quickInputService", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(icon_theme_service_1.IconThemeService),
    (0, tslib_1.__metadata)("design:type", icon_theme_service_1.IconThemeService)
], CommonFrontendContribution.prototype, "iconThemes", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(theming_1.ThemeService),
    (0, tslib_1.__metadata)("design:type", theming_1.ThemeService)
], CommonFrontendContribution.prototype, "themeService", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(core_preferences_1.CorePreferences),
    (0, tslib_1.__metadata)("design:type", Object)
], CommonFrontendContribution.prototype, "preferences", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(preferences_1.PreferenceService),
    (0, tslib_1.__metadata)("design:type", Object)
], CommonFrontendContribution.prototype, "preferenceService", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(clipboard_service_1.ClipboardService),
    (0, tslib_1.__metadata)("design:type", Object)
], CommonFrontendContribution.prototype, "clipboardService", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(encoding_registry_1.EncodingRegistry),
    (0, tslib_1.__metadata)("design:type", encoding_registry_1.EncodingRegistry)
], CommonFrontendContribution.prototype, "encodingRegistry", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(env_variables_1.EnvVariablesServer),
    (0, tslib_1.__metadata)("design:type", Object)
], CommonFrontendContribution.prototype, "environments", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(authentication_service_1.AuthenticationService),
    (0, tslib_1.__metadata)("design:type", Object)
], CommonFrontendContribution.prototype, "authenticationService", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(window_service_1.WindowService),
    (0, tslib_1.__metadata)("design:type", Object)
], CommonFrontendContribution.prototype, "windowService", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(user_working_directory_provider_1.UserWorkingDirectoryProvider),
    (0, tslib_1.__metadata)("design:type", user_working_directory_provider_1.UserWorkingDirectoryProvider)
], CommonFrontendContribution.prototype, "workingDirProvider", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(language_quick_pick_service_1.LanguageQuickPickService),
    (0, tslib_1.__metadata)("design:type", language_quick_pick_service_1.LanguageQuickPickService)
], CommonFrontendContribution.prototype, "languageQuickPickService", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(common_1.UntitledResourceResolver),
    (0, tslib_1.__metadata)("design:type", common_1.UntitledResourceResolver)
], CommonFrontendContribution.prototype, "untitledResourceResolver", void 0);
CommonFrontendContribution = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)(),
    (0, tslib_1.__param)(0, (0, inversify_1.inject)(application_shell_1.ApplicationShell)),
    (0, tslib_1.__param)(1, (0, inversify_1.inject)(selection_service_1.SelectionService)),
    (0, tslib_1.__param)(2, (0, inversify_1.inject)(message_service_1.MessageService)),
    (0, tslib_1.__param)(3, (0, inversify_1.inject)(opener_service_1.OpenerService)),
    (0, tslib_1.__param)(4, (0, inversify_1.inject)(about_dialog_1.AboutDialog)),
    (0, tslib_1.__param)(5, (0, inversify_1.inject)(localization_1.AsyncLocalizationProvider)),
    (0, tslib_1.__param)(6, (0, inversify_1.inject)(save_resource_service_1.SaveResourceService)),
    (0, tslib_1.__metadata)("design:paramtypes", [application_shell_1.ApplicationShell,
        selection_service_1.SelectionService,
        message_service_1.MessageService, Object, about_dialog_1.AboutDialog, Object, save_resource_service_1.SaveResourceService])
], CommonFrontendContribution);
exports.CommonFrontendContribution = CommonFrontendContribution;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/context-key-service.js":
/*!*************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/context-key-service.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2019 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ContextKeyServiceDummyImpl = exports.ContextKeyService = exports.ContextKey = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/es/inversify.js");
const event_1 = __webpack_require__(/*! ../common/event */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/event.js");
var ContextKey;
(function (ContextKey) {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    ContextKey.None = Object.freeze({
        set: () => { },
        reset: () => { },
        get: () => undefined
    });
})(ContextKey = exports.ContextKey || (exports.ContextKey = {}));
exports.ContextKeyService = Symbol('ContextKeyService');
let ContextKeyServiceDummyImpl = class ContextKeyServiceDummyImpl {
    constructor() {
        this.onDidChangeEmitter = new event_1.Emitter();
        this.onDidChange = this.onDidChangeEmitter.event;
    }
    fireDidChange(event) {
        this.onDidChangeEmitter.fire(event);
    }
    createKey(key, defaultValue) {
        return ContextKey.None;
    }
    /**
     * It should be implemented by an extension, e.g. by the monaco extension.
     */
    match(expression, context) {
        return true;
    }
    /**
     * It should be implemented by an extension, e.g. by the monaco extension.
     */
    parseKeys(expression) {
        return new Set();
    }
    /**
     * Details should be implemented by an extension, e.g. by the monaco extension.
     * Callback must be synchronous.
     */
    with(values, callback) {
        return callback();
    }
    /**
     * Details should implemented by an extension, e.g. by the monaco extension.
     */
    createScoped(target) {
        return this;
    }
    /**
     * Details should be implemented by an extension, e.g. the monaco extension.
     */
    createOverlay(overlay) {
        return this;
    }
    /**
     * Details should be implemented by an extension, e.g. by the monaco extension.
     */
    setContext(key, value) { }
    dispose() { }
};
ContextKeyServiceDummyImpl = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)()
], ContextKeyServiceDummyImpl);
exports.ContextKeyServiceDummyImpl = ContextKeyServiceDummyImpl;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/context-menu-renderer.js":
/*!***************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/context-menu-renderer.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2017 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ContextMenuRenderer = exports.ContextMenuAccess = exports.coordinateFromAnchor = exports.Coordinate = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
/* eslint-disable @typescript-eslint/no-explicit-any */
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/es/inversify.js");
const disposable_1 = __webpack_require__(/*! ../common/disposable */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/disposable.js");
exports.Coordinate = Symbol('Coordinate');
function coordinateFromAnchor(anchor) {
    const { x, y } = anchor instanceof MouseEvent ? { x: anchor.clientX, y: anchor.clientY } : anchor;
    return { x, y };
}
exports.coordinateFromAnchor = coordinateFromAnchor;
class ContextMenuAccess {
    constructor(toClose) {
        this.toDispose = new disposable_1.DisposableCollection();
        this.onDispose = this.toDispose.onDispose;
        this.toDispose.push(toClose);
    }
    get disposed() {
        return this.toDispose.disposed;
    }
    dispose() {
        this.toDispose.dispose();
    }
}
exports.ContextMenuAccess = ContextMenuAccess;
let ContextMenuRenderer = class ContextMenuRenderer {
    constructor() {
        this.toDisposeOnSetCurrent = new disposable_1.DisposableCollection();
    }
    /**
     * Currently opened context menu.
     * Rendering a new context menu will close the current.
     */
    get current() {
        return this._current;
    }
    setCurrent(current) {
        if (this._current === current) {
            return;
        }
        this.toDisposeOnSetCurrent.dispose();
        this._current = current;
        if (current) {
            this.toDisposeOnSetCurrent.push(current.onDispose(() => {
                this._current = undefined;
            }));
            this.toDisposeOnSetCurrent.push(current);
        }
    }
    render(options) {
        const resolvedOptions = this.resolve(options);
        const access = this.doRender(resolvedOptions);
        this.setCurrent(access);
        return access;
    }
    resolve(options) {
        const args = options.args ? options.args.slice() : [];
        if (options.includeAnchorArg !== false) {
            args.push(options.anchor);
        }
        return {
            ...options,
            args
        };
    }
};
ContextMenuRenderer = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)()
], ContextMenuRenderer);
exports.ContextMenuRenderer = ContextMenuRenderer;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/core-preferences.js":
/*!**********************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/core-preferences.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 Google and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.bindCorePreferences = exports.createCorePreferences = exports.CorePreferences = exports.CorePreferenceContribution = exports.corePreferenceSchema = void 0;
const environment_1 = __webpack_require__(/*! @theia/application-package/lib/environment */ "../node_modules/@theia/editor/node_modules/@theia/application-package/lib/environment.js");
const preferences_1 = __webpack_require__(/*! ./preferences */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/preferences/index.js");
const supported_encodings_1 = __webpack_require__(/*! ./supported-encodings */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/supported-encodings.js");
const frontend_application_config_provider_1 = __webpack_require__(/*! ./frontend-application-config-provider */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/frontend-application-config-provider.js");
const os_1 = __webpack_require__(/*! ../common/os */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/os.js");
const nls_1 = __webpack_require__(/*! ../common/nls */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/nls.js");
const application_props_1 = __webpack_require__(/*! @theia/application-package/lib/application-props */ "../node_modules/@theia/editor/node_modules/@theia/application-package/lib/application-props.js");
/* eslint-disable max-len */
const windowTitleDescription = [
    nls_1.nls.localizeByDefault('Controls the window title based on the current context such as the opened workspace or active editor. Variables are substituted based on the context:'),
    nls_1.nls.localizeByDefault('`${activeEditorShort}`: the file name (e.g. myFile.txt).'),
    nls_1.nls.localizeByDefault('`${activeEditorMedium}`: the path of the file relative to the workspace folder (e.g. myFolder/myFileFolder/myFile.txt).'),
    nls_1.nls.localizeByDefault('`${activeEditorLong}`: the full path of the file (e.g. /Users/Development/myFolder/myFileFolder/myFile.txt).'),
    nls_1.nls.localizeByDefault('`${activeFolderShort}`: the name of the folder the file is contained in (e.g. myFileFolder).'),
    nls_1.nls.localizeByDefault('`${activeFolderMedium}`: the path of the folder the file is contained in, relative to the workspace folder (e.g. myFolder/myFileFolder).'),
    nls_1.nls.localizeByDefault('`${activeFolderLong}`: the full path of the folder the file is contained in (e.g. /Users/Development/myFolder/myFileFolder).'),
    nls_1.nls.localizeByDefault('`${folderName}`: name of the workspace folder the file is contained in (e.g. myFolder).'),
    nls_1.nls.localizeByDefault('`${folderPath}`: file path of the workspace folder the file is contained in (e.g. /Users/Development/myFolder).'),
    nls_1.nls.localizeByDefault('`${rootName}`: name of the workspace with optional remote name and workspace indicator if applicable (e.g. myFolder, myRemoteFolder [SSH] or myWorkspace (Workspace)).'),
    nls_1.nls.localizeByDefault('`${rootPath}`: file path of the opened workspace or folder (e.g. /Users/Development/myWorkspace).'),
    nls_1.nls.localizeByDefault('`${appName}`: e.g. VS Code.'),
    nls_1.nls.localizeByDefault('`${remoteName}`: e.g. SSH'),
    nls_1.nls.localizeByDefault('`${dirty}`: an indicator for when the active editor has unsaved changes.'),
    nls_1.nls.localizeByDefault('`${separator}`: a conditional separator (" - ") that only shows when surrounded by variables with values or static text.')
].join('\n- ');
exports.corePreferenceSchema = {
    'type': 'object',
    properties: {
        'application.confirmExit': {
            type: 'string',
            enum: [
                'never',
                'ifRequired',
                'always',
            ],
            default: 'ifRequired',
            description: nls_1.nls.localizeByDefault('Controls whether to show a confirmation dialog before closing the browser tab or window. Note that even if enabled, browsers may still decide to close a tab or window without confirmation and that this setting is only a hint that may not work in all cases.'),
        },
        'breadcrumbs.enabled': {
            'type': 'boolean',
            'default': true,
            'description': nls_1.nls.localizeByDefault('Enable/disable navigation breadcrumbs.'),
            'scope': 'application'
        },
        'files.encoding': {
            'type': 'string',
            'enum': Object.keys(supported_encodings_1.SUPPORTED_ENCODINGS),
            'default': 'utf8',
            'description': nls_1.nls.localizeByDefault('The default character set encoding to use when reading and writing files. This setting can also be configured per language.'),
            'scope': 'language-overridable',
            'enumDescriptions': Object.keys(supported_encodings_1.SUPPORTED_ENCODINGS).map(key => supported_encodings_1.SUPPORTED_ENCODINGS[key].labelLong),
            'included': Object.keys(supported_encodings_1.SUPPORTED_ENCODINGS).length > 1
        },
        'keyboard.dispatch': {
            type: 'string',
            enum: [
                'code',
                'keyCode',
            ],
            default: 'code',
            markdownDescription: nls_1.nls.localizeByDefault('Controls the dispatching logic for key presses to use either `code` (recommended) or `keyCode`.')
        },
        'window.tabbar.enhancedPreview': {
            type: 'string',
            enum: ['classic', 'enhanced', 'visual'],
            markdownEnumDescriptions: [
                nls_1.nls.localize('theia/core/enhancedPreview/classic', 'Display a simple preview of the tab with basic information.'),
                nls_1.nls.localize('theia/core/enhancedPreview/enhanced', 'Display an enhanced preview of the tab with additional information.'),
                nls_1.nls.localize('theia/core/enhancedPreview/visual', 'Display a visual preview of the tab.'),
            ],
            default: 'classic',
            description: nls_1.nls.localize('theia/core/enhancedPreview', 'Controls what information about the tab should be displayed in horizontal tab bars, when hovering.')
        },
        'window.menuBarVisibility': {
            type: 'string',
            enum: ['classic', 'visible', 'hidden', 'compact'],
            markdownEnumDescriptions: [
                nls_1.nls.localizeByDefault('Menu is displayed at the top of the window and only hidden in full screen mode.'),
                nls_1.nls.localizeByDefault('Menu is always visible at the top of the window even in full screen mode.'),
                nls_1.nls.localizeByDefault('Menu is always hidden.'),
                nls_1.nls.localizeByDefault('Menu is displayed as a compact button in the side bar. This value is ignored when {0} is {1}.', '`#window.titleBarStyle#`', '`native`')
            ],
            default: 'classic',
            scope: 'application',
            markdownDescription: nls_1.nls.localizeByDefault("Control the visibility of the menu bar. A setting of 'toggle' means that the menu bar is hidden and a single press of the Alt key will show it. A setting of 'compact' will move the menu into the side bar."),
            included: !(os_1.isOSX && environment_1.environment.electron.is())
        },
        'window.title': {
            type: 'string',
            default: os_1.isOSX
                ? '${activeEditorShort}${separator}${rootName}'
                : '${dirty} ${activeEditorShort}${separator}${rootName}${separator}${appName}',
            scope: 'application',
            markdownDescription: windowTitleDescription
        },
        'window.titleSeparator': {
            type: 'string',
            default: ' - ',
            scope: 'application',
            markdownDescription: nls_1.nls.localizeByDefault('Separator used by {0}.', '`#window.title#`')
        },
        'window.secondaryWindowPlacement': {
            type: 'string',
            enum: ['originalSize', 'halfWidth', 'fullSize'],
            enumDescriptions: [
                nls_1.nls.localize('theia/core/secondaryWindow/originalSize', 'The position and size of the extracted widget will be the same as the original widget.'),
                nls_1.nls.localize('theia/core/secondaryWindow/halfWidth', 'The position and size of the extracted widget will be half the width of the running Theia application.'),
                nls_1.nls.localize('theia/core/secondaryWindow/fullSize', 'The position and size of the extracted widget will be the same as the running Theia application.'),
            ],
            default: 'originalSize',
            description: nls_1.nls.localize('theia/core/secondaryWindow/description', 'Sets the initial position and size of the extracted secondary window.'),
        },
        'window.secondaryWindowAlwaysOnTop': {
            type: 'boolean',
            default: false,
            description: nls_1.nls.localize('theia/core/secondaryWindow/alwaysOnTop', 'When enabled, the secondary window stays above all other windows, including those of different applications.'),
        },
        'http.proxy': {
            type: 'string',
            pattern: '^https?://([^:]*(:[^@]*)?@)?([^:]+|\\[[:0-9a-fA-F]+\\])(:\\d+)?/?$|^$',
            markdownDescription: nls_1.nls.localizeByDefault('The proxy setting to use. If not set, will be inherited from the `http_proxy` and `https_proxy` environment variables.'),
            scope: 'application'
        },
        'http.proxyStrictSSL': {
            type: 'boolean',
            default: true,
            description: nls_1.nls.localizeByDefault('Controls whether the proxy server certificate should be verified against the list of supplied CAs.'),
            scope: 'application'
        },
        'http.proxyAuthorization': {
            type: 'string',
            markdownDescription: nls_1.nls.localizeByDefault('The value to send as the `Proxy-Authorization` header for every network request.'),
            scope: 'application'
        },
        'http.proxySupport': {
            type: 'string',
            enum: ['off', 'on', 'fallback', 'override'],
            enumDescriptions: [
                nls_1.nls.localizeByDefault('Disable proxy support for extensions.'),
                nls_1.nls.localizeByDefault('Enable proxy support for extensions.'),
                nls_1.nls.localizeByDefault('Enable proxy support for extensions, fall back to request options, when no proxy found.'),
                nls_1.nls.localizeByDefault('Enable proxy support for extensions, override request options.'),
            ],
            default: 'override',
            description: nls_1.nls.localizeByDefault('Use the proxy support for extensions.'),
            scope: 'application'
        },
        'http.systemCertificates': {
            type: 'boolean',
            default: true,
            description: nls_1.nls.localizeByDefault('Controls whether CA certificates should be loaded from the OS. (On Windows and macOS, a reload of the window is required after turning this off.)'),
            scope: 'application'
        },
        'workbench.list.openMode': {
            type: 'string',
            enum: [
                'singleClick',
                'doubleClick'
            ],
            default: 'singleClick',
            description: nls_1.nls.localizeByDefault('Controls how to open items in trees and lists using the mouse (if supported). Note that some trees and lists might choose to ignore this setting if it is not applicable.')
        },
        'workbench.editor.highlightModifiedTabs': {
            'type': 'boolean',
            'markdownDescription': nls_1.nls.localize('theia/core/highlightModifiedTabs', 'Controls whether a top border is drawn on modified (dirty) editor tabs or not.'),
            'default': false
        },
        'workbench.editor.closeOnFileDelete': {
            'type': 'boolean',
            'description': nls_1.nls.localizeByDefault('Controls whether editors showing a file that was opened during the session should close automatically when getting deleted or renamed by some other process. Disabling this will keep the editor open  on such an event. Note that deleting from within the application will always close the editor and that editors with unsaved changes will never close to preserve your data.'),
            'default': false
        },
        'workbench.editor.mouseBackForwardToNavigate': {
            'type': 'boolean',
            'description': nls_1.nls.localizeByDefault("Enables the use of mouse buttons four and five for commands 'Go Back' and 'Go Forward'."),
            'default': true
        },
        'workbench.editor.revealIfOpen': {
            'type': 'boolean',
            'description': nls_1.nls.localizeByDefault('Controls whether an editor is revealed in any of the visible groups if opened. If disabled, an editor will prefer to open in the currently active editor group. If enabled, an already opened editor will be revealed instead of opened again in the currently active editor group. Note that there are some cases where this setting is ignored, such as when forcing an editor to open in a specific group or to the side of the currently active group.'),
            'default': false
        },
        'workbench.editor.decorations.badges': {
            'type': 'boolean',
            'description': nls_1.nls.localizeByDefault('Controls whether editor file decorations should use badges.'),
            'default': true
        },
        'workbench.commandPalette.history': {
            type: 'number',
            default: 50,
            minimum: 0,
            description: nls_1.nls.localizeByDefault('Controls the number of recently used commands to keep in history for the command palette. Set to 0 to disable command history.')
        },
        'workbench.colorTheme': {
            type: 'string',
            enum: ['dark', 'light', 'hc-theia'],
            enumItemLabels: ['Dark (Theia)', 'Light (Theia)', 'High Contrast (Theia)'],
            default: application_props_1.DefaultTheme.defaultForOSTheme(frontend_application_config_provider_1.FrontendApplicationConfigProvider.get().defaultTheme),
            description: nls_1.nls.localizeByDefault('Specifies the color theme used in the workbench.')
        },
        'workbench.iconTheme': {
            type: ['string'],
            enum: ['none', 'theia-file-icons'],
            enumItemLabels: [nls_1.nls.localizeByDefault('None'), 'File Icons (Theia)'],
            default: frontend_application_config_provider_1.FrontendApplicationConfigProvider.get().defaultIconTheme,
            description: nls_1.nls.localizeByDefault("Specifies the file icon theme used in the workbench or 'null' to not show any file icons.")
        },
        'workbench.silentNotifications': {
            type: 'boolean',
            default: false,
            description: nls_1.nls.localize('theia/core/silentNotifications', 'Controls whether to suppress notification popups.')
        },
        'workbench.statusBar.visible': {
            type: 'boolean',
            default: true,
            description: nls_1.nls.localizeByDefault('Controls the visibility of the status bar at the bottom of the workbench.')
        },
        'workbench.tree.renderIndentGuides': {
            type: 'string',
            enum: ['onHover', 'none', 'always'],
            default: 'onHover',
            description: nls_1.nls.localizeByDefault('Controls whether the tree should render indent guides.')
        },
        'workbench.hover.delay': {
            type: 'number',
            default: os_1.isOSX ? 1500 : 500,
            description: nls_1.nls.localizeByDefault('Controls the delay in milliseconds after which the hover is shown.')
        },
        'workbench.sash.hoverDelay': {
            type: 'number',
            default: 300,
            minimum: 0,
            maximum: 2000,
            description: nls_1.nls.localizeByDefault('Controls the hover feedback delay in milliseconds of the dragging area in between views/editors.')
        },
        'workbench.sash.size': {
            type: 'number',
            default: 4,
            minimum: 1,
            maximum: 20,
            description: nls_1.nls.localizeByDefault('Controls the feedback area size in pixels of the dragging area in between views/editors. Set it to a larger value if you feel it\'s hard to resize views using the mouse.')
        },
        'workbench.tab.maximize': {
            type: 'boolean',
            default: false,
            description: nls_1.nls.localize('theia/core/tabMaximize', 'Controls whether to maximize tabs on double click.')
        },
        'workbench.tab.shrinkToFit.enabled': {
            type: 'boolean',
            default: false,
            description: nls_1.nls.localize('theia/core/tabShrinkToFit', 'Shrink tabs to fit available space.')
        },
        'workbench.tab.shrinkToFit.minimumSize': {
            type: 'number',
            default: 50,
            minimum: 10,
            description: nls_1.nls.localize('theia/core/tabMinimumSize', 'Specifies the minimum size for tabs.')
        },
        'workbench.tab.shrinkToFit.defaultSize': {
            type: 'number',
            default: 200,
            minimum: 10,
            description: nls_1.nls.localize('theia/core/tabDefaultSize', 'Specifies the default size for tabs.')
        }
    }
};
exports.CorePreferenceContribution = Symbol('CorePreferenceContribution');
exports.CorePreferences = Symbol('CorePreferences');
function createCorePreferences(preferences, schema = exports.corePreferenceSchema) {
    return (0, preferences_1.createPreferenceProxy)(preferences, schema);
}
exports.createCorePreferences = createCorePreferences;
function bindCorePreferences(bind) {
    bind(exports.CorePreferences).toDynamicValue(ctx => {
        const preferences = ctx.container.get(preferences_1.PreferenceService);
        const contribution = ctx.container.get(exports.CorePreferenceContribution);
        return createCorePreferences(preferences, contribution.schema);
    }).inSingletonScope();
    bind(exports.CorePreferenceContribution).toConstantValue({ schema: exports.corePreferenceSchema });
    bind(preferences_1.PreferenceContribution).toService(exports.CorePreferenceContribution);
}
exports.bindCorePreferences = bindCorePreferences;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/decoration-style.js":
/*!**********************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/decoration-style.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2021 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DecorationStyle = void 0;
var DecorationStyle;
(function (DecorationStyle) {
    function createStyleElement(styleId, container = document.head) {
        const style = document.createElement('style');
        style.id = styleId;
        style.type = 'text/css';
        style.media = 'screen';
        style.appendChild(document.createTextNode('')); // trick for webkit
        container.appendChild(style);
        return style;
    }
    DecorationStyle.createStyleElement = createStyleElement;
    function createStyleSheet(styleId, container) {
        return createStyleElement(styleId, container).sheet;
    }
    DecorationStyle.createStyleSheet = createStyleSheet;
    function getRuleIndex(selector, styleSheet) {
        return Array.from(styleSheet.cssRules || styleSheet.rules).findIndex(rule => rule.type === CSSRule.STYLE_RULE && rule.selectorText === selector);
    }
    function getOrCreateStyleRule(selector, styleSheet) {
        let index = getRuleIndex(selector, styleSheet);
        if (index === -1) {
            // The given selector does not exist in the provided independent style sheet, rule index = 0
            index = styleSheet.insertRule(selector + '{}', 0);
        }
        const rules = styleSheet.cssRules || styleSheet.rules;
        const rule = rules[index];
        if (rule && rule.type === CSSRule.STYLE_RULE) {
            return rule;
        }
        styleSheet.deleteRule(index);
        throw new Error('This function is only for CSS style rules. Other types of CSS rules are not allowed.');
    }
    DecorationStyle.getOrCreateStyleRule = getOrCreateStyleRule;
    function deleteStyleRule(selector, styleSheet) {
        if (!styleSheet) {
            return;
        }
        // In general, only one rule exists for a given selector in the provided independent style sheet
        const index = getRuleIndex(selector, styleSheet);
        if (index !== -1) {
            styleSheet.deleteRule(index);
        }
    }
    DecorationStyle.deleteStyleRule = deleteStyleRule;
})(DecorationStyle = exports.DecorationStyle || (exports.DecorationStyle = {}));


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/decorations-service.js":
/*!*************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/decorations-service.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2020 Red Hat, Inc. and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DecorationsServiceImpl = exports.DecorationsService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/es/inversify.js");
const promise_util_1 = __webpack_require__(/*! ../common/promise-util */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/promise-util.js");
const common_1 = __webpack_require__(/*! ../common */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/index.js");
const ternary_search_tree_1 = __webpack_require__(/*! ../common/ternary-search-tree */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/ternary-search-tree.js");
exports.DecorationsService = Symbol('DecorationsService');
class DecorationDataRequest {
    constructor(source, thenable) {
        this.source = source;
        this.thenable = thenable;
    }
}
class DecorationProviderWrapper {
    constructor(provider, onDidChangeDecorationsEmitter) {
        this.provider = provider;
        this.onDidChangeDecorationsEmitter = onDidChangeDecorationsEmitter;
        this.decorations = new Map();
        this.data = ternary_search_tree_1.TernarySearchTree.forUris(true);
        this.disposable = this.provider.onDidChange(async (uris) => {
            this.decorations.clear();
            if (!uris) {
                this.data.clear();
            }
            else {
                for (const uri of uris) {
                    this.fetchData(uri);
                    const decoration = await provider.provideDecorations(uri, common_1.CancellationToken.None);
                    if (decoration) {
                        this.decorations.set(uri.toString(), decoration);
                    }
                }
            }
            this.onDidChangeDecorationsEmitter.fire(this.decorations);
        });
    }
    dispose() {
        this.disposable.dispose();
        this.data.clear();
    }
    knowsAbout(uri) {
        return !!this.data.get(uri) || Boolean(this.data.findSuperstr(uri));
    }
    getOrRetrieve(uri, includeChildren, callback) {
        let item = this.data.get(uri);
        if (item === undefined) {
            // unknown -> trigger request
            item = this.fetchData(uri);
        }
        if (item && !(item instanceof DecorationDataRequest)) {
            // found something (which isn't pending anymore)
            callback(item, false);
        }
        if (includeChildren) {
            // (resolved) children
            const iter = this.data.findSuperstr(uri);
            if (iter) {
                let next = iter.next();
                while (!next.done) {
                    const value = next.value;
                    if (value && !(value instanceof DecorationDataRequest)) {
                        callback(value, true);
                    }
                    next = iter.next();
                }
            }
        }
    }
    fetchData(uri) {
        // check for pending request and cancel it
        const pendingRequest = this.data.get(uri);
        if (pendingRequest instanceof DecorationDataRequest) {
            pendingRequest.source.cancel();
            this.data.delete(uri);
        }
        const source = new common_1.CancellationTokenSource();
        const dataOrThenable = this.provider.provideDecorations(uri, source.token);
        if (!(0, promise_util_1.isThenable)(dataOrThenable)) {
            // sync -> we have a result now
            return this.keepItem(uri, dataOrThenable);
        }
        else {
            // async -> we have a result soon
            const request = new DecorationDataRequest(source, Promise.resolve(dataOrThenable).then(data => {
                if (this.data.get(uri) === request) {
                    this.keepItem(uri, data);
                }
            }).catch(err => {
                if (!(err instanceof Error && err.name === 'Canceled' && err.message === 'Canceled') && this.data.get(uri) === request) {
                    this.data.delete(uri);
                }
            }));
            this.data.set(uri, request);
            return undefined;
        }
    }
    keepItem(uri, data) {
        const deco = data ? data : undefined;
        this.data.set(uri, deco);
        return deco;
    }
}
let DecorationsServiceImpl = class DecorationsServiceImpl {
    constructor() {
        this.data = [];
        this.onDidChangeDecorationsEmitter = new common_1.Emitter();
        this.onDidChangeDecorations = this.onDidChangeDecorationsEmitter.event;
    }
    dispose() {
        this.onDidChangeDecorationsEmitter.dispose();
    }
    registerDecorationsProvider(provider) {
        const wrapper = new DecorationProviderWrapper(provider, this.onDidChangeDecorationsEmitter);
        this.data.push(wrapper);
        return common_1.Disposable.create(() => {
            // fire event that says 'yes' for any resource
            // known to this provider. then dispose and remove it.
            this.data.splice(this.data.indexOf(wrapper), 1);
            this.onDidChangeDecorationsEmitter.fire(new Map());
            wrapper.dispose();
        });
    }
    getDecoration(uri, includeChildren) {
        const data = [];
        let containsChildren = false;
        for (const wrapper of this.data) {
            wrapper.getOrRetrieve(uri, includeChildren, (deco, isChild) => {
                if (!isChild || deco.bubble) {
                    data.push(deco);
                    containsChildren = isChild || containsChildren;
                }
            });
        }
        return data;
    }
};
DecorationsServiceImpl = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)()
], DecorationsServiceImpl);
exports.DecorationsServiceImpl = DecorationsServiceImpl;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/dialogs.js":
/*!*************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/dialogs.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2017 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var DialogOverlayService_1;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SingleTextInputDialog = exports.SingleTextInputDialogProps = exports.ConfirmSaveDialog = exports.ConfirmSaveDialogProps = exports.confirmExit = exports.ConfirmDialog = exports.ConfirmDialogProps = exports.MessageDialogProps = exports.AbstractDialog = exports.DialogOverlayService = exports.Dialog = exports.DialogError = exports.DialogProps = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/es/inversify.js");
const common_1 = __webpack_require__(/*! ../common */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/index.js");
const keys_1 = __webpack_require__(/*! ./keyboard/keys */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/keyboard/keys.js");
const widgets_1 = __webpack_require__(/*! ./widgets */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/widgets/index.js");
let DialogProps = class DialogProps {
};
DialogProps = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)()
], DialogProps);
exports.DialogProps = DialogProps;
var DialogError;
(function (DialogError) {
    function getResult(error) {
        if (typeof error === 'string') {
            return !error.length;
        }
        if (typeof error === 'boolean') {
            return error;
        }
        return error.result;
    }
    DialogError.getResult = getResult;
    function getMessage(error) {
        if (typeof error === 'string') {
            return error;
        }
        if (typeof error === 'boolean') {
            return '';
        }
        return error.message;
    }
    DialogError.getMessage = getMessage;
})(DialogError = exports.DialogError || (exports.DialogError = {}));
var Dialog;
(function (Dialog) {
    Dialog.YES = common_1.nls.localizeByDefault('Yes');
    Dialog.NO = common_1.nls.localizeByDefault('No');
    Dialog.OK = common_1.nls.localizeByDefault('OK');
    Dialog.CANCEL = common_1.nls.localizeByDefault('Cancel');
})(Dialog = exports.Dialog || (exports.Dialog = {}));
let DialogOverlayService = DialogOverlayService_1 = class DialogOverlayService {
    constructor() {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        this.dialogs = [];
        this.documents = [];
    }
    static get() {
        return DialogOverlayService_1.INSTANCE;
    }
    initialize() {
        DialogOverlayService_1.INSTANCE = this;
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    get currentDialog() {
        return this.dialogs[0];
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    push(dialog) {
        if (this.documents.findIndex(document => document === dialog.node.ownerDocument) < 0) {
            (0, widgets_1.addKeyListener)(dialog.node.ownerDocument.body, keys_1.Key.ENTER, e => this.handleEnter(e));
            (0, widgets_1.addKeyListener)(dialog.node.ownerDocument.body, keys_1.Key.ESCAPE, e => this.handleEscape(e));
            this.documents.push(dialog.node.ownerDocument);
        }
        this.dialogs.unshift(dialog);
        return common_1.Disposable.create(() => {
            const index = this.dialogs.indexOf(dialog);
            if (index > -1) {
                this.dialogs.splice(index, 1);
            }
        });
    }
    handleEscape(event) {
        const dialog = this.currentDialog;
        if (dialog) {
            return dialog['handleEscape'](event);
        }
        return false;
    }
    handleEnter(event) {
        const dialog = this.currentDialog;
        if (dialog) {
            return dialog['handleEnter'](event);
        }
        return false;
    }
};
DialogOverlayService = DialogOverlayService_1 = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)(),
    (0, tslib_1.__metadata)("design:paramtypes", [])
], DialogOverlayService);
exports.DialogOverlayService = DialogOverlayService;
let AbstractDialog = class AbstractDialog extends widgets_1.BaseWidget {
    constructor(props, options) {
        super(options);
        this.props = props;
        this.validateCancellationSource = new common_1.CancellationTokenSource();
        this.acceptCancellationSource = new common_1.CancellationTokenSource();
        this.id = 'theia-dialog-shell';
        this.addClass('dialogOverlay');
        this.toDispose.push(common_1.Disposable.create(() => {
            if (this.reject) {
                widgets_1.Widget.detach(this);
            }
        }));
        const container = this.node.ownerDocument.createElement('div');
        container.classList.add('dialogBlock');
        if (props.maxWidth === undefined) {
            container.setAttribute('style', 'max-width: none');
        }
        else if (props.maxWidth < 400) {
            container.setAttribute('style', `max-width: ${props.maxWidth}px; min-width: 0px`);
        }
        else {
            container.setAttribute('style', `max-width: ${props.maxWidth}px`);
        }
        this.node.appendChild(container);
        const titleContentNode = this.node.ownerDocument.createElement('div');
        titleContentNode.classList.add('dialogTitle');
        container.appendChild(titleContentNode);
        this.titleNode = this.node.ownerDocument.createElement('div');
        this.titleNode.textContent = props.title;
        titleContentNode.appendChild(this.titleNode);
        this.closeCrossNode = this.node.ownerDocument.createElement('i');
        this.closeCrossNode.classList.add(...(0, widgets_1.codiconArray)('close', true));
        this.closeCrossNode.classList.add('closeButton');
        titleContentNode.appendChild(this.closeCrossNode);
        this.contentNode = this.node.ownerDocument.createElement('div');
        this.contentNode.classList.add('dialogContent');
        if (props.wordWrap !== undefined) {
            this.contentNode.setAttribute('style', `word-wrap: ${props.wordWrap}`);
        }
        container.appendChild(this.contentNode);
        this.controlPanel = this.node.ownerDocument.createElement('div');
        this.controlPanel.classList.add('dialogControl');
        container.appendChild(this.controlPanel);
        this.errorMessageNode = this.node.ownerDocument.createElement('div');
        this.errorMessageNode.classList.add('error');
        this.errorMessageNode.setAttribute('style', 'flex: 2');
        this.controlPanel.appendChild(this.errorMessageNode);
        this.update();
    }
    appendCloseButton(text = Dialog.CANCEL) {
        return this.closeButton = this.appendButton(text, false);
    }
    appendAcceptButton(text = Dialog.OK) {
        return this.acceptButton = this.appendButton(text, true);
    }
    appendButton(text, primary) {
        const button = this.createButton(text);
        this.controlPanel.appendChild(button);
        button.classList.add(primary ? 'main' : 'secondary');
        return button;
    }
    createButton(text) {
        const button = document.createElement('button');
        button.classList.add('theia-button');
        button.textContent = text;
        return button;
    }
    onAfterAttach(msg) {
        super.onAfterAttach(msg);
        if (this.closeButton) {
            this.addCloseAction(this.closeButton, 'click');
        }
        if (this.acceptButton) {
            this.addAcceptAction(this.acceptButton, 'click');
        }
        this.addCloseAction(this.closeCrossNode, 'click');
        // TODO: use DI always to create dialog instances
        this.toDisposeOnDetach.push(DialogOverlayService.get().push(this));
    }
    handleEscape(event) {
        this.close();
    }
    handleEnter(event) {
        if (event.target instanceof HTMLTextAreaElement) {
            return false;
        }
        this.accept();
    }
    onActivateRequest(msg) {
        super.onActivateRequest(msg);
        if (this.acceptButton) {
            this.acceptButton.focus();
        }
    }
    open() {
        if (this.resolve) {
            return Promise.reject(new Error('The dialog is already opened.'));
        }
        this.activeElement = this.node.ownerDocument.activeElement;
        return new Promise((resolve, reject) => {
            this.resolve = resolve;
            this.reject = reject;
            this.toDisposeOnDetach.push(common_1.Disposable.create(() => {
                this.resolve = undefined;
                this.reject = undefined;
            }));
            widgets_1.Widget.attach(this, this.node.ownerDocument.body);
            this.activate();
        });
    }
    close() {
        if (this.resolve) {
            if (this.activeElement) {
                this.activeElement.focus({ preventScroll: true });
            }
            this.resolve(undefined);
        }
        this.activeElement = undefined;
        super.close();
    }
    onUpdateRequest(msg) {
        super.onUpdateRequest(msg);
        this.validate();
    }
    async validate() {
        if (!this.resolve) {
            return;
        }
        this.validateCancellationSource.cancel();
        this.validateCancellationSource = new common_1.CancellationTokenSource();
        const token = this.validateCancellationSource.token;
        const value = this.value;
        const error = await this.isValid(value, 'preview');
        if (token.isCancellationRequested) {
            return;
        }
        this.setErrorMessage(error);
    }
    async accept() {
        if (!this.resolve) {
            return;
        }
        this.acceptCancellationSource.cancel();
        this.acceptCancellationSource = new common_1.CancellationTokenSource();
        const token = this.acceptCancellationSource.token;
        const value = this.value;
        const error = await this.isValid(value, 'open');
        if (token.isCancellationRequested) {
            return;
        }
        if (!DialogError.getResult(error)) {
            this.setErrorMessage(error);
        }
        else {
            this.resolve(value);
            widgets_1.Widget.detach(this);
        }
    }
    /**
     * Return a string of zero-length or true if valid.
     */
    isValid(value, mode) {
        return '';
    }
    setErrorMessage(error) {
        if (this.acceptButton) {
            this.acceptButton.disabled = !DialogError.getResult(error);
        }
        this.errorMessageNode.innerText = DialogError.getMessage(error);
    }
    addAction(element, callback, ...additionalEventTypes) {
        this.addKeyListener(element, keys_1.Key.ENTER, callback, ...additionalEventTypes);
    }
    addCloseAction(element, ...additionalEventTypes) {
        this.addAction(element, () => this.close(), ...additionalEventTypes);
    }
    addAcceptAction(element, ...additionalEventTypes) {
        this.addAction(element, () => this.accept(), ...additionalEventTypes);
    }
};
AbstractDialog = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)(),
    (0, tslib_1.__metadata)("design:paramtypes", [DialogProps, Object])
], AbstractDialog);
exports.AbstractDialog = AbstractDialog;
let MessageDialogProps = class MessageDialogProps extends DialogProps {
};
MessageDialogProps = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)()
], MessageDialogProps);
exports.MessageDialogProps = MessageDialogProps;
let ConfirmDialogProps = class ConfirmDialogProps extends MessageDialogProps {
};
ConfirmDialogProps = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)()
], ConfirmDialogProps);
exports.ConfirmDialogProps = ConfirmDialogProps;
let ConfirmDialog = class ConfirmDialog extends AbstractDialog {
    constructor(props) {
        super(props);
        this.props = props;
        this.confirmed = true;
        this.contentNode.appendChild(this.createMessageNode(this.props.msg));
        this.appendCloseButton(props.cancel);
        this.appendAcceptButton(props.ok);
    }
    onCloseRequest(msg) {
        super.onCloseRequest(msg);
        this.confirmed = false;
        this.accept();
    }
    get value() {
        return this.confirmed;
    }
    createMessageNode(msg) {
        if (typeof msg === 'string') {
            const messageNode = this.node.ownerDocument.createElement('div');
            messageNode.textContent = msg;
            return messageNode;
        }
        return msg;
    }
};
ConfirmDialog = (0, tslib_1.__decorate)([
    (0, tslib_1.__param)(0, (0, inversify_1.inject)(ConfirmDialogProps)),
    (0, tslib_1.__metadata)("design:paramtypes", [ConfirmDialogProps])
], ConfirmDialog);
exports.ConfirmDialog = ConfirmDialog;
async function confirmExit() {
    const safeToExit = await new ConfirmDialog({
        title: common_1.nls.localizeByDefault('Are you sure you want to quit?'),
        msg: common_1.nls.localize('theia/core/quitMessage', 'Any unsaved changes will not be saved.'),
        ok: Dialog.YES,
        cancel: Dialog.NO,
    }).open();
    return safeToExit === true;
}
exports.confirmExit = confirmExit;
class ConfirmSaveDialogProps extends MessageDialogProps {
}
exports.ConfirmSaveDialogProps = ConfirmSaveDialogProps;
// Dialog prompting the user to confirm whether they wish to save changes or not
let ConfirmSaveDialog = class ConfirmSaveDialog extends AbstractDialog {
    constructor(props) {
        super(props);
        this.props = props;
        this.result = false;
        // Append message and buttons to the dialog
        this.contentNode.appendChild(this.createMessageNode(this.props.msg));
        this.closeButton = this.appendButtonAndSetResult(props.cancel, false);
        this.appendButtonAndSetResult(props.dontSave, false, false);
        this.acceptButton = this.appendButtonAndSetResult(props.save, true, true);
    }
    get value() {
        return this.result;
    }
    createMessageNode(msg) {
        if (typeof msg === 'string') {
            const messageNode = document.createElement('div');
            messageNode.textContent = msg;
            return messageNode;
        }
        return msg;
    }
    appendButtonAndSetResult(text, primary, result) {
        const button = this.appendButton(text, primary);
        button.addEventListener('click', () => {
            this.result = result;
            this.accept();
        });
        return button;
    }
};
ConfirmSaveDialog = (0, tslib_1.__decorate)([
    (0, tslib_1.__param)(0, (0, inversify_1.inject)(ConfirmSaveDialogProps)),
    (0, tslib_1.__metadata)("design:paramtypes", [ConfirmSaveDialogProps])
], ConfirmSaveDialog);
exports.ConfirmSaveDialog = ConfirmSaveDialog;
let SingleTextInputDialogProps = class SingleTextInputDialogProps extends DialogProps {
};
SingleTextInputDialogProps = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)()
], SingleTextInputDialogProps);
exports.SingleTextInputDialogProps = SingleTextInputDialogProps;
let SingleTextInputDialog = class SingleTextInputDialog extends AbstractDialog {
    constructor(props) {
        super(props);
        this.props = props;
        this.inputField = document.createElement('input');
        this.inputField.type = 'text';
        this.inputField.className = 'theia-input';
        this.inputField.spellcheck = false;
        this.inputField.setAttribute('style', 'flex: 0;');
        this.inputField.placeholder = props.placeholder || '';
        this.inputField.value = props.initialValue || '';
        if (props.initialSelectionRange) {
            this.inputField.setSelectionRange(props.initialSelectionRange.start, props.initialSelectionRange.end, props.initialSelectionRange.direction);
        }
        else {
            this.inputField.select();
        }
        this.contentNode.appendChild(this.inputField);
        this.controlPanel.removeChild(this.errorMessageNode);
        this.contentNode.appendChild(this.errorMessageNode);
        this.appendAcceptButton(props.confirmButtonLabel);
    }
    get value() {
        return this.inputField.value;
    }
    isValid(value, mode) {
        if (this.props.validate) {
            return this.props.validate(value, mode);
        }
        return super.isValid(value, mode);
    }
    onAfterAttach(msg) {
        super.onAfterAttach(msg);
        this.addUpdateListener(this.inputField, 'input');
    }
    onActivateRequest(msg) {
        this.inputField.focus();
    }
    handleEnter(event) {
        if (event.target instanceof HTMLInputElement) {
            return super.handleEnter(event);
        }
        return false;
    }
};
SingleTextInputDialog = (0, tslib_1.__decorate)([
    (0, tslib_1.__param)(0, (0, inversify_1.inject)(SingleTextInputDialogProps)),
    (0, tslib_1.__metadata)("design:paramtypes", [SingleTextInputDialogProps])
], SingleTextInputDialog);
exports.SingleTextInputDialog = SingleTextInputDialog;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/dialogs/react-dialog.js":
/*!**************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/dialogs/react-dialog.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2019 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ReactDialog = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
const React = __webpack_require__(/*! react */ "../node_modules/react/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/es/inversify.js");
const common_1 = __webpack_require__(/*! ../../common */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/index.js");
const dialogs_1 = __webpack_require__(/*! ../dialogs */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/dialogs.js");
const client_1 = __webpack_require__(/*! react-dom/client */ "../node_modules/react-dom/client.js");
let ReactDialog = class ReactDialog extends dialogs_1.AbstractDialog {
    constructor(props) {
        super(props);
        this.contentNodeRoot = (0, client_1.createRoot)(this.contentNode);
        this.isMounted = true;
        this.toDispose.push(common_1.Disposable.create(() => {
            this.contentNodeRoot.unmount();
            this.isMounted = false;
        }));
    }
    onUpdateRequest(msg) {
        var _a;
        super.onUpdateRequest(msg);
        if (!this.isMounted) {
            this.contentNodeRoot = (0, client_1.createRoot)(this.contentNode);
        }
        (_a = this.contentNodeRoot) === null || _a === void 0 ? void 0 : _a.render(React.createElement(React.Fragment, null, this.render()));
    }
};
ReactDialog = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)(),
    (0, tslib_1.__param)(0, (0, inversify_1.inject)(dialogs_1.DialogProps)),
    (0, tslib_1.__metadata)("design:paramtypes", [dialogs_1.DialogProps])
], ReactDialog);
exports.ReactDialog = ReactDialog;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/diff-uris.js":
/*!***************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/diff-uris.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2017 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DiffUriLabelProviderContribution = exports.DiffUris = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/es/inversify.js");
const uri_1 = __webpack_require__(/*! ../common/uri */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/uri.js");
const label_provider_1 = __webpack_require__(/*! ./label-provider */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/label-provider.js");
const widgets_1 = __webpack_require__(/*! ./widgets */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/widgets/index.js");
var DiffUris;
(function (DiffUris) {
    DiffUris.DIFF_SCHEME = 'diff';
    function encode(left, right, label) {
        const diffUris = [
            left.toString(),
            right.toString()
        ];
        const diffUriStr = JSON.stringify(diffUris);
        return new uri_1.default().withScheme(DiffUris.DIFF_SCHEME).withPath(label || '').withQuery(diffUriStr);
    }
    DiffUris.encode = encode;
    function decode(uri) {
        if (uri.scheme !== DiffUris.DIFF_SCHEME) {
            throw new Error((`The URI must have scheme "diff". The URI was: ${uri}.`));
        }
        const diffUris = JSON.parse(uri.query);
        return diffUris.map(s => new uri_1.default(s));
    }
    DiffUris.decode = decode;
    function isDiffUri(uri) {
        return uri.scheme === DiffUris.DIFF_SCHEME;
    }
    DiffUris.isDiffUri = isDiffUri;
})(DiffUris = exports.DiffUris || (exports.DiffUris = {}));
let DiffUriLabelProviderContribution = class DiffUriLabelProviderContribution {
    constructor(labelProvider) {
        this.labelProvider = labelProvider;
    }
    canHandle(element) {
        if (element instanceof uri_1.default && DiffUris.isDiffUri(element)) {
            return 20;
        }
        return 0;
    }
    getLongName(uri) {
        const label = uri.path.toString();
        if (label) {
            return label;
        }
        const [left, right] = DiffUris.decode(uri);
        const leftLongName = this.labelProvider.getLongName(left);
        const rightLongName = this.labelProvider.getLongName(right);
        if (leftLongName === rightLongName) {
            return leftLongName;
        }
        return `${leftLongName} ⟷ ${rightLongName}`;
    }
    getName(uri) {
        const label = uri.path.toString();
        if (label) {
            return label;
        }
        const [left, right] = DiffUris.decode(uri);
        if (left.path.toString() === right.path.toString() && left.query && right.query) {
            const prefix = left.displayName ? `${left.displayName}: ` : '';
            return `${prefix}${left.query} ⟷ ${right.query}`;
        }
        else {
            let title;
            if (uri.displayName && left.path.toString() !== right.path.toString() && left.displayName !== uri.displayName) {
                title = `${uri.displayName}: `;
            }
            else {
                title = '';
            }
            const leftLongName = this.labelProvider.getName(left);
            const rightLongName = this.labelProvider.getName(right);
            if (leftLongName === rightLongName) {
                return leftLongName;
            }
            return `${title}${leftLongName} ⟷ ${rightLongName}`;
        }
    }
    getIcon(uri) {
        return (0, widgets_1.codicon)('split-horizontal');
    }
    affects(diffUri, event) {
        for (const uri of DiffUris.decode(diffUri)) {
            if (event.affects(uri)) {
                return true;
            }
        }
        return false;
    }
};
DiffUriLabelProviderContribution = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)(),
    (0, tslib_1.__param)(0, (0, inversify_1.inject)(label_provider_1.LabelProvider)),
    (0, tslib_1.__metadata)("design:paramtypes", [label_provider_1.LabelProvider])
], DiffUriLabelProviderContribution);
exports.DiffUriLabelProviderContribution = DiffUriLabelProviderContribution;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/encoding-registry.js":
/*!***********************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/encoding-registry.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2020 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.EncodingRegistry = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
// based on https://github.com/microsoft/vscode/blob/04c36be045a94fee58e5f8992d3e3fd980294a84/src/vs/workbench/services/textfile/browser/textFileService.ts#L491
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/es/inversify.js");
const disposable_1 = __webpack_require__(/*! ../common/disposable */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/disposable.js");
const core_preferences_1 = __webpack_require__(/*! ./core-preferences */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/core-preferences.js");
const encoding_service_1 = __webpack_require__(/*! ../common/encoding-service */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/encoding-service.js");
const encodings_1 = __webpack_require__(/*! ../common/encodings */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/encodings.js");
let EncodingRegistry = class EncodingRegistry {
    constructor() {
        this.encodingOverrides = [];
    }
    registerOverride(override) {
        this.encodingOverrides.push(override);
        return disposable_1.Disposable.create(() => {
            const index = this.encodingOverrides.indexOf(override);
            if (index !== -1) {
                this.encodingOverrides.splice(index, 1);
            }
        });
    }
    getEncodingForResource(resource, preferredEncoding) {
        let fileEncoding;
        const override = this.getEncodingOverride(resource);
        if (override) {
            fileEncoding = override; // encoding override always wins
        }
        else if (preferredEncoding) {
            fileEncoding = preferredEncoding; // preferred encoding comes second
        }
        else {
            fileEncoding = this.preferences.get('files.encoding', undefined, resource.toString());
        }
        if (!fileEncoding || !this.encodingService.exists(fileEncoding)) {
            return encodings_1.UTF8; // the default is UTF 8
        }
        return this.encodingService.toIconvEncoding(fileEncoding);
    }
    getEncodingOverride(resource) {
        if (this.encodingOverrides && this.encodingOverrides.length) {
            for (const override of this.encodingOverrides) {
                if (override.parent && resource.isEqualOrParent(override.parent)) {
                    return override.encoding;
                }
                if (override.extension && resource.path.ext === `.${override.extension}`) {
                    return override.encoding;
                }
                if (override.scheme && override.scheme === resource.scheme) {
                    return override.encoding;
                }
            }
        }
        return undefined;
    }
};
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(core_preferences_1.CorePreferences),
    (0, tslib_1.__metadata)("design:type", Object)
], EncodingRegistry.prototype, "preferences", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(encoding_service_1.EncodingService),
    (0, tslib_1.__metadata)("design:type", encoding_service_1.EncodingService)
], EncodingRegistry.prototype, "encodingService", void 0);
EncodingRegistry = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)()
], EncodingRegistry);
exports.EncodingRegistry = EncodingRegistry;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/endpoint.js":
/*!**************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/endpoint.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2017 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Endpoint = void 0;
const uri_1 = __webpack_require__(/*! ../common/uri */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/uri.js");
/**
 * An endpoint provides URLs for http and ws, based on configuration and defaults.
 */
class Endpoint {
    constructor(options = {}, location = self.location) {
        this.options = options;
        this.location = location;
    }
    getWebSocketUrl() {
        return new uri_1.default(`${this.wsScheme}//${this.host}${this.pathname}${this.path}`);
    }
    getRestUrl() {
        return new uri_1.default(`${this.httpScheme}//${this.host}${this.pathname}${this.path}`);
    }
    get pathname() {
        if (this.location.protocol === Endpoint.PROTO_FILE) {
            return '';
        }
        if (this.location.pathname === '/') {
            return '';
        }
        if (this.location.pathname.endsWith('/')) {
            return this.location.pathname.substring(0, this.location.pathname.length - 1);
        }
        return this.location.pathname;
    }
    get host() {
        if (this.options.host) {
            return this.options.host;
        }
        if (this.location.host) {
            return this.location.host;
        }
        return 'localhost:' + this.port;
    }
    get origin() {
        return `${this.httpScheme}//${this.host}`;
    }
    get port() {
        return this.getSearchParam('port', '3000');
    }
    getSearchParam(name, defaultValue) {
        const search = this.location.search;
        if (!search) {
            return defaultValue;
        }
        return search.substring(1).split('&')
            .filter(value => value.startsWith(name + '='))
            .map(value => {
            const encoded = value.substring(name.length + 1);
            return decodeURIComponent(encoded);
        })[0] || defaultValue;
    }
    get wsScheme() {
        if (this.options.wsScheme) {
            return this.options.wsScheme;
        }
        return this.httpScheme === Endpoint.PROTO_HTTPS ? Endpoint.PROTO_WSS : Endpoint.PROTO_WS;
    }
    /**
     * The HTTP/HTTPS scheme of the endpoint, or the user defined one.
     * See: `Endpoint.Options.httpScheme`.
     */
    get httpScheme() {
        if (this.options.httpScheme) {
            return this.options.httpScheme;
        }
        if (this.location.protocol === Endpoint.PROTO_HTTP ||
            this.location.protocol === Endpoint.PROTO_HTTPS) {
            return this.location.protocol;
        }
        return Endpoint.PROTO_HTTP;
    }
    get path() {
        if (this.options.path) {
            if (this.options.path.startsWith('/')) {
                return this.options.path;
            }
            else {
                return '/' + this.options.path;
            }
        }
        return '';
    }
}
exports.Endpoint = Endpoint;
Endpoint.PROTO_HTTPS = 'https:';
Endpoint.PROTO_HTTP = 'http:';
Endpoint.PROTO_WS = 'ws:';
Endpoint.PROTO_WSS = 'wss:';
Endpoint.PROTO_FILE = 'file:';
(function (Endpoint) {
    class Options {
    }
    Endpoint.Options = Options;
    // Necessary for running tests with dependency on TS lib on node
    // FIXME figure out how to mock with ts-node
    class Location {
    }
    Endpoint.Location = Location;
})(Endpoint = exports.Endpoint || (exports.Endpoint = {}));


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/frontend-application-config-provider.js":
/*!******************************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/frontend-application-config-provider.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FrontendApplicationConfigProvider = exports.DEFAULT_BACKGROUND_COLOR_STORAGE_KEY = void 0;
const application_props_1 = __webpack_require__(/*! @theia/application-package/lib/application-props */ "../node_modules/@theia/editor/node_modules/@theia/application-package/lib/application-props.js");
exports.DEFAULT_BACKGROUND_COLOR_STORAGE_KEY = 'theme.background';
class FrontendApplicationConfigProvider {
    static get() {
        const config = FrontendApplicationConfigProvider.doGet();
        if (config === undefined) {
            throw new Error('The configuration is not set. Did you call FrontendApplicationConfigProvider#set?');
        }
        return config;
    }
    static set(config) {
        if (FrontendApplicationConfigProvider.doGet() !== undefined) {
            throw new Error('The configuration is already set.');
        }
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        const globalObject = window;
        const key = FrontendApplicationConfigProvider.KEY;
        globalObject[key] = (0, application_props_1.deepmerge)(application_props_1.FrontendApplicationConfig.DEFAULT, config);
    }
    static doGet() {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        const globalObject = window;
        const key = FrontendApplicationConfigProvider.KEY;
        return globalObject[key];
    }
}
exports.FrontendApplicationConfigProvider = FrontendApplicationConfigProvider;
FrontendApplicationConfigProvider.KEY = Symbol('FrontendApplicationConfigProvider');


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/frontend-application-contribution.js":
/*!***************************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/frontend-application-contribution.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2023 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DefaultFrontendApplicationContribution = exports.OnWillStopAction = exports.FrontendApplicationContribution = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
const types_1 = __webpack_require__(/*! ../common/types */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/types.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/es/inversify.js");
/**
 * Clients can implement to get a callback for contributing widgets to a shell on start.
 */
exports.FrontendApplicationContribution = Symbol('FrontendApplicationContribution');
var OnWillStopAction;
(function (OnWillStopAction) {
    function is(candidate) {
        return (0, types_1.isObject)(candidate) && 'action' in candidate && 'reason' in candidate;
    }
    OnWillStopAction.is = is;
})(OnWillStopAction = exports.OnWillStopAction || (exports.OnWillStopAction = {}));
/**
 * Default frontend contribution that can be extended by clients if they do not want to implement any of the
 * methods from the interface but still want to contribute to the frontend application.
 */
let DefaultFrontendApplicationContribution = class DefaultFrontendApplicationContribution {
    initialize() {
        // NOOP
    }
};
DefaultFrontendApplicationContribution = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)()
], DefaultFrontendApplicationContribution);
exports.DefaultFrontendApplicationContribution = DefaultFrontendApplicationContribution;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/frontend-application-state.js":
/*!********************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/frontend-application-state.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FrontendApplicationStateService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/es/inversify.js");
const event_1 = __webpack_require__(/*! ../common/event */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/event.js");
const promise_util_1 = __webpack_require__(/*! ../common/promise-util */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/promise-util.js");
const logger_1 = __webpack_require__(/*! ../common/logger */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/logger.js");
let FrontendApplicationStateService = class FrontendApplicationStateService {
    constructor() {
        this._state = 'init';
        this.deferred = {};
        this.stateChanged = new event_1.Emitter();
    }
    get state() {
        return this._state;
    }
    set state(state) {
        if (state !== this._state) {
            this.doSetState(state);
        }
    }
    get onStateChanged() {
        return this.stateChanged.event;
    }
    doSetState(state) {
        if (this.deferred[this._state] === undefined) {
            this.deferred[this._state] = new promise_util_1.Deferred();
        }
        const oldState = this._state;
        this._state = state;
        if (this.deferred[state] === undefined) {
            this.deferred[state] = new promise_util_1.Deferred();
        }
        this.deferred[state].resolve();
        this.logger.info(`Changed application state from '${oldState}' to '${this._state}'.`);
        this.stateChanged.fire(state);
    }
    reachedState(state) {
        if (this.deferred[state] === undefined) {
            this.deferred[state] = new promise_util_1.Deferred();
        }
        return this.deferred[state].promise;
    }
    reachedAnyState(...states) {
        return Promise.race(states.map(s => this.reachedState(s)));
    }
};
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(logger_1.ILogger),
    (0, tslib_1.__metadata)("design:type", Object)
], FrontendApplicationStateService.prototype, "logger", void 0);
FrontendApplicationStateService = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)()
], FrontendApplicationStateService);
exports.FrontendApplicationStateService = FrontendApplicationStateService;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/frontend-application.js":
/*!**************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/frontend-application.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2017 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FrontendApplication = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/es/inversify.js");
const common_1 = __webpack_require__(/*! ../common */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/index.js");
const keybinding_1 = __webpack_require__(/*! ./keybinding */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/keybinding.js");
const widgets_1 = __webpack_require__(/*! ./widgets */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/widgets/index.js");
const application_shell_1 = __webpack_require__(/*! ./shell/application-shell */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/shell/application-shell.js");
const shell_layout_restorer_1 = __webpack_require__(/*! ./shell/shell-layout-restorer */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/shell/shell-layout-restorer.js");
const frontend_application_state_1 = __webpack_require__(/*! ./frontend-application-state */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/frontend-application-state.js");
const browser_1 = __webpack_require__(/*! ./browser */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/browser.js");
const core_preferences_1 = __webpack_require__(/*! ./core-preferences */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/core-preferences.js");
const window_service_1 = __webpack_require__(/*! ./window/window-service */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/window/window-service.js");
const tooltip_service_1 = __webpack_require__(/*! ./tooltip-service */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tooltip-service.js");
const frontend_application_contribution_1 = __webpack_require__(/*! ./frontend-application-contribution */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/frontend-application-contribution.js");
const TIMER_WARNING_THRESHOLD = 100;
let FrontendApplication = class FrontendApplication {
    constructor(commands, menus, keybindings, layoutRestorer, contributions, _shell, stateService) {
        this.commands = commands;
        this.menus = menus;
        this.keybindings = keybindings;
        this.layoutRestorer = layoutRestorer;
        this.contributions = contributions;
        this._shell = _shell;
        this.stateService = stateService;
    }
    get shell() {
        return this._shell;
    }
    /**
     * Start the frontend application.
     *
     * Start up consists of the following steps:
     * - start frontend contributions
     * - attach the application shell to the host element
     * - initialize the application shell layout
     * - reveal the application shell if it was hidden by a startup indicator
     */
    async start() {
        const startup = this.backendStopwatch.start('frontend');
        await this.measure('startContributions', () => this.startContributions(), 'Start frontend contributions', false);
        this.stateService.state = 'started_contributions';
        const host = await this.getHost();
        this.attachShell(host);
        this.attachTooltip(host);
        await (0, browser_1.animationFrame)();
        this.stateService.state = 'attached_shell';
        await this.measure('initializeLayout', () => this.initializeLayout(), 'Initialize the workbench layout', false);
        this.stateService.state = 'initialized_layout';
        await this.fireOnDidInitializeLayout();
        await this.measure('revealShell', () => this.revealShell(host), 'Replace loading indicator with ready workbench UI (animation)', false);
        this.registerEventListeners();
        this.stateService.state = 'ready';
        startup.then(idToken => this.backendStopwatch.stop(idToken, 'Frontend application start', []));
    }
    /**
     * Return a promise to the host element to which the application shell is attached.
     */
    getHost() {
        if (document.body) {
            return Promise.resolve(document.body);
        }
        return new Promise(resolve => window.addEventListener('load', () => resolve(document.body), { once: true }));
    }
    /**
     * Return an HTML element that indicates the startup phase, e.g. with an animation or a splash screen.
     */
    getStartupIndicator(host) {
        const startupElements = host.getElementsByClassName('theia-preload');
        return startupElements.length === 0 ? undefined : startupElements[0];
    }
    /**
     * Register global event listeners.
     */
    registerEventListeners() {
        this.windowsService.onUnload(() => {
            this.stateService.state = 'closing_window';
            this.layoutRestorer.storeLayout(this);
            this.stopContributions();
        });
        window.addEventListener('resize', () => this.shell.update());
        this.keybindings.registerEventListeners(window);
        document.addEventListener('touchmove', event => { event.preventDefault(); }, { passive: false });
        // Prevent forward/back navigation by scrolling in OS X
        if (common_1.isOSX) {
            document.body.addEventListener('wheel', browser_1.preventNavigation, { passive: false });
        }
        // Prevent the default browser behavior when dragging and dropping files into the window.
        document.addEventListener('dragenter', event => {
            if (event.dataTransfer) {
                event.dataTransfer.dropEffect = 'none';
            }
            event.preventDefault();
        }, false);
        document.addEventListener('dragover', event => {
            if (event.dataTransfer) {
                event.dataTransfer.dropEffect = 'none';
            }
            event.preventDefault();
        }, false);
        document.addEventListener('drop', event => {
            event.preventDefault();
        }, false);
    }
    /**
     * Attach the application shell to the host element. If a startup indicator is present, the shell is
     * inserted before that indicator so it is not visible yet.
     */
    attachShell(host) {
        const ref = this.getStartupIndicator(host);
        widgets_1.Widget.attach(this.shell, host, ref);
    }
    /**
     * Attach the tooltip container to the host element.
     */
    attachTooltip(host) {
        this.tooltipService.attachTo(host);
    }
    /**
     * If a startup indicator is present, it is first hidden with the `theia-hidden` CSS class and then
     * removed after a while. The delay until removal is taken from the CSS transition duration.
     */
    revealShell(host) {
        const startupElem = this.getStartupIndicator(host);
        if (startupElem) {
            return new Promise(resolve => {
                window.requestAnimationFrame(() => {
                    startupElem.classList.add('theia-hidden');
                    const preloadStyle = window.getComputedStyle(startupElem);
                    const transitionDuration = (0, browser_1.parseCssTime)(preloadStyle.transitionDuration, 0);
                    window.setTimeout(() => {
                        const parent = startupElem.parentElement;
                        if (parent) {
                            parent.removeChild(startupElem);
                        }
                        resolve();
                    }, transitionDuration);
                });
            });
        }
        else {
            return Promise.resolve();
        }
    }
    /**
     * Initialize the shell layout either using the layout restorer service or, if no layout has
     * been stored, by creating the default layout.
     */
    async initializeLayout() {
        if (!await this.restoreLayout()) {
            // Fallback: Create the default shell layout
            await this.createDefaultLayout();
        }
        await this.shell.pendingUpdates;
    }
    /**
     * Try to restore the shell layout from the storage service. Resolves to `true` if successful.
     */
    async restoreLayout() {
        try {
            return await this.layoutRestorer.restoreLayout(this);
        }
        catch (error) {
            if (shell_layout_restorer_1.ApplicationShellLayoutMigrationError.is(error)) {
                console.warn(error.message);
                console.info('Initializing the default layout instead...');
            }
            else {
                console.error('Could not restore layout', error);
            }
            return false;
        }
    }
    /**
     * Let the frontend application contributions initialize the shell layout. Override this
     * method in order to create an application-specific custom layout.
     */
    async createDefaultLayout() {
        for (const contribution of this.contributions.getContributions()) {
            if (contribution.initializeLayout) {
                await this.measure(contribution.constructor.name + '.initializeLayout', () => contribution.initializeLayout(this));
            }
        }
    }
    async fireOnDidInitializeLayout() {
        for (const contribution of this.contributions.getContributions()) {
            if (contribution.onDidInitializeLayout) {
                await this.measure(contribution.constructor.name + '.onDidInitializeLayout', () => contribution.onDidInitializeLayout(this));
            }
        }
    }
    /**
     * Initialize and start the frontend application contributions.
     */
    async startContributions() {
        for (const contribution of this.contributions.getContributions()) {
            if (contribution.initialize) {
                try {
                    await this.measure(contribution.constructor.name + '.initialize', () => contribution.initialize());
                }
                catch (error) {
                    console.error('Could not initialize contribution', error);
                }
            }
        }
        for (const contribution of this.contributions.getContributions()) {
            if (contribution.configure) {
                try {
                    await this.measure(contribution.constructor.name + '.configure', () => contribution.configure(this));
                }
                catch (error) {
                    console.error('Could not configure contribution', error);
                }
            }
        }
        /**
         * FIXME:
         * - decouple commands & menus
         * - consider treat commands, keybindings and menus as frontend application contributions
         */
        await this.measure('commands.onStart', () => this.commands.onStart());
        await this.measure('keybindings.onStart', () => this.keybindings.onStart());
        await this.measure('menus.onStart', () => this.menus.onStart());
        for (const contribution of this.contributions.getContributions()) {
            if (contribution.onStart) {
                try {
                    await this.measure(contribution.constructor.name + '.onStart', () => contribution.onStart(this));
                }
                catch (error) {
                    console.error('Could not start contribution', error);
                }
            }
        }
    }
    /**
     * Stop the frontend application contributions. This is called when the window is unloaded.
     */
    stopContributions() {
        console.info('>>> Stopping frontend contributions...');
        for (const contribution of this.contributions.getContributions()) {
            if (contribution.onStop) {
                try {
                    contribution.onStop(this);
                }
                catch (error) {
                    console.error('Could not stop contribution', error);
                }
            }
        }
        console.info('<<< All frontend contributions have been stopped.');
    }
    async measure(name, fn, message = `Frontend ${name}`, threshold = true) {
        return this.stopwatch.startAsync(name, message, fn, threshold ? { thresholdMillis: TIMER_WARNING_THRESHOLD, defaultLogLevel: common_1.LogLevel.DEBUG } : {});
    }
};
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(core_preferences_1.CorePreferences),
    (0, tslib_1.__metadata)("design:type", Object)
], FrontendApplication.prototype, "corePreferences", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(window_service_1.WindowService),
    (0, tslib_1.__metadata)("design:type", Object)
], FrontendApplication.prototype, "windowsService", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(tooltip_service_1.TooltipService),
    (0, tslib_1.__metadata)("design:type", Object)
], FrontendApplication.prototype, "tooltipService", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(common_1.Stopwatch),
    (0, tslib_1.__metadata)("design:type", common_1.Stopwatch)
], FrontendApplication.prototype, "stopwatch", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(common_1.BackendStopwatch),
    (0, tslib_1.__metadata)("design:type", Object)
], FrontendApplication.prototype, "backendStopwatch", void 0);
FrontendApplication = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)(),
    (0, tslib_1.__param)(0, (0, inversify_1.inject)(common_1.CommandRegistry)),
    (0, tslib_1.__param)(1, (0, inversify_1.inject)(common_1.MenuModelRegistry)),
    (0, tslib_1.__param)(2, (0, inversify_1.inject)(keybinding_1.KeybindingRegistry)),
    (0, tslib_1.__param)(3, (0, inversify_1.inject)(shell_layout_restorer_1.ShellLayoutRestorer)),
    (0, tslib_1.__param)(4, (0, inversify_1.inject)(common_1.ContributionProvider)),
    (0, tslib_1.__param)(4, (0, inversify_1.named)(frontend_application_contribution_1.FrontendApplicationContribution)),
    (0, tslib_1.__param)(5, (0, inversify_1.inject)(application_shell_1.ApplicationShell)),
    (0, tslib_1.__param)(6, (0, inversify_1.inject)(frontend_application_state_1.FrontendApplicationStateService)),
    (0, tslib_1.__metadata)("design:paramtypes", [common_1.CommandRegistry,
        common_1.MenuModelRegistry,
        keybinding_1.KeybindingRegistry,
        shell_layout_restorer_1.ShellLayoutRestorer, Object, application_shell_1.ApplicationShell,
        frontend_application_state_1.FrontendApplicationStateService])
], FrontendApplication);
exports.FrontendApplication = FrontendApplication;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/hover-service.js":
/*!*******************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/hover-service.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2022 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var HoverService_1;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.HoverService = exports.HoverPosition = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/es/inversify.js");
const common_1 = __webpack_require__(/*! ../common */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/index.js");
const browser_1 = __webpack_require__(/*! ./browser */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/browser.js");
const markdown_renderer_1 = __webpack_require__(/*! ./markdown-rendering/markdown-renderer */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/markdown-rendering/markdown-renderer.js");
const preferences_1 = __webpack_require__(/*! ./preferences */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/preferences/index.js");
__webpack_require__(/*! ../../src/browser/style/hover-service.css */ "../node_modules/@theia/editor/node_modules/@theia/core/src/browser/style/hover-service.css");
var HoverPosition;
(function (HoverPosition) {
    function invertIfNecessary(position, target, host, totalWidth, totalHeight) {
        if (position === 'left') {
            if (target.left - host.width - 5 < 0) {
                return 'right';
            }
        }
        else if (position === 'right') {
            if (target.right + host.width + 5 > totalWidth) {
                return 'left';
            }
        }
        else if (position === 'top') {
            if (target.top - host.height - 5 < 0) {
                return 'bottom';
            }
        }
        else if (position === 'bottom') {
            if (target.bottom + host.height + 5 > totalHeight) {
                return 'top';
            }
        }
        return position;
    }
    HoverPosition.invertIfNecessary = invertIfNecessary;
})(HoverPosition = exports.HoverPosition || (exports.HoverPosition = {}));
let HoverService = HoverService_1 = class HoverService {
    constructor() {
        this.lastHidHover = Date.now();
        this.disposeOnHide = new common_1.DisposableCollection();
    }
    get markdownRenderer() {
        this._markdownRenderer || (this._markdownRenderer = this.markdownRendererFactory());
        return this._markdownRenderer;
    }
    get hoverHost() {
        if (!this._hoverHost) {
            this._hoverHost = document.createElement('div');
            this._hoverHost.classList.add(HoverService_1.hostClassName);
            this._hoverHost.style.position = 'absolute';
        }
        return this._hoverHost;
    }
    requestHover(request) {
        if (request.target !== this.hoverTarget) {
            this.cancelHover();
            this.pendingTimeout = (0, common_1.disposableTimeout)(() => this.renderHover(request), this.getHoverDelay());
        }
    }
    getHoverDelay() {
        return Date.now() - this.lastHidHover < 200
            ? 0
            : this.preferences.get('workbench.hover.delay', common_1.isOSX ? 1500 : 500);
    }
    async renderHover(request) {
        const host = this.hoverHost;
        let firstChild;
        const { target, content, position, cssClasses } = request;
        if (cssClasses) {
            host.classList.add(...cssClasses);
        }
        this.hoverTarget = target;
        if (content instanceof HTMLElement) {
            host.appendChild(content);
            firstChild = content;
        }
        else if (typeof content === 'string') {
            host.textContent = content;
        }
        else {
            const renderedContent = this.markdownRenderer.render(content);
            this.disposeOnHide.push(renderedContent);
            host.appendChild(renderedContent.element);
            firstChild = renderedContent.element;
        }
        // browsers might insert linebreaks when the hover appears at the edge of the window
        // resetting the position prevents that
        host.style.left = '0px';
        host.style.top = '0px';
        document.body.append(host);
        if (request.visualPreview) {
            // If just a string is being rendered use the size of the outer box
            const width = firstChild ? firstChild.offsetWidth : this.hoverHost.offsetWidth;
            const visualPreview = request.visualPreview(width);
            if (visualPreview) {
                host.appendChild(visualPreview);
            }
        }
        await (0, browser_1.animationFrame)(); // Allow the browser to size the host
        const updatedPosition = this.setHostPosition(target, host, position);
        this.disposeOnHide.push({
            dispose: () => {
                this.lastHidHover = Date.now();
                host.classList.remove(updatedPosition);
                if (cssClasses) {
                    host.classList.remove(...cssClasses);
                }
            }
        });
        this.listenForMouseOut();
    }
    setHostPosition(target, host, position) {
        const targetDimensions = target.getBoundingClientRect();
        const hostDimensions = host.getBoundingClientRect();
        const documentWidth = document.body.getBoundingClientRect().width;
        // document.body.getBoundingClientRect().height doesn't work as expected
        // scrollHeight will always be accurate here: https://stackoverflow.com/a/44077777
        const documentHeight = document.documentElement.scrollHeight;
        position = HoverPosition.invertIfNecessary(position, targetDimensions, hostDimensions, documentWidth, documentHeight);
        if (position === 'top' || position === 'bottom') {
            const targetMiddleWidth = targetDimensions.left + (targetDimensions.width / 2);
            const middleAlignment = targetMiddleWidth - (hostDimensions.width / 2);
            const furthestRight = Math.min(documentWidth - hostDimensions.width, middleAlignment);
            const left = Math.max(0, furthestRight);
            const top = position === 'top'
                ? targetDimensions.top - hostDimensions.height - 5
                : targetDimensions.bottom + 5;
            host.style.setProperty('--theia-hover-before-position', `${targetMiddleWidth - left - 5}px`);
            host.style.top = `${top}px`;
            host.style.left = `${left}px`;
        }
        else {
            const targetMiddleHeight = targetDimensions.top + (targetDimensions.height / 2);
            const middleAlignment = targetMiddleHeight - (hostDimensions.height / 2);
            const furthestTop = Math.min(documentHeight - hostDimensions.height, middleAlignment);
            const top = Math.max(0, furthestTop);
            const left = position === 'left'
                ? targetDimensions.left - hostDimensions.width - 5
                : targetDimensions.right + 5;
            host.style.setProperty('--theia-hover-before-position', `${targetMiddleHeight - top - 5}px`);
            host.style.left = `${left}px`;
            host.style.top = `${top}px`;
        }
        host.classList.add(position);
        return position;
    }
    listenForMouseOut() {
        const handleMouseMove = (e) => {
            var _a;
            if (e.target instanceof Node && !this.hoverHost.contains(e.target) && !((_a = this.hoverTarget) === null || _a === void 0 ? void 0 : _a.contains(e.target))) {
                this.cancelHover();
            }
        };
        document.addEventListener('mousemove', handleMouseMove);
        this.disposeOnHide.push({ dispose: () => document.removeEventListener('mousemove', handleMouseMove) });
    }
    cancelHover() {
        var _a;
        (_a = this.pendingTimeout) === null || _a === void 0 ? void 0 : _a.dispose();
        this.unRenderHover();
        this.disposeOnHide.dispose();
        this.hoverTarget = undefined;
    }
    unRenderHover() {
        this.hoverHost.remove();
        this.hoverHost.replaceChildren();
    }
};
HoverService.hostClassName = 'theia-hover';
HoverService.styleSheetId = 'theia-hover-style';
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(preferences_1.PreferenceService),
    (0, tslib_1.__metadata)("design:type", Object)
], HoverService.prototype, "preferences", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(markdown_renderer_1.MarkdownRendererFactory),
    (0, tslib_1.__metadata)("design:type", Function)
], HoverService.prototype, "markdownRendererFactory", void 0);
HoverService = HoverService_1 = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)()
], HoverService);
exports.HoverService = HoverService;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/i18n/language-quick-pick-service.js":
/*!**************************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/i18n/language-quick-pick-service.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2022 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LanguageQuickPickService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/es/inversify.js");
const nls_1 = __webpack_require__(/*! ../../common/nls */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/nls.js");
const localization_1 = __webpack_require__(/*! ../../common/i18n/localization */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/i18n/localization.js");
const quick_input_1 = __webpack_require__(/*! ../quick-input */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/quick-input/index.js");
const window_service_1 = __webpack_require__(/*! ../window/window-service */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/window/window-service.js");
let LanguageQuickPickService = class LanguageQuickPickService {
    async pickDisplayLanguage() {
        const quickInput = this.quickInputService.createQuickPick();
        const installedItems = await this.getInstalledLanguages();
        const quickInputItems = [
            {
                type: 'separator',
                label: nls_1.nls.localizeByDefault('Installed')
            },
            ...installedItems
        ];
        quickInput.items = quickInputItems;
        quickInput.busy = true;
        const selected = installedItems.find(item => nls_1.nls.isSelectedLocale(item.languageId));
        if (selected) {
            quickInput.activeItems = [selected];
        }
        quickInput.placeholder = nls_1.nls.localizeByDefault('Configure Display Language');
        quickInput.show();
        this.getAvailableLanguages().then(availableItems => {
            if (availableItems.length > 0) {
                quickInputItems.push({
                    type: 'separator',
                    label: nls_1.nls.localizeByDefault('Available')
                });
                const installed = new Set(installedItems.map(e => e.languageId));
                for (const available of availableItems) {
                    // Exclude already installed languages
                    if (!installed.has(available.languageId)) {
                        quickInputItems.push(available);
                    }
                }
                quickInput.items = quickInputItems;
            }
        }).finally(() => {
            quickInput.busy = false;
        });
        return new Promise(resolve => {
            quickInput.onDidAccept(async () => {
                var _a;
                const selectedItem = quickInput.selectedItems[0];
                if (selectedItem) {
                    // Some language quick pick items want to install additional languages
                    // We have to await that before returning the selected locale
                    await ((_a = selectedItem.execute) === null || _a === void 0 ? void 0 : _a.call(selectedItem));
                    resolve(selectedItem);
                }
                else {
                    resolve(undefined);
                }
                quickInput.hide();
            });
            quickInput.onDidHide(() => {
                resolve(undefined);
            });
        });
    }
    async getInstalledLanguages() {
        const languageInfos = await this.localizationProvider.getAvailableLanguages();
        const items = [];
        const en = {
            languageId: 'en',
            languageName: 'English',
            localizedLanguageName: 'English'
        };
        languageInfos.push(en);
        for (const language of languageInfos.filter(e => !!e.languageId)) {
            items.push(this.createLanguageQuickPickItem(language));
        }
        return items;
    }
    async getAvailableLanguages() {
        return [];
    }
    createLanguageQuickPickItem(language) {
        let label;
        let description;
        const languageName = language.localizedLanguageName || language.languageName;
        const id = language.languageId;
        const idLabel = id + (nls_1.nls.isSelectedLocale(id) ? ` (${nls_1.nls.localizeByDefault('Current')})` : '');
        if (languageName) {
            label = languageName;
            description = idLabel;
        }
        else {
            label = idLabel;
        }
        return {
            label,
            description,
            languageId: id,
            languageName: language.languageName,
            localizedLanguageName: language.localizedLanguageName
        };
    }
};
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(quick_input_1.QuickInputService),
    (0, tslib_1.__metadata)("design:type", Object)
], LanguageQuickPickService.prototype, "quickInputService", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(localization_1.AsyncLocalizationProvider),
    (0, tslib_1.__metadata)("design:type", Object)
], LanguageQuickPickService.prototype, "localizationProvider", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(window_service_1.WindowService),
    (0, tslib_1.__metadata)("design:type", Object)
], LanguageQuickPickService.prototype, "windowService", void 0);
LanguageQuickPickService = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)()
], LanguageQuickPickService);
exports.LanguageQuickPickService = LanguageQuickPickService;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/icon-theme-service.js":
/*!************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/icon-theme-service.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2019 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.IconThemeService = exports.NoneIconTheme = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/es/inversify.js");
const event_1 = __webpack_require__(/*! ../common/event */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/event.js");
const disposable_1 = __webpack_require__(/*! ../common/disposable */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/disposable.js");
const frontend_application_config_provider_1 = __webpack_require__(/*! ./frontend-application-config-provider */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/frontend-application-config-provider.js");
const preferences_1 = __webpack_require__(/*! ./preferences */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/preferences/index.js");
const debounce = __webpack_require__(/*! lodash.debounce */ "../node_modules/lodash.debounce/index.js");
const ICON_THEME_PREFERENCE_KEY = 'workbench.iconTheme';
let NoneIconTheme = class NoneIconTheme {
    constructor() {
        this.id = 'none';
        this.label = 'None';
        this.description = 'Disable file icons';
        this.hasFileIcons = true;
        this.hasFolderIcons = true;
        this.onDidChangeEmitter = new event_1.Emitter();
        this.onDidChange = this.onDidChangeEmitter.event;
        this.toDeactivate = new disposable_1.DisposableCollection();
    }
    activate() {
        if (this.toDeactivate.disposed) {
            this.toDeactivate.push(disposable_1.Disposable.create(() => this.fireDidChange()));
            this.fireDidChange();
        }
        return this.toDeactivate;
    }
    fireDidChange() {
        this.onDidChangeEmitter.fire({ affects: () => true });
    }
    canHandle() {
        if (this.toDeactivate.disposed) {
            return 0;
        }
        return Number.MAX_SAFE_INTEGER - 1024;
    }
    getIcon() {
        return '';
    }
};
NoneIconTheme = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)()
], NoneIconTheme);
exports.NoneIconTheme = NoneIconTheme;
let IconThemeService = class IconThemeService {
    constructor() {
        this.onDidChangeEmitter = new event_1.Emitter();
        this.onDidChange = this.onDidChangeEmitter.event;
        this._iconThemes = new Map();
        this.onDidChangeCurrentEmitter = new event_1.Emitter();
        this.onDidChangeCurrent = this.onDidChangeCurrentEmitter.event;
        this.toDeactivate = new disposable_1.DisposableCollection();
        this.updateIconThemePreference = debounce(() => this.doUpdateIconThemePreference(), 500);
    }
    get ids() {
        return this._iconThemes.keys();
    }
    get definitions() {
        return this._iconThemes.values();
    }
    getDefinition(id) {
        return this._iconThemes.get(id);
    }
    init() {
        this.register(this.fallback);
        this.setCurrent(this.fallback, false);
        this.preferences.ready.then(() => {
            this.validateActiveTheme();
            this.updateIconThemePreference();
            this.preferences.onPreferencesChanged(changes => {
                if (ICON_THEME_PREFERENCE_KEY in changes) {
                    this.validateActiveTheme();
                }
            });
        });
    }
    register(iconTheme) {
        if (this._iconThemes.has(iconTheme.id)) {
            console.warn(new Error(`Icon theme '${iconTheme.id}' has already been registered, skipping.`));
            return disposable_1.Disposable.NULL;
        }
        this._iconThemes.set(iconTheme.id, iconTheme);
        this.onDidChangeEmitter.fire(undefined);
        this.validateActiveTheme();
        this.updateIconThemePreference();
        return disposable_1.Disposable.create(() => {
            this.unregister(iconTheme.id);
            this.updateIconThemePreference();
        });
    }
    unregister(id) {
        const iconTheme = this._iconThemes.get(id);
        if (!iconTheme) {
            return undefined;
        }
        this._iconThemes.delete(id);
        this.onDidChangeEmitter.fire(undefined);
        if (id === this.getCurrent().id) {
            this.setCurrent(this.default, false);
        }
        return iconTheme;
    }
    get current() {
        return this.getCurrent().id;
    }
    set current(id) {
        const newCurrent = this._iconThemes.get(id);
        if (newCurrent && this.getCurrent().id !== newCurrent.id) {
            this.setCurrent(newCurrent);
        }
    }
    getCurrent() {
        return this.activeTheme;
    }
    /**
     * @param persistSetting If `true`, the theme's id will be set as the value of the `workbench.iconTheme` preference. (default: `true`)
     */
    setCurrent(newCurrent, persistSetting = true) {
        if (newCurrent !== this.getCurrent()) {
            this.activeTheme = newCurrent;
            this.toDeactivate.dispose();
            this.toDeactivate.push(newCurrent.activate());
            this.onDidChangeCurrentEmitter.fire(newCurrent.id);
        }
        if (persistSetting) {
            this.preferences.updateValue(ICON_THEME_PREFERENCE_KEY, newCurrent.id);
        }
    }
    getConfiguredTheme() {
        const configuredId = this.preferences.get(ICON_THEME_PREFERENCE_KEY);
        return configuredId ? this._iconThemes.get(configuredId) : undefined;
    }
    validateActiveTheme() {
        if (this.preferences.isReady) {
            const configured = this.getConfiguredTheme();
            if (configured && configured !== this.getCurrent()) {
                this.setCurrent(configured, false);
            }
        }
    }
    doUpdateIconThemePreference() {
        const preference = this.schemaProvider.getSchemaProperty(ICON_THEME_PREFERENCE_KEY);
        if (preference) {
            const sortedThemes = Array.from(this.definitions).sort((a, b) => a.label.localeCompare(b.label));
            this.schemaProvider.updateSchemaProperty(ICON_THEME_PREFERENCE_KEY, {
                ...preference,
                enum: sortedThemes.map(e => e.id),
                enumItemLabels: sortedThemes.map(e => e.label)
            });
        }
    }
    get default() {
        return this._iconThemes.get(frontend_application_config_provider_1.FrontendApplicationConfigProvider.get().defaultIconTheme) || this.fallback;
    }
    get fallback() {
        return this.noneIconTheme;
    }
};
IconThemeService.STORAGE_KEY = 'iconTheme';
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(NoneIconTheme),
    (0, tslib_1.__metadata)("design:type", NoneIconTheme)
], IconThemeService.prototype, "noneIconTheme", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(preferences_1.PreferenceService),
    (0, tslib_1.__metadata)("design:type", Object)
], IconThemeService.prototype, "preferences", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(preferences_1.PreferenceSchemaProvider),
    (0, tslib_1.__metadata)("design:type", preferences_1.PreferenceSchemaProvider)
], IconThemeService.prototype, "schemaProvider", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.postConstruct)(),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", []),
    (0, tslib_1.__metadata)("design:returntype", void 0)
], IconThemeService.prototype, "init", null);
IconThemeService = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)()
], IconThemeService);
exports.IconThemeService = IconThemeService;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/index.js":
/*!***********************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/index.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2017 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./shell */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/shell/index.js"), exports);
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./frontend-application */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/frontend-application.js"), exports);
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./frontend-application-contribution */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/frontend-application-contribution.js"), exports);
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./keyboard */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/keyboard/index.js"), exports);
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./opener-service */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/opener-service.js"), exports);
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./browser */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/browser.js"), exports);
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./context-menu-renderer */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/context-menu-renderer.js"), exports);
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./widgets */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/widgets/index.js"), exports);
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./dialogs */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/dialogs.js"), exports);
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./tree */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/index.js"), exports);
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./messaging */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/messaging/index.js"), exports);
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./endpoint */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/endpoint.js"), exports);
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./common-frontend-contribution */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/common-frontend-contribution.js"), exports);
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./quick-input */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/quick-input/index.js"), exports);
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./widget-manager */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/widget-manager.js"), exports);
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./saveable */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/saveable.js"), exports);
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./storage-service */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/storage-service.js"), exports);
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./preferences */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/preferences/index.js"), exports);
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./keybinding */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/keybinding.js"), exports);
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./status-bar */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/status-bar/index.js"), exports);
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./label-provider */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/label-provider.js"), exports);
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./widget-open-handler */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/widget-open-handler.js"), exports);
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./navigatable */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/navigatable.js"), exports);
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./diff-uris */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/diff-uris.js"), exports);
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./core-preferences */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/core-preferences.js"), exports);
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./view-container */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/view-container.js"), exports);
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./breadcrumbs */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/breadcrumbs/index.js"), exports);
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./tooltip-service */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tooltip-service.js"), exports);
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./decoration-style */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/decoration-style.js"), exports);
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./styling-service */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/styling-service.js"), exports);
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./hover-service */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/hover-service.js"), exports);


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/keybinding.js":
/*!****************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/keybinding.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2017 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var KeybindingRegistry_1;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.KeybindingRegistry = exports.KeybindingContexts = exports.KeybindingContext = exports.KeybindingContribution = exports.Keybinding = exports.KeybindingScope = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/es/inversify.js");
const os_1 = __webpack_require__(/*! ../common/os */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/os.js");
const event_1 = __webpack_require__(/*! ../common/event */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/event.js");
const command_1 = __webpack_require__(/*! ../common/command */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/command.js");
const disposable_1 = __webpack_require__(/*! ../common/disposable */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/disposable.js");
const keys_1 = __webpack_require__(/*! ./keyboard/keys */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/keyboard/keys.js");
const keyboard_layout_service_1 = __webpack_require__(/*! ./keyboard/keyboard-layout-service */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/keyboard/keyboard-layout-service.js");
const contribution_provider_1 = __webpack_require__(/*! ../common/contribution-provider */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/contribution-provider.js");
const logger_1 = __webpack_require__(/*! ../common/logger */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/logger.js");
const status_bar_1 = __webpack_require__(/*! ./status-bar/status-bar */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/status-bar/status-bar.js");
const context_key_service_1 = __webpack_require__(/*! ./context-key-service */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/context-key-service.js");
const core_preferences_1 = __webpack_require__(/*! ./core-preferences */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/core-preferences.js");
const common = __webpack_require__(/*! ../common/keybinding */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/keybinding.js");
const nls_1 = __webpack_require__(/*! ../common/nls */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/nls.js");
var KeybindingScope;
(function (KeybindingScope) {
    KeybindingScope[KeybindingScope["DEFAULT"] = 0] = "DEFAULT";
    KeybindingScope[KeybindingScope["USER"] = 1] = "USER";
    KeybindingScope[KeybindingScope["WORKSPACE"] = 2] = "WORKSPACE";
    KeybindingScope[KeybindingScope["END"] = 3] = "END";
})(KeybindingScope = exports.KeybindingScope || (exports.KeybindingScope = {}));
(function (KeybindingScope) {
    KeybindingScope.length = KeybindingScope.END - KeybindingScope.DEFAULT;
})(KeybindingScope = exports.KeybindingScope || (exports.KeybindingScope = {}));
exports.Keybinding = common.Keybinding;
exports.KeybindingContribution = Symbol('KeybindingContribution');
exports.KeybindingContext = Symbol('KeybindingContext');
var KeybindingContexts;
(function (KeybindingContexts) {
    KeybindingContexts.NOOP_CONTEXT = {
        id: 'noop.keybinding.context',
        isEnabled: () => true
    };
    KeybindingContexts.DEFAULT_CONTEXT = {
        id: 'default.keybinding.context',
        isEnabled: () => false
    };
})(KeybindingContexts = exports.KeybindingContexts || (exports.KeybindingContexts = {}));
let KeybindingRegistry = KeybindingRegistry_1 = class KeybindingRegistry {
    constructor() {
        this.keySequence = [];
        this.contexts = {};
        this.keymaps = [...Array(KeybindingScope.length)].map(() => []);
        this.keybindingsChanged = new event_1.Emitter();
        this.toResetKeymap = new Map();
    }
    async onStart() {
        await this.keyboardLayoutService.initialize();
        this.keyboardLayoutService.onKeyboardLayoutChanged(newLayout => {
            this.clearResolvedKeybindings();
            this.keybindingsChanged.fire(undefined);
        });
        this.registerContext(KeybindingContexts.NOOP_CONTEXT);
        this.registerContext(KeybindingContexts.DEFAULT_CONTEXT);
        this.registerContext(...this.contextProvider.getContributions());
        for (const contribution of this.contributions.getContributions()) {
            contribution.registerKeybindings(this);
        }
    }
    /**
     * Event that is fired when the resolved keybindings change due to a different keyboard layout
     * or when a new keymap is being set
     */
    get onKeybindingsChanged() {
        return this.keybindingsChanged.event;
    }
    /**
     * Registers the keybinding context arguments into the application. Fails when an already registered
     * context is being registered.
     *
     * @param contexts the keybinding contexts to register into the application.
     */
    registerContext(...contexts) {
        for (const context of contexts) {
            const { id } = context;
            if (this.contexts[id]) {
                this.logger.error(`A keybinding context with ID ${id} is already registered.`);
            }
            else {
                this.contexts[id] = context;
            }
        }
    }
    /**
     * Register a default keybinding to the registry.
     *
     * Keybindings registered later have higher priority during evaluation.
     *
     * @param binding the keybinding to be registered
     */
    registerKeybinding(binding) {
        return this.doRegisterKeybinding(binding);
    }
    /**
     * Register multiple default keybindings to the registry
     *
     * @param bindings An array of keybinding to be registered
     */
    registerKeybindings(...bindings) {
        return this.doRegisterKeybindings(bindings, KeybindingScope.DEFAULT);
    }
    unregisterKeybinding(arg) {
        const keymap = this.keymaps[KeybindingScope.DEFAULT];
        const filter = command_1.Command.is(arg)
            ? ({ command }) => command === arg.id
            : ({ keybinding }) => exports.Keybinding.is(arg)
                ? keybinding === arg.keybinding
                : keybinding === arg;
        for (const binding of keymap.filter(filter)) {
            const idx = keymap.indexOf(binding);
            if (idx !== -1) {
                keymap.splice(idx, 1);
            }
        }
    }
    doRegisterKeybindings(bindings, scope = KeybindingScope.DEFAULT) {
        const toDispose = new disposable_1.DisposableCollection();
        for (const binding of bindings) {
            toDispose.push(this.doRegisterKeybinding(binding, scope));
        }
        return toDispose;
    }
    doRegisterKeybinding(binding, scope = KeybindingScope.DEFAULT) {
        try {
            this.resolveKeybinding(binding);
            const scoped = Object.assign(binding, { scope });
            this.insertBindingIntoScope(scoped, scope);
            return disposable_1.Disposable.create(() => {
                const index = this.keymaps[scope].indexOf(scoped);
                if (index !== -1) {
                    this.keymaps[scope].splice(index, 1);
                }
            });
        }
        catch (error) {
            this.logger.warn(`Could not register keybinding:\n  ${common.Keybinding.stringify(binding)}\n${error}`);
            return disposable_1.Disposable.NULL;
        }
    }
    /**
     * Ensures that keybindings are inserted in order of increasing length of binding to ensure that if a
     * user triggers a short keybinding (e.g. ctrl+k), the UI won't wait for a longer one (e.g. ctrl+k enter)
     */
    insertBindingIntoScope(item, scope) {
        const scopedKeymap = this.keymaps[scope];
        const getNumberOfKeystrokes = (binding) => { var _a, _b; return ((_b = (_a = binding.keybinding.trim().match(/\s/g)) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0) + 1; };
        const numberOfKeystrokesInBinding = getNumberOfKeystrokes(item);
        const indexOfFirstItemWithEqualStrokes = scopedKeymap.findIndex(existingBinding => getNumberOfKeystrokes(existingBinding) === numberOfKeystrokesInBinding);
        if (indexOfFirstItemWithEqualStrokes > -1) {
            scopedKeymap.splice(indexOfFirstItemWithEqualStrokes, 0, item);
        }
        else {
            scopedKeymap.push(item);
        }
    }
    /**
     * Ensure that the `resolved` property of the given binding is set by calling the KeyboardLayoutService.
     */
    resolveKeybinding(binding) {
        if (!binding.resolved) {
            const sequence = keys_1.KeySequence.parse(binding.keybinding);
            binding.resolved = sequence.map(code => this.keyboardLayoutService.resolveKeyCode(code));
        }
        return binding.resolved;
    }
    /**
     * Clear all `resolved` properties of registered keybindings so the KeyboardLayoutService is called
     * again to resolve them. This is necessary when the user's keyboard layout has changed.
     */
    clearResolvedKeybindings() {
        for (let i = KeybindingScope.DEFAULT; i < KeybindingScope.END; i++) {
            const bindings = this.keymaps[i];
            for (let j = 0; j < bindings.length; j++) {
                const binding = bindings[j];
                binding.resolved = undefined;
            }
        }
    }
    /**
     * Checks whether a colliding {@link common.Keybinding} exists in a specific scope.
     * @param binding the keybinding to check
     * @param scope the keybinding scope to check
     * @returns true if there is a colliding keybinding
     */
    containsKeybindingInScope(binding, scope = KeybindingScope.USER) {
        const bindingKeySequence = this.resolveKeybinding(binding);
        const collisions = this.getKeySequenceCollisions(this.getUsableBindings(this.keymaps[scope]), bindingKeySequence)
            .filter(b => b.context === binding.context && !b.when && !binding.when);
        if (collisions.full.length > 0) {
            return true;
        }
        if (collisions.partial.length > 0) {
            return true;
        }
        if (collisions.shadow.length > 0) {
            return true;
        }
        return false;
    }
    /**
     * Get a user visible representation of a {@link common.Keybinding}.
     * @returns an array of strings representing all elements of the {@link KeySequence} defined by the {@link common.Keybinding}
     * @param keybinding the keybinding
     * @param separator the separator to be used to stringify {@link KeyCode}s that are part of the {@link KeySequence}
     */
    acceleratorFor(keybinding, separator = ' ', asciiOnly = false) {
        const bindingKeySequence = this.resolveKeybinding(keybinding);
        return this.acceleratorForSequence(bindingKeySequence, separator, asciiOnly);
    }
    /**
     * Get a user visible representation of a {@link KeySequence}.
     * @returns an array of strings representing all elements of the {@link KeySequence}
     * @param keySequence the keysequence
     * @param separator the separator to be used to stringify {@link KeyCode}s that are part of the {@link KeySequence}
     */
    acceleratorForSequence(keySequence, separator = ' ', asciiOnly = false) {
        return keySequence.map(keyCode => this.acceleratorForKeyCode(keyCode, separator, asciiOnly));
    }
    /**
     * Get a user visible representation of a key code (a key with modifiers).
     * @returns a string representing the {@link KeyCode}
     * @param keyCode the keycode
     * @param separator the separator used to separate keys (key and modifiers) in the returning string
     * @param asciiOnly if `true`, no special characters will be substituted into the string returned. Ensures correct keyboard shortcuts in Electron menus.
     */
    acceleratorForKeyCode(keyCode, separator = ' ', asciiOnly = false) {
        return this.componentsForKeyCode(keyCode, asciiOnly).join(separator);
    }
    componentsForKeyCode(keyCode, asciiOnly = false) {
        const keyCodeResult = [];
        const useSymbols = os_1.isOSX && !asciiOnly;
        if (keyCode.meta && os_1.isOSX) {
            keyCodeResult.push(useSymbols ? '⌘' : 'Cmd');
        }
        if (keyCode.ctrl) {
            keyCodeResult.push(useSymbols ? '⌃' : 'Ctrl');
        }
        if (keyCode.alt) {
            keyCodeResult.push(useSymbols ? '⌥' : 'Alt');
        }
        if (keyCode.shift) {
            keyCodeResult.push(useSymbols ? '⇧' : 'Shift');
        }
        if (keyCode.key) {
            keyCodeResult.push(this.acceleratorForKey(keyCode.key, asciiOnly));
        }
        return keyCodeResult;
    }
    /**
     * @param asciiOnly if `true`, no special characters will be substituted into the string returned. Ensures correct keyboard shortcuts in Electron menus.
     *
     * Return a user visible representation of a single key.
     */
    acceleratorForKey(key, asciiOnly = false) {
        if (os_1.isOSX && !asciiOnly) {
            if (key === keys_1.Key.ARROW_LEFT) {
                return '←';
            }
            if (key === keys_1.Key.ARROW_RIGHT) {
                return '→';
            }
            if (key === keys_1.Key.ARROW_UP) {
                return '↑';
            }
            if (key === keys_1.Key.ARROW_DOWN) {
                return '↓';
            }
        }
        const keyString = this.keyboardLayoutService.getKeyboardCharacter(key);
        if (key.keyCode >= keys_1.Key.KEY_A.keyCode && key.keyCode <= keys_1.Key.KEY_Z.keyCode ||
            key.keyCode >= keys_1.Key.F1.keyCode && key.keyCode <= keys_1.Key.F24.keyCode) {
            return keyString.toUpperCase();
        }
        else if (keyString.length > 1) {
            return keyString.charAt(0).toUpperCase() + keyString.slice(1);
        }
        else {
            return keyString;
        }
    }
    /**
     * Finds collisions for a key sequence inside a list of bindings (error-free)
     *
     * @param bindings the reference bindings
     * @param candidate the sequence to match
     */
    getKeySequenceCollisions(bindings, candidate) {
        const result = new KeybindingRegistry_1.KeybindingsResult();
        for (const binding of bindings) {
            try {
                const bindingKeySequence = this.resolveKeybinding(binding);
                const compareResult = keys_1.KeySequence.compare(candidate, bindingKeySequence);
                switch (compareResult) {
                    case keys_1.KeySequence.CompareResult.FULL: {
                        result.full.push(binding);
                        break;
                    }
                    case keys_1.KeySequence.CompareResult.PARTIAL: {
                        result.partial.push(binding);
                        break;
                    }
                    case keys_1.KeySequence.CompareResult.SHADOW: {
                        result.shadow.push(binding);
                        break;
                    }
                }
            }
            catch (error) {
                this.logger.warn(error);
            }
        }
        return result;
    }
    /**
     * Get all keybindings associated to a commandId.
     *
     * @param commandId The ID of the command for which we are looking for keybindings.
     * @returns an array of {@link ScopedKeybinding}
     */
    getKeybindingsForCommand(commandId) {
        const result = [];
        const disabledBindings = new Set();
        for (let scope = KeybindingScope.END - 1; scope >= KeybindingScope.DEFAULT; scope--) {
            this.keymaps[scope].forEach(binding => {
                var _a;
                if ((_a = binding.command) === null || _a === void 0 ? void 0 : _a.startsWith('-')) {
                    disabledBindings.add(JSON.stringify({ command: binding.command.substring(1), binding: binding.keybinding, context: binding.context, when: binding.when }));
                }
                else {
                    const command = this.commandRegistry.getCommand(binding.command);
                    if (command
                        && command.id === commandId
                        && !disabledBindings.has(JSON.stringify({ command: binding.command, binding: binding.keybinding, context: binding.context, when: binding.when }))) {
                        result.push({ ...binding, scope });
                    }
                }
            });
        }
        return result;
    }
    isActive(binding) {
        /* Pseudo commands like "passthrough" are always active (and not found
           in the command registry).  */
        if (this.isPseudoCommand(binding.command)) {
            return true;
        }
        const command = this.commandRegistry.getCommand(binding.command);
        return !!command && !!this.commandRegistry.getActiveHandler(command.id);
    }
    /**
     * Tries to execute a keybinding.
     *
     * @param binding to execute
     * @param event keyboard event.
     */
    executeKeyBinding(binding, event) {
        if (this.isPseudoCommand(binding.command)) {
            /* Don't do anything, let the event propagate.  */
        }
        else {
            const command = this.commandRegistry.getCommand(binding.command);
            if (command) {
                if (this.commandRegistry.isEnabled(binding.command, binding.args)) {
                    this.commandRegistry.executeCommand(binding.command, binding.args)
                        .catch(e => console.error('Failed to execute command:', e));
                }
                /* Note that if a keybinding is in context but the command is
                   not active we still stop the processing here.  */
                event.preventDefault();
                event.stopPropagation();
            }
        }
    }
    /**
     * Only execute if it has no context (global context) or if we're in that context.
     */
    isEnabled(binding, event) {
        return this.isEnabledInScope(binding, event.target);
    }
    isEnabledInScope(binding, target) {
        const context = binding.context && this.contexts[binding.context];
        if (binding.command && (!this.isPseudoCommand(binding.command) && !this.commandRegistry.isEnabled(binding.command, binding.args))) {
            return false;
        }
        if (context && !context.isEnabled(binding)) {
            return false;
        }
        if (binding.when && !this.whenContextService.match(binding.when, target)) {
            return false;
        }
        return true;
    }
    dispatchCommand(id, target) {
        const keybindings = this.getKeybindingsForCommand(id);
        if (keybindings.length) {
            for (const keyCode of this.resolveKeybinding(keybindings[0])) {
                this.dispatchKeyDown(keyCode, target);
            }
        }
    }
    dispatchKeyDown(input, target = document.activeElement || window) {
        const eventInit = this.asKeyboardEventInit(input);
        const emulatedKeyboardEvent = new KeyboardEvent('keydown', eventInit);
        target.dispatchEvent(emulatedKeyboardEvent);
    }
    asKeyboardEventInit(input) {
        if (typeof input === 'string') {
            return this.asKeyboardEventInit(keys_1.KeyCode.createKeyCode(input));
        }
        if (input instanceof keys_1.KeyCode) {
            return {
                metaKey: input.meta,
                shiftKey: input.shift,
                altKey: input.alt,
                ctrlKey: input.ctrl,
                code: input.key && input.key.code,
                key: (input && input.character) || (input.key && input.key.code),
                keyCode: input.key && input.key.keyCode
            };
        }
        return input;
    }
    registerEventListeners(win) {
        /* vvv HOTFIX begin vvv
        *
        * This is a hotfix against issues eclipse/theia#6459 and gitpod-io/gitpod#875 .
        * It should be reverted after Theia was updated to the newer Monaco.
        */
        let inComposition = false;
        const compositionStart = () => {
            inComposition = true;
        };
        win.document.addEventListener('compositionstart', compositionStart);
        const compositionEnd = () => {
            inComposition = false;
        };
        win.document.addEventListener('compositionend', compositionEnd);
        const keydown = (event) => {
            if (inComposition !== true) {
                this.run(event);
            }
        };
        win.document.addEventListener('keydown', keydown, true);
        return disposable_1.Disposable.create(() => {
            win.document.removeEventListener('compositionstart', compositionStart);
            win.document.removeEventListener('compositionend', compositionEnd);
            win.document.removeEventListener('keydown', keydown);
        });
    }
    /**
     * Run the command matching to the given keyboard event.
     */
    run(event) {
        if (event.defaultPrevented) {
            return;
        }
        const eventDispatch = this.corePreferences['keyboard.dispatch'];
        const keyCode = keys_1.KeyCode.createKeyCode(event, eventDispatch);
        /* Keycode is only a modifier, next keycode will be modifier + key.
           Ignore this one.  */
        if (keyCode.isModifierOnly()) {
            return;
        }
        this.keyboardLayoutService.validateKeyCode(keyCode);
        this.keySequence.push(keyCode);
        const match = this.matchKeybinding(this.keySequence, event);
        if (match && match.kind === 'partial') {
            /* Accumulate the keysequence */
            event.preventDefault();
            event.stopPropagation();
            this.statusBar.setElement('keybinding-status', {
                text: nls_1.nls.localize('theia/core/keybindingStatus', '{0} was pressed, waiting for more keys', `(${this.acceleratorForSequence(this.keySequence, '+')})`),
                alignment: status_bar_1.StatusBarAlignment.LEFT,
                priority: 2
            });
        }
        else {
            if (match && match.kind === 'full') {
                this.executeKeyBinding(match.binding, event);
            }
            this.keySequence = [];
            this.statusBar.removeElement('keybinding-status');
        }
    }
    /**
     * Match first binding in the current context.
     * Keybindings ordered by a scope and by a registration order within the scope.
     *
     * FIXME:
     * This method should run very fast since it happens on each keystroke. We should reconsider how keybindings are stored.
     * It should be possible to look up full and partial keybinding for given key sequence for constant time using some kind of tree.
     * Such tree should not contain disabled keybindings and be invalidated whenever the registry is changed.
     */
    matchKeybinding(keySequence, event) {
        let disabled;
        const isEnabled = (binding) => {
            if (event && !this.isEnabled(binding, event)) {
                return false;
            }
            const { command, context, when, keybinding } = binding;
            if (!this.isUsable(binding)) {
                disabled = disabled || new Set();
                disabled.add(JSON.stringify({ command: command.substring(1), context, when, keybinding }));
                return false;
            }
            return !(disabled === null || disabled === void 0 ? void 0 : disabled.has(JSON.stringify({ command, context, when, keybinding })));
        };
        for (let scope = KeybindingScope.END; --scope >= KeybindingScope.DEFAULT;) {
            for (const binding of this.keymaps[scope]) {
                const resolved = this.resolveKeybinding(binding);
                const compareResult = keys_1.KeySequence.compare(keySequence, resolved);
                if (compareResult === keys_1.KeySequence.CompareResult.FULL && isEnabled(binding)) {
                    return { kind: 'full', binding };
                }
                if (compareResult === keys_1.KeySequence.CompareResult.PARTIAL && isEnabled(binding)) {
                    return { kind: 'partial', binding };
                }
            }
        }
        return undefined;
    }
    /**
     * Returns true if the binding is usable
     * @param binding Binding to be checked
     */
    isUsable(binding) {
        return binding.command.charAt(0) !== '-';
    }
    /**
     * Return a new filtered array containing only the usable bindings among the input bindings
     * @param bindings Bindings to filter
     */
    getUsableBindings(bindings) {
        return bindings.filter(binding => this.isUsable(binding));
    }
    /**
     * Return true of string a pseudo-command id, in other words a command id
     * that has a special meaning and that we won't find in the command
     * registry.
     *
     * @param commandId commandId to test
     */
    isPseudoCommand(commandId) {
        return commandId === KeybindingRegistry_1.PASSTHROUGH_PSEUDO_COMMAND;
    }
    /**
     * Sets a new keymap replacing all existing {@link common.Keybinding}s in the given scope.
     * @param scope the keybinding scope
     * @param bindings an array containing the new {@link common.Keybinding}s
     */
    setKeymap(scope, bindings) {
        this.resetKeybindingsForScope(scope);
        this.toResetKeymap.set(scope, this.doRegisterKeybindings(bindings, scope));
        this.keybindingsChanged.fire(undefined);
    }
    /**
     * Reset keybindings for a specific scope
     * @param scope scope to reset the keybindings for
     */
    resetKeybindingsForScope(scope) {
        const toReset = this.toResetKeymap.get(scope);
        if (toReset) {
            toReset.dispose();
        }
    }
    /**
     * Reset keybindings for all scopes(only leaves the default keybindings mapped)
     */
    resetKeybindings() {
        for (let i = KeybindingScope.DEFAULT + 1; i < KeybindingScope.END; i++) {
            this.keymaps[i] = [];
        }
    }
    /**
     * Get all {@link common.Keybinding}s for a {@link KeybindingScope}.
     * @returns an array of {@link common.ScopedKeybinding}
     * @param scope the keybinding scope to retrieve the {@link common.Keybinding}s for.
     */
    getKeybindingsByScope(scope) {
        return this.keymaps[scope];
    }
};
KeybindingRegistry.PASSTHROUGH_PSEUDO_COMMAND = 'passthrough';
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(core_preferences_1.CorePreferences),
    (0, tslib_1.__metadata)("design:type", Object)
], KeybindingRegistry.prototype, "corePreferences", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(keyboard_layout_service_1.KeyboardLayoutService),
    (0, tslib_1.__metadata)("design:type", keyboard_layout_service_1.KeyboardLayoutService)
], KeybindingRegistry.prototype, "keyboardLayoutService", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(contribution_provider_1.ContributionProvider),
    (0, inversify_1.named)(exports.KeybindingContext),
    (0, tslib_1.__metadata)("design:type", Object)
], KeybindingRegistry.prototype, "contextProvider", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(command_1.CommandRegistry),
    (0, tslib_1.__metadata)("design:type", command_1.CommandRegistry)
], KeybindingRegistry.prototype, "commandRegistry", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(contribution_provider_1.ContributionProvider),
    (0, inversify_1.named)(exports.KeybindingContribution),
    (0, tslib_1.__metadata)("design:type", Object)
], KeybindingRegistry.prototype, "contributions", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(status_bar_1.StatusBar),
    (0, tslib_1.__metadata)("design:type", Object)
], KeybindingRegistry.prototype, "statusBar", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(logger_1.ILogger),
    (0, tslib_1.__metadata)("design:type", Object)
], KeybindingRegistry.prototype, "logger", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(context_key_service_1.ContextKeyService),
    (0, tslib_1.__metadata)("design:type", Object)
], KeybindingRegistry.prototype, "whenContextService", void 0);
KeybindingRegistry = KeybindingRegistry_1 = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)()
], KeybindingRegistry);
exports.KeybindingRegistry = KeybindingRegistry;
(function (KeybindingRegistry) {
    class KeybindingsResult {
        constructor() {
            this.full = [];
            this.partial = [];
            this.shadow = [];
        }
        /**
         * Merge two results together inside `this`
         *
         * @param other the other KeybindingsResult to merge with
         * @return this
         */
        merge(other) {
            this.full.push(...other.full);
            this.partial.push(...other.partial);
            this.shadow.push(...other.shadow);
            return this;
        }
        /**
         * Returns a new filtered KeybindingsResult
         *
         * @param fn callback filter on the results
         * @return filtered new result
         */
        filter(fn) {
            const result = new KeybindingsResult();
            result.full = this.full.filter(fn);
            result.partial = this.partial.filter(fn);
            result.shadow = this.shadow.filter(fn);
            return result;
        }
    }
    KeybindingRegistry.KeybindingsResult = KeybindingsResult;
})(KeybindingRegistry = exports.KeybindingRegistry || (exports.KeybindingRegistry = {}));
exports.KeybindingRegistry = KeybindingRegistry;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/keyboard/browser-keyboard-frontend-contribution.js":
/*!*****************************************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/keyboard/browser-keyboard-frontend-contribution.js ***!
  \*****************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2019 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BrowserKeyboardFrontendContribution = exports.KeyboardCommands = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/es/inversify.js");
const os_1 = __webpack_require__(/*! ../../common/os */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/os.js");
const command_1 = __webpack_require__(/*! ../../common/command */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/command.js");
const browser_keyboard_layout_provider_1 = __webpack_require__(/*! ./browser-keyboard-layout-provider */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/keyboard/browser-keyboard-layout-provider.js");
const quick_input_1 = __webpack_require__(/*! ../quick-input */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/quick-input/index.js");
const nls_1 = __webpack_require__(/*! ../../common/nls */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/nls.js");
var KeyboardCommands;
(function (KeyboardCommands) {
    const KEYBOARD_CATEGORY = 'Keyboard';
    const KEYBOARD_CATEGORY_KEY = nls_1.nls.getDefaultKey(KEYBOARD_CATEGORY);
    KeyboardCommands.CHOOSE_KEYBOARD_LAYOUT = command_1.Command.toLocalizedCommand({
        id: 'core.keyboard.choose',
        category: KEYBOARD_CATEGORY,
        label: 'Choose Keyboard Layout',
    }, 'theia/core/keyboard/choose', KEYBOARD_CATEGORY_KEY);
})(KeyboardCommands = exports.KeyboardCommands || (exports.KeyboardCommands = {}));
let BrowserKeyboardFrontendContribution = class BrowserKeyboardFrontendContribution {
    registerCommands(commandRegistry) {
        commandRegistry.registerCommand(KeyboardCommands.CHOOSE_KEYBOARD_LAYOUT, {
            execute: () => this.chooseLayout()
        });
    }
    async chooseLayout() {
        var _a;
        const current = this.layoutProvider.currentLayoutData;
        const autodetect = {
            label: nls_1.nls.localizeByDefault('Auto Detect'),
            description: this.layoutProvider.currentLayoutSource !== 'user-choice' ? nls_1.nls.localize('theia/core/keyboard/current', '(current: {0})', current.name) : undefined,
            detail: nls_1.nls.localize('theia/core/keyboard/tryDetect', 'Try to detect the keyboard layout from browser information and pressed keys.'),
            value: 'autodetect'
        };
        const pcLayouts = this.layoutProvider.allLayoutData
            .filter(layout => layout.hardware === 'pc')
            .sort((a, b) => compare(a.name, b.name))
            .map(layout => this.toQuickPickValue(layout, current === layout));
        const macLayouts = this.layoutProvider.allLayoutData
            .filter(layout => layout.hardware === 'mac')
            .sort((a, b) => compare(a.name, b.name))
            .map(layout => this.toQuickPickValue(layout, current === layout));
        let layouts;
        const macKeyboards = nls_1.nls.localize('theia/core/keyboard/mac', 'Mac Keyboards');
        const pcKeyboards = nls_1.nls.localize('theia/core/keyboard/pc', 'PC Keyboards');
        if (os_1.isOSX) {
            layouts = [
                autodetect,
                { type: 'separator', label: macKeyboards }, ...macLayouts,
                { type: 'separator', label: pcKeyboards }, ...pcLayouts
            ];
        }
        else {
            layouts = [
                autodetect,
                { type: 'separator', label: pcKeyboards }, ...pcLayouts,
                { type: 'separator', label: macKeyboards }, ...macLayouts
            ];
        }
        const selectedItem = await ((_a = this.quickInputService) === null || _a === void 0 ? void 0 : _a.showQuickPick(layouts, { placeholder: nls_1.nls.localize('theia/core/keyboard/chooseLayout', 'Choose a keyboard layout') }));
        if (selectedItem && ('value' in selectedItem)) {
            return this.layoutProvider.setLayoutData(selectedItem.value);
        }
    }
    toQuickPickValue(layout, isCurrent) {
        return {
            label: layout.name,
            description: `${layout.hardware === 'mac' ? 'Mac' : 'PC'} (${layout.language})${isCurrent ? nls_1.nls.localize('theia/core/keyboard/currentLayout', ' - current layout') : ''}`,
            value: layout
        };
    }
};
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(browser_keyboard_layout_provider_1.BrowserKeyboardLayoutProvider),
    (0, tslib_1.__metadata)("design:type", browser_keyboard_layout_provider_1.BrowserKeyboardLayoutProvider)
], BrowserKeyboardFrontendContribution.prototype, "layoutProvider", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(quick_input_1.QuickInputService),
    (0, inversify_1.optional)(),
    (0, tslib_1.__metadata)("design:type", Object)
], BrowserKeyboardFrontendContribution.prototype, "quickInputService", void 0);
BrowserKeyboardFrontendContribution = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)()
], BrowserKeyboardFrontendContribution);
exports.BrowserKeyboardFrontendContribution = BrowserKeyboardFrontendContribution;
function compare(a, b) {
    if (a < b) {
        return -1;
    }
    if (a > b) {
        return 1;
    }
    return 0;
}


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/keyboard/browser-keyboard-layout-provider.js":
/*!***********************************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/keyboard/browser-keyboard-layout-provider.js ***!
  \***********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2019 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.KeyboardTester = exports.DEFAULT_LAYOUT_DATA = exports.BrowserKeyboardLayoutProvider = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/es/inversify.js");
const os_1 = __webpack_require__(/*! ../../common/os */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/os.js");
const event_1 = __webpack_require__(/*! ../../common/event */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/event.js");
const logger_1 = __webpack_require__(/*! ../../common/logger */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/logger.js");
const promise_util_1 = __webpack_require__(/*! ../../common/promise-util */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/promise-util.js");
const storage_service_1 = __webpack_require__(/*! ../storage-service */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/storage-service.js");
let BrowserKeyboardLayoutProvider = class BrowserKeyboardLayoutProvider {
    constructor() {
        this.initialized = new promise_util_1.Deferred();
        this.nativeLayoutChanged = new event_1.Emitter();
        this.tester = new KeyboardTester(loadAllLayouts());
        this.source = 'pressed-keys';
        this.currentLayout = exports.DEFAULT_LAYOUT_DATA;
    }
    get onDidChangeNativeLayout() {
        return this.nativeLayoutChanged.event;
    }
    get allLayoutData() {
        return this.tester.candidates.slice();
    }
    get currentLayoutData() {
        return this.currentLayout;
    }
    get currentLayoutSource() {
        return this.source;
    }
    init() {
        this.doInit();
    }
    async doInit() {
        await this.loadState();
        const keyboard = navigator.keyboard;
        if (keyboard && keyboard.addEventListener) {
            keyboard.addEventListener('layoutchange', async () => {
                const newLayout = await this.getNativeLayout();
                this.nativeLayoutChanged.fire(newLayout);
            });
        }
        this.initialized.resolve();
    }
    async getNativeLayout() {
        await this.initialized.promise;
        if (this.source === 'user-choice') {
            return this.currentLayout.raw;
        }
        const [layout, source] = await this.autodetect();
        this.setCurrent(layout, source);
        return layout.raw;
    }
    /**
     * Set user-chosen keyboard layout data.
     */
    async setLayoutData(layout) {
        if (layout === 'autodetect') {
            if (this.source === 'user-choice') {
                const [newLayout, source] = await this.autodetect();
                this.setCurrent(newLayout, source);
                this.nativeLayoutChanged.fire(newLayout.raw);
                return newLayout;
            }
            return this.currentLayout;
        }
        else {
            if (this.source !== 'user-choice' || layout !== this.currentLayout) {
                this.setCurrent(layout, 'user-choice');
                this.nativeLayoutChanged.fire(layout.raw);
            }
            return layout;
        }
    }
    /**
     * Test all known keyboard layouts with the given combination of pressed key and
     * produced character. Matching layouts have their score increased (see class
     * KeyboardTester). If this leads to a change of the top-scoring layout, a layout
     * change event is fired.
     */
    validateKey(keyCode) {
        if (this.source !== 'pressed-keys') {
            return;
        }
        const accepted = this.tester.updateScores(keyCode);
        if (!accepted) {
            return;
        }
        const layout = this.selectLayout();
        if (layout !== this.currentLayout && layout !== exports.DEFAULT_LAYOUT_DATA) {
            this.setCurrent(layout, 'pressed-keys');
            this.nativeLayoutChanged.fire(layout.raw);
        }
    }
    setCurrent(layout, source) {
        this.currentLayout = layout;
        this.source = source;
        this.saveState();
        if (this.tester.inputCount && (source === 'pressed-keys' || source === 'navigator.keyboard')) {
            const from = source === 'pressed-keys' ? 'pressed keys' : 'browser API';
            const hardware = layout.hardware === 'mac' ? 'Mac' : 'PC';
            this.logger.info(`Detected keyboard layout from ${from}: ${layout.name} (${hardware})`);
        }
    }
    async autodetect() {
        const keyboard = navigator.keyboard;
        if (keyboard && keyboard.getLayoutMap) {
            try {
                const layoutMap = await keyboard.getLayoutMap();
                this.testLayoutMap(layoutMap);
                return [this.selectLayout(), 'navigator.keyboard'];
            }
            catch (error) {
                this.logger.warn('Failed to obtain keyboard layout map.', error);
            }
        }
        return [this.selectLayout(), 'pressed-keys'];
    }
    /**
     * @param layoutMap a keyboard layout map according to https://wicg.github.io/keyboard-map/
     */
    testLayoutMap(layoutMap) {
        this.tester.reset();
        for (const [code, key] of layoutMap.entries()) {
            this.tester.updateScores({ code, character: key });
        }
    }
    /**
     * Select a layout based on the current tester state and the operating system
     * and language detected from the browser.
     */
    selectLayout() {
        const candidates = this.tester.candidates;
        const scores = this.tester.scores;
        const topScore = this.tester.topScore;
        const language = navigator.language;
        let matchingOScount = 0;
        let topScoringCount = 0;
        for (let i = 0; i < candidates.length; i++) {
            if (scores[i] === topScore) {
                const candidate = candidates[i];
                if (osMatches(candidate.hardware)) {
                    if (language && language.startsWith(candidate.language)) {
                        return candidate;
                    }
                    matchingOScount++;
                }
                topScoringCount++;
            }
        }
        if (matchingOScount >= 1) {
            return candidates.find((c, i) => scores[i] === topScore && osMatches(c.hardware));
        }
        if (topScoringCount >= 1) {
            return candidates.find((_, i) => scores[i] === topScore);
        }
        return exports.DEFAULT_LAYOUT_DATA;
    }
    saveState() {
        const data = {
            tester: this.tester.getState(),
            source: this.source,
            currentLayout: this.currentLayout !== exports.DEFAULT_LAYOUT_DATA ? getLayoutId(this.currentLayout) : undefined
        };
        return this.storageService.setData('keyboard', data);
    }
    async loadState() {
        const data = await this.storageService.getData('keyboard');
        if (data) {
            this.tester.setState(data.tester || {});
            this.source = data.source || 'pressed-keys';
            if (data.currentLayout) {
                const layout = this.tester.candidates.find(c => getLayoutId(c) === data.currentLayout);
                if (layout) {
                    this.currentLayout = layout;
                }
            }
            else {
                this.currentLayout = exports.DEFAULT_LAYOUT_DATA;
            }
        }
    }
};
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(logger_1.ILogger),
    (0, tslib_1.__metadata)("design:type", Object)
], BrowserKeyboardLayoutProvider.prototype, "logger", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(storage_service_1.LocalStorageService),
    (0, tslib_1.__metadata)("design:type", storage_service_1.LocalStorageService)
], BrowserKeyboardLayoutProvider.prototype, "storageService", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.postConstruct)(),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", []),
    (0, tslib_1.__metadata)("design:returntype", void 0)
], BrowserKeyboardLayoutProvider.prototype, "init", null);
BrowserKeyboardLayoutProvider = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)()
], BrowserKeyboardLayoutProvider);
exports.BrowserKeyboardLayoutProvider = BrowserKeyboardLayoutProvider;
function osMatches(hardware) {
    return os_1.isOSX ? hardware === 'mac' : hardware === 'pc';
}
/**
 * This is the fallback keyboard layout selected when nothing else matches.
 * It has an empty mapping, so user inputs are handled like with a standard US keyboard.
 */
exports.DEFAULT_LAYOUT_DATA = {
    name: 'US',
    hardware: os_1.isOSX ? 'mac' : 'pc',
    language: 'en',
    raw: {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        info: {},
        mapping: {}
    }
};
/**
 * Holds score values for all known keyboard layouts. Scores are updated
 * by comparing key codes with the corresponding character produced by
 * the user's keyboard.
 */
class KeyboardTester {
    constructor(candidates) {
        this.candidates = candidates;
        this.topScore = 0;
        this.testedInputs = new Map();
        this.scores = this.candidates.map(() => 0);
    }
    get inputCount() {
        return this.testedInputs.size;
    }
    reset() {
        for (let i = 0; i < this.scores.length; i++) {
            this.scores[i] = 0;
        }
        this.topScore = 0;
        this.testedInputs.clear();
    }
    updateScores(input) {
        let property;
        if (input.shiftKey && input.altKey) {
            property = 'withShiftAltGr';
        }
        else if (input.shiftKey) {
            property = 'withShift';
        }
        else if (input.altKey) {
            property = 'withAltGr';
        }
        else {
            property = 'value';
        }
        const inputKey = `${input.code}.${property}`;
        if (this.testedInputs.has(inputKey)) {
            if (this.testedInputs.get(inputKey) === input.character) {
                return false;
            }
            else {
                // The same input keystroke leads to a different character:
                // probably a keyboard layout change, so forget all previous scores
                this.reset();
            }
        }
        const scores = this.scores;
        for (let i = 0; i < this.candidates.length; i++) {
            scores[i] += this.testCandidate(this.candidates[i], input, property);
            if (scores[i] > this.topScore) {
                this.topScore = scores[i];
            }
        }
        this.testedInputs.set(inputKey, input.character);
        return true;
    }
    testCandidate(candidate, input, property) {
        const keyMapping = candidate.raw.mapping[input.code];
        if (keyMapping && keyMapping[property]) {
            return keyMapping[property] === input.character ? 1 : 0;
        }
        else {
            return 0;
        }
    }
    getState() {
        const scores = {};
        for (let i = 0; i < this.scores.length; i++) {
            scores[getLayoutId(this.candidates[i])] = this.scores[i];
        }
        const testedInputs = {};
        for (const [key, character] of this.testedInputs.entries()) {
            testedInputs[key] = character;
        }
        return {
            scores,
            topScore: this.topScore,
            testedInputs
        };
    }
    setState(state) {
        this.reset();
        if (state.scores) {
            const layoutIds = this.candidates.map(getLayoutId);
            for (const id in state.scores) {
                if (state.scores.hasOwnProperty(id)) {
                    const index = layoutIds.indexOf(id);
                    if (index > 0) {
                        this.scores[index] = state.scores[id];
                    }
                }
            }
        }
        if (state.topScore) {
            this.topScore = state.topScore;
        }
        if (state.testedInputs) {
            for (const key in state.testedInputs) {
                if (state.testedInputs.hasOwnProperty(key)) {
                    this.testedInputs.set(key, state.testedInputs[key]);
                }
            }
        }
    }
}
exports.KeyboardTester = KeyboardTester;
function getLayoutId(layout) {
    return `${layout.language}-${layout.name.replace(' ', '_')}-${layout.hardware}`;
}
/**
 * Keyboard layout files are expected to have the following name scheme:
 *     `language-name-hardware.json`
 *
 * - `language`: A language subtag according to IETF BCP 47
 * - `name`:     Display name of the keyboard layout (without dashes)
 * - `hardware`: `pc` or `mac`
 */
function loadLayout(fileName) {
    const [language, name, hardware] = fileName.split('-');
    return {
        name: name.replace('_', ' '),
        hardware: hardware,
        language,
        // Webpack knows what to do here and it should bundle all files under `../../../src/common/keyboard/layouts/`
        // eslint-disable-next-line import/no-dynamic-require
        raw: __webpack_require__("../node_modules/@theia/editor/node_modules/@theia/core/src/common/keyboard/layouts sync recursive ^\\.\\/.*\\.json$")("./" + fileName + ".json")
    };
}
function loadAllLayouts() {
    // The order of keyboard layouts is relevant for autodetection. Layouts with
    // lower index have a higher chance of being selected.
    // The current ordering approach is to sort by estimated number of developers
    // in the respective country (taken from the Stack Overflow Developer Survey),
    // but keeping all layouts of the same language together.
    return [
        'en-US-pc',
        'en-US-mac',
        'en-Dvorak-pc',
        'en-Dvorak-mac',
        'en-Dvorak_Lefthanded-pc',
        'en-Dvorak_Lefthanded-mac',
        'en-Dvorak_Righthanded-pc',
        'en-Dvorak_Righthanded-mac',
        'en-Colemak-mac',
        'en-British-pc',
        'en-British-mac',
        'de-German-pc',
        'de-German-mac',
        'de-Swiss_German-pc',
        'de-Swiss_German-mac',
        'fr-French-pc',
        'fr-French-mac',
        'fr-Canadian_French-pc',
        'fr-Canadian_French-mac',
        'fr-Swiss_French-pc',
        'fr-Swiss_French-mac',
        'fr-Bepo-pc',
        'pt-Portuguese-pc',
        'pt-Portuguese-mac',
        'pt-Brazilian-mac',
        'pl-Polish-pc',
        'pl-Polish-mac',
        'nl-Dutch-pc',
        'nl-Dutch-mac',
        'es-Spanish-pc',
        'es-Spanish-mac',
        'it-Italian-pc',
        'it-Italian-mac',
        'sv-Swedish-pc',
        'sv-Swedish-mac',
        'tr-Turkish_Q-pc',
        'tr-Turkish_Q-mac',
        'cs-Czech-pc',
        'cs-Czech-mac',
        'ro-Romanian-pc',
        'ro-Romanian-mac',
        'da-Danish-pc',
        'da-Danish-mac',
        'nb-Norwegian-pc',
        'nb-Norwegian-mac',
        'hu-Hungarian-pc',
        'hu-Hungarian-mac'
    ].map(loadLayout);
}


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/keyboard/index.js":
/*!********************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/keyboard/index.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2019 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./keys */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/keyboard/keys.js"), exports);
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./keyboard-layout-service */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/keyboard/keyboard-layout-service.js"), exports);
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./browser-keyboard-layout-provider */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/keyboard/browser-keyboard-layout-provider.js"), exports);
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./browser-keyboard-frontend-contribution */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/keyboard/browser-keyboard-frontend-contribution.js"), exports);


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/keyboard/keyboard-layout-service.js":
/*!**************************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/keyboard/keyboard-layout-service.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2019 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.KeyboardLayoutService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/es/inversify.js");
const os_1 = __webpack_require__(/*! ../../common/os */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/os.js");
const keyboard_layout_provider_1 = __webpack_require__(/*! ../../common/keyboard/keyboard-layout-provider */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/keyboard/keyboard-layout-provider.js");
const event_1 = __webpack_require__(/*! ../../common/event */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/event.js");
const keys_1 = __webpack_require__(/*! ./keys */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/keyboard/keys.js");
let KeyboardLayoutService = class KeyboardLayoutService {
    constructor() {
        this.keyboardLayoutChanged = new event_1.Emitter();
    }
    updateLayout(newLayout) {
        const transformed = this.transformNativeLayout(newLayout);
        this.currentLayout = transformed;
        this.keyboardLayoutChanged.fire(transformed);
        return transformed;
    }
    get onKeyboardLayoutChanged() {
        return this.keyboardLayoutChanged.event;
    }
    async initialize() {
        this.layoutChangeNotifier.onDidChangeNativeLayout(newLayout => this.updateLayout(newLayout));
        const initialLayout = await this.layoutProvider.getNativeLayout();
        this.updateLayout(initialLayout);
    }
    /**
     * Resolve a KeyCode of a keybinding using the current keyboard layout.
     * If no keyboard layout has been detected or the layout does not contain the
     * key used in the KeyCode, the KeyCode is returned unchanged.
     */
    resolveKeyCode(inCode) {
        const layout = this.currentLayout;
        if (layout && inCode.key) {
            for (let shift = 0; shift <= 1; shift++) {
                const index = this.getCharacterIndex(inCode.key, !!shift);
                const mappedCode = layout.key2KeyCode[index];
                if (mappedCode) {
                    const transformed = this.transformKeyCode(inCode, mappedCode, !!shift);
                    if (transformed) {
                        return transformed;
                    }
                }
            }
        }
        return inCode;
    }
    /**
     * Return the character shown on the user's keyboard for the given key.
     * Use this to determine UI representations of keybindings.
     */
    getKeyboardCharacter(key) {
        var _a;
        const layout = this.currentLayout;
        if (layout) {
            const value = (_a = layout.code2Character[key.code]) === null || _a === void 0 ? void 0 : _a.trim();
            // Special cases from native keymap
            if (value === '\u001b') {
                return 'escape';
            }
            if (value === '\u007f') {
                return 'delete';
            }
            if (value === '\u0008') {
                return 'backspace';
            }
            if (value === null || value === void 0 ? void 0 : value.replace(/[\n\r\t]/g, '')) {
                return value;
            }
        }
        return key.easyString;
    }
    /**
     * Called when a KeyboardEvent is processed by the KeybindingRegistry.
     * The KeyValidator may trigger a keyboard layout change.
     */
    validateKeyCode(keyCode) {
        if (this.keyValidator && keyCode.key && keyCode.character) {
            this.keyValidator.validateKey({
                code: keyCode.key.code,
                character: keyCode.character,
                shiftKey: keyCode.shift,
                ctrlKey: keyCode.ctrl,
                altKey: keyCode.alt
            });
        }
    }
    transformKeyCode(inCode, mappedCode, keyNeedsShift) {
        if (!inCode.shift && keyNeedsShift) {
            return undefined;
        }
        if (mappedCode.alt && (inCode.alt || inCode.ctrl || inCode.shift && !keyNeedsShift)) {
            return undefined;
        }
        return new keys_1.KeyCode({
            key: mappedCode.key,
            meta: inCode.meta,
            ctrl: inCode.ctrl || mappedCode.alt,
            shift: inCode.shift && !keyNeedsShift || mappedCode.shift,
            alt: inCode.alt || mappedCode.alt
        });
    }
    transformNativeLayout(nativeLayout) {
        const key2KeyCode = new Array(2 * (keys_1.Key.MAX_KEY_CODE + 1));
        const code2Character = {};
        const mapping = nativeLayout.mapping;
        for (const code in mapping) {
            if (mapping.hasOwnProperty(code)) {
                const keyMapping = mapping[code];
                const mappedKey = keys_1.Key.getKey(code);
                if (mappedKey && this.shouldIncludeKey(code)) {
                    if (os_1.isWindows) {
                        this.addWindowsKeyMapping(key2KeyCode, mappedKey, keyMapping.vkey, keyMapping.value);
                    }
                    else {
                        if (keyMapping.value) {
                            this.addKeyMapping(key2KeyCode, mappedKey, keyMapping.value, false, false);
                        }
                        if (keyMapping.withShift) {
                            this.addKeyMapping(key2KeyCode, mappedKey, keyMapping.withShift, true, false);
                        }
                        if (keyMapping.withAltGr) {
                            this.addKeyMapping(key2KeyCode, mappedKey, keyMapping.withAltGr, false, true);
                        }
                        if (keyMapping.withShiftAltGr) {
                            this.addKeyMapping(key2KeyCode, mappedKey, keyMapping.withShiftAltGr, true, true);
                        }
                    }
                }
                if (keyMapping.value) {
                    code2Character[code] = keyMapping.value;
                }
            }
        }
        return { key2KeyCode, code2Character };
    }
    shouldIncludeKey(code) {
        // Exclude all numpad keys because they produce values that are already found elsewhere on the keyboard.
        // This can cause problems, e.g. if `Numpad3` maps to `PageDown` then commands bound to `PageDown` would
        // be resolved to `Digit3` (`Numpad3` is associated with `Key.DIGIT3`), effectively blocking the user
        // from typing `3` in an editor.
        return !code.startsWith('Numpad');
    }
    addKeyMapping(key2KeyCode, mappedKey, value, shift, alt) {
        const key = VALUE_TO_KEY[value];
        if (key) {
            const index = this.getCharacterIndex(key.key, key.shift);
            if (key2KeyCode[index] === undefined) {
                key2KeyCode[index] = new keys_1.KeyCode({
                    key: mappedKey,
                    shift,
                    alt,
                    character: value
                });
            }
        }
    }
    addWindowsKeyMapping(key2KeyCode, mappedKey, vkey, value) {
        const key = VKEY_TO_KEY[vkey];
        if (key) {
            const index = this.getCharacterIndex(key);
            if (key2KeyCode[index] === undefined) {
                key2KeyCode[index] = new keys_1.KeyCode({
                    key: mappedKey,
                    character: value
                });
            }
        }
    }
    getCharacterIndex(key, shift) {
        if (shift) {
            return keys_1.Key.MAX_KEY_CODE + key.keyCode + 1;
        }
        else {
            return key.keyCode;
        }
    }
};
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(keyboard_layout_provider_1.KeyboardLayoutProvider),
    (0, tslib_1.__metadata)("design:type", Object)
], KeyboardLayoutService.prototype, "layoutProvider", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(keyboard_layout_provider_1.KeyboardLayoutChangeNotifier),
    (0, tslib_1.__metadata)("design:type", Object)
], KeyboardLayoutService.prototype, "layoutChangeNotifier", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(keyboard_layout_provider_1.KeyValidator),
    (0, inversify_1.optional)(),
    (0, tslib_1.__metadata)("design:type", Object)
], KeyboardLayoutService.prototype, "keyValidator", void 0);
KeyboardLayoutService = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)()
], KeyboardLayoutService);
exports.KeyboardLayoutService = KeyboardLayoutService;
/**
 * Mapping of character values to the corresponding keys on a standard US keyboard layout.
 */
const VALUE_TO_KEY = {
    '`': { key: keys_1.Key.BACKQUOTE },
    '~': { key: keys_1.Key.BACKQUOTE, shift: true },
    '1': { key: keys_1.Key.DIGIT1 },
    '!': { key: keys_1.Key.DIGIT1, shift: true },
    '2': { key: keys_1.Key.DIGIT2 },
    '@': { key: keys_1.Key.DIGIT2, shift: true },
    '3': { key: keys_1.Key.DIGIT3 },
    '#': { key: keys_1.Key.DIGIT3, shift: true },
    '4': { key: keys_1.Key.DIGIT4 },
    '$': { key: keys_1.Key.DIGIT4, shift: true },
    '5': { key: keys_1.Key.DIGIT5 },
    '%': { key: keys_1.Key.DIGIT5, shift: true },
    '6': { key: keys_1.Key.DIGIT6 },
    '^': { key: keys_1.Key.DIGIT6, shift: true },
    '7': { key: keys_1.Key.DIGIT7 },
    '&': { key: keys_1.Key.DIGIT7, shift: true },
    '8': { key: keys_1.Key.DIGIT8 },
    '*': { key: keys_1.Key.DIGIT8, shift: true },
    '9': { key: keys_1.Key.DIGIT9 },
    '(': { key: keys_1.Key.DIGIT9, shift: true },
    '0': { key: keys_1.Key.DIGIT0 },
    ')': { key: keys_1.Key.DIGIT0, shift: true },
    '-': { key: keys_1.Key.MINUS },
    '_': { key: keys_1.Key.MINUS, shift: true },
    '=': { key: keys_1.Key.EQUAL },
    '+': { key: keys_1.Key.EQUAL, shift: true },
    'a': { key: keys_1.Key.KEY_A },
    'A': { key: keys_1.Key.KEY_A, shift: true },
    'b': { key: keys_1.Key.KEY_B },
    'B': { key: keys_1.Key.KEY_B, shift: true },
    'c': { key: keys_1.Key.KEY_C },
    'C': { key: keys_1.Key.KEY_C, shift: true },
    'd': { key: keys_1.Key.KEY_D },
    'D': { key: keys_1.Key.KEY_D, shift: true },
    'e': { key: keys_1.Key.KEY_E },
    'E': { key: keys_1.Key.KEY_E, shift: true },
    'f': { key: keys_1.Key.KEY_F },
    'F': { key: keys_1.Key.KEY_F, shift: true },
    'g': { key: keys_1.Key.KEY_G },
    'G': { key: keys_1.Key.KEY_G, shift: true },
    'h': { key: keys_1.Key.KEY_H },
    'H': { key: keys_1.Key.KEY_H, shift: true },
    'i': { key: keys_1.Key.KEY_I },
    'I': { key: keys_1.Key.KEY_I, shift: true },
    'j': { key: keys_1.Key.KEY_J },
    'J': { key: keys_1.Key.KEY_J, shift: true },
    'k': { key: keys_1.Key.KEY_K },
    'K': { key: keys_1.Key.KEY_K, shift: true },
    'l': { key: keys_1.Key.KEY_L },
    'L': { key: keys_1.Key.KEY_L, shift: true },
    'm': { key: keys_1.Key.KEY_M },
    'M': { key: keys_1.Key.KEY_M, shift: true },
    'n': { key: keys_1.Key.KEY_N },
    'N': { key: keys_1.Key.KEY_N, shift: true },
    'o': { key: keys_1.Key.KEY_O },
    'O': { key: keys_1.Key.KEY_O, shift: true },
    'p': { key: keys_1.Key.KEY_P },
    'P': { key: keys_1.Key.KEY_P, shift: true },
    'q': { key: keys_1.Key.KEY_Q },
    'Q': { key: keys_1.Key.KEY_Q, shift: true },
    'r': { key: keys_1.Key.KEY_R },
    'R': { key: keys_1.Key.KEY_R, shift: true },
    's': { key: keys_1.Key.KEY_S },
    'S': { key: keys_1.Key.KEY_S, shift: true },
    't': { key: keys_1.Key.KEY_T },
    'T': { key: keys_1.Key.KEY_T, shift: true },
    'u': { key: keys_1.Key.KEY_U },
    'U': { key: keys_1.Key.KEY_U, shift: true },
    'v': { key: keys_1.Key.KEY_V },
    'V': { key: keys_1.Key.KEY_V, shift: true },
    'w': { key: keys_1.Key.KEY_W },
    'W': { key: keys_1.Key.KEY_W, shift: true },
    'x': { key: keys_1.Key.KEY_X },
    'X': { key: keys_1.Key.KEY_X, shift: true },
    'y': { key: keys_1.Key.KEY_Y },
    'Y': { key: keys_1.Key.KEY_Y, shift: true },
    'z': { key: keys_1.Key.KEY_Z },
    'Z': { key: keys_1.Key.KEY_Z, shift: true },
    '[': { key: keys_1.Key.BRACKET_LEFT },
    '{': { key: keys_1.Key.BRACKET_LEFT, shift: true },
    ']': { key: keys_1.Key.BRACKET_RIGHT },
    '}': { key: keys_1.Key.BRACKET_RIGHT, shift: true },
    ';': { key: keys_1.Key.SEMICOLON },
    ':': { key: keys_1.Key.SEMICOLON, shift: true },
    "'": { key: keys_1.Key.QUOTE },
    '"': { key: keys_1.Key.QUOTE, shift: true },
    ',': { key: keys_1.Key.COMMA },
    '<': { key: keys_1.Key.COMMA, shift: true },
    '.': { key: keys_1.Key.PERIOD },
    '>': { key: keys_1.Key.PERIOD, shift: true },
    '/': { key: keys_1.Key.SLASH },
    '?': { key: keys_1.Key.SLASH, shift: true },
    '\\': { key: keys_1.Key.BACKSLASH },
    '|': { key: keys_1.Key.BACKSLASH, shift: true },
    '\t': { key: keys_1.Key.TAB },
    '\r': { key: keys_1.Key.ENTER },
    '\n': { key: keys_1.Key.ENTER },
    ' ': { key: keys_1.Key.SPACE },
};
/**
 * Mapping of Windows Virtual Keys to the corresponding keys on a standard US keyboard layout.
 */
const VKEY_TO_KEY = {
    VK_SHIFT: keys_1.Key.SHIFT_LEFT,
    VK_LSHIFT: keys_1.Key.SHIFT_LEFT,
    VK_RSHIFT: keys_1.Key.SHIFT_RIGHT,
    VK_CONTROL: keys_1.Key.CONTROL_LEFT,
    VK_LCONTROL: keys_1.Key.CONTROL_LEFT,
    VK_RCONTROL: keys_1.Key.CONTROL_RIGHT,
    VK_MENU: keys_1.Key.ALT_LEFT,
    VK_COMMAND: keys_1.Key.OS_LEFT,
    VK_LWIN: keys_1.Key.OS_LEFT,
    VK_RWIN: keys_1.Key.OS_RIGHT,
    VK_0: keys_1.Key.DIGIT0,
    VK_1: keys_1.Key.DIGIT1,
    VK_2: keys_1.Key.DIGIT2,
    VK_3: keys_1.Key.DIGIT3,
    VK_4: keys_1.Key.DIGIT4,
    VK_5: keys_1.Key.DIGIT5,
    VK_6: keys_1.Key.DIGIT6,
    VK_7: keys_1.Key.DIGIT7,
    VK_8: keys_1.Key.DIGIT8,
    VK_9: keys_1.Key.DIGIT9,
    VK_A: keys_1.Key.KEY_A,
    VK_B: keys_1.Key.KEY_B,
    VK_C: keys_1.Key.KEY_C,
    VK_D: keys_1.Key.KEY_D,
    VK_E: keys_1.Key.KEY_E,
    VK_F: keys_1.Key.KEY_F,
    VK_G: keys_1.Key.KEY_G,
    VK_H: keys_1.Key.KEY_H,
    VK_I: keys_1.Key.KEY_I,
    VK_J: keys_1.Key.KEY_J,
    VK_K: keys_1.Key.KEY_K,
    VK_L: keys_1.Key.KEY_L,
    VK_M: keys_1.Key.KEY_M,
    VK_N: keys_1.Key.KEY_N,
    VK_O: keys_1.Key.KEY_O,
    VK_P: keys_1.Key.KEY_P,
    VK_Q: keys_1.Key.KEY_Q,
    VK_R: keys_1.Key.KEY_R,
    VK_S: keys_1.Key.KEY_S,
    VK_T: keys_1.Key.KEY_T,
    VK_U: keys_1.Key.KEY_U,
    VK_V: keys_1.Key.KEY_V,
    VK_W: keys_1.Key.KEY_W,
    VK_X: keys_1.Key.KEY_X,
    VK_Y: keys_1.Key.KEY_Y,
    VK_Z: keys_1.Key.KEY_Z,
    VK_OEM_1: keys_1.Key.SEMICOLON,
    VK_OEM_2: keys_1.Key.SLASH,
    VK_OEM_3: keys_1.Key.BACKQUOTE,
    VK_OEM_4: keys_1.Key.BRACKET_LEFT,
    VK_OEM_5: keys_1.Key.BACKSLASH,
    VK_OEM_6: keys_1.Key.BRACKET_RIGHT,
    VK_OEM_7: keys_1.Key.QUOTE,
    VK_OEM_PLUS: keys_1.Key.EQUAL,
    VK_OEM_COMMA: keys_1.Key.COMMA,
    VK_OEM_MINUS: keys_1.Key.MINUS,
    VK_OEM_PERIOD: keys_1.Key.PERIOD,
    VK_F1: keys_1.Key.F1,
    VK_F2: keys_1.Key.F2,
    VK_F3: keys_1.Key.F3,
    VK_F4: keys_1.Key.F4,
    VK_F5: keys_1.Key.F5,
    VK_F6: keys_1.Key.F6,
    VK_F7: keys_1.Key.F7,
    VK_F8: keys_1.Key.F8,
    VK_F9: keys_1.Key.F9,
    VK_F10: keys_1.Key.F10,
    VK_F11: keys_1.Key.F11,
    VK_F12: keys_1.Key.F12,
    VK_F13: keys_1.Key.F13,
    VK_F14: keys_1.Key.F14,
    VK_F15: keys_1.Key.F15,
    VK_F16: keys_1.Key.F16,
    VK_F17: keys_1.Key.F17,
    VK_F18: keys_1.Key.F18,
    VK_F19: keys_1.Key.F19,
    VK_BACK: keys_1.Key.BACKSPACE,
    VK_TAB: keys_1.Key.TAB,
    VK_RETURN: keys_1.Key.ENTER,
    VK_CAPITAL: keys_1.Key.CAPS_LOCK,
    VK_ESCAPE: keys_1.Key.ESCAPE,
    VK_SPACE: keys_1.Key.SPACE,
    VK_PRIOR: keys_1.Key.PAGE_UP,
    VK_NEXT: keys_1.Key.PAGE_DOWN,
    VK_END: keys_1.Key.END,
    VK_HOME: keys_1.Key.HOME,
    VK_INSERT: keys_1.Key.INSERT,
    VK_DELETE: keys_1.Key.DELETE,
    VK_LEFT: keys_1.Key.ARROW_LEFT,
    VK_UP: keys_1.Key.ARROW_UP,
    VK_RIGHT: keys_1.Key.ARROW_RIGHT,
    VK_DOWN: keys_1.Key.ARROW_DOWN,
    VK_NUMLOCK: keys_1.Key.NUM_LOCK,
    VK_NUMPAD0: keys_1.Key.DIGIT0,
    VK_NUMPAD1: keys_1.Key.DIGIT1,
    VK_NUMPAD2: keys_1.Key.DIGIT2,
    VK_NUMPAD3: keys_1.Key.DIGIT3,
    VK_NUMPAD4: keys_1.Key.DIGIT4,
    VK_NUMPAD5: keys_1.Key.DIGIT5,
    VK_NUMPAD6: keys_1.Key.DIGIT6,
    VK_NUMPAD7: keys_1.Key.DIGIT7,
    VK_NUMPAD8: keys_1.Key.DIGIT8,
    VK_NUMPAD9: keys_1.Key.DIGIT9,
    VK_MULTIPLY: keys_1.Key.MULTIPLY,
    VK_ADD: keys_1.Key.ADD,
    VK_SUBTRACT: keys_1.Key.SUBTRACT,
    VK_DECIMAL: keys_1.Key.DECIMAL,
    VK_DIVIDE: keys_1.Key.DIVIDE
};


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/keyboard/keys.js":
/*!*******************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/keyboard/keys.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2017-2019 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
/**
 * @deprecated since 1.20.0. Import from `@theia/core/lib/common/keys` instead.
 */
(0, tslib_1.__exportStar)(__webpack_require__(/*! ../../common/keys */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/keys.js"), exports);


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/keys.js":
/*!**********************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/keys.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2019 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.KeysOrKeyCodes = exports.SpecialCases = exports.Key = exports.KeyModifier = exports.KeyCode = exports.KeySequence = void 0;
// Reexporting here for backwards compatibility.
// Please import from '@theia/core/lib/browser' or '@theia/core/lib/browser/keyboard' instead of this module.
// This module might be removed in future releases.
const keys_1 = __webpack_require__(/*! ./keyboard/keys */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/keyboard/keys.js");
Object.defineProperty(exports, "KeySequence", ({ enumerable: true, get: function () { return keys_1.KeySequence; } }));
Object.defineProperty(exports, "KeyCode", ({ enumerable: true, get: function () { return keys_1.KeyCode; } }));
Object.defineProperty(exports, "KeyModifier", ({ enumerable: true, get: function () { return keys_1.KeyModifier; } }));
Object.defineProperty(exports, "Key", ({ enumerable: true, get: function () { return keys_1.Key; } }));
Object.defineProperty(exports, "SpecialCases", ({ enumerable: true, get: function () { return keys_1.SpecialCases; } }));
Object.defineProperty(exports, "KeysOrKeyCodes", ({ enumerable: true, get: function () { return keys_1.KeysOrKeyCodes; } }));


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/label-parser.js":
/*!******************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/label-parser.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LabelParser = exports.LabelIcon = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
// *****************************************************************************
// Copyright (C) 2017 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/es/inversify.js");
const common_1 = __webpack_require__(/*! ../common */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/index.js");
var LabelIcon;
(function (LabelIcon) {
    function is(val) {
        return (0, common_1.isObject)(val) && (0, common_1.isString)(val.name);
    }
    LabelIcon.is = is;
})(LabelIcon = exports.LabelIcon || (exports.LabelIcon = {}));
let LabelParser = class LabelParser {
    /**
     * Returns an array with parts of the given text.
     * These parts are of type LabelPart which can be either a string or a LabelIcon.
     * For splitting up the giving text the parser follows this rule:
     * The text gets parsed for the following pattern: $(iconName~iconAnimation).
     * If the parser finds such pattern a new LabelIcon object
     * { name: 'iconName', animation: 'iconAnimation'} is added to the returned array.
     * iconName can be for instance the name of an icon of e.g. FontAwesome and the (optional) iconAnimation
     * the name of an animation class which must be supported by the particular icon toolkit.
     *
     * Every string before, between or after such icon patterns gets also added to the array
     * before, between or after the related LabelIcon.
     *
     * @param text - the label text to parse
     */
    parse(text) {
        const parserArray = [];
        let arrPointer = 0;
        let potentialIcon = '';
        for (let idx = 0; idx < text.length; idx++) {
            const char = text.charAt(idx);
            parserArray[arrPointer] = parserArray[arrPointer] || '';
            if (potentialIcon === '') {
                if (char === '$') {
                    potentialIcon += char;
                }
                else {
                    parserArray[arrPointer] += char;
                }
            }
            else if (potentialIcon === '$') {
                if (char === '(') {
                    potentialIcon += char;
                }
                else {
                    parserArray[arrPointer] += potentialIcon + char;
                    potentialIcon = '';
                }
            }
            else {
                if (char === ')') {
                    const iconClassArr = potentialIcon.substring(2, potentialIcon.length).split('~');
                    if (parserArray[arrPointer] !== '') {
                        arrPointer++;
                    }
                    parserArray[arrPointer] = { name: iconClassArr[0], animation: iconClassArr[1] };
                    arrPointer++;
                    potentialIcon = '';
                }
                else {
                    potentialIcon += char;
                }
            }
        }
        if (potentialIcon !== '') {
            parserArray[arrPointer] += potentialIcon;
        }
        return parserArray;
    }
    /**
     * Strips icon specifiers from the given `text`, leaving only a
     * space-separated concatenation of the non-icon segments.
     *
     * @param text text to be stripped of icon specifiers
     * @returns the `text` with icon specifiers stripped out
     */
    stripIcons(text) {
        return this.parse(text)
            .filter(item => !LabelIcon.is(item))
            .map(s => s.trim())
            .filter(s => s.length)
            .join(' ');
    }
};
LabelParser = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)()
], LabelParser);
exports.LabelParser = LabelParser;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/label-provider.js":
/*!********************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/label-provider.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2017 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LabelProvider = exports.DefaultUriLabelProviderContribution = exports.URIIconReference = exports.LabelProviderContribution = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/es/inversify.js");
const fileIcons = __webpack_require__(/*! file-icons-js */ "../node_modules/file-icons-js/index.js");
const uri_1 = __webpack_require__(/*! ../common/uri */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/uri.js");
const contribution_provider_1 = __webpack_require__(/*! ../common/contribution-provider */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/contribution-provider.js");
const common_1 = __webpack_require__(/*! ../common */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/index.js");
const env_variables_protocol_1 = __webpack_require__(/*! ../common/env-variables/env-variables-protocol */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/env-variables/env-variables-protocol.js");
const widgets_1 = __webpack_require__(/*! ./widgets */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/widgets/index.js");
/**
 * @internal don't export it, use `LabelProvider.folderIcon` instead.
 */
const DEFAULT_FOLDER_ICON = `${(0, widgets_1.codicon)('folder')} default-folder-icon`;
/**
 * @internal don't export it, use `LabelProvider.fileIcon` instead.
 */
const DEFAULT_FILE_ICON = `${(0, widgets_1.codicon)('file')} default-file-icon`;
exports.LabelProviderContribution = Symbol('LabelProviderContribution');
var URIIconReference;
(function (URIIconReference) {
    function is(element) {
        return (0, common_1.isObject)(element) && element.kind === 'uriIconReference';
    }
    URIIconReference.is = is;
    function create(id, uri) {
        return { kind: 'uriIconReference', id, uri };
    }
    URIIconReference.create = create;
})(URIIconReference = exports.URIIconReference || (exports.URIIconReference = {}));
let DefaultUriLabelProviderContribution = class DefaultUriLabelProviderContribution {
    constructor() {
        this.formatters = [];
        this.onDidChangeEmitter = new common_1.Emitter();
        // copied and modified from https://github.com/microsoft/vscode/blob/1.44.2/src/vs/workbench/services/label/common/labelService.ts
        /*---------------------------------------------------------------------------------------------
        *  Copyright (c) Microsoft Corporation. All rights reserved.
        *  Licensed under the MIT License. See License.txt in the project root for license information.
        *--------------------------------------------------------------------------------------------*/
        this.labelMatchingRegexp = /\${(scheme|authority|path|query)}/g;
    }
    init() {
        this.envVariablesServer.getHomeDirUri().then(result => {
            this.homePath = result;
            this.fireOnDidChange();
        });
    }
    canHandle(element) {
        if (element instanceof uri_1.default || URIIconReference.is(element)) {
            return 1;
        }
        return 0;
    }
    getIcon(element) {
        if (URIIconReference.is(element) && element.id === 'folder') {
            return this.defaultFolderIcon;
        }
        const uri = URIIconReference.is(element) ? element.uri : element;
        if (uri) {
            const iconClass = uri && this.getFileIcon(uri);
            return iconClass || this.defaultFileIcon;
        }
        return '';
    }
    get defaultFolderIcon() {
        return DEFAULT_FOLDER_ICON;
    }
    get defaultFileIcon() {
        return DEFAULT_FILE_ICON;
    }
    getFileIcon(uri) {
        const fileIcon = fileIcons.getClassWithColor(uri.displayName);
        if (!fileIcon) {
            return undefined;
        }
        return fileIcon + ' theia-file-icons-js';
    }
    getName(element) {
        const uri = this.getUri(element);
        return uri && uri.displayName;
    }
    getLongName(element) {
        const uri = this.getUri(element);
        if (uri) {
            const formatting = this.findFormatting(uri);
            if (formatting) {
                return this.formatUri(uri, formatting);
            }
        }
        return uri && uri.path.fsPath();
    }
    getDetails(element) {
        const uri = this.getUri(element);
        if (uri) {
            return this.getLongName(uri.parent);
        }
        return this.getLongName(element);
    }
    getUri(element) {
        return URIIconReference.is(element) ? element.uri : element;
    }
    registerFormatter(formatter) {
        this.formatters.push(formatter);
        this.fireOnDidChange();
        return common_1.Disposable.create(() => {
            this.formatters = this.formatters.filter(f => f !== formatter);
            this.fireOnDidChange();
        });
    }
    get onDidChange() {
        return this.onDidChangeEmitter.event;
    }
    fireOnDidChange() {
        this.onDidChangeEmitter.fire({
            affects: (element) => this.canHandle(element) > 0
        });
    }
    formatUri(resource, formatting) {
        let label = formatting.label.replace(this.labelMatchingRegexp, (match, token) => {
            switch (token) {
                case 'scheme': return resource.scheme;
                case 'authority': return resource.authority;
                case 'path': return resource.path.toString();
                case 'query': return resource.query;
                default: return '';
            }
        });
        // convert \c:\something => C:\something
        if (formatting.normalizeDriveLetter && this.hasDriveLetter(label)) {
            label = label.charAt(1).toUpperCase() + label.substring(2);
        }
        if (formatting.tildify) {
            label = common_1.Path.tildify(label, this.homePath ? this.homePath : '');
        }
        if (formatting.authorityPrefix && resource.authority) {
            label = formatting.authorityPrefix + label;
        }
        return label.replace(/\//g, formatting.separator);
    }
    hasDriveLetter(path) {
        return !!(path && path[2] === ':');
    }
    findFormatting(resource) {
        let bestResult;
        this.formatters.forEach(formatter => {
            if (formatter.scheme === resource.scheme) {
                if (!bestResult && !formatter.authority) {
                    bestResult = formatter;
                    return;
                }
                if (!formatter.authority) {
                    return;
                }
                if ((formatter.authority.toLowerCase() === resource.authority.toLowerCase()) &&
                    (!bestResult || !bestResult.authority || formatter.authority.length > bestResult.authority.length ||
                        ((formatter.authority.length === bestResult.authority.length) && formatter.priority))) {
                    bestResult = formatter;
                }
            }
        });
        return bestResult ? bestResult.formatting : undefined;
    }
};
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(env_variables_protocol_1.EnvVariablesServer),
    (0, tslib_1.__metadata)("design:type", Object)
], DefaultUriLabelProviderContribution.prototype, "envVariablesServer", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.postConstruct)(),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", []),
    (0, tslib_1.__metadata)("design:returntype", void 0)
], DefaultUriLabelProviderContribution.prototype, "init", null);
DefaultUriLabelProviderContribution = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)()
], DefaultUriLabelProviderContribution);
exports.DefaultUriLabelProviderContribution = DefaultUriLabelProviderContribution;
/**
 * The {@link LabelProvider} determines how elements/nodes are displayed in the workbench. For any element, it can determine a short label, a long label
 * and an icon. The {@link LabelProvider} is to be used in lists, trees and tables, but also view specific locations like headers.
 * The common {@link LabelProvider} can be extended/adapted via {@link LabelProviderContribution}s. For every element, the {@links LabelProvider} will determine the
 * {@link LabelProviderContribution} with the hightest priority and delegate to it. Theia registers default {@link LabelProviderContribution} for common types, e.g.
 * the {@link DefaultUriLabelProviderContribution} for elements that have a URI.
 * Using the {@link LabelProvider} across the workbench ensures a common look and feel for elements across multiple views. To adapt the way how specific
 * elements/nodes are rendered, use a {@link LabelProviderContribution} rather than adapting or sub classing the {@link LabelProvider}. This way, your adaptation
 * is applied to all views in Theia that use the {@link LabelProvider}
 */
let LabelProvider = class LabelProvider {
    constructor() {
        this.onDidChangeEmitter = new common_1.Emitter();
    }
    /**
     * Start listening to contributions.
     *
     * Don't call this method directly!
     * It's called by the frontend application during initialization.
     */
    initialize() {
        const contributions = this.contributionProvider.getContributions();
        for (const eventContribution of contributions) {
            if (eventContribution.onDidChange) {
                eventContribution.onDidChange(event => {
                    this.onDidChangeEmitter.fire({
                        // TODO check eventContribution.canHandle as well
                        affects: element => this.affects(element, event)
                    });
                });
            }
        }
    }
    affects(element, event) {
        if (event.affects(element)) {
            return true;
        }
        for (const contribution of this.findContribution(element)) {
            if (contribution.affects && contribution.affects(element, event)) {
                return true;
            }
        }
        return false;
    }
    get onDidChange() {
        return this.onDidChangeEmitter.event;
    }
    /**
     * Return a default file icon for the current icon theme.
     */
    get fileIcon() {
        return this.getIcon(URIIconReference.create('file'));
    }
    /**
     * Return a default folder icon for the current icon theme.
     */
    get folderIcon() {
        return this.getIcon(URIIconReference.create('folder'));
    }
    /**
     * Get the icon class from the list of available {@link LabelProviderContribution} for the given element.
     * @return the icon class
     */
    getIcon(element) {
        var _a;
        return (_a = this.handleRequest(element, 'getIcon')) !== null && _a !== void 0 ? _a : '';
    }
    /**
     * Get a short name from the list of available {@link LabelProviderContribution} for the given element.
     * @return the short name
     */
    getName(element) {
        var _a;
        return (_a = this.handleRequest(element, 'getName')) !== null && _a !== void 0 ? _a : '<unknown>';
    }
    /**
     * Get a long name from the list of available {@link LabelProviderContribution} for the given element.
     * @return the long name
     */
    getLongName(element) {
        var _a;
        return (_a = this.handleRequest(element, 'getLongName')) !== null && _a !== void 0 ? _a : '';
    }
    /**
     * Get details from the list of available {@link LabelProviderContribution} for the given element.
     * @return the details
     * Can be used to supplement {@link getName} in contexts that allow both a primary display field and extra detail.
     */
    getDetails(element) {
        var _a;
        return (_a = this.handleRequest(element, 'getDetails')) !== null && _a !== void 0 ? _a : '';
    }
    handleRequest(element, method) {
        var _a;
        for (const contribution of this.findContribution(element, method)) {
            const value = (_a = contribution[method]) === null || _a === void 0 ? void 0 : _a.call(contribution, element);
            if (value !== undefined) {
                return value;
            }
        }
    }
    findContribution(element, method) {
        const candidates = method
            ? this.contributionProvider.getContributions().filter(candidate => candidate[method])
            : this.contributionProvider.getContributions();
        return common_1.Prioritizeable.prioritizeAllSync(candidates, contrib => contrib.canHandle(element)).map(entry => entry.value);
    }
};
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(contribution_provider_1.ContributionProvider),
    (0, inversify_1.named)(exports.LabelProviderContribution),
    (0, tslib_1.__metadata)("design:type", Object)
], LabelProvider.prototype, "contributionProvider", void 0);
LabelProvider = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)()
], LabelProvider);
exports.LabelProvider = LabelProvider;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/language-service.js":
/*!**********************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/language-service.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2020 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LanguageService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/es/inversify.js");
const common_1 = __webpack_require__(/*! ../common */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/index.js");
let LanguageService = class LanguageService {
    constructor() {
        this.onDidChangeIconEmitter = new common_1.Emitter();
    }
    /**
     * It should be implemented by an extension, e.g. by the monaco extension.
     */
    get languages() {
        return [];
    }
    /**
     * It should be implemented by an extension, e.g. by the monaco extension.
     */
    getLanguage(languageId) {
        return undefined;
    }
    /**
     * It should be implemented by an extension, e.g. by the monaco extension.
     */
    detectLanguage(obj) {
        return undefined;
    }
    /**
     * It should be implemented by an extension, e.g. by the monaco extension.
     */
    registerIcon(languageId, iconClass) {
        return common_1.Disposable.NULL;
    }
    /**
     * It should be implemented by an extension, e.g. by the monaco extension.
     */
    getIcon(obj) {
        return undefined;
    }
    /**
     * Emit when the icon of a particular language was changed.
     */
    get onDidChangeIcon() {
        return this.onDidChangeIconEmitter.event;
    }
};
LanguageService = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)()
], LanguageService);
exports.LanguageService = LanguageService;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/markdown-rendering/markdown-renderer.js":
/*!******************************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/markdown-rendering/markdown-renderer.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2022 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MarkdownRendererImpl = exports.MarkdownRendererFactory = exports.MarkdownRenderer = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
const DOMPurify = __webpack_require__(/*! dompurify */ "../node_modules/dompurify/dist/purify.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/es/inversify.js");
const markdownit = __webpack_require__(/*! markdown-it */ "../node_modules/markdown-it/index.js");
const label_parser_1 = __webpack_require__(/*! ../label-parser */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/label-parser.js");
const widgets_1 = __webpack_require__(/*! ../widgets */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/widgets/index.js");
// #endregion
/** Use this directly if you aren't worried about circular dependencies in the Shell */
exports.MarkdownRenderer = Symbol('MarkdownRenderer');
/** Use this to avoid circular dependencies in the Shell */
exports.MarkdownRendererFactory = Symbol('MarkdownRendererFactory');
let MarkdownRendererImpl = class MarkdownRendererImpl {
    constructor() {
        this.markdownIt = markdownit();
    }
    init() {
        this.markdownItPlugin();
    }
    render(markdown, options) {
        const host = document.createElement('div');
        if (markdown) {
            const html = this.markdownIt.render(markdown.value);
            host.innerHTML = DOMPurify.sanitize(html, {
                ALLOW_UNKNOWN_PROTOCOLS: true // DOMPurify usually strips non http(s) links from hrefs
            });
        }
        return { element: host, dispose: () => { } };
    }
    markdownItPlugin() {
        this.markdownIt.renderer.rules.text = (tokens, idx) => {
            const content = tokens[idx].content;
            return this.labelParser.parse(content).map(chunk => {
                if (typeof chunk === 'string') {
                    return chunk;
                }
                return `<i class="${(0, widgets_1.codicon)(chunk.name)} ${chunk.animation ? `fa-${chunk.animation}` : ''} icon-inline"></i>`;
            }).join('');
        };
    }
};
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(label_parser_1.LabelParser),
    (0, tslib_1.__metadata)("design:type", label_parser_1.LabelParser)
], MarkdownRendererImpl.prototype, "labelParser", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.postConstruct)(),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", []),
    (0, tslib_1.__metadata)("design:returntype", void 0)
], MarkdownRendererImpl.prototype, "init", null);
MarkdownRendererImpl = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)()
], MarkdownRendererImpl);
exports.MarkdownRendererImpl = MarkdownRendererImpl;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/messaging/connection-source.js":
/*!*********************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/messaging/connection-source.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2023 STMicroelectronics and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ConnectionSource = void 0;
exports.ConnectionSource = Symbol('ConnectionSource');


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/messaging/index.js":
/*!*********************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/messaging/index.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./ws-connection-provider */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/messaging/ws-connection-provider.js"), exports);


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/messaging/service-connection-provider.js":
/*!*******************************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/messaging/service-connection-provider.js ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2020 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ServiceConnectionProvider = exports.RemoteConnectionProvider = exports.LocalConnectionProvider = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/es/inversify.js");
const common_1 = __webpack_require__(/*! ../../common */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/index.js");
const channel_1 = __webpack_require__(/*! ../../common/message-rpc/channel */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/message-rpc/channel.js");
const promise_util_1 = __webpack_require__(/*! ../../common/promise-util */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/promise-util.js");
const connection_source_1 = __webpack_require__(/*! ./connection-source */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/messaging/connection-source.js");
exports.LocalConnectionProvider = Symbol('LocalConnectionProvider');
exports.RemoteConnectionProvider = Symbol('RemoteConnectionProvider');
/**
 * This class manages the channels for remote services in the back end
 */
let ServiceConnectionProvider = class ServiceConnectionProvider {
    constructor() {
        this.channelHandlers = new Map();
        this.channelReadyDeferred = new promise_util_1.Deferred();
    }
    static createProxy(container, path, arg) {
        return container.get(exports.RemoteConnectionProvider).createProxy(path, arg);
    }
    static createLocalProxy(container, path, arg) {
        return container.get(exports.LocalConnectionProvider).createProxy(path, arg);
    }
    static createHandler(container, path, arg) {
        const remote = container.get(exports.RemoteConnectionProvider);
        const local = container.get(exports.LocalConnectionProvider);
        remote.createProxy(path, arg);
        if (remote !== local) {
            local.createProxy(path, arg);
        }
    }
    createProxy(path, arg) {
        const factory = arg instanceof common_1.RpcProxyFactory ? arg : new common_1.RpcProxyFactory(arg);
        this.listen(path, (_, c) => factory.listen(c), true);
        return factory.createProxy();
    }
    get channelReady() {
        return this.channelReadyDeferred.promise;
    }
    init() {
        this.connectionSource.onConnectionDidOpen(channel => this.handleChannelCreated(channel));
    }
    /**
     * This method must be invoked by subclasses when they have created the main channel.
     * @param mainChannel
     */
    handleChannelCreated(channel) {
        channel.onClose(() => {
            this.handleChannelClosed(channel);
        });
        this.channelMultiplexer = new channel_1.ChannelMultiplexer(channel);
        this.channelReadyDeferred.resolve();
        for (const entry of this.channelHandlers.entries()) {
            this.openChannel(entry[0], entry[1]);
        }
    }
    handleChannelClosed(channel) {
        this.channelReadyDeferred = new promise_util_1.Deferred();
    }
    /**
     * Install a connection handler for the given path.
     */
    listen(path, handler, reconnect) {
        this.openChannel(path, handler).then(() => {
            if (reconnect) {
                this.channelHandlers.set(path, handler);
            }
        });
    }
    async openChannel(path, handler) {
        await this.channelReady;
        const newChannel = await this.channelMultiplexer.open(path);
        handler(path, newChannel);
    }
};
(0, tslib_1.__decorate)([
    (0, inversify_1.postConstruct)(),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", []),
    (0, tslib_1.__metadata)("design:returntype", void 0)
], ServiceConnectionProvider.prototype, "init", null);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(connection_source_1.ConnectionSource),
    (0, tslib_1.__metadata)("design:type", Object)
], ServiceConnectionProvider.prototype, "connectionSource", void 0);
ServiceConnectionProvider = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)()
], ServiceConnectionProvider);
exports.ServiceConnectionProvider = ServiceConnectionProvider;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/messaging/ws-connection-provider.js":
/*!**************************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/messaging/ws-connection-provider.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.WebSocketConnectionProvider = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/es/inversify.js");
const common_1 = __webpack_require__(/*! ../../common */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/index.js");
const service_connection_provider_1 = __webpack_require__(/*! ./service-connection-provider */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/messaging/service-connection-provider.js");
(0, inversify_1.decorate)((0, inversify_1.injectable)(), common_1.RpcProxyFactory);
(0, inversify_1.decorate)((0, inversify_1.unmanaged)(), common_1.RpcProxyFactory, 0);
/**
 * @deprecated This class serves to keep API compatibility for a while. Use {@linkcode ServiceConnectionProvider} instead.
 */
let WebSocketConnectionProvider = class WebSocketConnectionProvider {
    static createProxy(container, path, arg) {
        return service_connection_provider_1.ServiceConnectionProvider.createProxy(container, path, arg);
    }
    static createLocalProxy(container, path, arg) {
        return service_connection_provider_1.ServiceConnectionProvider.createLocalProxy(container, path, arg);
    }
    static createHandler(container, path, arg) {
        return service_connection_provider_1.ServiceConnectionProvider.createHandler(container, path, arg);
    }
    createProxy(path, factory) {
        return this.remoteConnectionProvider.createProxy(path, factory);
    }
};
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(service_connection_provider_1.RemoteConnectionProvider),
    (0, tslib_1.__metadata)("design:type", service_connection_provider_1.ServiceConnectionProvider)
], WebSocketConnectionProvider.prototype, "remoteConnectionProvider", void 0);
WebSocketConnectionProvider = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)()
], WebSocketConnectionProvider);
exports.WebSocketConnectionProvider = WebSocketConnectionProvider;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/navigatable-types.js":
/*!***********************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/navigatable-types.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2021 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.NavigatableWidgetOptions = exports.NavigatableWidget = exports.Navigatable = void 0;
const common_1 = __webpack_require__(/*! ../common */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/index.js");
const widgets_1 = __webpack_require__(/*! ./widgets */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/widgets/index.js");
var Navigatable;
(function (Navigatable) {
    function is(arg) {
        return (0, common_1.isObject)(arg) && 'getResourceUri' in arg && 'createMoveToUri' in arg;
    }
    Navigatable.is = is;
})(Navigatable = exports.Navigatable || (exports.Navigatable = {}));
var NavigatableWidget;
(function (NavigatableWidget) {
    function is(arg) {
        return arg instanceof widgets_1.BaseWidget && Navigatable.is(arg);
    }
    NavigatableWidget.is = is;
    function* getAffected(widgets, context) {
        const uris = Array.isArray(context) ? context : [context];
        return get(widgets, resourceUri => uris.some(uri => uri.isEqualOrParent(resourceUri)));
    }
    NavigatableWidget.getAffected = getAffected;
    function* get(widgets, filter = () => true) {
        for (const widget of widgets) {
            if (NavigatableWidget.is(widget)) {
                const resourceUri = widget.getResourceUri();
                if (resourceUri && filter(resourceUri)) {
                    yield [resourceUri, widget];
                }
            }
        }
    }
    NavigatableWidget.get = get;
    function getUri(widget) {
        if (is(widget)) {
            return widget.getResourceUri();
        }
    }
    NavigatableWidget.getUri = getUri;
})(NavigatableWidget = exports.NavigatableWidget || (exports.NavigatableWidget = {}));
var NavigatableWidgetOptions;
(function (NavigatableWidgetOptions) {
    function is(arg) {
        return (0, common_1.isObject)(arg) && arg.kind === 'navigatable';
    }
    NavigatableWidgetOptions.is = is;
})(NavigatableWidgetOptions = exports.NavigatableWidgetOptions || (exports.NavigatableWidgetOptions = {}));


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/navigatable.js":
/*!*****************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/navigatable.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 Red Hat, Inc. and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.NavigatableWidgetOpenHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
const widget_open_handler_1 = __webpack_require__(/*! ./widget-open-handler */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/widget-open-handler.js");
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./navigatable-types */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/navigatable-types.js"), exports);
class NavigatableWidgetOpenHandler extends widget_open_handler_1.WidgetOpenHandler {
    createWidgetOptions(uri, options) {
        return {
            kind: 'navigatable',
            uri: this.serializeUri(uri)
        };
    }
    serializeUri(uri) {
        if (uri.scheme === 'file') {
            return uri.withoutFragment().normalizePath().toString();
        }
        else {
            return uri.withoutFragment().toString();
        }
    }
}
exports.NavigatableWidgetOpenHandler = NavigatableWidgetOpenHandler;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/opener-service.js":
/*!********************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/opener-service.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2017 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DefaultOpenerService = exports.open = exports.OpenerService = exports.OpenHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/es/inversify.js");
const common_1 = __webpack_require__(/*! ../common */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/index.js");
exports.OpenHandler = Symbol('OpenHandler');
exports.OpenerService = Symbol('OpenerService');
async function open(openerService, uri, options) {
    const opener = await openerService.getOpener(uri, options);
    return opener.open(uri, options);
}
exports.open = open;
let DefaultOpenerService = class DefaultOpenerService {
    constructor(handlersProvider) {
        this.handlersProvider = handlersProvider;
        // Collection of open-handlers for custom-editor contributions.
        this.customEditorOpenHandlers = [];
        this.onDidChangeOpenersEmitter = new common_1.Emitter();
        this.onDidChangeOpeners = this.onDidChangeOpenersEmitter.event;
    }
    addHandler(openHandler) {
        this.customEditorOpenHandlers.push(openHandler);
        this.onDidChangeOpenersEmitter.fire();
        return common_1.Disposable.create(() => {
            this.customEditorOpenHandlers.splice(this.customEditorOpenHandlers.indexOf(openHandler), 1);
            this.onDidChangeOpenersEmitter.fire();
        });
    }
    async getOpener(uri, options) {
        const handlers = await this.prioritize(uri, options);
        if (handlers.length >= 1) {
            return handlers[0];
        }
        return Promise.reject(new Error(`There is no opener for ${uri}.`));
    }
    async getOpeners(uri, options) {
        return uri ? this.prioritize(uri, options) : this.getHandlers();
    }
    async prioritize(uri, options) {
        const prioritized = await common_1.Prioritizeable.prioritizeAll(this.getHandlers(), async (handler) => {
            try {
                return await handler.canHandle(uri, options);
            }
            catch {
                return 0;
            }
        });
        return prioritized.map(p => p.value);
    }
    getHandlers() {
        return [
            ...this.handlersProvider.getContributions(),
            ...this.customEditorOpenHandlers
        ];
    }
};
DefaultOpenerService = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)(),
    (0, tslib_1.__param)(0, (0, inversify_1.inject)(common_1.ContributionProvider)),
    (0, tslib_1.__param)(0, (0, inversify_1.named)(exports.OpenHandler)),
    (0, tslib_1.__metadata)("design:paramtypes", [Object])
], DefaultOpenerService);
exports.DefaultOpenerService = DefaultOpenerService;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/preferences/index.js":
/*!***********************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/preferences/index.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2017 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./preference-service */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/preferences/preference-service.js"), exports);
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./preference-proxy */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/preferences/preference-proxy.js"), exports);
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./preference-contribution */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/preferences/preference-contribution.js"), exports);
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./preference-provider */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/preferences/preference-provider.js"), exports);
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./preference-scope */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/preferences/preference-scope.js"), exports);
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./preference-language-override-service */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/preferences/preference-language-override-service.js"), exports);
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./preference-validation-service */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/preferences/preference-validation-service.js"), exports);


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/preferences/injectable-preference-proxy.js":
/*!*********************************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/preferences/injectable-preference-proxy.js ***!
  \*********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2022 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.InjectablePreferenceProxy = exports.PreferenceProxyChange = exports.PreferenceProxyFactory = exports.PreferenceProxySchema = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/es/inversify.js");
const common_1 = __webpack_require__(/*! ../../common */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/index.js");
const preference_proxy_1 = __webpack_require__(/*! ./preference-proxy */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/preferences/preference-proxy.js");
const preference_service_1 = __webpack_require__(/*! ./preference-service */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/preferences/preference-service.js");
const preference_language_override_service_1 = __webpack_require__(/*! ./preference-language-override-service */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/preferences/preference-language-override-service.js");
exports.PreferenceProxySchema = Symbol('PreferenceProxySchema');
exports.PreferenceProxyFactory = Symbol('PreferenceProxyFactory');
class PreferenceProxyChange extends preference_service_1.PreferenceChangeImpl {
    constructor(change, overrideIdentifier) {
        super(change);
        this.overrideIdentifier = overrideIdentifier;
    }
    affects(resourceUri, overrideIdentifier) {
        if (overrideIdentifier !== this.overrideIdentifier) {
            return false;
        }
        return super.affects(resourceUri);
    }
}
exports.PreferenceProxyChange = PreferenceProxyChange;
let InjectablePreferenceProxy = class InjectablePreferenceProxy {
    constructor() {
        this.toDispose = new common_1.DisposableCollection();
    }
    get prefix() {
        var _a;
        return (_a = this.options.prefix) !== null && _a !== void 0 ? _a : '';
    }
    get style() {
        var _a;
        return (_a = this.options.style) !== null && _a !== void 0 ? _a : 'flat';
    }
    get resourceUri() {
        return this.options.resourceUri;
    }
    get overrideIdentifier() {
        return this.options.overrideIdentifier;
    }
    get isDeep() {
        const { style } = this;
        return style === 'deep' || style === 'both';
    }
    get isFlat() {
        const { style } = this;
        return style === 'flat' || style === 'both';
    }
    get onPreferenceChangedEmitter() {
        if (!this._onPreferenceChangedEmitter) {
            this._onPreferenceChangedEmitter = new common_1.Emitter();
            this.subscribeToChangeEvents();
            this.toDispose.push(this._onPreferenceChangedEmitter);
        }
        return this._onPreferenceChangedEmitter;
    }
    get onPreferenceChanged() {
        return this.onPreferenceChangedEmitter.event;
    }
    init() {
        const schema = this.promisedSchema();
        if (schema instanceof Promise) {
            schema.then(resolvedSchema => this.schema = resolvedSchema);
        }
        else {
            this.schema = schema;
        }
    }
    get(target, property, receiver) {
        if (typeof property !== 'string') {
            throw new Error(`Unexpected property: ${String(property)}`);
        }
        const preferenceName = this.prefix + property;
        if (this.schema && (this.isFlat || !property.includes('.')) && this.schema.properties[preferenceName]) {
            const { overrideIdentifier } = this;
            const toGet = overrideIdentifier ? this.preferences.overridePreferenceName({ overrideIdentifier, preferenceName }) : preferenceName;
            return this.getValue(toGet, undefined);
        }
        switch (property) {
            case 'onPreferenceChanged':
                return this.onPreferenceChanged;
            case 'dispose':
                return this.dispose.bind(this);
            case 'ready':
                return Promise.all([this.preferences.ready, this.promisedSchema]).then(() => undefined);
            case 'get':
                return this.getValue.bind(this);
            case 'toJSON':
                return this.toJSON.bind(this);
            case 'ownKeys':
                return this.ownKeys.bind(this);
        }
        if (this.schema && this.isDeep) {
            const prefix = `${preferenceName}.`;
            if (Object.keys(this.schema.properties).some(key => key.startsWith(prefix))) {
                const { style, resourceUri, overrideIdentifier } = this;
                return this.factory(this.schema, { prefix, resourceUri, style, overrideIdentifier });
            }
            let value; // eslint-disable-line @typescript-eslint/no-explicit-any
            let parentSegment = preferenceName;
            const segments = [];
            do {
                const index = parentSegment.lastIndexOf('.');
                segments.push(parentSegment.substring(index + 1));
                parentSegment = parentSegment.substring(0, index);
                if (parentSegment in this.schema.properties) {
                    value = this.get(target, parentSegment, receiver);
                }
            } while (parentSegment && value === undefined);
            let segment;
            while ((0, common_1.isObject)(value) && (segment = segments.pop())) {
                value = value[segment];
            }
            return segments.length ? undefined : value;
        }
    }
    set(target, property, value, receiver) {
        if (typeof property !== 'string') {
            throw new Error(`Unexpected property: ${String(property)}`);
        }
        const { style, schema, prefix, resourceUri, overrideIdentifier } = this;
        if (style === 'deep' && property.indexOf('.') !== -1) {
            return false;
        }
        if (schema) {
            const fullProperty = prefix ? prefix + property : property;
            if (schema.properties[fullProperty]) {
                this.preferences.set(fullProperty, value, preference_service_1.PreferenceScope.Default);
                return true;
            }
            const newPrefix = fullProperty + '.';
            for (const p of Object.keys(schema.properties)) {
                if (p.startsWith(newPrefix)) {
                    const subProxy = this.factory(schema, {
                        prefix: newPrefix,
                        resourceUri,
                        overrideIdentifier,
                        style
                    }); // eslint-disable-line @typescript-eslint/no-explicit-any
                    const valueAsContainer = value;
                    for (const k of Object.keys(valueAsContainer)) {
                        subProxy[k] = valueAsContainer[k];
                    }
                }
            }
        }
        return false;
    }
    ownKeys() {
        const properties = [];
        if (this.schema) {
            const { isDeep, isFlat, prefix } = this;
            for (const property of Object.keys(this.schema.properties)) {
                if (property.startsWith(prefix)) {
                    const idx = property.indexOf('.', prefix.length);
                    if (idx !== -1 && isDeep) {
                        const pre = property.substring(prefix.length, idx);
                        if (properties.indexOf(pre) === -1) {
                            properties.push(pre);
                        }
                    }
                    const prop = property.substring(prefix.length);
                    if (isFlat || prop.indexOf('.') === -1) {
                        properties.push(prop);
                    }
                }
            }
        }
        return properties;
    }
    getOwnPropertyDescriptor(target, property) {
        if (this.ownKeys().includes(property)) {
            return {
                enumerable: true,
                configurable: true
            };
        }
        return {};
    }
    deleteProperty() {
        throw new Error('Unsupported operation');
    }
    defineProperty() {
        throw new Error('Unsupported operation');
    }
    toJSON() {
        const result = {};
        for (const key of this.ownKeys()) {
            result[key] = this.get(undefined, key, undefined);
        }
        return result;
    }
    ;
    subscribeToChangeEvents() {
        this.toDispose.push(this.preferences.onPreferencesChanged(changes => this.handlePreferenceChanges(changes)));
    }
    handlePreferenceChanges(changes) {
        if (this.schema) {
            for (const change of Object.values(changes)) {
                const overrideInfo = this.preferences.overriddenPreferenceName(change.preferenceName);
                if (this.isRelevantChange(change, overrideInfo)) {
                    this.fireChangeEvent(this.buildNewChangeEvent(change, overrideInfo));
                }
            }
        }
    }
    isRelevantChange(change, overrideInfo) {
        var _a, _b;
        const preferenceName = (_a = overrideInfo === null || overrideInfo === void 0 ? void 0 : overrideInfo.preferenceName) !== null && _a !== void 0 ? _a : change.preferenceName;
        return preferenceName.startsWith(this.prefix)
            && (!this.overrideIdentifier || (overrideInfo === null || overrideInfo === void 0 ? void 0 : overrideInfo.overrideIdentifier) === this.overrideIdentifier)
            && Boolean((_b = this.schema) === null || _b === void 0 ? void 0 : _b.properties[preferenceName]);
    }
    fireChangeEvent(change) {
        this.onPreferenceChangedEmitter.fire(change);
    }
    buildNewChangeEvent(change, overrideInfo) {
        var _a;
        const preferenceName = ((_a = overrideInfo === null || overrideInfo === void 0 ? void 0 : overrideInfo.preferenceName) !== null && _a !== void 0 ? _a : change.preferenceName);
        const { newValue, oldValue, scope, domain } = change;
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        return new PreferenceProxyChange({ newValue, oldValue, preferenceName, scope, domain }, overrideInfo === null || overrideInfo === void 0 ? void 0 : overrideInfo.overrideIdentifier);
    }
    getValue(preferenceIdentifier, defaultValue, resourceUri = this.resourceUri) {
        const preferenceName = preference_language_override_service_1.OverridePreferenceName.is(preferenceIdentifier) ? this.preferences.overridePreferenceName(preferenceIdentifier) : preferenceIdentifier;
        return this.preferences.get(preferenceName, defaultValue, resourceUri);
    }
    dispose() {
        if (this.options.isDisposable) {
            this.toDispose.dispose();
        }
    }
};
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(preference_proxy_1.PreferenceProxyOptions),
    (0, tslib_1.__metadata)("design:type", Object)
], InjectablePreferenceProxy.prototype, "options", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(preference_service_1.PreferenceService),
    (0, tslib_1.__metadata)("design:type", Object)
], InjectablePreferenceProxy.prototype, "preferences", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(exports.PreferenceProxySchema),
    (0, tslib_1.__metadata)("design:type", Function)
], InjectablePreferenceProxy.prototype, "promisedSchema", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(exports.PreferenceProxyFactory),
    (0, tslib_1.__metadata)("design:type", Function)
], InjectablePreferenceProxy.prototype, "factory", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.postConstruct)(),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", []),
    (0, tslib_1.__metadata)("design:returntype", void 0)
], InjectablePreferenceProxy.prototype, "init", null);
InjectablePreferenceProxy = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)()
], InjectablePreferenceProxy);
exports.InjectablePreferenceProxy = InjectablePreferenceProxy;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/preferences/preference-configurations.js":
/*!*******************************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/preferences/preference-configurations.js ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2019 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PreferenceConfigurations = exports.bindPreferenceConfigurations = exports.PreferenceConfiguration = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/es/inversify.js");
const contribution_provider_1 = __webpack_require__(/*! ../../common/contribution-provider */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/contribution-provider.js");
exports.PreferenceConfiguration = Symbol('PreferenceConfiguration');
function bindPreferenceConfigurations(bind) {
    (0, contribution_provider_1.bindContributionProvider)(bind, exports.PreferenceConfiguration);
    bind(PreferenceConfigurations).toSelf().inSingletonScope();
}
exports.bindPreferenceConfigurations = bindPreferenceConfigurations;
let PreferenceConfigurations = class PreferenceConfigurations {
    /* prefer Theia over VS Code by default */
    getPaths() {
        return ['.theia', '.vscode'];
    }
    getConfigName() {
        return 'settings';
    }
    getSectionNames() {
        if (!this.sectionNames) {
            this.sectionNames = this.provider.getContributions().map(p => p.name);
        }
        return this.sectionNames;
    }
    isSectionName(name) {
        return this.getSectionNames().indexOf(name) !== -1;
    }
    isAnyConfig(name) {
        return [...this.getSectionNames(), this.getConfigName()].includes(name);
    }
    isSectionUri(configUri) {
        return !!configUri && this.isSectionName(this.getName(configUri));
    }
    isConfigUri(configUri) {
        return !!configUri && this.getName(configUri) === this.getConfigName();
    }
    getName(configUri) {
        return configUri.path.name;
    }
    getPath(configUri) {
        return configUri.parent.path.base;
    }
    createUri(folder, configPath = this.getPaths()[0], configName = this.getConfigName()) {
        return folder.resolve(configPath).resolve(configName + '.json');
    }
};
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(contribution_provider_1.ContributionProvider),
    (0, inversify_1.named)(exports.PreferenceConfiguration),
    (0, tslib_1.__metadata)("design:type", Object)
], PreferenceConfigurations.prototype, "provider", void 0);
PreferenceConfigurations = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)()
], PreferenceConfigurations);
exports.PreferenceConfigurations = PreferenceConfigurations;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/preferences/preference-contribution.js":
/*!*****************************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/preferences/preference-contribution.js ***!
  \*****************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PreferenceSchemaProvider = exports.FrontendApplicationPreferenceConfig = exports.bindPreferenceSchemaProvider = exports.DefaultOverridesPreferenceSchemaId = exports.PreferenceContribution = exports.PreferenceDataProperty = exports.PreferenceSchemaProperties = exports.PreferenceSchema = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
const Ajv = __webpack_require__(/*! ajv */ "../node_modules/ajv/lib/ajv.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/es/inversify.js");
const common_1 = __webpack_require__(/*! ../../common */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/index.js");
const preference_scope_1 = __webpack_require__(/*! ./preference-scope */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/preferences/preference-scope.js");
const preference_provider_1 = __webpack_require__(/*! ./preference-provider */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/preferences/preference-provider.js");
const preference_schema_1 = __webpack_require__(/*! ../../common/preferences/preference-schema */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/preferences/preference-schema.js");
Object.defineProperty(exports, "PreferenceSchema", ({ enumerable: true, get: function () { return preference_schema_1.PreferenceSchema; } }));
Object.defineProperty(exports, "PreferenceSchemaProperties", ({ enumerable: true, get: function () { return preference_schema_1.PreferenceSchemaProperties; } }));
Object.defineProperty(exports, "PreferenceDataProperty", ({ enumerable: true, get: function () { return preference_schema_1.PreferenceDataProperty; } }));
const frontend_application_config_provider_1 = __webpack_require__(/*! ../frontend-application-config-provider */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/frontend-application-config-provider.js");
const preference_configurations_1 = __webpack_require__(/*! ./preference-configurations */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/preferences/preference-configurations.js");
const types_1 = __webpack_require__(/*! ../../common/types */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/types.js");
const preference_language_override_service_1 = __webpack_require__(/*! ./preference-language-override-service */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/preferences/preference-language-override-service.js");
/* eslint-disable guard-for-in, @typescript-eslint/no-explicit-any */
exports.PreferenceContribution = Symbol('PreferenceContribution');
exports.DefaultOverridesPreferenceSchemaId = 'defaultOverrides';
function bindPreferenceSchemaProvider(bind) {
    (0, preference_configurations_1.bindPreferenceConfigurations)(bind);
    bind(PreferenceSchemaProvider).toSelf().inSingletonScope();
    bind(preference_language_override_service_1.PreferenceLanguageOverrideService).toSelf().inSingletonScope();
    (0, common_1.bindContributionProvider)(bind, exports.PreferenceContribution);
}
exports.bindPreferenceSchemaProvider = bindPreferenceSchemaProvider;
var FrontendApplicationPreferenceConfig;
(function (FrontendApplicationPreferenceConfig) {
    function is(config) {
        return (0, types_1.isObject)(config.preferences);
    }
    FrontendApplicationPreferenceConfig.is = is;
})(FrontendApplicationPreferenceConfig = exports.FrontendApplicationPreferenceConfig || (exports.FrontendApplicationPreferenceConfig = {}));
/**
 * The {@link PreferenceSchemaProvider} collects all {@link PreferenceContribution}s and combines
 * the preference schema provided by these contributions into one collective schema. The preferences which
 * are provided by this {@link PreferenceProvider} are derived from this combined schema.
 */
let PreferenceSchemaProvider = class PreferenceSchemaProvider extends preference_provider_1.PreferenceProvider {
    constructor() {
        super(...arguments);
        this.preferences = {};
        this.combinedSchema = { properties: {}, patternProperties: {}, allowComments: true, allowTrailingCommas: true, };
        this.workspaceSchema = { properties: {}, patternProperties: {}, allowComments: true, allowTrailingCommas: true, };
        this.folderSchema = { properties: {}, patternProperties: {}, allowComments: true, allowTrailingCommas: true, };
        this.onDidPreferenceSchemaChangedEmitter = new common_1.Emitter();
        this.onDidPreferenceSchemaChanged = this.onDidPreferenceSchemaChangedEmitter.event;
        this.overridePatternProperties = {
            type: 'object',
            description: 'Configure editor settings to be overridden for a language.',
            errorMessage: 'Unknown Identifier. Use language identifiers',
            properties: {},
            additionalProperties: false
        };
    }
    fireDidPreferenceSchemaChanged() {
        this.onDidPreferenceSchemaChangedEmitter.fire(undefined);
    }
    init() {
        this.readConfiguredPreferences();
        this.preferenceContributions.getContributions().forEach(contrib => {
            this.doSetSchema(contrib.schema);
        });
        this.combinedSchema.additionalProperties = false;
        this._ready.resolve();
    }
    /**
     * Register a new overrideIdentifier. Existing identifiers are not replaced.
     *
     * Allows overriding existing values while keeping both values in store.
     * For example to store different editor settings, e.g. "[markdown].editor.autoIndent",
     * "[json].editor.autoIndent" and "editor.autoIndent"
     * @param overrideIdentifier the new overrideIdentifier
     */
    registerOverrideIdentifier(overrideIdentifier) {
        if (this.preferenceOverrideService.addOverrideIdentifier(overrideIdentifier)) {
            this.updateOverridePatternPropertiesKey();
        }
    }
    updateOverridePatternPropertiesKey() {
        const oldKey = this.overridePatternPropertiesKey;
        const newKey = this.preferenceOverrideService.computeOverridePatternPropertiesKey();
        if (oldKey === newKey) {
            return;
        }
        if (oldKey) {
            delete this.combinedSchema.patternProperties[oldKey];
        }
        this.overridePatternPropertiesKey = newKey;
        if (newKey) {
            this.combinedSchema.patternProperties[newKey] = this.overridePatternProperties;
        }
        this.fireDidPreferenceSchemaChanged();
    }
    doUnsetSchema(changes) {
        const inverseChanges = [];
        for (const change of changes) {
            const preferenceName = change.preferenceName;
            const overridden = this.preferenceOverrideService.overriddenPreferenceName(preferenceName);
            if (overridden) {
                delete this.overridePatternProperties.properties[`[${overridden.overrideIdentifier}]`];
                this.removePropFromSchemas(`[${overridden.overrideIdentifier}]`);
            }
            else {
                this.removePropFromSchemas(preferenceName);
            }
            const newValue = change.oldValue;
            const oldValue = change.newValue;
            const { scope, domain } = change;
            const inverseChange = { preferenceName, oldValue, scope, domain };
            if (typeof newValue === undefined) {
                delete this.preferences[preferenceName];
            }
            else {
                inverseChange.newValue = newValue;
                this.preferences[preferenceName] = newValue;
            }
            inverseChanges.push(inverseChange);
        }
        return inverseChanges;
    }
    validateSchema(schema) {
        const ajv = new Ajv();
        const valid = ajv.validateSchema(schema);
        if (!valid) {
            const errors = !!ajv.errors ? ajv.errorsText(ajv.errors) : 'unknown validation error';
            console.warn('A contributed preference schema has validation issues : ' + errors);
        }
    }
    doSetSchema(schema) {
        if (frontend_application_config_provider_1.FrontendApplicationConfigProvider.get().validatePreferencesSchema) {
            this.validateSchema(schema);
        }
        const scope = preference_scope_1.PreferenceScope.Default;
        const domain = this.getDomain();
        const changes = [];
        const defaultScope = preference_schema_1.PreferenceSchema.getDefaultScope(schema);
        const overridable = schema.overridable || false;
        for (const [preferenceName, rawSchemaProps] of Object.entries(schema.properties)) {
            if (this.combinedSchema.properties[preferenceName] && exports.DefaultOverridesPreferenceSchemaId !== schema.id) {
                console.error('Preference name collision detected in the schema for property: ' + preferenceName);
            }
            else {
                let schemaProps;
                if (this.combinedSchema.properties[preferenceName] && exports.DefaultOverridesPreferenceSchemaId === schema.id) {
                    // update existing default value in schema
                    schemaProps = preference_schema_1.PreferenceDataProperty.fromPreferenceSchemaProperty(rawSchemaProps, defaultScope);
                    this.updateSchemaPropsDefault(preferenceName, schemaProps);
                }
                else if (!rawSchemaProps.hasOwnProperty('included') || rawSchemaProps.included) {
                    // add overrides for languages
                    schemaProps = preference_schema_1.PreferenceDataProperty.fromPreferenceSchemaProperty(rawSchemaProps, defaultScope);
                    if (typeof schemaProps.overridable !== 'boolean' && overridable) {
                        schemaProps.overridable = true;
                    }
                    if (schemaProps.overridable) {
                        this.overridePatternProperties.properties[preferenceName] = schemaProps;
                    }
                    this.updateSchemaProps(preferenceName, schemaProps);
                }
                if (schemaProps !== undefined) {
                    const schemaDefault = this.getDefaultValue(schemaProps);
                    const configuredDefault = this.getConfiguredDefault(preferenceName);
                    if (this.preferenceOverrideService.testOverrideValue(preferenceName, schemaDefault)) {
                        schemaProps.defaultValue = preference_schema_1.PreferenceSchemaProperties.is(configuredDefault)
                            ? preference_provider_1.PreferenceProvider.merge(schemaDefault, configuredDefault)
                            : schemaDefault;
                        if (schemaProps.defaultValue && preference_schema_1.PreferenceSchemaProperties.is(schemaProps.defaultValue)) {
                            for (const overriddenPreferenceName in schemaProps.defaultValue) {
                                const overrideValue = schemaDefault[overriddenPreferenceName];
                                const overridePreferenceName = `${preferenceName}.${overriddenPreferenceName}`;
                                changes.push(this.doSetPreferenceValue(overridePreferenceName, overrideValue, { scope, domain }));
                            }
                        }
                    }
                    else {
                        schemaProps.defaultValue = configuredDefault === undefined ? schemaDefault : configuredDefault;
                        changes.push(this.doSetPreferenceValue(preferenceName, schemaProps.defaultValue, { scope, domain }));
                    }
                }
            }
        }
        return changes;
    }
    doSetPreferenceValue(preferenceName, newValue, { scope, domain }) {
        const oldValue = this.preferences[preferenceName];
        this.preferences[preferenceName] = newValue;
        return { preferenceName, oldValue, newValue, scope, domain };
    }
    getDefaultValue(property) {
        if (property.defaultValue !== undefined) {
            return property.defaultValue;
        }
        if (property.default !== undefined) {
            return property.default;
        }
        const type = Array.isArray(property.type) ? property.type[0] : property.type;
        switch (type) {
            case 'boolean':
                return false;
            case 'integer':
            case 'number':
                return 0;
            case 'string':
                return '';
            case 'array':
                return [];
            case 'object':
                return {};
        }
        // eslint-disable-next-line no-null/no-null
        return null;
    }
    getConfiguredDefault(preferenceName) {
        const config = frontend_application_config_provider_1.FrontendApplicationConfigProvider.get();
        if (preferenceName && FrontendApplicationPreferenceConfig.is(config) && preferenceName in config.preferences) {
            return config.preferences[preferenceName];
        }
    }
    getCombinedSchema() {
        return this.combinedSchema;
    }
    getSchema(scope) {
        switch (scope) {
            case preference_scope_1.PreferenceScope.Default:
            case preference_scope_1.PreferenceScope.User:
                return this.combinedSchema;
            case preference_scope_1.PreferenceScope.Workspace:
                return this.workspaceSchema;
            case preference_scope_1.PreferenceScope.Folder:
                return this.folderSchema;
        }
    }
    setSchema(schema) {
        const changes = this.doSetSchema(schema);
        if (!changes.length) {
            return common_1.Disposable.NULL;
        }
        this.fireDidPreferenceSchemaChanged();
        this.emitPreferencesChangedEvent(changes);
        return common_1.Disposable.create(() => {
            const inverseChanges = this.doUnsetSchema(changes);
            if (!inverseChanges.length) {
                return;
            }
            this.fireDidPreferenceSchemaChanged();
            this.emitPreferencesChangedEvent(inverseChanges);
        });
    }
    getPreferences() {
        return this.preferences;
    }
    async setPreference() {
        return false;
    }
    isValidInScope(preferenceName, scope) {
        let property;
        const overridden = this.preferenceOverrideService.overriddenPreferenceName(preferenceName);
        if (overridden) {
            // try from overridden schema
            property = this.overridePatternProperties[`[${overridden.overrideIdentifier}]`];
            property = property && property[overridden.preferenceName];
            if (!property) {
                // try from overridden identifier
                property = this.overridePatternProperties[overridden.preferenceName];
            }
            if (!property) {
                // try from overridden value
                property = this.combinedSchema.properties[overridden.preferenceName];
            }
        }
        else {
            property = this.combinedSchema.properties[preferenceName];
        }
        return property && property.scope >= scope;
    }
    *getPreferenceNames() {
        for (const preferenceName in this.combinedSchema.properties) {
            yield preferenceName;
            for (const overridePreferenceName of this.getOverridePreferenceNames(preferenceName)) {
                yield overridePreferenceName;
            }
        }
    }
    getOverridePreferenceNames(preferenceName) {
        const preference = this.combinedSchema.properties[preferenceName];
        if (preference && preference.overridable) {
            return this.preferenceOverrideService.getOverridePreferenceNames(preferenceName);
        }
        return [][Symbol.iterator]();
    }
    getSchemaProperty(key) {
        return this.combinedSchema.properties[key];
    }
    /**
     * {@link property} will be assigned to field {@link key} in the schema.
     * Pass a new object to invalidate old schema.
     */
    updateSchemaProperty(key, property) {
        this.updateSchemaProps(key, property);
        this.fireDidPreferenceSchemaChanged();
    }
    updateSchemaProps(key, property) {
        this.combinedSchema.properties[key] = property;
        switch (property.scope) {
            case preference_scope_1.PreferenceScope.Folder:
                this.folderSchema.properties[key] = property;
            // Fall through. isValidInScope implies that User ⊃ Workspace ⊃ Folder,
            // so anything we add to folder should be added to workspace, but not vice versa.
            case preference_scope_1.PreferenceScope.Workspace:
                this.workspaceSchema.properties[key] = property;
                break;
        }
    }
    updateSchemaPropsDefault(key, property) {
        this.combinedSchema.properties[key].default = property.default;
        this.combinedSchema.properties[key].defaultValue = property.defaultValue;
        if (this.workspaceSchema.properties[key]) {
            this.workspaceSchema.properties[key].default = property.default;
            this.workspaceSchema.properties[key].defaultValue = property.defaultValue;
        }
        if (this.folderSchema.properties[key]) {
            this.folderSchema.properties[key].default = property.default;
            this.folderSchema.properties[key].defaultValue = property.defaultValue;
        }
    }
    removePropFromSchemas(key) {
        // If we remove a key from combined, it should also be removed from all narrower scopes.
        delete this.combinedSchema.properties[key];
        delete this.workspaceSchema.properties[key];
        delete this.folderSchema.properties[key];
    }
    readConfiguredPreferences() {
        const config = frontend_application_config_provider_1.FrontendApplicationConfigProvider.get();
        if (FrontendApplicationPreferenceConfig.is(config)) {
            try {
                const configuredDefaults = config.preferences;
                const parsedDefaults = this.getParsedContent(configuredDefaults);
                Object.assign(this.preferences, parsedDefaults);
                const scope = preference_scope_1.PreferenceScope.Default;
                const domain = this.getDomain();
                const changes = Object.keys(this.preferences)
                    .map((key) => ({ preferenceName: key, oldValue: undefined, newValue: this.preferences[key], scope, domain }));
                this.emitPreferencesChangedEvent(changes);
            }
            catch (e) {
                console.error('Failed to load preferences from frontend configuration.', e);
            }
        }
    }
};
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(common_1.ContributionProvider),
    (0, inversify_1.named)(exports.PreferenceContribution),
    (0, tslib_1.__metadata)("design:type", Object)
], PreferenceSchemaProvider.prototype, "preferenceContributions", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(preference_configurations_1.PreferenceConfigurations),
    (0, tslib_1.__metadata)("design:type", preference_configurations_1.PreferenceConfigurations)
], PreferenceSchemaProvider.prototype, "configurations", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.postConstruct)(),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", []),
    (0, tslib_1.__metadata)("design:returntype", void 0)
], PreferenceSchemaProvider.prototype, "init", null);
PreferenceSchemaProvider = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)()
], PreferenceSchemaProvider);
exports.PreferenceSchemaProvider = PreferenceSchemaProvider;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/preferences/preference-language-override-service.js":
/*!******************************************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/preferences/preference-language-override-service.js ***!
  \******************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2021 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PreferenceLanguageOverrideService = exports.getOverridePattern = exports.OVERRIDE_PROPERTY_PATTERN = exports.OverridePreferenceName = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/es/inversify.js");
const common_1 = __webpack_require__(/*! ../../common */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/index.js");
const preference_schema_1 = __webpack_require__(/*! ../../common/preferences/preference-schema */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/preferences/preference-schema.js");
var OverridePreferenceName;
(function (OverridePreferenceName) {
    function is(arg) {
        return (0, common_1.isObject)(arg) && 'preferenceName' in arg && 'overrideIdentifier' in arg;
    }
    OverridePreferenceName.is = is;
})(OverridePreferenceName = exports.OverridePreferenceName || (exports.OverridePreferenceName = {}));
const OVERRIDE_PROPERTY = '\\[(.*)\\]$';
exports.OVERRIDE_PROPERTY_PATTERN = new RegExp(OVERRIDE_PROPERTY);
const getOverridePattern = (identifier) => `\\[(${identifier})\\]$`;
exports.getOverridePattern = getOverridePattern;
let PreferenceLanguageOverrideService = class PreferenceLanguageOverrideService {
    constructor() {
        this.overrideIdentifiers = new Set();
    }
    testOverrideValue(name, value) {
        return preference_schema_1.PreferenceSchemaProperties.is(value) && exports.OVERRIDE_PROPERTY_PATTERN.test(name);
    }
    /**
     * @param overrideIdentifier the language id associated for a language override, e.g. `typescript`
     * @returns the form used to mark language overrides in preference files, e.g. `[typescript]`
     */
    markLanguageOverride(overrideIdentifier) {
        return `[${overrideIdentifier}]`;
    }
    /**
     * @returns the flat JSON path to an overridden preference, e.g. [typescript].editor.tabSize.
     */
    overridePreferenceName({ preferenceName, overrideIdentifier }) {
        return `${this.markLanguageOverride(overrideIdentifier)}.${preferenceName}`;
    }
    /**
     * @returns an OverridePreferenceName if the `name` contains a language override, e.g. [typescript].editor.tabSize.
     */
    overriddenPreferenceName(name) {
        const index = name.indexOf('.');
        if (index === -1) {
            return undefined;
        }
        const matches = name.substring(0, index).match(exports.OVERRIDE_PROPERTY_PATTERN);
        const overrideIdentifier = matches && matches[1];
        if (!overrideIdentifier || !this.overrideIdentifiers.has(overrideIdentifier)) {
            return undefined;
        }
        const preferenceName = name.substring(index + 1);
        return { preferenceName, overrideIdentifier };
    }
    computeOverridePatternPropertiesKey() {
        let param = '';
        for (const overrideIdentifier of this.overrideIdentifiers) {
            if (param.length) {
                param += '|';
            }
            param += new RegExp((0, common_1.escapeRegExpCharacters)(overrideIdentifier)).source;
        }
        return param.length ? (0, exports.getOverridePattern)(param) : undefined;
    }
    *getOverridePreferenceNames(preferenceName) {
        for (const overrideIdentifier of this.overrideIdentifiers) {
            yield this.overridePreferenceName({ preferenceName, overrideIdentifier });
        }
    }
    /**
     * @param overrideIdentifier
     * @returns true if the addition caused a change, i.e. if the identifier was not already present in the set of identifiers, false otherwise.
     */
    addOverrideIdentifier(overrideIdentifier) {
        const alreadyPresent = this.overrideIdentifiers.has(overrideIdentifier);
        if (!alreadyPresent) {
            this.overrideIdentifiers.add(overrideIdentifier);
        }
        return !alreadyPresent;
    }
    /**
     * @param overrideIdentifier
     * @returns true if the deletion caused a change, i.e. if the identifier was present in the set, false otherwise.
     */
    removeOverrideIdentifier(overrideIdentifier) {
        return this.overrideIdentifiers.delete(overrideIdentifier);
    }
};
PreferenceLanguageOverrideService = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)()
], PreferenceLanguageOverrideService);
exports.PreferenceLanguageOverrideService = PreferenceLanguageOverrideService;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/preferences/preference-provider.js":
/*!*************************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/preferences/preference-provider.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PreferenceProvider = exports.PreferenceProviderDataChange = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
/* eslint-disable @typescript-eslint/no-explicit-any */
const debounce = __webpack_require__(/*! p-debounce */ "../node_modules/p-debounce/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/es/inversify.js");
const coreutils_1 = __webpack_require__(/*! @phosphor/coreutils */ "../node_modules/@phosphor/coreutils/lib/index.js");
const uri_1 = __webpack_require__(/*! ../../common/uri */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/uri.js");
const common_1 = __webpack_require__(/*! ../../common */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/index.js");
const promise_util_1 = __webpack_require__(/*! ../../common/promise-util */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/promise-util.js");
const preference_language_override_service_1 = __webpack_require__(/*! ./preference-language-override-service */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/preferences/preference-language-override-service.js");
var PreferenceProviderDataChange;
(function (PreferenceProviderDataChange) {
    function affects(change, resourceUri) {
        const resourcePath = resourceUri && new uri_1.default(resourceUri).path;
        const domain = change.domain;
        return !resourcePath || !domain || domain.some(uri => new uri_1.default(uri).path.relativity(resourcePath) >= 0);
    }
    PreferenceProviderDataChange.affects = affects;
})(PreferenceProviderDataChange = exports.PreferenceProviderDataChange || (exports.PreferenceProviderDataChange = {}));
/**
 * The {@link PreferenceProvider} is used to store and retrieve preference values. A {@link PreferenceProvider} does not operate in a global scope but is
 * configured for one or more {@link PreferenceScope}s. The (default implementation for the) {@link PreferenceService} aggregates all {@link PreferenceProvider}s and
 * serves as a common facade for manipulating preference values.
 */
let PreferenceProvider = class PreferenceProvider {
    constructor() {
        this.onDidPreferencesChangedEmitter = new common_1.Emitter();
        this.onDidPreferencesChanged = this.onDidPreferencesChangedEmitter.event;
        this.toDispose = new common_1.DisposableCollection();
        this._ready = new promise_util_1.Deferred();
        this.fireDidPreferencesChanged = debounce(() => {
            const changes = this.deferredChanges;
            this.deferredChanges = undefined;
            if (changes && Object.keys(changes).length) {
                this.onDidPreferencesChangedEmitter.fire(changes);
                return true;
            }
            return false;
        }, 0);
        this.toDispose.push(this.onDidPreferencesChangedEmitter);
    }
    dispose() {
        this.toDispose.dispose();
    }
    /**
     * Informs the listeners that one or more preferences of this provider are changed.
     * The listeners are able to find what was changed from the emitted event.
     */
    emitPreferencesChangedEvent(changes) {
        if (Array.isArray(changes)) {
            for (const change of changes) {
                this.mergePreferenceProviderDataChange(change);
            }
        }
        else {
            for (const preferenceName of Object.keys(changes)) {
                this.mergePreferenceProviderDataChange(changes[preferenceName]);
            }
        }
        return this.fireDidPreferencesChanged();
    }
    mergePreferenceProviderDataChange(change) {
        if (!this.deferredChanges) {
            this.deferredChanges = {};
        }
        const current = this.deferredChanges[change.preferenceName];
        const { newValue, scope, domain } = change;
        if (!current) {
            // new
            this.deferredChanges[change.preferenceName] = change;
        }
        else if (current.oldValue === newValue) {
            // delete
            delete this.deferredChanges[change.preferenceName];
        }
        else {
            // update
            Object.assign(current, { newValue, scope, domain });
        }
    }
    /**
     * Retrieve the stored value for the given preference and resource URI.
     *
     * @param preferenceName the preference identifier.
     * @param resourceUri the uri of the resource for which the preference is stored. This is used to retrieve
     * a potentially different value for the same preference for different resources, for example `files.encoding`.
     *
     * @returns the value stored for the given preference and resourceUri if it exists, otherwise `undefined`.
     */
    get(preferenceName, resourceUri) {
        return this.resolve(preferenceName, resourceUri).value;
    }
    /**
     * Resolve the value for the given preference and resource URI.
     *
     * @param preferenceName the preference identifier.
     * @param resourceUri the URI of the resource for which this provider should resolve the preference. This is used to retrieve
     * a potentially different value for the same preference for different resources, for example `files.encoding`.
     *
     * @returns an object containing the value stored for the given preference and resourceUri if it exists,
     * otherwise `undefined`.
     */
    resolve(preferenceName, resourceUri) {
        const value = this.getPreferences(resourceUri)[preferenceName];
        if (value !== undefined) {
            return {
                value,
                configUri: this.getConfigUri(resourceUri)
            };
        }
        return {};
    }
    /**
     * Resolved when the preference provider is ready to provide preferences
     * It should be resolved by subclasses.
     */
    get ready() {
        return this._ready.promise;
    }
    /**
     * Retrieve the domain for this provider.
     *
     * @returns the domain or `undefined` if this provider is suitable for all domains.
     */
    getDomain() {
        return undefined;
    }
    /**
     * Retrieve the configuration URI for the given resource URI.
     * @param resourceUri the uri of the resource or `undefined`.
     * @param sectionName the section to return the URI for, e.g. `tasks` or `launch`. Defaults to settings.
     *
     * @returns the corresponding resource URI or `undefined` if there is no valid URI.
     */
    getConfigUri(resourceUri, sectionName) {
        return undefined;
    }
    static merge(source, target) {
        if (source === undefined || !coreutils_1.JSONExt.isObject(source)) {
            return coreutils_1.JSONExt.deepCopy(target);
        }
        if (coreutils_1.JSONExt.isPrimitive(target)) {
            return {};
        }
        for (const key of Object.keys(target)) {
            const value = target[key];
            if (key in source) {
                if (coreutils_1.JSONExt.isObject(source[key]) && coreutils_1.JSONExt.isObject(value)) {
                    this.merge(source[key], value);
                    continue;
                }
                else if (coreutils_1.JSONExt.isArray(source[key]) && coreutils_1.JSONExt.isArray(value)) {
                    source[key] = [...coreutils_1.JSONExt.deepCopy(source[key]), ...coreutils_1.JSONExt.deepCopy(value)];
                    continue;
                }
            }
            source[key] = coreutils_1.JSONExt.deepCopy(value);
        }
        return source;
    }
    /**
     * Handles deep equality with the possibility of `undefined`
     */
    static deepEqual(a, b) {
        if (a === b) {
            return true;
        }
        if (a === undefined || b === undefined) {
            return false;
        }
        return coreutils_1.JSONExt.deepEqual(a, b);
    }
    getParsedContent(jsonData) {
        const preferences = {};
        if (!(0, common_1.isObject)(jsonData)) {
            return preferences;
        }
        for (const [preferenceName, preferenceValue] of Object.entries(jsonData)) {
            if (this.preferenceOverrideService.testOverrideValue(preferenceName, preferenceValue)) {
                for (const [overriddenPreferenceName, overriddenValue] of Object.entries(preferenceValue)) {
                    preferences[`${preferenceName}.${overriddenPreferenceName}`] = overriddenValue;
                }
            }
            else {
                preferences[preferenceName] = preferenceValue;
            }
        }
        return preferences;
    }
    canHandleScope(scope) {
        return true;
    }
};
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(preference_language_override_service_1.PreferenceLanguageOverrideService),
    (0, tslib_1.__metadata)("design:type", preference_language_override_service_1.PreferenceLanguageOverrideService)
], PreferenceProvider.prototype, "preferenceOverrideService", void 0);
PreferenceProvider = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)(),
    (0, tslib_1.__metadata)("design:paramtypes", [])
], PreferenceProvider);
exports.PreferenceProvider = PreferenceProvider;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/preferences/preference-proxy.js":
/*!**********************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/preferences/preference-proxy.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createPreferenceProxy = exports.PreferenceProxyOptions = void 0;
/* eslint-disable @typescript-eslint/no-explicit-any */
const common_1 = __webpack_require__(/*! ../../common */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/index.js");
const preference_contribution_1 = __webpack_require__(/*! ./preference-contribution */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/preferences/preference-contribution.js");
const preference_scope_1 = __webpack_require__(/*! ./preference-scope */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/preferences/preference-scope.js");
const preference_language_override_service_1 = __webpack_require__(/*! ./preference-language-override-service */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/preferences/preference-language-override-service.js");
exports.PreferenceProxyOptions = Symbol('PreferenceProxyOptions');
/**
 * Creates a preference proxy for typesafe preference handling.
 *
 * @param preferences the underlying preference service to use for preference handling.
 * @param promisedSchema the JSON Schema which describes which preferences are available including types and descriptions. Can be a promise.
 * @param options configuration options.
 *
 * @returns the created preference proxy.
 *
 * ### Usage
 *
 *  1. Create JSON Schema specifying your preferences
 *  2. Create Configuration type based on the JSON Schema
 *  3. Bind the return value of `createPreferenceProxy` to make your preferences available wherever needed.
 *
 * See {@link CorePreferences} for an example.
 *
 * Note that if `schema` is a Promise, most actions will be no-ops until the promise is resolved.
 *
 * @deprecated @since 1.23.0 use `PreferenceProxyFactory` instead.
 */
function createPreferenceProxy(preferences, promisedSchema, options) {
    const opts = options || {};
    const prefix = opts.prefix || '';
    const style = opts.style || 'flat';
    const isDeep = style === 'deep' || style === 'both';
    const isFlat = style === 'both' || style === 'flat';
    let schema;
    if (preference_contribution_1.PreferenceSchema.is(promisedSchema)) {
        schema = promisedSchema;
    }
    else {
        promisedSchema.then(s => schema = s);
    }
    const onPreferenceChanged = (listener, thisArgs, disposables) => preferences.onPreferencesChanged(changes => {
        if (schema) {
            for (const key of Object.keys(changes)) {
                const e = changes[key];
                const overridden = preferences.overriddenPreferenceName(e.preferenceName);
                const preferenceName = overridden ? overridden.preferenceName : e.preferenceName;
                if (preferenceName.startsWith(prefix) && (!opts.overrideIdentifier || (overridden === null || overridden === void 0 ? void 0 : overridden.overrideIdentifier) === opts.overrideIdentifier)) {
                    if (schema.properties[preferenceName]) {
                        const { newValue, oldValue } = e;
                        listener({
                            newValue, oldValue, preferenceName,
                            affects: (resourceUri, overrideIdentifier) => {
                                if (overrideIdentifier !== (overridden === null || overridden === void 0 ? void 0 : overridden.overrideIdentifier)) {
                                    return false;
                                }
                                return e.affects(resourceUri);
                            }
                        });
                    }
                }
            }
        }
    }, thisArgs, disposables);
    const unsupportedOperation = (_, __) => {
        throw new Error('Unsupported operation');
    };
    const getValue = (arg, defaultValue, resourceUri) => {
        const preferenceName = preference_language_override_service_1.OverridePreferenceName.is(arg) ?
            preferences.overridePreferenceName(arg) :
            arg;
        return preferences.get(preferenceName, defaultValue, resourceUri || opts.resourceUri);
    };
    const ownKeys = () => {
        const properties = [];
        if (schema) {
            for (const p of Object.keys(schema.properties)) {
                if (p.startsWith(prefix)) {
                    const idx = p.indexOf('.', prefix.length);
                    if (idx !== -1 && isDeep) {
                        const pre = p.substring(prefix.length, idx);
                        if (properties.indexOf(pre) === -1) {
                            properties.push(pre);
                        }
                    }
                    const prop = p.substring(prefix.length);
                    if (isFlat || prop.indexOf('.') === -1) {
                        properties.push(prop);
                    }
                }
            }
        }
        return properties;
    };
    const set = (_, property, value) => {
        if (typeof property !== 'string') {
            throw new Error(`unexpected property: ${String(property)}`);
        }
        if (style === 'deep' && property.indexOf('.') !== -1) {
            return false;
        }
        if (schema) {
            const fullProperty = prefix ? prefix + property : property;
            if (schema.properties[fullProperty]) {
                preferences.set(fullProperty, value, preference_scope_1.PreferenceScope.Default);
                return true;
            }
            const newPrefix = fullProperty + '.';
            for (const p of Object.keys(schema.properties)) {
                if (p.startsWith(newPrefix)) {
                    const subProxy = createPreferenceProxy(preferences, schema, {
                        prefix: newPrefix,
                        resourceUri: opts.resourceUri,
                        overrideIdentifier: opts.overrideIdentifier,
                        style
                    });
                    for (const k of Object.keys(value)) {
                        subProxy[k] = value[k];
                    }
                }
            }
        }
        return false;
    };
    const get = (_, property) => {
        if (typeof property !== 'string') {
            throw new Error(`unexpected property: ${String(property)}`);
        }
        const fullProperty = prefix ? prefix + property : property;
        if (schema) {
            if (isFlat || property.indexOf('.') === -1) {
                if (schema.properties[fullProperty]) {
                    let value;
                    if (opts.overrideIdentifier) {
                        value = preferences.get(preferences.overridePreferenceName({
                            overrideIdentifier: opts.overrideIdentifier,
                            preferenceName: fullProperty
                        }), undefined, opts.resourceUri);
                    }
                    if (value === undefined) {
                        value = preferences.get(fullProperty, undefined, opts.resourceUri);
                    }
                    return value;
                }
            }
        }
        if (property === 'onPreferenceChanged') {
            return onPreferenceChanged;
        }
        if (property === 'dispose') {
            return () => { };
        }
        if (property === 'ready') {
            return preferences.ready;
        }
        if (property === 'get') {
            return getValue;
        }
        if (property === 'toJSON') {
            return toJSON();
        }
        if (schema && isDeep) {
            const newPrefix = fullProperty + '.';
            for (const p of Object.keys(schema.properties)) {
                if (p.startsWith(newPrefix)) {
                    return createPreferenceProxy(preferences, schema, { prefix: newPrefix, resourceUri: opts.resourceUri, overrideIdentifier: opts.overrideIdentifier, style });
                }
            }
            let value;
            let parentSegment = fullProperty;
            const segments = [];
            do {
                const index = parentSegment.lastIndexOf('.');
                segments.push(parentSegment.substring(index + 1));
                parentSegment = parentSegment.substring(0, index);
                if (parentSegment in schema.properties) {
                    value = get(_, parentSegment);
                }
            } while (parentSegment && value === undefined);
            let segment;
            while ((0, common_1.isObject)(value) && (segment = segments.pop())) {
                value = value[segment];
            }
            return segments.length ? undefined : value;
        }
        return undefined;
    };
    const toJSON = () => {
        const result = {};
        for (const k of ownKeys()) {
            result[k] = get(undefined, k);
        }
        return result;
    };
    return new Proxy({}, {
        get,
        ownKeys,
        getOwnPropertyDescriptor: (_, property) => {
            if (ownKeys().indexOf(property) !== -1) {
                return {
                    enumerable: true,
                    configurable: true
                };
            }
            return {};
        },
        set,
        deleteProperty: unsupportedOperation,
        defineProperty: unsupportedOperation
    });
}
exports.createPreferenceProxy = createPreferenceProxy;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/preferences/preference-scope.js":
/*!**********************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/preferences/preference-scope.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2019 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PreferenceScope = void 0;
const preference_scope_1 = __webpack_require__(/*! ../../common/preferences/preference-scope */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/preferences/preference-scope.js");
Object.defineProperty(exports, "PreferenceScope", ({ enumerable: true, get: function () { return preference_scope_1.PreferenceScope; } }));


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/preferences/preference-service.js":
/*!************************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/preferences/preference-service.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PreferenceServiceImpl = exports.PreferenceProviderProvider = exports.PreferenceService = exports.PreferenceChangeImpl = exports.PreferenceScope = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
/* eslint-disable @typescript-eslint/no-explicit-any */
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/es/inversify.js");
const common_1 = __webpack_require__(/*! ../../common */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/index.js");
const promise_util_1 = __webpack_require__(/*! ../../common/promise-util */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/promise-util.js");
const preference_provider_1 = __webpack_require__(/*! ./preference-provider */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/preferences/preference-provider.js");
const preference_contribution_1 = __webpack_require__(/*! ./preference-contribution */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/preferences/preference-contribution.js");
const uri_1 = __webpack_require__(/*! ../../common/uri */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/uri.js");
const preference_scope_1 = __webpack_require__(/*! ./preference-scope */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/preferences/preference-scope.js");
Object.defineProperty(exports, "PreferenceScope", ({ enumerable: true, get: function () { return preference_scope_1.PreferenceScope; } }));
const preference_configurations_1 = __webpack_require__(/*! ./preference-configurations */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/preferences/preference-configurations.js");
const json_1 = __webpack_require__(/*! @phosphor/coreutils/lib/json */ "../node_modules/@phosphor/coreutils/lib/json.js");
const preference_language_override_service_1 = __webpack_require__(/*! ./preference-language-override-service */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/preferences/preference-language-override-service.js");
class PreferenceChangeImpl {
    constructor(change) {
        this.change = (0, common_1.deepFreeze)(change);
    }
    get preferenceName() {
        return this.change.preferenceName;
    }
    get newValue() {
        return this.change.newValue;
    }
    get oldValue() {
        return this.change.oldValue;
    }
    get scope() {
        return this.change.scope;
    }
    get domain() {
        return this.change.domain;
    }
    // TODO add tests
    affects(resourceUri) {
        const resourcePath = resourceUri && new uri_1.default(resourceUri).path;
        const domain = this.change.domain;
        return !resourcePath || !domain || domain.some(uri => new uri_1.default(uri).path.relativity(resourcePath) >= 0);
    }
}
exports.PreferenceChangeImpl = PreferenceChangeImpl;
exports.PreferenceService = Symbol('PreferenceService');
/**
 * We cannot load providers directly in the case if they depend on `PreferenceService` somehow.
 * It allows to load them lazily after DI is configured.
 */
exports.PreferenceProviderProvider = Symbol('PreferenceProviderProvider');
let PreferenceServiceImpl = class PreferenceServiceImpl {
    constructor() {
        this.onPreferenceChangedEmitter = new common_1.Emitter();
        this.onPreferenceChanged = this.onPreferenceChangedEmitter.event;
        this.onPreferencesChangedEmitter = new common_1.Emitter();
        this.onPreferencesChanged = this.onPreferencesChangedEmitter.event;
        this.toDispose = new common_1.DisposableCollection(this.onPreferenceChangedEmitter, this.onPreferencesChangedEmitter);
        this.preferenceProviders = new Map();
        this._ready = new promise_util_1.Deferred();
        this._isReady = false;
    }
    async initializeProviders() {
        try {
            for (const scope of preference_scope_1.PreferenceScope.getScopes()) {
                const provider = this.providerProvider(scope);
                this.preferenceProviders.set(scope, provider);
                this.toDispose.push(provider.onDidPreferencesChanged(changes => this.reconcilePreferences(changes)));
                await provider.ready;
            }
            this._ready.resolve();
            this._isReady = true;
        }
        catch (e) {
            this._ready.reject(e);
        }
    }
    init() {
        this.toDispose.push(common_1.Disposable.create(() => this._ready.reject(new Error('preference service is disposed'))));
        this.initializeProviders();
    }
    dispose() {
        this.toDispose.dispose();
    }
    get ready() {
        return this._ready.promise;
    }
    get isReady() {
        return this._isReady;
    }
    reconcilePreferences(changes) {
        const changesToEmit = {};
        const acceptChange = (change) => this.getAffectedPreferenceNames(change, preferenceName => changesToEmit[preferenceName] = new PreferenceChangeImpl({ ...change, preferenceName }));
        for (const preferenceName of Object.keys(changes)) {
            let change = changes[preferenceName];
            if (change.newValue === undefined) {
                const overridden = this.overriddenPreferenceName(change.preferenceName);
                if (overridden) {
                    change = {
                        ...change, newValue: this.doGet(overridden.preferenceName)
                    };
                }
            }
            if (this.schema.isValidInScope(preferenceName, preference_scope_1.PreferenceScope.Folder)) {
                acceptChange(change);
                continue;
            }
            for (const scope of preference_scope_1.PreferenceScope.getReversedScopes()) {
                if (this.schema.isValidInScope(preferenceName, scope)) {
                    const provider = this.getProvider(scope);
                    if (provider) {
                        const value = provider.get(preferenceName);
                        if (scope > change.scope && value !== undefined) {
                            // preference defined in a more specific scope
                            break;
                        }
                        else if (scope === change.scope && change.newValue !== undefined) {
                            // preference is changed into something other than `undefined`
                            acceptChange(change);
                        }
                        else if (scope < change.scope && change.newValue === undefined && value !== undefined) {
                            // preference is changed to `undefined`, use the value from a more general scope
                            change = {
                                ...change,
                                newValue: value,
                                scope
                            };
                            acceptChange(change);
                        }
                    }
                }
                else if (change.newValue === undefined && change.scope === preference_scope_1.PreferenceScope.Default) {
                    // preference is removed
                    acceptChange(change);
                    break;
                }
            }
        }
        // emit the changes
        const changedPreferenceNames = Object.keys(changesToEmit);
        if (changedPreferenceNames.length > 0) {
            this.onPreferencesChangedEmitter.fire(changesToEmit);
        }
        changedPreferenceNames.forEach(preferenceName => this.onPreferenceChangedEmitter.fire(changesToEmit[preferenceName]));
    }
    getAffectedPreferenceNames(change, accept) {
        accept(change.preferenceName);
        for (const overridePreferenceName of this.schema.getOverridePreferenceNames(change.preferenceName)) {
            if (!this.doHas(overridePreferenceName)) {
                accept(overridePreferenceName);
            }
        }
    }
    getProvider(scope) {
        return this.preferenceProviders.get(scope);
    }
    has(preferenceName, resourceUri) {
        return this.get(preferenceName, undefined, resourceUri) !== undefined;
    }
    get(preferenceName, defaultValue, resourceUri) {
        return this.resolve(preferenceName, defaultValue, resourceUri).value;
    }
    resolve(preferenceName, defaultValue, resourceUri) {
        const { value, configUri } = this.doResolve(preferenceName, defaultValue, resourceUri);
        if (value === undefined) {
            const overridden = this.overriddenPreferenceName(preferenceName);
            if (overridden) {
                return this.doResolve(overridden.preferenceName, defaultValue, resourceUri);
            }
        }
        return { value, configUri };
    }
    async set(preferenceName, value, scope, resourceUri) {
        const resolvedScope = scope !== null && scope !== void 0 ? scope : (!resourceUri ? preference_scope_1.PreferenceScope.Workspace : preference_scope_1.PreferenceScope.Folder);
        if (resolvedScope === preference_scope_1.PreferenceScope.Folder && !resourceUri) {
            throw new Error('Unable to write to Folder Settings because no resource is provided.');
        }
        const provider = this.getProvider(resolvedScope);
        if (provider && await provider.setPreference(preferenceName, value, resourceUri)) {
            return;
        }
        throw new Error(`Unable to write to ${preference_scope_1.PreferenceScope[resolvedScope]} Settings.`);
    }
    getBoolean(preferenceName, defaultValue, resourceUri) {
        const value = resourceUri ? this.get(preferenceName, defaultValue, resourceUri) : this.get(preferenceName, defaultValue);
        // eslint-disable-next-line no-null/no-null
        return value !== null && value !== undefined ? !!value : defaultValue;
    }
    getString(preferenceName, defaultValue, resourceUri) {
        const value = resourceUri ? this.get(preferenceName, defaultValue, resourceUri) : this.get(preferenceName, defaultValue);
        // eslint-disable-next-line no-null/no-null
        if (value === null || value === undefined) {
            return defaultValue;
        }
        return value.toString();
    }
    getNumber(preferenceName, defaultValue, resourceUri) {
        const value = resourceUri ? this.get(preferenceName, defaultValue, resourceUri) : this.get(preferenceName, defaultValue);
        // eslint-disable-next-line no-null/no-null
        if (value === null || value === undefined) {
            return defaultValue;
        }
        if (typeof value === 'number') {
            return value;
        }
        return Number(value);
    }
    inspect(preferenceName, resourceUri, forceLanguageOverride) {
        var _a, _b;
        const defaultValue = this.inspectInScope(preferenceName, preference_scope_1.PreferenceScope.Default, resourceUri, forceLanguageOverride);
        const globalValue = this.inspectInScope(preferenceName, preference_scope_1.PreferenceScope.User, resourceUri, forceLanguageOverride);
        const workspaceValue = this.inspectInScope(preferenceName, preference_scope_1.PreferenceScope.Workspace, resourceUri, forceLanguageOverride);
        const workspaceFolderValue = this.inspectInScope(preferenceName, preference_scope_1.PreferenceScope.Folder, resourceUri, forceLanguageOverride);
        const valueApplied = (_b = (_a = workspaceFolderValue !== null && workspaceFolderValue !== void 0 ? workspaceFolderValue : workspaceValue) !== null && _a !== void 0 ? _a : globalValue) !== null && _b !== void 0 ? _b : defaultValue;
        return { preferenceName, defaultValue, globalValue, workspaceValue, workspaceFolderValue, value: valueApplied };
    }
    inspectInScope(preferenceName, scope, resourceUri, forceLanguageOverride) {
        const value = this.doInspectInScope(preferenceName, scope, resourceUri);
        if (value === undefined && !forceLanguageOverride) {
            const overridden = this.overriddenPreferenceName(preferenceName);
            if (overridden) {
                return this.doInspectInScope(overridden.preferenceName, scope, resourceUri);
            }
        }
        return value;
    }
    getScopedValueFromInspection(inspection, scope) {
        switch (scope) {
            case preference_scope_1.PreferenceScope.Default:
                return inspection.defaultValue;
            case preference_scope_1.PreferenceScope.User:
                return inspection.globalValue;
            case preference_scope_1.PreferenceScope.Workspace:
                return inspection.workspaceValue;
            case preference_scope_1.PreferenceScope.Folder:
                return inspection.workspaceFolderValue;
        }
        (0, common_1.unreachable)(scope, 'Not all PreferenceScope enum variants handled.');
    }
    async updateValue(preferenceName, value, resourceUri) {
        const inspection = this.inspect(preferenceName, resourceUri);
        if (inspection) {
            const scopesToChange = this.getScopesToChange(inspection, value);
            const isDeletion = value === undefined
                || (scopesToChange.length === 1 && scopesToChange[0] === preference_scope_1.PreferenceScope.User && json_1.JSONExt.deepEqual(value, inspection.defaultValue));
            const effectiveValue = isDeletion ? undefined : value;
            await Promise.all(scopesToChange.map(scope => this.set(preferenceName, effectiveValue, scope, resourceUri)));
        }
    }
    getScopesToChange(inspection, intendedValue) {
        var _a;
        if (json_1.JSONExt.deepEqual(inspection.value, intendedValue)) {
            return [];
        }
        // Scopes in ascending order of scope breadth.
        const allScopes = preference_scope_1.PreferenceScope.getReversedScopes();
        // Get rid of Default scope. We can't set anything there.
        allScopes.pop();
        const isScopeDefined = (scope) => this.getScopedValueFromInspection(inspection, scope) !== undefined;
        if (intendedValue === undefined) {
            return allScopes.filter(isScopeDefined);
        }
        return [(_a = allScopes.find(isScopeDefined)) !== null && _a !== void 0 ? _a : preference_scope_1.PreferenceScope.User];
    }
    overridePreferenceName(options) {
        return this.preferenceOverrideService.overridePreferenceName(options);
    }
    overriddenPreferenceName(preferenceName) {
        return this.preferenceOverrideService.overriddenPreferenceName(preferenceName);
    }
    doHas(preferenceName, resourceUri) {
        return this.doGet(preferenceName, undefined, resourceUri) !== undefined;
    }
    doInspectInScope(preferenceName, scope, resourceUri) {
        const provider = this.getProvider(scope);
        return provider && provider.get(preferenceName, resourceUri);
    }
    doGet(preferenceName, defaultValue, resourceUri) {
        return this.doResolve(preferenceName, defaultValue, resourceUri).value;
    }
    doResolve(preferenceName, defaultValue, resourceUri) {
        const result = {};
        for (const scope of preference_scope_1.PreferenceScope.getScopes()) {
            if (this.schema.isValidInScope(preferenceName, scope)) {
                const provider = this.getProvider(scope);
                if (provider === null || provider === void 0 ? void 0 : provider.canHandleScope(scope)) {
                    const { configUri, value } = provider.resolve(preferenceName, resourceUri);
                    if (value !== undefined) {
                        result.configUri = configUri;
                        result.value = preference_provider_1.PreferenceProvider.merge(result.value, value);
                    }
                }
            }
        }
        return {
            configUri: result.configUri,
            value: result.value !== undefined ? (0, common_1.deepFreeze)(result.value) : defaultValue
        };
    }
    getConfigUri(scope, resourceUri, sectionName = this.configurations.getConfigName()) {
        const provider = this.getProvider(scope);
        if (!provider || !this.configurations.isAnyConfig(sectionName)) {
            return undefined;
        }
        const configUri = provider.getConfigUri(resourceUri, sectionName);
        if (configUri) {
            return configUri;
        }
        return provider.getContainingConfigUri && provider.getContainingConfigUri(resourceUri, sectionName);
    }
};
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(preference_contribution_1.PreferenceSchemaProvider),
    (0, tslib_1.__metadata)("design:type", preference_contribution_1.PreferenceSchemaProvider)
], PreferenceServiceImpl.prototype, "schema", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(exports.PreferenceProviderProvider),
    (0, tslib_1.__metadata)("design:type", Function)
], PreferenceServiceImpl.prototype, "providerProvider", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(preference_configurations_1.PreferenceConfigurations),
    (0, tslib_1.__metadata)("design:type", preference_configurations_1.PreferenceConfigurations)
], PreferenceServiceImpl.prototype, "configurations", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(preference_language_override_service_1.PreferenceLanguageOverrideService),
    (0, tslib_1.__metadata)("design:type", preference_language_override_service_1.PreferenceLanguageOverrideService)
], PreferenceServiceImpl.prototype, "preferenceOverrideService", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.postConstruct)(),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", []),
    (0, tslib_1.__metadata)("design:returntype", void 0)
], PreferenceServiceImpl.prototype, "init", null);
PreferenceServiceImpl = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)()
], PreferenceServiceImpl);
exports.PreferenceServiceImpl = PreferenceServiceImpl;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/preferences/preference-validation-service.js":
/*!***********************************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/preferences/preference-validation-service.js ***!
  \***********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2022 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PreferenceValidationService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
const preference_contribution_1 = __webpack_require__(/*! ./preference-contribution */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/preferences/preference-contribution.js");
const preference_language_override_service_1 = __webpack_require__(/*! ./preference-language-override-service */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/preferences/preference-language-override-service.js");
const inversify_1 = __webpack_require__(/*! ../../../shared/inversify */ "../node_modules/@theia/editor/node_modules/@theia/core/shared/inversify/index.js");
const common_1 = __webpack_require__(/*! ../../common */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/index.js");
const preference_provider_1 = __webpack_require__(/*! ./preference-provider */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/preferences/preference-provider.js");
let PreferenceValidationService = class PreferenceValidationService {
    validateOptions(options) {
        const valid = {};
        let problemsDetected = false;
        for (const [preferenceName, value] of Object.entries(options)) {
            const validValue = this.validateByName(preferenceName, value);
            if (validValue !== value) {
                problemsDetected = true;
            }
            valid[preferenceName] = validValue;
        }
        return problemsDetected ? valid : options;
    }
    validateByName(preferenceName, value) {
        const validValue = this.doValidateByName(preferenceName, value);
        // If value is undefined, it means the preference wasn't set, not that a bad value was set.
        if (validValue !== value && value !== undefined) {
            console.warn(`While validating options, found impermissible value for ${preferenceName}. Using valid value`, validValue, 'instead of configured value', value);
        }
        return validValue;
    }
    doValidateByName(preferenceName, value) {
        const schema = this.getSchema(preferenceName);
        return this.validateBySchema(preferenceName, value, schema);
    }
    validateBySchema(key, value, schema) {
        try {
            if (!schema) {
                console.warn('Request to validate preference with no schema registered:', key);
                return value;
            }
            if (schema.const !== undefined) {
                return this.validateConst(key, value, schema);
            }
            if (Array.isArray(schema.enum)) {
                return this.validateEnum(key, value, schema);
            }
            if (Array.isArray(schema.anyOf)) {
                return this.validateAnyOf(key, value, schema);
            }
            if (Array.isArray(schema.oneOf)) {
                return this.validateOneOf(key, value, schema);
            }
            if (schema.type === undefined) {
                console.warn('Request to validate preference with no type information:', key);
                return value;
            }
            if (Array.isArray(schema.type)) {
                return this.validateMultiple(key, value, schema);
            }
            switch (schema.type) {
                case 'array':
                    return this.validateArray(key, value, schema);
                case 'boolean':
                    return this.validateBoolean(key, value, schema);
                case 'integer':
                    return this.validateInteger(key, value, schema);
                case 'null':
                    return null; // eslint-disable-line no-null/no-null
                case 'number':
                    return this.validateNumber(key, value, schema);
                case 'object':
                    return this.validateObject(key, value, schema);
                case 'string':
                    return this.validateString(key, value, schema);
                default:
                    (0, common_1.unreachable)(schema.type, `Request to validate preference with unknown type in schema: ${key}`);
            }
        }
        catch (e) {
            console.error('Encountered an error while validating', key, 'with value', value, 'against schema', schema, e);
            return value;
        }
    }
    getSchema(name) {
        var _a;
        const combinedSchema = this.schemaProvider.getCombinedSchema().properties;
        if (combinedSchema[name]) {
            return combinedSchema[name];
        }
        const baseName = (_a = this.languageOverrideService.overriddenPreferenceName(name)) === null || _a === void 0 ? void 0 : _a.preferenceName;
        return baseName !== undefined ? combinedSchema[baseName] : undefined;
    }
    validateMultiple(key, value, schema) {
        const validation = (0, common_1.deepClone)(schema);
        const candidate = this.mapValidators(key, value, (function* () {
            for (const type of schema.type) {
                validation.type = type;
                yield toValidate => this.validateBySchema(key, toValidate, validation);
            }
        }).bind(this)());
        if (candidate !== value && (schema.default !== undefined || schema.defaultValue !== undefined)) {
            const configuredDefault = this.getDefaultFromSchema(schema);
            return this.validateMultiple(key, configuredDefault, { ...schema, default: undefined, defaultValue: undefined });
        }
        return candidate;
    }
    validateAnyOf(key, value, schema) {
        const candidate = this.mapValidators(key, value, (function* () {
            for (const option of schema.anyOf) {
                yield toValidate => this.validateBySchema(key, toValidate, option);
            }
        }).bind(this)());
        if (candidate !== value && (schema.default !== undefined || schema.defaultValue !== undefined)) {
            const configuredDefault = this.getDefaultFromSchema(schema);
            return this.validateAnyOf(key, configuredDefault, { ...schema, default: undefined, defaultValue: undefined });
        }
        return candidate;
    }
    validateOneOf(key, value, schema) {
        let passed = false;
        for (const subSchema of schema.oneOf) {
            const validValue = this.validateBySchema(key, value, subSchema);
            if (!passed && validValue === value) {
                passed = true;
            }
            else if (passed && validValue === value) {
                passed = false;
                break;
            }
        }
        if (passed) {
            return value;
        }
        if (schema.default !== undefined || schema.defaultValue !== undefined) {
            const configuredDefault = this.getDefaultFromSchema(schema);
            return this.validateOneOf(key, configuredDefault, { ...schema, default: undefined, defaultValue: undefined });
        }
        console.log(`While validating ${key}, failed to find a valid value or default value. Using configured value ${value}.`);
        return value;
    }
    mapValidators(key, value, validators) {
        const candidates = [];
        for (const validator of validators) {
            const candidate = validator(value);
            if (candidate === value) {
                return candidate;
            }
            candidates.push(candidate);
        }
        return candidates[0];
    }
    validateArray(key, value, schema) {
        const candidate = Array.isArray(value) ? value : this.getDefaultFromSchema(schema);
        if (!Array.isArray(candidate)) {
            return [];
        }
        if (!schema.items && !schema.prefixItems) {
            console.warn('Requested validation of array without item specification:', key);
            return candidate;
        }
        if (Array.isArray(schema.items) || Array.isArray(schema.prefixItems)) {
            return this.validateTuple(key, value, schema);
        }
        const itemSchema = schema.items;
        const valid = candidate.filter(item => this.validateBySchema(key, item, itemSchema) === item);
        return valid.length === candidate.length ? candidate : valid;
    }
    validateTuple(key, value, schema) {
        var _a, _b;
        const defaultValue = this.getDefaultFromSchema(schema);
        const maybeCandidate = Array.isArray(value) ? value : defaultValue;
        // If we find that the provided value is not valid, we immediately bail and try the default value instead.
        const shouldTryDefault = Array.isArray((_a = schema.defaultValue) !== null && _a !== void 0 ? _a : schema.default) && !preference_provider_1.PreferenceProvider.deepEqual(defaultValue, maybeCandidate);
        const tryDefault = () => this.validateTuple(key, defaultValue, schema);
        const candidate = Array.isArray(maybeCandidate) ? maybeCandidate : [];
        // Only `prefixItems` is officially part of the JSON Schema spec, but `items` as array was part of a draft and was used by VSCode.
        const tuple = ((_b = schema.prefixItems) !== null && _b !== void 0 ? _b : schema.items);
        const lengthIsWrong = candidate.length < tuple.length || (candidate.length > tuple.length && !schema.additionalItems);
        if (lengthIsWrong && shouldTryDefault) {
            return tryDefault();
        }
        let valid = true;
        const validItems = [];
        for (const [index, subschema] of tuple.entries()) {
            const targetItem = candidate[index];
            const validatedItem = targetItem === undefined ? this.getDefaultFromSchema(subschema) : this.validateBySchema(key, targetItem, subschema);
            valid && (valid = validatedItem === targetItem);
            if (!valid && shouldTryDefault) {
                return tryDefault();
            }
            validItems.push(validatedItem);
        }
        ;
        if (candidate.length > tuple.length) {
            if (!schema.additionalItems) {
                return validItems;
            }
            else if (schema.additionalItems === true && !valid) {
                validItems.push(...candidate.slice(tuple.length));
                return validItems;
            }
            else if (schema.additionalItems !== true) {
                const applicableSchema = schema.additionalItems;
                for (let i = tuple.length; i < candidate.length; i++) {
                    const targetItem = candidate[i];
                    const validatedItem = this.validateBySchema(key, targetItem, applicableSchema);
                    if (validatedItem === targetItem) {
                        validItems.push(targetItem);
                    }
                    else {
                        valid = false;
                        if (shouldTryDefault) {
                            return tryDefault();
                        }
                    }
                }
            }
        }
        return valid ? candidate : validItems;
    }
    validateConst(key, value, schema) {
        if (preference_provider_1.PreferenceProvider.deepEqual(value, schema.const)) {
            return value;
        }
        return schema.const;
    }
    validateEnum(key, value, schema) {
        const options = schema.enum;
        if (options.some(option => preference_provider_1.PreferenceProvider.deepEqual(option, value))) {
            return value;
        }
        const configuredDefault = this.getDefaultFromSchema(schema);
        if (options.some(option => preference_provider_1.PreferenceProvider.deepEqual(option, configuredDefault))) {
            return configuredDefault;
        }
        return options[0];
    }
    validateBoolean(key, value, schema) {
        if (value === true || value === false) {
            return value;
        }
        if (value === 'true') {
            return true;
        }
        if (value === 'false') {
            return false;
        }
        return Boolean(this.getDefaultFromSchema(schema));
    }
    validateInteger(key, value, schema) {
        return Math.round(this.validateNumber(key, value, schema));
    }
    validateNumber(key, value, schema) {
        let validated = Number(value);
        if (isNaN(validated)) {
            const configuredDefault = Number(this.getDefaultFromSchema(schema));
            validated = isNaN(configuredDefault) ? 0 : configuredDefault;
        }
        if (schema.minimum !== undefined) {
            validated = Math.max(validated, schema.minimum);
        }
        if (schema.maximum !== undefined) {
            validated = Math.min(validated, schema.maximum);
        }
        return validated;
    }
    validateObject(key, value, schema) {
        if (this.objectMatchesSchema(key, value, schema)) {
            return value;
        }
        const configuredDefault = this.getDefaultFromSchema(schema);
        if (this.objectMatchesSchema(key, configuredDefault, schema)) {
            return configuredDefault;
        }
        return {};
    }
    // This evaluates most of the fields that commonly appear on PreferenceItem, but it could be improved to evaluate all possible JSON schema specifications.
    objectMatchesSchema(key, value, schema) {
        if (!value || typeof value !== 'object') {
            return false;
        }
        if (schema.required && schema.required.some(requiredField => !(requiredField in value))) {
            return false;
        }
        if (schema.additionalProperties === false && schema.properties && Object.keys(value).some(fieldKey => !(fieldKey in schema.properties))) {
            return false;
        }
        const additionalPropertyValidator = schema.additionalProperties !== true && !!schema.additionalProperties && schema.additionalProperties;
        for (const [fieldKey, fieldValue] of Object.entries(value)) {
            const fieldLabel = `${key}#${fieldKey}`;
            if (schema.properties && fieldKey in schema.properties) {
                const valid = this.validateBySchema(fieldLabel, fieldValue, schema.properties[fieldKey]);
                if (valid !== fieldValue) {
                    return false;
                }
            }
            else if (additionalPropertyValidator) {
                const valid = this.validateBySchema(fieldLabel, fieldValue, additionalPropertyValidator);
                if (valid !== fieldValue) {
                    return false;
                }
            }
        }
        return true;
    }
    validateString(key, value, schema) {
        if (typeof value === 'string') {
            return value;
        }
        if (value instanceof String) {
            return value.toString();
        }
        const configuredDefault = this.getDefaultFromSchema(schema);
        return (configuredDefault !== null && configuredDefault !== void 0 ? configuredDefault : '').toString();
    }
    getDefaultFromSchema(schema) {
        return this.schemaProvider.getDefaultValue(schema);
    }
};
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(preference_contribution_1.PreferenceSchemaProvider),
    (0, tslib_1.__metadata)("design:type", preference_contribution_1.PreferenceSchemaProvider)
], PreferenceValidationService.prototype, "schemaProvider", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(preference_language_override_service_1.PreferenceLanguageOverrideService),
    (0, tslib_1.__metadata)("design:type", preference_language_override_service_1.PreferenceLanguageOverrideService)
], PreferenceValidationService.prototype, "languageOverrideService", void 0);
PreferenceValidationService = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)()
], PreferenceValidationService);
exports.PreferenceValidationService = PreferenceValidationService;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/progress-bar-factory.js":
/*!**************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/progress-bar-factory.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2019 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ProgressBarOptions = exports.ProgressBarFactory = void 0;
exports.ProgressBarFactory = Symbol('ProgressBarFactory');
exports.ProgressBarOptions = Symbol('ProgressBarOptions');


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/quick-input/index.js":
/*!***********************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/quick-input/index.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
// *****************************************************************************
// Copyright (C) 2021 SAP SE or an SAP affiliate company and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./quick-command-frontend-contribution */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/quick-input/quick-command-frontend-contribution.js"), exports);
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./quick-command-service */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/quick-input/quick-command-service.js"), exports);
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./quick-help-service */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/quick-input/quick-help-service.js"), exports);
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./quick-access */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/quick-input/quick-access.js"), exports);
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./quick-input-frontend-contribution */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/quick-input/quick-input-frontend-contribution.js"), exports);
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./quick-input-service */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/quick-input/quick-input-service.js"), exports);
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./quick-view-service */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/quick-input/quick-view-service.js"), exports);
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./quick-pick-service-impl */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/quick-input/quick-pick-service-impl.js"), exports);


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/quick-input/quick-access.js":
/*!******************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/quick-input/quick-access.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2021 SAP SE or an SAP affiliate company and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.QuickAccessRegistry = exports.QuickAccessContribution = void 0;
exports.QuickAccessContribution = Symbol('QuickAccessContribution');
exports.QuickAccessRegistry = Symbol('QuickAccessRegistry');


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/quick-input/quick-command-frontend-contribution.js":
/*!*****************************************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/quick-input/quick-command-frontend-contribution.js ***!
  \*****************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.QuickCommandFrontendContribution = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
// *****************************************************************************
// Copyright (C) 2017 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/es/inversify.js");
const common_1 = __webpack_require__(/*! ../../common */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/index.js");
const common_frontend_contribution_1 = __webpack_require__(/*! ../common-frontend-contribution */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/common-frontend-contribution.js");
const quick_command_service_1 = __webpack_require__(/*! ./quick-command-service */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/quick-input/quick-command-service.js");
const quick_input_service_1 = __webpack_require__(/*! ./quick-input-service */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/quick-input/quick-input-service.js");
const dialogs_1 = __webpack_require__(/*! ../dialogs */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/dialogs.js");
let QuickCommandFrontendContribution = class QuickCommandFrontendContribution {
    registerCommands(commands) {
        commands.registerCommand(quick_command_service_1.quickCommand, {
            execute: () => {
                var _a;
                (_a = this.quickInputService) === null || _a === void 0 ? void 0 : _a.open('>');
            }
        });
        commands.registerCommand(quick_command_service_1.CLEAR_COMMAND_HISTORY, {
            execute: async () => {
                const shouldClear = await new dialogs_1.ConfirmDialog({
                    title: common_1.nls.localizeByDefault('Clear Command History'),
                    msg: common_1.nls.localizeByDefault('Do you want to clear the history of recently used commands?'),
                    ok: common_1.nls.localizeByDefault('Clear'),
                    cancel: dialogs_1.Dialog.CANCEL,
                }).open();
                if (shouldClear) {
                    commands.clearCommandHistory();
                }
            }
        });
        commands.registerCommand(quick_command_service_1.CLOSE_QUICK_OPEN, {
            execute: () => { var _a; return (_a = this.quickInputService) === null || _a === void 0 ? void 0 : _a.hide(); }
        });
    }
    registerMenus(menus) {
        menus.registerMenuAction(common_frontend_contribution_1.CommonMenus.VIEW_PRIMARY, {
            commandId: quick_command_service_1.quickCommand.id,
            label: common_1.nls.localizeByDefault('Command Palette...')
        });
        menus.registerMenuAction(common_frontend_contribution_1.CommonMenus.MANAGE_GENERAL, {
            commandId: quick_command_service_1.quickCommand.id,
            label: common_1.nls.localizeByDefault('Command Palette...'),
            order: '0'
        });
    }
    registerKeybindings(keybindings) {
        keybindings.registerKeybinding({
            command: quick_command_service_1.quickCommand.id,
            keybinding: 'f1'
        });
        keybindings.registerKeybinding({
            command: quick_command_service_1.quickCommand.id,
            keybinding: 'ctrlcmd+shift+p'
        });
        keybindings.registerKeybinding({
            command: quick_command_service_1.CLOSE_QUICK_OPEN.id,
            keybinding: 'esc',
            when: 'inQuickOpen'
        });
        keybindings.registerKeybinding({
            command: quick_command_service_1.CLOSE_QUICK_OPEN.id,
            keybinding: 'shift+esc',
            when: 'inQuickOpen'
        });
    }
};
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(quick_input_service_1.QuickInputService),
    (0, inversify_1.optional)(),
    (0, tslib_1.__metadata)("design:type", Object)
], QuickCommandFrontendContribution.prototype, "quickInputService", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(quick_command_service_1.QuickCommandService),
    (0, inversify_1.optional)(),
    (0, tslib_1.__metadata)("design:type", quick_command_service_1.QuickCommandService)
], QuickCommandFrontendContribution.prototype, "quickCommandService", void 0);
QuickCommandFrontendContribution = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)()
], QuickCommandFrontendContribution);
exports.QuickCommandFrontendContribution = QuickCommandFrontendContribution;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/quick-input/quick-command-service.js":
/*!***************************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/quick-input/quick-command-service.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2021 SAP SE or an SAP affiliate company and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var QuickCommandService_1;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.QuickCommandService = exports.CLOSE_QUICK_OPEN = exports.CLEAR_COMMAND_HISTORY = exports.quickCommand = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/es/inversify.js");
const keybinding_1 = __webpack_require__(/*! ../keybinding */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/keybinding.js");
const common_1 = __webpack_require__(/*! ../../common */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/index.js");
const context_key_service_1 = __webpack_require__(/*! ../context-key-service */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/context-key-service.js");
const core_preferences_1 = __webpack_require__(/*! ../core-preferences */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/core-preferences.js");
const quick_access_1 = __webpack_require__(/*! ./quick-access */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/quick-input/quick-access.js");
const quick_input_service_1 = __webpack_require__(/*! ./quick-input-service */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/quick-input/quick-input-service.js");
const widgets_1 = __webpack_require__(/*! ../widgets */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/widgets/index.js");
exports.quickCommand = {
    id: 'workbench.action.showCommands'
};
exports.CLEAR_COMMAND_HISTORY = common_1.Command.toDefaultLocalizedCommand({
    id: 'clear.command.history',
    label: 'Clear Command History'
});
exports.CLOSE_QUICK_OPEN = {
    id: 'workbench.action.closeQuickOpen'
};
let QuickCommandService = QuickCommandService_1 = class QuickCommandService {
    constructor() {
        // The list of exempted commands not to be displayed in the recently used list.
        this.exemptedCommands = [
            exports.CLEAR_COMMAND_HISTORY,
        ];
        this.recentItems = [];
        this.otherItems = [];
        this.contexts = new Map();
    }
    registerQuickAccessProvider() {
        this.quickAccessRegistry.registerQuickAccessProvider({
            getInstance: () => this,
            prefix: QuickCommandService_1.PREFIX,
            placeholder: '',
            helpEntries: [{ description: 'Quick Command', needsEditor: false }]
        });
    }
    reset() {
        const { recent, other } = this.getCommands();
        this.recentItems = [];
        this.otherItems = [];
        this.recentItems.push(...recent.map(command => this.toItem(command)));
        this.otherItems.push(...other.map(command => this.toItem(command)));
    }
    getPicks(filter, token) {
        const items = [];
        // Update the list of commands by fetching them from the registry.
        this.reset();
        const recentItems = (0, quick_input_service_1.filterItems)(this.recentItems.slice(), filter);
        const otherItems = (0, quick_input_service_1.filterItems)(this.otherItems.slice(), filter);
        if (recentItems.length > 0) {
            items.push({ type: 'separator', label: common_1.nls.localizeByDefault('recently used') }, ...recentItems);
        }
        if (otherItems.length > 0) {
            if (recentItems.length > 0) {
                items.push({ type: 'separator', label: common_1.nls.localizeByDefault('other commands') });
            }
            items.push(...otherItems);
        }
        return items;
    }
    toItem(command) {
        const label = (command.category) ? `${command.category}: ` + command.label : command.label;
        const iconClasses = this.getItemIconClasses(command);
        const activeElement = window.document.activeElement;
        const originalLabel = command.originalLabel || command.label;
        const originalCategory = command.originalCategory || command.category;
        let detail = originalCategory ? `${originalCategory}: ${originalLabel}` : originalLabel;
        if (label === detail) {
            detail = undefined;
        }
        return {
            label,
            detail,
            iconClasses,
            alwaysShow: !!this.commandRegistry.getActiveHandler(command.id),
            keySequence: this.getKeybinding(command),
            execute: () => {
                activeElement.focus({ preventScroll: true });
                this.commandRegistry.executeCommand(command.id);
                this.commandRegistry.addRecentCommand(command);
            }
        };
    }
    getKeybinding(command) {
        const keybindings = this.keybindingRegistry.getKeybindingsForCommand(command.id);
        if (!keybindings || keybindings.length === 0) {
            return undefined;
        }
        try {
            return this.keybindingRegistry.resolveKeybinding(keybindings[0]);
        }
        catch (error) {
            return undefined;
        }
    }
    getItemIconClasses(command) {
        const toggledHandler = this.commandRegistry.getToggledHandler(command.id);
        if (toggledHandler) {
            return (0, widgets_1.codiconArray)('check');
        }
        return undefined;
    }
    pushCommandContext(commandId, when) {
        const contexts = this.contexts.get(commandId) || [];
        contexts.push(when);
        this.contexts.set(commandId, contexts);
        return common_1.Disposable.create(() => {
            const index = contexts.indexOf(when);
            if (index !== -1) {
                contexts.splice(index, 1);
            }
        });
    }
    /**
     * Get the list of valid commands.
     *
     * @param commands the list of raw commands.
     * @returns the list of valid commands.
     */
    getValidCommands(raw) {
        const valid = [];
        raw.forEach(command => {
            if (command.label) {
                const contexts = this.contexts.get(command.id);
                if (!contexts || contexts.some(when => this.contextKeyService.match(when))) {
                    valid.push(command);
                }
            }
        });
        return valid;
    }
    /**
     * Get the list of recently used and other commands.
     *
     * @returns the list of recently used commands and other commands.
     */
    getCommands() {
        // Get the list of recent commands.
        const recentCommands = this.commandRegistry.recent;
        // Get the list of all valid commands.
        const allCommands = this.getValidCommands(this.commandRegistry.commands);
        // Get the max history limit.
        const limit = this.corePreferences['workbench.commandPalette.history'];
        // Build the list of recent commands.
        let rCommands = [];
        if (limit > 0) {
            rCommands.push(...recentCommands.filter(r => !this.exemptedCommands.some(c => common_1.Command.equals(r, c)) &&
                allCommands.some(c => common_1.Command.equals(r, c))));
            if (rCommands.length > limit) {
                rCommands = rCommands.slice(0, limit);
            }
        }
        // Build the list of other commands.
        const oCommands = allCommands.filter(c => !rCommands.some(r => common_1.Command.equals(r, c)));
        // Normalize the list of recent commands.
        const recent = this.normalize(rCommands);
        // Normalize, and sort the list of other commands.
        const other = this.sort(this.normalize(oCommands));
        return { recent, other };
    }
    /**
     * Normalizes a list of commands.
     * Normalization includes obtaining commands that have labels, are visible, and are enabled.
     *
     * @param commands the list of commands.
     * @returns the list of normalized commands.
     */
    normalize(commands) {
        return commands.filter((a) => a.label && (this.commandRegistry.isVisible(a.id) && this.commandRegistry.isEnabled(a.id)));
    }
    /**
     * Sorts a list of commands alphabetically.
     *
     * @param commands the list of commands.
     * @returns the list of sorted commands.
     */
    sort(commands) {
        return commands.sort((a, b) => common_1.Command.compareCommands(a, b));
    }
};
QuickCommandService.PREFIX = '>';
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(context_key_service_1.ContextKeyService),
    (0, tslib_1.__metadata)("design:type", Object)
], QuickCommandService.prototype, "contextKeyService", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(common_1.CommandRegistry),
    (0, tslib_1.__metadata)("design:type", common_1.CommandRegistry)
], QuickCommandService.prototype, "commandRegistry", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(core_preferences_1.CorePreferences),
    (0, tslib_1.__metadata)("design:type", Object)
], QuickCommandService.prototype, "corePreferences", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(quick_access_1.QuickAccessRegistry),
    (0, tslib_1.__metadata)("design:type", Object)
], QuickCommandService.prototype, "quickAccessRegistry", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(keybinding_1.KeybindingRegistry),
    (0, tslib_1.__metadata)("design:type", keybinding_1.KeybindingRegistry)
], QuickCommandService.prototype, "keybindingRegistry", void 0);
QuickCommandService = QuickCommandService_1 = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)()
], QuickCommandService);
exports.QuickCommandService = QuickCommandService;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/quick-input/quick-help-service.js":
/*!************************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/quick-input/quick-help-service.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2021 SAP SE or an SAP affiliate company and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var QuickHelpService_1;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.QuickHelpService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/es/inversify.js");
const quick_access_1 = __webpack_require__(/*! ./quick-access */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/quick-input/quick-access.js");
const quick_input_service_1 = __webpack_require__(/*! ./quick-input-service */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/quick-input/quick-input-service.js");
let QuickHelpService = QuickHelpService_1 = class QuickHelpService {
    getPicks(filter, token) {
        const { editorProviders, globalProviders } = this.getQuickAccessProviders();
        const result = editorProviders.length === 0 || globalProviders.length === 0 ?
            // Without groups
            [
                ...(editorProviders.length === 0 ? globalProviders : editorProviders)
            ] :
            // With groups
            [
                { type: 'separator', label: 'global commands' },
                ...globalProviders,
                { type: 'separator', label: 'editor commands' },
                ...editorProviders
            ];
        return result;
    }
    getQuickAccessProviders() {
        const globalProviders = [];
        const editorProviders = [];
        const providers = this.quickAccessRegistry.getQuickAccessProviders();
        for (const provider of providers.sort((providerA, providerB) => providerA.prefix.localeCompare(providerB.prefix))) {
            if (provider.prefix === QuickHelpService_1.PREFIX) {
                continue; // exclude help which is already active
            }
            for (const helpEntry of provider.helpEntries) {
                const prefix = helpEntry.prefix || provider.prefix;
                const label = prefix || '\u2026' /* ... */;
                (helpEntry.needsEditor ? editorProviders : globalProviders).push({
                    label,
                    ariaLabel: `${label}, ${helpEntry.description}`,
                    description: helpEntry.description,
                    execute: () => this.quickInputService.open(prefix)
                });
            }
        }
        return { editorProviders, globalProviders };
    }
    registerQuickAccessProvider() {
        this.quickAccessRegistry.registerQuickAccessProvider({
            getInstance: () => this,
            prefix: QuickHelpService_1.PREFIX,
            placeholder: 'Type "?" to get help on the actions you can take from here.',
            helpEntries: [{ description: 'Show all Quick Access Providers', needsEditor: false }]
        });
    }
};
QuickHelpService.PREFIX = '?';
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(quick_access_1.QuickAccessRegistry),
    (0, tslib_1.__metadata)("design:type", Object)
], QuickHelpService.prototype, "quickAccessRegistry", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(quick_input_service_1.QuickInputService),
    (0, tslib_1.__metadata)("design:type", Object)
], QuickHelpService.prototype, "quickInputService", void 0);
QuickHelpService = QuickHelpService_1 = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)()
], QuickHelpService);
exports.QuickHelpService = QuickHelpService;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/quick-input/quick-input-frontend-contribution.js":
/*!***************************************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/quick-input/quick-input-frontend-contribution.js ***!
  \***************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2021 SAP SE or an SAP affiliate company and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.QuickInputFrontendContribution = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/es/inversify.js");
const common_1 = __webpack_require__(/*! ../../common */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/index.js");
const quick_access_1 = __webpack_require__(/*! ./quick-access */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/quick-input/quick-access.js");
let QuickInputFrontendContribution = class QuickInputFrontendContribution {
    onStart() {
        this.contributionProvider.getContributions().forEach(contrib => {
            contrib.registerQuickAccessProvider();
        });
    }
};
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(common_1.ContributionProvider),
    (0, inversify_1.named)(quick_access_1.QuickAccessContribution),
    (0, tslib_1.__metadata)("design:type", Object)
], QuickInputFrontendContribution.prototype, "contributionProvider", void 0);
QuickInputFrontendContribution = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)()
], QuickInputFrontendContribution);
exports.QuickInputFrontendContribution = QuickInputFrontendContribution;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/quick-input/quick-input-service.js":
/*!*************************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/quick-input/quick-input-service.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2021 SAP SE or an SAP affiliate company and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
(0, tslib_1.__exportStar)(__webpack_require__(/*! ../../common/quick-pick-service */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/quick-pick-service.js"), exports);


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/quick-input/quick-pick-service-impl.js":
/*!*****************************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/quick-input/quick-pick-service-impl.js ***!
  \*****************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.QuickPickServiceImpl = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/es/inversify.js");
const event_1 = __webpack_require__(/*! ../../common/event */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/event.js");
const quick_input_service_1 = __webpack_require__(/*! ./quick-input-service */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/quick-input/quick-input-service.js");
let QuickPickServiceImpl = class QuickPickServiceImpl {
    constructor() {
        this.onDidHideEmitter = new event_1.Emitter();
        this.onDidHide = this.onDidHideEmitter.event;
        this.onDidChangeValueEmitter = new event_1.Emitter();
        this.onDidChangeValue = this.onDidChangeValueEmitter.event;
        this.onDidAcceptEmitter = new event_1.Emitter();
        this.onDidAccept = this.onDidAcceptEmitter.event;
        this.onDidChangeActiveEmitter = new event_1.Emitter();
        this.onDidChangeActive = this.onDidChangeActiveEmitter.event;
        this.onDidChangeSelectionEmitter = new event_1.Emitter();
        this.onDidChangeSelection = this.onDidChangeSelectionEmitter.event;
        this.onDidTriggerButtonEmitter = new event_1.Emitter();
        this.onDidTriggerButton = this.onDidTriggerButtonEmitter.event;
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        this.items = [];
    }
    async show(items, options) {
        var _a;
        this.items = items;
        const opts = Object.assign({}, options, {
            onDidAccept: () => this.onDidAcceptEmitter.fire(),
            onDidChangeActive: (quickPick, activeItems) => this.onDidChangeActiveEmitter.fire({ quickPick, activeItems }),
            onDidChangeSelection: (quickPick, selectedItems) => this.onDidChangeSelectionEmitter.fire({ quickPick, selectedItems }),
            onDidChangeValue: (quickPick, filter) => this.onDidChangeValueEmitter.fire({ quickPick, filter }),
            onDidHide: () => this.onDidHideEmitter.fire(),
            onDidTriggerButton: (btn) => this.onDidTriggerButtonEmitter.fire(btn),
        });
        return (_a = this.quickInputService) === null || _a === void 0 ? void 0 : _a.showQuickPick(this.items, opts);
    }
    hide() {
        var _a;
        (_a = this.quickInputService) === null || _a === void 0 ? void 0 : _a.hide();
    }
    setItems(items) {
        this.items = items;
    }
};
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(quick_input_service_1.QuickInputService),
    (0, inversify_1.optional)(),
    (0, tslib_1.__metadata)("design:type", Object)
], QuickPickServiceImpl.prototype, "quickInputService", void 0);
QuickPickServiceImpl = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)()
], QuickPickServiceImpl);
exports.QuickPickServiceImpl = QuickPickServiceImpl;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/quick-input/quick-view-service.js":
/*!************************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/quick-input/quick-view-service.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2021 SAP SE or an SAP affiliate company and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var QuickViewService_1;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.QuickViewService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/es/inversify.js");
const common_1 = __webpack_require__(/*! ../../common */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/index.js");
const context_key_service_1 = __webpack_require__(/*! ../context-key-service */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/context-key-service.js");
const quick_access_1 = __webpack_require__(/*! ./quick-access */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/quick-input/quick-access.js");
const quick_input_service_1 = __webpack_require__(/*! ./quick-input-service */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/quick-input/quick-input-service.js");
let QuickViewService = QuickViewService_1 = class QuickViewService {
    constructor() {
        this.items = [];
        this.hiddenItemLabels = new Set();
    }
    registerItem(item) {
        const quickOpenItem = {
            label: item.label,
            execute: () => item.open(),
            when: item.when
        };
        this.items.push(quickOpenItem);
        this.items.sort((a, b) => a.label.localeCompare(b.label));
        return common_1.Disposable.create(() => {
            const index = this.items.indexOf(quickOpenItem);
            if (index !== -1) {
                this.items.splice(index, 1);
            }
        });
    }
    hideItem(label) {
        this.hiddenItemLabels.add(label);
    }
    showItem(label) {
        this.hiddenItemLabels.delete(label);
    }
    registerQuickAccessProvider() {
        this.quickAccessRegistry.registerQuickAccessProvider({
            getInstance: () => this,
            prefix: QuickViewService_1.PREFIX,
            placeholder: '',
            helpEntries: [{ description: 'Open View', needsEditor: false }]
        });
    }
    getPicks(filter, token) {
        const items = this.items.filter(item => (item.when === undefined || this.contextKexService.match(item.when)) &&
            (!this.hiddenItemLabels.has(item.label)));
        return (0, quick_input_service_1.filterItems)(items, filter);
    }
};
QuickViewService.PREFIX = 'view ';
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(quick_access_1.QuickAccessRegistry),
    (0, tslib_1.__metadata)("design:type", Object)
], QuickViewService.prototype, "quickAccessRegistry", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(context_key_service_1.ContextKeyService),
    (0, tslib_1.__metadata)("design:type", Object)
], QuickViewService.prototype, "contextKexService", void 0);
QuickViewService = QuickViewService_1 = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)()
], QuickViewService);
exports.QuickViewService = QuickViewService;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/resource-context-key.js":
/*!**************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/resource-context-key.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2019 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ResourceContextKey = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/es/inversify.js");
const context_key_service_1 = __webpack_require__(/*! ./context-key-service */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/context-key-service.js");
const language_service_1 = __webpack_require__(/*! ./language-service */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/language-service.js");
let ResourceContextKey = class ResourceContextKey {
    init() {
        this.resource = this.contextKeyService.createKey('resource', undefined);
        this.resourceSchemeKey = this.contextKeyService.createKey('resourceScheme', undefined);
        this.resourceFileName = this.contextKeyService.createKey('resourceFilename', undefined);
        this.resourceExtname = this.contextKeyService.createKey('resourceExtname', undefined);
        this.resourceLangId = this.contextKeyService.createKey('resourceLangId', undefined);
        this.resourceDirName = this.contextKeyService.createKey('resourceDirName', undefined);
        this.resourcePath = this.contextKeyService.createKey('resourcePath', undefined);
        this.resourceSet = this.contextKeyService.createKey('resourceSet', false);
    }
    get() {
        return this.resource.get();
    }
    set(resourceUri) {
        this.resource.set(resourceUri === null || resourceUri === void 0 ? void 0 : resourceUri.toString());
        this.resourceSchemeKey.set(resourceUri === null || resourceUri === void 0 ? void 0 : resourceUri.scheme);
        this.resourceFileName.set(resourceUri === null || resourceUri === void 0 ? void 0 : resourceUri.path.base);
        this.resourceExtname.set(resourceUri === null || resourceUri === void 0 ? void 0 : resourceUri.path.ext);
        this.resourceLangId.set(resourceUri && this.getLanguageId(resourceUri));
        this.resourceDirName.set(resourceUri === null || resourceUri === void 0 ? void 0 : resourceUri.path.dir.fsPath());
        this.resourcePath.set(resourceUri === null || resourceUri === void 0 ? void 0 : resourceUri.path.fsPath());
        this.resourceSet.set(Boolean(resourceUri));
    }
    getLanguageId(uri) {
        if (uri) {
            for (const language of this.languages.languages) {
                if (language.extensions.has(uri.path.ext)) {
                    return language.id;
                }
            }
        }
        return undefined;
    }
};
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(language_service_1.LanguageService),
    (0, tslib_1.__metadata)("design:type", language_service_1.LanguageService)
], ResourceContextKey.prototype, "languages", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(context_key_service_1.ContextKeyService),
    (0, tslib_1.__metadata)("design:type", Object)
], ResourceContextKey.prototype, "contextKeyService", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.postConstruct)(),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", []),
    (0, tslib_1.__metadata)("design:returntype", void 0)
], ResourceContextKey.prototype, "init", null);
ResourceContextKey = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)()
], ResourceContextKey);
exports.ResourceContextKey = ResourceContextKey;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/save-resource-service.js":
/*!***************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/save-resource-service.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (C) 2022 Arm and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SaveResourceService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/es/inversify.js");
const common_1 = __webpack_require__(/*! ../common */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/index.js");
const navigatable_types_1 = __webpack_require__(/*! ./navigatable-types */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/navigatable-types.js");
const saveable_1 = __webpack_require__(/*! ./saveable */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/saveable.js");
let SaveResourceService = class SaveResourceService {
    /**
     * Indicate if the document can be saved ('Save' command should be disable if not).
     */
    canSave(widget) {
        return saveable_1.Saveable.isDirty(widget) && (this.canSaveNotSaveAs(widget) || this.canSaveAs(widget));
    }
    canSaveNotSaveAs(widget) {
        var _a;
        // By default, we never allow a document to be saved if it is untitled.
        return Boolean(widget && ((_a = navigatable_types_1.NavigatableWidget.getUri(widget)) === null || _a === void 0 ? void 0 : _a.scheme) !== common_1.UNTITLED_SCHEME);
    }
    /**
     * Saves the document
     *
     * No op if the widget is not saveable.
     */
    async save(widget, options) {
        if (this.canSaveNotSaveAs(widget)) {
            await saveable_1.Saveable.save(widget, options);
            return navigatable_types_1.NavigatableWidget.getUri(widget);
        }
        else if (this.canSaveAs(widget)) {
            return this.saveAs(widget, options);
        }
    }
    canSaveAs(saveable) {
        return false;
    }
    saveAs(sourceWidget, options) {
        return Promise.reject('Unsupported: The base SaveResourceService does not support saveAs action.');
    }
};
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(common_1.MessageService),
    (0, tslib_1.__metadata)("design:type", common_1.MessageService)
], SaveResourceService.prototype, "messageService", void 0);
SaveResourceService = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)()
], SaveResourceService);
exports.SaveResourceService = SaveResourceService;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/saveable.js":
/*!**************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/saveable.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2017 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ShouldSaveDialog = exports.setDirty = exports.SaveableWidget = exports.close = exports.Saveable = exports.DelegatingSaveable = void 0;
const event_1 = __webpack_require__(/*! ../common/event */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/event.js");
const keys_1 = __webpack_require__(/*! ./keyboard/keys */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/keyboard/keys.js");
const dialogs_1 = __webpack_require__(/*! ./dialogs */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/dialogs.js");
const widgets_1 = __webpack_require__(/*! ./widgets */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/widgets/index.js");
const nls_1 = __webpack_require__(/*! ../common/nls */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/nls.js");
const common_1 = __webpack_require__(/*! ../common */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/index.js");
class DelegatingSaveable {
    constructor() {
        this.dirty = false;
        this.onDirtyChangedEmitter = new event_1.Emitter();
        this.autoSave = 'off';
    }
    get onDirtyChanged() {
        return this.onDirtyChangedEmitter.event;
    }
    async save(options) {
        var _a;
        await ((_a = this._delegate) === null || _a === void 0 ? void 0 : _a.save(options));
    }
    set delegate(delegate) {
        var _a, _b, _c, _d;
        (_a = this.toDispose) === null || _a === void 0 ? void 0 : _a.dispose();
        this._delegate = delegate;
        this.toDispose = delegate.onDirtyChanged(() => {
            this.dirty = delegate.dirty;
            this.onDirtyChangedEmitter.fire();
        });
        this.autoSave = delegate.autoSave;
        if (this.dirty !== delegate.dirty) {
            this.dirty = delegate.dirty;
            this.onDirtyChangedEmitter.fire();
        }
        this.revert = (_b = delegate.revert) === null || _b === void 0 ? void 0 : _b.bind(delegate);
        this.createSnapshot = (_c = delegate.createSnapshot) === null || _c === void 0 ? void 0 : _c.bind(delegate);
        this.applySnapshot = (_d = delegate.applySnapshot) === null || _d === void 0 ? void 0 : _d.bind(delegate);
    }
}
exports.DelegatingSaveable = DelegatingSaveable;
var Saveable;
(function (Saveable) {
    function isSource(arg) {
        return (0, common_1.isObject)(arg) && is(arg.saveable);
    }
    Saveable.isSource = isSource;
    function is(arg) {
        return (0, common_1.isObject)(arg) && 'dirty' in arg && 'onDirtyChanged' in arg;
    }
    Saveable.is = is;
    function get(arg) {
        if (is(arg)) {
            return arg;
        }
        if (isSource(arg)) {
            return arg.saveable;
        }
        return undefined;
    }
    Saveable.get = get;
    function getDirty(arg) {
        const saveable = get(arg);
        if (saveable && saveable.dirty) {
            return saveable;
        }
        return undefined;
    }
    Saveable.getDirty = getDirty;
    function isDirty(arg) {
        return !!getDirty(arg);
    }
    Saveable.isDirty = isDirty;
    async function save(arg, options) {
        const saveable = get(arg);
        if (saveable) {
            await saveable.save(options);
        }
    }
    Saveable.save = save;
    async function closeWithoutSaving(doRevert = true) {
        const saveable = get(this);
        if (saveable && doRevert && saveable.dirty && saveable.revert) {
            await saveable.revert();
        }
        this[exports.close]();
        return (0, widgets_1.waitForClosed)(this);
    }
    function createCloseWithSaving(getOtherSaveables, doSave) {
        let closing = false;
        return async function (options) {
            var _a;
            if (closing) {
                return;
            }
            const saveable = get(this);
            if (!saveable) {
                return;
            }
            closing = true;
            try {
                const result = await shouldSave(saveable, () => {
                    var _a;
                    const notLastWithDocument = !closingWidgetWouldLoseSaveable(this, (_a = getOtherSaveables === null || getOtherSaveables === void 0 ? void 0 : getOtherSaveables()) !== null && _a !== void 0 ? _a : []);
                    if (notLastWithDocument) {
                        return this.closeWithoutSaving(false).then(() => undefined);
                    }
                    if (options && options.shouldSave) {
                        return options.shouldSave();
                    }
                    return new ShouldSaveDialog(this).open();
                });
                if (typeof result === 'boolean') {
                    if (result) {
                        await ((_a = doSave === null || doSave === void 0 ? void 0 : doSave(this)) !== null && _a !== void 0 ? _a : Saveable.save(this));
                        if (!isDirty(this)) {
                            await this.closeWithoutSaving();
                        }
                    }
                    else {
                        await this.closeWithoutSaving();
                    }
                }
            }
            finally {
                closing = false;
            }
        };
    }
    async function confirmSaveBeforeClose(toClose, others) {
        var _a;
        for (const widget of toClose) {
            const saveable = Saveable.get(widget);
            if (saveable === null || saveable === void 0 ? void 0 : saveable.dirty) {
                if (!closingWidgetWouldLoseSaveable(widget, others)) {
                    continue;
                }
                const userWantsToSave = await new ShouldSaveDialog(widget).open();
                if (userWantsToSave === undefined) { // User clicked cancel.
                    return undefined;
                }
                else if (userWantsToSave) {
                    await saveable.save();
                }
                else {
                    await ((_a = saveable.revert) === null || _a === void 0 ? void 0 : _a.call(saveable));
                }
            }
        }
        return true;
    }
    Saveable.confirmSaveBeforeClose = confirmSaveBeforeClose;
    /**
     * @param widget the widget that may be closed
     * @param others widgets that will not be closed.
     * @returns `true` if widget is saveable and no widget among the `others` refers to the same saveable. `false` otherwise.
     */
    function closingWidgetWouldLoseSaveable(widget, others) {
        const saveable = get(widget);
        return !!saveable && !others.some(otherWidget => otherWidget !== widget && get(otherWidget) === saveable);
    }
    function apply(widget, getOtherSaveables, doSave) {
        if (SaveableWidget.is(widget)) {
            return widget;
        }
        const saveable = Saveable.get(widget);
        if (!saveable) {
            return undefined;
        }
        const saveableWidget = widget;
        setDirty(saveableWidget, saveable.dirty);
        saveable.onDirtyChanged(() => setDirty(saveableWidget, saveable.dirty));
        const closeWithSaving = createCloseWithSaving(getOtherSaveables, doSave);
        return Object.assign(saveableWidget, {
            closeWithoutSaving,
            closeWithSaving,
            close: closeWithSaving,
            [exports.close]: saveableWidget.close,
        });
    }
    Saveable.apply = apply;
    async function shouldSave(saveable, cb) {
        if (!saveable.dirty) {
            return false;
        }
        if (saveable.autoSave !== 'off') {
            return true;
        }
        return cb();
    }
    Saveable.shouldSave = shouldSave;
})(Saveable = exports.Saveable || (exports.Saveable = {}));
exports.close = Symbol('close');
var SaveableWidget;
(function (SaveableWidget) {
    function is(widget) {
        return !!widget && 'closeWithoutSaving' in widget;
    }
    SaveableWidget.is = is;
    function getDirty(widgets) {
        return get(widgets, Saveable.isDirty);
    }
    SaveableWidget.getDirty = getDirty;
    function* get(widgets, filter = () => true) {
        for (const widget of widgets) {
            if (SaveableWidget.is(widget) && filter(widget)) {
                yield widget;
            }
        }
    }
    SaveableWidget.get = get;
})(SaveableWidget = exports.SaveableWidget || (exports.SaveableWidget = {}));
;
/**
 * The class name added to the dirty widget's title.
 */
const DIRTY_CLASS = 'theia-mod-dirty';
function setDirty(widget, dirty) {
    const dirtyClass = ` ${DIRTY_CLASS}`;
    widget.title.className = widget.title.className.replace(dirtyClass, '');
    if (dirty) {
        widget.title.className += dirtyClass;
    }
}
exports.setDirty = setDirty;
class ShouldSaveDialog extends dialogs_1.AbstractDialog {
    constructor(widget) {
        super({
            title: nls_1.nls.localizeByDefault('Do you want to save the changes you made to {0}?', widget.title.label || widget.title.caption)
        }, {
            node: widget.node.ownerDocument.createElement('div')
        });
        this.shouldSave = true;
        const messageNode = this.node.ownerDocument.createElement('div');
        messageNode.textContent = nls_1.nls.localizeByDefault("Your changes will be lost if you don't save them.");
        messageNode.setAttribute('style', 'flex: 1 100%; padding-bottom: calc(var(--theia-ui-padding)*3);');
        this.contentNode.appendChild(messageNode);
        this.appendCloseButton();
        this.dontSaveButton = this.appendDontSaveButton();
        this.appendAcceptButton(nls_1.nls.localizeByDefault('Save'));
    }
    appendDontSaveButton() {
        const button = this.createButton(nls_1.nls.localizeByDefault("Don't Save"));
        this.controlPanel.appendChild(button);
        button.classList.add('secondary');
        return button;
    }
    onAfterAttach(msg) {
        super.onAfterAttach(msg);
        this.addKeyListener(this.dontSaveButton, keys_1.Key.ENTER, () => {
            this.shouldSave = false;
            this.accept();
        }, 'click');
    }
    get value() {
        return this.shouldSave;
    }
}
exports.ShouldSaveDialog = ShouldSaveDialog;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/secondary-window-handler.js":
/*!******************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/secondary-window-handler.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2022 STMicroelectronics, Ericsson, ARM, EclipseSource and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SecondaryWindowHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
const debounce = __webpack_require__(/*! lodash.debounce */ "../node_modules/lodash.debounce/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/es/inversify.js");
const widgets_1 = __webpack_require__(/*! ./widgets */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/widgets/index.js");
const message_service_1 = __webpack_require__(/*! ../common/message-service */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/message-service.js");
const event_1 = __webpack_require__(/*! ../common/event */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/event.js");
const secondary_window_service_1 = __webpack_require__(/*! ./window/secondary-window-service */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/window/secondary-window-service.js");
const keybinding_1 = __webpack_require__(/*! ./keybinding */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/keybinding.js");
/** Widget to be contained directly in a secondary window. */
class SecondaryWindowRootWidget extends widgets_1.Widget {
    constructor() {
        super();
        this.layout = new widgets_1.BoxLayout();
    }
    addWidget(widget) {
        this.layout.addWidget(widget);
        widgets_1.BoxPanel.setStretch(widget, 1);
    }
}
/**
 * Offers functionality to move a widget out of the main window to a newly created window.
 * Widgets must explicitly implement the `ExtractableWidget` interface to support this.
 *
 * This handler manages the opened secondary windows and sets up messaging between them and the Theia main window.
 * In addition, it provides access to the extracted widgets and provides notifications when widgets are added to or removed from this handler.
 *
 */
let SecondaryWindowHandler = class SecondaryWindowHandler {
    constructor() {
        /** List of widgets in secondary windows. */
        this._widgets = [];
        this.onWillAddWidgetEmitter = new event_1.Emitter();
        /** Subscribe to get notified when a widget is added to this handler, i.e. the widget was moved to an secondary window . */
        this.onWillAddWidget = this.onWillAddWidgetEmitter.event;
        this.onDidAddWidgetEmitter = new event_1.Emitter();
        /** Subscribe to get notified when a widget is added to this handler, i.e. the widget was moved to an secondary window . */
        this.onDidAddWidget = this.onDidAddWidgetEmitter.event;
        this.onWillRemoveWidgetEmitter = new event_1.Emitter();
        /** Subscribe to get notified when a widget is removed from this handler, i.e. the widget's window was closed or the widget was disposed. */
        this.onWillRemoveWidget = this.onWillRemoveWidgetEmitter.event;
        this.onDidRemoveWidgetEmitter = new event_1.Emitter();
        /** Subscribe to get notified when a widget is removed from this handler, i.e. the widget's window was closed or the widget was disposed. */
        this.onDidRemoveWidget = this.onDidRemoveWidgetEmitter.event;
    }
    /** @returns List of widgets in secondary windows. */
    get widgets() {
        // Create new array in case the original changes while this is used.
        return [...this._widgets];
    }
    /**
     * Sets up message forwarding from the main window to secondary windows.
     * Does nothing if this service has already been initialized.
     *
     * @param shell The `ApplicationShell` that widgets will be moved out from.
     */
    init(shell) {
        if (this.applicationShell) {
            // Already initialized
            return;
        }
        this.applicationShell = shell;
    }
    /**
     *  Moves the given widget to a new window.
     *
     * @param widget the widget to extract
     */
    moveWidgetToSecondaryWindow(widget) {
        if (!this.applicationShell) {
            console.error('Widget cannot be extracted because the WidgetExtractionHandler has not been initialized.');
            return;
        }
        if (!widget.isExtractable) {
            console.error('Widget is not extractable.', widget.id);
            return;
        }
        const newWindow = this.secondaryWindowService.createSecondaryWindow(widget, this.applicationShell);
        if (!newWindow) {
            this.messageService.error('The widget could not be moved to a secondary window because the window creation failed. Please make sure to allow popups.');
            return;
        }
        const mainWindowTitle = document.title;
        newWindow.addEventListener('load', () => {
            this.keybindings.registerEventListeners(newWindow);
            // Use the widget's title as the window title
            // Even if the widget's label were malicious, this should be safe against XSS because the HTML standard defines this is inserted via a text node.
            // See https://html.spec.whatwg.org/multipage/dom.html#document.title
            newWindow.document.title = `${widget.title.label} — ${mainWindowTitle}`;
            const element = newWindow.document.getElementById('widget-host');
            if (!element) {
                console.error('Could not find dom element to attach to in secondary window');
                return;
            }
            this.onWillAddWidgetEmitter.fire([widget, newWindow]);
            widget.secondaryWindow = newWindow;
            const rootWidget = new SecondaryWindowRootWidget();
            rootWidget.addClass('secondary-widget-root');
            widgets_1.Widget.attach(rootWidget, element);
            rootWidget.addWidget(widget);
            widget.show();
            widget.update();
            this.addWidget(widget, newWindow);
            // Close the window if the widget is disposed, e.g. by a command closing all widgets.
            widget.disposed.connect(() => {
                this.onWillRemoveWidgetEmitter.fire([widget, newWindow]);
                this.removeWidget(widget, newWindow);
                if (!newWindow.closed) {
                    newWindow.close();
                }
            });
            // debounce to avoid rapid updates while resizing the secondary window
            const updateWidget = debounce(() => {
                rootWidget.update();
            }, 100);
            newWindow.addEventListener('resize', () => {
                updateWidget();
            });
            widget.activate();
        });
    }
    /**
     * If the given widget is tracked by this handler, activate it and focus its secondary window.
     *
     * @param widgetId The widget to activate specified by its id
     * @returns The activated `ExtractableWidget` or `undefined` if the given widget id is unknown to this handler.
     */
    activateWidget(widgetId) {
        const trackedWidget = this.revealWidget(widgetId);
        trackedWidget === null || trackedWidget === void 0 ? void 0 : trackedWidget.activate();
        return trackedWidget;
    }
    /**
     * If the given widget is tracked by this handler, reveal it by focussing its secondary window.
     *
     * @param widgetId The widget to reveal specified by its id
     * @returns The revealed `ExtractableWidget` or `undefined` if the given widget id is unknown to this handler.
     */
    revealWidget(widgetId) {
        const trackedWidget = this._widgets.find(w => w.id === widgetId);
        if (trackedWidget) {
            this.secondaryWindowService.focus(trackedWidget.secondaryWindow);
            return trackedWidget;
        }
        return undefined;
    }
    addWidget(widget, win) {
        if (!this._widgets.includes(widget)) {
            this._widgets.push(widget);
            this.onDidAddWidgetEmitter.fire([widget, win]);
        }
    }
    removeWidget(widget, win) {
        const index = this._widgets.indexOf(widget);
        if (index > -1) {
            this._widgets.splice(index, 1);
            this.onDidRemoveWidgetEmitter.fire([widget, win]);
        }
    }
};
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(keybinding_1.KeybindingRegistry),
    (0, tslib_1.__metadata)("design:type", keybinding_1.KeybindingRegistry)
], SecondaryWindowHandler.prototype, "keybindings", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(message_service_1.MessageService),
    (0, tslib_1.__metadata)("design:type", message_service_1.MessageService)
], SecondaryWindowHandler.prototype, "messageService", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(secondary_window_service_1.SecondaryWindowService),
    (0, tslib_1.__metadata)("design:type", Object)
], SecondaryWindowHandler.prototype, "secondaryWindowService", void 0);
SecondaryWindowHandler = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)()
], SecondaryWindowHandler);
exports.SecondaryWindowHandler = SecondaryWindowHandler;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/shell/additional-views-menu-widget.js":
/*!****************************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/shell/additional-views-menu-widget.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2023 STMicroelectronics and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var AdditionalViewsMenuWidget_1;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AdditionalViewsMenuWidget = exports.ADDITIONAL_VIEWS_MENU_PATH = exports.AdditionalViewsMenuWidgetFactory = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
const inversify_1 = __webpack_require__(/*! ../../../shared/inversify */ "../node_modules/@theia/editor/node_modules/@theia/core/shared/inversify/index.js");
const common_1 = __webpack_require__(/*! ../../common */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/index.js");
const widgets_1 = __webpack_require__(/*! ../widgets */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/widgets/index.js");
const sidebar_menu_widget_1 = __webpack_require__(/*! ./sidebar-menu-widget */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/shell/sidebar-menu-widget.js");
exports.AdditionalViewsMenuWidgetFactory = Symbol('AdditionalViewsMenuWidgetFactory');
exports.ADDITIONAL_VIEWS_MENU_PATH = ['additional_views_menu'];
let AdditionalViewsMenuWidget = AdditionalViewsMenuWidget_1 = class AdditionalViewsMenuWidget extends sidebar_menu_widget_1.SidebarMenuWidget {
    constructor() {
        super(...arguments);
        this.menuDisposables = [];
    }
    updateAdditionalViews(sender, event) {
        if (event.startIndex === -1) {
            this.removeMenu(AdditionalViewsMenuWidget_1.ID);
        }
        else {
            this.addMenu({
                title: common_1.nls.localizeByDefault('Additional Views'),
                iconClass: (0, widgets_1.codicon)('ellipsis'),
                id: AdditionalViewsMenuWidget_1.ID,
                menuPath: exports.ADDITIONAL_VIEWS_MENU_PATH,
                order: 0
            });
        }
        this.menuDisposables.forEach(disposable => disposable.dispose());
        this.menuDisposables = [];
        event.titles.forEach((title, i) => this.registerMenuAction(sender, title, i));
    }
    registerMenuAction(sender, title, index) {
        const command = { id: `reveal.${title.label}.${index}`, label: title.label };
        this.menuDisposables.push(this.commandRegistry.registerCommand(command, {
            execute: () => {
                window.requestAnimationFrame(() => {
                    sender.currentIndex = sender.titles.indexOf(title);
                });
            }
        }));
        this.menuDisposables.push(this.menuModelRegistry.registerMenuAction(exports.ADDITIONAL_VIEWS_MENU_PATH, { commandId: command.id, order: index.toString() }));
    }
};
AdditionalViewsMenuWidget.ID = 'sidebar.additional.views';
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(common_1.CommandRegistry),
    (0, tslib_1.__metadata)("design:type", common_1.CommandRegistry)
], AdditionalViewsMenuWidget.prototype, "commandRegistry", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(common_1.MenuModelRegistry),
    (0, tslib_1.__metadata)("design:type", common_1.MenuModelRegistry)
], AdditionalViewsMenuWidget.prototype, "menuModelRegistry", void 0);
AdditionalViewsMenuWidget = AdditionalViewsMenuWidget_1 = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)()
], AdditionalViewsMenuWidget);
exports.AdditionalViewsMenuWidget = AdditionalViewsMenuWidget;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/shell/application-shell.js":
/*!*****************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/shell/application-shell.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var ApplicationShell_1;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ApplicationShell = exports.DockPanelRenderer = exports.DockPanelRendererFactory = exports.ApplicationShellOptions = exports.applicationShellLayoutVersion = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/es/inversify.js");
const algorithm_1 = __webpack_require__(/*! @phosphor/algorithm */ "../node_modules/@phosphor/algorithm/lib/index.js");
const widgets_1 = __webpack_require__(/*! @phosphor/widgets */ "../node_modules/@phosphor/widgets/lib/index.js");
const common_1 = __webpack_require__(/*! ../../common */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/index.js");
const browser_1 = __webpack_require__(/*! ../browser */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/browser.js");
const saveable_1 = __webpack_require__(/*! ../saveable */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/saveable.js");
const status_bar_1 = __webpack_require__(/*! ../status-bar/status-bar */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/status-bar/status-bar.js");
const theia_dock_panel_1 = __webpack_require__(/*! ./theia-dock-panel */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/shell/theia-dock-panel.js");
const side_panel_handler_1 = __webpack_require__(/*! ./side-panel-handler */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/shell/side-panel-handler.js");
const tab_bars_1 = __webpack_require__(/*! ./tab-bars */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/shell/tab-bars.js");
const split_panels_1 = __webpack_require__(/*! ./split-panels */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/shell/split-panels.js");
const frontend_application_state_1 = __webpack_require__(/*! ../frontend-application-state */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/frontend-application-state.js");
const tab_bar_toolbar_1 = __webpack_require__(/*! ./tab-bar-toolbar */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/shell/tab-bar-toolbar/index.js");
const context_key_service_1 = __webpack_require__(/*! ../context-key-service */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/context-key-service.js");
const event_1 = __webpack_require__(/*! ../../common/event */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/event.js");
const widgets_2 = __webpack_require__(/*! ../widgets */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/widgets/index.js");
const core_preferences_1 = __webpack_require__(/*! ../core-preferences */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/core-preferences.js");
const breadcrumbs_renderer_1 = __webpack_require__(/*! ../breadcrumbs/breadcrumbs-renderer */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/breadcrumbs/breadcrumbs-renderer.js");
const promise_util_1 = __webpack_require__(/*! ../../common/promise-util */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/promise-util.js");
const save_resource_service_1 = __webpack_require__(/*! ../save-resource-service */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/save-resource-service.js");
const nls_1 = __webpack_require__(/*! ../../common/nls */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/nls.js");
const secondary_window_handler_1 = __webpack_require__(/*! ../secondary-window-handler */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/secondary-window-handler.js");
const uri_1 = __webpack_require__(/*! ../../common/uri */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/uri.js");
const opener_service_1 = __webpack_require__(/*! ../opener-service */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/opener-service.js");
const previewable_widget_1 = __webpack_require__(/*! ../widgets/previewable-widget */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/widgets/previewable-widget.js");
const window_service_1 = __webpack_require__(/*! ../window/window-service */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/window/window-service.js");
/** The class name added to ApplicationShell instances. */
const APPLICATION_SHELL_CLASS = 'theia-ApplicationShell';
/** The class name added to the main and bottom area panels. */
const MAIN_BOTTOM_AREA_CLASS = 'theia-app-centers';
/** Status bar entry identifier for the bottom panel toggle button. */
const BOTTOM_PANEL_TOGGLE_ID = 'bottom-panel-toggle';
/** The class name added to the main area panel. */
const MAIN_AREA_CLASS = 'theia-app-main';
/** The class name added to the bottom area panel. */
const BOTTOM_AREA_CLASS = 'theia-app-bottom';
/**
 * When a version is increased, make sure to introduce a migration (ApplicationShellLayoutMigration) to this version.
 */
exports.applicationShellLayoutVersion = 5.0;
exports.ApplicationShellOptions = Symbol('ApplicationShellOptions');
exports.DockPanelRendererFactory = Symbol('DockPanelRendererFactory');
/**
 * A renderer for dock panels that supports context menus on tabs.
 */
let DockPanelRenderer = class DockPanelRenderer {
    constructor(tabBarRendererFactory, tabBarToolbarRegistry, tabBarToolbarFactory, breadcrumbsRendererFactory, corePreferences) {
        this.tabBarRendererFactory = tabBarRendererFactory;
        this.tabBarToolbarRegistry = tabBarToolbarRegistry;
        this.tabBarToolbarFactory = tabBarToolbarFactory;
        this.breadcrumbsRendererFactory = breadcrumbsRendererFactory;
        this.corePreferences = corePreferences;
        this.tabBarClasses = [];
        this.onDidCreateTabBarEmitter = new event_1.Emitter();
    }
    get onDidCreateTabBar() {
        return this.onDidCreateTabBarEmitter.event;
    }
    createTabBar() {
        const getDynamicTabOptions = () => {
            if (this.corePreferences.get('workbench.tab.shrinkToFit.enabled')) {
                return {
                    minimumTabSize: this.corePreferences.get('workbench.tab.shrinkToFit.minimumSize'),
                    defaultTabSize: this.corePreferences.get('workbench.tab.shrinkToFit.defaultSize')
                };
            }
            else {
                return undefined;
            }
        };
        const renderer = this.tabBarRendererFactory();
        const tabBar = new tab_bars_1.ToolbarAwareTabBar(this.tabBarToolbarRegistry, this.tabBarToolbarFactory, this.breadcrumbsRendererFactory, {
            renderer,
            // Scroll bar options
            handlers: ['drag-thumb', 'keyboard', 'wheel', 'touch'],
            useBothWheelAxes: true,
            scrollXMarginOffset: 4,
            suppressScrollY: true
        }, getDynamicTabOptions());
        this.tabBarClasses.forEach(c => tabBar.addClass(c));
        renderer.tabBar = tabBar;
        renderer.contextMenuPath = tab_bars_1.SHELL_TABBAR_CONTEXT_MENU;
        tabBar.currentChanged.connect(this.onCurrentTabChanged, this);
        const prefChangeDisposable = this.corePreferences.onPreferenceChanged(change => {
            if (change.preferenceName === 'workbench.tab.shrinkToFit.enabled' ||
                change.preferenceName === 'workbench.tab.shrinkToFit.minimumSize' ||
                change.preferenceName === 'workbench.tab.shrinkToFit.defaultSize') {
                tabBar.dynamicTabOptions = getDynamicTabOptions();
            }
        });
        tabBar.disposed.connect(() => {
            prefChangeDisposable.dispose();
            renderer.dispose();
        });
        this.onDidCreateTabBarEmitter.fire(tabBar);
        return tabBar;
    }
    createHandle() {
        return widgets_1.DockPanel.defaultRenderer.createHandle();
    }
    onCurrentTabChanged(sender, { currentIndex }) {
        if (currentIndex >= 0) {
            sender.revealTab(currentIndex);
        }
    }
};
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(theia_dock_panel_1.TheiaDockPanel.Factory),
    (0, tslib_1.__metadata)("design:type", Function)
], DockPanelRenderer.prototype, "dockPanelFactory", void 0);
DockPanelRenderer = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)(),
    (0, tslib_1.__param)(0, (0, inversify_1.inject)(tab_bars_1.TabBarRendererFactory)),
    (0, tslib_1.__param)(1, (0, inversify_1.inject)(tab_bar_toolbar_1.TabBarToolbarRegistry)),
    (0, tslib_1.__param)(2, (0, inversify_1.inject)(tab_bar_toolbar_1.TabBarToolbarFactory)),
    (0, tslib_1.__param)(3, (0, inversify_1.inject)(breadcrumbs_renderer_1.BreadcrumbsRendererFactory)),
    (0, tslib_1.__param)(4, (0, inversify_1.inject)(core_preferences_1.CorePreferences)),
    (0, tslib_1.__metadata)("design:paramtypes", [Function, tab_bar_toolbar_1.TabBarToolbarRegistry, Function, Function, Object])
], DockPanelRenderer);
exports.DockPanelRenderer = DockPanelRenderer;
/**
 * The application shell manages the top-level widgets of the application. Use this class to
 * add, remove, or activate a widget.
 */
let ApplicationShell = ApplicationShell_1 = class ApplicationShell extends widgets_1.Widget {
    /**
     * Construct a new application shell.
     */
    constructor(dockPanelRendererFactory, statusBar, sidePanelHandlerFactory, splitPositionHandler, applicationStateService, options = {}, corePreferences, saveResourceService, secondaryWindowHandler, windowService) {
        super(options);
        this.dockPanelRendererFactory = dockPanelRendererFactory;
        this.statusBar = statusBar;
        this.sidePanelHandlerFactory = sidePanelHandlerFactory;
        this.splitPositionHandler = splitPositionHandler;
        this.applicationStateService = applicationStateService;
        this.corePreferences = corePreferences;
        this.saveResourceService = saveResourceService;
        this.secondaryWindowHandler = secondaryWindowHandler;
        this.windowService = windowService;
        /**
         * The current state of the bottom panel.
         */
        this.bottomPanelState = {
            empty: true,
            expansion: side_panel_handler_1.SidePanel.ExpansionState.collapsed,
            pendingUpdate: Promise.resolve()
        };
        this.tracker = new widgets_1.FocusTracker();
        this.onDidAddWidgetEmitter = new event_1.Emitter();
        this.onDidAddWidget = this.onDidAddWidgetEmitter.event;
        this.onDidRemoveWidgetEmitter = new event_1.Emitter();
        this.onDidRemoveWidget = this.onDidRemoveWidgetEmitter.event;
        this.onDidChangeActiveWidgetEmitter = new event_1.Emitter();
        this.onDidChangeActiveWidget = this.onDidChangeActiveWidgetEmitter.event;
        this.onDidChangeCurrentWidgetEmitter = new event_1.Emitter();
        this.onDidChangeCurrentWidget = this.onDidChangeCurrentWidgetEmitter.event;
        this.onDidDoubleClickMainAreaEmitter = new event_1.Emitter();
        this.onDidDoubleClickMainArea = this.onDidDoubleClickMainAreaEmitter.event;
        this.toDisposeOnActiveChanged = new common_1.DisposableCollection();
        this.activationTimeout = 2000;
        this.toDisposeOnActivationCheck = new common_1.DisposableCollection();
        // Merge the user-defined application options with the default options
        this.options = {
            bottomPanel: {
                ...ApplicationShell_1.DEFAULT_OPTIONS.bottomPanel,
                ...(options === null || options === void 0 ? void 0 : options.bottomPanel) || {}
            },
            leftPanel: {
                ...ApplicationShell_1.DEFAULT_OPTIONS.leftPanel,
                ...(options === null || options === void 0 ? void 0 : options.leftPanel) || {}
            },
            rightPanel: {
                ...ApplicationShell_1.DEFAULT_OPTIONS.rightPanel,
                ...(options === null || options === void 0 ? void 0 : options.rightPanel) || {}
            }
        };
    }
    fireDidAddWidget(widget) {
        this.onDidAddWidgetEmitter.fire(widget);
    }
    fireDidRemoveWidget(widget) {
        this.onDidRemoveWidgetEmitter.fire(widget);
    }
    get mainPanelRenderer() {
        return this._mainPanelRenderer;
    }
    init() {
        this.initializeShell();
        this.initSidebarVisibleKeyContext();
        this.initFocusKeyContexts();
        if (!common_1.environment.electron.is()) {
            this.corePreferences.ready.then(() => {
                this.setTopPanelVisibility(this.corePreferences['window.menuBarVisibility']);
            });
            this.corePreferences.onPreferenceChanged(preference => {
                if (preference.preferenceName === 'window.menuBarVisibility') {
                    this.setTopPanelVisibility(preference.newValue);
                }
            });
        }
        this.corePreferences.onPreferenceChanged(preference => {
            if (preference.preferenceName === 'window.tabbar.enhancedPreview') {
                this.allTabBars.forEach(tabBar => {
                    tabBar.update();
                });
            }
        });
    }
    initializeShell() {
        this.addClass(APPLICATION_SHELL_CLASS);
        this.id = 'theia-app-shell';
        this.mainPanel = this.createMainPanel();
        this.topPanel = this.createTopPanel();
        this.bottomPanel = this.createBottomPanel();
        this.leftPanelHandler = this.sidePanelHandlerFactory();
        this.leftPanelHandler.create('left', this.options.leftPanel);
        this.leftPanelHandler.dockPanel.widgetAdded.connect((_, widget) => this.fireDidAddWidget(widget));
        this.leftPanelHandler.dockPanel.widgetRemoved.connect((_, widget) => this.fireDidRemoveWidget(widget));
        this.rightPanelHandler = this.sidePanelHandlerFactory();
        this.rightPanelHandler.create('right', this.options.rightPanel);
        this.rightPanelHandler.dockPanel.widgetAdded.connect((_, widget) => this.fireDidAddWidget(widget));
        this.rightPanelHandler.dockPanel.widgetRemoved.connect((_, widget) => this.fireDidRemoveWidget(widget));
        this.secondaryWindowHandler.init(this);
        this.secondaryWindowHandler.onDidAddWidget(([widget, window]) => this.fireDidAddWidget(widget));
        this.secondaryWindowHandler.onDidRemoveWidget(([widget, window]) => this.fireDidRemoveWidget(widget));
        this.layout = this.createLayout();
        this.tracker.currentChanged.connect(this.onCurrentChanged, this);
        this.tracker.activeChanged.connect(this.onActiveChanged, this);
    }
    initSidebarVisibleKeyContext() {
        const leftSideBarPanel = this.leftPanelHandler.dockPanel;
        const sidebarVisibleKey = this.contextKeyService.createKey('sidebarVisible', leftSideBarPanel.isVisible);
        const onAfterShow = leftSideBarPanel['onAfterShow'].bind(leftSideBarPanel);
        leftSideBarPanel['onAfterShow'] = (msg) => {
            onAfterShow(msg);
            sidebarVisibleKey.set(true);
        };
        const onAfterHide = leftSideBarPanel['onAfterHide'].bind(leftSideBarPanel);
        leftSideBarPanel['onAfterHide'] = (msg) => {
            onAfterHide(msg);
            sidebarVisibleKey.set(false);
        };
    }
    initFocusKeyContexts() {
        const sideBarFocus = this.contextKeyService.createKey('sideBarFocus', false);
        const panelFocus = this.contextKeyService.createKey('panelFocus', false);
        const updateFocusContextKeys = () => {
            const area = this.activeWidget && this.getAreaFor(this.activeWidget);
            sideBarFocus.set(area === 'left');
            panelFocus.set(area === 'main');
        };
        updateFocusContextKeys();
        this.onDidChangeActiveWidget(updateFocusContextKeys);
    }
    setTopPanelVisibility(preference) {
        const hiddenPreferences = ['compact', 'hidden'];
        this.topPanel.setHidden(hiddenPreferences.includes(preference));
    }
    onBeforeAttach(msg) {
        document.addEventListener('p-dragenter', this, true);
        document.addEventListener('p-dragover', this, true);
        document.addEventListener('p-dragleave', this, true);
        document.addEventListener('p-drop', this, true);
    }
    onAfterDetach(msg) {
        document.removeEventListener('p-dragenter', this, true);
        document.removeEventListener('p-dragover', this, true);
        document.removeEventListener('p-dragleave', this, true);
        document.removeEventListener('p-drop', this, true);
    }
    handleEvent(event) {
        switch (event.type) {
            case 'p-dragenter':
                this.onDragEnter(event);
                break;
            case 'p-dragover':
                this.onDragOver(event);
                break;
            case 'p-drop':
                this.onDrop(event);
                break;
            case 'p-dragleave':
                this.onDragLeave(event);
                break;
        }
    }
    onDragEnter({ mimeData }) {
        if (!this.dragState) {
            if (mimeData && mimeData.hasData('application/vnd.phosphor.widget-factory')) {
                // The drag contains a widget, so we'll track it and expand side panels as needed
                this.dragState = {
                    startTime: performance.now(),
                    leftExpanded: false,
                    rightExpanded: false,
                    bottomExpanded: false
                };
            }
        }
    }
    onDragOver(event) {
        const state = this.dragState;
        if (state) {
            state.lastDragOver = event;
            if (state.leaveTimeout) {
                window.clearTimeout(state.leaveTimeout);
                state.leaveTimeout = undefined;
            }
            const { clientX, clientY } = event;
            const { offsetLeft, offsetTop, clientWidth, clientHeight } = this.node;
            // Don't expand any side panels right after the drag has started
            const allowExpansion = performance.now() - state.startTime >= 500;
            const expLeft = allowExpansion && clientX >= offsetLeft
                && clientX <= offsetLeft + this.options.leftPanel.expandThreshold;
            const expRight = allowExpansion && clientX <= offsetLeft + clientWidth
                && clientX >= offsetLeft + clientWidth - this.options.rightPanel.expandThreshold;
            const expBottom = allowExpansion && !expLeft && !expRight && clientY <= offsetTop + clientHeight
                && clientY >= offsetTop + clientHeight - this.options.bottomPanel.expandThreshold;
            // eslint-disable-next-line no-null/no-null
            if (expLeft && !state.leftExpanded && this.leftPanelHandler.tabBar.currentTitle === null) {
                // The mouse cursor is moved close to the left border
                this.leftPanelHandler.expand();
                this.leftPanelHandler.state.pendingUpdate.then(() => this.dispatchMouseMove());
                state.leftExpanded = true;
            }
            else if (!expLeft && state.leftExpanded) {
                // The mouse cursor is moved away from the left border
                this.leftPanelHandler.collapse();
                state.leftExpanded = false;
            }
            // eslint-disable-next-line no-null/no-null
            if (expRight && !state.rightExpanded && this.rightPanelHandler.tabBar.currentTitle === null) {
                // The mouse cursor is moved close to the right border
                this.rightPanelHandler.expand();
                this.rightPanelHandler.state.pendingUpdate.then(() => this.dispatchMouseMove());
                state.rightExpanded = true;
            }
            else if (!expRight && state.rightExpanded) {
                // The mouse cursor is moved away from the right border
                this.rightPanelHandler.collapse();
                state.rightExpanded = false;
            }
            if (expBottom && !state.bottomExpanded && this.bottomPanel.isHidden) {
                // The mouse cursor is moved close to the bottom border
                this.expandBottomPanel();
                this.bottomPanelState.pendingUpdate.then(() => this.dispatchMouseMove());
                state.bottomExpanded = true;
            }
            else if (!expBottom && state.bottomExpanded) {
                // The mouse cursor is moved away from the bottom border
                this.collapseBottomPanel();
                state.bottomExpanded = false;
            }
        }
    }
    /**
     * This method is called after a side panel has been expanded while dragging a widget. It fires
     * a `mousemove` event so that the drag overlay markers are updated correctly in all dock panels.
     */
    dispatchMouseMove() {
        if (this.dragState && this.dragState.lastDragOver) {
            const { clientX, clientY } = this.dragState.lastDragOver;
            const event = document.createEvent('MouseEvent');
            event.initMouseEvent('mousemove', true, true, window, 0, 0, 0, 
            // eslint-disable-next-line no-null/no-null
            clientX, clientY, false, false, false, false, 0, null);
            document.dispatchEvent(event);
        }
    }
    onDrop(event) {
        const state = this.dragState;
        if (state) {
            if (state.leaveTimeout) {
                window.clearTimeout(state.leaveTimeout);
            }
            this.dragState = undefined;
            window.requestAnimationFrame(() => {
                // Clean up the side panel state in the next frame
                if (this.leftPanelHandler.dockPanel.isEmpty) {
                    this.leftPanelHandler.collapse();
                }
                if (this.rightPanelHandler.dockPanel.isEmpty) {
                    this.rightPanelHandler.collapse();
                }
                if (this.bottomPanel.isEmpty) {
                    this.collapseBottomPanel();
                }
            });
        }
    }
    onDragLeave(event) {
        const state = this.dragState;
        if (state) {
            state.lastDragOver = undefined;
            if (state.leaveTimeout) {
                window.clearTimeout(state.leaveTimeout);
            }
            state.leaveTimeout = window.setTimeout(() => {
                this.dragState = undefined;
                if (state.leftExpanded || this.leftPanelHandler.dockPanel.isEmpty) {
                    this.leftPanelHandler.collapse();
                }
                if (state.rightExpanded || this.rightPanelHandler.dockPanel.isEmpty) {
                    this.rightPanelHandler.collapse();
                }
                if (state.bottomExpanded || this.bottomPanel.isEmpty) {
                    this.collapseBottomPanel();
                }
            }, 100);
        }
    }
    /**
     * Create the dock panel in the main shell area.
     */
    createMainPanel() {
        const renderer = this.dockPanelRendererFactory();
        renderer.tabBarClasses.push(MAIN_BOTTOM_AREA_CLASS);
        renderer.tabBarClasses.push(MAIN_AREA_CLASS);
        this._mainPanelRenderer = renderer;
        const dockPanel = this.dockPanelFactory({
            mode: 'multiple-document',
            renderer,
            spacing: 0
        });
        dockPanel.id = theia_dock_panel_1.MAIN_AREA_ID;
        dockPanel.widgetAdded.connect((_, widget) => this.fireDidAddWidget(widget));
        dockPanel.widgetRemoved.connect((_, widget) => this.fireDidRemoveWidget(widget));
        const openUri = async (fileUri) => {
            try {
                const opener = await this.openerService.getOpener(fileUri);
                opener.open(fileUri);
            }
            catch (e) {
                console.info(`no opener found for '${fileUri}'`);
            }
        };
        dockPanel.node.addEventListener('drop', event => {
            var _a;
            if (event.dataTransfer) {
                const uris = this.additionalDraggedUris || ApplicationShell_1.getDraggedEditorUris(event.dataTransfer);
                if (uris.length > 0) {
                    uris.forEach(openUri);
                }
                else if (((_a = event.dataTransfer.files) === null || _a === void 0 ? void 0 : _a.length) > 0) {
                    // the files were dragged from the outside the workspace
                    Array.from(event.dataTransfer.files).forEach(file => {
                        if (file.path) {
                            const fileUri = uri_1.default.fromComponents({
                                scheme: 'file',
                                path: file.path,
                                authority: '',
                                query: '',
                                fragment: ''
                            });
                            openUri(fileUri);
                        }
                    });
                }
            }
        });
        dockPanel.node.addEventListener('dblclick', event => {
            const el = event.target;
            if (el.id === theia_dock_panel_1.MAIN_AREA_ID || el.classList.contains('p-TabBar-content')) {
                this.onDidDoubleClickMainAreaEmitter.fire();
            }
        });
        const handler = (e) => {
            if (e.dataTransfer) {
                e.dataTransfer.dropEffect = 'link';
                e.preventDefault();
                e.stopPropagation();
            }
        };
        dockPanel.node.addEventListener('dragover', handler);
        dockPanel.node.addEventListener('dragenter', handler);
        return dockPanel;
    }
    addAdditionalDraggedEditorUris(uris) {
        this.additionalDraggedUris = uris;
    }
    clearAdditionalDraggedEditorUris() {
        this.additionalDraggedUris = undefined;
    }
    static getDraggedEditorUris(dataTransfer) {
        const data = dataTransfer.getData('theia-editor-dnd');
        return data ? data.split('\n').map(entry => new uri_1.default(entry)) : [];
    }
    static setDraggedEditorUris(dataTransfer, uris) {
        dataTransfer.setData('theia-editor-dnd', uris.map(uri => uri.toString()).join('\n'));
    }
    /**
     * Create the dock panel in the bottom shell area.
     */
    createBottomPanel() {
        const renderer = this.dockPanelRendererFactory();
        renderer.tabBarClasses.push(MAIN_BOTTOM_AREA_CLASS);
        renderer.tabBarClasses.push(BOTTOM_AREA_CLASS);
        const dockPanel = this.dockPanelFactory({
            mode: 'multiple-document',
            renderer,
            spacing: 0
        });
        dockPanel.id = theia_dock_panel_1.BOTTOM_AREA_ID;
        dockPanel.widgetAdded.connect((sender, widget) => {
            this.refreshBottomPanelToggleButton();
        });
        dockPanel.widgetRemoved.connect((sender, widget) => {
            if (sender.isEmpty) {
                this.collapseBottomPanel();
            }
            this.refreshBottomPanelToggleButton();
        }, this);
        dockPanel.node.addEventListener('p-dragenter', event => {
            // Make sure that the main panel hides its overlay when the bottom panel is expanded
            this.mainPanel.overlay.hide(0);
        });
        dockPanel.hide();
        dockPanel.widgetAdded.connect((_, widget) => this.fireDidAddWidget(widget));
        dockPanel.widgetRemoved.connect((_, widget) => this.fireDidRemoveWidget(widget));
        return dockPanel;
    }
    /**
     * Create the top panel, which is used to hold the main menu.
     */
    createTopPanel() {
        const topPanel = new widgets_1.Panel();
        topPanel.id = 'theia-top-panel';
        topPanel.hide();
        return topPanel;
    }
    /**
     * Create a box layout to assemble the application shell layout.
     */
    createBoxLayout(widgets, stretch, options) {
        const boxLayout = new widgets_1.BoxLayout(options);
        for (let i = 0; i < widgets.length; i++) {
            if (stretch !== undefined && i < stretch.length) {
                widgets_1.BoxPanel.setStretch(widgets[i], stretch[i]);
            }
            boxLayout.addWidget(widgets[i]);
        }
        return boxLayout;
    }
    /**
     * Create a split layout to assemble the application shell layout.
     */
    createSplitLayout(widgets, stretch, options) {
        let optParam = { renderer: widgets_1.SplitPanel.defaultRenderer, };
        if (options) {
            optParam = { ...optParam, ...options };
        }
        const splitLayout = new widgets_1.SplitLayout(optParam);
        for (let i = 0; i < widgets.length; i++) {
            if (stretch !== undefined && i < stretch.length) {
                widgets_1.SplitPanel.setStretch(widgets[i], stretch[i]);
            }
            splitLayout.addWidget(widgets[i]);
        }
        return splitLayout;
    }
    /**
     * Assemble the application shell layout. Override this method in order to change the arrangement
     * of the main area and the side panels.
     */
    createLayout() {
        const bottomSplitLayout = this.createSplitLayout([this.mainPanel, this.bottomPanel], [1, 0], { orientation: 'vertical', spacing: 0 });
        const panelForBottomArea = new widgets_1.SplitPanel({ layout: bottomSplitLayout });
        panelForBottomArea.id = 'theia-bottom-split-panel';
        const leftRightSplitLayout = this.createSplitLayout([this.leftPanelHandler.container, panelForBottomArea, this.rightPanelHandler.container], [0, 1, 0], { orientation: 'horizontal', spacing: 0 });
        const panelForSideAreas = new widgets_1.SplitPanel({ layout: leftRightSplitLayout });
        panelForSideAreas.id = 'theia-left-right-split-panel';
        return this.createBoxLayout([this.topPanel, panelForSideAreas, this.statusBar], [0, 1, 0], { direction: 'top-to-bottom', spacing: 0 });
    }
    /**
     * Create an object that describes the current shell layout. This object may contain references
     * to widgets; these need to be transformed before the layout can be serialized.
     */
    getLayoutData() {
        return {
            version: exports.applicationShellLayoutVersion,
            mainPanel: this.mainPanel.saveLayout(),
            mainPanelPinned: this.getPinnedMainWidgets(),
            bottomPanel: {
                config: this.bottomPanel.saveLayout(),
                pinned: this.getPinnedBottomWidgets(),
                size: this.bottomPanel.isVisible ? this.getBottomPanelSize() : this.bottomPanelState.lastPanelSize,
                expanded: this.isExpanded('bottom')
            },
            leftPanel: this.leftPanelHandler.getLayoutData(),
            rightPanel: this.rightPanelHandler.getLayoutData(),
            activeWidgetId: this.activeWidget ? this.activeWidget.id : undefined
        };
    }
    // Get an array corresponding to main panel widgets' pinned state.
    getPinnedMainWidgets() {
        const pinned = [];
        (0, algorithm_1.toArray)(this.mainPanel.widgets()).forEach((a, i) => {
            pinned[i] = a.title.className.includes(widgets_2.PINNED_CLASS);
        });
        return pinned;
    }
    // Get an array corresponding to bottom panel widgets' pinned state.
    getPinnedBottomWidgets() {
        const pinned = [];
        (0, algorithm_1.toArray)(this.bottomPanel.widgets()).forEach((a, i) => {
            pinned[i] = a.title.className.includes(widgets_2.PINNED_CLASS);
        });
        return pinned;
    }
    /**
     * Compute the current height of the bottom panel. This implementation assumes that the container
     * of the bottom panel is a `SplitPanel`.
     */
    getBottomPanelSize() {
        const parent = this.bottomPanel.parent;
        if (parent instanceof widgets_1.SplitPanel && parent.isVisible) {
            const index = parent.widgets.indexOf(this.bottomPanel) - 1;
            if (index >= 0) {
                const handle = parent.handles[index];
                if (!handle.classList.contains('p-mod-hidden')) {
                    const parentHeight = parent.node.clientHeight;
                    return parentHeight - handle.offsetTop;
                }
            }
        }
    }
    /**
     * Determine the default size to apply when the bottom panel is expanded for the first time.
     */
    getDefaultBottomPanelSize() {
        const parent = this.bottomPanel.parent;
        if (parent && parent.isVisible) {
            return parent.node.clientHeight * this.options.bottomPanel.initialSizeRatio;
        }
    }
    /**
     * Apply a shell layout that has been previously created with `getLayoutData`.
     */
    async setLayoutData(layoutData) {
        var _a, _b;
        const { mainPanel, mainPanelPinned, bottomPanel, leftPanel, rightPanel, activeWidgetId } = layoutData;
        if (leftPanel) {
            this.leftPanelHandler.setLayoutData(leftPanel);
            this.registerWithFocusTracker(leftPanel);
        }
        if (rightPanel) {
            this.rightPanelHandler.setLayoutData(rightPanel);
            this.registerWithFocusTracker(rightPanel);
        }
        // Proceed with the bottom panel once the side panels are set up
        await Promise.all([this.leftPanelHandler.state.pendingUpdate, this.rightPanelHandler.state.pendingUpdate]);
        if (bottomPanel) {
            if (bottomPanel.config) {
                this.bottomPanel.restoreLayout(bottomPanel.config);
                this.registerWithFocusTracker(bottomPanel.config.main);
            }
            if (bottomPanel.size) {
                this.bottomPanelState.lastPanelSize = bottomPanel.size;
            }
            if (bottomPanel.expanded) {
                this.expandBottomPanel();
            }
            else {
                this.collapseBottomPanel();
            }
            const widgets = (0, algorithm_1.toArray)(this.bottomPanel.widgets());
            this.bottomPanel.markActiveTabBar((_a = widgets[0]) === null || _a === void 0 ? void 0 : _a.title);
            if (bottomPanel.pinned && bottomPanel.pinned.length === widgets.length) {
                widgets.forEach((a, i) => {
                    if (bottomPanel.pinned[i]) {
                        a.title.className += ` ${widgets_2.PINNED_CLASS}`;
                        a.title.closable = false;
                    }
                });
            }
            this.refreshBottomPanelToggleButton();
        }
        // Proceed with the main panel once all others are set up
        await this.bottomPanelState.pendingUpdate;
        if (mainPanel) {
            this.mainPanel.restoreLayout(mainPanel);
            this.registerWithFocusTracker(mainPanel.main);
            const widgets = (0, algorithm_1.toArray)(this.mainPanel.widgets());
            // We don't store information about the last active tabbar
            // So we simply mark the first as being active
            this.mainPanel.markActiveTabBar((_b = widgets[0]) === null || _b === void 0 ? void 0 : _b.title);
            if (mainPanelPinned && mainPanelPinned.length === widgets.length) {
                widgets.forEach((a, i) => {
                    if (mainPanelPinned[i]) {
                        a.title.className += ` ${widgets_2.PINNED_CLASS}`;
                        a.title.closable = false;
                    }
                });
            }
        }
        if (activeWidgetId) {
            this.activateWidget(activeWidgetId);
        }
    }
    /**
     * Modify the height of the bottom panel. This implementation assumes that the container of the
     * bottom panel is a `SplitPanel`.
     */
    setBottomPanelSize(size) {
        const enableAnimation = this.applicationStateService.state === 'ready';
        const options = {
            side: 'bottom',
            duration: enableAnimation ? this.options.bottomPanel.expandDuration : 0,
            referenceWidget: this.bottomPanel
        };
        const promise = this.splitPositionHandler.setSidePanelSize(this.bottomPanel, size, options);
        const result = new Promise(resolve => {
            // Resolve the resulting promise in any case, regardless of whether resizing was successful
            promise.then(() => resolve(), () => resolve());
        });
        this.bottomPanelState.pendingUpdate = this.bottomPanelState.pendingUpdate.then(() => result);
        return result;
    }
    /**
     * A promise that is resolved when all currently pending updates are done.
     */
    get pendingUpdates() {
        return Promise.all([
            this.bottomPanelState.pendingUpdate,
            this.leftPanelHandler.state.pendingUpdate,
            this.rightPanelHandler.state.pendingUpdate
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
        ]);
    }
    /**
     * Track all widgets that are referenced by the given layout data.
     */
    registerWithFocusTracker(data) {
        if (data) {
            if (data.type === 'tab-area') {
                for (const widget of data.widgets) {
                    if (widget) {
                        this.track(widget);
                    }
                }
            }
            else if (data.type === 'split-area') {
                for (const child of data.children) {
                    this.registerWithFocusTracker(child);
                }
            }
            else if (data.type === 'sidepanel' && data.items) {
                for (const item of data.items) {
                    if (item.widget) {
                        this.track(item.widget);
                    }
                }
            }
        }
    }
    /**
     * Add a widget to the application shell. The given widget must have a unique `id` property,
     * which will be used as the DOM id.
     *
     * Widgets are removed from the shell by calling their `close` or `dispose` methods.
     *
     * Widgets added to the top area are not tracked regarding the _current_ and _active_ states.
     */
    async addWidget(widget, options) {
        if (!widget.id) {
            console.error('Widgets added to the application shell must have a unique id property.');
            return;
        }
        const { area, addOptions } = this.getInsertionOptions(options);
        const sidePanelOptions = { rank: options === null || options === void 0 ? void 0 : options.rank };
        switch (area) {
            case 'main':
                this.mainPanel.addWidget(widget, addOptions);
                break;
            case 'top':
                this.topPanel.addWidget(widget);
                break;
            case 'bottom':
                this.bottomPanel.addWidget(widget, addOptions);
                break;
            case 'left':
                this.leftPanelHandler.addWidget(widget, sidePanelOptions);
                break;
            case 'right':
                this.rightPanelHandler.addWidget(widget, sidePanelOptions);
                break;
            case 'secondaryWindow':
                /** At the moment, widgets are only moved to this area (i.e. a secondary window) by moving them from one of the other areas. */
                throw new Error('Widgets cannot be added directly to a secondary window');
            default:
                throw new Error('Unexpected area: ' + (options === null || options === void 0 ? void 0 : options.area));
        }
        if (area !== 'top') {
            this.track(widget);
        }
    }
    getInsertionOptions(options) {
        let ref = options === null || options === void 0 ? void 0 : options.ref;
        let area = (options === null || options === void 0 ? void 0 : options.area) || 'main';
        if (!ref && (area === 'main' || area === 'bottom')) {
            const tabBar = this.getTabBarFor(area);
            ref = tabBar && tabBar.currentTitle && tabBar.currentTitle.owner || undefined;
        }
        // make sure that ref belongs to area
        area = ref && this.getAreaFor(ref) || area;
        const addOptions = {};
        if (ApplicationShell_1.isOpenToSideMode(options === null || options === void 0 ? void 0 : options.mode)) {
            const areaPanel = area === 'main' ? this.mainPanel : area === 'bottom' ? this.bottomPanel : undefined;
            const sideRef = areaPanel && ref && ((options === null || options === void 0 ? void 0 : options.mode) === 'open-to-left' ?
                areaPanel.previousTabBarWidget(ref) :
                areaPanel.nextTabBarWidget(ref));
            if (sideRef) {
                addOptions.ref = sideRef;
            }
            else {
                addOptions.ref = ref;
                addOptions.mode = (options === null || options === void 0 ? void 0 : options.mode) === 'open-to-left' ? 'split-left' : 'split-right';
            }
        }
        else {
            addOptions.ref = ref;
            addOptions.mode = options === null || options === void 0 ? void 0 : options.mode;
        }
        return { area, addOptions };
    }
    /**
     * The widgets contained in the given shell area.
     */
    getWidgets(area) {
        switch (area) {
            case 'main':
                return (0, algorithm_1.toArray)(this.mainPanel.widgets());
            case 'top':
                return (0, algorithm_1.toArray)(this.topPanel.widgets);
            case 'bottom':
                return (0, algorithm_1.toArray)(this.bottomPanel.widgets());
            case 'left':
                return (0, algorithm_1.toArray)(this.leftPanelHandler.dockPanel.widgets());
            case 'right':
                return (0, algorithm_1.toArray)(this.rightPanelHandler.dockPanel.widgets());
            case 'secondaryWindow':
                return (0, algorithm_1.toArray)(this.secondaryWindowHandler.widgets);
            default:
                throw new Error('Illegal argument: ' + area);
        }
    }
    /**
     * Find the widget that contains the given HTML element. The returned widget may be one
     * that is managed by the application shell, or one that is embedded in another widget and
     * not directly managed by the shell, or a tab bar.
     */
    findWidgetForElement(element) {
        let widgetNode = element;
        while (widgetNode && !widgetNode.classList.contains('p-Widget')) {
            widgetNode = widgetNode.parentElement;
        }
        if (widgetNode) {
            return this.findWidgetForNode(widgetNode, this);
        }
        return undefined;
    }
    findWidgetForNode(widgetNode, widget) {
        if (widget.node === widgetNode) {
            return widget;
        }
        let result;
        (0, algorithm_1.each)(widget.children(), child => {
            result = this.findWidgetForNode(widgetNode, child);
            return !result;
        });
        return result;
    }
    /**
     * Finds the title widget from the tab-bar.
     * @param tabBar used for providing an array of titles.
     * @returns the selected title widget, else returns the currentTitle or undefined.
     */
    findTitle(tabBar, event) {
        if ((event === null || event === void 0 ? void 0 : event.target) instanceof HTMLElement) {
            const tabNode = event.target;
            const titleIndex = Array.from(tabBar.contentNode.getElementsByClassName('p-TabBar-tab'))
                .findIndex(node => node.contains(tabNode));
            if (titleIndex !== -1) {
                return tabBar.titles[titleIndex];
            }
        }
        return tabBar.currentTitle || undefined;
    }
    /**
     * Finds the tab-bar widget.
     * @returns the selected tab-bar, else returns the currentTabBar.
     */
    findTabBar(event) {
        if ((event === null || event === void 0 ? void 0 : event.target) instanceof HTMLElement) {
            const tabBar = this.findWidgetForElement(event.target);
            if (tabBar instanceof widgets_1.TabBar) {
                return tabBar;
            }
        }
        return this.currentTabBar;
    }
    /**
     *  @returns the widget whose title has been targeted by a DOM event on a tabbar, or undefined if none can be found.
     */
    findTargetedWidget(event) {
        if (event) {
            const tab = this.findTabBar(event);
            const title = tab && this.findTitle(tab, event);
            return title && title.owner;
        }
    }
    /**
     * The current widget in the application shell. The current widget is the last widget that
     * was active and not yet closed. See the remarks to `activeWidget` on what _active_ means.
     */
    get currentWidget() {
        return this.tracker.currentWidget || undefined;
    }
    /**
     * The active widget in the application shell. The active widget is the one that has focus
     * (either the widget itself or any of its contents).
     *
     * _Note:_ Focus is taken by a widget through the `onActivateRequest` method. It is up to the
     * widget implementation which DOM element will get the focus. The default implementation
     * does not take any focus; in that case the widget is never returned by this property.
     */
    get activeWidget() {
        return this.tracker.activeWidget || undefined;
    }
    /**
     * Returns the last active widget in the given shell area.
     */
    getCurrentWidget(area) {
        let title;
        switch (area) {
            case 'main':
                title = this.mainPanel.currentTitle;
                break;
            case 'bottom':
                title = this.bottomPanel.currentTitle;
                break;
            case 'left':
                title = this.leftPanelHandler.tabBar.currentTitle;
                break;
            case 'right':
                title = this.rightPanelHandler.tabBar.currentTitle;
                break;
            case 'secondaryWindow':
                // The current widget in a secondary window is not tracked.
                return undefined;
            default:
                throw new Error('Illegal argument: ' + area);
        }
        return title ? title.owner : undefined;
    }
    /**
     * Handle a change to the current widget.
     */
    onCurrentChanged(sender, args) {
        this.onDidChangeCurrentWidgetEmitter.fire(args);
    }
    /**
     * Handle a change to the active widget.
     */
    onActiveChanged(sender, args) {
        this.toDisposeOnActiveChanged.dispose();
        const { newValue, oldValue } = args;
        if (oldValue) {
            let w = oldValue;
            while (w) {
                // Remove the mark of the previously active widget
                w.title.className = w.title.className.replace(' theia-mod-active', '');
                w = w.parent;
            }
            // Reset the z-index to the default
            // eslint-disable-next-line no-null/no-null
            this.setZIndex(oldValue.node, null);
        }
        if (newValue) {
            let w = newValue;
            while (w) {
                // Mark the tab of the active widget
                w.title.className += ' theia-mod-active';
                w = w.parent;
            }
            // Reveal the title of the active widget in its tab bar
            const tabBar = this.getTabBarFor(newValue);
            if (tabBar instanceof tab_bars_1.ScrollableTabBar) {
                const index = tabBar.titles.indexOf(newValue.title);
                if (index >= 0) {
                    tabBar.revealTab(index);
                }
            }
            const widget = this.toTrackedStack(newValue.id).pop();
            const panel = this.findPanel(widget);
            if (panel) {
                // if widget was undefined, we wouldn't have gotten a panel back before
                panel.markAsCurrent(widget.title);
            }
            // Add checks to ensure that the 'sash' for left panel is displayed correctly
            if (newValue.node.className === 'p-Widget theia-view-container p-DockPanel-widget') {
                // Set the z-index so elements with `position: fixed` contained in the active widget are displayed correctly
                this.setZIndex(newValue.node, '1');
            }
            // activate another widget if an active widget will be closed
            const onCloseRequest = newValue['onCloseRequest'];
            newValue['onCloseRequest'] = msg => {
                const currentTabBar = this.currentTabBar;
                if (currentTabBar) {
                    const recentlyUsedInTabBar = currentTabBar['_previousTitle'];
                    if (recentlyUsedInTabBar && recentlyUsedInTabBar.owner !== newValue) {
                        currentTabBar.currentIndex = algorithm_1.ArrayExt.firstIndexOf(currentTabBar.titles, recentlyUsedInTabBar);
                        if (currentTabBar.currentTitle) {
                            this.activateWidget(currentTabBar.currentTitle.owner.id);
                        }
                    }
                    else if (!this.activateNextTabInTabBar(currentTabBar)) {
                        if (!this.activatePreviousTabBar(currentTabBar)) {
                            this.activateNextTabBar(currentTabBar);
                        }
                    }
                }
                newValue['onCloseRequest'] = onCloseRequest;
                newValue['onCloseRequest'](msg);
            };
            this.toDisposeOnActiveChanged.push(common_1.Disposable.create(() => newValue['onCloseRequest'] = onCloseRequest));
            if (previewable_widget_1.PreviewableWidget.is(newValue)) {
                newValue.loaded = true;
            }
        }
        this.onDidChangeActiveWidgetEmitter.fire(args);
    }
    /**
     * Set the z-index of the given element and its ancestors to the value `z`.
     */
    setZIndex(element, z) {
        element.style.zIndex = z || '';
        const parent = element.parentElement;
        if (parent && parent !== this.node) {
            this.setZIndex(parent, z);
        }
    }
    /**
     * Track the given widget so it is considered in the `current` and `active` state of the shell.
     */
    track(widget) {
        if (this.tracker.widgets.indexOf(widget) !== -1) {
            return;
        }
        this.tracker.add(widget);
        this.checkActivation(widget);
        saveable_1.Saveable.apply(widget, () => this.widgets.filter((maybeSaveable) => !!saveable_1.Saveable.get(maybeSaveable)), async (toSave, options) => {
            await this.saveResourceService.save(toSave, options);
        });
        if (ApplicationShell_1.TrackableWidgetProvider.is(widget)) {
            for (const toTrack of widget.getTrackableWidgets()) {
                this.track(toTrack);
            }
            if (widget.onDidChangeTrackableWidgets) {
                widget.onDidChangeTrackableWidgets(widgets => widgets.forEach(w => this.track(w)));
            }
        }
    }
    /**
     * @returns an array of Widgets, all of which are tracked by the focus tracker
     * The first member of the array is the widget whose id is passed in, and the other widgets
     * are its tracked parents in ascending order
     */
    toTrackedStack(id) {
        const tracked = new Map(this.tracker.widgets.map(w => [w.id, w]));
        let current = tracked.get(id);
        const stack = [];
        while (current) {
            if (tracked.has(current.id)) {
                stack.push(current);
            }
            current = current.parent || undefined;
        }
        return stack;
    }
    /**
     * Activate a widget in the application shell. This makes the widget visible and usually
     * also assigns focus to it.
     *
     * _Note:_ Focus is taken by a widget through the `onActivateRequest` method. It is up to the
     * widget implementation which DOM element will get the focus. The default implementation
     * does not take any focus.
     *
     * @returns the activated widget if it was found
     */
    async activateWidget(id) {
        const stack = this.toTrackedStack(id);
        let current = stack.pop();
        if (current && !this.doActivateWidget(current.id)) {
            return undefined;
        }
        while (current && stack.length) {
            const child = stack.pop();
            if (ApplicationShell_1.TrackableWidgetProvider.is(current) && current.activateWidget) {
                current = current.activateWidget(child.id);
            }
            else {
                child.activate();
                current = child;
            }
        }
        if (!current) {
            return undefined;
        }
        return Promise.all([
            this.waitForActivation(current.id),
            (0, widgets_2.waitForRevealed)(current),
            this.pendingUpdates
        ]).then(() => current, () => undefined);
    }
    waitForActivation(id) {
        if (this.activeWidget && this.activeWidget.id === id) {
            return Promise.resolve();
        }
        const activation = new promise_util_1.Deferred();
        const success = this.onDidChangeActiveWidget(() => {
            if (this.activeWidget && this.activeWidget.id === id) {
                activation.resolve();
            }
        });
        const failure = setTimeout(() => activation.reject(new Error(`Widget with id '${id}' failed to activate.`)), this.activationTimeout + 250);
        return activation.promise.finally(() => {
            success.dispose();
            clearTimeout(failure);
        });
    }
    /**
     * Activate top-level area widget.
     */
    doActivateWidget(id) {
        let widget = (0, algorithm_1.find)(this.mainPanel.widgets(), w => w.id === id);
        if (widget) {
            this.mainPanel.activateWidget(widget);
        }
        if (!widget) {
            widget = (0, algorithm_1.find)(this.bottomPanel.widgets(), w => w.id === id);
            if (widget) {
                this.expandBottomPanel();
                this.bottomPanel.activateWidget(widget);
            }
        }
        if (!widget) {
            widget = this.leftPanelHandler.activate(id);
        }
        if (!widget) {
            widget = this.rightPanelHandler.activate(id);
        }
        if (widget) {
            this.windowService.focus();
            return widget;
        }
        return this.secondaryWindowHandler.activateWidget(id);
    }
    /**
     * Focus is taken by a widget through the `onActivateRequest` method. It is up to the
     * widget implementation which DOM element will get the focus. The default implementation
     * of Widget does not take any focus. This method can help finding such problems by logging
     * a warning in case a widget was explicitly activated, but did not trigger a change of the
     * `activeWidget` property.
     */
    checkActivation(widget) {
        const onActivateRequest = widget['onActivateRequest'].bind(widget);
        widget['onActivateRequest'] = (msg) => {
            onActivateRequest(msg);
            this.assertActivated(widget);
        };
        return widget;
    }
    assertActivated(widget) {
        this.toDisposeOnActivationCheck.dispose();
        const onDispose = () => this.toDisposeOnActivationCheck.dispose();
        widget.disposed.connect(onDispose);
        this.toDisposeOnActivationCheck.push(common_1.Disposable.create(() => widget.disposed.disconnect(onDispose)));
        let start = 0;
        const step = timestamp => {
            const activeElement = widget.node.ownerDocument.activeElement;
            if (activeElement && widget.node.contains(activeElement)) {
                return;
            }
            if (!start) {
                start = timestamp;
            }
            const delta = timestamp - start;
            if (delta < this.activationTimeout) {
                request = window.requestAnimationFrame(step);
            }
            else {
                console.warn(`Widget was activated, but did not accept focus after ${this.activationTimeout}ms: ${widget.id}`);
            }
        };
        let request = window.requestAnimationFrame(step);
        this.toDisposeOnActivationCheck.push(common_1.Disposable.create(() => window.cancelAnimationFrame(request)));
    }
    /**
     * Reveal a widget in the application shell. This makes the widget visible,
     * but does not activate it.
     *
     * @returns the revealed widget if it was found
     */
    async revealWidget(id) {
        const stack = this.toTrackedStack(id);
        let current = stack.pop();
        if (current && !this.doRevealWidget(current.id)) {
            return undefined;
        }
        while (current && stack.length) {
            const child = stack.pop();
            if (ApplicationShell_1.TrackableWidgetProvider.is(current) && current.revealWidget) {
                current = current.revealWidget(child.id);
            }
            else {
                current = child;
            }
        }
        if (!current) {
            return undefined;
        }
        await Promise.all([
            (0, widgets_2.waitForRevealed)(current),
            this.pendingUpdates
        ]);
        return current;
    }
    /**
     * Reveal top-level area widget.
     */
    doRevealWidget(id) {
        let widget = (0, algorithm_1.find)(this.mainPanel.widgets(), w => w.id === id);
        if (!widget) {
            widget = (0, algorithm_1.find)(this.bottomPanel.widgets(), w => w.id === id);
            if (widget) {
                this.expandBottomPanel();
            }
        }
        if (widget) {
            const tabBar = this.getTabBarFor(widget);
            if (tabBar) {
                tabBar.currentTitle = widget.title;
            }
        }
        if (!widget) {
            widget = this.leftPanelHandler.expand(id);
        }
        if (!widget) {
            widget = this.rightPanelHandler.expand(id);
        }
        if (widget) {
            this.windowService.focus();
            return widget;
        }
        else {
            return this.secondaryWindowHandler.revealWidget(id);
        }
    }
    /**
     * Expand the named side panel area. This makes sure that the panel is visible, even if there
     * are no widgets in it. If the panel is already visible, nothing happens. If the panel is currently
     * collapsed (see `collapsePanel`) and it contains widgets, the widgets are revealed that were
     * visible before it was collapsed.
     */
    expandPanel(area) {
        switch (area) {
            case 'bottom':
                this.expandBottomPanel();
                break;
            case 'left':
                this.leftPanelHandler.expand();
                break;
            case 'right':
                this.rightPanelHandler.expand();
                break;
            default:
                throw new Error('Area cannot be expanded: ' + area);
        }
    }
    /**
     * Adjusts the size of the given area in the application shell.
     *
     * @param size the desired size of the panel in pixels.
     * @param area the area to resize.
     */
    resize(size, area) {
        switch (area) {
            case 'bottom':
                if (this.bottomPanel.isHidden) {
                    this.bottomPanelState.lastPanelSize = size;
                }
                else {
                    this.setBottomPanelSize(size);
                }
                break;
            case 'left':
                this.leftPanelHandler.resize(size);
                break;
            case 'right':
                this.rightPanelHandler.resize(size);
                break;
            default:
                throw new Error('Area cannot be resized: ' + area);
        }
    }
    /**
     * Expand the bottom panel. See `expandPanel` regarding the exact behavior.
     */
    expandBottomPanel() {
        const bottomPanel = this.bottomPanel;
        if (bottomPanel.isHidden) {
            let relativeSizes;
            const parent = bottomPanel.parent;
            if (parent instanceof widgets_1.SplitPanel) {
                relativeSizes = parent.relativeSizes();
            }
            bottomPanel.show();
            if (relativeSizes && parent instanceof widgets_1.SplitPanel) {
                // Make sure that the expansion animation starts at the smallest possible size
                parent.setRelativeSizes(relativeSizes);
            }
            let size;
            if (bottomPanel.isEmpty) {
                bottomPanel.node.style.minHeight = '0';
                size = this.options.bottomPanel.emptySize;
            }
            else if (this.bottomPanelState.lastPanelSize) {
                size = this.bottomPanelState.lastPanelSize;
            }
            else {
                size = this.getDefaultBottomPanelSize();
            }
            if (size) {
                this.bottomPanelState.expansion = side_panel_handler_1.SidePanel.ExpansionState.expanding;
                this.setBottomPanelSize(size).then(() => {
                    if (this.bottomPanelState.expansion === side_panel_handler_1.SidePanel.ExpansionState.expanding) {
                        this.bottomPanelState.expansion = side_panel_handler_1.SidePanel.ExpansionState.expanded;
                    }
                });
            }
            else {
                this.bottomPanelState.expansion = side_panel_handler_1.SidePanel.ExpansionState.expanded;
            }
        }
    }
    /**
     * Collapse the named side panel area. This makes sure that the panel is hidden,
     * increasing the space that is available for other shell areas.
     */
    collapsePanel(area) {
        switch (area) {
            case 'bottom':
                return this.collapseBottomPanel();
            case 'left':
                return this.leftPanelHandler.collapse();
            case 'right':
                return this.rightPanelHandler.collapse();
            default:
                throw new Error('Area cannot be collapsed: ' + area);
        }
    }
    /**
     * Collapse the bottom panel. All contained widgets are hidden, but not closed.
     * They can be restored by calling `expandBottomPanel`.
     */
    collapseBottomPanel() {
        const bottomPanel = this.bottomPanel;
        if (bottomPanel.isHidden) {
            return Promise.resolve();
        }
        if (this.bottomPanelState.expansion === side_panel_handler_1.SidePanel.ExpansionState.expanded) {
            const size = this.getBottomPanelSize();
            if (size) {
                this.bottomPanelState.lastPanelSize = size;
            }
        }
        this.bottomPanelState.expansion = side_panel_handler_1.SidePanel.ExpansionState.collapsed;
        bottomPanel.hide();
        return (0, browser_1.animationFrame)();
    }
    /**
     * Refresh the toggle button for the bottom panel. This implementation creates a status bar entry
     * and refers to the command `core.toggle.bottom.panel`.
     */
    refreshBottomPanelToggleButton() {
        if (this.bottomPanel.isEmpty) {
            this.statusBar.removeElement(BOTTOM_PANEL_TOGGLE_ID);
        }
        else {
            const label = nls_1.nls.localize('theia/core/common/collapseBottomPanel', 'Toggle Bottom Panel');
            const element = {
                name: label,
                text: '$(codicon-window)',
                alignment: status_bar_1.StatusBarAlignment.RIGHT,
                tooltip: label,
                command: 'core.toggle.bottom.panel',
                accessibilityInformation: {
                    label: label,
                    role: 'button'
                },
                priority: -1000
            };
            this.statusBar.setElement(BOTTOM_PANEL_TOGGLE_ID, element);
        }
    }
    /**
     * Check whether the named side panel area is expanded (returns `true`) or collapsed (returns `false`).
     */
    isExpanded(area) {
        switch (area) {
            case 'bottom':
                return this.bottomPanelState.expansion === side_panel_handler_1.SidePanel.ExpansionState.expanded;
            case 'left':
                return this.leftPanelHandler.state.expansion === side_panel_handler_1.SidePanel.ExpansionState.expanded;
            case 'right':
                return this.rightPanelHandler.state.expansion === side_panel_handler_1.SidePanel.ExpansionState.expanded;
            default:
                return true;
        }
    }
    /**
     * Close all tabs or a selection of tabs in a specific part of the application shell.
     *
     * @param tabBarOrArea
     *      Either the name of a shell area or a `TabBar` that is contained in such an area.
     * @param filter
     *      If undefined, all tabs are closed; otherwise only those tabs that match the filter are closed.
     */
    async closeTabs(tabBarOrArea, filter) {
        const titles = this.getWidgetTitles(tabBarOrArea, filter);
        if (titles.length) {
            await this.closeMany(titles.map(title => title.owner));
        }
    }
    saveTabs(tabBarOrArea, filter) {
        const titles = this.getWidgetTitles(tabBarOrArea, filter);
        for (let i = 0; i < titles.length; i++) {
            const widget = titles[i].owner;
            const saveable = saveable_1.Saveable.get(widget);
            saveable === null || saveable === void 0 ? void 0 : saveable.save();
        }
    }
    /**
     * Collects all widget titles for the given tab bar or area and optionally filters them.
     *
     * @param tabBarOrArea The tab bar or area to retrieve the widget titles for
     * @param filter The filter to apply to the result
     * @returns The filtered array of widget titles or an empty array
     */
    getWidgetTitles(tabBarOrArea, filter) {
        const titles = [];
        if (tabBarOrArea === 'main') {
            this.mainAreaTabBars.forEach(tabbar => titles.push(...(0, algorithm_1.toArray)(tabbar.titles)));
        }
        else if (tabBarOrArea === 'bottom') {
            this.bottomAreaTabBars.forEach(tabbar => titles.push(...(0, algorithm_1.toArray)(tabbar.titles)));
        }
        else if (tabBarOrArea === 'secondaryWindow') {
            titles.push(...this.secondaryWindowHandler.widgets.map(w => w.title));
        }
        else if (typeof tabBarOrArea === 'string') {
            const tabbar = this.getTabBarFor(tabBarOrArea);
            if (tabbar) {
                titles.push(...(0, algorithm_1.toArray)(tabbar.titles));
            }
        }
        else if (tabBarOrArea) {
            titles.push(...(0, algorithm_1.toArray)(tabBarOrArea.titles));
        }
        return filter ? titles.filter(filter) : titles;
    }
    /**
     * @param targets the widgets to be closed
     * @return an array of all the widgets that were actually closed.
     */
    async closeMany(targets, options) {
        if ((options === null || options === void 0 ? void 0 : options.save) === false || await saveable_1.Saveable.confirmSaveBeforeClose(targets, this.widgets.filter(widget => !targets.includes(widget)))) {
            return (await Promise.all(targets.map(target => this.closeWidget(target.id, options)))).filter((widget) => widget !== undefined);
        }
        return [];
    }
    /**
     * @returns the widget that was closed, if any, `undefined` otherwise.
     *
     * If your use case requires closing multiple widgets, use {@link ApplicationShell#closeMany} instead. That method handles closing saveable widgets more reliably.
     */
    async closeWidget(id, options) {
        // TODO handle save for composite widgets, i.e. the preference widget has 2 editors
        const stack = this.toTrackedStack(id);
        const current = stack.pop();
        if (!current) {
            return undefined;
        }
        const saveableOptions = options && { shouldSave: () => options.save };
        const pendingClose = saveable_1.SaveableWidget.is(current)
            ? current.closeWithSaving(saveableOptions)
            : (current.close(), (0, widgets_2.waitForClosed)(current));
        await Promise.all([
            pendingClose,
            this.pendingUpdates
        ]);
        return stack[0] || current;
    }
    /**
     * The shell area name of the currently active tab, or undefined.
     */
    get currentTabArea() {
        const currentWidget = this.currentWidget;
        if (currentWidget) {
            return this.getAreaFor(currentWidget);
        }
    }
    /**
     * Determine the name of the shell area where the given widget resides. The result is
     * undefined if the widget does not reside directly in the shell.
     */
    getAreaFor(input) {
        if (input instanceof widgets_1.TabBar) {
            if ((0, algorithm_1.find)(this.mainPanel.tabBars(), tb => tb === input)) {
                return 'main';
            }
            if ((0, algorithm_1.find)(this.bottomPanel.tabBars(), tb => tb === input)) {
                return 'bottom';
            }
            if (this.leftPanelHandler.tabBar === input) {
                return 'left';
            }
            if (this.rightPanelHandler.tabBar === input) {
                return 'right';
            }
        }
        const widget = this.toTrackedStack(input.id).pop();
        if (!widget) {
            return undefined;
        }
        const title = widget.title;
        const mainPanelTabBar = this.mainPanel.findTabBar(title);
        if (mainPanelTabBar) {
            return 'main';
        }
        const bottomPanelTabBar = this.bottomPanel.findTabBar(title);
        if (bottomPanelTabBar) {
            return 'bottom';
        }
        if (algorithm_1.ArrayExt.firstIndexOf(this.leftPanelHandler.tabBar.titles, title) > -1) {
            return 'left';
        }
        if (algorithm_1.ArrayExt.firstIndexOf(this.rightPanelHandler.tabBar.titles, title) > -1) {
            return 'right';
        }
        if (this.secondaryWindowHandler.widgets.includes(widget)) {
            return 'secondaryWindow';
        }
        return undefined;
    }
    getAreaPanelFor(input) {
        const widget = this.toTrackedStack(input.id).pop();
        if (!widget) {
            return undefined;
        }
        return this.findPanel(widget);
    }
    /**
     * Find the shell panel this top-level widget is part of
     */
    findPanel(widget) {
        if (!widget) {
            return undefined;
        }
        const title = widget.title;
        const mainPanelTabBar = this.mainPanel.findTabBar(title);
        if (mainPanelTabBar) {
            return this.mainPanel;
        }
        const bottomPanelTabBar = this.bottomPanel.findTabBar(title);
        if (bottomPanelTabBar) {
            return this.bottomPanel;
        }
        if (algorithm_1.ArrayExt.firstIndexOf(this.leftPanelHandler.tabBar.titles, title) > -1) {
            return this.leftPanelHandler.dockPanel;
        }
        if (algorithm_1.ArrayExt.firstIndexOf(this.rightPanelHandler.tabBar.titles, title) > -1) {
            return this.rightPanelHandler.dockPanel;
        }
        return undefined;
    }
    /**
     * Return the tab bar that has the currently active widget, or undefined.
     */
    get currentTabBar() {
        const currentWidget = this.currentWidget;
        if (currentWidget) {
            return this.getTabBarFor(currentWidget);
        }
    }
    /**
     * Return the tab bar in the given shell area, or the tab bar that has the given widget, or undefined.
     */
    getTabBarFor(widgetOrArea) {
        if (typeof widgetOrArea === 'string') {
            switch (widgetOrArea) {
                case 'main':
                    return this.mainPanel.currentTabBar;
                case 'bottom':
                    return this.bottomPanel.currentTabBar;
                case 'left':
                    return this.leftPanelHandler.tabBar;
                case 'right':
                    return this.rightPanelHandler.tabBar;
                case 'secondaryWindow':
                    // Secondary windows don't have a tab bar
                    return undefined;
                default:
                    throw new Error('Illegal argument: ' + widgetOrArea);
            }
        }
        const widget = this.toTrackedStack(widgetOrArea.id).pop();
        if (!widget) {
            return undefined;
        }
        const widgetTitle = widget.title;
        const mainPanelTabBar = this.mainPanel.findTabBar(widgetTitle);
        if (mainPanelTabBar) {
            return mainPanelTabBar;
        }
        const bottomPanelTabBar = this.bottomPanel.findTabBar(widgetTitle);
        if (bottomPanelTabBar) {
            return bottomPanelTabBar;
        }
        const leftPanelTabBar = this.leftPanelHandler.tabBar;
        if (algorithm_1.ArrayExt.firstIndexOf(leftPanelTabBar.titles, widgetTitle) > -1) {
            return leftPanelTabBar;
        }
        const rightPanelTabBar = this.rightPanelHandler.tabBar;
        if (algorithm_1.ArrayExt.firstIndexOf(rightPanelTabBar.titles, widgetTitle) > -1) {
            return rightPanelTabBar;
        }
        return undefined;
    }
    /**
     * The tab bars contained in the main shell area. If there is no widget in the main area, the
     * returned array is empty.
     */
    get mainAreaTabBars() {
        return (0, algorithm_1.toArray)(this.mainPanel.tabBars());
    }
    /**
     * The tab bars contained in the bottom shell area. If there is no widget in the bottom area,
     * the returned array is empty.
     */
    get bottomAreaTabBars() {
        return (0, algorithm_1.toArray)(this.bottomPanel.tabBars());
    }
    /**
     * The tab bars contained in all shell areas.
     */
    get allTabBars() {
        return [...this.mainAreaTabBars, ...this.bottomAreaTabBars, this.leftPanelHandler.tabBar, this.rightPanelHandler.tabBar];
    }
    /*
     * Activate the next tab in the current tab bar.
     */
    activateNextTabInTabBar(current = this.currentTabBar) {
        const index = this.nextTabIndexInTabBar(current);
        if (!current || index === -1) {
            return false;
        }
        current.currentIndex = index;
        if (current.currentTitle) {
            this.activateWidget(current.currentTitle.owner.id);
        }
        return true;
    }
    nextTabIndexInTabBar(current = this.currentTabBar) {
        if (!current || current.titles.length <= 1) {
            return -1;
        }
        const index = current.currentIndex;
        if (index === -1) {
            return -1;
        }
        if (index < current.titles.length - 1) {
            return index + 1;
        }
        return 0;
    }
    activateNextTab() {
        const current = this.currentTabBar;
        if (current) {
            const ci = current.currentIndex;
            if (ci !== -1) {
                if (ci < current.titles.length - 1) {
                    current.currentIndex += 1;
                    if (current.currentTitle) {
                        this.activateWidget(current.currentTitle.owner.id);
                    }
                    return true;
                }
                else if (ci === current.titles.length - 1) {
                    return this.activateNextTabBar(current);
                }
            }
        }
        return false;
    }
    activateNextTabBar(current = this.currentTabBar) {
        const nextBar = this.nextTabBar(current);
        if (nextBar) {
            nextBar.currentIndex = 0;
            if (nextBar.currentTitle) {
                this.activateWidget(nextBar.currentTitle.owner.id);
            }
            return true;
        }
        return false;
    }
    /**
     * Return the tab bar next to the given tab bar; return the given tab bar if there is no adjacent one.
     */
    nextTabBar(current = this.currentTabBar) {
        let bars = (0, algorithm_1.toArray)(this.bottomPanel.tabBars());
        let len = bars.length;
        let ci = algorithm_1.ArrayExt.firstIndexOf(bars, current);
        if (ci < 0) {
            bars = (0, algorithm_1.toArray)(this.mainPanel.tabBars());
            len = bars.length;
            ci = algorithm_1.ArrayExt.firstIndexOf(bars, current);
        }
        if (ci >= 0 && ci < len - 1) {
            return bars[ci + 1];
        }
        else if (ci >= 0 && ci === len - 1) {
            return bars[0];
        }
        else {
            return current;
        }
    }
    /*
     * Activate the previous tab in the current tab bar.
     */
    activatePreviousTabInTabBar(current = this.currentTabBar) {
        const index = this.previousTabIndexInTabBar(current);
        if (!current || index === -1) {
            return false;
        }
        current.currentIndex = index;
        if (current.currentTitle) {
            this.activateWidget(current.currentTitle.owner.id);
        }
        return true;
    }
    previousTabIndexInTabBar(current = this.currentTabBar) {
        if (!current || current.titles.length <= 1) {
            return -1;
        }
        const index = current.currentIndex;
        if (index === -1) {
            return -1;
        }
        if (index > 0) {
            return index - 1;
        }
        return current.titles.length - 1;
    }
    activatePreviousTab() {
        const current = this.currentTabBar;
        if (current) {
            const ci = current.currentIndex;
            if (ci !== -1) {
                if (ci > 0) {
                    current.currentIndex -= 1;
                    if (current.currentTitle) {
                        this.activateWidget(current.currentTitle.owner.id);
                    }
                    return true;
                }
                else if (ci === 0) {
                    if (current && current.titles.length > 0) {
                        current.currentIndex = current.titles.length - 1;
                        if (current.currentTitle) {
                            this.activateWidget(current.currentTitle.owner.id);
                        }
                        return true;
                    }
                    return this.activatePreviousTabBar(current);
                }
            }
        }
        return false;
    }
    activatePreviousTabBar(current = this.currentTabBar) {
        const prevBar = this.previousTabBar(current);
        if (!prevBar) {
            return false;
        }
        if (!prevBar.currentTitle) {
            prevBar.currentIndex = prevBar.titles.length - 1;
        }
        if (prevBar.currentTitle) {
            this.activateWidget(prevBar.currentTitle.owner.id);
        }
        return true;
    }
    /**
     * Return the tab bar previous to the given tab bar; return the given tab bar if there is no adjacent one.
     */
    previousTabBar(current = this.currentTabBar) {
        const bars = (0, algorithm_1.toArray)(this.mainPanel.tabBars());
        const len = bars.length;
        const ci = algorithm_1.ArrayExt.firstIndexOf(bars, current);
        if (ci > 0) {
            return bars[ci - 1];
        }
        else if (ci === 0) {
            return bars[len - 1];
        }
        else {
            return current;
        }
    }
    /**
     * Test whether the current widget is dirty.
     */
    canSave() {
        return this.saveResourceService.canSave(this.currentWidget);
    }
    /**
     * Save the current widget if it is dirty.
     */
    async save(options) {
        await this.saveResourceService.save(this.currentWidget, options);
    }
    /**
     * Test whether there is a dirty widget.
     */
    canSaveAll() {
        return this.tracker.widgets.some(widget => this.saveResourceService.canSave(widget));
    }
    /**
     * Save all dirty widgets.
     */
    async saveAll(options) {
        for (const widget of this.widgets) {
            if (this.saveResourceService.canSaveNotSaveAs(widget)) {
                await this.saveResourceService.save(widget, options);
            }
        }
    }
    /**
     * Returns a snapshot of all tracked widgets to allow async modifications.
     */
    get widgets() {
        return [...this.tracker.widgets];
    }
    getWidgetById(id) {
        for (const widget of this.tracker.widgets) {
            if (widget.id === id) {
                return widget;
            }
        }
        return undefined;
    }
    canToggleMaximized(widget = this.currentWidget) {
        const area = widget && this.getAreaFor(widget);
        return area === 'main' || area === 'bottom';
    }
    toggleMaximized(widget = this.currentWidget) {
        const area = widget && this.getAreaPanelFor(widget);
        if (area instanceof theia_dock_panel_1.TheiaDockPanel && (area === this.mainPanel || area === this.bottomPanel)) {
            area.toggleMaximized();
            this.revealWidget(widget.id);
        }
    }
};
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(context_key_service_1.ContextKeyService),
    (0, tslib_1.__metadata)("design:type", Object)
], ApplicationShell.prototype, "contextKeyService", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(opener_service_1.OpenerService),
    (0, tslib_1.__metadata)("design:type", Object)
], ApplicationShell.prototype, "openerService", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(theia_dock_panel_1.TheiaDockPanel.Factory),
    (0, tslib_1.__metadata)("design:type", Function)
], ApplicationShell.prototype, "dockPanelFactory", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.postConstruct)(),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", []),
    (0, tslib_1.__metadata)("design:returntype", void 0)
], ApplicationShell.prototype, "init", null);
ApplicationShell = ApplicationShell_1 = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)(),
    (0, tslib_1.__param)(0, (0, inversify_1.inject)(exports.DockPanelRendererFactory)),
    (0, tslib_1.__param)(1, (0, inversify_1.inject)(status_bar_1.StatusBarImpl)),
    (0, tslib_1.__param)(2, (0, inversify_1.inject)(side_panel_handler_1.SidePanelHandlerFactory)),
    (0, tslib_1.__param)(3, (0, inversify_1.inject)(split_panels_1.SplitPositionHandler)),
    (0, tslib_1.__param)(4, (0, inversify_1.inject)(frontend_application_state_1.FrontendApplicationStateService)),
    (0, tslib_1.__param)(5, (0, inversify_1.inject)(exports.ApplicationShellOptions)),
    (0, tslib_1.__param)(5, (0, inversify_1.optional)()),
    (0, tslib_1.__param)(6, (0, inversify_1.inject)(core_preferences_1.CorePreferences)),
    (0, tslib_1.__param)(7, (0, inversify_1.inject)(save_resource_service_1.SaveResourceService)),
    (0, tslib_1.__param)(8, (0, inversify_1.inject)(secondary_window_handler_1.SecondaryWindowHandler)),
    (0, tslib_1.__param)(9, (0, inversify_1.inject)(window_service_1.WindowService)),
    (0, tslib_1.__metadata)("design:paramtypes", [Function, status_bar_1.StatusBarImpl, Function, split_panels_1.SplitPositionHandler,
        frontend_application_state_1.FrontendApplicationStateService, Object, Object, save_resource_service_1.SaveResourceService,
        secondary_window_handler_1.SecondaryWindowHandler, Object])
], ApplicationShell);
exports.ApplicationShell = ApplicationShell;
/**
 * The namespace for `ApplicationShell` class statics.
 */
(function (ApplicationShell) {
    ApplicationShell.areaLabels = {
        main: nls_1.nls.localizeByDefault('Main'),
        top: nls_1.nls.localizeByDefault('Top'),
        left: nls_1.nls.localizeByDefault('Left'),
        right: nls_1.nls.localizeByDefault('Right'),
        bottom: nls_1.nls.localizeByDefault('Bottom'),
        secondaryWindow: nls_1.nls.localize('theia/shell-area/secondary', 'Secondary Window'),
    };
    /**
     * The _side areas_ are those shell areas that can be collapsed and expanded,
     * i.e. `left`, `right`, and `bottom`.
     */
    function isSideArea(area) {
        return area === 'left' || area === 'right' || area === 'bottom';
    }
    ApplicationShell.isSideArea = isSideArea;
    function isValidArea(area) {
        const areas = ['main', 'top', 'left', 'right', 'bottom', 'secondaryWindow'];
        return typeof area === 'string' && areas.includes(area);
    }
    ApplicationShell.isValidArea = isValidArea;
    /**
     * The default values for application shell options.
     */
    ApplicationShell.DEFAULT_OPTIONS = Object.freeze({
        bottomPanel: Object.freeze({
            emptySize: 140,
            expandThreshold: 160,
            expandDuration: 0,
            initialSizeRatio: 0.382
        }),
        leftPanel: Object.freeze({
            emptySize: 140,
            expandThreshold: 140,
            expandDuration: 0,
            initialSizeRatio: 0.191
        }),
        rightPanel: Object.freeze({
            emptySize: 140,
            expandThreshold: 140,
            expandDuration: 0,
            initialSizeRatio: 0.191
        })
    });
    function isOpenToSideMode(mode) {
        return mode === 'open-to-left' || mode === 'open-to-right';
    }
    ApplicationShell.isOpenToSideMode = isOpenToSideMode;
    let TrackableWidgetProvider;
    (function (TrackableWidgetProvider) {
        function is(widget) {
            return (0, common_1.isObject)(widget) && 'getTrackableWidgets' in widget;
        }
        TrackableWidgetProvider.is = is;
    })(TrackableWidgetProvider = ApplicationShell.TrackableWidgetProvider || (ApplicationShell.TrackableWidgetProvider = {}));
})(ApplicationShell = exports.ApplicationShell || (exports.ApplicationShell = {}));
exports.ApplicationShell = ApplicationShell;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/shell/current-widget-command-adapter.js":
/*!******************************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/shell/current-widget-command-adapter.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2021 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CurrentWidgetCommandAdapter = void 0;
/**
 * Creates a command handler that acts on either the widget targeted by a DOM event or the current widget.
 */
class CurrentWidgetCommandAdapter {
    constructor(shell, handler) {
        this.execute = (event) => handler.execute(...this.transformArguments(shell, event));
        if (handler.isEnabled) {
            this.isEnabled = (event) => { var _a; return !!((_a = handler.isEnabled) === null || _a === void 0 ? void 0 : _a.call(handler, ...this.transformArguments(shell, event))); };
        }
        if (handler.isVisible) {
            this.isVisible = (event) => { var _a; return !!((_a = handler.isVisible) === null || _a === void 0 ? void 0 : _a.call(handler, ...this.transformArguments(shell, event))); };
        }
        if (handler.isToggled) {
            this.isToggled = (event) => { var _a; return !!((_a = handler.isToggled) === null || _a === void 0 ? void 0 : _a.call(handler, ...this.transformArguments(shell, event))); };
        }
    }
    transformArguments(shell, event) {
        const tabBar = shell.findTabBar(event);
        const title = tabBar && shell.findTitle(tabBar, event);
        return [title, tabBar, event];
    }
}
exports.CurrentWidgetCommandAdapter = CurrentWidgetCommandAdapter;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/shell/index.js":
/*!*****************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/shell/index.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./application-shell */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/shell/application-shell.js"), exports);
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./shell-layout-restorer */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/shell/shell-layout-restorer.js"), exports);
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./side-panel-handler */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/shell/side-panel-handler.js"), exports);
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./sidebar-menu-widget */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/shell/sidebar-menu-widget.js"), exports);
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./split-panels */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/shell/split-panels.js"), exports);
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./tab-bars */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/shell/tab-bars.js"), exports);
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./view-contribution */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/shell/view-contribution.js"), exports);


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/shell/shell-layout-restorer.js":
/*!*********************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/shell/shell-layout-restorer.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2017 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var ShellLayoutRestorer_1;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ShellLayoutRestorer = exports.RESET_LAYOUT = exports.ApplicationShellLayoutMigration = exports.ApplicationShellLayoutMigrationError = exports.StatefulWidget = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/es/inversify.js");
const widget_manager_1 = __webpack_require__(/*! ../widget-manager */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/widget-manager.js");
const storage_service_1 = __webpack_require__(/*! ../storage-service */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/storage-service.js");
const logger_1 = __webpack_require__(/*! ../../common/logger */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/logger.js");
const command_1 = __webpack_require__(/*! ../../common/command */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/command.js");
const theming_1 = __webpack_require__(/*! ../theming */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/theming.js");
const contribution_provider_1 = __webpack_require__(/*! ../../common/contribution-provider */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/contribution-provider.js");
const application_shell_1 = __webpack_require__(/*! ./application-shell */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/shell/application-shell.js");
const common_frontend_contribution_1 = __webpack_require__(/*! ../common-frontend-contribution */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/common-frontend-contribution.js");
const window_service_1 = __webpack_require__(/*! ../window/window-service */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/window/window-service.js");
const frontend_application_state_1 = __webpack_require__(/*! ../../common/frontend-application-state */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/frontend-application-state.js");
const common_1 = __webpack_require__(/*! ../../common */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/index.js");
var StatefulWidget;
(function (StatefulWidget) {
    function is(arg) {
        return (0, common_1.isObject)(arg) && (0, common_1.isFunction)(arg.storeState) && (0, common_1.isFunction)(arg.restoreState);
    }
    StatefulWidget.is = is;
})(StatefulWidget = exports.StatefulWidget || (exports.StatefulWidget = {}));
var ApplicationShellLayoutMigrationError;
(function (ApplicationShellLayoutMigrationError) {
    const code = 'ApplicationShellLayoutMigrationError';
    function create(message) {
        return Object.assign(new Error(`Could not migrate layout to version ${application_shell_1.applicationShellLayoutVersion}.` + (message ? '\n' + message : '')), { code });
    }
    ApplicationShellLayoutMigrationError.create = create;
    function is(error) {
        return !!error && 'code' in error && error['code'] === code;
    }
    ApplicationShellLayoutMigrationError.is = is;
})(ApplicationShellLayoutMigrationError = exports.ApplicationShellLayoutMigrationError || (exports.ApplicationShellLayoutMigrationError = {}));
exports.ApplicationShellLayoutMigration = Symbol('ApplicationShellLayoutMigration');
exports.RESET_LAYOUT = command_1.Command.toLocalizedCommand({
    id: 'reset.layout',
    category: common_frontend_contribution_1.CommonCommands.VIEW_CATEGORY,
    label: 'Reset Workbench Layout'
}, 'theia/core/resetWorkbenchLayout', common_frontend_contribution_1.CommonCommands.VIEW_CATEGORY_KEY);
let ShellLayoutRestorer = ShellLayoutRestorer_1 = class ShellLayoutRestorer {
    constructor(widgetManager, logger, storageService) {
        this.widgetManager = widgetManager;
        this.logger = logger;
        this.storageService = storageService;
        this.storageKey = 'layout';
        this.shouldStoreLayout = true;
    }
    registerCommands(commands) {
        commands.registerCommand(exports.RESET_LAYOUT, {
            execute: async () => this.resetLayout()
        });
    }
    async resetLayout() {
        if (await this.windowService.isSafeToShutDown(frontend_application_state_1.StopReason.Reload)) {
            this.logger.info('>>> Resetting layout...');
            this.shouldStoreLayout = false;
            this.storageService.setData(this.storageKey, undefined);
            this.themeService.reset();
            this.logger.info('<<< The layout has been successfully reset.');
            this.windowService.reload();
        }
    }
    storeLayout(app) {
        if (this.shouldStoreLayout) {
            try {
                this.logger.info('>>> Storing the layout...');
                const layoutData = app.shell.getLayoutData();
                const serializedLayoutData = this.deflate(layoutData);
                this.storageService.setData(this.storageKey, serializedLayoutData);
                this.logger.info('<<< The layout has been successfully stored.');
            }
            catch (error) {
                this.storageService.setData(this.storageKey, undefined);
                this.logger.error('Error during serialization of layout data', error);
            }
        }
    }
    async restoreLayout(app) {
        this.logger.info('>>> Restoring the layout state...');
        const serializedLayoutData = await this.storageService.getData(this.storageKey);
        if (serializedLayoutData === undefined) {
            this.logger.info('<<< Nothing to restore.');
            return false;
        }
        const layoutData = await this.inflate(serializedLayoutData);
        await app.shell.setLayoutData(layoutData);
        this.logger.info('<<< The layout has been successfully restored.');
        return true;
    }
    isWidgetProperty(propertyName) {
        return propertyName === 'widget';
    }
    isWidgetsProperty(propertyName) {
        return propertyName === 'widgets';
    }
    /**
     * Turns the layout data to a string representation.
     */
    deflate(data) {
        return JSON.stringify(data, (property, value) => {
            if (this.isWidgetProperty(property)) {
                const description = this.convertToDescription(value);
                return description;
            }
            else if (this.isWidgetsProperty(property)) {
                const descriptions = [];
                for (const widget of value) {
                    const description = this.convertToDescription(widget);
                    if (description) {
                        descriptions.push(description);
                    }
                }
                return descriptions;
            }
            return value;
        });
    }
    convertToDescription(widget) {
        const desc = this.widgetManager.getDescription(widget);
        if (desc) {
            if (StatefulWidget.is(widget)) {
                const innerState = widget.storeState();
                return innerState ? {
                    constructionOptions: desc,
                    innerWidgetState: this.deflate(innerState)
                } : undefined;
            }
            else {
                return {
                    constructionOptions: desc,
                    innerWidgetState: undefined
                };
            }
        }
    }
    /**
     * Creates the layout data from its string representation.
     */
    async inflate(layoutData) {
        const parseContext = new ShellLayoutRestorer_1.ParseContext();
        const layout = this.parse(layoutData, parseContext);
        const layoutVersion = Number(layout.version);
        if (typeof layoutVersion !== 'number' || Number.isNaN(layoutVersion)) {
            throw new Error('could not resolve a layout version');
        }
        if (layoutVersion !== application_shell_1.applicationShellLayoutVersion) {
            if (layoutVersion < application_shell_1.applicationShellLayoutVersion) {
                console.warn(`Layout version ${layoutVersion} is behind current layout version ${application_shell_1.applicationShellLayoutVersion}, trying to migrate...`);
            }
            else {
                console.warn(`Layout version ${layoutVersion} is ahead current layout version ${application_shell_1.applicationShellLayoutVersion}, trying to load anyway...`);
            }
            console.info(`Please use '${exports.RESET_LAYOUT.label}' command if the layout looks bogus.`);
        }
        const migrations = this.migrations.getContributions()
            .filter(m => m.layoutVersion > layoutVersion && m.layoutVersion <= application_shell_1.applicationShellLayoutVersion)
            .sort((m, m2) => m.layoutVersion - m2.layoutVersion);
        if (migrations.length) {
            console.info(`Found ${migrations.length} migrations from layout version ${layoutVersion} to version ${application_shell_1.applicationShellLayoutVersion}, migrating...`);
        }
        const context = { layout, layoutVersion, migrations };
        await this.fireWillInflateLayout(context);
        await parseContext.inflate(context);
        return layout;
    }
    async fireWillInflateLayout(context) {
        for (const migration of context.migrations) {
            if (migration.onWillInflateLayout) {
                // don't catch exceptions, if one migration fails all should fail.
                await migration.onWillInflateLayout(context);
            }
        }
    }
    parse(layoutData, parseContext) {
        return JSON.parse(layoutData, (property, value) => {
            if (this.isWidgetsProperty(property)) {
                const widgets = parseContext.filteredArray();
                const descs = value;
                for (let i = 0; i < descs.length; i++) {
                    parseContext.push(async (context) => {
                        widgets[i] = await this.convertToWidget(descs[i], context);
                    });
                }
                return widgets;
            }
            else if ((0, common_1.isObject)(value) && !Array.isArray(value)) {
                const copy = {};
                for (const p in value) {
                    if (this.isWidgetProperty(p)) {
                        parseContext.push(async (context) => {
                            copy[p] = await this.convertToWidget(value[p], context);
                        });
                    }
                    else {
                        copy[p] = value[p];
                    }
                }
                return copy;
            }
            return value;
        });
    }
    async fireWillInflateWidget(desc, context) {
        for (const migration of context.migrations) {
            if (migration.onWillInflateWidget) {
                // don't catch exceptions, if one migration fails all should fail.
                const migrated = await migration.onWillInflateWidget(desc, context);
                if (migrated) {
                    if ((0, common_1.isObject)(migrated.innerWidgetState)) {
                        // in order to inflate nested widgets
                        migrated.innerWidgetState = JSON.stringify(migrated.innerWidgetState);
                    }
                    desc = migrated;
                }
            }
        }
        return desc;
    }
    async convertToWidget(desc, context) {
        if (!desc.constructionOptions) {
            return undefined;
        }
        try {
            desc = await this.fireWillInflateWidget(desc, context);
            const widget = await this.widgetManager.getOrCreateWidget(desc.constructionOptions.factoryId, desc.constructionOptions.options);
            if (StatefulWidget.is(widget) && desc.innerWidgetState !== undefined) {
                try {
                    let oldState;
                    if (typeof desc.innerWidgetState === 'string') {
                        const parseContext = new ShellLayoutRestorer_1.ParseContext();
                        oldState = this.parse(desc.innerWidgetState, parseContext);
                        await parseContext.inflate({ ...context, parent: widget });
                    }
                    else {
                        oldState = desc.innerWidgetState;
                    }
                    widget.restoreState(oldState);
                }
                catch (e) {
                    if (ApplicationShellLayoutMigrationError.is(e)) {
                        throw e;
                    }
                    this.logger.warn(`Couldn't restore widget state for ${widget.id}. Error: ${e} `);
                }
            }
            if (widget.isDisposed) {
                return undefined;
            }
            return widget;
        }
        catch (e) {
            if (ApplicationShellLayoutMigrationError.is(e)) {
                throw e;
            }
            this.logger.warn(`Couldn't restore widget for ${desc.constructionOptions.factoryId}. Error: ${e} `);
            return undefined;
        }
    }
};
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(contribution_provider_1.ContributionProvider),
    (0, inversify_1.named)(exports.ApplicationShellLayoutMigration),
    (0, tslib_1.__metadata)("design:type", Object)
], ShellLayoutRestorer.prototype, "migrations", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(window_service_1.WindowService),
    (0, tslib_1.__metadata)("design:type", Object)
], ShellLayoutRestorer.prototype, "windowService", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(theming_1.ThemeService),
    (0, tslib_1.__metadata)("design:type", theming_1.ThemeService)
], ShellLayoutRestorer.prototype, "themeService", void 0);
ShellLayoutRestorer = ShellLayoutRestorer_1 = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)(),
    (0, tslib_1.__param)(0, (0, inversify_1.inject)(widget_manager_1.WidgetManager)),
    (0, tslib_1.__param)(1, (0, inversify_1.inject)(logger_1.ILogger)),
    (0, tslib_1.__param)(2, (0, inversify_1.inject)(storage_service_1.StorageService)),
    (0, tslib_1.__metadata)("design:paramtypes", [widget_manager_1.WidgetManager, Object, Object])
], ShellLayoutRestorer);
exports.ShellLayoutRestorer = ShellLayoutRestorer;
(function (ShellLayoutRestorer) {
    class ParseContext {
        constructor() {
            this.toInflate = [];
            this.toFilter = [];
        }
        /**
         * Returns an array, which will be filtered from undefined elements
         * after resolving promises, that create widgets.
         */
        filteredArray() {
            const array = [];
            this.toFilter.push(array);
            return array;
        }
        push(toInflate) {
            this.toInflate.push(toInflate);
        }
        async inflate(context) {
            const pending = [];
            while (this.toInflate.length) {
                pending.push(this.toInflate.pop()(context));
            }
            await Promise.all(pending);
            if (this.toFilter.length) {
                this.toFilter.forEach(array => {
                    for (let i = 0; i < array.length; i++) {
                        if (array[i] === undefined) {
                            array.splice(i--, 1);
                        }
                    }
                });
            }
        }
    }
    ShellLayoutRestorer.ParseContext = ParseContext;
})(ShellLayoutRestorer = exports.ShellLayoutRestorer || (exports.ShellLayoutRestorer = {}));
exports.ShellLayoutRestorer = ShellLayoutRestorer;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/shell/side-panel-handler.js":
/*!******************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/shell/side-panel-handler.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var SidePanelHandler_1;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SidePanel = exports.SidePanelHandler = exports.SIDE_PANEL_TOOLBAR_CONTEXT_MENU = exports.SidePanelHandlerFactory = exports.LEFT_RIGHT_AREA_CLASS = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/es/inversify.js");
const algorithm_1 = __webpack_require__(/*! @phosphor/algorithm */ "../node_modules/@phosphor/algorithm/lib/index.js");
const widgets_1 = __webpack_require__(/*! @phosphor/widgets */ "../node_modules/@phosphor/widgets/lib/index.js");
const coreutils_1 = __webpack_require__(/*! @phosphor/coreutils */ "../node_modules/@phosphor/coreutils/lib/index.js");
const dragdrop_1 = __webpack_require__(/*! @phosphor/dragdrop */ "../node_modules/@phosphor/dragdrop/lib/index.js");
const properties_1 = __webpack_require__(/*! @phosphor/properties */ "../node_modules/@phosphor/properties/lib/index.js");
const tab_bars_1 = __webpack_require__(/*! ./tab-bars */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/shell/tab-bars.js");
const sidebar_menu_widget_1 = __webpack_require__(/*! ./sidebar-menu-widget */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/shell/sidebar-menu-widget.js");
const split_panels_1 = __webpack_require__(/*! ./split-panels */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/shell/split-panels.js");
const browser_1 = __webpack_require__(/*! ../browser */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/browser.js");
const frontend_application_state_1 = __webpack_require__(/*! ../frontend-application-state */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/frontend-application-state.js");
const theia_dock_panel_1 = __webpack_require__(/*! ./theia-dock-panel */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/shell/theia-dock-panel.js");
const side_panel_toolbar_1 = __webpack_require__(/*! ./side-panel-toolbar */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/shell/side-panel-toolbar.js");
const tab_bar_toolbar_1 = __webpack_require__(/*! ./tab-bar-toolbar */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/shell/tab-bar-toolbar/index.js");
const disposable_1 = __webpack_require__(/*! ../../common/disposable */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/disposable.js");
const context_menu_renderer_1 = __webpack_require__(/*! ../context-menu-renderer */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/context-menu-renderer.js");
const widgets_2 = __webpack_require__(/*! ../widgets */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/widgets/index.js");
const additional_views_menu_widget_1 = __webpack_require__(/*! ./additional-views-menu-widget */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/shell/additional-views-menu-widget.js");
/** The class name added to the left and right area panels. */
exports.LEFT_RIGHT_AREA_CLASS = 'theia-app-sides';
/** The class name added to collapsed side panels. */
const COLLAPSED_CLASS = 'theia-mod-collapsed';
exports.SidePanelHandlerFactory = Symbol('SidePanelHandlerFactory');
exports.SIDE_PANEL_TOOLBAR_CONTEXT_MENU = ['SIDE_PANEL_TOOLBAR_CONTEXT_MENU'];
/**
 * A class which manages a dock panel and a related side bar. This is used for the left and right
 * panel of the application shell.
 */
let SidePanelHandler = SidePanelHandler_1 = class SidePanelHandler {
    constructor() {
        /**
         * The current state of the side panel.
         */
        this.state = {
            empty: true,
            expansion: SidePanel.ExpansionState.collapsed,
            pendingUpdate: Promise.resolve()
        };
        // should be a property to preserve fn identity
        this.updateToolbarTitle = () => {
            const currentTitle = this.tabBar && this.tabBar.currentTitle;
            this.toolBar.toolbarTitle = currentTitle || undefined;
        };
        this.toDisposeOnCurrentTabChanged = new disposable_1.DisposableCollection();
    }
    /**
     * Create the side bar and dock panel widgets.
     */
    create(side, options) {
        this.side = side;
        this.options = options;
        this.topMenu = this.createSidebarTopMenu();
        this.tabBar = this.createSideBar();
        this.additionalViewsMenu = this.createAdditionalViewsWidget();
        this.bottomMenu = this.createSidebarBottomMenu();
        this.toolBar = this.createToolbar();
        this.dockPanel = this.createSidePanel();
        this.container = this.createContainer();
        this.refresh();
    }
    createSideBar() {
        const side = this.side;
        const tabBarRenderer = this.tabBarRendererFactory();
        const sideBar = new tab_bars_1.SideTabBar({
            // Tab bar options
            orientation: side === 'left' || side === 'right' ? 'vertical' : 'horizontal',
            insertBehavior: 'none',
            removeBehavior: 'select-previous-tab',
            allowDeselect: false,
            tabsMovable: true,
            renderer: tabBarRenderer,
            // Scroll bar options
            handlers: ['drag-thumb', 'keyboard', 'wheel', 'touch'],
            useBothWheelAxes: true,
            scrollYMarginOffset: 8,
            suppressScrollX: true
        });
        tabBarRenderer.tabBar = sideBar;
        sideBar.disposed.connect(() => tabBarRenderer.dispose());
        tabBarRenderer.contextMenuPath = tab_bars_1.SHELL_TABBAR_CONTEXT_MENU;
        sideBar.addClass('theia-app-' + side);
        sideBar.addClass(exports.LEFT_RIGHT_AREA_CLASS);
        sideBar.tabAdded.connect((sender, { title }) => {
            const widget = title.owner;
            if (!(0, algorithm_1.some)(this.dockPanel.widgets(), w => w === widget)) {
                this.dockPanel.addWidget(widget);
            }
        }, this);
        sideBar.tabActivateRequested.connect((sender, { title }) => title.owner.activate());
        sideBar.tabCloseRequested.connect((sender, { title }) => title.owner.close());
        sideBar.collapseRequested.connect(() => this.collapse(), this);
        sideBar.currentChanged.connect(this.onCurrentTabChanged, this);
        sideBar.tabDetachRequested.connect(this.onTabDetachRequested, this);
        sideBar.tabsOverflowChanged.connect(this.onTabsOverflowChanged, this);
        return sideBar;
    }
    createSidePanel() {
        const sidePanel = this.dockPanelFactory({
            mode: 'single-document'
        });
        sidePanel.id = 'theia-' + this.side + '-side-panel';
        sidePanel.addClass('theia-side-panel');
        sidePanel.widgetActivated.connect((sender, widget) => {
            this.tabBar.currentTitle = widget.title;
        }, this);
        sidePanel.widgetAdded.connect(this.onWidgetAdded, this);
        sidePanel.widgetRemoved.connect(this.onWidgetRemoved, this);
        return sidePanel;
    }
    createToolbar() {
        const toolbar = new side_panel_toolbar_1.SidePanelToolbar(this.tabBarToolBarRegistry, this.tabBarToolBarFactory, this.side);
        toolbar.onContextMenu(e => this.showContextMenu(e));
        return toolbar;
    }
    createAdditionalViewsWidget() {
        const widget = this.additionalViewsMenuFactory(this.side);
        widget.addClass('theia-sidebar-menu');
        return widget;
    }
    createSidebarTopMenu() {
        return this.createSidebarMenu(this.sidebarTopWidgetFactory);
    }
    createSidebarBottomMenu() {
        return this.createSidebarMenu(this.sidebarBottomWidgetFactory);
    }
    createSidebarMenu(factory) {
        const menu = factory();
        menu.addClass('theia-sidebar-menu');
        return menu;
    }
    showContextMenu(e) {
        const title = this.tabBar.currentTitle;
        if (!title) {
            return;
        }
        e.stopPropagation();
        e.preventDefault();
        this.contextMenuRenderer.render({
            args: [title.owner],
            menuPath: exports.SIDE_PANEL_TOOLBAR_CONTEXT_MENU,
            anchor: e
        });
    }
    createContainer() {
        const contentBox = new widgets_1.BoxLayout({ direction: 'top-to-bottom', spacing: 0 });
        widgets_1.BoxPanel.setStretch(this.toolBar, 0);
        contentBox.addWidget(this.toolBar);
        widgets_1.BoxPanel.setStretch(this.dockPanel, 1);
        contentBox.addWidget(this.dockPanel);
        const contentPanel = new widgets_1.BoxPanel({ layout: contentBox });
        const side = this.side;
        let direction;
        switch (side) {
            case 'left':
                direction = 'left-to-right';
                break;
            case 'right':
                direction = 'right-to-left';
                break;
            default:
                throw new Error('Illegal argument: ' + side);
        }
        const containerLayout = new widgets_1.BoxLayout({ direction, spacing: 0 });
        const sidebarContainerLayout = new widgets_1.PanelLayout();
        const sidebarContainer = new widgets_1.Panel({ layout: sidebarContainerLayout });
        sidebarContainer.addClass('theia-app-sidebar-container');
        sidebarContainerLayout.addWidget(this.topMenu);
        sidebarContainerLayout.addWidget(this.tabBar);
        sidebarContainerLayout.addWidget(this.additionalViewsMenu);
        sidebarContainerLayout.addWidget(this.bottomMenu);
        widgets_1.BoxPanel.setStretch(sidebarContainer, 0);
        widgets_1.BoxPanel.setStretch(contentPanel, 1);
        containerLayout.addWidget(sidebarContainer);
        containerLayout.addWidget(contentPanel);
        const boxPanel = new widgets_1.BoxPanel({ layout: containerLayout });
        boxPanel.id = 'theia-' + side + '-content-panel';
        return boxPanel;
    }
    /**
     * Create an object that describes the current side panel layout. This object may contain references
     * to widgets; these need to be transformed before the layout can be serialized.
     */
    getLayoutData() {
        const currentTitle = this.tabBar.currentTitle;
        const items = (0, algorithm_1.toArray)((0, algorithm_1.map)(this.tabBar.titles, title => ({
            widget: title.owner,
            rank: SidePanelHandler_1.rankProperty.get(title.owner),
            expanded: title === currentTitle,
            pinned: title.className.includes(widgets_2.PINNED_CLASS)
        })));
        // eslint-disable-next-line no-null/no-null
        const size = currentTitle !== null ? this.getPanelSize() : this.state.lastPanelSize;
        return { type: 'sidepanel', items, size };
    }
    /**
     * Apply a side panel layout that has been previously created with `getLayoutData`.
     */
    setLayoutData(layoutData) {
        // eslint-disable-next-line no-null/no-null
        this.tabBar.currentTitle = null;
        let currentTitle;
        if (layoutData.items) {
            for (const { widget, rank, expanded, pinned } of layoutData.items) {
                if (widget) {
                    if (rank) {
                        SidePanelHandler_1.rankProperty.set(widget, rank);
                    }
                    if (expanded) {
                        currentTitle = widget.title;
                    }
                    if (pinned) {
                        widget.title.className += ` ${widgets_2.PINNED_CLASS}`;
                        widget.title.closable = false;
                    }
                    // Add the widgets directly to the tab bar in the same order as they are stored
                    this.tabBar.addTab(widget.title);
                }
            }
        }
        if (layoutData.size) {
            this.state.lastPanelSize = layoutData.size;
        }
        // If the layout data contains an expanded item, update the currentTitle property
        // This implies a refresh through the `currentChanged` signal
        if (currentTitle) {
            this.tabBar.currentTitle = currentTitle;
        }
        else {
            this.refresh();
        }
    }
    /**
     * Activate a widget residing in the side panel by ID.
     *
     * @returns the activated widget if it was found
     */
    activate(id) {
        const widget = this.expand(id);
        if (widget) {
            widget.activate();
        }
        return widget;
    }
    /**
     * Expand a widget residing in the side panel by ID. If no ID is given and the panel is
     * currently collapsed, the last active tab of this side panel is expanded. If no tab
     * was expanded previously, the first one is taken.
     *
     * @returns the expanded widget if it was found
     */
    expand(id) {
        if (id) {
            const widget = (0, algorithm_1.find)(this.dockPanel.widgets(), w => w.id === id);
            if (widget) {
                this.tabBar.currentTitle = widget.title;
            }
            return widget;
        }
        else if (this.tabBar.currentTitle) {
            return this.tabBar.currentTitle.owner;
        }
        else if (this.tabBar.titles.length > 0) {
            let index = this.state.lastActiveTabIndex;
            if (!index) {
                index = 0;
            }
            else if (index >= this.tabBar.titles.length) {
                index = this.tabBar.titles.length - 1;
            }
            const title = this.tabBar.titles[index];
            this.tabBar.currentTitle = title;
            return title.owner;
        }
        else {
            // Reveal the tab bar and dock panel even if there is no widget
            // The next call to `refreshVisibility` will collapse them again
            this.state.expansion = SidePanel.ExpansionState.expanding;
            let relativeSizes;
            const parent = this.container.parent;
            if (parent instanceof widgets_1.SplitPanel) {
                relativeSizes = parent.relativeSizes();
            }
            this.container.removeClass(COLLAPSED_CLASS);
            this.container.show();
            this.tabBar.show();
            this.dockPanel.node.style.minWidth = '0';
            this.dockPanel.show();
            if (relativeSizes && parent instanceof widgets_1.SplitPanel) {
                // Make sure that the expansion animation starts at zero size
                parent.setRelativeSizes(relativeSizes);
            }
            this.setPanelSize(this.options.emptySize).then(() => {
                if (this.state.expansion === SidePanel.ExpansionState.expanding) {
                    this.state.expansion = SidePanel.ExpansionState.expanded;
                }
            });
        }
    }
    /**
     * Collapse the sidebar so no items are expanded.
     */
    collapse() {
        if (this.tabBar.currentTitle) {
            // eslint-disable-next-line no-null/no-null
            this.tabBar.currentTitle = null;
        }
        else {
            this.refresh();
        }
        return (0, browser_1.animationFrame)();
    }
    /**
     * Add a widget and its title to the dock panel and side bar.
     *
     * If the widget is already added, it will be moved.
     */
    addWidget(widget, options) {
        if (options.rank) {
            SidePanelHandler_1.rankProperty.set(widget, options.rank);
        }
        this.dockPanel.addWidget(widget);
    }
    /**
     * Add a menu to the sidebar top.
     *
     * If the menu is already added, it will be ignored.
     */
    addTopMenu(menu) {
        this.topMenu.addMenu(menu);
    }
    /**
     * Remove a menu from the sidebar top.
     *
     * @param menuId id of the menu to remove
     */
    removeTopMenu(menuId) {
        this.topMenu.removeMenu(menuId);
    }
    /**
     * Add a menu to the sidebar bottom.
     *
     * If the menu is already added, it will be ignored.
     */
    addBottomMenu(menu) {
        this.bottomMenu.addMenu(menu);
    }
    /**
     * Remove a menu from the sidebar bottom.
     *
     * @param menuId id of the menu to remove
     */
    removeBottomMenu(menuId) {
        this.bottomMenu.removeMenu(menuId);
    }
    /**
     * Refresh the visibility of the side bar and dock panel.
     */
    refresh() {
        const container = this.container;
        const parent = container.parent;
        const tabBar = this.tabBar;
        const dockPanel = this.dockPanel;
        const isEmpty = tabBar.titles.length === 0;
        const currentTitle = tabBar.currentTitle;
        // eslint-disable-next-line no-null/no-null
        const hideDockPanel = currentTitle === null;
        this.updateSashState(this.container, hideDockPanel);
        let relativeSizes;
        if (hideDockPanel) {
            container.addClass(COLLAPSED_CLASS);
            if (this.state.expansion === SidePanel.ExpansionState.expanded && !this.state.empty) {
                // Update the lastPanelSize property
                const size = this.getPanelSize();
                if (size) {
                    this.state.lastPanelSize = size;
                }
            }
            this.state.expansion = SidePanel.ExpansionState.collapsed;
        }
        else {
            container.removeClass(COLLAPSED_CLASS);
            let size;
            if (this.state.expansion !== SidePanel.ExpansionState.expanded) {
                if (this.state.lastPanelSize) {
                    size = this.state.lastPanelSize;
                }
                else {
                    size = this.getDefaultPanelSize();
                }
            }
            if (size) {
                // Restore the panel size to the last known size or the default size
                this.state.expansion = SidePanel.ExpansionState.expanding;
                if (parent instanceof widgets_1.SplitPanel) {
                    relativeSizes = parent.relativeSizes();
                }
                this.setPanelSize(size).then(() => {
                    if (this.state.expansion === SidePanel.ExpansionState.expanding) {
                        this.state.expansion = SidePanel.ExpansionState.expanded;
                    }
                });
            }
            else {
                this.state.expansion = SidePanel.ExpansionState.expanded;
            }
        }
        container.setHidden(isEmpty && hideDockPanel);
        tabBar.setHidden(isEmpty);
        dockPanel.setHidden(hideDockPanel);
        this.state.empty = isEmpty;
        if (currentTitle) {
            dockPanel.selectWidget(currentTitle.owner);
        }
        if (relativeSizes && parent instanceof widgets_1.SplitPanel) {
            // Make sure that the expansion animation starts at the smallest possible size
            parent.setRelativeSizes(relativeSizes);
        }
    }
    /**
     * Sets the size of the side panel.
     *
     * @param size the desired size (width) of the panel in pixels.
     */
    resize(size) {
        if (this.dockPanel.isHidden) {
            this.state.lastPanelSize = size;
        }
        else {
            this.setPanelSize(size);
        }
    }
    /**
     * Compute the current width of the panel. This implementation assumes that the parent of
     * the panel container is a `SplitPanel`.
     */
    getPanelSize() {
        const parent = this.container.parent;
        if (parent instanceof widgets_1.SplitPanel && parent.isVisible) {
            const index = parent.widgets.indexOf(this.container);
            if (this.side === 'left') {
                const handle = parent.handles[index];
                if (!handle.classList.contains('p-mod-hidden')) {
                    return handle.offsetLeft;
                }
            }
            else if (this.side === 'right') {
                const handle = parent.handles[index - 1];
                if (!handle.classList.contains('p-mod-hidden')) {
                    const parentWidth = parent.node.clientWidth;
                    return parentWidth - handle.offsetLeft;
                }
            }
        }
    }
    /**
     * Determine the default size to apply when the panel is expanded for the first time.
     */
    getDefaultPanelSize() {
        const parent = this.container.parent;
        if (parent && parent.isVisible) {
            return parent.node.clientWidth * this.options.initialSizeRatio;
        }
    }
    /**
     * Modify the width of the panel. This implementation assumes that the parent of the panel
     * container is a `SplitPanel`.
     */
    setPanelSize(size) {
        const enableAnimation = this.applicationStateService.state === 'ready';
        const options = {
            side: this.side,
            duration: enableAnimation ? this.options.expandDuration : 0,
            referenceWidget: this.dockPanel
        };
        const promise = this.splitPositionHandler.setSidePanelSize(this.container, size, options);
        const result = new Promise(resolve => {
            // Resolve the resulting promise in any case, regardless of whether resizing was successful
            promise.then(() => resolve(), () => resolve());
        });
        this.state.pendingUpdate = this.state.pendingUpdate.then(() => result);
        return result;
    }
    /**
     * Handle a `currentChanged` signal from the sidebar. The side panel is refreshed so it displays
     * the new selected widget.
     */
    onCurrentTabChanged(sender, { currentTitle, currentIndex }) {
        this.toDisposeOnCurrentTabChanged.dispose();
        if (currentTitle) {
            this.updateToolbarTitle();
            currentTitle.changed.connect(this.updateToolbarTitle);
            this.toDisposeOnCurrentTabChanged.push(disposable_1.Disposable.create(() => currentTitle.changed.disconnect(this.updateToolbarTitle)));
        }
        if (currentIndex >= 0) {
            this.state.lastActiveTabIndex = currentIndex;
            sender.revealTab(currentIndex);
        }
        this.refresh();
    }
    /**
     * Handle a `tabDetachRequested` signal from the sidebar. A drag is started so the widget can be
     * moved to another application shell area.
     */
    onTabDetachRequested(sender, { title, tab, clientX, clientY }) {
        // Release the tab bar's hold on the mouse
        sender.releaseMouse();
        // Clone the selected tab and use that as drag image
        const clonedTab = tab.cloneNode(true);
        clonedTab.style.width = '';
        clonedTab.style.height = '';
        const label = clonedTab.getElementsByClassName('p-TabBar-tabLabel')[0];
        label.style.width = '';
        label.style.height = '';
        // Create and start a drag to move the selected tab to another panel
        const mimeData = new coreutils_1.MimeData();
        mimeData.setData('application/vnd.phosphor.widget-factory', () => title.owner);
        const drag = new dragdrop_1.Drag({
            mimeData,
            dragImage: clonedTab,
            proposedAction: 'move',
            supportedActions: 'move',
        });
        tab.classList.add('p-mod-hidden');
        drag.start(clientX, clientY).then(() => {
            // The promise is resolved when the drag has ended
            tab.classList.remove('p-mod-hidden');
        });
    }
    onTabsOverflowChanged(sender, event) {
        if (event.startIndex >= 0 && event.startIndex <= sender.currentIndex) {
            sender.revealTab(sender.currentIndex);
        }
        else {
            this.additionalViewsMenu.updateAdditionalViews(sender, event);
        }
    }
    /*
     * Handle the `widgetAdded` signal from the dock panel. The widget's title is inserted into the
     * tab bar according to the `rankProperty` value that may be attached to the widget.
     */
    onWidgetAdded(sender, widget) {
        const titles = this.tabBar.titles;
        if (!(0, algorithm_1.find)(titles, t => t.owner === widget)) {
            const rank = SidePanelHandler_1.rankProperty.get(widget);
            let index = titles.length;
            if (rank !== undefined) {
                for (let i = index - 1; i >= 0; i--) {
                    const r = SidePanelHandler_1.rankProperty.get(titles[i].owner);
                    if (r !== undefined && r > rank) {
                        index = i;
                    }
                }
            }
            this.tabBar.insertTab(index, widget.title);
            this.refresh();
        }
    }
    /*
     * Handle the `widgetRemoved` signal from the dock panel. The widget's title is also removed
     * from the tab bar.
     */
    onWidgetRemoved(sender, widget) {
        this.tabBar.removeTab(widget.title);
        this.refresh();
    }
    updateSashState(sidePanelElement, sidePanelCollapsed) {
        if (sidePanelElement) {
            // Hide the sash when the left/right side panel is collapsed
            if (sidePanelElement.id === 'theia-left-content-panel' && sidePanelElement.node.nextElementSibling) {
                sidePanelElement.node.nextElementSibling.classList.toggle('sash-hidden', sidePanelCollapsed);
            }
            else if (sidePanelElement.id === 'theia-right-content-panel' && sidePanelElement.node.previousElementSibling) {
                sidePanelElement.node.previousElementSibling.classList.toggle('sash-hidden', sidePanelCollapsed);
            }
        }
    }
};
/**
 * A property that can be attached to widgets in order to determine the insertion index
 * of their title in the tab bar.
 */
SidePanelHandler.rankProperty = new properties_1.AttachedProperty({
    name: 'sidePanelRank',
    create: () => undefined
});
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(tab_bar_toolbar_1.TabBarToolbarRegistry),
    (0, tslib_1.__metadata)("design:type", tab_bar_toolbar_1.TabBarToolbarRegistry)
], SidePanelHandler.prototype, "tabBarToolBarRegistry", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(tab_bar_toolbar_1.TabBarToolbarFactory),
    (0, tslib_1.__metadata)("design:type", Function)
], SidePanelHandler.prototype, "tabBarToolBarFactory", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(tab_bars_1.TabBarRendererFactory),
    (0, tslib_1.__metadata)("design:type", Function)
], SidePanelHandler.prototype, "tabBarRendererFactory", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(sidebar_menu_widget_1.SidebarTopMenuWidgetFactory),
    (0, tslib_1.__metadata)("design:type", Function)
], SidePanelHandler.prototype, "sidebarTopWidgetFactory", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(sidebar_menu_widget_1.SidebarBottomMenuWidgetFactory),
    (0, tslib_1.__metadata)("design:type", Function)
], SidePanelHandler.prototype, "sidebarBottomWidgetFactory", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(additional_views_menu_widget_1.AdditionalViewsMenuWidgetFactory),
    (0, tslib_1.__metadata)("design:type", Function)
], SidePanelHandler.prototype, "additionalViewsMenuFactory", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(split_panels_1.SplitPositionHandler),
    (0, tslib_1.__metadata)("design:type", split_panels_1.SplitPositionHandler)
], SidePanelHandler.prototype, "splitPositionHandler", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(frontend_application_state_1.FrontendApplicationStateService),
    (0, tslib_1.__metadata)("design:type", frontend_application_state_1.FrontendApplicationStateService)
], SidePanelHandler.prototype, "applicationStateService", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(theia_dock_panel_1.TheiaDockPanel.Factory),
    (0, tslib_1.__metadata)("design:type", Function)
], SidePanelHandler.prototype, "dockPanelFactory", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(context_menu_renderer_1.ContextMenuRenderer),
    (0, tslib_1.__metadata)("design:type", context_menu_renderer_1.ContextMenuRenderer)
], SidePanelHandler.prototype, "contextMenuRenderer", void 0);
SidePanelHandler = SidePanelHandler_1 = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)()
], SidePanelHandler);
exports.SidePanelHandler = SidePanelHandler;
var SidePanel;
(function (SidePanel) {
    let ExpansionState;
    (function (ExpansionState) {
        ExpansionState["collapsed"] = "collapsed";
        ExpansionState["expanding"] = "expanding";
        ExpansionState["expanded"] = "expanded";
        ExpansionState["collapsing"] = "collapsing";
    })(ExpansionState = SidePanel.ExpansionState || (SidePanel.ExpansionState = {}));
})(SidePanel = exports.SidePanel || (exports.SidePanel = {}));


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/shell/side-panel-toolbar.js":
/*!******************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/shell/side-panel-toolbar.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2019 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SidePanelToolbar = void 0;
const widgets_1 = __webpack_require__(/*! @phosphor/widgets */ "../node_modules/@phosphor/widgets/lib/index.js");
const widgets_2 = __webpack_require__(/*! ../widgets */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/widgets/index.js");
const event_1 = __webpack_require__(/*! ../../common/event */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/event.js");
class SidePanelToolbar extends widgets_2.BaseWidget {
    constructor(tabBarToolbarRegistry, tabBarToolbarFactory, side) {
        super();
        this.tabBarToolbarRegistry = tabBarToolbarRegistry;
        this.tabBarToolbarFactory = tabBarToolbarFactory;
        this.side = side;
        this.onContextMenuEmitter = new event_1.Emitter();
        this.onContextMenu = this.onContextMenuEmitter.event;
        this.toDispose.push(this.onContextMenuEmitter);
        this.init();
        this.tabBarToolbarRegistry.onDidChange(() => this.update());
    }
    onBeforeAttach(msg) {
        super.onBeforeAttach(msg);
        if (this.titleContainer) {
            this.addEventListener(this.titleContainer, 'contextmenu', e => this.onContextMenuEmitter.fire(e));
        }
    }
    onAfterAttach(msg) {
        if (this.toolbar) {
            if (this.toolbar.isAttached) {
                widgets_1.Widget.detach(this.toolbar);
            }
            widgets_1.Widget.attach(this.toolbar, this.node);
        }
        super.onAfterAttach(msg);
    }
    onBeforeDetach(msg) {
        if (this.titleContainer) {
            this.node.removeChild(this.titleContainer);
        }
        if (this.toolbar && this.toolbar.isAttached) {
            widgets_1.Widget.detach(this.toolbar);
        }
        super.onBeforeDetach(msg);
    }
    onUpdateRequest(msg) {
        super.onUpdateRequest(msg);
        this.updateToolbar();
    }
    updateToolbar() {
        var _a, _b;
        if (!this.toolbar) {
            return;
        }
        const widget = (_b = (_a = this._toolbarTitle) === null || _a === void 0 ? void 0 : _a.owner) !== null && _b !== void 0 ? _b : undefined;
        this.toolbar.updateTarget(widget);
    }
    init() {
        this.titleContainer = document.createElement('div');
        this.titleContainer.classList.add('theia-sidepanel-title');
        this.titleContainer.classList.add('noWrapInfo');
        this.titleContainer.classList.add('noselect');
        this.node.appendChild(this.titleContainer);
        this.node.classList.add('theia-sidepanel-toolbar');
        this.node.classList.add(`theia-${this.side}-side-panel`);
        this.toolbar = this.tabBarToolbarFactory();
        this.update();
    }
    set toolbarTitle(title) {
        if (this.titleContainer && title) {
            this._toolbarTitle = title;
            this.titleContainer.innerText = this._toolbarTitle.label;
            this.titleContainer.title = this._toolbarTitle.caption || this._toolbarTitle.label;
            this.update();
        }
    }
    showMoreContextMenu(anchor) {
        if (this.toolbar) {
            return this.toolbar.renderMoreContextMenu(anchor);
        }
        throw new Error(this.id + ' widget is not attached');
    }
}
exports.SidePanelToolbar = SidePanelToolbar;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/shell/sidebar-menu-widget.js":
/*!*******************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/shell/sidebar-menu-widget.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2020 Alibaba Inc. and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SidebarMenuWidget = exports.SidebarBottomMenuWidgetFactory = exports.SidebarTopMenuWidgetFactory = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/es/inversify.js");
const React = __webpack_require__(/*! react */ "../node_modules/react/index.js");
const widgets_1 = __webpack_require__(/*! ../widgets */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/widgets/index.js");
const context_menu_renderer_1 = __webpack_require__(/*! ../context-menu-renderer */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/context-menu-renderer.js");
const hover_service_1 = __webpack_require__(/*! ../hover-service */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/hover-service.js");
exports.SidebarTopMenuWidgetFactory = Symbol('SidebarTopMenuWidgetFactory');
exports.SidebarBottomMenuWidgetFactory = Symbol('SidebarBottomMenuWidgetFactory');
/**
 * The menu widget placed on the sidebar.
 */
let SidebarMenuWidget = class SidebarMenuWidget extends widgets_1.ReactWidget {
    constructor() {
        super();
        /**
         * Flag indicating whether a context menu is open. While a context menu is open, the `preservedContext` should not be cleared.
         */
        this.preservingContext = false;
        this.onMouseDown = () => {
            const { activeElement } = document;
            if (activeElement instanceof HTMLElement && !this.node.contains(activeElement)) {
                this.preservedContext = activeElement;
            }
        };
        this.onMouseOut = () => {
            if (!this.preservingContext) {
                this.preservedContext = undefined;
            }
        };
        this.onMouseEnter = (event, title) => {
            if (title && event.nativeEvent.currentTarget) {
                this.hoverService.requestHover({
                    content: title,
                    target: event.currentTarget,
                    position: 'right'
                });
            }
        };
        this.menus = [];
    }
    addMenu(menu) {
        const exists = this.menus.find(m => m.id === menu.id);
        if (exists) {
            return;
        }
        this.menus.push(menu);
        this.menus.sort((a, b) => a.order - b.order);
        this.update();
    }
    removeMenu(menuId) {
        const menu = this.menus.find(m => m.id === menuId);
        if (menu) {
            const index = this.menus.indexOf(menu);
            if (index !== -1) {
                this.menus.splice(index, 1);
                this.update();
            }
        }
    }
    onClick(e, menuPath) {
        this.preservingContext = true;
        const button = e.currentTarget.getBoundingClientRect();
        this.contextMenuRenderer.render({
            menuPath,
            includeAnchorArg: false,
            anchor: {
                x: button.left + button.width,
                y: button.top,
            },
            onHide: () => {
                this.preservingContext = false;
                if (this.preservedContext) {
                    this.preservedContext.focus({ preventScroll: true });
                    this.preservedContext = undefined;
                }
            }
        });
    }
    render() {
        return React.createElement(React.Fragment, null, this.menus.map(menu => React.createElement("i", { key: menu.id, className: menu.iconClass, onClick: e => this.onClick(e, menu.menuPath), onMouseDown: this.onMouseDown, onMouseEnter: e => this.onMouseEnter(e, menu.title), onMouseLeave: this.onMouseOut })));
    }
};
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(context_menu_renderer_1.ContextMenuRenderer),
    (0, tslib_1.__metadata)("design:type", context_menu_renderer_1.ContextMenuRenderer)
], SidebarMenuWidget.prototype, "contextMenuRenderer", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(hover_service_1.HoverService),
    (0, tslib_1.__metadata)("design:type", hover_service_1.HoverService)
], SidebarMenuWidget.prototype, "hoverService", void 0);
SidebarMenuWidget = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)(),
    (0, tslib_1.__metadata)("design:paramtypes", [])
], SidebarMenuWidget);
exports.SidebarMenuWidget = SidebarMenuWidget;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/shell/split-panels.js":
/*!************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/shell/split-panels.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SplitPositionHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/es/inversify.js");
const widgets_1 = __webpack_require__(/*! @phosphor/widgets */ "../node_modules/@phosphor/widgets/lib/index.js");
let SplitPositionHandler = class SplitPositionHandler {
    constructor() {
        this.splitMoves = [];
        this.currentMoveIndex = 0;
    }
    /**
     * Set the position of a split handle asynchronously. This function makes sure that such movements
     * are performed one after another in order to prevent the movements from overriding each other.
     * When resolved, the returned promise yields the final position of the split handle.
     */
    setSplitHandlePosition(parent, index, targetPosition, options) {
        const move = {
            ...options,
            parent, targetPosition, index,
            started: false,
            ended: false
        };
        return this.moveSplitPos(move);
    }
    /**
     * Resize a side panel asynchronously. This function makes sure that such movements are performed
     * one after another in order to prevent the movements from overriding each other.
     * When resolved, the returned promise yields the final position of the split handle.
     */
    setSidePanelSize(sidePanel, targetSize, options) {
        if (targetSize < 0) {
            return Promise.reject(new Error('Cannot resize to negative value.'));
        }
        const parent = sidePanel.parent;
        if (!(parent instanceof widgets_1.SplitPanel)) {
            return Promise.reject(new Error('Widget must be contained in a SplitPanel.'));
        }
        let index = parent.widgets.indexOf(sidePanel);
        if (index > 0 && (options.side === 'right' || options.side === 'bottom')) {
            index--;
        }
        const move = {
            ...options,
            parent, targetSize, index,
            started: false,
            ended: false
        };
        return this.moveSplitPos(move);
    }
    moveSplitPos(move) {
        return new Promise((resolve, reject) => {
            move.resolve = resolve;
            move.reject = reject;
            if (this.splitMoves.length === 0) {
                window.requestAnimationFrame(this.animationFrame.bind(this));
            }
            this.splitMoves.push(move);
        });
    }
    animationFrame(time) {
        const move = this.splitMoves[this.currentMoveIndex];
        let rejectedOrResolved = false;
        if (move.ended || move.referenceWidget && move.referenceWidget.isHidden) {
            this.splitMoves.splice(this.currentMoveIndex, 1);
            if (move.startPosition === undefined || move.targetPosition === undefined) {
                move.reject('Panel is not visible.');
            }
            else {
                move.resolve(move.targetPosition);
            }
            rejectedOrResolved = true;
        }
        else if (!move.started) {
            this.startMove(move, time);
            if (move.duration <= 0 || move.startPosition === undefined || move.targetPosition === undefined
                || move.startPosition === move.targetPosition) {
                this.endMove(move);
            }
        }
        else {
            const elapsedTime = time - move.startTime;
            if (elapsedTime >= move.duration) {
                this.endMove(move);
            }
            else {
                const t = elapsedTime / move.duration;
                const start = move.startPosition || 0;
                const target = move.targetPosition || 0;
                const pos = start + (target - start) * t;
                move.parent.layout.moveHandle(move.index, pos);
            }
        }
        if (!rejectedOrResolved) {
            this.currentMoveIndex++;
        }
        if (this.currentMoveIndex >= this.splitMoves.length) {
            this.currentMoveIndex = 0;
        }
        if (this.splitMoves.length > 0) {
            window.requestAnimationFrame(this.animationFrame.bind(this));
        }
    }
    startMove(move, time) {
        if (move.targetPosition === undefined && move.targetSize !== undefined) {
            const { clientWidth, clientHeight } = move.parent.node;
            if (clientWidth && clientHeight) {
                switch (move.side) {
                    case 'left':
                        move.targetPosition = Math.max(Math.min(move.targetSize, clientWidth), 0);
                        break;
                    case 'right':
                        move.targetPosition = Math.max(Math.min(clientWidth - move.targetSize, clientWidth), 0);
                        break;
                    case 'top':
                        move.targetPosition = Math.max(Math.min(move.targetSize, clientHeight), 0);
                        break;
                    case 'bottom':
                        move.targetPosition = Math.max(Math.min(clientHeight - move.targetSize, clientHeight), 0);
                        break;
                }
            }
        }
        if (move.startPosition === undefined) {
            move.startPosition = this.getCurrentPosition(move);
        }
        move.startTime = time;
        move.started = true;
    }
    endMove(move) {
        if (move.targetPosition !== undefined) {
            move.parent.layout.moveHandle(move.index, move.targetPosition);
        }
        move.ended = true;
    }
    getCurrentPosition(move) {
        const layout = move.parent.layout;
        let pos;
        if (layout.orientation === 'horizontal') {
            pos = layout.handles[move.index].offsetLeft;
        }
        else {
            pos = layout.handles[move.index].offsetTop;
        }
        // eslint-disable-next-line no-null/no-null
        if (pos !== null) {
            return pos;
        }
        else {
            return undefined;
        }
    }
};
SplitPositionHandler = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)()
], SplitPositionHandler);
exports.SplitPositionHandler = SplitPositionHandler;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/shell/tab-bar-decorator.js":
/*!*****************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/shell/tab-bar-decorator.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2019 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TabBarDecoratorService = exports.TabBarDecorator = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
const debounce = __webpack_require__(/*! lodash.debounce */ "../node_modules/lodash.debounce/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/es/inversify.js");
const common_1 = __webpack_require__(/*! ../../common */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/index.js");
const color_registry_1 = __webpack_require__(/*! ../color-registry */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/color-registry.js");
const decorations_service_1 = __webpack_require__(/*! ../decorations-service */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/decorations-service.js");
const navigatable_types_1 = __webpack_require__(/*! ../navigatable-types */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/navigatable-types.js");
exports.TabBarDecorator = Symbol('TabBarDecorator');
let TabBarDecoratorService = class TabBarDecoratorService {
    constructor() {
        this.onDidChangeDecorationsEmitter = new common_1.Emitter();
        this.onDidChangeDecorations = this.onDidChangeDecorationsEmitter.event;
        this.fireDidChangeDecorations = debounce(() => this.onDidChangeDecorationsEmitter.fire(undefined), 150);
    }
    initialize() {
        this.contributions.getContributions().map(decorator => decorator.onDidChangeDecorations(this.fireDidChangeDecorations));
    }
    /**
     * Assign tabs the decorators provided by all the contributions.
     * @param {Title<Widget>} title the title
     * @returns an array of its decoration data.
     */
    getDecorations(title) {
        const decorators = this.contributions.getContributions();
        const decorations = [];
        for (const decorator of decorators) {
            decorations.push(...decorator.decorate(title));
        }
        if (navigatable_types_1.Navigatable.is(title.owner)) {
            const resourceUri = title.owner.getResourceUri();
            if (resourceUri) {
                const serviceDecorations = this.decorationsService.getDecoration(resourceUri, false);
                decorations.push(...serviceDecorations.map(d => this.fromDecoration(d)));
            }
        }
        return decorations;
    }
    fromDecoration(decoration) {
        const colorVariable = decoration.colorId && this.colors.toCssVariableName(decoration.colorId);
        return {
            tailDecorations: [
                {
                    data: decoration.letter ? decoration.letter : '',
                    fontData: {
                        color: colorVariable && `var(${colorVariable})`
                    },
                    tooltip: decoration.tooltip ? decoration.tooltip : ''
                }
            ]
        };
    }
};
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(common_1.ContributionProvider),
    (0, inversify_1.named)(exports.TabBarDecorator),
    (0, tslib_1.__metadata)("design:type", Object)
], TabBarDecoratorService.prototype, "contributions", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(decorations_service_1.DecorationsService),
    (0, tslib_1.__metadata)("design:type", decorations_service_1.DecorationsServiceImpl)
], TabBarDecoratorService.prototype, "decorationsService", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(color_registry_1.ColorRegistry),
    (0, tslib_1.__metadata)("design:type", color_registry_1.ColorRegistry)
], TabBarDecoratorService.prototype, "colors", void 0);
TabBarDecoratorService = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)()
], TabBarDecoratorService);
exports.TabBarDecoratorService = TabBarDecoratorService;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/shell/tab-bar-toolbar/index.js":
/*!*********************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/shell/tab-bar-toolbar/index.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2022 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./tab-bar-toolbar */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/shell/tab-bar-toolbar/tab-bar-toolbar.js"), exports);
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./tab-bar-toolbar-registry */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/shell/tab-bar-toolbar/tab-bar-toolbar-registry.js"), exports);
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./tab-bar-toolbar-types */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/shell/tab-bar-toolbar/tab-bar-toolbar-types.js"), exports);


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/shell/tab-bar-toolbar/tab-bar-toolbar-menu-adapters.js":
/*!*********************************************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/shell/tab-bar-toolbar/tab-bar-toolbar-menu-adapters.js ***!
  \*********************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2022 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ToolbarMenuNodeWrapper = exports.TOOLBAR_WRAPPER_ID_SUFFIX = void 0;
const tab_bar_toolbar_types_1 = __webpack_require__(/*! ./tab-bar-toolbar-types */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/shell/tab-bar-toolbar/tab-bar-toolbar-types.js");
exports.TOOLBAR_WRAPPER_ID_SUFFIX = '-as-tabbar-toolbar-item';
class ToolbarMenuNodeWrapper {
    constructor(menuNode, group, menuPath) {
        this.menuNode = menuNode;
        this.group = group;
        this.menuPath = menuPath;
    }
    get id() { return this.menuNode.id + exports.TOOLBAR_WRAPPER_ID_SUFFIX; }
    get command() { var _a; return (_a = this.menuNode.command) !== null && _a !== void 0 ? _a : ''; }
    ;
    get icon() { return this.menuNode.icon; }
    get tooltip() { return this.menuNode.label; }
    get when() { return this.menuNode.when; }
    get text() { return (this.group === tab_bar_toolbar_types_1.NAVIGATION || this.group === undefined) ? undefined : this.menuNode.label; }
}
exports.ToolbarMenuNodeWrapper = ToolbarMenuNodeWrapper;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/shell/tab-bar-toolbar/tab-bar-toolbar-registry.js":
/*!****************************************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/shell/tab-bar-toolbar/tab-bar-toolbar-registry.js ***!
  \****************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2022 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TabBarToolbarRegistry = exports.TabBarToolbarContribution = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
const debounce = __webpack_require__(/*! lodash.debounce */ "../node_modules/lodash.debounce/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/es/inversify.js");
// eslint-disable-next-line max-len
const common_1 = __webpack_require__(/*! ../../../common */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/index.js");
const context_key_service_1 = __webpack_require__(/*! ../../context-key-service */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/context-key-service.js");
const tab_bar_toolbar_types_1 = __webpack_require__(/*! ./tab-bar-toolbar-types */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/shell/tab-bar-toolbar/tab-bar-toolbar-types.js");
const tab_bar_toolbar_menu_adapters_1 = __webpack_require__(/*! ./tab-bar-toolbar-menu-adapters */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/shell/tab-bar-toolbar/tab-bar-toolbar-menu-adapters.js");
/**
 * Clients should implement this interface if they want to contribute to the tab-bar toolbar.
 */
exports.TabBarToolbarContribution = Symbol('TabBarToolbarContribution');
function yes() { return true; }
const menuDelegateSeparator = '=@=';
/**
 * Main, shared registry for tab-bar toolbar items.
 */
let TabBarToolbarRegistry = class TabBarToolbarRegistry {
    constructor() {
        this.items = new Map();
        this.menuDelegates = new Map();
        this.onDidChangeEmitter = new common_1.Emitter();
        this.onDidChange = this.onDidChangeEmitter.event;
        // debounce in order to avoid to fire more than once in the same tick
        this.fireOnDidChange = debounce(() => this.onDidChangeEmitter.fire(undefined), 0);
    }
    onStart() {
        const contributions = this.contributionProvider.getContributions();
        for (const contribution of contributions) {
            contribution.registerToolbarItems(this);
        }
    }
    /**
     * Registers the given item. Throws an error, if the corresponding command cannot be found or an item has been already registered for the desired command.
     *
     * @param item the item to register.
     */
    registerItem(item) {
        const { id } = item;
        if (this.items.has(id)) {
            throw new Error(`A toolbar item is already registered with the '${id}' ID.`);
        }
        this.items.set(id, item);
        this.fireOnDidChange();
        const toDispose = new common_1.DisposableCollection(common_1.Disposable.create(() => this.fireOnDidChange()), common_1.Disposable.create(() => this.items.delete(id)));
        if (item.onDidChange) {
            toDispose.push(item.onDidChange(() => this.fireOnDidChange()));
        }
        return toDispose;
    }
    /**
     * Returns an array of tab-bar toolbar items which are visible when the `widget` argument is the current one.
     *
     * By default returns with all items where the command is enabled and `item.isVisible` is `true`.
     */
    visibleItems(widget) {
        if (widget.isDisposed) {
            return [];
        }
        const result = [];
        for (const item of this.items.values()) {
            if (this.isItemVisible(item, widget)) {
                result.push(item);
            }
        }
        for (const delegate of this.menuDelegates.values()) {
            if (delegate.isVisible(widget)) {
                const menu = this.menuRegistry.getMenu(delegate.menuPath);
                const children = common_1.CompoundMenuNode.getFlatChildren(menu.children);
                for (const child of children) {
                    if (!child.when || this.contextKeyService.match(child.when, widget.node)) {
                        if (child.children) {
                            for (const grandchild of child.children) {
                                if (!grandchild.when || this.contextKeyService.match(grandchild.when, widget.node)) {
                                    if (common_1.CommandMenuNode.is(grandchild)) {
                                        result.push(new tab_bar_toolbar_menu_adapters_1.ToolbarMenuNodeWrapper(grandchild, child.id, delegate.menuPath));
                                    }
                                    else if (common_1.CompoundMenuNode.is(grandchild)) {
                                        let menuPath;
                                        if (menuPath = this.menuRegistry.getPath(grandchild)) {
                                            result.push(new tab_bar_toolbar_menu_adapters_1.ToolbarMenuNodeWrapper(grandchild, child.id, menuPath));
                                        }
                                    }
                                }
                            }
                        }
                        else if (child.command) {
                            result.push(new tab_bar_toolbar_menu_adapters_1.ToolbarMenuNodeWrapper(child, '', delegate.menuPath));
                        }
                    }
                }
            }
        }
        return result;
    }
    /**
     * Query whether a toolbar `item` should be shown in the toolbar.
     * This implementation delegates to item-specific checks according to their type.
     *
     * @param item a menu toolbar item
     * @param widget the widget that is updating the toolbar
     * @returns `false` if the `item` should be suppressed, otherwise `true`
     */
    isItemVisible(item, widget) {
        if (tab_bar_toolbar_types_1.TabBarToolbarItem.is(item) && item.command && !this.isTabBarToolbarItemVisible(item, widget)) {
            return false;
        }
        if (tab_bar_toolbar_types_1.MenuToolbarItem.is(item) && !this.isMenuToolbarItemVisible(item, widget)) {
            return false;
        }
        if (tab_bar_toolbar_types_1.AnyToolbarItem.isConditional(item) && !this.isConditionalItemVisible(item, widget)) {
            return false;
        }
        // The item is not vetoed. Accept it
        return true;
    }
    /**
     * Query whether a conditional toolbar `item` should be shown in the toolbar.
     * This implementation delegates to the `item`'s own intrinsic conditionality.
     *
     * @param item a menu toolbar item
     * @param widget the widget that is updating the toolbar
     * @returns `false` if the `item` should be suppressed, otherwise `true`
     */
    isConditionalItemVisible(item, widget) {
        if (item.isVisible && !item.isVisible(widget)) {
            return false;
        }
        if (item.when && !this.contextKeyService.match(item.when, widget.node)) {
            return false;
        }
        return true;
    }
    /**
     * Query whether a tab-bar toolbar `item` that has a command should be shown in the toolbar.
     * This implementation returns `false` if the `item`'s command is not visible in the
     * `widget` according to the command registry.
     *
     * @param item a tab-bar toolbar item that has a non-empty `command`
     * @param widget the widget that is updating the toolbar
     * @returns `false` if the `item` should be suppressed, otherwise `true`
     */
    isTabBarToolbarItemVisible(item, widget) {
        return this.commandRegistry.isVisible(item.command, widget);
    }
    /**
     * Query whether a menu toolbar `item` should be shown in the toolbar.
     * This implementation returns `false` if the `item` does not have any actual menu to show.
     *
     * @param item a menu toolbar item
     * @param widget the widget that is updating the toolbar
     * @returns `false` if the `item` should be suppressed, otherwise `true`
     */
    isMenuToolbarItemVisible(item, widget) {
        const menu = this.menuRegistry.getMenu(item.menuPath);
        const isVisible = node => {
            var _a, _b;
            return ((_a = node.children) === null || _a === void 0 ? void 0 : _a.length)
                // Either the node is a sub-menu that has some visible child ...
                ? (_b = node.children) === null || _b === void 0 ? void 0 : _b.some(isVisible)
                // ... or there is a command ...
                : !!node.command
                    // ... that is visible ...
                    && this.commandRegistry.isVisible(node.command, widget)
                    // ... and a "when" clause does not suppress the menu node.
                    && (!node.when || this.contextKeyService.match(node.when, widget === null || widget === void 0 ? void 0 : widget.node));
        };
        return isVisible(menu);
    }
    unregisterItem(itemOrId) {
        const id = typeof itemOrId === 'string' ? itemOrId : itemOrId.id;
        if (this.items.delete(id)) {
            this.fireOnDidChange();
        }
    }
    registerMenuDelegate(menuPath, when) {
        const id = this.toElementId(menuPath);
        if (!this.menuDelegates.has(id)) {
            const isVisible = !when
                ? yes
                : typeof when === 'function'
                    ? when
                    : widget => this.contextKeyService.match(when, widget === null || widget === void 0 ? void 0 : widget.node);
            this.menuDelegates.set(id, { menuPath, isVisible });
            this.fireOnDidChange();
            return { dispose: () => this.unregisterMenuDelegate(menuPath) };
        }
        console.warn('Unable to register menu delegate. Delegate has already been registered', menuPath);
        return common_1.Disposable.NULL;
    }
    unregisterMenuDelegate(menuPath) {
        if (this.menuDelegates.delete(this.toElementId(menuPath))) {
            this.fireOnDidChange();
        }
    }
    /**
     * Generate a single ID string from a menu path that
     * is likely to be unique amongst the items in the toolbar.
     *
     * @param menuPath a menubar path
     * @returns a likely unique ID based on the path
     */
    toElementId(menuPath) {
        return menuPath.join(menuDelegateSeparator);
    }
};
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(common_1.CommandRegistry),
    (0, tslib_1.__metadata)("design:type", common_1.CommandRegistry)
], TabBarToolbarRegistry.prototype, "commandRegistry", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(context_key_service_1.ContextKeyService),
    (0, tslib_1.__metadata)("design:type", Object)
], TabBarToolbarRegistry.prototype, "contextKeyService", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(common_1.MenuModelRegistry),
    (0, tslib_1.__metadata)("design:type", common_1.MenuModelRegistry)
], TabBarToolbarRegistry.prototype, "menuRegistry", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(common_1.ContributionProvider),
    (0, inversify_1.named)(exports.TabBarToolbarContribution),
    (0, tslib_1.__metadata)("design:type", Object)
], TabBarToolbarRegistry.prototype, "contributionProvider", void 0);
TabBarToolbarRegistry = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)()
], TabBarToolbarRegistry);
exports.TabBarToolbarRegistry = TabBarToolbarRegistry;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/shell/tab-bar-toolbar/tab-bar-toolbar-types.js":
/*!*************************************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/shell/tab-bar-toolbar/tab-bar-toolbar-types.js ***!
  \*************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2022 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AnyToolbarItem = exports.MenuToolbarItem = exports.TabBarToolbarItem = exports.TabBarDelegator = exports.TAB_BAR_TOOLBAR_CONTEXT_MENU = exports.NAVIGATION = void 0;
const common_1 = __webpack_require__(/*! ../../../common */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/index.js");
/** Items whose group is exactly 'navigation' will be rendered inline. */
exports.NAVIGATION = 'navigation';
exports.TAB_BAR_TOOLBAR_CONTEXT_MENU = ['TAB_BAR_TOOLBAR_CONTEXT_MENU'];
var TabBarDelegator;
(function (TabBarDelegator) {
    function is(candidate) {
        return (0, common_1.isObject)(candidate) && (0, common_1.isFunction)(candidate.getTabBarDelegate);
    }
    TabBarDelegator.is = is;
})(TabBarDelegator = exports.TabBarDelegator || (exports.TabBarDelegator = {}));
var TabBarToolbarItem;
(function (TabBarToolbarItem) {
    /**
     * Compares the items by `priority` in ascending. Undefined priorities will be treated as `0`.
     */
    TabBarToolbarItem.PRIORITY_COMPARATOR = (left, right) => {
        var _a, _b;
        const leftGroup = (_a = left.group) !== null && _a !== void 0 ? _a : exports.NAVIGATION;
        const rightGroup = (_b = right.group) !== null && _b !== void 0 ? _b : exports.NAVIGATION;
        if (leftGroup === exports.NAVIGATION && rightGroup !== exports.NAVIGATION) {
            return common_1.ArrayUtils.Sort.LeftBeforeRight;
        }
        if (rightGroup === exports.NAVIGATION && leftGroup !== exports.NAVIGATION) {
            return common_1.ArrayUtils.Sort.RightBeforeLeft;
        }
        if (leftGroup !== rightGroup) {
            return leftGroup.localeCompare(rightGroup);
        }
        return (left.priority || 0) - (right.priority || 0);
    };
    function is(arg) {
        return (0, common_1.isObject)(arg) && (0, common_1.isString)(arg.command);
    }
    TabBarToolbarItem.is = is;
})(TabBarToolbarItem = exports.TabBarToolbarItem || (exports.TabBarToolbarItem = {}));
var MenuToolbarItem;
(function (MenuToolbarItem) {
    /**
     * Type guard for a toolbar item that actually is a menu item, amongst
     * the other kinds of item that it may also be.
     *
     * @param item a toolbar item
     * @returns whether the `item` is a menu item
     */
    function is(item) {
        return Array.isArray(item.menuPath);
    }
    MenuToolbarItem.is = is;
    function getMenuPath(item) {
        return Array.isArray(item.menuPath) ? item.menuPath : undefined;
    }
    MenuToolbarItem.getMenuPath = getMenuPath;
})(MenuToolbarItem = exports.MenuToolbarItem || (exports.MenuToolbarItem = {}));
var AnyToolbarItem;
(function (AnyToolbarItem) {
    /**
     * Type guard for a toolbar item that actually manifests any of the
     * features of a conditional toolbar item.
     *
     * @param item a toolbar item
     * @returns whether the `item` is a conditional item
     */
    function isConditional(item) {
        return 'isVisible' in item && typeof item.isVisible === 'function'
            || 'onDidChange' in item && typeof item.onDidChange === 'function'
            || 'when' in item && typeof item.when === 'string';
    }
    AnyToolbarItem.isConditional = isConditional;
})(AnyToolbarItem = exports.AnyToolbarItem || (exports.AnyToolbarItem = {}));


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/shell/tab-bar-toolbar/tab-bar-toolbar.js":
/*!*******************************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/shell/tab-bar-toolbar/tab-bar-toolbar.js ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var TabBarToolbar_1;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TabBarToolbar = exports.TabBarToolbarFactory = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/es/inversify.js");
const React = __webpack_require__(/*! react */ "../node_modules/react/index.js");
const context_key_service_1 = __webpack_require__(/*! ../../context-key-service */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/context-key-service.js");
const common_1 = __webpack_require__(/*! ../../../common */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/index.js");
const context_menu_renderer_1 = __webpack_require__(/*! ../../context-menu-renderer */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/context-menu-renderer.js");
const label_parser_1 = __webpack_require__(/*! ../../label-parser */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/label-parser.js");
const widgets_1 = __webpack_require__(/*! ../../widgets */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/widgets/index.js");
const tab_bar_toolbar_registry_1 = __webpack_require__(/*! ./tab-bar-toolbar-registry */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/shell/tab-bar-toolbar/tab-bar-toolbar-registry.js");
const tab_bar_toolbar_types_1 = __webpack_require__(/*! ./tab-bar-toolbar-types */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/shell/tab-bar-toolbar/tab-bar-toolbar-types.js");
const keybinding_1 = __webpack_require__(/*! ../..//keybinding */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/keybinding.js");
/**
 * Factory for instantiating tab-bar toolbars.
 */
exports.TabBarToolbarFactory = Symbol('TabBarToolbarFactory');
/**
 * Class name indicating rendering of a toolbar item without an icon but instead with a text label.
 */
const NO_ICON_CLASS = 'no-icon';
/**
 * Tab-bar toolbar widget representing the active [tab-bar toolbar items](TabBarToolbarItem).
 */
let TabBarToolbar = TabBarToolbar_1 = class TabBarToolbar extends widgets_1.ReactWidget {
    constructor() {
        super();
        this.inline = new Map();
        this.more = new Map();
        this.toDisposeOnUpdateItems = new common_1.DisposableCollection();
        this.keybindingContextKeys = new Set();
        this.toDisposeOnSetCurrent = new common_1.DisposableCollection();
        this.showMoreContextMenu = (event) => {
            event.stopPropagation();
            event.preventDefault();
            const anchor = this.toAnchor(event);
            this.renderMoreContextMenu(anchor);
        };
        /**
         * Presents the menu to popup on the `event` that is the clicking of
         * a menu toolbar item.
         *
         * @param menuPath the path of the registered menu to show
         * @param event the mouse event triggering the menu
         */
        this.showPopupMenu = (menuPath, event) => {
            event.stopPropagation();
            event.preventDefault();
            const anchor = this.toAnchor(event);
            this.renderPopupMenu(menuPath, anchor);
        };
        this.executeCommand = (e) => {
            e.preventDefault();
            e.stopPropagation();
            const item = this.inline.get(e.currentTarget.id);
            if (!item || !this.isEnabled(item)) {
                return;
            }
            if (item.command && item.menuPath) {
                this.menuCommandExecutor.executeCommand(item.menuPath, item.command, this.current);
            }
            else if (item.command) {
                this.commands.executeCommand(item.command, this.current);
            }
            else if (item.menuPath) {
                this.renderMoreContextMenu(this.toAnchor(e), item.menuPath);
            }
            this.maybeUpdate();
        };
        this.onMouseDownEvent = (e) => {
            if (e.button === 0) {
                e.currentTarget.classList.add('active');
            }
        };
        this.onMouseUpEvent = (e) => {
            e.currentTarget.classList.remove('active');
        };
        this.addClass(TabBarToolbar_1.Styles.TAB_BAR_TOOLBAR);
        this.hide();
    }
    init() {
        this.toDispose.push(this.keybindings.onKeybindingsChanged(() => this.maybeUpdate()));
        this.toDispose.push(this.contextKeyService.onDidChange(e => {
            if (e.affects(this.keybindingContextKeys)) {
                this.maybeUpdate();
            }
        }));
    }
    updateItems(items, current) {
        var _a;
        this.toDisposeOnUpdateItems.dispose();
        this.toDisposeOnUpdateItems = new common_1.DisposableCollection();
        this.inline.clear();
        this.more.clear();
        const contextKeys = new Set();
        for (const item of items.sort(tab_bar_toolbar_types_1.TabBarToolbarItem.PRIORITY_COMPARATOR).reverse()) {
            if ('command' in item) {
                this.commands.getAllHandlers(item.command).forEach(handler => {
                    if (handler.onDidChangeEnabled) {
                        this.toDisposeOnUpdateItems.push(handler.onDidChangeEnabled(() => this.maybeUpdate()));
                    }
                });
            }
            if ('render' in item || item.group === undefined || item.group === 'navigation') {
                this.inline.set(item.id, item);
            }
            else {
                this.more.set(item.id, item);
            }
            if (item.when) {
                (_a = this.contextKeyService.parseKeys(item.when)) === null || _a === void 0 ? void 0 : _a.forEach(key => contextKeys.add(key));
            }
        }
        this.updateContextKeyListener(contextKeys);
        this.setCurrent(current);
        if (items.length) {
            this.show();
        }
        else {
            this.hide();
        }
        this.maybeUpdate();
    }
    updateTarget(current) {
        const operativeWidget = tab_bar_toolbar_types_1.TabBarDelegator.is(current) ? current.getTabBarDelegate() : current;
        const items = operativeWidget ? this.toolbarRegistry.visibleItems(operativeWidget) : [];
        this.updateItems(items, operativeWidget);
    }
    setCurrent(current) {
        this.toDisposeOnSetCurrent.dispose();
        this.toDispose.push(this.toDisposeOnSetCurrent);
        this.current = current;
        if (current) {
            const resetCurrent = () => {
                this.setCurrent(undefined);
                this.maybeUpdate();
            };
            current.disposed.connect(resetCurrent);
            this.toDisposeOnSetCurrent.push(common_1.Disposable.create(() => current.disposed.disconnect(resetCurrent)));
        }
    }
    updateContextKeyListener(contextKeys) {
        var _a;
        (_a = this.contextKeyListener) === null || _a === void 0 ? void 0 : _a.dispose();
        if (contextKeys.size > 0) {
            this.contextKeyListener = this.contextKeyService.onDidChange(event => {
                if (event.affects(contextKeys)) {
                    this.maybeUpdate();
                }
            });
        }
    }
    render() {
        this.keybindingContextKeys.clear();
        return React.createElement(React.Fragment, null,
            this.renderMore(),
            [...this.inline.values()].map(item => tab_bar_toolbar_types_1.TabBarToolbarItem.is(item)
                ? (tab_bar_toolbar_types_1.MenuToolbarItem.is(item) && !item.command ? this.renderMenuItem(item) : this.renderItem(item))
                : item.render(this.current)));
    }
    resolveKeybindingForCommand(command) {
        let result = '';
        if (command) {
            const bindings = this.keybindings.getKeybindingsForCommand(command);
            let found = false;
            if (bindings && bindings.length > 0) {
                bindings.forEach(binding => {
                    var _a, _b;
                    if (binding.when) {
                        (_a = this.contextKeyService.parseKeys(binding.when)) === null || _a === void 0 ? void 0 : _a.forEach(key => this.keybindingContextKeys.add(key));
                    }
                    if (!found && this.keybindings.isEnabledInScope(binding, (_b = this.current) === null || _b === void 0 ? void 0 : _b.node)) {
                        found = true;
                        result = ` (${this.keybindings.acceleratorFor(binding, '+')})`;
                    }
                });
            }
        }
        return result;
    }
    renderItem(item) {
        let innerText = '';
        const classNames = [];
        const command = item.command ? this.commands.getCommand(item.command) : undefined;
        // Fall back to the item ID in extremis so there is _something_ to render in the
        // case that there is neither an icon nor a title
        const itemText = item.text || (command === null || command === void 0 ? void 0 : command.label) || (command === null || command === void 0 ? void 0 : command.id) || item.id;
        if (itemText) {
            for (const labelPart of this.labelParser.parse(itemText)) {
                if (label_parser_1.LabelIcon.is(labelPart)) {
                    const className = `fa fa-${labelPart.name}${labelPart.animation ? ' fa-' + labelPart.animation : ''}`;
                    classNames.push(...className.split(' '));
                }
                else {
                    innerText = labelPart;
                }
            }
        }
        const iconClass = (typeof item.icon === 'function' && item.icon()) || item.icon || (command && command.iconClass);
        if (iconClass) {
            classNames.push(iconClass);
        }
        const tooltipText = item.tooltip || (command && command.label) || '';
        const tooltip = `${this.labelParser.stripIcons(tooltipText)}${this.resolveKeybindingForCommand(command === null || command === void 0 ? void 0 : command.id)}`;
        // Only present text if there is no icon
        if (classNames.length) {
            innerText = '';
        }
        else if (innerText) {
            // Make room for the label text
            classNames.push(NO_ICON_CLASS);
        }
        // In any case, this is an action item, with or without icon.
        classNames.push(widgets_1.ACTION_ITEM);
        const toolbarItemClassNames = this.getToolbarItemClassNames(item);
        return React.createElement("div", { key: item.id, className: toolbarItemClassNames.join(' '), onMouseDown: this.onMouseDownEvent, onMouseUp: this.onMouseUpEvent, onMouseOut: this.onMouseUpEvent },
            React.createElement("div", { id: item.id, className: classNames.join(' '), onClick: this.executeCommand, title: tooltip }, innerText));
    }
    isEnabled(item) {
        if (!!item.command) {
            return this.commandIsEnabled(item.command) && this.evaluateWhenClause(item.when);
        }
        else {
            return !!item.menuPath;
        }
    }
    getToolbarItemClassNames(item) {
        const classNames = [TabBarToolbar_1.Styles.TAB_BAR_TOOLBAR_ITEM];
        if (item.command) {
            if (this.isEnabled(item)) {
                classNames.push('enabled');
            }
            if (this.commandIsToggled(item.command)) {
                classNames.push('toggled');
            }
        }
        else {
            if (this.isEnabled(item)) {
                classNames.push('enabled');
            }
        }
        return classNames;
    }
    renderMore() {
        return !!this.more.size && React.createElement("div", { key: '__more__', className: TabBarToolbar_1.Styles.TAB_BAR_TOOLBAR_ITEM + ' enabled' },
            React.createElement("div", { id: '__more__', className: (0, widgets_1.codicon)('ellipsis', true), onClick: this.showMoreContextMenu, title: common_1.nls.localizeByDefault('More Actions...') }));
    }
    toAnchor(event) {
        var _a;
        const itemBox = (_a = event.currentTarget.closest('.' + TabBarToolbar_1.Styles.TAB_BAR_TOOLBAR_ITEM)) === null || _a === void 0 ? void 0 : _a.getBoundingClientRect();
        return itemBox ? { y: itemBox.bottom, x: itemBox.left } : event.nativeEvent;
    }
    renderMoreContextMenu(anchor, subpath) {
        var _a, _b;
        const toDisposeOnHide = new common_1.DisposableCollection();
        this.addClass('menu-open');
        toDisposeOnHide.push(common_1.Disposable.create(() => this.removeClass('menu-open')));
        if (subpath) {
            toDisposeOnHide.push(this.menus.linkSubmenu(tab_bar_toolbar_types_1.TAB_BAR_TOOLBAR_CONTEXT_MENU, subpath));
        }
        else {
            for (const item of this.more.values()) {
                if (item.menuPath && !item.command) {
                    toDisposeOnHide.push(this.menus.linkSubmenu(tab_bar_toolbar_types_1.TAB_BAR_TOOLBAR_CONTEXT_MENU, item.menuPath, undefined, item.group));
                }
                else if (item.command) {
                    // Register a submenu for the item, if the group is in format `<submenu group>/<submenu name>/.../<item group>`
                    if ((_a = item.group) === null || _a === void 0 ? void 0 : _a.includes('/')) {
                        const split = item.group.split('/');
                        const paths = [];
                        for (let i = 0; i < split.length - 1; i += 2) {
                            paths.push(split[i], split[i + 1]);
                            toDisposeOnHide.push(this.menus.registerSubmenu([...tab_bar_toolbar_types_1.TAB_BAR_TOOLBAR_CONTEXT_MENU, ...paths], split[i + 1], { order: item.order }));
                        }
                    }
                    toDisposeOnHide.push(this.menus.registerMenuAction([...tab_bar_toolbar_types_1.TAB_BAR_TOOLBAR_CONTEXT_MENU, ...item.group.split('/')], {
                        label: item.tooltip,
                        commandId: item.command,
                        when: item.when,
                        order: item.order,
                    }));
                }
            }
        }
        return this.contextMenuRenderer.render({
            menuPath: tab_bar_toolbar_types_1.TAB_BAR_TOOLBAR_CONTEXT_MENU,
            args: [this.current],
            anchor,
            context: (_b = this.current) === null || _b === void 0 ? void 0 : _b.node,
            onHide: () => toDisposeOnHide.dispose(),
            skipSingleRootNode: true,
        });
    }
    /**
     * Renders a toolbar item that is a menu, presenting it as a button with a little
     * chevron decoration that pops up a floating menu when clicked.
     *
     * @param item a toolbar item that is a menu item
     * @returns the rendered toolbar item
     */
    renderMenuItem(item) {
        var _a;
        const icon = typeof item.icon === 'function' ? item.icon() : (_a = item.icon) !== null && _a !== void 0 ? _a : 'ellipsis';
        return React.createElement("div", { key: item.id, className: TabBarToolbar_1.Styles.TAB_BAR_TOOLBAR_ITEM + ' enabled menu', onClick: this.showPopupMenu.bind(this, item.menuPath) },
            React.createElement("div", { id: item.id, className: (0, widgets_1.codicon)(icon, true), title: item.text }),
            React.createElement("div", { className: (0, widgets_1.codicon)('chevron-down') + ' chevron' }));
    }
    /**
     * Renders the menu popped up on a menu toolbar item.
     *
     * @param menuPath the path of the registered menu to render
     * @param anchor a description of where to render the menu
     * @returns platform-specific access to the rendered context menu
     */
    renderPopupMenu(menuPath, anchor) {
        var _a;
        const toDisposeOnHide = new common_1.DisposableCollection();
        this.addClass('menu-open');
        toDisposeOnHide.push(common_1.Disposable.create(() => this.removeClass('menu-open')));
        return this.contextMenuRenderer.render({
            menuPath,
            args: [this.current],
            anchor,
            context: (_a = this.current) === null || _a === void 0 ? void 0 : _a.node,
            onHide: () => toDisposeOnHide.dispose()
        });
    }
    shouldHandleMouseEvent(event) {
        return event.target instanceof Element && this.node.contains(event.target);
    }
    commandIsEnabled(command) {
        return this.commands.isEnabled(command, this.current);
    }
    commandIsToggled(command) {
        return this.commands.isToggled(command, this.current);
    }
    evaluateWhenClause(whenClause) {
        var _a;
        return whenClause ? this.contextKeyService.match(whenClause, (_a = this.current) === null || _a === void 0 ? void 0 : _a.node) : true;
    }
    maybeUpdate() {
        if (!this.isDisposed) {
            this.update();
        }
    }
};
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(common_1.CommandRegistry),
    (0, tslib_1.__metadata)("design:type", common_1.CommandRegistry)
], TabBarToolbar.prototype, "commands", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(label_parser_1.LabelParser),
    (0, tslib_1.__metadata)("design:type", label_parser_1.LabelParser)
], TabBarToolbar.prototype, "labelParser", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(common_1.MenuModelRegistry),
    (0, tslib_1.__metadata)("design:type", common_1.MenuModelRegistry)
], TabBarToolbar.prototype, "menus", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(common_1.MenuCommandExecutor),
    (0, tslib_1.__metadata)("design:type", Object)
], TabBarToolbar.prototype, "menuCommandExecutor", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(context_menu_renderer_1.ContextMenuRenderer),
    (0, tslib_1.__metadata)("design:type", context_menu_renderer_1.ContextMenuRenderer)
], TabBarToolbar.prototype, "contextMenuRenderer", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(tab_bar_toolbar_registry_1.TabBarToolbarRegistry),
    (0, tslib_1.__metadata)("design:type", tab_bar_toolbar_registry_1.TabBarToolbarRegistry)
], TabBarToolbar.prototype, "toolbarRegistry", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(context_key_service_1.ContextKeyService),
    (0, tslib_1.__metadata)("design:type", Object)
], TabBarToolbar.prototype, "contextKeyService", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(keybinding_1.KeybindingRegistry),
    (0, tslib_1.__metadata)("design:type", keybinding_1.KeybindingRegistry)
], TabBarToolbar.prototype, "keybindings", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.postConstruct)(),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", []),
    (0, tslib_1.__metadata)("design:returntype", void 0)
], TabBarToolbar.prototype, "init", null);
TabBarToolbar = TabBarToolbar_1 = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)(),
    (0, tslib_1.__metadata)("design:paramtypes", [])
], TabBarToolbar);
exports.TabBarToolbar = TabBarToolbar;
(function (TabBarToolbar) {
    let Styles;
    (function (Styles) {
        Styles.TAB_BAR_TOOLBAR = 'p-TabBar-toolbar';
        Styles.TAB_BAR_TOOLBAR_ITEM = 'item';
    })(Styles = TabBarToolbar.Styles || (TabBarToolbar.Styles = {}));
})(TabBarToolbar = exports.TabBarToolbar || (exports.TabBarToolbar = {}));
exports.TabBarToolbar = TabBarToolbar;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/shell/tab-bars.js":
/*!********************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/shell/tab-bars.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SideTabBar = exports.ToolbarAwareTabBar = exports.ScrollableTabBar = exports.TabBarRenderer = exports.TabBarRendererFactory = exports.SHELL_TABBAR_CONTEXT_SPLIT = exports.SHELL_TABBAR_CONTEXT_PIN = exports.SHELL_TABBAR_CONTEXT_COPY = exports.SHELL_TABBAR_CONTEXT_CLOSE = exports.SHELL_TABBAR_CONTEXT_MENU = void 0;
const perfect_scrollbar_1 = __webpack_require__(/*! perfect-scrollbar */ "../node_modules/perfect-scrollbar/dist/perfect-scrollbar.esm.js");
const widgets_1 = __webpack_require__(/*! @phosphor/widgets */ "../node_modules/@phosphor/widgets/lib/index.js");
const virtualdom_1 = __webpack_require__(/*! @phosphor/virtualdom */ "../node_modules/@phosphor/virtualdom/lib/index.js");
const common_1 = __webpack_require__(/*! ../../common */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/index.js");
const signaling_1 = __webpack_require__(/*! @phosphor/signaling */ "../node_modules/@phosphor/signaling/lib/index.js");
const messaging_1 = __webpack_require__(/*! @phosphor/messaging */ "../node_modules/@phosphor/messaging/lib/index.js");
const algorithm_1 = __webpack_require__(/*! @phosphor/algorithm */ "../node_modules/@phosphor/algorithm/lib/index.js");
const domutils_1 = __webpack_require__(/*! @phosphor/domutils */ "../node_modules/@phosphor/domutils/lib/index.js");
const theia_dock_panel_1 = __webpack_require__(/*! ./theia-dock-panel */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/shell/theia-dock-panel.js");
const widget_decoration_1 = __webpack_require__(/*! ../widget-decoration */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/widget-decoration.js");
const navigatable_types_1 = __webpack_require__(/*! ../navigatable-types */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/navigatable-types.js");
const widget_1 = __webpack_require__(/*! ../widgets/widget */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/widgets/widget.js");
const client_1 = __webpack_require__(/*! react-dom/client */ "../node_modules/react-dom/client.js");
const select_component_1 = __webpack_require__(/*! ../widgets/select-component */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/widgets/select-component.js");
const react_1 = __webpack_require__(/*! react */ "../node_modules/react/index.js");
const previewable_widget_1 = __webpack_require__(/*! ../widgets/previewable-widget */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/widgets/previewable-widget.js");
const enhanced_preview_widget_1 = __webpack_require__(/*! ../widgets/enhanced-preview-widget */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/widgets/enhanced-preview-widget.js");
/** The class name added to hidden content nodes, which are required to render vertical side bars. */
const HIDDEN_CONTENT_CLASS = 'theia-TabBar-hidden-content';
/** Menu path for tab bars used throughout the application shell. */
exports.SHELL_TABBAR_CONTEXT_MENU = ['shell-tabbar-context-menu'];
exports.SHELL_TABBAR_CONTEXT_CLOSE = [...exports.SHELL_TABBAR_CONTEXT_MENU, '0_close'];
exports.SHELL_TABBAR_CONTEXT_COPY = [...exports.SHELL_TABBAR_CONTEXT_MENU, '1_copy'];
// Kept here in anticipation of tab pinning behavior implemented in tab-bars.ts
exports.SHELL_TABBAR_CONTEXT_PIN = [...exports.SHELL_TABBAR_CONTEXT_MENU, '4_pin'];
exports.SHELL_TABBAR_CONTEXT_SPLIT = [...exports.SHELL_TABBAR_CONTEXT_MENU, '5_split'];
exports.TabBarRendererFactory = Symbol('TabBarRendererFactory');
/**
 * A tab bar renderer that offers a context menu. In addition, this renderer is able to
 * set an explicit position and size on the icon and label of each tab in a side bar.
 * This is necessary because the elements of side bar tabs are rotated using the CSS
 * `transform` property, disrupting the browser's ability to arrange those elements
 * automatically.
 */
class TabBarRenderer extends widgets_1.TabBar.Renderer {
    // TODO refactor shell, rendered should only receive props with event handlers
    // events should be handled by clients, like ApplicationShell
    // right now it is mess: (1) client logic belong to renderer, (2) cyclic dependencies between renderers and clients
    constructor(contextMenuRenderer, decoratorService, iconThemeService, selectionService, commandService, corePreferences, hoverService, contextKeyService) {
        super();
        this.contextMenuRenderer = contextMenuRenderer;
        this.decoratorService = decoratorService;
        this.iconThemeService = iconThemeService;
        this.selectionService = selectionService;
        this.commandService = commandService;
        this.corePreferences = corePreferences;
        this.hoverService = hoverService;
        this.contextKeyService = contextKeyService;
        this.toDispose = new common_1.DisposableCollection();
        this.toDisposeOnTabBar = new common_1.DisposableCollection();
        this.decorations = new Map();
        this.renderEnhancedPreview = (title) => {
            const hoverBox = document.createElement('div');
            hoverBox.classList.add('theia-horizontal-tabBar-hover-div');
            const labelElement = document.createElement('p');
            labelElement.classList.add('theia-horizontal-tabBar-hover-title');
            labelElement.textContent = title.label;
            hoverBox.append(labelElement);
            const widget = title.owner;
            if (enhanced_preview_widget_1.EnhancedPreviewWidget.is(widget)) {
                const enhancedPreviewNode = widget.getEnhancedPreviewNode();
                if (enhancedPreviewNode) {
                    hoverBox.appendChild(enhancedPreviewNode);
                }
            }
            else if (title.caption) {
                const captionElement = document.createElement('p');
                captionElement.classList.add('theia-horizontal-tabBar-hover-caption');
                captionElement.textContent = title.caption;
                hoverBox.appendChild(captionElement);
            }
            return hoverBox;
        };
        this.handleMouseEnterEvent = (event) => {
            var _a;
            if (this.tabBar && this.hoverService && event.currentTarget instanceof HTMLElement) {
                const id = event.currentTarget.id;
                const title = this.tabBar.titles.find(t => this.createTabId(t) === id);
                if (title) {
                    if (this.tabBar.orientation === 'horizontal') {
                        this.hoverService.requestHover({
                            content: this.renderEnhancedPreview(title),
                            target: event.currentTarget,
                            position: 'bottom',
                            cssClasses: ['extended-tab-preview'],
                            visualPreview: ((_a = this.corePreferences) === null || _a === void 0 ? void 0 : _a['window.tabbar.enhancedPreview']) === 'visual' ? width => this.renderVisualPreview(width, title) : undefined
                        });
                    }
                    else {
                        this.hoverService.requestHover({
                            content: title.caption,
                            target: event.currentTarget,
                            position: 'right'
                        });
                    }
                }
            }
        };
        this.handleContextMenuEvent = (event) => {
            var _a, _b;
            if (this.contextMenuRenderer && this.contextMenuPath && event.currentTarget instanceof HTMLElement) {
                event.stopPropagation();
                event.preventDefault();
                let widget = undefined;
                if (this.tabBar) {
                    const titleIndex = Array.from(this.tabBar.contentNode.getElementsByClassName('p-TabBar-tab'))
                        .findIndex(node => node.contains(event.currentTarget));
                    if (titleIndex !== -1) {
                        widget = this.tabBar.titles[titleIndex].owner;
                    }
                }
                const oldSelection = (_a = this.selectionService) === null || _a === void 0 ? void 0 : _a.selection;
                if (widget && this.selectionService) {
                    this.selectionService.selection = navigatable_types_1.NavigatableWidget.is(widget) ? { uri: widget.getResourceUri() } : widget;
                }
                const contextKeyServiceOverlay = (_b = this.contextKeyService) === null || _b === void 0 ? void 0 : _b.createOverlay([['isTerminalTab', widget && 'terminalId' in widget]]);
                this.contextMenuRenderer.render({
                    menuPath: this.contextMenuPath,
                    anchor: event,
                    args: [event],
                    contextKeyService: contextKeyServiceOverlay,
                    // We'd like to wait until the command triggered by the context menu has been run, but this should let it get through the preamble, at least.
                    onHide: () => setTimeout(() => { if (this.selectionService) {
                        this.selectionService.selection = oldSelection;
                    } })
                });
            }
        };
        this.handleCloseClickEvent = (event) => {
            if (this.tabBar && event.currentTarget instanceof HTMLElement) {
                const id = event.currentTarget.parentElement.id;
                const title = this.tabBar.titles.find(t => this.createTabId(t) === id);
                if ((title === null || title === void 0 ? void 0 : title.closable) === false && (title === null || title === void 0 ? void 0 : title.className.includes(widget_1.PINNED_CLASS)) && this.commandService) {
                    this.commandService.executeCommand('workbench.action.unpinEditor', event);
                }
            }
        };
        this.handleDblClickEvent = (event) => {
            var _a;
            if (!((_a = this.corePreferences) === null || _a === void 0 ? void 0 : _a.get('workbench.tab.maximize'))) {
                return;
            }
            if (this.tabBar && event.currentTarget instanceof HTMLElement) {
                const id = event.currentTarget.id;
                const title = this.tabBar.titles.find(t => this.createTabId(t) === id);
                const area = title === null || title === void 0 ? void 0 : title.owner.parent;
                if (area instanceof theia_dock_panel_1.TheiaDockPanel && (area.id === theia_dock_panel_1.BOTTOM_AREA_ID || area.id === theia_dock_panel_1.MAIN_AREA_ID)) {
                    area.toggleMaximized();
                }
            }
        };
        if (this.decoratorService) {
            this.toDispose.push(common_1.Disposable.create(() => this.resetDecorations()));
            this.toDispose.push(this.decoratorService.onDidChangeDecorations(() => this.resetDecorations()));
        }
        if (this.iconThemeService) {
            this.toDispose.push(this.iconThemeService.onDidChangeCurrent(() => {
                if (this._tabBar) {
                    this._tabBar.update();
                }
            }));
        }
    }
    dispose() {
        this.toDispose.dispose();
    }
    /**
     * A reference to the tab bar is required in order to activate it when a context menu
     * is requested.
     */
    set tabBar(tabBar) {
        if (this.toDispose.disposed) {
            throw new Error('disposed');
        }
        if (this._tabBar === tabBar) {
            return;
        }
        this.toDisposeOnTabBar.dispose();
        this.toDispose.push(this.toDisposeOnTabBar);
        this._tabBar = tabBar;
        if (tabBar) {
            const listener = (_, { title }) => this.resetDecorations(title);
            tabBar.tabCloseRequested.connect(listener);
            this.toDisposeOnTabBar.push(common_1.Disposable.create(() => tabBar.tabCloseRequested.disconnect(listener)));
        }
        this.resetDecorations();
    }
    get tabBar() {
        return this._tabBar;
    }
    /**
     * Render tabs with the default DOM structure, but additionally register a context menu listener.
     * @param {SideBarRenderData} data Data used to render the tab.
     * @param {boolean} isInSidePanel An optional check which determines if the tab is in the side-panel.
     * @param {boolean} isPartOfHiddenTabBar An optional check which determines if the tab is in the hidden horizontal tab bar.
     * @returns {VirtualElement} The virtual element of the rendered tab.
     */
    renderTab(data, isInSidePanel, isPartOfHiddenTabBar) {
        var _a;
        const title = data.title;
        const id = this.createTabId(title, isPartOfHiddenTabBar);
        const key = this.createTabKey(data);
        const style = this.createTabStyle(data);
        const className = this.createTabClass(data);
        const dataset = this.createTabDataset(data);
        const closeIconTitle = data.title.className.includes(widget_1.PINNED_CLASS)
            ? common_1.nls.localizeByDefault('Unpin')
            : common_1.nls.localizeByDefault('Close');
        const hover = this.tabBar && (this.tabBar.orientation === 'horizontal' && ((_a = this.corePreferences) === null || _a === void 0 ? void 0 : _a['window.tabbar.enhancedPreview']) === 'classic')
            ? { title: title.caption }
            : {
                onmouseenter: this.handleMouseEnterEvent
            };
        return virtualdom_1.h.li({
            ...hover,
            key, className, id, style, dataset,
            oncontextmenu: this.handleContextMenuEvent,
            ondblclick: this.handleDblClickEvent,
            onauxclick: (e) => {
                // If user closes the tab using mouse wheel, nothing should be pasted to an active editor
                e.preventDefault();
            }
        }, virtualdom_1.h.div({ className: 'theia-tab-icon-label' }, this.renderIcon(data, isInSidePanel), this.renderLabel(data, isInSidePanel), this.renderTailDecorations(data, isInSidePanel), this.renderBadge(data, isInSidePanel), this.renderLock(data, isInSidePanel)), virtualdom_1.h.div({
            className: 'p-TabBar-tabCloseIcon action-label',
            title: closeIconTitle,
            onclick: this.handleCloseClickEvent
        }));
    }
    createTabClass(data) {
        var _a;
        let tabClass = super.createTabClass(data);
        if (!((_a = data.visible) !== null && _a !== void 0 ? _a : true)) {
            tabClass += ' p-mod-invisible';
        }
        return tabClass;
    }
    /**
     * Generate ID for an entry in the tab bar
     * @param {Title<Widget>} title Title of the widget controlled by this tab bar
     * @param {boolean} isPartOfHiddenTabBar Tells us if this entry is part of the hidden horizontal tab bar.
     *      If yes, add a suffix to differentiate it's ID from the entry in the visible tab bar
     * @returns {string} DOM element ID
     */
    createTabId(title, isPartOfHiddenTabBar = false) {
        return 'shell-tab-' + title.owner.id + (isPartOfHiddenTabBar ? '-hidden' : '');
    }
    /**
     * If size information is available for the label and icon, set an explicit height on the tab.
     * The height value also considers padding, which should be derived from CSS settings.
     */
    createTabStyle(data) {
        const zIndex = `${data.zIndex}`;
        const labelSize = data.labelSize;
        const iconSize = data.iconSize;
        let height;
        let width;
        if (labelSize || iconSize) {
            const labelHeight = labelSize ? (this.tabBar && this.tabBar.orientation === 'horizontal' ? labelSize.height : labelSize.width) : 0;
            const iconHeight = iconSize ? iconSize.height : 0;
            let paddingTop = data.paddingTop || 0;
            if (labelHeight > 0 && iconHeight > 0) {
                // Leave some extra space between icon and label
                paddingTop = paddingTop * 1.5;
            }
            const paddingBottom = data.paddingBottom || 0;
            height = `${labelHeight + iconHeight + paddingTop + paddingBottom}px`;
        }
        if (data.tabWidth) {
            width = `${data.tabWidth}px`;
        }
        else {
            width = '';
        }
        return { zIndex, height, minWidth: width, maxWidth: width };
    }
    /**
     * If size information is available for the label, set it as inline style.
     * Tab padding and icon size are also considered in the `top` position.
     * @param {SideBarRenderData} data Data used to render the tab.
     * @param {boolean} isInSidePanel An optional check which determines if the tab is in the side-panel.
     * @returns {VirtualElement} The virtual element of the rendered label.
     */
    renderLabel(data, isInSidePanel) {
        const labelSize = data.labelSize;
        const iconSize = data.iconSize;
        let width;
        let height;
        let top;
        if (labelSize) {
            width = `${labelSize.width}px`;
            height = `${labelSize.height}px`;
        }
        if (data.paddingTop || iconSize) {
            const iconHeight = iconSize ? iconSize.height : 0;
            let paddingTop = data.paddingTop || 0;
            if (iconHeight > 0) {
                // Leave some extra space between icon and label
                paddingTop = paddingTop * 1.5;
            }
            top = `${paddingTop + iconHeight}px`;
        }
        const style = { width, height, top };
        // No need to check for duplicate labels if the tab is rendered in the side panel (title is not displayed),
        // or if there are less than two files in the tab bar.
        if (isInSidePanel || (this.tabBar && this.tabBar.titles.length < 2)) {
            return virtualdom_1.h.div({ className: 'p-TabBar-tabLabel', style }, data.title.label);
        }
        const originalToDisplayedMap = this.findDuplicateLabels([...this.tabBar.titles]);
        const labelDetails = originalToDisplayedMap.get(data.title.caption);
        if (labelDetails) {
            return virtualdom_1.h.div({ className: 'p-TabBar-tabLabelWrapper' }, virtualdom_1.h.div({ className: 'p-TabBar-tabLabel', style }, data.title.label), virtualdom_1.h.div({ className: 'p-TabBar-tabLabelDetails', style }, labelDetails));
        }
        return virtualdom_1.h.div({ className: 'p-TabBar-tabLabel', style }, data.title.label);
    }
    renderTailDecorations(renderData, isInSidePanel) {
        var _a;
        if (!((_a = this.corePreferences) === null || _a === void 0 ? void 0 : _a.get('workbench.editor.decorations.badges'))) {
            return [];
        }
        const tailDecorations = common_1.ArrayUtils.coalesce(this.getDecorationData(renderData.title, 'tailDecorations')).flat();
        if (tailDecorations === undefined || tailDecorations.length === 0) {
            return [];
        }
        let dotDecoration;
        const otherDecorations = [];
        tailDecorations.reverse().forEach(decoration => {
            const partial = decoration;
            if (widget_decoration_1.WidgetDecoration.TailDecoration.isDotDecoration(partial)) {
                dotDecoration || (dotDecoration = partial);
            }
            else if (partial.data || partial.icon || partial.iconClass) {
                otherDecorations.push(partial);
            }
        });
        const decorationsToRender = dotDecoration ? [dotDecoration, ...otherDecorations] : otherDecorations;
        return decorationsToRender.map((decoration, index) => {
            const { tooltip, data, fontData, color, icon, iconClass } = decoration;
            const iconToRender = icon !== null && icon !== void 0 ? icon : iconClass;
            const className = ['p-TabBar-tail', 'flex'].join(' ');
            const style = fontData ? fontData : color ? { color } : undefined;
            const content = (data ? data : iconToRender
                ? virtualdom_1.h.span({ className: this.getIconClass(iconToRender, iconToRender === 'circle' ? [widget_decoration_1.WidgetDecoration.Styles.DECORATOR_SIZE_CLASS] : []) })
                : '') + (index !== decorationsToRender.length - 1 ? ',' : '');
            return virtualdom_1.h.span({ key: ('tailDecoration_' + index), className, style, title: tooltip !== null && tooltip !== void 0 ? tooltip : content }, content);
        });
    }
    renderBadge(data, isInSidePanel) {
        const totalBadge = this.getDecorationData(data.title, 'badge').reduce((sum, badge) => sum + badge, 0);
        if (!totalBadge) {
            return virtualdom_1.h.div({});
        }
        const limitedBadge = totalBadge >= 100 ? '99+' : totalBadge;
        return isInSidePanel
            ? virtualdom_1.h.div({ className: 'theia-badge-decorator-sidebar' }, `${limitedBadge}`)
            : virtualdom_1.h.div({ className: 'theia-badge-decorator-horizontal' }, `${limitedBadge}`);
    }
    renderLock(data, isInSidePanel) {
        return !isInSidePanel && data.title.className.includes(widget_1.LOCKED_CLASS)
            ? virtualdom_1.h.div({ className: 'p-TabBar-tabLock' })
            : virtualdom_1.h.div({});
    }
    resetDecorations(title) {
        if (title) {
            this.decorations.delete(title);
        }
        else {
            this.decorations.clear();
        }
        if (this.tabBar) {
            this.tabBar.update();
        }
    }
    /**
     * Get all available decorations of a given tab.
     * @param {string} title The widget title.
     */
    getDecorations(title) {
        if (this.tabBar && this.decoratorService) {
            const owner = title.owner;
            if (!owner.resetTabBarDecorations) {
                owner.resetTabBarDecorations = () => this.decorations.delete(title);
                title.owner.disposed.connect(owner.resetTabBarDecorations);
            }
            const decorations = this.decorations.get(title) || this.decoratorService.getDecorations(title);
            this.decorations.set(title, decorations);
            return decorations;
        }
        return [];
    }
    /**
     * Get the decoration data given the tab URI and the decoration data type.
     * @param {string} title The title.
     * @param {K} key The type of the decoration data.
     */
    getDecorationData(title, key) {
        return this.getDecorations(title).filter(data => data[key] !== undefined).map(data => data[key]);
    }
    /**
     * Get the class of an icon.
     * @param {string | string[]} iconName The name of the icon.
     * @param {string[]} additionalClasses Additional classes of the icon.
     */
    getIconClass(iconName, additionalClasses = []) {
        const iconClass = (typeof iconName === 'string') ? ['a', 'fa', `fa-${iconName}`] : ['a'].concat(iconName);
        return iconClass.concat(additionalClasses).join(' ');
    }
    /**
     * Find duplicate labels from the currently opened tabs in the tab bar.
     * Return the appropriate partial paths that can distinguish the identical labels.
     *
     * E.g., a/p/index.ts => a/..., b/p/index.ts => b/...
     *
     * To prevent excessively long path displayed, show at maximum three levels from the end by default.
     * @param {Title<Widget>[]} titles Array of titles in the current tab bar.
     * @returns {Map<string, string>} A map from each tab's original path to its displayed partial path.
     */
    findDuplicateLabels(titles) {
        // Filter from all tabs to group them by the distinct label (file name).
        // E.g., 'foo.js' => {0 (index) => 'a/b/foo.js', '2 => a/c/foo.js' },
        //       'bar.js' => {1 => 'a/d/bar.js', ...}
        const labelGroups = new Map();
        titles.forEach((title, index) => {
            if (!labelGroups.has(title.label)) {
                labelGroups.set(title.label, new Map());
            }
            labelGroups.get(title.label).set(index, title.caption);
        });
        const originalToDisplayedMap = new Map();
        // Parse each group of editors with the same label.
        labelGroups.forEach(labelGroup => {
            // Filter to get groups that have duplicates.
            if (labelGroup.size > 1) {
                const paths = [];
                let maxPathLength = 0;
                labelGroup.forEach((pathStr, index) => {
                    const steps = pathStr.split('/');
                    maxPathLength = Math.max(maxPathLength, steps.length);
                    paths[index] = (steps.slice(0, steps.length - 1));
                    // By default, show at maximum three levels from the end.
                    let defaultDisplayedPath = steps.slice(-4, -1).join('/');
                    if (steps.length > 4) {
                        defaultDisplayedPath = '.../' + defaultDisplayedPath;
                    }
                    originalToDisplayedMap.set(pathStr, defaultDisplayedPath);
                });
                // Iterate through the steps of the path from the left to find the step that can distinguish it.
                // E.g., ['root', 'foo', 'c'], ['root', 'bar', 'd'] => 'foo', 'bar'
                let i = 0;
                while (i < maxPathLength - 1) {
                    // Store indexes of all paths that have the identical element in each step.
                    const stepOccurrences = new Map();
                    // Compare the current step of all paths
                    paths.forEach((path, index) => {
                        const step = path[i];
                        if (path.length > 0) {
                            if (i > path.length - 1) {
                                paths[index] = [];
                            }
                            else if (!stepOccurrences.has(step)) {
                                stepOccurrences.set(step, [index]);
                            }
                            else {
                                stepOccurrences.get(step).push(index);
                            }
                        }
                    });
                    // Set the displayed path for each tab.
                    stepOccurrences.forEach((indexArr, displayedPath) => {
                        if (indexArr.length === 1) {
                            const originalPath = labelGroup.get(indexArr[0]);
                            if (originalPath) {
                                const originalElements = originalPath.split('/');
                                const displayedElements = displayedPath.split('/');
                                if (originalElements.slice(-2)[0] !== displayedElements.slice(-1)[0]) {
                                    displayedPath += '/...';
                                }
                                if (originalElements[0] !== displayedElements[0]) {
                                    displayedPath = '.../' + displayedPath;
                                }
                                originalToDisplayedMap.set(originalPath, displayedPath);
                                paths[indexArr[0]] = [];
                            }
                        }
                    });
                    i++;
                }
            }
        });
        return originalToDisplayedMap;
    }
    /**
     * If size information is available for the icon, set it as inline style. Tab padding
     * is also considered in the `top` position.
     * @param {SideBarRenderData} data Data used to render the tab icon.
     * @param {boolean} isInSidePanel An optional check which determines if the tab is in the side-panel.
     */
    renderIcon(data, isInSidePanel) {
        if (!isInSidePanel && this.iconThemeService && this.iconThemeService.current === 'none') {
            return virtualdom_1.h.div();
        }
        let top;
        if (data.paddingTop) {
            top = `${data.paddingTop || 0}px`;
        }
        const style = { top };
        const baseClassName = this.createIconClass(data);
        const overlayIcons = [];
        const decorationData = this.getDecorationData(data.title, 'iconOverlay');
        // Check if the tab has decoration markers to be rendered on top.
        if (decorationData.length > 0) {
            const baseIcon = virtualdom_1.h.div({ className: baseClassName, style }, data.title.iconLabel);
            const wrapperClassName = widget_decoration_1.WidgetDecoration.Styles.ICON_WRAPPER_CLASS;
            const decoratorSizeClassName = isInSidePanel ? widget_decoration_1.WidgetDecoration.Styles.DECORATOR_SIDEBAR_SIZE_CLASS : widget_decoration_1.WidgetDecoration.Styles.DECORATOR_SIZE_CLASS;
            decorationData
                .filter(common_1.notEmpty)
                .map(overlay => [overlay.position, overlay])
                .forEach(([position, overlay]) => {
                const iconAdditionalClasses = [decoratorSizeClassName, widget_decoration_1.WidgetDecoration.IconOverlayPosition.getStyle(position, isInSidePanel)];
                const overlayIconStyle = (color) => {
                    if (color === undefined) {
                        return {};
                    }
                    return { color };
                };
                // Parse the optional background (if it exists) of the overlay icon.
                if (overlay.background) {
                    const backgroundIconClassName = this.getIconClass(overlay.background.shape, iconAdditionalClasses);
                    overlayIcons.push(virtualdom_1.h.div({ key: data.title.label + '-background', className: backgroundIconClassName, style: overlayIconStyle(overlay.background.color) }));
                }
                // Parse the overlay icon.
                const overlayIcon = overlay.icon || overlay.iconClass;
                const overlayIconClassName = this.getIconClass(overlayIcon, iconAdditionalClasses);
                overlayIcons.push(virtualdom_1.h.span({ key: data.title.label, className: overlayIconClassName, style: overlayIconStyle(overlay.color) }));
            });
            return virtualdom_1.h.div({ className: wrapperClassName, style }, [baseIcon, ...overlayIcons]);
        }
        return virtualdom_1.h.div({ className: baseClassName, style }, data.title.iconLabel);
    }
    renderVisualPreview(desiredWidth, title) {
        var _a;
        const widget = title.owner;
        // Check that the widget is not currently shown, is a PreviewableWidget and it was already loaded before
        if (this.tabBar && this.tabBar.currentTitle !== title && previewable_widget_1.PreviewableWidget.isPreviewable(widget)) {
            const html = document.getElementById(widget.id);
            if (html) {
                const previewNode = widget.getPreviewNode();
                if (previewNode) {
                    const clonedNode = previewNode.cloneNode(true);
                    const visualPreviewDiv = document.createElement('div');
                    visualPreviewDiv.classList.add('enhanced-preview-container');
                    // Add the clonedNode and get it from the children to have a HTMLElement instead of a Node
                    visualPreviewDiv.append(clonedNode);
                    const visualPreview = visualPreviewDiv.children.item(visualPreviewDiv.children.length - 1);
                    if (visualPreview instanceof HTMLElement) {
                        visualPreview.classList.remove('p-mod-hidden');
                        visualPreview.classList.add('enhanced-preview');
                        visualPreview.id = `preview:${widget.id}`;
                        // Use the current visible editor as a fallback if not available
                        const height = visualPreview.style.height === '' ? this.tabBar.currentTitle.owner.node.offsetHeight : parseFloat(visualPreview.style.height);
                        const width = visualPreview.style.width === '' ? this.tabBar.currentTitle.owner.node.offsetWidth : parseFloat(visualPreview.style.width);
                        const desiredRatio = 9 / 16;
                        const desiredHeight = desiredWidth * desiredRatio;
                        const ratio = height / width;
                        visualPreviewDiv.style.width = `${desiredWidth}px`;
                        visualPreviewDiv.style.height = `${desiredHeight}px`;
                        // If the view is wider than the desiredRatio scale the width and crop the height. If the view is longer its the other way around.
                        const scale = ratio < desiredRatio ? (desiredHeight / height) : (desiredWidth / width);
                        visualPreview.style.transform = `scale(${scale},${scale})`;
                        visualPreview.style.removeProperty('top');
                        visualPreview.style.removeProperty('left');
                        // Copy canvases (They are cloned empty)
                        const originalCanvases = html.getElementsByTagName('canvas');
                        const previewCanvases = visualPreview.getElementsByTagName('canvas');
                        // If this is not given, something went wrong during the cloning
                        if (originalCanvases.length === previewCanvases.length) {
                            for (let i = 0; i < originalCanvases.length; i++) {
                                (_a = previewCanvases[i].getContext('2d')) === null || _a === void 0 ? void 0 : _a.drawImage(originalCanvases[i], 0, 0);
                            }
                        }
                        return visualPreviewDiv;
                    }
                }
            }
        }
        return undefined;
    }
}
exports.TabBarRenderer = TabBarRenderer;
/**
 * A specialized tab bar for the main and bottom areas.
 */
class ScrollableTabBar extends widgets_1.TabBar {
    constructor(options, dynamicTabOptions) {
        super(options);
        this.isMouseOver = false;
        this.needsRecompute = false;
        this.tabSize = 0;
        this.toDispose = new common_1.DisposableCollection();
        this.scrollBarFactory = () => new perfect_scrollbar_1.default(this.scrollbarHost, options);
        this._dynamicTabOptions = dynamicTabOptions;
        this.rewireDOM();
    }
    set dynamicTabOptions(options) {
        this._dynamicTabOptions = options;
        this.updateTabs();
    }
    get dynamicTabOptions() {
        return this._dynamicTabOptions;
    }
    dispose() {
        if (this.isDisposed) {
            return;
        }
        super.dispose();
        this.toDispose.dispose();
    }
    /**
     * Restructures the DOM defined in PhosphorJS.
     *
     * By default the tabs (`li`) are contained in the `this.contentNode` (`ul`) which is wrapped in a `div` (`this.node`).
     * Instead of this structure, we add a container for the `this.contentNode` and for the toolbar.
     * The scrollbar will only work for the `ul` part but it does not affect the toolbar, so it can be on the right hand-side.
     */
    rewireDOM() {
        const contentNode = this.node.getElementsByClassName(ScrollableTabBar.Styles.TAB_BAR_CONTENT)[0];
        if (!contentNode) {
            throw new Error("'this.node' does not have the content as a direct child with class name 'p-TabBar-content'.");
        }
        this.node.removeChild(contentNode);
        this.contentContainer = document.createElement('div');
        this.contentContainer.classList.add(ScrollableTabBar.Styles.TAB_BAR_CONTENT_CONTAINER);
        this.contentContainer.appendChild(contentNode);
        this.topRow = document.createElement('div');
        this.topRow.classList.add('theia-tabBar-tab-row');
        this.topRow.appendChild(this.contentContainer);
        this.openTabsContainer = document.createElement('div');
        this.openTabsContainer.classList.add('theia-tabBar-open-tabs');
        this.openTabsRoot = (0, client_1.createRoot)(this.openTabsContainer);
        this.topRow.appendChild(this.openTabsContainer);
        this.node.appendChild(this.topRow);
    }
    onAfterAttach(msg) {
        if (!this.scrollBar) {
            this.scrollBar = this.scrollBarFactory();
        }
        this.node.addEventListener('mouseenter', () => { this.isMouseOver = true; });
        this.node.addEventListener('mouseleave', () => {
            this.isMouseOver = false;
            if (this.needsRecompute) {
                this.updateTabs();
            }
        });
        super.onAfterAttach(msg);
    }
    onBeforeDetach(msg) {
        super.onBeforeDetach(msg);
        if (this.scrollBar) {
            this.scrollBar.destroy();
            this.scrollBar = undefined;
        }
    }
    onUpdateRequest(msg) {
        this.updateTabs();
    }
    updateTabs() {
        const content = [];
        if (this.dynamicTabOptions) {
            this.openTabsRoot.render((0, react_1.createElement)(select_component_1.SelectComponent, {
                options: this.titles,
                onChange: (option, index) => {
                    this.currentIndex = index;
                },
                alignment: 'right'
            }));
            if (this.isMouseOver) {
                this.needsRecompute = true;
            }
            else {
                this.needsRecompute = false;
                if (this.orientation === 'horizontal') {
                    let availableWidth = this.scrollbarHost.clientWidth;
                    let effectiveWidth = availableWidth;
                    if (!this.openTabsContainer.classList.contains('p-mod-hidden')) {
                        availableWidth += this.openTabsContainer.getBoundingClientRect().width;
                    }
                    if (this.dynamicTabOptions.minimumTabSize * this.titles.length <= availableWidth) {
                        effectiveWidth += this.openTabsContainer.getBoundingClientRect().width;
                        this.openTabsContainer.classList.add('p-mod-hidden');
                    }
                    else {
                        this.openTabsContainer.classList.remove('p-mod-hidden');
                    }
                    this.tabSize = Math.max(Math.min(effectiveWidth / this.titles.length, this.dynamicTabOptions.defaultTabSize), this.dynamicTabOptions.minimumTabSize);
                }
            }
            this.node.classList.add('dynamic-tabs');
        }
        else {
            this.openTabsContainer.classList.add('p-mod-hidden');
            this.node.classList.remove('dynamic-tabs');
        }
        for (let i = 0, n = this.titles.length; i < n; ++i) {
            const title = this.titles[i];
            const current = title === this.currentTitle;
            const zIndex = current ? n : n - i - 1;
            const renderData = { title: title, current: current, zIndex: zIndex };
            if (this.dynamicTabOptions && this.orientation === 'horizontal') {
                renderData.tabWidth = this.tabSize;
            }
            content[i] = this.renderer.renderTab(renderData);
        }
        virtualdom_1.VirtualDOM.render(content, this.contentNode);
        if (this.scrollBar) {
            if (!(this.dynamicTabOptions && this.isMouseOver)) {
                this.scrollBar.update();
            }
        }
    }
    onResize(msg) {
        super.onResize(msg);
        if (this.dynamicTabOptions) {
            this.updateTabs();
        }
        if (this.scrollBar) {
            if (this.currentIndex >= 0) {
                this.revealTab(this.currentIndex);
            }
            this.scrollBar.update();
        }
    }
    /**
     * Reveal the tab with the given index by moving the scroll bar if necessary.
     */
    revealTab(index) {
        if (this.pendingReveal) {
            // A reveal has already been scheduled
            return this.pendingReveal;
        }
        const result = new Promise((resolve, reject) => {
            // The tab might not have been created yet, so wait until the next frame
            window.requestAnimationFrame(() => {
                const tab = this.contentNode.children[index];
                if (tab && this.isVisible) {
                    const parent = this.scrollbarHost;
                    if (this.orientation === 'horizontal') {
                        const scroll = parent.scrollLeft;
                        const left = tab.offsetLeft;
                        if (scroll > left) {
                            parent.scrollLeft = left;
                        }
                        else {
                            const right = left + tab.clientWidth - parent.clientWidth;
                            if (scroll < right && tab.clientWidth < parent.clientWidth) {
                                parent.scrollLeft = right;
                            }
                        }
                    }
                    else {
                        const scroll = parent.scrollTop;
                        const top = tab.offsetTop;
                        if (scroll > top) {
                            parent.scrollTop = top;
                        }
                        else {
                            const bottom = top + tab.clientHeight - parent.clientHeight;
                            if (scroll < bottom && tab.clientHeight < parent.clientHeight) {
                                parent.scrollTop = bottom;
                            }
                        }
                    }
                }
                if (this.pendingReveal === result) {
                    this.pendingReveal = undefined;
                }
                resolve();
            });
        });
        this.pendingReveal = result;
        return result;
    }
    /**
     * Overrides the `contentNode` property getter in PhosphorJS' TabBar.
     */
    // @ts-expect-error TS2611 `TabBar<T>.contentNode` is declared as `readonly contentNode` but is implemented as a getter.
    get contentNode() {
        return this.tabBarContainer.getElementsByClassName(ToolbarAwareTabBar.Styles.TAB_BAR_CONTENT)[0];
    }
    /**
     * Overrides the scrollable host from the parent class.
     */
    get scrollbarHost() {
        return this.tabBarContainer;
    }
    get tabBarContainer() {
        return this.node.getElementsByClassName(ToolbarAwareTabBar.Styles.TAB_BAR_CONTENT_CONTAINER)[0];
    }
}
exports.ScrollableTabBar = ScrollableTabBar;
(function (ScrollableTabBar) {
    let Styles;
    (function (Styles) {
        Styles.TAB_BAR_CONTENT = 'p-TabBar-content';
        Styles.TAB_BAR_CONTENT_CONTAINER = 'p-TabBar-content-container';
    })(Styles = ScrollableTabBar.Styles || (ScrollableTabBar.Styles = {}));
})(ScrollableTabBar = exports.ScrollableTabBar || (exports.ScrollableTabBar = {}));
/**
 * Specialized scrollable tab-bar which comes with toolbar support.
 * Instead of the following DOM structure.
 *
 * +-------------------------+
 * |[TAB_0][TAB_1][TAB_2][TAB|
 * +-------------Scrollable--+
 *
 * There is a dedicated HTML element for toolbar which does **not** contained in the scrollable element.
 *
 * +-------------------------+-----------------+
 * |[TAB_0][TAB_1][TAB_2][TAB|         Toolbar |
 * +-------------Scrollable--+-Non-Scrollable-+
 *
 */
class ToolbarAwareTabBar extends ScrollableTabBar {
    constructor(tabBarToolbarRegistry, tabBarToolbarFactory, breadcrumbsRendererFactory, options, dynamicTabOptions) {
        super(options, dynamicTabOptions);
        this.tabBarToolbarRegistry = tabBarToolbarRegistry;
        this.tabBarToolbarFactory = tabBarToolbarFactory;
        this.breadcrumbsRendererFactory = breadcrumbsRendererFactory;
        this.breadcrumbsRenderer = this.breadcrumbsRendererFactory();
        this.addBreadcrumbs();
        this.toolbar = this.tabBarToolbarFactory();
        this.toDispose.push(this.tabBarToolbarRegistry.onDidChange(() => this.update()));
        this.toDispose.push(this.breadcrumbsRenderer);
        this.toDispose.push(this.breadcrumbsRenderer.onDidChangeActiveState(active => {
            this.node.classList.toggle('theia-tabBar-multirow', active);
            if (this.parent) {
                messaging_1.MessageLoop.sendMessage(this.parent, new messaging_1.Message('fit-request'));
            }
        }));
        this.node.classList.toggle('theia-tabBar-multirow', this.breadcrumbsRenderer.active);
        const handler = () => this.updateBreadcrumbs();
        this.currentChanged.connect(handler);
        this.toDispose.push(common_1.Disposable.create(() => this.currentChanged.disconnect(handler)));
    }
    async updateBreadcrumbs() {
        var _a;
        const current = (_a = this.currentTitle) === null || _a === void 0 ? void 0 : _a.owner;
        const uri = navigatable_types_1.NavigatableWidget.is(current) ? current.getResourceUri() : undefined;
        await this.breadcrumbsRenderer.refresh(uri);
    }
    onAfterAttach(msg) {
        if (this.toolbar) {
            if (this.toolbar.isAttached) {
                widgets_1.Widget.detach(this.toolbar);
            }
            widgets_1.Widget.attach(this.toolbar, this.topRow);
            if (this.breadcrumbsContainer) {
                this.node.appendChild(this.breadcrumbsContainer);
            }
            this.updateBreadcrumbs();
        }
        super.onAfterAttach(msg);
    }
    onBeforeDetach(msg) {
        if (this.toolbar && this.toolbar.isAttached) {
            this.toolbar.dispose();
        }
        super.onBeforeDetach(msg);
    }
    onUpdateRequest(msg) {
        super.onUpdateRequest(msg);
        this.updateToolbar();
    }
    updateToolbar() {
        var _a, _b;
        if (!this.toolbar) {
            return;
        }
        const widget = (_b = (_a = this.currentTitle) === null || _a === void 0 ? void 0 : _a.owner) !== null && _b !== void 0 ? _b : undefined;
        this.toolbar.updateTarget(widget);
        this.updateTabs();
    }
    handleEvent(event) {
        if (event instanceof MouseEvent) {
            if (this.toolbar && this.toolbar.shouldHandleMouseEvent(event) || this.isOver(event, this.openTabsContainer)) {
                // if the mouse event is over the toolbar part don't handle it.
                return;
            }
        }
        super.handleEvent(event);
    }
    isOver(event, element) {
        return element && event.target instanceof Element && element.contains(event.target);
    }
    /**
     * Restructures the DOM defined in PhosphorJS.
     *
     * By default the tabs (`li`) are contained in the `this.contentNode` (`ul`) which is wrapped in a `div` (`this.node`).
     * Instead of this structure, we add a container for the `this.contentNode` and for the toolbar.
     * The scrollbar will only work for the `ul` part but it does not affect the toolbar, so it can be on the right hand-side.
     */
    addBreadcrumbs() {
        this.breadcrumbsContainer = document.createElement('div');
        this.breadcrumbsContainer.classList.add('theia-tabBar-breadcrumb-row');
        this.breadcrumbsContainer.appendChild(this.breadcrumbsRenderer.host);
        this.node.appendChild(this.breadcrumbsContainer);
    }
}
exports.ToolbarAwareTabBar = ToolbarAwareTabBar;
/**
 * A specialized tab bar for side areas.
 */
class SideTabBar extends ScrollableTabBar {
    constructor(options) {
        super(options);
        /**
         * Emitted when a tab is added to the tab bar.
         */
        this.tabAdded = new signaling_1.Signal(this);
        /**
         * Side panels can be collapsed by clicking on the currently selected tab. This signal is
         * emitted when the mouse is released on the selected tab without initiating a drag.
         */
        this.collapseRequested = new signaling_1.Signal(this);
        /**
         * Emitted when the set of overflowing/hidden tabs changes.
         */
        this.tabsOverflowChanged = new signaling_1.Signal(this);
        this.toCancelViewContainerDND = new common_1.DisposableCollection();
        this.cancelViewContainerDND = () => {
            this.toCancelViewContainerDND.dispose();
        };
        /**
         * Handles `viewContainerPart` drag enter.
         */
        this.onDragEnter = (event) => {
            this.cancelViewContainerDND();
            if (event.mimeData.getData('application/vnd.phosphor.view-container-factory')) {
                event.preventDefault();
                event.stopPropagation();
            }
        };
        /**
         * Handle `viewContainerPart` drag over,
         * Defines the appropriate `dropAction` and opens the tab on which the mouse stands on for more than 800 ms.
         */
        this.onDragOver = (event) => {
            const factory = event.mimeData.getData('application/vnd.phosphor.view-container-factory');
            const widget = factory && factory();
            if (!widget) {
                event.dropAction = 'none';
                return;
            }
            event.preventDefault();
            event.stopPropagation();
            if (!this.toCancelViewContainerDND.disposed) {
                event.dropAction = event.proposedAction;
                return;
            }
            const { target, clientX, clientY } = event;
            if (target instanceof HTMLElement) {
                if (widget.options.disableDraggingToOtherContainers || widget.viewContainer.disableDNDBetweenContainers) {
                    event.dropAction = 'none';
                    target.classList.add('theia-cursor-no-drop');
                    this.toCancelViewContainerDND.push(common_1.Disposable.create(() => {
                        target.classList.remove('theia-cursor-no-drop');
                    }));
                }
                else {
                    event.dropAction = event.proposedAction;
                }
                const { top, bottom, left, right, height } = target.getBoundingClientRect();
                const mouseOnTop = (clientY - top) < (height / 2);
                const dropTargetClass = `drop-target-${mouseOnTop ? 'top' : 'bottom'}`;
                const tabs = this.contentNode.children;
                const targetTab = algorithm_1.ArrayExt.findFirstValue(tabs, t => domutils_1.ElementExt.hitTest(t, clientX, clientY));
                if (!targetTab) {
                    return;
                }
                targetTab.classList.add(dropTargetClass);
                this.toCancelViewContainerDND.push(common_1.Disposable.create(() => {
                    if (targetTab) {
                        targetTab.classList.remove(dropTargetClass);
                    }
                }));
                const openTabTimer = setTimeout(() => {
                    const title = this.titles.find(t => this.renderer.createTabId(t) === targetTab.id);
                    if (title) {
                        const mouseStillOnTab = clientX >= left && clientX <= right && clientY >= top && clientY <= bottom;
                        if (mouseStillOnTab) {
                            this.currentTitle = title;
                        }
                    }
                }, 800);
                this.toCancelViewContainerDND.push(common_1.Disposable.create(() => {
                    clearTimeout(openTabTimer);
                }));
            }
        };
        // Create the hidden content node (see `hiddenContentNode` for explanation)
        const hiddenContent = document.createElement('ul');
        hiddenContent.className = HIDDEN_CONTENT_CLASS;
        this.node.appendChild(hiddenContent);
    }
    /**
     * Tab bars of the left and right side panel are arranged vertically by rotating their labels.
     * Rotation is realized with the CSS `transform` property, which disrupts the browser's ability
     * to arrange the involved elements automatically. Therefore the elements are arranged explicitly
     * by the TabBarRenderer using inline `height` and `top` styles. However, the size of labels
     * must still be computed by the browser, so the rendering is performed in two steps: first the
     * tab bar is rendered horizontally inside a _hidden content node_, then it is rendered again
     * vertically inside the proper content node. After the first step, size information is gathered
     * from all labels so it can be applied during the second step.
     */
    get hiddenContentNode() {
        return this.node.getElementsByClassName(HIDDEN_CONTENT_CLASS)[0];
    }
    insertTab(index, value) {
        const result = super.insertTab(index, value);
        this.tabAdded.emit({ title: result });
        return result;
    }
    onAfterAttach(msg) {
        this.updateTabs();
        this.node.addEventListener('p-dragenter', this);
        this.node.addEventListener('p-dragover', this);
        this.node.addEventListener('p-dragleave', this);
        document.addEventListener('p-drop', this);
    }
    onAfterDetach(msg) {
        super.onAfterDetach(msg);
        this.node.removeEventListener('p-dragenter', this);
        this.node.removeEventListener('p-dragover', this);
        this.node.removeEventListener('p-dragleave', this);
        document.removeEventListener('p-drop', this);
    }
    onUpdateRequest(msg) {
        this.updateTabs();
    }
    onResize(msg) {
        // Tabs need to be updated if there are already overflowing tabs or the current tabs don't fit
        if (this.tabsOverflowData || this.node.clientHeight < this.contentNode.clientHeight) {
            this.updateTabs();
        }
    }
    // Queries the tabRowGap value of the content node. Needed to properly compute overflowing
    // tabs that should be hidden
    get tabRowGap() {
        // We assume that the tab row gap is static i.e. we compute it once an then cache it
        if (!this._rowGap) {
            this._rowGap = this.computeTabRowGap();
        }
        return this._rowGap;
    }
    computeTabRowGap() {
        var _a;
        const style = window.getComputedStyle(this.contentNode);
        const rowGapStyle = style.getPropertyValue('row-gap');
        const numericValue = parseFloat(rowGapStyle);
        const unit = (_a = rowGapStyle.match(/[a-zA-Z]+/)) === null || _a === void 0 ? void 0 : _a[0];
        const tempDiv = document.createElement('div');
        tempDiv.style.height = '1' + unit;
        document.body.appendChild(tempDiv);
        const rowGapValue = numericValue * tempDiv.offsetHeight;
        document.body.removeChild(tempDiv);
        return rowGapValue;
    }
    /**
     * Reveal the tab with the given index by moving it into the non-overflowing tabBar section
     * if necessary.
     */
    revealTab(index) {
        if (this.pendingReveal) {
            // A reveal has already been scheduled
            return this.pendingReveal;
        }
        const result = new Promise(resolve => {
            // The tab might not have been created yet, so wait until the next frame
            window.requestAnimationFrame(() => {
                if (this.tabsOverflowData && index >= this.tabsOverflowData.startIndex) {
                    const title = this.titles[index];
                    this.insertTab(this.tabsOverflowData.startIndex - 1, title);
                }
                if (this.pendingReveal === result) {
                    this.pendingReveal = undefined;
                }
                resolve();
            });
        });
        this.pendingReveal = result;
        return result;
    }
    /**
     * Render the tab bar in the _hidden content node_ (see `hiddenContentNode` for explanation),
     * then gather size information for labels and render it again in the proper content node.
     */
    updateTabs() {
        if (this.isAttached) {
            // Render into the invisible node
            this.renderTabs(this.hiddenContentNode);
            // Await a rendering frame
            window.requestAnimationFrame(() => {
                const hiddenContent = this.hiddenContentNode;
                const n = hiddenContent.children.length;
                const renderData = new Array(n);
                const availableWidth = this.node.clientHeight - this.tabRowGap;
                let actualWidth = 0;
                let overflowStartIndex = -1;
                for (let i = 0; i < n; i++) {
                    const hiddenTab = hiddenContent.children[i];
                    // Extract tab padding from the computed style
                    const tabStyle = window.getComputedStyle(hiddenTab);
                    const paddingTop = parseFloat(tabStyle.paddingTop);
                    const paddingBottom = parseFloat(tabStyle.paddingBottom);
                    const rd = {
                        paddingTop,
                        paddingBottom
                    };
                    // Extract label size from the DOM
                    const labelElements = hiddenTab.getElementsByClassName('p-TabBar-tabLabel');
                    if (labelElements.length === 1) {
                        const label = labelElements[0];
                        rd.labelSize = { width: label.clientWidth, height: label.clientHeight };
                    }
                    // Extract icon size from the DOM
                    const iconElements = hiddenTab.getElementsByClassName('p-TabBar-tabIcon');
                    if (iconElements.length === 1) {
                        const icon = iconElements[0];
                        rd.iconSize = { width: icon.clientWidth, height: icon.clientHeight };
                        actualWidth += icon.clientHeight + paddingTop + paddingBottom + this.tabRowGap;
                        if (actualWidth > availableWidth && i !== 0) {
                            rd.visible = false;
                            if (overflowStartIndex === -1) {
                                overflowStartIndex = i;
                            }
                        }
                        renderData[i] = rd;
                    }
                }
                // Special handling if only one element is overflowing.
                if (overflowStartIndex === n - 1 && renderData[overflowStartIndex]) {
                    if (!this.tabsOverflowData) {
                        overflowStartIndex--;
                        renderData[overflowStartIndex].visible = false;
                    }
                    else {
                        renderData[overflowStartIndex].visible = true;
                        overflowStartIndex = -1;
                    }
                }
                // Render into the visible node
                this.renderTabs(this.contentNode, renderData);
                this.computeOverflowingTabsData(overflowStartIndex);
            });
        }
    }
    computeOverflowingTabsData(startIndex) {
        // ensure that render tabs has completed
        window.requestAnimationFrame(() => {
            var _a, _b;
            if (startIndex === -1) {
                if (this.tabsOverflowData) {
                    this.tabsOverflowData = undefined;
                    this.tabsOverflowChanged.emit({ titles: [], startIndex });
                }
                return;
            }
            const newOverflowingTabs = this.titles.slice(startIndex);
            if (!this.tabsOverflowData) {
                this.tabsOverflowData = { titles: newOverflowingTabs, startIndex };
                this.tabsOverflowChanged.emit(this.tabsOverflowData);
                return;
            }
            if (((_b = newOverflowingTabs.length !== ((_a = this.tabsOverflowData) === null || _a === void 0 ? void 0 : _a.titles.length)) !== null && _b !== void 0 ? _b : 0) ||
                newOverflowingTabs.find((newTitle, i) => { var _a; return newTitle !== ((_a = this.tabsOverflowData) === null || _a === void 0 ? void 0 : _a.titles[i]); }) !== undefined) {
                this.tabsOverflowData = { titles: newOverflowingTabs, startIndex };
                this.tabsOverflowChanged.emit(this.tabsOverflowData);
            }
        });
    }
    /**
     * Render the tab bar using the given DOM element as host. The optional `renderData` is forwarded
     * to the TabBarRenderer.
     */
    renderTabs(host, renderData) {
        const titles = this.titles;
        const n = titles.length;
        const renderer = this.renderer;
        const currentTitle = this.currentTitle;
        const content = new Array(n);
        for (let i = 0; i < n; i++) {
            const title = titles[i];
            const current = title === currentTitle;
            const zIndex = current ? n : n - i - 1;
            let rd;
            if (renderData && i < renderData.length) {
                rd = { title, current, zIndex, ...renderData[i] };
            }
            else {
                rd = { title, current, zIndex };
            }
            // Based on how renderTabs() is called, assume renderData will be undefined when invoked for this.hiddenContentNode
            content[i] = renderer.renderTab(rd, true, renderData === undefined);
        }
        virtualdom_1.VirtualDOM.render(content, host);
    }
    /**
     * The following event processing is used to generate `collapseRequested` signals
     * when the mouse goes up on the currently selected tab without too much movement
     * between `mousedown` and `mouseup`. The movement threshold is the same that
     * is used by the superclass to detect a drag event. The `allowDeselect` option
     * of the TabBar constructor cannot be used here because it is triggered when the
     * mouse goes down, and thus collides with dragging.
     */
    handleEvent(event) {
        switch (event.type) {
            case 'mousedown':
                this.onMouseDown(event);
                super.handleEvent(event);
                break;
            case 'mouseup':
                super.handleEvent(event);
                this.onMouseUp(event);
                break;
            case 'mousemove':
                this.onMouseMove(event);
                super.handleEvent(event);
                break;
            case 'p-dragenter':
                this.onDragEnter(event);
                break;
            case 'p-dragover':
                this.onDragOver(event);
                break;
            case 'p-dragleave':
            case 'p-drop':
                this.cancelViewContainerDND();
                break;
            default:
                super.handleEvent(event);
        }
    }
    onMouseDown(event) {
        // Check for left mouse button and current mouse status
        if (event.button !== 0 || this.mouseData) {
            return;
        }
        // Check whether the mouse went down on the current tab
        const tabs = this.contentNode.children;
        const index = algorithm_1.ArrayExt.findFirstIndex(tabs, tab => domutils_1.ElementExt.hitTest(tab, event.clientX, event.clientY));
        if (index < 0 || index !== this.currentIndex) {
            return;
        }
        // Check whether the close button was clicked
        const icon = tabs[index].querySelector(this.renderer.closeIconSelector);
        if (icon && icon.contains(event.target)) {
            return;
        }
        this.mouseData = {
            pressX: event.clientX,
            pressY: event.clientY,
            mouseDownTabIndex: index
        };
    }
    onMouseUp(event) {
        // Check for left mouse button and current mouse status
        if (event.button !== 0 || !this.mouseData) {
            return;
        }
        // Check whether the mouse went up on the current tab
        const mouseDownTabIndex = this.mouseData.mouseDownTabIndex;
        this.mouseData = undefined;
        const tabs = this.contentNode.children;
        const index = algorithm_1.ArrayExt.findFirstIndex(tabs, tab => domutils_1.ElementExt.hitTest(tab, event.clientX, event.clientY));
        if (index < 0 || index !== mouseDownTabIndex) {
            return;
        }
        // Collapse the side bar
        this.collapseRequested.emit(this.titles[index]);
    }
    onMouseMove(event) {
        // Check for left mouse button and current mouse status
        if (event.button !== 0 || !this.mouseData) {
            return;
        }
        const data = this.mouseData;
        const dx = Math.abs(event.clientX - data.pressX);
        const dy = Math.abs(event.clientY - data.pressY);
        const threshold = SideTabBar.DRAG_THRESHOLD;
        if (dx >= threshold || dy >= threshold) {
            this.mouseData = undefined;
        }
    }
}
exports.SideTabBar = SideTabBar;
SideTabBar.DRAG_THRESHOLD = 5;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/shell/theia-dock-panel.js":
/*!****************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/shell/theia-dock-panel.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TheiaDockPanel = exports.BOTTOM_AREA_ID = exports.MAIN_AREA_ID = exports.ACTIVE_TABBAR_CLASS = exports.MAXIMIZED_CLASS = void 0;
const algorithm_1 = __webpack_require__(/*! @phosphor/algorithm */ "../node_modules/@phosphor/algorithm/lib/index.js");
const widgets_1 = __webpack_require__(/*! @phosphor/widgets */ "../node_modules/@phosphor/widgets/lib/index.js");
const signaling_1 = __webpack_require__(/*! @phosphor/signaling */ "../node_modules/@phosphor/signaling/lib/index.js");
const disposable_1 = __webpack_require__(/*! ../../common/disposable */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/disposable.js");
const widgets_2 = __webpack_require__(/*! ../widgets */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/widgets/index.js");
const common_1 = __webpack_require__(/*! ../../common */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/index.js");
exports.MAXIMIZED_CLASS = 'theia-maximized';
exports.ACTIVE_TABBAR_CLASS = 'theia-tabBar-active';
const VISIBLE_MENU_MAXIMIZED_CLASS = 'theia-visible-menu-maximized';
exports.MAIN_AREA_ID = 'theia-main-content-panel';
exports.BOTTOM_AREA_ID = 'theia-bottom-content-panel';
/**
 * This specialization of DockPanel adds various events that are used for implementing the
 * side panels of the application shell.
 */
class TheiaDockPanel extends widgets_1.DockPanel {
    constructor(options, preferences) {
        super(options);
        this.preferences = preferences;
        /**
         * Emitted when a widget is added to the panel.
         */
        this.widgetAdded = new signaling_1.Signal(this);
        /**
         * Emitted when a widget is activated by calling `activateWidget`.
         */
        this.widgetActivated = new signaling_1.Signal(this);
        /**
         * Emitted when a widget is removed from the panel.
         */
        this.widgetRemoved = new signaling_1.Signal(this);
        this.onDidToggleMaximizedEmitter = new common_1.Emitter();
        this.onDidToggleMaximized = this.onDidToggleMaximizedEmitter.event;
        this.onDidChangeCurrentEmitter = new common_1.Emitter();
        this.toDisposeOnMarkAsCurrent = new disposable_1.DisposableCollection();
        this.toDisposeOnToggleMaximized = new disposable_1.DisposableCollection();
        this['_onCurrentChanged'] = (sender, args) => {
            this.markAsCurrent(args.currentTitle || undefined);
            super['_onCurrentChanged'](sender, args);
        };
        this['_onTabActivateRequested'] = (sender, args) => {
            this.markAsCurrent(args.title);
            super['_onTabActivateRequested'](sender, args);
        };
        if (preferences) {
            preferences.onPreferenceChanged(preference => {
                if (!this.isElectron() && preference.preferenceName === 'window.menuBarVisibility' && (preference.newValue === 'visible' || preference.oldValue === 'visible')) {
                    this.handleMenuBarVisibility(preference.newValue);
                }
            });
        }
    }
    get onDidChangeCurrent() {
        return this.onDidChangeCurrentEmitter.event;
    }
    isElectron() {
        return common_1.environment.electron.is();
    }
    handleMenuBarVisibility(newValue) {
        const areaContainer = this.node.parentElement;
        const maximizedElement = this.getMaximizedElement();
        if (areaContainer === maximizedElement) {
            if (newValue === 'visible') {
                this.addClass(VISIBLE_MENU_MAXIMIZED_CLASS);
            }
            else {
                this.removeClass(VISIBLE_MENU_MAXIMIZED_CLASS);
            }
        }
    }
    get currentTitle() {
        return this._currentTitle;
    }
    get currentTabBar() {
        return this._currentTitle && this.findTabBar(this._currentTitle);
    }
    findTabBar(title) {
        return (0, algorithm_1.find)(this.tabBars(), bar => algorithm_1.ArrayExt.firstIndexOf(bar.titles, title) > -1);
    }
    markAsCurrent(title) {
        this.toDisposeOnMarkAsCurrent.dispose();
        this._currentTitle = title;
        this.markActiveTabBar(title);
        if (title) {
            const resetCurrent = () => this.markAsCurrent(undefined);
            title.owner.disposed.connect(resetCurrent);
            this.toDisposeOnMarkAsCurrent.push(disposable_1.Disposable.create(() => title.owner.disposed.disconnect(resetCurrent)));
        }
        this.onDidChangeCurrentEmitter.fire(title);
    }
    markActiveTabBar(title) {
        const tabBars = (0, algorithm_1.toArray)(this.tabBars());
        tabBars.forEach(tabBar => tabBar.removeClass(exports.ACTIVE_TABBAR_CLASS));
        const activeTabBar = title && this.findTabBar(title);
        if (activeTabBar) {
            activeTabBar.addClass(exports.ACTIVE_TABBAR_CLASS);
        }
        else if (tabBars.length > 0) {
            // At least one tabbar needs to be active
            tabBars[0].addClass(exports.ACTIVE_TABBAR_CLASS);
        }
    }
    addWidget(widget, options) {
        if (this.mode === 'single-document' && widget.parent === this) {
            return;
        }
        super.addWidget(widget, options);
        this.widgetAdded.emit(widget);
        this.markActiveTabBar(widget.title);
    }
    activateWidget(widget) {
        super.activateWidget(widget);
        this.widgetActivated.emit(widget);
        this.markActiveTabBar(widget.title);
    }
    onChildRemoved(msg) {
        super.onChildRemoved(msg);
        this.widgetRemoved.emit(msg.child);
    }
    nextTabBarWidget(widget) {
        const current = this.findTabBar(widget.title);
        const next = current && this.nextTabBarInPanel(current);
        return next && next.currentTitle && next.currentTitle.owner || undefined;
    }
    nextTabBarInPanel(tabBar) {
        const tabBars = (0, algorithm_1.toArray)(this.tabBars());
        const index = tabBars.indexOf(tabBar);
        if (index !== -1) {
            return tabBars[index + 1];
        }
        return undefined;
    }
    previousTabBarWidget(widget) {
        const current = this.findTabBar(widget.title);
        const previous = current && this.previousTabBarInPanel(current);
        return previous && previous.currentTitle && previous.currentTitle.owner || undefined;
    }
    previousTabBarInPanel(tabBar) {
        const tabBars = (0, algorithm_1.toArray)(this.tabBars());
        const index = tabBars.indexOf(tabBar);
        if (index !== -1) {
            return tabBars[index - 1];
        }
        return undefined;
    }
    toggleMaximized() {
        var _a;
        const areaContainer = this.node.parentElement;
        if (!areaContainer) {
            return;
        }
        const maximizedElement = this.getMaximizedElement();
        if (areaContainer === maximizedElement) {
            this.toDisposeOnToggleMaximized.dispose();
            return;
        }
        if (this.isAttached) {
            widgets_2.UnsafeWidgetUtilities.detach(this);
        }
        maximizedElement.style.display = 'block';
        this.addClass(exports.MAXIMIZED_CLASS);
        const preference = (_a = this.preferences) === null || _a === void 0 ? void 0 : _a.get('window.menuBarVisibility');
        if (!this.isElectron() && preference === 'visible') {
            this.addClass(VISIBLE_MENU_MAXIMIZED_CLASS);
        }
        widgets_2.UnsafeWidgetUtilities.attach(this, maximizedElement);
        this.fit();
        this.onDidToggleMaximizedEmitter.fire(this);
        this.toDisposeOnToggleMaximized.push(disposable_1.Disposable.create(() => {
            maximizedElement.style.display = 'none';
            this.removeClass(exports.MAXIMIZED_CLASS);
            this.onDidToggleMaximizedEmitter.fire(this);
            if (!this.isElectron()) {
                this.removeClass(VISIBLE_MENU_MAXIMIZED_CLASS);
            }
            if (this.isAttached) {
                widgets_2.UnsafeWidgetUtilities.detach(this);
            }
            widgets_2.UnsafeWidgetUtilities.attach(this, areaContainer);
            this.fit();
        }));
        const layout = this.layout;
        if (layout instanceof widgets_1.DockLayout) {
            const onResize = layout['onResize'];
            layout['onResize'] = () => onResize.bind(layout)(widgets_1.Widget.ResizeMessage.UnknownSize);
            this.toDisposeOnToggleMaximized.push(disposable_1.Disposable.create(() => layout['onResize'] = onResize));
        }
        const removedListener = () => {
            if (!this.widgets().next()) {
                this.toDisposeOnToggleMaximized.dispose();
            }
        };
        this.widgetRemoved.connect(removedListener);
        this.toDisposeOnToggleMaximized.push(disposable_1.Disposable.create(() => this.widgetRemoved.disconnect(removedListener)));
    }
    getMaximizedElement() {
        if (!this.maximizedElement) {
            this.maximizedElement = document.createElement('div');
            this.maximizedElement.style.display = 'none';
            document.body.appendChild(this.maximizedElement);
        }
        return this.maximizedElement;
    }
}
exports.TheiaDockPanel = TheiaDockPanel;
(function (TheiaDockPanel) {
    TheiaDockPanel.Factory = Symbol('TheiaDockPanel#Factory');
})(TheiaDockPanel = exports.TheiaDockPanel || (exports.TheiaDockPanel = {}));


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/shell/view-contribution.js":
/*!*****************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/shell/view-contribution.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AbstractViewContribution = exports.bindViewContribution = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/es/inversify.js");
const common_1 = __webpack_require__(/*! ../../common */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/index.js");
const keybinding_1 = __webpack_require__(/*! ../keybinding */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/keybinding.js");
const widget_manager_1 = __webpack_require__(/*! ../widget-manager */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/widget-manager.js");
const common_frontend_contribution_1 = __webpack_require__(/*! ../common-frontend-contribution */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/common-frontend-contribution.js");
const application_shell_1 = __webpack_require__(/*! ./application-shell */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/shell/application-shell.js");
const quick_input_1 = __webpack_require__(/*! ../quick-input */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/quick-input/index.js");
function bindViewContribution(bind, identifier) {
    const syntax = bind(identifier).toSelf().inSingletonScope();
    bind(common_1.CommandContribution).toService(identifier);
    bind(keybinding_1.KeybindingContribution).toService(identifier);
    bind(common_1.MenuContribution).toService(identifier);
    return syntax;
}
exports.bindViewContribution = bindViewContribution;
/**
 * An abstract superclass for frontend contributions that add a view to the application shell.
 */
let AbstractViewContribution = class AbstractViewContribution {
    constructor(options) {
        this.options = options;
        if (options.toggleCommandId) {
            this.toggleCommand = {
                id: options.toggleCommandId,
                label: 'Toggle ' + this.viewLabel + ' View'
            };
        }
    }
    get viewId() {
        return this.options.widgetId;
    }
    get viewLabel() {
        return this.options.widgetName;
    }
    get defaultViewOptions() {
        return this.options.defaultWidgetOptions;
    }
    get widget() {
        return this.widgetManager.getOrCreateWidget(this.viewId);
    }
    tryGetWidget() {
        return this.widgetManager.tryGetWidget(this.viewId);
    }
    async openView(args = {}) {
        const shell = this.shell;
        const widget = await this.widgetManager.getOrCreateWidget(this.options.viewContainerId || this.viewId);
        const tabBar = shell.getTabBarFor(widget);
        const area = shell.getAreaFor(widget);
        if (!tabBar) {
            // The widget is not attached yet, so add it to the shell
            const widgetArgs = {
                ...this.defaultViewOptions,
                ...args
            };
            await shell.addWidget(widget, widgetArgs);
        }
        else if (args.toggle && area && shell.isExpanded(area) && tabBar.currentTitle === widget.title) {
            // The widget is attached and visible, so collapse the containing panel (toggle)
            switch (area) {
                case 'left':
                case 'right':
                    await shell.collapsePanel(area);
                    break;
                case 'bottom':
                    // Don't collapse the bottom panel if it's currently split
                    if (shell.bottomAreaTabBars.length === 1) {
                        await shell.collapsePanel('bottom');
                    }
                    break;
                default:
                    // The main area cannot be collapsed, so close the widget
                    await this.closeView();
            }
            return this.widget;
        }
        if (widget.isAttached && args.activate) {
            await shell.activateWidget(this.viewId);
        }
        else if (widget.isAttached && args.reveal) {
            await shell.revealWidget(this.viewId);
        }
        return this.widget;
    }
    registerCommands(commands) {
        var _a;
        if (this.toggleCommand) {
            commands.registerCommand(this.toggleCommand, {
                execute: () => this.toggleView()
            });
        }
        (_a = this.quickView) === null || _a === void 0 ? void 0 : _a.registerItem({
            label: this.viewLabel,
            open: () => this.openView({ activate: true })
        });
    }
    async closeView() {
        const widget = await this.shell.closeWidget(this.viewId);
        return widget;
    }
    toggleView() {
        return this.openView({
            toggle: true,
            activate: true
        });
    }
    registerMenus(menus) {
        if (this.toggleCommand) {
            menus.registerMenuAction(common_frontend_contribution_1.CommonMenus.VIEW_VIEWS, {
                commandId: this.toggleCommand.id,
                label: this.viewLabel
            });
        }
    }
    registerKeybindings(keybindings) {
        if (this.toggleCommand && this.options.toggleKeybinding) {
            keybindings.registerKeybinding({
                command: this.toggleCommand.id,
                keybinding: this.options.toggleKeybinding
            });
        }
    }
};
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(widget_manager_1.WidgetManager),
    (0, tslib_1.__metadata)("design:type", widget_manager_1.WidgetManager)
], AbstractViewContribution.prototype, "widgetManager", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(application_shell_1.ApplicationShell),
    (0, tslib_1.__metadata)("design:type", application_shell_1.ApplicationShell)
], AbstractViewContribution.prototype, "shell", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(quick_input_1.QuickViewService),
    (0, inversify_1.optional)(),
    (0, tslib_1.__metadata)("design:type", quick_input_1.QuickViewService)
], AbstractViewContribution.prototype, "quickView", void 0);
AbstractViewContribution = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)(),
    (0, tslib_1.__metadata)("design:paramtypes", [Object])
], AbstractViewContribution);
exports.AbstractViewContribution = AbstractViewContribution;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/status-bar/index.js":
/*!**********************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/status-bar/index.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.bindStatusBar = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
const status_bar_1 = __webpack_require__(/*! ./status-bar */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/status-bar/status-bar.js");
const status_bar_types_1 = __webpack_require__(/*! ./status-bar-types */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/status-bar/status-bar-types.js");
const status_bar_view_model_1 = __webpack_require__(/*! ./status-bar-view-model */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/status-bar/status-bar-view-model.js");
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./status-bar */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/status-bar/status-bar.js"), exports);
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./status-bar-types */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/status-bar/status-bar-types.js"), exports);
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./status-bar-view-model */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/status-bar/status-bar-view-model.js"), exports);
function bindStatusBar(bind) {
    bind(status_bar_1.StatusBarImpl).toSelf().inSingletonScope();
    bind(status_bar_types_1.StatusBar).to(status_bar_1.StatusBarImpl).inSingletonScope();
    bind(status_bar_view_model_1.StatusBarViewModel).toSelf().inSingletonScope();
}
exports.bindStatusBar = bindStatusBar;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/status-bar/status-bar-types.js":
/*!*********************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/status-bar/status-bar-types.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2022 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.StatusBar = exports.STATUSBAR_WIDGET_FACTORY_ID = exports.StatusBarAlignment = void 0;
var StatusBarAlignment;
(function (StatusBarAlignment) {
    StatusBarAlignment[StatusBarAlignment["LEFT"] = 0] = "LEFT";
    StatusBarAlignment[StatusBarAlignment["RIGHT"] = 1] = "RIGHT";
})(StatusBarAlignment = exports.StatusBarAlignment || (exports.StatusBarAlignment = {}));
exports.STATUSBAR_WIDGET_FACTORY_ID = 'statusBar';
exports.StatusBar = Symbol('StatusBar');


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/status-bar/status-bar-view-model.js":
/*!**************************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/status-bar/status-bar-view-model.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2022 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.StatusBarViewModel = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/es/inversify.js");
const common_1 = __webpack_require__(/*! ../../common */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/index.js");
const status_bar_types_1 = __webpack_require__(/*! ./status-bar-types */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/status-bar/status-bar-types.js");
let StatusBarViewModel = class StatusBarViewModel {
    constructor() {
        this.leftTree = new Array();
        this.rightTree = new Array();
        this.containerPointers = new Map();
        this.onDidChangeEmitter = new common_1.Emitter();
    }
    get onDidChange() {
        return this.onDidChangeEmitter.event;
    }
    *getLeft() {
        yield* this.getEntries(this.leftTree);
    }
    *getRight() {
        yield* this.getEntries(this.rightTree);
    }
    *getEntries(list) {
        for (const item of list) {
            yield* this.getChildren(item.leftChildren, status_bar_types_1.StatusBarAlignment.LEFT);
            yield { entry: item.head, id: item.id };
            yield* this.getChildren(item.rightChildren, status_bar_types_1.StatusBarAlignment.RIGHT);
        }
    }
    *getChildren(list, alignment, compact) {
        var _a, _b, _c;
        for (const item of list) {
            if (item.leftChildren.length || item.rightChildren.length) {
                console.warn(`Found embedded entries with affinity to ${item.id}. They will inherit alignment and compactness of parent.`);
            }
            yield* this.getChildren(item.leftChildren, alignment, (_a = item.head.affinity) === null || _a === void 0 ? void 0 : _a.compact);
            yield { entry: item.head, id: item.id, alignment, compact: compact || ((_b = item.head.affinity) === null || _b === void 0 ? void 0 : _b.compact) };
            yield* this.getChildren(item.rightChildren, alignment, (_c = item.head.affinity) === null || _c === void 0 ? void 0 : _c.compact);
        }
    }
    set(id, entry) {
        const existing = this.findElement(id);
        if (existing) {
            const oldEntry = existing.entry.head;
            existing.entry.head = entry;
            if (!this.shareSameContainer(entry, oldEntry)) {
                this.relocate(existing);
            }
            else if (!this.shareSamePriority(entry, oldEntry)) {
                this.sort(existing.container);
            }
        }
        else {
            const container = this.getContainerFor(entry);
            const viewModelEntry = { id, head: entry, leftChildren: [], rightChildren: [] };
            container.push(viewModelEntry);
            this.containerPointers.set(id, container);
            const pendingDependents = this.getDependentsOf(id);
            pendingDependents.forEach(newChild => this.relocate(newChild, true));
            this.sortDependents(viewModelEntry.leftChildren);
            this.sortDependents(viewModelEntry.rightChildren);
            this.sort(container);
        }
        this.onDidChangeEmitter.fire();
    }
    relocate(locationData, dontSort) {
        const newContainer = this.getContainerFor(locationData.entry.head);
        locationData.container.splice(locationData.index, 1);
        newContainer.push(locationData.entry);
        this.containerPointers.set(locationData.entry.id, newContainer);
        if (!dontSort) {
            this.sort(newContainer);
        }
    }
    getContainerFor(entry) {
        const affinityParent = entry.affinity && this.findElement(entry.affinity.id);
        if (affinityParent) {
            return entry.affinity.alignment === status_bar_types_1.StatusBarAlignment.LEFT ? affinityParent.entry.leftChildren : affinityParent.entry.rightChildren;
        }
        return entry.alignment === status_bar_types_1.StatusBarAlignment.LEFT ? this.leftTree : this.rightTree;
    }
    getDependentsOf(id) {
        var _a, _b, _c, _d;
        const dependents = [];
        for (let index = 0; index < this.rightTree.length || index < this.leftTree.length; index++) {
            if (((_b = (_a = this.rightTree[index]) === null || _a === void 0 ? void 0 : _a.head.affinity) === null || _b === void 0 ? void 0 : _b.id) === id) {
                dependents.push({ index, container: this.rightTree, entry: this.rightTree[index] });
            }
            if (((_d = (_c = this.leftTree[index]) === null || _c === void 0 ? void 0 : _c.head.affinity) === null || _d === void 0 ? void 0 : _d.id) === id) {
                dependents.push({ index, container: this.leftTree, entry: this.leftTree[index] });
            }
        }
        return dependents;
    }
    remove(id) {
        const location = this.findElement(id);
        if (location) {
            this.containerPointers.delete(id);
            location.container.splice(location.index, 1);
            const originalLeftLength = this.leftTree.length;
            const originalRightLength = this.rightTree.length;
            this.inline(location.entry.leftChildren, location.entry.rightChildren);
            if (originalLeftLength !== this.leftTree.length) {
                this.sortTop(this.leftTree);
            }
            if (originalRightLength !== this.rightTree.length) {
                this.sortTop(this.rightTree);
            }
            this.onDidChangeEmitter.fire();
            return true;
        }
        return false;
    }
    shareSamePositionParameters(left, right) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        if (((_a = left.priority) !== null && _a !== void 0 ? _a : 0) !== ((_b = right.priority) !== null && _b !== void 0 ? _b : 0)) {
            return false;
        }
        if (this.affinityMatters(left, right)) {
            return ((_c = left.affinity) === null || _c === void 0 ? void 0 : _c.id) === ((_d = right.affinity) === null || _d === void 0 ? void 0 : _d.id) && ((_e = left.affinity) === null || _e === void 0 ? void 0 : _e.alignment) === ((_f = right.affinity) === null || _f === void 0 ? void 0 : _f.alignment) && ((_g = left.affinity) === null || _g === void 0 ? void 0 : _g.compact) === ((_h = right.affinity) === null || _h === void 0 ? void 0 : _h.compact);
        }
        return left.alignment === right.alignment;
    }
    shareSameContainer(left, right) {
        var _a, _b, _c, _d;
        if (this.affinityMatters(left, right)) {
            return ((_a = left.affinity) === null || _a === void 0 ? void 0 : _a.id) === ((_b = right.affinity) === null || _b === void 0 ? void 0 : _b.id) && ((_c = left.affinity) === null || _c === void 0 ? void 0 : _c.alignment) === ((_d = right.affinity) === null || _d === void 0 ? void 0 : _d.alignment);
        }
        return left.alignment === right.alignment;
    }
    shareSamePriority(left, right) {
        var _a, _b, _c, _d;
        return ((_a = left.priority) !== null && _a !== void 0 ? _a : 0) === ((_b = right.priority) !== null && _b !== void 0 ? _b : 0) && (!this.affinityMatters(left, right) || ((_c = left.affinity) === null || _c === void 0 ? void 0 : _c.compact) === ((_d = right.affinity) === null || _d === void 0 ? void 0 : _d.compact));
    }
    affinityMatters(left, right) {
        return (left.affinity && this.containerPointers.has(left.affinity.id)) || Boolean(right.affinity && this.containerPointers.has(right.affinity.id));
    }
    findElement(id) {
        const container = id !== undefined && this.containerPointers.get(id);
        if (container) {
            const index = container.findIndex(candidate => candidate.id === id);
            if (index !== -1) {
                return { index, entry: container[index], container };
            }
        }
    }
    sort(container) {
        if (container === this.leftTree || container === this.rightTree) {
            this.sortTop(container);
        }
        else {
            this.sortDependents(container);
        }
    }
    sortTop(container) {
        container.sort((left, right) => this.comparePriority(left, right));
    }
    comparePriority(left, right) {
        var _a, _b;
        return ((_a = right.head.priority) !== null && _a !== void 0 ? _a : 0) - ((_b = left.head.priority) !== null && _b !== void 0 ? _b : 0);
    }
    sortDependents(container) {
        container.sort((left, right) => {
            var _a, _b, _c;
            if (((_a = left.head.affinity) === null || _a === void 0 ? void 0 : _a.compact) && !((_b = right.head.affinity) === null || _b === void 0 ? void 0 : _b.compact)) {
                return common_1.ArrayUtils.Sort.LeftBeforeRight;
            }
            else if ((_c = right.head.affinity) === null || _c === void 0 ? void 0 : _c.compact) {
                return common_1.ArrayUtils.Sort.RightBeforeLeft;
            }
            return this.comparePriority(left, right);
        });
    }
    inline(left, right) {
        for (const entry of left) {
            this.doAddTop(entry);
        }
        for (const entry of right) {
            this.doAddTop(entry);
        }
    }
    doAddTop(entry) {
        const container = entry.head.alignment === status_bar_types_1.StatusBarAlignment.LEFT ? this.leftTree : this.rightTree;
        this.containerPointers.set(entry.id, container);
        container.push(entry);
    }
};
StatusBarViewModel = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)()
], StatusBarViewModel);
exports.StatusBarViewModel = StatusBarViewModel;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/status-bar/status-bar.js":
/*!***************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/status-bar/status-bar.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2017-2018 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.StatusBarImpl = exports.StatusBarAlignment = exports.StatusBar = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
const React = __webpack_require__(/*! react */ "../node_modules/react/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/es/inversify.js");
const debounce = __webpack_require__(/*! lodash.debounce */ "../node_modules/lodash.debounce/index.js");
const common_1 = __webpack_require__(/*! ../../common */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/index.js");
const react_widget_1 = __webpack_require__(/*! ../widgets/react-widget */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/widgets/react-widget.js");
const frontend_application_state_1 = __webpack_require__(/*! ../frontend-application-state */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/frontend-application-state.js");
const label_parser_1 = __webpack_require__(/*! ../label-parser */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/label-parser.js");
const preferences_1 = __webpack_require__(/*! ../preferences */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/preferences/index.js");
const status_bar_types_1 = __webpack_require__(/*! ./status-bar-types */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/status-bar/status-bar-types.js");
Object.defineProperty(exports, "StatusBar", ({ enumerable: true, get: function () { return status_bar_types_1.StatusBar; } }));
Object.defineProperty(exports, "StatusBarAlignment", ({ enumerable: true, get: function () { return status_bar_types_1.StatusBarAlignment; } }));
const status_bar_view_model_1 = __webpack_require__(/*! ./status-bar-view-model */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/status-bar/status-bar-view-model.js");
const hover_service_1 = __webpack_require__(/*! ../hover-service */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/hover-service.js");
const widgets_1 = __webpack_require__(/*! ../widgets */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/widgets/index.js");
let StatusBarImpl = class StatusBarImpl extends react_widget_1.ReactWidget {
    constructor(commands, entryService, applicationStateService, preferences, viewModel, hoverService) {
        super();
        this.commands = commands;
        this.entryService = entryService;
        this.applicationStateService = applicationStateService;
        this.preferences = preferences;
        this.viewModel = viewModel;
        this.hoverService = hoverService;
        this.debouncedUpdate = debounce(() => this.update(), 50);
        delete this.scrollOptions;
        this.id = 'theia-statusBar';
        this.addClass('noselect');
        // Hide the status bar until the `workbench.statusBar.visible` preference returns with a `true` value.
        this.hide();
        this.preferences.ready.then(() => {
            const preferenceValue = this.preferences.get('workbench.statusBar.visible', true);
            this.setHidden(!preferenceValue);
        });
        this.toDispose.push(this.preferences.onPreferenceChanged(preference => {
            if (preference.preferenceName === 'workbench.statusBar.visible') {
                this.setHidden(!preference.newValue);
            }
        }));
        this.toDispose.push(this.viewModel.onDidChange(() => this.debouncedUpdate()));
    }
    get ready() {
        return this.applicationStateService.reachedAnyState('initialized_layout', 'ready');
    }
    async setElement(id, entry) {
        await this.ready;
        this.viewModel.set(id, entry);
    }
    async removeElement(id) {
        await this.ready;
        this.viewModel.remove(id);
    }
    async setBackgroundColor(color) {
        await this.ready;
        this.internalSetBackgroundColor(color);
        this.update();
    }
    internalSetBackgroundColor(color) {
        this.backgroundColor = color;
        this.node.style.backgroundColor = this.backgroundColor || '';
    }
    async setColor(color) {
        await this.ready;
        this.internalSetColor(color);
        this.update();
    }
    internalSetColor(color) {
        this.color = color;
    }
    render() {
        const leftEntries = Array.from(this.viewModel.getLeft(), entry => this.renderElement(entry));
        const rightEntries = Array.from(this.viewModel.getRight(), entry => this.renderElement(entry));
        return React.createElement(React.Fragment, null,
            React.createElement("div", { className: 'area left' }, leftEntries),
            React.createElement("div", { className: 'area right' }, rightEntries));
    }
    onclick(entry) {
        return () => {
            if (entry.command) {
                const args = entry.arguments || [];
                this.commands.executeCommand(entry.command, ...args);
            }
        };
    }
    createAttributes(viewEntry) {
        const attrs = {};
        const entry = viewEntry.entry;
        attrs.id = 'status-bar-' + viewEntry.id;
        attrs.className = 'element';
        if (entry.command || entry.onclick || entry.tooltip) {
            attrs.className += ' hasCommand';
        }
        if (entry.command) {
            attrs.onClick = this.onclick(entry);
        }
        else if (entry.onclick) {
            attrs.onClick = e => { var _a; return (_a = entry.onclick) === null || _a === void 0 ? void 0 : _a.call(entry, e.nativeEvent); };
        }
        if (viewEntry.compact && viewEntry.alignment !== undefined) {
            attrs.className += viewEntry.alignment === status_bar_types_1.StatusBarAlignment.RIGHT ? ' compact-right' : ' compact-left';
        }
        if (entry.tooltip) {
            attrs.onMouseEnter = e => this.hoverService.requestHover({
                content: entry.tooltip,
                target: e.currentTarget,
                position: 'top'
            });
        }
        if (entry.className) {
            attrs.className += ' ' + entry.className;
        }
        if (entry.accessibilityInformation) {
            attrs['aria-label'] = entry.accessibilityInformation.label;
            attrs.role = entry.accessibilityInformation.role;
        }
        else {
            attrs['aria-label'] = [entry.text, entry.tooltip].join(', ');
        }
        if (entry.backgroundColor) {
            attrs.className += ' has-background';
        }
        attrs.style = {
            color: entry.color || this.color,
            backgroundColor: entry.backgroundColor
        };
        return attrs;
    }
    renderElement(entry) {
        const childStrings = this.entryService.parse(entry.entry.text);
        const children = [];
        childStrings.forEach((val, key) => {
            if (label_parser_1.LabelIcon.is(val)) {
                const animation = val.animation ? ` fa-${val.animation}` : '';
                if (val.name.startsWith('codicon-')) {
                    children.push(React.createElement("span", { key: key, className: `codicon ${val.name}${animation}` }));
                }
                else if (val.name.startsWith('fa-')) {
                    children.push(React.createElement("span", { key: key, className: `fa ${val.name}${animation}` }));
                }
                else {
                    children.push(React.createElement("span", { key: key, className: `${(0, widgets_1.codicon)(val.name)}${animation}` }));
                }
            }
            else {
                children.push(React.createElement("span", { key: key }, val));
            }
        });
        return React.createElement("div", { key: entry.id, ...this.createAttributes(entry) }, children);
    }
};
StatusBarImpl = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)(),
    (0, tslib_1.__param)(0, (0, inversify_1.inject)(common_1.CommandService)),
    (0, tslib_1.__param)(1, (0, inversify_1.inject)(label_parser_1.LabelParser)),
    (0, tslib_1.__param)(2, (0, inversify_1.inject)(frontend_application_state_1.FrontendApplicationStateService)),
    (0, tslib_1.__param)(3, (0, inversify_1.inject)(preferences_1.PreferenceService)),
    (0, tslib_1.__param)(4, (0, inversify_1.inject)(status_bar_view_model_1.StatusBarViewModel)),
    (0, tslib_1.__param)(5, (0, inversify_1.inject)(hover_service_1.HoverService)),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, label_parser_1.LabelParser,
        frontend_application_state_1.FrontendApplicationStateService, Object, status_bar_view_model_1.StatusBarViewModel,
        hover_service_1.HoverService])
], StatusBarImpl);
exports.StatusBarImpl = StatusBarImpl;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/storage-service.js":
/*!*********************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/storage-service.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2017 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LocalStorageService = exports.StorageService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/es/inversify.js");
const logger_1 = __webpack_require__(/*! ../common/logger */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/logger.js");
const message_service_1 = __webpack_require__(/*! ../common/message-service */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/message-service.js");
const window_service_1 = __webpack_require__(/*! ./window/window-service */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/window/window-service.js");
const environment_1 = __webpack_require__(/*! @theia/application-package/lib/environment */ "../node_modules/@theia/editor/node_modules/@theia/application-package/lib/environment.js");
exports.StorageService = Symbol('IStorageService');
let LocalStorageService = class LocalStorageService {
    init() {
        if (typeof window !== 'undefined' && window.localStorage) {
            this.storage = window.localStorage;
            this.testLocalStorage();
        }
        else {
            this.logger.warn(log => log("The browser doesn't support localStorage. state will not be persisted across sessions."));
            this.storage = {};
        }
    }
    setData(key, data) {
        if (data !== undefined) {
            try {
                this.storage[this.prefix(key)] = JSON.stringify(data);
            }
            catch (e) {
                this.showDiskQuotaExceededMessage();
            }
        }
        else {
            delete this.storage[this.prefix(key)];
        }
        return Promise.resolve();
    }
    getData(key, defaultValue) {
        const result = this.storage[this.prefix(key)];
        if (result === undefined) {
            return Promise.resolve(defaultValue);
        }
        return Promise.resolve(JSON.parse(result));
    }
    prefix(key) {
        if (environment_1.environment.electron.is()) {
            return `theia:${key}`;
        }
        const pathname = typeof window === 'undefined' ? '' : window.location.pathname;
        return `theia:${pathname}:${key}`;
    }
    async showDiskQuotaExceededMessage() {
        const READ_INSTRUCTIONS_ACTION = 'Read Instructions';
        const CLEAR_STORAGE_ACTION = 'Clear Local Storage';
        const ERROR_MESSAGE = `Your preferred browser's local storage is almost full.
        To be able to save your current workspace layout or data, you may need to free up some space.
        You can refer to Theia's documentation page for instructions on how to manually clean
        your browser's local storage or choose to clear all.`;
        this.messageService.warn(ERROR_MESSAGE, READ_INSTRUCTIONS_ACTION, CLEAR_STORAGE_ACTION).then(async (selected) => {
            if (READ_INSTRUCTIONS_ACTION === selected) {
                this.windowService.openNewWindow('https://github.com/eclipse-theia/theia/wiki/Cleaning-Local-Storage', { external: true });
            }
            else if (CLEAR_STORAGE_ACTION === selected) {
                this.clearStorage();
            }
        });
    }
    /**
     * Verify if there is still some spaces left to save another workspace configuration into the local storage of your browser.
     * If we are close to the limit, use a dialog to notify the user.
     */
    testLocalStorage() {
        const keyTest = this.prefix('Test');
        try {
            this.storage[keyTest] = JSON.stringify(new Array(60000));
        }
        catch (error) {
            this.showDiskQuotaExceededMessage();
        }
        finally {
            this.storage.removeItem(keyTest);
        }
    }
    clearStorage() {
        this.storage.clear();
    }
};
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(logger_1.ILogger),
    (0, tslib_1.__metadata)("design:type", Object)
], LocalStorageService.prototype, "logger", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(message_service_1.MessageService),
    (0, tslib_1.__metadata)("design:type", message_service_1.MessageService)
], LocalStorageService.prototype, "messageService", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(window_service_1.WindowService),
    (0, tslib_1.__metadata)("design:type", Object)
], LocalStorageService.prototype, "windowService", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.postConstruct)(),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", []),
    (0, tslib_1.__metadata)("design:returntype", void 0)
], LocalStorageService.prototype, "init", null);
LocalStorageService = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)()
], LocalStorageService);
exports.LocalStorageService = LocalStorageService;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/styling-service.js":
/*!*********************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/styling-service.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2022 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.StylingService = exports.StylingParticipant = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/es/inversify.js");
const contribution_provider_1 = __webpack_require__(/*! ../common/contribution-provider */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/contribution-provider.js");
const color_registry_1 = __webpack_require__(/*! ./color-registry */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/color-registry.js");
const decoration_style_1 = __webpack_require__(/*! ./decoration-style */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/decoration-style.js");
const theming_1 = __webpack_require__(/*! ./theming */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/theming.js");
const secondary_window_handler_1 = __webpack_require__(/*! ./secondary-window-handler */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/secondary-window-handler.js");
exports.StylingParticipant = Symbol('StylingParticipant');
let StylingService = class StylingService {
    constructor() {
        this.cssElements = new Map();
    }
    onStart() {
        this.registerWindow(window);
        this.secondaryWindowHandler.onWillAddWidget(([widget, window]) => {
            this.registerWindow(window);
        });
        this.secondaryWindowHandler.onWillRemoveWidget(([widget, window]) => {
            this.cssElements.delete(window);
        });
        this.themeService.onDidColorThemeChange(e => this.applyStylingToWindows(e.newTheme));
    }
    registerWindow(win) {
        const cssElement = decoration_style_1.DecorationStyle.createStyleElement('contributedColorTheme', win.document.head);
        this.cssElements.set(win, cssElement);
        this.applyStyling(this.themeService.getCurrentTheme(), cssElement);
    }
    applyStylingToWindows(theme) {
        this.cssElements.forEach(cssElement => this.applyStyling(theme, cssElement));
    }
    applyStyling(theme, cssElement) {
        const rules = [];
        const colorTheme = {
            type: theme.type,
            label: theme.label,
            getColor: color => this.colorRegistry.getCurrentColor(color)
        };
        const styleCollector = {
            addRule: rule => rules.push(rule)
        };
        for (const themingParticipant of this.themingParticipants.getContributions()) {
            themingParticipant.registerThemeStyle(colorTheme, styleCollector);
        }
        const fullCss = rules.join('\n');
        cssElement.innerText = fullCss;
    }
};
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(theming_1.ThemeService),
    (0, tslib_1.__metadata)("design:type", theming_1.ThemeService)
], StylingService.prototype, "themeService", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(color_registry_1.ColorRegistry),
    (0, tslib_1.__metadata)("design:type", color_registry_1.ColorRegistry)
], StylingService.prototype, "colorRegistry", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(contribution_provider_1.ContributionProvider),
    (0, inversify_1.named)(exports.StylingParticipant),
    (0, tslib_1.__metadata)("design:type", Object)
], StylingService.prototype, "themingParticipants", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(secondary_window_handler_1.SecondaryWindowHandler),
    (0, tslib_1.__metadata)("design:type", secondary_window_handler_1.SecondaryWindowHandler)
], StylingService.prototype, "secondaryWindowHandler", void 0);
StylingService = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)()
], StylingService);
exports.StylingService = StylingService;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/supported-encodings.js":
/*!*************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/supported-encodings.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2019 Xuye Cai and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SUPPORTED_ENCODINGS = void 0;
// copied from vscode: https://github.com/microsoft/vscode/blob/master/src/vs/workbench/services/textfile/common/textfiles.ts
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
exports.SUPPORTED_ENCODINGS = {
    utf8: {
        labelLong: 'UTF-8',
        labelShort: 'UTF-8',
        order: 1,
        alias: 'utf8bom'
    },
    utf8bom: {
        labelLong: 'UTF-8 with BOM',
        labelShort: 'UTF-8 with BOM',
        encodeOnly: true,
        order: 2,
        alias: 'utf8'
    },
    utf16le: {
        labelLong: 'UTF-16 LE',
        labelShort: 'UTF-16 LE',
        order: 3
    },
    utf16be: {
        labelLong: 'UTF-16 BE',
        labelShort: 'UTF-16 BE',
        order: 4
    },
    windows1252: {
        labelLong: 'Western (Windows 1252)',
        labelShort: 'Windows 1252',
        order: 5
    },
    iso88591: {
        labelLong: 'Western (ISO 8859-1)',
        labelShort: 'ISO 8859-1',
        order: 6
    },
    iso88593: {
        labelLong: 'Western (ISO 8859-3)',
        labelShort: 'ISO 8859-3',
        order: 7
    },
    iso885915: {
        labelLong: 'Western (ISO 8859-15)',
        labelShort: 'ISO 8859-15',
        order: 8
    },
    macroman: {
        labelLong: 'Western (Mac Roman)',
        labelShort: 'Mac Roman',
        order: 9
    },
    cp437: {
        labelLong: 'DOS (CP 437)',
        labelShort: 'CP437',
        order: 10
    },
    windows1256: {
        labelLong: 'Arabic (Windows 1256)',
        labelShort: 'Windows 1256',
        order: 11
    },
    iso88596: {
        labelLong: 'Arabic (ISO 8859-6)',
        labelShort: 'ISO 8859-6',
        order: 12
    },
    windows1257: {
        labelLong: 'Baltic (Windows 1257)',
        labelShort: 'Windows 1257',
        order: 13
    },
    iso88594: {
        labelLong: 'Baltic (ISO 8859-4)',
        labelShort: 'ISO 8859-4',
        order: 14
    },
    iso885914: {
        labelLong: 'Celtic (ISO 8859-14)',
        labelShort: 'ISO 8859-14',
        order: 15
    },
    windows1250: {
        labelLong: 'Central European (Windows 1250)',
        labelShort: 'Windows 1250',
        order: 16
    },
    iso88592: {
        labelLong: 'Central European (ISO 8859-2)',
        labelShort: 'ISO 8859-2',
        order: 17
    },
    cp852: {
        labelLong: 'Central European (CP 852)',
        labelShort: 'CP 852',
        order: 18
    },
    windows1251: {
        labelLong: 'Cyrillic (Windows 1251)',
        labelShort: 'Windows 1251',
        order: 19
    },
    cp866: {
        labelLong: 'Cyrillic (CP 866)',
        labelShort: 'CP 866',
        order: 20
    },
    iso88595: {
        labelLong: 'Cyrillic (ISO 8859-5)',
        labelShort: 'ISO 8859-5',
        order: 21
    },
    koi8r: {
        labelLong: 'Cyrillic (KOI8-R)',
        labelShort: 'KOI8-R',
        order: 22
    },
    koi8u: {
        labelLong: 'Cyrillic (KOI8-U)',
        labelShort: 'KOI8-U',
        order: 23
    },
    iso885913: {
        labelLong: 'Estonian (ISO 8859-13)',
        labelShort: 'ISO 8859-13',
        order: 24
    },
    windows1253: {
        labelLong: 'Greek (Windows 1253)',
        labelShort: 'Windows 1253',
        order: 25
    },
    iso88597: {
        labelLong: 'Greek (ISO 8859-7)',
        labelShort: 'ISO 8859-7',
        order: 26
    },
    windows1255: {
        labelLong: 'Hebrew (Windows 1255)',
        labelShort: 'Windows 1255',
        order: 27
    },
    iso88598: {
        labelLong: 'Hebrew (ISO 8859-8)',
        labelShort: 'ISO 8859-8',
        order: 28
    },
    iso885910: {
        labelLong: 'Nordic (ISO 8859-10)',
        labelShort: 'ISO 8859-10',
        order: 29
    },
    iso885916: {
        labelLong: 'Romanian (ISO 8859-16)',
        labelShort: 'ISO 8859-16',
        order: 30
    },
    windows1254: {
        labelLong: 'Turkish (Windows 1254)',
        labelShort: 'Windows 1254',
        order: 31
    },
    iso88599: {
        labelLong: 'Turkish (ISO 8859-9)',
        labelShort: 'ISO 8859-9',
        order: 32
    },
    windows1258: {
        labelLong: 'Vietnamese (Windows 1258)',
        labelShort: 'Windows 1258',
        order: 33
    },
    gbk: {
        labelLong: 'Simplified Chinese (GBK)',
        labelShort: 'GBK',
        order: 34
    },
    gb18030: {
        labelLong: 'Simplified Chinese (GB18030)',
        labelShort: 'GB18030',
        order: 35
    },
    cp950: {
        labelLong: 'Traditional Chinese (Big5)',
        labelShort: 'Big5',
        order: 36
    },
    big5hkscs: {
        labelLong: 'Traditional Chinese (Big5-HKSCS)',
        labelShort: 'Big5-HKSCS',
        order: 37
    },
    shiftjis: {
        labelLong: 'Japanese (Shift JIS)',
        labelShort: 'Shift JIS',
        order: 38
    },
    eucjp: {
        labelLong: 'Japanese (EUC-JP)',
        labelShort: 'EUC-JP',
        order: 39
    },
    euckr: {
        labelLong: 'Korean (EUC-KR)',
        labelShort: 'EUC-KR',
        order: 40
    },
    windows874: {
        labelLong: 'Thai (Windows 874)',
        labelShort: 'Windows 874',
        order: 41
    },
    iso885911: {
        labelLong: 'Latin/Thai (ISO 8859-11)',
        labelShort: 'ISO 8859-11',
        order: 42
    },
    koi8ru: {
        labelLong: 'Cyrillic (KOI8-RU)',
        labelShort: 'KOI8-RU',
        order: 43
    },
    koi8t: {
        labelLong: 'Tajik (KOI8-T)',
        labelShort: 'KOI8-T',
        order: 44
    },
    gb2312: {
        labelLong: 'Simplified Chinese (GB 2312)',
        labelShort: 'GB 2312',
        order: 45
    },
    cp865: {
        labelLong: 'Nordic DOS (CP 865)',
        labelShort: 'CP 865',
        order: 46
    },
    cp850: {
        labelLong: 'Western European DOS (CP 850)',
        labelShort: 'CP 850',
        order: 47
    }
};


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/theming.js":
/*!*************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/theming.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2017 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var ThemeService_1;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BuiltinThemeProvider = exports.ThemeService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
const event_1 = __webpack_require__(/*! ../common/event */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/event.js");
const disposable_1 = __webpack_require__(/*! ../common/disposable */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/disposable.js");
const frontend_application_config_provider_1 = __webpack_require__(/*! ./frontend-application-config-provider */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/frontend-application-config-provider.js");
const application_props_1 = __webpack_require__(/*! @theia/application-package/lib/application-props */ "../node_modules/@theia/editor/node_modules/@theia/application-package/lib/application-props.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/es/inversify.js");
const promise_util_1 = __webpack_require__(/*! ../common/promise-util */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/promise-util.js");
const preferences_1 = __webpack_require__(/*! ./preferences */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/preferences/index.js");
const debounce = __webpack_require__(/*! lodash.debounce */ "../node_modules/lodash.debounce/index.js");
const COLOR_THEME_PREFERENCE_KEY = 'workbench.colorTheme';
const NO_THEME = { id: 'no-theme', label: 'Not a real theme.', type: 'dark' };
let ThemeService = ThemeService_1 = class ThemeService {
    constructor() {
        this.themes = {};
        this.activeTheme = NO_THEME;
        this.themeChange = new event_1.Emitter();
        this.deferredInitializer = new promise_util_1.Deferred();
        this.onDidColorThemeChange = this.themeChange.event;
        this.updateColorThemePreference = debounce(() => this.doUpdateColorThemePreference(), 500);
    }
    get initialized() {
        return this.deferredInitializer.promise;
    }
    init() {
        this.register(...BuiltinThemeProvider.themes);
        this.loadUserTheme();
        this.preferences.ready.then(() => {
            this.validateActiveTheme();
            this.updateColorThemePreference();
            this.preferences.onPreferencesChanged(changes => {
                if (COLOR_THEME_PREFERENCE_KEY in changes) {
                    this.validateActiveTheme();
                }
            });
        });
    }
    register(...themes) {
        for (const theme of themes) {
            this.themes[theme.id] = theme;
        }
        this.validateActiveTheme();
        this.updateColorThemePreference();
        return disposable_1.Disposable.create(() => {
            for (const theme of themes) {
                delete this.themes[theme.id];
                if (this.activeTheme === theme) {
                    this.setCurrentTheme(this.defaultTheme.id, false);
                }
            }
            this.updateColorThemePreference();
        });
    }
    validateActiveTheme() {
        if (this.preferences.isReady) {
            const configuredTheme = this.getConfiguredTheme();
            if (configuredTheme && configuredTheme !== this.activeTheme) {
                this.setCurrentTheme(configuredTheme.id, false);
            }
        }
    }
    doUpdateColorThemePreference() {
        const preference = this.schemaProvider.getSchemaProperty(COLOR_THEME_PREFERENCE_KEY);
        if (preference) {
            const sortedThemes = this.getThemes().sort((a, b) => a.label.localeCompare(b.label));
            this.schemaProvider.updateSchemaProperty(COLOR_THEME_PREFERENCE_KEY, {
                ...preference,
                enum: sortedThemes.map(e => e.id),
                enumItemLabels: sortedThemes.map(e => e.label)
            });
        }
    }
    getThemes() {
        const result = [];
        for (const o in this.themes) {
            if (this.themes.hasOwnProperty(o)) {
                result.push(this.themes[o]);
            }
        }
        return result;
    }
    getTheme(themeId) {
        return this.themes[themeId] || this.defaultTheme;
    }
    tryGetTheme(themeId) {
        return this.themes[themeId];
    }
    /** Should only be called at startup. */
    loadUserTheme() {
        var _a;
        const storedThemeId = (_a = window.localStorage.getItem(ThemeService_1.STORAGE_KEY)) !== null && _a !== void 0 ? _a : this.defaultTheme.id;
        const theme = this.getTheme(storedThemeId);
        this.setCurrentTheme(theme.id, false);
        this.deferredInitializer.resolve();
    }
    /**
     * @param persist If `true`, the value of the `workbench.colorTheme` preference will be set to the provided ID.
     */
    setCurrentTheme(themeId, persist = true) {
        var _a, _b;
        const newTheme = this.tryGetTheme(themeId);
        const oldTheme = this.activeTheme;
        if (newTheme && newTheme !== oldTheme) {
            (_a = oldTheme === null || oldTheme === void 0 ? void 0 : oldTheme.deactivate) === null || _a === void 0 ? void 0 : _a.call(oldTheme);
            (_b = newTheme.activate) === null || _b === void 0 ? void 0 : _b.call(newTheme);
            this.activeTheme = newTheme;
            this.themeChange.fire({ newTheme, oldTheme });
        }
        if (persist) {
            this.preferences.updateValue(COLOR_THEME_PREFERENCE_KEY, themeId);
        }
    }
    getCurrentTheme() {
        return this.activeTheme;
    }
    getConfiguredTheme() {
        const configuredId = this.preferences.get(COLOR_THEME_PREFERENCE_KEY);
        return configuredId ? this.themes[configuredId.toString()] : undefined;
    }
    /**
     * The default theme. If that is not applicable, returns with the fallback theme.
     */
    get defaultTheme() {
        var _a;
        return (_a = this.tryGetTheme(application_props_1.DefaultTheme.defaultForOSTheme(frontend_application_config_provider_1.FrontendApplicationConfigProvider.get().defaultTheme))) !== null && _a !== void 0 ? _a : this.getTheme(application_props_1.DefaultTheme.defaultForOSTheme(application_props_1.ApplicationProps.DEFAULT.frontend.config.defaultTheme));
    }
    /**
     * Resets the state to the user's default, or to the fallback theme. Also discards any persisted state in the local storage.
     */
    reset() {
        this.setCurrentTheme(this.defaultTheme.id);
    }
};
ThemeService.STORAGE_KEY = 'theme';
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(preferences_1.PreferenceService),
    (0, tslib_1.__metadata)("design:type", Object)
], ThemeService.prototype, "preferences", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(preferences_1.PreferenceSchemaProvider),
    (0, tslib_1.__metadata)("design:type", preferences_1.PreferenceSchemaProvider)
], ThemeService.prototype, "schemaProvider", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.postConstruct)(),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", []),
    (0, tslib_1.__metadata)("design:returntype", void 0)
], ThemeService.prototype, "init", null);
ThemeService = ThemeService_1 = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)()
], ThemeService);
exports.ThemeService = ThemeService;
class BuiltinThemeProvider {
}
exports.BuiltinThemeProvider = BuiltinThemeProvider;
BuiltinThemeProvider.darkTheme = {
    id: 'dark',
    type: 'dark',
    label: 'Dark (Theia)',
    editorTheme: 'dark-theia' // loaded in /packages/monaco/src/browser/textmate/monaco-theme-registry.ts
};
BuiltinThemeProvider.lightTheme = {
    id: 'light',
    type: 'light',
    label: 'Light (Theia)',
    editorTheme: 'light-theia' // loaded in /packages/monaco/src/browser/textmate/monaco-theme-registry.ts
};
BuiltinThemeProvider.hcTheme = {
    id: 'hc-theia',
    type: 'hc',
    label: 'High Contrast (Theia)',
    editorTheme: 'hc-theia' // loaded in /packages/monaco/src/browser/textmate/monaco-theme-registry.ts
};
BuiltinThemeProvider.hcLightTheme = {
    id: 'hc-theia-light',
    type: 'hcLight',
    label: 'High Contrast Light (Theia)',
    editorTheme: 'hc-theia-light' // loaded in /packages/monaco/src/browser/textmate/monaco-theme-registry.ts
};
BuiltinThemeProvider.themes = [
    BuiltinThemeProvider.darkTheme,
    BuiltinThemeProvider.lightTheme,
    BuiltinThemeProvider.hcTheme,
    BuiltinThemeProvider.hcLightTheme
];


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tooltip-service.js":
/*!*********************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tooltip-service.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2021 Arm and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TooltipServiceImpl = exports.TooltipService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/es/inversify.js");
const React = __webpack_require__(/*! react */ "../node_modules/react/index.js");
const react_tooltip_1 = __webpack_require__(/*! react-tooltip */ "../node_modules/react-tooltip/dist/index.es.js");
const react_renderer_1 = __webpack_require__(/*! ./widgets/react-renderer */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/widgets/react-renderer.js");
const core_preferences_1 = __webpack_require__(/*! ./core-preferences */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/core-preferences.js");
const uuid_1 = __webpack_require__(/*! ../common/uuid */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/uuid.js");
exports.TooltipService = Symbol('TooltipService');
const DELAY_PREFERENCE = 'workbench.hover.delay';
let TooltipServiceImpl = class TooltipServiceImpl extends react_renderer_1.ReactRenderer {
    constructor(host) {
        super(host);
        this.rendered = false;
        this.tooltipId = (0, uuid_1.generateUuid)();
    }
    init() {
        this.toDispose.push(this.corePreferences.onPreferenceChanged(preference => {
            if (preference.preferenceName === DELAY_PREFERENCE) {
                this.update(true);
            }
        }));
    }
    attachTo(host) {
        host.appendChild(this.host);
    }
    update(fullRender = false) {
        if (fullRender || !this.rendered) {
            this.render();
            this.rendered = true;
        }
        react_tooltip_1.default.rebuild();
    }
    doRender() {
        const hoverDelay = this.corePreferences.get(DELAY_PREFERENCE);
        return React.createElement(react_tooltip_1.default, { id: this.tooltipId, className: 'theia-tooltip', html: true, delayShow: hoverDelay });
    }
    dispose() {
        this.toDispose.dispose();
        super.dispose();
    }
};
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(core_preferences_1.CorePreferences),
    (0, tslib_1.__metadata)("design:type", Object)
], TooltipServiceImpl.prototype, "corePreferences", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.postConstruct)(),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", []),
    (0, tslib_1.__metadata)("design:returntype", void 0)
], TooltipServiceImpl.prototype, "init", null);
TooltipServiceImpl = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)(),
    (0, tslib_1.__param)(0, (0, inversify_1.inject)(react_renderer_1.RendererHost)),
    (0, tslib_1.__param)(0, (0, inversify_1.optional)()),
    (0, tslib_1.__metadata)("design:paramtypes", [Object])
], TooltipServiceImpl);
exports.TooltipServiceImpl = TooltipServiceImpl;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/fuzzy-search.js":
/*!***********************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/fuzzy-search.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var FuzzySearch_1;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FuzzySearch = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
const fuzzy = __webpack_require__(/*! fuzzy */ "../node_modules/fuzzy/lib/fuzzy.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/es/inversify.js");
let FuzzySearch = FuzzySearch_1 = class FuzzySearch {
    /**
     * Filters the input and returns with an array that contains all items that match the pattern.
     */
    async filter(input) {
        return fuzzy.filter(input.pattern, input.items.slice(), {
            pre: FuzzySearch_1.PRE,
            post: FuzzySearch_1.POST,
            extract: input.transform
        }).sort(this.sortResults.bind(this)).map(this.mapResult.bind(this));
    }
    sortResults(left, right) {
        return left.index - right.index;
    }
    mapResult(result) {
        return {
            item: result.original,
            ranges: this.mapRanges(result.string)
        };
    }
    mapRanges(input) {
        const copy = input.split('').filter(s => s !== '');
        const ranges = [];
        const validate = (pre, post) => {
            if (preIndex > postIndex || (preIndex === -1) !== (postIndex === -1)) {
                throw new Error(`Error when trying to map ranges. Escaped string was: '${input}. [${[...input].join('|')}]'`);
            }
        };
        let preIndex = copy.indexOf(FuzzySearch_1.PRE);
        let postIndex = copy.indexOf(FuzzySearch_1.POST);
        validate(preIndex, postIndex);
        while (preIndex !== -1 && postIndex !== -1) {
            ranges.push({
                offset: preIndex,
                length: postIndex - preIndex - 1
            });
            copy.splice(postIndex, 1);
            copy.splice(preIndex, 1);
            preIndex = copy.indexOf(FuzzySearch_1.PRE);
            postIndex = copy.indexOf(FuzzySearch_1.POST);
        }
        if (ranges.length === 0) {
            throw new Error(`Unexpected zero ranges for match-string: ${input}.`);
        }
        return ranges;
    }
};
FuzzySearch.PRE = '\x01';
FuzzySearch.POST = '\x02';
FuzzySearch = FuzzySearch_1 = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)()
], FuzzySearch);
exports.FuzzySearch = FuzzySearch;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/index.js":
/*!****************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/index.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2017 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./tree */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/tree.js"), exports);
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./tree-selection */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/tree-selection.js"), exports);
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./tree-expansion */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/tree-expansion.js"), exports);
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./tree-navigation */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/tree-navigation.js"), exports);
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./tree-iterator */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/tree-iterator.js"), exports);
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./tree-model */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/tree-model.js"), exports);
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./tree-widget */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/tree-widget.js"), exports);
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./tree-view-welcome-widget */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/tree-view-welcome-widget.js"), exports);
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./tree-container */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/tree-container.js"), exports);
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./tree-decorator */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/tree-decorator.js"), exports);
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./tree-search */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/tree-search.js"), exports);
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./tree-compression */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/tree-compression/index.js"), exports);
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./tree-preference */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/tree-preference.js"), exports);


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/search-box-debounce.js":
/*!******************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/search-box-debounce.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SearchBoxDebounce = exports.SearchBoxDebounceOptions = void 0;
const event_1 = __webpack_require__(/*! ../../common/event */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/event.js");
const disposable_1 = __webpack_require__(/*! ../../common/disposable */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/disposable.js");
const debounce = __webpack_require__(/*! lodash.debounce */ "../node_modules/lodash.debounce/index.js");
var SearchBoxDebounceOptions;
(function (SearchBoxDebounceOptions) {
    /**
     * The default debounce option.
     */
    SearchBoxDebounceOptions.DEFAULT = {
        delay: 200
    };
})(SearchBoxDebounceOptions = exports.SearchBoxDebounceOptions || (exports.SearchBoxDebounceOptions = {}));
/**
 * It notifies the clients, once if the underlying search term has changed after a given amount of delay.
 */
class SearchBoxDebounce {
    constructor(options) {
        this.options = options;
        this.disposables = new disposable_1.DisposableCollection();
        this.emitter = new event_1.Emitter();
        this.disposables.push(this.emitter);
        this.handler = debounce(() => this.fireChanged(this.state), this.options.delay).bind(this);
    }
    append(input) {
        if (input === undefined) {
            this.reset();
            return undefined;
        }
        if (this.state === undefined) {
            this.state = input;
        }
        else {
            if (input === '\b') {
                this.state = this.state.length === 1 ? '' : this.state.substring(0, this.state.length - 1);
            }
            else {
                this.state += input;
            }
        }
        this.handler();
        return this.state;
    }
    get onChanged() {
        return this.emitter.event;
    }
    dispose() {
        this.disposables.dispose();
    }
    fireChanged(value) {
        this.emitter.fire(value);
    }
    reset() {
        this.state = undefined;
        this.fireChanged(undefined);
    }
}
exports.SearchBoxDebounce = SearchBoxDebounce;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/search-box.js":
/*!*********************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/search-box.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SearchBoxFactory = exports.SearchBox = exports.SearchBoxProps = void 0;
const search_box_debounce_1 = __webpack_require__(/*! ../tree/search-box-debounce */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/search-box-debounce.js");
const widget_1 = __webpack_require__(/*! ../widgets/widget */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/widgets/widget.js");
const event_1 = __webpack_require__(/*! ../../common/event */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/event.js");
const keys_1 = __webpack_require__(/*! ../keyboard/keys */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/keyboard/keys.js");
const nls_1 = __webpack_require__(/*! ../../common/nls */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/nls.js");
var SearchBoxProps;
(function (SearchBoxProps) {
    /**
     * The default search box widget option.
     */
    SearchBoxProps.DEFAULT = search_box_debounce_1.SearchBoxDebounceOptions.DEFAULT;
})(SearchBoxProps = exports.SearchBoxProps || (exports.SearchBoxProps = {}));
/**
 * The search box widget.
 */
class SearchBox extends widget_1.BaseWidget {
    constructor(props, debounce) {
        super();
        this.props = props;
        this.debounce = debounce;
        this.nextEmitter = new event_1.Emitter();
        this.previousEmitter = new event_1.Emitter();
        this.closeEmitter = new event_1.Emitter();
        this.textChangeEmitter = new event_1.Emitter();
        this.filterToggleEmitter = new event_1.Emitter();
        this._isFiltering = false;
        this.toDispose.pushAll([
            this.nextEmitter,
            this.previousEmitter,
            this.closeEmitter,
            this.textChangeEmitter,
            this.filterToggleEmitter,
            this.debounce,
            this.debounce.onChanged(data => this.fireTextChange(data))
        ]);
        this.hide();
        this.update();
        const { input, filter } = this.createContent();
        this.input = input;
        this.filter = filter;
    }
    get onPrevious() {
        return this.previousEmitter.event;
    }
    get onNext() {
        return this.nextEmitter.event;
    }
    get onClose() {
        return this.closeEmitter.event;
    }
    get onTextChange() {
        return this.textChangeEmitter.event;
    }
    get onFilterToggled() {
        return this.filterToggleEmitter.event;
    }
    get isFiltering() {
        return this._isFiltering;
    }
    get keyCodePredicate() {
        return this.canHandle.bind(this);
    }
    firePrevious() {
        this.previousEmitter.fire(undefined);
    }
    fireNext() {
        this.nextEmitter.fire(undefined);
    }
    fireClose() {
        this.closeEmitter.fire(undefined);
    }
    fireTextChange(input) {
        this.textChangeEmitter.fire(input);
    }
    fireFilterToggle() {
        this.doFireFilterToggle();
    }
    doFireFilterToggle(toggleTo = !this._isFiltering) {
        if (this.filter) {
            if (toggleTo) {
                this.filter.classList.add(SearchBox.Styles.FILTER_ON);
            }
            else {
                this.filter.classList.remove(SearchBox.Styles.FILTER_ON);
            }
            this._isFiltering = toggleTo;
            this.filterToggleEmitter.fire(toggleTo);
            this.update();
        }
    }
    handle(event) {
        event.preventDefault();
        const keyCode = keys_1.KeyCode.createKeyCode(event);
        if (this.canHandle(keyCode)) {
            if (keys_1.Key.equals(keys_1.Key.ESCAPE, keyCode) || this.isCtrlBackspace(keyCode)) {
                this.hide();
            }
            else {
                this.show();
                this.handleKey(keyCode);
            }
        }
    }
    handleArrowUp() {
        this.firePrevious();
    }
    handleArrowDown() {
        this.fireNext();
    }
    onBeforeHide() {
        this.removeClass(SearchBox.Styles.NO_MATCH);
        this.doFireFilterToggle(false);
        this.debounce.append(undefined);
        this.fireClose();
    }
    handleKey(keyCode) {
        const character = keys_1.Key.equals(keys_1.Key.BACKSPACE, keyCode) ? '\b' : keyCode.character;
        const data = this.debounce.append(character);
        if (data) {
            this.input.textContent = this.getTrimmedContent(data);
            this.update();
        }
        else {
            this.hide();
        }
    }
    getTrimmedContent(data) {
        if (data.length > SearchBox.MAX_CONTENT_LENGTH) {
            return '...' + data.substring(data.length - SearchBox.MAX_CONTENT_LENGTH);
        }
        return data;
    }
    canHandle(keyCode) {
        if (keyCode === undefined) {
            return false;
        }
        const { ctrl, alt, meta } = keyCode;
        if (this.isCtrlBackspace(keyCode)) {
            return true;
        }
        if (ctrl || alt || meta || keyCode.key === keys_1.Key.SPACE) {
            return false;
        }
        if (keyCode.character || (this.isVisible && SearchBox.SPECIAL_KEYS.some(key => keys_1.Key.equals(key, keyCode)))) {
            return true;
        }
        return false;
    }
    isCtrlBackspace(keyCode) {
        if (keyCode.ctrl && keys_1.Key.equals(keys_1.Key.BACKSPACE, keyCode)) {
            return true;
        }
        return false;
    }
    updateHighlightInfo(info) {
        if (info.filterText && info.filterText.length > 0) {
            if (info.matched === 0) {
                this.addClass(SearchBox.Styles.NO_MATCH);
            }
            else {
                this.removeClass(SearchBox.Styles.NO_MATCH);
            }
        }
    }
    createContent() {
        this.node.setAttribute('tabIndex', '0');
        this.addClass(SearchBox.Styles.SEARCH_BOX);
        const input = document.createElement('span');
        input.classList.add(SearchBox.Styles.SEARCH_INPUT);
        this.node.appendChild(input);
        const buttons = document.createElement('div');
        buttons.classList.add(SearchBox.Styles.SEARCH_BUTTONS_WRAPPER);
        this.node.appendChild(buttons);
        let filter;
        if (this.props.showFilter) {
            filter = document.createElement('div');
            filter.classList.add(SearchBox.Styles.BUTTON, ...SearchBox.Styles.FILTER);
            filter.title = nls_1.nls.localizeByDefault('Filter on Type');
            buttons.appendChild(filter);
            filter.onclick = this.fireFilterToggle.bind(this);
        }
        let previous;
        let next;
        let close;
        if (!!this.props.showButtons) {
            previous = document.createElement('div');
            previous.classList.add(SearchBox.Styles.BUTTON, SearchBox.Styles.BUTTON_PREVIOUS);
            previous.title = nls_1.nls.localize('theia/core/searchbox/previous', 'Previous (Up)');
            buttons.appendChild(previous);
            previous.onclick = () => this.firePrevious.bind(this)();
            next = document.createElement('div');
            next.classList.add(SearchBox.Styles.BUTTON, SearchBox.Styles.BUTTON_NEXT);
            next.title = nls_1.nls.localize('theia/core/searchbox/next', 'Next (Down)');
            buttons.appendChild(next);
            next.onclick = () => this.fireNext.bind(this)();
        }
        if (this.props.showButtons || this.props.showFilter) {
            close = document.createElement('div');
            close.classList.add(SearchBox.Styles.BUTTON, SearchBox.Styles.BUTTON_CLOSE);
            close.title = nls_1.nls.localize('theia/core/searchbox/close', 'Close (Escape)');
            buttons.appendChild(close);
            close.onclick = () => this.hide.bind(this)();
        }
        return {
            container: this.node,
            input,
            filter,
            previous,
            next,
            close
        };
    }
    onAfterAttach(msg) {
        super.onAfterAttach(msg);
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        this.addEventListener(this.input, 'selectstart', () => false);
    }
}
exports.SearchBox = SearchBox;
SearchBox.SPECIAL_KEYS = [
    keys_1.Key.ESCAPE,
    keys_1.Key.BACKSPACE
];
SearchBox.MAX_CONTENT_LENGTH = 15;
(function (SearchBox) {
    /**
     * CSS classes for the search box widget.
     */
    let Styles;
    (function (Styles) {
        Styles.SEARCH_BOX = 'theia-search-box';
        Styles.SEARCH_INPUT = 'theia-search-input';
        Styles.SEARCH_BUTTONS_WRAPPER = 'theia-search-buttons-wrapper';
        Styles.BUTTON = 'theia-search-button';
        Styles.FILTER = ['codicon', 'codicon-filter'];
        Styles.FILTER_ON = 'filter-active';
        Styles.BUTTON_PREVIOUS = 'theia-search-button-previous';
        Styles.BUTTON_NEXT = 'theia-search-button-next';
        Styles.BUTTON_CLOSE = 'theia-search-button-close';
        Styles.NON_SELECTABLE = 'theia-non-selectable';
        Styles.NO_MATCH = 'no-match';
    })(Styles = SearchBox.Styles || (SearchBox.Styles = {}));
})(SearchBox = exports.SearchBox || (exports.SearchBox = {}));
/**
 * Search box factory.
 */
exports.SearchBoxFactory = Symbol('SearchBoxFactory');


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/tree-compression/compressed-tree-expansion-service.js":
/*!*************************************************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/tree-compression/compressed-tree-expansion-service.js ***!
  \*************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2022 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CompressedExpansionService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/es/inversify.js");
const tree_compression_service_1 = __webpack_require__(/*! ./tree-compression-service */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/tree-compression/tree-compression-service.js");
const tree_expansion_1 = __webpack_require__(/*! ../tree-expansion */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/tree-expansion.js");
let CompressedExpansionService = class CompressedExpansionService extends tree_expansion_1.TreeExpansionServiceImpl {
    async expandNode(raw) {
        if (!this.compressionToggle.compress) {
            return super.expandNode(raw);
        }
        const participants = this.compressionService.getCompressionChain(raw);
        let expansionRoot;
        for (const node of participants !== null && participants !== void 0 ? participants : [raw]) {
            const next = await super.expandNode(node);
            expansionRoot = expansionRoot !== null && expansionRoot !== void 0 ? expansionRoot : next;
        }
        return expansionRoot;
    }
    async collapseNode(raw) {
        if (!this.compressionToggle.compress) {
            return super.collapseNode(raw);
        }
        const participants = this.compressionService.getCompressionChain(raw);
        let didCollapse = false;
        for (const participant of participants !== null && participants !== void 0 ? participants : [raw]) {
            didCollapse = await super.collapseNode(participant) || didCollapse;
        }
        return didCollapse;
    }
};
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(tree_compression_service_1.CompressionToggle),
    (0, tslib_1.__metadata)("design:type", Object)
], CompressedExpansionService.prototype, "compressionToggle", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(tree_compression_service_1.TreeCompressionService),
    (0, tslib_1.__metadata)("design:type", tree_compression_service_1.TreeCompressionService)
], CompressedExpansionService.prototype, "compressionService", void 0);
CompressedExpansionService = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)()
], CompressedExpansionService);
exports.CompressedExpansionService = CompressedExpansionService;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/tree-compression/compressed-tree-model.js":
/*!*************************************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/tree-compression/compressed-tree-model.js ***!
  \*************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2022 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CompressedTreeModel = exports.TopDownCompressedTreeIterator = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/es/inversify.js");
const tree_compression_service_1 = __webpack_require__(/*! ./tree-compression-service */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/tree-compression/tree-compression-service.js");
const tree_1 = __webpack_require__(/*! ../tree */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/tree.js");
const tree_model_1 = __webpack_require__(/*! ../tree-model */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/tree-model.js");
const tree_selection_1 = __webpack_require__(/*! ../tree-selection */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/tree-selection.js");
const tree_expansion_1 = __webpack_require__(/*! ../tree-expansion */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/tree-expansion.js");
const tree_iterator_1 = __webpack_require__(/*! ../tree-iterator */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/tree-iterator.js");
class TopDownCompressedTreeIterator extends tree_iterator_1.TopDownTreeIterator {
    isCollapsed(candidate) {
        return tree_expansion_1.ExpandableTreeNode.isCollapsed(candidate) && !tree_compression_service_1.TreeCompressionService.prototype.isCompressionParent(candidate);
    }
}
exports.TopDownCompressedTreeIterator = TopDownCompressedTreeIterator;
var BackOrForward;
(function (BackOrForward) {
    BackOrForward[BackOrForward["Forward"] = 0] = "Forward";
    BackOrForward[BackOrForward["Backward"] = 1] = "Backward";
})(BackOrForward || (BackOrForward = {}));
let CompressedTreeModel = class CompressedTreeModel extends tree_model_1.TreeModelImpl {
    selectAdjacentRow(direction, type = tree_selection_1.TreeSelection.SelectionType.DEFAULT, startingPoint = this.getFocusedNode()) {
        var _a, _b;
        if (!startingPoint && this.root) {
            this.selectAdjacentRow(BackOrForward.Forward, type, this.root);
        }
        if (this.compressionService.isCompressionParticipant(startingPoint)) {
            const chain = this.compressionService.getCompressionChain(startingPoint);
            startingPoint = (_a = (direction === BackOrForward.Backward ? chain === null || chain === void 0 ? void 0 : chain.head() : chain === null || chain === void 0 ? void 0 : chain.tail())) !== null && _a !== void 0 ? _a : startingPoint;
        }
        const iterator = direction === BackOrForward.Backward ? this.createBackwardIterator(startingPoint) : this.createIterator(startingPoint);
        const test = (candidate) => tree_selection_1.SelectableTreeNode.isVisible(candidate)
            && (this.compressionService.isCompressionHead(candidate) || !this.compressionService.isCompressionParticipant(candidate));
        const rowRoot = iterator && this.doGetNextNode(iterator, test);
        const nodes = ((_b = this.compressionService.getCompressionChain(rowRoot)) !== null && _b !== void 0 ? _b : [rowRoot]).reverse();
        const node = nodes.find(tree_selection_1.SelectableTreeNode.is);
        if (node) {
            this.addSelection({ node, type });
        }
    }
    selectPrevRow(type) {
        this.selectAdjacentRow(BackOrForward.Backward, type);
    }
    selectNextRow(type) {
        this.selectAdjacentRow(BackOrForward.Forward, type);
    }
    createForwardIteratorForNode(node) {
        return new TopDownCompressedTreeIterator(node, { pruneCollapsed: true });
    }
    selectIfAncestorOfSelected(node) {
        var _a, _b;
        if (!this.compressionToggle.compress) {
            return super.selectIfAncestorOfSelected(node);
        }
        const tail = (_b = (_a = this.compressionService.getCompressionChain(node)) === null || _a === void 0 ? void 0 : _a.tail()) !== null && _b !== void 0 ? _b : node;
        if (tree_selection_1.SelectableTreeNode.is(tail) && !tail.expanded && this.selectedNodes.some(selectedNode => tree_1.CompositeTreeNode.isAncestor(tail, selectedNode))) {
            this.selectNode(tail);
        }
    }
};
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(tree_compression_service_1.CompressionToggle),
    (0, tslib_1.__metadata)("design:type", Object)
], CompressedTreeModel.prototype, "compressionToggle", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(tree_compression_service_1.TreeCompressionService),
    (0, tslib_1.__metadata)("design:type", tree_compression_service_1.TreeCompressionService)
], CompressedTreeModel.prototype, "compressionService", void 0);
CompressedTreeModel = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)()
], CompressedTreeModel);
exports.CompressedTreeModel = CompressedTreeModel;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/tree-compression/compressed-tree-widget.js":
/*!**************************************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/tree-compression/compressed-tree-widget.js ***!
  \**************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2022 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CompressedTreeWidget = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
__webpack_require__(/*! ../../../../src/browser/tree/tree-compression/tree-compression.css */ "../node_modules/@theia/editor/node_modules/@theia/core/src/browser/tree/tree-compression/tree-compression.css");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/es/inversify.js");
const React = __webpack_require__(/*! react */ "../node_modules/react/index.js");
const context_menu_renderer_1 = __webpack_require__(/*! ../../context-menu-renderer */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/context-menu-renderer.js");
const tree_compression_service_1 = __webpack_require__(/*! ./tree-compression-service */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/tree-compression/tree-compression-service.js");
const tree_1 = __webpack_require__(/*! ../tree */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/tree.js");
const tree_widget_1 = __webpack_require__(/*! ../tree-widget */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/tree-widget.js");
const tree_selection_1 = __webpack_require__(/*! ../tree-selection */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/tree-selection.js");
const tree_expansion_1 = __webpack_require__(/*! ../tree-expansion */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/tree-expansion.js");
const tree_view_welcome_widget_1 = __webpack_require__(/*! ../tree-view-welcome-widget */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/tree-view-welcome-widget.js");
const compressed_tree_model_1 = __webpack_require__(/*! ./compressed-tree-model */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/tree-compression/compressed-tree-model.js");
let CompressedTreeWidget = class CompressedTreeWidget extends tree_view_welcome_widget_1.TreeViewWelcomeWidget {
    constructor(props, model, contextMenuRenderer) {
        super(props, model, contextMenuRenderer);
        this.model = model;
        this.rows = new Map();
    }
    toggleCompression(newCompression = !this.compressionToggle.compress) {
        if (newCompression !== this.compressionToggle.compress) {
            this.compressionToggle.compress = newCompression;
            this.updateRows();
        }
    }
    shouldRenderIndent(node) {
        return !this.compressionToggle.compress
            || !this.compressionService.isCompressionParticipant(node)
            || this.compressionService.getCompressionHead(node) === node;
    }
    shouldDisplayNode(node) {
        if (this.compressionToggle.compress && this.compressionService.isCompressionParticipant(node) && !this.compressionService.isCompressionHead(node)) {
            return false;
        }
        return super.shouldDisplayNode(node);
    }
    getDepthForNode(node, depths) {
        var _a;
        if (!this.compressionToggle.compress) {
            return super.getDepthForNode(node, depths);
        }
        const parent = (_a = this.compressionService.getCompressionHead(node.parent)) !== null && _a !== void 0 ? _a : node.parent;
        const parentDepth = depths.get(parent);
        return parentDepth === undefined ? 0 : tree_1.TreeNode.isVisible(node.parent) ? parentDepth + 1 : parentDepth;
    }
    toNodeRow(node, index, depth) {
        if (!this.compressionToggle.compress) {
            return super.toNodeRow(node, index, depth);
        }
        const row = { node, index, depth };
        if (this.compressionService.isCompressionHead(node)) {
            row.compressionChain = this.compressionService.getCompressionChain(node);
        }
        return row;
    }
    doRenderNodeRow({ node, depth, compressionChain }) {
        const nodeProps = { depth, compressionChain };
        return React.createElement(React.Fragment, null,
            this.renderIndent(node, nodeProps),
            this.renderNode(node, nodeProps));
    }
    rowIsSelected(node, props) {
        if (this.compressionToggle.compress && props.compressionChain) {
            return props.compressionChain.some(participant => tree_selection_1.SelectableTreeNode.isSelected(participant));
        }
        return tree_selection_1.SelectableTreeNode.isSelected(node);
    }
    getCaptionAttributes(node, props) {
        var _a, _b;
        const operativeNode = (_b = (_a = props.compressionChain) === null || _a === void 0 ? void 0 : _a.tail()) !== null && _b !== void 0 ? _b : node;
        return super.getCaptionAttributes(operativeNode, props);
    }
    getCaptionChildren(node, props) {
        if (!this.compressionToggle.compress || !props.compressionChain) {
            return super.getCaptionChildren(node, props);
        }
        return props.compressionChain.map((subNode, index, self) => {
            const classes = ['theia-tree-compressed-label-part'];
            if (tree_selection_1.SelectableTreeNode.isSelected(subNode)) {
                classes.push('theia-tree-compressed-selected');
            }
            const handlers = this.getCaptionChildEventHandlers(subNode, props);
            const caption = React.createElement("span", { className: classes.join(' '), key: subNode.id, ...handlers }, super.getCaptionChildren(subNode, props));
            if (index === self.length - 1) {
                return caption;
            }
            return [
                caption,
                React.createElement("span", { className: 'theia-tree-compressed-label-separator', key: subNode + '-separator' }, this.getSeparatorContent(node, props))
            ];
        });
    }
    getCaptionChildEventHandlers(node, props) {
        return {
            onClick: event => (event.stopPropagation(), this.handleClickEvent(node, event)),
            onDoubleClick: event => (event.stopPropagation(), this.handleDblClickEvent(node, event)),
            onContextMenu: event => (event.stopPropagation(), this.handleContextMenuEvent(node, event)),
        };
    }
    handleUp(event) {
        if (!this.compressionToggle.compress) {
            return super.handleUp(event);
        }
        const type = this.props.multiSelect && this.hasShiftMask(event) ? tree_selection_1.TreeSelection.SelectionType.RANGE : undefined;
        this.model.selectPrevRow(type);
        this.node.focus();
    }
    handleDown(event) {
        if (!this.compressionToggle.compress) {
            return super.handleDown(event);
        }
        const type = this.props.multiSelect && this.hasShiftMask(event) ? tree_selection_1.TreeSelection.SelectionType.RANGE : undefined;
        this.model.selectNextRow(type);
        this.node.focus();
    }
    async handleLeft(event) {
        if (!this.compressionToggle.compress) {
            return super.handleLeft(event);
        }
        if (Boolean(this.props.multiSelect) && (this.hasCtrlCmdMask(event) || this.hasShiftMask(event))) {
            return;
        }
        const active = this.focusService.focusedNode;
        if (tree_expansion_1.ExpandableTreeNode.isExpanded(active)
            && (this.compressionService.isCompressionHead(active)
                || !this.compressionService.isCompressionParticipant(active))) {
            await this.model.collapseNode(active);
        }
        else {
            this.model.selectParent();
        }
    }
    async handleRight(event) {
        if (!this.compressionToggle.compress) {
            return super.handleRight(event);
        }
        if (Boolean(this.props.multiSelect) && (this.hasCtrlCmdMask(event) || this.hasShiftMask(event))) {
            return;
        }
        const active = this.focusService.focusedNode;
        if (tree_expansion_1.ExpandableTreeNode.isCollapsed(active)
            && (!this.compressionService.isCompressionParticipant(active)
                || this.compressionService.isCompressionTail(active))) {
            await this.model.expandNode(active);
        }
        else if (tree_expansion_1.ExpandableTreeNode.is(active)) {
            this.model.selectNextNode();
        }
    }
    getSeparatorContent(node, props) {
        return '/';
    }
};
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(tree_compression_service_1.CompressionToggle),
    (0, tslib_1.__metadata)("design:type", Object)
], CompressedTreeWidget.prototype, "compressionToggle", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(tree_compression_service_1.TreeCompressionService),
    (0, tslib_1.__metadata)("design:type", tree_compression_service_1.TreeCompressionService)
], CompressedTreeWidget.prototype, "compressionService", void 0);
CompressedTreeWidget = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)(),
    (0, tslib_1.__param)(0, (0, inversify_1.inject)(tree_widget_1.TreeProps)),
    (0, tslib_1.__param)(1, (0, inversify_1.inject)(compressed_tree_model_1.CompressedTreeModel)),
    (0, tslib_1.__param)(2, (0, inversify_1.inject)(context_menu_renderer_1.ContextMenuRenderer)),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, compressed_tree_model_1.CompressedTreeModel,
        context_menu_renderer_1.ContextMenuRenderer])
], CompressedTreeWidget);
exports.CompressedTreeWidget = CompressedTreeWidget;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/tree-compression/index.js":
/*!*********************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/tree-compression/index.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2022 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./compressed-tree-expansion-service */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/tree-compression/compressed-tree-expansion-service.js"), exports);
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./compressed-tree-model */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/tree-compression/compressed-tree-model.js"), exports);
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./compressed-tree-widget */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/tree-compression/compressed-tree-widget.js"), exports);
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./tree-compression-service */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/tree-compression/tree-compression-service.js"), exports);


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/tree-compression/tree-compression-service.js":
/*!****************************************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/tree-compression/tree-compression-service.js ***!
  \****************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2021 SAP SE or an SAP affiliate company and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TreeCompressionService = exports.CompressionToggle = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/es/inversify.js");
const types_1 = __webpack_require__(/*! ../../../common/types */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/types.js");
const tree_1 = __webpack_require__(/*! ../tree */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/tree.js");
const tree_expansion_1 = __webpack_require__(/*! ../tree-expansion */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/tree-expansion.js");
exports.CompressionToggle = Symbol('CompressionToggle');
let TreeCompressionService = class TreeCompressionService {
    /**
     * @returns `true` if the node has a single child that is a CompositeTreeNode
     * In that case, the child can be shown in the same row as the parent.
     */
    isCompressionParent(node) {
        return this.isVisibleExpandableNode(node) && node.children.length === 1 && this.isVisibleExpandableNode(node.children[0]);
    }
    isVisibleExpandableNode(node) {
        return tree_expansion_1.ExpandableTreeNode.is(node) && tree_1.TreeNode.isVisible(node);
    }
    /**
     * @returns `true` if the node is a CompositeTreeNode and is its parent's sole child
     * In that case, the node can be shown in the same row as its parent.
     */
    isCompressionChild(node) {
        return this.isCompressionParent(node === null || node === void 0 ? void 0 : node.parent);
    }
    /**
     * @returns `true` if the node is a CompositeTreeNode with a sole child, and the same is not true of its parent.
     * In that case, the node will appear as the first member of a compressed row.
     */
    isCompressionHead(node) {
        return this.isCompressionParent(node) && !this.isCompressionParent(node.parent);
    }
    /**
     * @returns `true` if the node's parent is a CompositeTreeNode with a sole child, and the same is not true of the node.
     * In that case, the node will appear as the last member of a compressed row.
     */
    isCompressionTail(node) {
        return this.isCompressionChild(node) && !this.isCompressionParent(node);
    }
    /**
     * @returns `true` if the node is part of a compression row, either a {@link CompressionChild} or {@link CompressionParent}
     */
    isCompressionParticipant(node) {
        return this.isCompressionParent(node) || this.isCompressionChild(node);
    }
    getCompressedChildren(node) {
        if (this.isCompressionHead(node)) {
            const items = [];
            let next = node.children[0];
            while (this.isCompressionChild(next)) {
                items.push(next);
                next = next.children[0];
            }
            return types_1.ArrayUtils.asTail(items);
        }
    }
    /**
     * @returns The {@link CompressionHead} of the node's compression chain, or undefined if the node is not a {@link CompressionParticipant}.
     */
    getCompressionHead(node) {
        while (this.isCompressionParticipant(node)) {
            if (this.isCompressionHead(node)) {
                return node;
            }
            node = node.parent;
        }
    }
    /**
     * @returns The compression chain of which the `node` is a part, or `undefined` if the `node` is not a {@link CompressionParticipant}
     */
    getCompressionChain(node) {
        const head = this.getCompressionHead(node);
        if (head) {
            return types_1.ArrayUtils.asHeadAndTail([head].concat(this.getCompressedChildren(head)));
        }
    }
};
TreeCompressionService = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)()
], TreeCompressionService);
exports.TreeCompressionService = TreeCompressionService;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/tree-container.js":
/*!*************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/tree-container.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2017 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createTreeContainer = exports.isTreeServices = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/es/inversify.js");
const tree_widget_1 = __webpack_require__(/*! ./tree-widget */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/tree-widget.js");
const tree_model_1 = __webpack_require__(/*! ./tree-model */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/tree-model.js");
const tree_1 = __webpack_require__(/*! ./tree */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/tree.js");
const tree_selection_1 = __webpack_require__(/*! ./tree-selection */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/tree-selection.js");
const tree_selection_impl_1 = __webpack_require__(/*! ./tree-selection-impl */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/tree-selection-impl.js");
const tree_expansion_1 = __webpack_require__(/*! ./tree-expansion */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/tree-expansion.js");
const tree_navigation_1 = __webpack_require__(/*! ./tree-navigation */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/tree-navigation.js");
const tree_decorator_1 = __webpack_require__(/*! ./tree-decorator */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/tree-decorator.js");
const tree_search_1 = __webpack_require__(/*! ./tree-search */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/tree-search.js");
const fuzzy_search_1 = __webpack_require__(/*! ./fuzzy-search */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/fuzzy-search.js");
const search_box_1 = __webpack_require__(/*! ./search-box */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/search-box.js");
const search_box_debounce_1 = __webpack_require__(/*! ./search-box-debounce */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/search-box-debounce.js");
const tree_focus_service_1 = __webpack_require__(/*! ./tree-focus-service */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/tree-focus-service.js");
function isTreeServices(candidate) {
    if (candidate) {
        const maybeServices = candidate;
        for (const key of Object.keys(maybeServices)) {
            // This key is in both TreeProps and TreeContainerProps, so we have to handle it separately
            if (key === 'search' && typeof maybeServices[key] === 'boolean') {
                return false;
            }
            if (key in defaultImplementations) {
                return true;
            }
        }
    }
    return false;
}
exports.isTreeServices = isTreeServices;
function createTreeContainer(parent, props) {
    const child = new inversify_1.Container({ defaultScope: 'Singleton' });
    child.parent = parent;
    const overrideServices = isTreeServices(props) ? props : { props: props };
    for (const key of Object.keys(serviceIdentifiers)) {
        if (key === 'props') {
            const { service, identifier } = getServiceAndIdentifier(key, overrideServices);
            child.bind(identifier).toConstantValue({
                ...defaultImplementations.props,
                ...service
            });
        }
        else if (key === 'searchBoxFactory') {
            const { service, identifier } = getServiceAndIdentifier(key, overrideServices);
            child.bind(identifier).toFactory(context => service(context));
        }
        else {
            const { service, identifier } = getServiceAndIdentifier(key, overrideServices);
            child.bind(service).toSelf().inSingletonScope();
            if (identifier !== service) {
                child.bind(identifier).toService(service);
            }
        }
    }
    return child;
}
exports.createTreeContainer = createTreeContainer;
function getServiceAndIdentifier(key, overrides) {
    const override = overrides[key];
    const service = override !== null && override !== void 0 ? override : defaultImplementations[key];
    return {
        service,
        identifier: serviceIdentifiers[key]
    };
}
const defaultSearchBoxFactoryFactory = () => options => {
    const debounce = new search_box_debounce_1.SearchBoxDebounce(options);
    return new search_box_1.SearchBox(options, debounce);
};
const defaultImplementations = {
    tree: tree_1.TreeImpl,
    selectionService: tree_selection_impl_1.TreeSelectionServiceImpl,
    expansionService: tree_expansion_1.TreeExpansionServiceImpl,
    navigationService: tree_navigation_1.TreeNavigationService,
    model: tree_model_1.TreeModelImpl,
    widget: tree_widget_1.TreeWidget,
    search: tree_search_1.TreeSearch,
    fuzzy: fuzzy_search_1.FuzzySearch,
    decoratorService: tree_decorator_1.NoopTreeDecoratorService,
    focusService: tree_focus_service_1.TreeFocusServiceImpl,
    props: tree_widget_1.defaultTreeProps,
    searchBoxFactory: defaultSearchBoxFactoryFactory,
};
const serviceIdentifiers = {
    tree: tree_1.Tree,
    selectionService: tree_selection_1.TreeSelectionService,
    expansionService: tree_expansion_1.TreeExpansionService,
    navigationService: tree_navigation_1.TreeNavigationService,
    model: tree_model_1.TreeModel,
    widget: tree_widget_1.TreeWidget,
    props: tree_widget_1.TreeProps,
    search: tree_search_1.TreeSearch,
    fuzzy: fuzzy_search_1.FuzzySearch,
    searchBoxFactory: search_box_1.SearchBoxFactory,
    decoratorService: tree_decorator_1.TreeDecoratorService,
    focusService: tree_focus_service_1.TreeFocusService
};


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/tree-decorator.js":
/*!*************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/tree-decorator.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DecoratedTreeNode = exports.TreeDecoration = exports.AbstractTreeDecoratorService = exports.NoopTreeDecoratorService = exports.TreeDecoratorService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/es/inversify.js");
const common_1 = __webpack_require__(/*! ../../common */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/index.js");
const widget_decoration_1 = __webpack_require__(/*! ../widget-decoration */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/widget-decoration.js");
exports.TreeDecoratorService = Symbol('TreeDecoratorService');
/**
 * The default tree decorator service. Does nothing at all. One has to rebind to a concrete implementation
 * if decorators have to be supported in the tree widget.
 */
let NoopTreeDecoratorService = class NoopTreeDecoratorService {
    constructor() {
        this.emitter = new common_1.Emitter();
        this.onDidChangeDecorations = this.emitter.event;
    }
    dispose() {
        this.emitter.dispose();
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    getDecorations() {
        return new Map();
    }
    deflateDecorators() {
        return {};
    }
    inflateDecorators() {
        return new Map();
    }
};
NoopTreeDecoratorService = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)()
], NoopTreeDecoratorService);
exports.NoopTreeDecoratorService = NoopTreeDecoratorService;
/**
 * Abstract decorator service implementation which emits events from all known tree decorators and caches the current state.
 */
let AbstractTreeDecoratorService = class AbstractTreeDecoratorService {
    constructor(decorators) {
        this.decorators = decorators;
        this.onDidChangeDecorationsEmitter = new common_1.Emitter();
        this.onDidChangeDecorations = this.onDidChangeDecorationsEmitter.event;
        this.toDispose = new common_1.DisposableCollection();
        this.toDispose.push(this.onDidChangeDecorationsEmitter);
        this.toDispose.pushAll(this.decorators.map(decorator => decorator.onDidChangeDecorations(data => this.onDidChangeDecorationsEmitter.fire(undefined))));
    }
    dispose() {
        this.toDispose.dispose();
    }
    async getDecorations(tree) {
        const changes = new Map();
        for (const decorator of this.decorators) {
            for (const [id, data] of (await decorator.decorations(tree)).entries()) {
                if (changes.has(id)) {
                    changes.get(id).push(data);
                }
                else {
                    changes.set(id, [data]);
                }
            }
        }
        return changes;
    }
    deflateDecorators(decorations) {
        // eslint-disable-next-line no-null/no-null
        const state = Object.create(null);
        for (const [id, data] of decorations) {
            state[id] = data;
        }
        return state;
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    inflateDecorators(state) {
        const decorators = new Map();
        for (const id of Object.keys(state)) {
            decorators.set(id, state[id]);
        }
        return decorators;
    }
};
AbstractTreeDecoratorService = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)(),
    (0, tslib_1.__metadata)("design:paramtypes", [Array])
], AbstractTreeDecoratorService);
exports.AbstractTreeDecoratorService = AbstractTreeDecoratorService;
/**
 * @deprecated import from `@theia/core/lib/browser/widget-decoration` instead.
 */
exports.TreeDecoration = widget_decoration_1.WidgetDecoration;
var DecoratedTreeNode;
(function (DecoratedTreeNode) {
    /**
     * Type-guard for decorated tree nodes.
     */
    function is(node) {
        return !!node && 'decorationData' in node;
    }
    DecoratedTreeNode.is = is;
})(DecoratedTreeNode = exports.DecoratedTreeNode || (exports.DecoratedTreeNode = {}));


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/tree-expansion.js":
/*!*************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/tree-expansion.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2017 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TreeExpansionServiceImpl = exports.ExpandableTreeNode = exports.TreeExpansionService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/es/inversify.js");
const common_1 = __webpack_require__(/*! ../../common */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/index.js");
const tree_1 = __webpack_require__(/*! ./tree */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/tree.js");
exports.TreeExpansionService = Symbol('TreeExpansionService');
var ExpandableTreeNode;
(function (ExpandableTreeNode) {
    function is(node) {
        return !!node && tree_1.CompositeTreeNode.is(node) && 'expanded' in node;
    }
    ExpandableTreeNode.is = is;
    function isExpanded(node) {
        return ExpandableTreeNode.is(node) && node.expanded;
    }
    ExpandableTreeNode.isExpanded = isExpanded;
    function isCollapsed(node) {
        return ExpandableTreeNode.is(node) && !node.expanded;
    }
    ExpandableTreeNode.isCollapsed = isCollapsed;
})(ExpandableTreeNode = exports.ExpandableTreeNode || (exports.ExpandableTreeNode = {}));
let TreeExpansionServiceImpl = class TreeExpansionServiceImpl {
    constructor() {
        this.onExpansionChangedEmitter = new common_1.Emitter();
    }
    init() {
        this.tree.onNodeRefreshed(node => {
            for (const child of node.children) {
                if (ExpandableTreeNode.isExpanded(child)) {
                    node.waitUntil(this.tree.refresh(child));
                }
            }
        });
    }
    dispose() {
        this.onExpansionChangedEmitter.dispose();
    }
    get onExpansionChanged() {
        return this.onExpansionChangedEmitter.event;
    }
    fireExpansionChanged(node) {
        this.onExpansionChangedEmitter.fire(node);
    }
    async expandNode(raw) {
        const node = this.tree.validateNode(raw);
        if (ExpandableTreeNode.isCollapsed(node)) {
            return this.doExpandNode(node);
        }
        return undefined;
    }
    async doExpandNode(node) {
        const refreshed = await this.tree.refresh(node);
        if (ExpandableTreeNode.is(refreshed)) {
            refreshed.expanded = true;
            this.fireExpansionChanged(refreshed);
            return refreshed;
        }
        return undefined;
    }
    async collapseNode(raw) {
        const node = this.tree.validateNode(raw);
        return this.doCollapseNode(node);
    }
    async collapseAll(raw) {
        const node = this.tree.validateNode(raw);
        return this.doCollapseAll(node);
    }
    doCollapseAll(node) {
        let result = false;
        if (tree_1.CompositeTreeNode.is(node)) {
            for (const child of node.children) {
                result = this.doCollapseAll(child) || result;
            }
        }
        return this.doCollapseNode(node) || result;
    }
    doCollapseNode(node) {
        if (!ExpandableTreeNode.isExpanded(node)) {
            return false;
        }
        node.expanded = false;
        this.fireExpansionChanged(node);
        return true;
    }
    async toggleNodeExpansion(node) {
        if (node.expanded) {
            await this.collapseNode(node);
        }
        else {
            await this.expandNode(node);
        }
    }
};
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(tree_1.Tree),
    (0, tslib_1.__metadata)("design:type", Object)
], TreeExpansionServiceImpl.prototype, "tree", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.postConstruct)(),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", []),
    (0, tslib_1.__metadata)("design:returntype", void 0)
], TreeExpansionServiceImpl.prototype, "init", null);
TreeExpansionServiceImpl = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)()
], TreeExpansionServiceImpl);
exports.TreeExpansionServiceImpl = TreeExpansionServiceImpl;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/tree-focus-service.js":
/*!*****************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/tree-focus-service.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2022 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TreeFocusServiceImpl = exports.TreeFocusService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/es/inversify.js");
const common_1 = __webpack_require__(/*! ../../common */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/index.js");
const tree_1 = __webpack_require__(/*! ./tree */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/tree.js");
const tree_selection_1 = __webpack_require__(/*! ./tree-selection */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/tree-selection.js");
exports.TreeFocusService = Symbol('TreeFocusService');
let TreeFocusServiceImpl = class TreeFocusServiceImpl {
    constructor() {
        this.onDidChangeFocusEmitter = new common_1.Emitter();
    }
    get onDidChangeFocus() { return this.onDidChangeFocusEmitter.event; }
    get focusedNode() {
        const candidate = this.tree.getNode(this.focusedId);
        if (tree_selection_1.SelectableTreeNode.is(candidate)) {
            return candidate;
        }
    }
    setFocus(node) {
        if ((node === null || node === void 0 ? void 0 : node.id) !== this.focusedId) {
            this.focusedId = node === null || node === void 0 ? void 0 : node.id;
            this.onDidChangeFocusEmitter.fire(node);
        }
    }
    hasFocus(node) {
        return !!node && (node === null || node === void 0 ? void 0 : node.id) === this.focusedId;
    }
};
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(tree_1.Tree),
    (0, tslib_1.__metadata)("design:type", Object)
], TreeFocusServiceImpl.prototype, "tree", void 0);
TreeFocusServiceImpl = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)()
], TreeFocusServiceImpl);
exports.TreeFocusServiceImpl = TreeFocusServiceImpl;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/tree-iterator.js":
/*!************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/tree-iterator.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2017 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Iterators = exports.BottomUpTreeIterator = exports.TopDownTreeIterator = exports.BreadthFirstTreeIterator = exports.DepthFirstTreeIterator = exports.AbstractTreeIterator = exports.TreeIterator = void 0;
const tree_1 = __webpack_require__(/*! ./tree */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/tree.js");
const tree_expansion_1 = __webpack_require__(/*! ./tree-expansion */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/tree-expansion.js");
var TreeIterator;
(function (TreeIterator) {
    TreeIterator.DEFAULT_OPTIONS = {
        pruneCollapsed: false,
        pruneSiblings: false
    };
})(TreeIterator = exports.TreeIterator || (exports.TreeIterator = {}));
class AbstractTreeIterator {
    constructor(root, options) {
        this.root = root;
        this.options = {
            ...TreeIterator.DEFAULT_OPTIONS,
            ...options
        };
        this.delegate = this.iterator(this.root);
    }
    // tslint:disable-next-line:typedef
    [Symbol.iterator]() {
        return this.delegate;
    }
    next() {
        return this.delegate.next();
    }
    children(node) {
        if (!tree_1.CompositeTreeNode.is(node)) {
            return undefined;
        }
        if (this.options.pruneCollapsed && this.isCollapsed(node)) {
            return undefined;
        }
        return node.children.slice();
    }
    isCollapsed(node) {
        return tree_expansion_1.ExpandableTreeNode.isCollapsed(node);
    }
    isEmpty(nodes) {
        return nodes === undefined || nodes.length === 0;
    }
}
exports.AbstractTreeIterator = AbstractTreeIterator;
class DepthFirstTreeIterator extends AbstractTreeIterator {
    iterator(root) {
        return Iterators.depthFirst(root, this.children.bind(this));
    }
}
exports.DepthFirstTreeIterator = DepthFirstTreeIterator;
class BreadthFirstTreeIterator extends AbstractTreeIterator {
    iterator(root) {
        return Iterators.breadthFirst(root, this.children.bind(this));
    }
}
exports.BreadthFirstTreeIterator = BreadthFirstTreeIterator;
/**
 * This tree iterator visits all nodes from top to bottom considering the following rules.
 *
 * Let assume the following tree:
 * ```
 *   R
 *   |
 *   +---1
 *   |   |
 *   |   +---1.1
 *   |   |
 *   |   +---1.2
 *   |   |
 *   |   +---1.3
 *   |   |    |
 *   |   |    +---1.3.1
 *   |   |    |
 *   |   |    +---1.3.2
 *   |   |
 *   |   +---1.4
 *   |
 *   +---2
 *       |
 *       +---2.1
 * ```
 * When selecting `1.2` as the root, the normal `DepthFirstTreeIterator` would stop on `1.2` as it does not have children,
 * but this iterator will visit the next sibling (`1.3` and `1.4` but **not** `1.1`) nodes. So the expected traversal order will be
 * `1.2`, `1.3`, `1.3.1`, `1.3.2`,  and `1.4` then jumps to `2` and continues with `2.1`.
 */
class TopDownTreeIterator extends AbstractTreeIterator {
    iterator(root) {
        const doNext = this.doNext.bind(this);
        return (function* () {
            let next = root;
            while (next) {
                yield next;
                next = doNext(next);
            }
        }).bind(this)();
    }
    doNext(node) {
        return this.findFirstChild(node) || this.findNextSibling(node);
    }
    findFirstChild(node) {
        return (this.children(node) || [])[0];
    }
    findNextSibling(node) {
        if (!node) {
            return undefined;
        }
        if (this.options.pruneSiblings && node === this.root) {
            return undefined;
        }
        if (node.nextSibling) {
            return node.nextSibling;
        }
        return this.findNextSibling(node.parent);
    }
}
exports.TopDownTreeIterator = TopDownTreeIterator;
/**
 * Unlike other tree iterators, this does not visit all the nodes, it stops once it reaches the root node
 * while traversing up the tree hierarchy in an inverse pre-order fashion. This is the counterpart of the `TopDownTreeIterator`.
 */
class BottomUpTreeIterator extends AbstractTreeIterator {
    iterator(root) {
        const doNext = this.doNext.bind(this);
        return (function* () {
            let next = root;
            while (next) {
                yield next;
                next = doNext(next);
            }
        }).bind(this)();
    }
    doNext(node) {
        const previousSibling = node.previousSibling;
        const lastChild = this.lastChild(previousSibling);
        return lastChild || node.parent;
    }
    lastChild(node) {
        const children = node ? this.children(node) : [];
        if (this.isEmpty(children)) {
            return node;
        }
        if (tree_1.CompositeTreeNode.is(node)) {
            const lastChild = tree_1.CompositeTreeNode.getLastChild(node);
            return this.lastChild(lastChild);
        }
        return undefined;
    }
}
exports.BottomUpTreeIterator = BottomUpTreeIterator;
var Iterators;
(function (Iterators) {
    /**
     * Generator for depth first, pre-order tree traversal iteration.
     */
    function* depthFirst(root, children, include = () => true) {
        let stack = [];
        stack.push(root);
        while (stack.length > 0) {
            const top = stack.pop();
            yield top;
            stack = stack.concat((children(top) || []).filter(include).reverse());
        }
    }
    Iterators.depthFirst = depthFirst;
    /**
     * Generator for breadth first tree traversal iteration.
     */
    function* breadthFirst(root, children, include = () => true) {
        let queue = [];
        queue.push(root);
        while (queue.length > 0) {
            const head = queue.shift();
            yield head;
            queue = queue.concat((children(head) || []).filter(include));
        }
    }
    Iterators.breadthFirst = breadthFirst;
    /**
     * Returns with the iterator of the argument.
     */
    function asIterator(elements) {
        return elements.slice()[Symbol.iterator]();
    }
    Iterators.asIterator = asIterator;
    /**
     * Returns an iterator that cycles indefinitely over the elements of iterable.
     *  - If `start` is given it starts the iteration from that element. Otherwise, it starts with the first element of the array.
     *  - If `start` is given, it must contain by the `elements` array. Otherwise, an error will be thrown.
     *
     * **Warning**: Typical uses of the resulting iterator may produce an infinite loop. You should use an explicit break.
     */
    function* cycle(elements, start) {
        const copy = elements.slice();
        let index = !!start ? copy.indexOf(start) : 0;
        if (index === -1) {
            throw new Error(`${start} is not contained in ${copy}.`);
        }
        while (true) {
            yield copy[index];
            index++;
            if (index === copy.length) {
                index = 0;
            }
        }
    }
    Iterators.cycle = cycle;
})(Iterators = exports.Iterators || (exports.Iterators = {}));


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/tree-model.js":
/*!*********************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/tree-model.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2017 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TreeModelImpl = exports.TreeModel = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/es/inversify.js");
const event_1 = __webpack_require__(/*! ../../common/event */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/event.js");
const disposable_1 = __webpack_require__(/*! ../../common/disposable */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/disposable.js");
const logger_1 = __webpack_require__(/*! ../../common/logger */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/logger.js");
const tree_1 = __webpack_require__(/*! ./tree */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/tree.js");
const tree_selection_1 = __webpack_require__(/*! ./tree-selection */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/tree-selection.js");
const tree_expansion_1 = __webpack_require__(/*! ./tree-expansion */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/tree-expansion.js");
const tree_navigation_1 = __webpack_require__(/*! ./tree-navigation */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/tree-navigation.js");
const tree_iterator_1 = __webpack_require__(/*! ./tree-iterator */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/tree-iterator.js");
const tree_search_1 = __webpack_require__(/*! ./tree-search */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/tree-search.js");
const tree_focus_service_1 = __webpack_require__(/*! ./tree-focus-service */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/tree-focus-service.js");
/**
 * The tree model.
 */
exports.TreeModel = Symbol('TreeModel');
let TreeModelImpl = class TreeModelImpl {
    constructor() {
        this.onChangedEmitter = new event_1.Emitter();
        this.onOpenNodeEmitter = new event_1.Emitter();
        this.toDispose = new disposable_1.DisposableCollection();
    }
    init() {
        this.toDispose.push(this.tree);
        this.toDispose.push(this.tree.onChanged(() => this.fireChanged()));
        this.toDispose.push(this.selectionService);
        this.toDispose.push(this.expansionService);
        this.toDispose.push(this.expansionService.onExpansionChanged(node => {
            this.fireChanged();
            this.handleExpansion(node);
        }));
        this.toDispose.push(this.onOpenNodeEmitter);
        this.toDispose.push(this.onChangedEmitter);
        this.toDispose.push(this.treeSearch);
    }
    dispose() {
        this.toDispose.dispose();
    }
    handleExpansion(node) {
        this.selectIfAncestorOfSelected(node);
    }
    /**
     * Select the given node if it is the ancestor of a selected node.
     */
    selectIfAncestorOfSelected(node) {
        if (!node.expanded && this.selectedNodes.some(selectedNode => tree_1.CompositeTreeNode.isAncestor(node, selectedNode))) {
            if (tree_selection_1.SelectableTreeNode.isVisible(node)) {
                this.selectNode(node);
            }
        }
    }
    get root() {
        return this.tree.root;
    }
    set root(root) {
        this.tree.root = root;
    }
    get onChanged() {
        return this.onChangedEmitter.event;
    }
    get onOpenNode() {
        return this.onOpenNodeEmitter.event;
    }
    fireChanged() {
        this.onChangedEmitter.fire(undefined);
    }
    get onNodeRefreshed() {
        return this.tree.onNodeRefreshed;
    }
    getNode(id) {
        return this.tree.getNode(id);
    }
    getFocusedNode() {
        return this.focusService.focusedNode;
    }
    validateNode(node) {
        return this.tree.validateNode(node);
    }
    async refresh(parent) {
        if (parent) {
            return this.tree.refresh(parent);
        }
        return this.tree.refresh();
    }
    // tslint:disable-next-line:typedef
    get selectedNodes() {
        return this.selectionService.selectedNodes;
    }
    // tslint:disable-next-line:typedef
    get onSelectionChanged() {
        return this.selectionService.onSelectionChanged;
    }
    get onExpansionChanged() {
        return this.expansionService.onExpansionChanged;
    }
    async expandNode(raw) {
        for (const node of this.getExpansionCandidates(raw)) {
            if (tree_expansion_1.ExpandableTreeNode.is(node)) {
                return this.expansionService.expandNode(node);
            }
        }
        return undefined;
    }
    *getExpansionCandidates(raw) {
        yield raw;
        yield this.getFocusedNode();
        yield* this.selectedNodes;
    }
    async collapseNode(raw) {
        for (const node of this.getExpansionCandidates(raw)) {
            if (tree_expansion_1.ExpandableTreeNode.is(node)) {
                return this.expansionService.collapseNode(node);
            }
        }
        return false;
    }
    async collapseAll(raw) {
        const node = raw || this.getFocusedNode();
        if (tree_selection_1.SelectableTreeNode.is(node)) {
            this.selectNode(node);
        }
        if (tree_1.CompositeTreeNode.is(node)) {
            return this.expansionService.collapseAll(node);
        }
        return false;
    }
    async toggleNodeExpansion(raw) {
        for (const node of raw ? [raw] : this.selectedNodes) {
            if (tree_expansion_1.ExpandableTreeNode.is(node)) {
                await this.expansionService.toggleNodeExpansion(node);
            }
        }
    }
    selectPrev() {
        const node = this.getPrevNode();
        this.selectNodeIfSelectable(node);
    }
    selectPrevNode(type = tree_selection_1.TreeSelection.SelectionType.DEFAULT) {
        const node = this.getPrevSelectableNode();
        if (node) {
            this.addSelection({ node, type });
        }
    }
    getPrevNode(node = this.getFocusedNode()) {
        const iterator = this.createBackwardTreeIterator(node);
        return iterator && this.doGetNode(iterator);
    }
    getPrevSelectableNode(node = this.getFocusedNode()) {
        if (!node) {
            return this.getNextSelectableNode(this.root);
        }
        const iterator = this.createBackwardIterator(node);
        return iterator && this.doGetNextNode(iterator, this.isVisibleSelectableNode.bind(this));
    }
    selectNext() {
        const node = this.getNextNode();
        this.selectNodeIfSelectable(node);
    }
    selectNextNode(type = tree_selection_1.TreeSelection.SelectionType.DEFAULT) {
        const node = this.getNextSelectableNode();
        if (node) {
            this.addSelection({ node, type });
        }
    }
    getNextNode(node = this.getFocusedNode()) {
        const iterator = this.createTreeIterator(node);
        return iterator && this.doGetNode(iterator);
    }
    getNextSelectableNode(node) {
        var _a;
        if (node === void 0) { node = (_a = this.getFocusedNode()) !== null && _a !== void 0 ? _a : this.root; }
        const iterator = this.createIterator(node);
        return iterator && this.doGetNextNode(iterator, this.isVisibleSelectableNode.bind(this));
    }
    selectNodeIfSelectable(node) {
        if (tree_selection_1.SelectableTreeNode.is(node)) {
            this.addSelection(node);
        }
    }
    doGetNode(iterator) {
        iterator.next();
        const result = iterator.next();
        return result.done ? undefined : result.value;
    }
    doGetNextNode(iterator, criterion) {
        // Skip the first item. // TODO: clean this up, and skip the first item in a different way without loading everything.
        iterator.next();
        let result = iterator.next();
        while (!result.done) {
            if (criterion(result.value)) {
                return result.value;
            }
            result = iterator.next();
        }
        return undefined;
    }
    isVisibleSelectableNode(node) {
        return tree_selection_1.SelectableTreeNode.isVisible(node);
    }
    createBackwardTreeIterator(node) {
        const { filteredNodes } = this.treeSearch;
        if (filteredNodes.length === 0) {
            return node ? new tree_iterator_1.BottomUpTreeIterator(node, { pruneCollapsed: false }) : undefined;
        }
        if (node && filteredNodes.indexOf(node) === -1) {
            return undefined;
        }
        return tree_iterator_1.Iterators.cycle(filteredNodes.slice().reverse(), node);
    }
    createBackwardIterator(node) {
        const { filteredNodes } = this.treeSearch;
        if (filteredNodes.length === 0) {
            return node ? new tree_iterator_1.BottomUpTreeIterator(node, { pruneCollapsed: true }) : undefined;
        }
        if (node && filteredNodes.indexOf(node) === -1) {
            return undefined;
        }
        return tree_iterator_1.Iterators.cycle(filteredNodes.slice().reverse(), node);
    }
    createTreeIterator(node) {
        const { filteredNodes } = this.treeSearch;
        if (filteredNodes.length === 0) {
            return node && new tree_iterator_1.TopDownTreeIterator(node, { pruneCollapsed: false });
        }
        if (node && filteredNodes.indexOf(node) === -1) {
            return undefined;
        }
        return tree_iterator_1.Iterators.cycle(filteredNodes, node);
    }
    createIterator(node) {
        const { filteredNodes } = this.treeSearch;
        if (filteredNodes.length === 0) {
            return node && this.createForwardIteratorForNode(node);
        }
        if (node && filteredNodes.indexOf(node) === -1) {
            return undefined;
        }
        return tree_iterator_1.Iterators.cycle(filteredNodes, node);
    }
    createForwardIteratorForNode(node) {
        return new tree_iterator_1.TopDownTreeIterator(node, { pruneCollapsed: true });
    }
    openNode(raw) {
        const node = raw !== null && raw !== void 0 ? raw : this.focusService.focusedNode;
        if (node) {
            this.doOpenNode(node);
            this.onOpenNodeEmitter.fire(node);
        }
    }
    doOpenNode(node) {
        if (tree_expansion_1.ExpandableTreeNode.is(node)) {
            this.toggleNodeExpansion(node);
        }
    }
    selectParent() {
        const node = this.getFocusedNode();
        if (node) {
            const parent = tree_selection_1.SelectableTreeNode.getVisibleParent(node);
            if (parent) {
                this.selectNode(parent);
            }
        }
    }
    async navigateTo(nodeOrId) {
        if (nodeOrId) {
            const node = typeof nodeOrId === 'string' ? this.getNode(nodeOrId) : nodeOrId;
            if (node) {
                this.navigationService.push(node);
                await this.doNavigate(node);
                return node;
            }
        }
        return undefined;
    }
    canNavigateForward() {
        return !!this.navigationService.next;
    }
    canNavigateBackward() {
        return !!this.navigationService.prev;
    }
    async navigateForward() {
        const node = this.navigationService.advance();
        if (node) {
            await this.doNavigate(node);
        }
    }
    async navigateBackward() {
        const node = this.navigationService.retreat();
        if (node) {
            await this.doNavigate(node);
        }
    }
    async doNavigate(node) {
        this.tree.root = node;
        if (tree_expansion_1.ExpandableTreeNode.is(node)) {
            await this.expandNode(node);
        }
        if (tree_selection_1.SelectableTreeNode.is(node)) {
            this.selectNode(node);
        }
    }
    addSelection(selectionOrTreeNode) {
        this.selectionService.addSelection(selectionOrTreeNode);
    }
    clearSelection() {
        this.selectionService.clearSelection();
    }
    selectNode(node) {
        this.addSelection(node);
    }
    toggleNode(node) {
        this.addSelection({ node, type: tree_selection_1.TreeSelection.SelectionType.TOGGLE });
    }
    selectRange(node) {
        this.addSelection({ node, type: tree_selection_1.TreeSelection.SelectionType.RANGE });
    }
    storeState() {
        return {
            selection: this.selectionService.storeState()
        };
    }
    restoreState(state) {
        if (state.selection) {
            this.selectionService.restoreState(state.selection);
        }
    }
    get onDidChangeBusy() {
        return this.tree.onDidChangeBusy;
    }
    markAsBusy(node, ms, token) {
        return this.tree.markAsBusy(node, ms, token);
    }
    get onDidUpdate() {
        return this.tree.onDidUpdate;
    }
    markAsChecked(node, checked) {
        this.tree.markAsChecked(node, checked);
    }
};
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(logger_1.ILogger),
    (0, tslib_1.__metadata)("design:type", Object)
], TreeModelImpl.prototype, "logger", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(tree_1.Tree),
    (0, tslib_1.__metadata)("design:type", Object)
], TreeModelImpl.prototype, "tree", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(tree_selection_1.TreeSelectionService),
    (0, tslib_1.__metadata)("design:type", Object)
], TreeModelImpl.prototype, "selectionService", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(tree_expansion_1.TreeExpansionService),
    (0, tslib_1.__metadata)("design:type", Object)
], TreeModelImpl.prototype, "expansionService", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(tree_navigation_1.TreeNavigationService),
    (0, tslib_1.__metadata)("design:type", tree_navigation_1.TreeNavigationService)
], TreeModelImpl.prototype, "navigationService", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(tree_focus_service_1.TreeFocusService),
    (0, tslib_1.__metadata)("design:type", Object)
], TreeModelImpl.prototype, "focusService", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(tree_search_1.TreeSearch),
    (0, tslib_1.__metadata)("design:type", tree_search_1.TreeSearch)
], TreeModelImpl.prototype, "treeSearch", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.postConstruct)(),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", []),
    (0, tslib_1.__metadata)("design:returntype", void 0)
], TreeModelImpl.prototype, "init", null);
TreeModelImpl = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)()
], TreeModelImpl);
exports.TreeModelImpl = TreeModelImpl;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/tree-navigation.js":
/*!**************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/tree-navigation.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2017 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TreeNavigationService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/es/inversify.js");
let TreeNavigationService = class TreeNavigationService {
    constructor() {
        this.index = -1;
        this.nodes = [];
    }
    get next() {
        return this.nodes[this.index + 1];
    }
    get prev() {
        return this.nodes[this.index - 1];
    }
    advance() {
        const node = this.next;
        if (node) {
            this.index = this.index + 1;
            return node;
        }
        return undefined;
    }
    retreat() {
        const node = this.prev;
        if (node) {
            this.index = this.index - 1;
            return node;
        }
        return undefined;
    }
    push(node) {
        this.nodes = this.nodes.slice(0, this.index + 1);
        this.nodes.push(node);
        this.index = this.index + 1;
    }
};
TreeNavigationService = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)()
], TreeNavigationService);
exports.TreeNavigationService = TreeNavigationService;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/tree-preference.js":
/*!**************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/tree-preference.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2024 STMicroelectronics and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.bindTreePreferences = exports.TreePreferences = exports.TreeConfiguration = exports.treePreferencesSchema = exports.PREFERENCE_NAME_TREE_INDENT = void 0;
const preferences_1 = __webpack_require__(/*! ../preferences */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/preferences/index.js");
const injectable_preference_proxy_1 = __webpack_require__(/*! ../preferences/injectable-preference-proxy */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/preferences/injectable-preference-proxy.js");
const nls_1 = __webpack_require__(/*! ../../common/nls */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/nls.js");
exports.PREFERENCE_NAME_TREE_INDENT = 'workbench.tree.indent';
exports.treePreferencesSchema = {
    type: 'object',
    properties: {
        [exports.PREFERENCE_NAME_TREE_INDENT]: {
            description: nls_1.nls.localizeByDefault('Controls tree indentation in pixels.'),
            type: 'number',
            default: 8,
            minimum: 4,
            maximum: 40
        },
    }
};
class TreeConfiguration {
}
exports.TreeConfiguration = TreeConfiguration;
exports.TreePreferences = Symbol('treePreferences');
function bindTreePreferences(bind) {
    bind(exports.TreePreferences).toDynamicValue(ctx => {
        const factory = ctx.container.get(injectable_preference_proxy_1.PreferenceProxyFactory);
        return factory(exports.treePreferencesSchema);
    }).inSingletonScope();
    bind(preferences_1.PreferenceContribution).toConstantValue({ schema: exports.treePreferencesSchema });
}
exports.bindTreePreferences = bindTreePreferences;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/tree-search.js":
/*!**********************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/tree-search.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TreeSearch = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/es/inversify.js");
const disposable_1 = __webpack_require__(/*! ../../common/disposable */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/disposable.js");
const event_1 = __webpack_require__(/*! ../../common/event */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/event.js");
const tree_1 = __webpack_require__(/*! ./tree */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/tree.js");
const fuzzy_search_1 = __webpack_require__(/*! ./fuzzy-search */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/fuzzy-search.js");
const tree_iterator_1 = __webpack_require__(/*! ./tree-iterator */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/tree-iterator.js");
const label_provider_1 = __webpack_require__(/*! ../label-provider */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/label-provider.js");
let TreeSearch = class TreeSearch {
    constructor() {
        this.disposables = new disposable_1.DisposableCollection();
        this.filteredNodesEmitter = new event_1.Emitter();
        this._filterResult = [];
        this._filteredNodes = [];
        this._filteredNodesAndParents = new Set();
    }
    init() {
        this.disposables.push(this.filteredNodesEmitter);
    }
    getHighlights() {
        return new Map(this._filterResult.map(m => [m.item.id, this.toCaptionHighlight(m)]));
    }
    /**
     * Resolves to all the visible tree nodes that match the search pattern.
     */
    async filter(pattern) {
        const { root } = this.tree;
        this._filteredNodesAndParents = new Set();
        if (!pattern || !root) {
            this._filterResult = [];
            this._filteredNodes = [];
            this.fireFilteredNodesChanged(this._filteredNodes);
            return [];
        }
        const items = [...new tree_iterator_1.TopDownTreeIterator(root)];
        const transform = (node) => this.labelProvider.getName(node);
        this._filterResult = await this.fuzzySearch.filter({
            items,
            pattern,
            transform
        });
        this._filteredNodes = this._filterResult.map(({ item }) => {
            this.addAllParentsToFilteredSet(item);
            return item;
        });
        this.fireFilteredNodesChanged(this._filteredNodes);
        return this._filteredNodes.slice();
    }
    addAllParentsToFilteredSet(node) {
        let toAdd = node;
        while (toAdd && !this._filteredNodesAndParents.has(toAdd.id)) {
            this._filteredNodesAndParents.add(toAdd.id);
            toAdd = toAdd.parent;
        }
        ;
    }
    /**
     * Returns with the filtered nodes after invoking the `filter` method.
     */
    get filteredNodes() {
        return this._filteredNodes.slice();
    }
    /**
     * Event that is fired when the filtered nodes have been changed.
     */
    get onFilteredNodesChanged() {
        return this.filteredNodesEmitter.event;
    }
    passesFilters(node) {
        return this._filteredNodesAndParents.has(node.id);
    }
    dispose() {
        this.disposables.dispose();
    }
    fireFilteredNodesChanged(nodes) {
        this.filteredNodesEmitter.fire(nodes);
    }
    toCaptionHighlight(match) {
        return {
            ranges: match.ranges.map(this.mapRange.bind(this))
        };
    }
    mapRange(range) {
        const { offset, length } = range;
        return {
            offset,
            length
        };
    }
};
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(tree_1.Tree),
    (0, tslib_1.__metadata)("design:type", Object)
], TreeSearch.prototype, "tree", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(fuzzy_search_1.FuzzySearch),
    (0, tslib_1.__metadata)("design:type", fuzzy_search_1.FuzzySearch)
], TreeSearch.prototype, "fuzzySearch", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(label_provider_1.LabelProvider),
    (0, tslib_1.__metadata)("design:type", label_provider_1.LabelProvider)
], TreeSearch.prototype, "labelProvider", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.postConstruct)(),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", []),
    (0, tslib_1.__metadata)("design:returntype", void 0)
], TreeSearch.prototype, "init", null);
TreeSearch = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)()
], TreeSearch);
exports.TreeSearch = TreeSearch;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/tree-selection-impl.js":
/*!******************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/tree-selection-impl.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TreeSelectionServiceImpl = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/es/inversify.js");
const tree_1 = __webpack_require__(/*! ./tree */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/tree.js");
const common_1 = __webpack_require__(/*! ../../common */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/index.js");
const tree_selection_state_1 = __webpack_require__(/*! ./tree-selection-state */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/tree-selection-state.js");
const tree_selection_1 = __webpack_require__(/*! ./tree-selection */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/tree-selection.js");
const tree_focus_service_1 = __webpack_require__(/*! ./tree-focus-service */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/tree-focus-service.js");
let TreeSelectionServiceImpl = class TreeSelectionServiceImpl {
    constructor() {
        this.onSelectionChangedEmitter = new common_1.Emitter();
    }
    init() {
        this.state = new tree_selection_state_1.TreeSelectionState(this.tree);
    }
    dispose() {
        this.onSelectionChangedEmitter.dispose();
    }
    get selectedNodes() {
        return this.state.selection();
    }
    get onSelectionChanged() {
        return this.onSelectionChangedEmitter.event;
    }
    fireSelectionChanged() {
        this.onSelectionChangedEmitter.fire(this.state.selection());
    }
    addSelection(selectionOrTreeNode) {
        const selection = ((arg) => {
            const type = tree_selection_1.TreeSelection.SelectionType.DEFAULT;
            if (tree_selection_1.TreeSelection.is(arg)) {
                return {
                    type,
                    ...arg
                };
            }
            return {
                type,
                node: arg
            };
        })(selectionOrTreeNode);
        const node = this.validateNode(selection.node);
        if (node === undefined) {
            return;
        }
        Object.assign(selection, { node });
        const newState = this.state.nextState(selection);
        this.transiteTo(newState);
    }
    clearSelection() {
        this.transiteTo(new tree_selection_state_1.TreeSelectionState(this.tree), false);
    }
    transiteTo(newState, setFocus = true) {
        const oldNodes = this.state.selection();
        const newNodes = newState.selection();
        const toUnselect = this.difference(oldNodes, newNodes);
        const toSelect = this.difference(newNodes, oldNodes);
        this.unselect(toUnselect);
        this.select(toSelect);
        this.removeFocus(oldNodes, newNodes);
        if (setFocus) {
            this.addFocus(newState.node);
        }
        this.state = newState;
        this.fireSelectionChanged();
    }
    unselect(nodes) {
        nodes.forEach(node => node.selected = false);
    }
    select(nodes) {
        nodes.forEach(node => node.selected = true);
    }
    removeFocus(...nodes) {
        nodes.forEach(node => node.forEach(n => n.focus = false));
    }
    addFocus(node) {
        if (node) {
            node.focus = true;
        }
        this.focusService.setFocus(node);
    }
    /**
     * Returns an array of the difference of two arrays. The returned array contains all elements that are contained by
     * `left` and not contained by `right`. `right` may also contain elements not present in `left`: these are simply ignored.
     */
    difference(left, right) {
        return left.filter(item => right.indexOf(item) === -1);
    }
    /**
     * Returns a reference to the argument if the node exists in the tree. Otherwise, `undefined`.
     */
    validateNode(node) {
        const result = this.tree.validateNode(node);
        return tree_selection_1.SelectableTreeNode.is(result) ? result : undefined;
    }
    storeState() {
        return {
            selectionStack: this.state.selectionStack.map(s => ({
                focus: s.focus && s.focus.id || undefined,
                node: s.node && s.node.id || undefined,
                type: s.type
            }))
        };
    }
    restoreState(state) {
        const selectionStack = [];
        for (const selection of state.selectionStack) {
            const node = selection.node && this.tree.getNode(selection.node) || undefined;
            if (!tree_selection_1.SelectableTreeNode.is(node)) {
                break;
            }
            const focus = selection.focus && this.tree.getNode(selection.focus) || undefined;
            selectionStack.push({
                node,
                focus: tree_selection_1.SelectableTreeNode.is(focus) && focus || undefined,
                type: selection.type
            });
        }
        if (selectionStack.length) {
            this.transiteTo(new tree_selection_state_1.TreeSelectionState(this.tree, selectionStack));
        }
    }
};
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(tree_1.Tree),
    (0, tslib_1.__metadata)("design:type", Object)
], TreeSelectionServiceImpl.prototype, "tree", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(tree_focus_service_1.TreeFocusService),
    (0, tslib_1.__metadata)("design:type", Object)
], TreeSelectionServiceImpl.prototype, "focusService", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.postConstruct)(),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", []),
    (0, tslib_1.__metadata)("design:returntype", void 0)
], TreeSelectionServiceImpl.prototype, "init", null);
TreeSelectionServiceImpl = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)()
], TreeSelectionServiceImpl);
exports.TreeSelectionServiceImpl = TreeSelectionServiceImpl;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/tree-selection-state.js":
/*!*******************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/tree-selection-state.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TreeSelectionState = exports.FocusableTreeSelection = void 0;
const tree_iterator_1 = __webpack_require__(/*! ./tree-iterator */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/tree-iterator.js");
const tree_selection_1 = __webpack_require__(/*! ./tree-selection */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/tree-selection.js");
var FocusableTreeSelection;
(function (FocusableTreeSelection) {
    /**
     * `true` if the argument is a focusable tree selection. Otherwise, `false`.
     */
    function is(arg) {
        return tree_selection_1.TreeSelection.is(arg) && 'focus' in arg;
    }
    FocusableTreeSelection.is = is;
    /**
     * Returns with the tree node that has the focus if the argument is a focusable tree selection.
     * Otherwise, returns `undefined`.
     */
    function focus(arg) {
        return is(arg) ? arg.focus : undefined;
    }
    FocusableTreeSelection.focus = focus;
})(FocusableTreeSelection = exports.FocusableTreeSelection || (exports.FocusableTreeSelection = {}));
/**
 * Class for representing and managing the selection state and the focus of a tree.
 */
class TreeSelectionState {
    constructor(tree, selectionStack = []) {
        this.tree = tree;
        this.selectionStack = selectionStack;
    }
    nextState(selection) {
        const { node, type } = {
            type: tree_selection_1.TreeSelection.SelectionType.DEFAULT,
            ...selection
        };
        switch (type) {
            case tree_selection_1.TreeSelection.SelectionType.DEFAULT: return this.handleDefault(this, node);
            case tree_selection_1.TreeSelection.SelectionType.TOGGLE: return this.handleToggle(this, node);
            case tree_selection_1.TreeSelection.SelectionType.RANGE: return this.handleRange(this, node);
            default: throw new Error(`Unexpected tree selection type: ${type}.`);
        }
    }
    selection() {
        const copy = this.checkNoDefaultSelection(this.selectionStack);
        const nodeIds = new Set();
        for (let i = 0; i < copy.length; i++) {
            const { node, type } = copy[i];
            if (tree_selection_1.TreeSelection.isRange(type)) {
                const selection = copy[i];
                for (const id of this.selectionRange(selection).map(n => n.id)) {
                    nodeIds.add(id);
                }
            }
            else if (tree_selection_1.TreeSelection.isToggle(type)) {
                if (nodeIds.has(node.id)) {
                    nodeIds.delete(node.id);
                }
                else {
                    nodeIds.add(node.id);
                }
            }
        }
        return Array.from(nodeIds.keys()).map(id => this.tree.getNode(id)).filter(tree_selection_1.SelectableTreeNode.is).reverse();
    }
    get focus() {
        var _a;
        const copy = this.checkNoDefaultSelection(this.selectionStack);
        const candidate = (_a = copy[copy.length - 1]) === null || _a === void 0 ? void 0 : _a.focus;
        return this.toSelectableTreeNode(candidate);
    }
    get node() {
        var _a;
        const copy = this.checkNoDefaultSelection(this.selectionStack);
        return this.toSelectableTreeNode((_a = copy[copy.length - 1]) === null || _a === void 0 ? void 0 : _a.node);
    }
    handleDefault(state, node) {
        const { tree } = state;
        return new TreeSelectionState(tree, [{
                node,
                type: tree_selection_1.TreeSelection.SelectionType.TOGGLE,
                focus: node
            }]);
    }
    handleToggle(state, node) {
        const { tree, selectionStack } = state;
        const copy = this.checkNoDefaultSelection(selectionStack).slice();
        const focus = (() => {
            const allRanges = copy.filter(selection => tree_selection_1.TreeSelection.isRange(selection));
            for (let i = allRanges.length - 1; i >= 0; i--) {
                const latestRangeIndex = copy.indexOf(allRanges[i]);
                const latestRangeSelection = copy[latestRangeIndex];
                const latestRange = (latestRangeSelection === null || latestRangeSelection === void 0 ? void 0 : latestRangeSelection.focus) ? this.selectionRange(latestRangeSelection) : [];
                if (latestRange.indexOf(node) !== -1) {
                    if (this.focus === latestRangeSelection.focus) {
                        return latestRangeSelection.focus || node;
                    }
                    else {
                        return this.focus;
                    }
                }
            }
            return node;
        })();
        return new TreeSelectionState(tree, [...copy, {
                node,
                type: tree_selection_1.TreeSelection.SelectionType.TOGGLE,
                focus
            }]);
    }
    handleRange(state, node) {
        const { tree, selectionStack } = state;
        const copy = this.checkNoDefaultSelection(selectionStack).slice();
        let focus = FocusableTreeSelection.focus(copy[copy.length - 1]);
        // Drop the previous range when we are trying to modify that.
        if (tree_selection_1.TreeSelection.isRange(copy[copy.length - 1])) {
            const range = this.selectionRange(copy.pop());
            // And we drop all preceding individual nodes that were contained in the range we are dropping.
            // That means, anytime we cover individual nodes with a range, they will belong to the range so we need to drop them now.
            for (let i = copy.length - 1; i >= 0; i--) {
                if (range.indexOf(copy[i].node) !== -1) {
                    // Make sure to keep a reference to the focus while we are discarding previous elements. Otherwise, we lose this information.
                    focus = copy[i].focus;
                    copy.splice(i, 1);
                }
            }
        }
        return new TreeSelectionState(tree, [...copy, {
                node,
                type: tree_selection_1.TreeSelection.SelectionType.RANGE,
                focus
            }]);
    }
    /**
     * Returns with an array of items representing the selection range. The from node is the `focus` the to node
     * is the selected node itself on the tree selection. Both the `from` node and the `to` node are inclusive.
     */
    selectionRange(selection) {
        const fromNode = selection.focus;
        const toNode = selection.node;
        if (fromNode === undefined) {
            return [];
        }
        if (toNode === fromNode) {
            return [toNode];
        }
        const { root } = this.tree;
        if (root === undefined) {
            return [];
        }
        const to = this.tree.validateNode(toNode);
        if (to === undefined) {
            return [];
        }
        const from = this.tree.validateNode(fromNode);
        if (from === undefined) {
            return [];
        }
        let started = false;
        let finished = false;
        const range = [];
        for (const node of new tree_iterator_1.DepthFirstTreeIterator(root, { pruneCollapsed: true })) {
            if (finished) {
                break;
            }
            // Only collect items which are between (inclusive) the `from` node and the `to` node.
            if (node === from || node === to) {
                if (started) {
                    finished = true;
                }
                else {
                    started = true;
                }
            }
            if (started) {
                range.push(node);
            }
        }
        // We need to reverse the selection range order.
        if (range.indexOf(from) > range.indexOf(to)) {
            range.reverse();
        }
        return range.filter(tree_selection_1.SelectableTreeNode.is);
    }
    toSelectableTreeNode(node) {
        if (!!node) {
            const candidate = this.tree.getNode(node.id);
            if (!!candidate) {
                if (tree_selection_1.SelectableTreeNode.is(candidate)) {
                    return candidate;
                }
                else {
                    console.warn(`Could not map to a selectable tree node. Node with ID: ${node.id} is not a selectable node.`);
                }
            }
            else {
                console.warn(`Could not map to a selectable tree node. Node does not exist with ID: ${node.id}.`);
            }
        }
        return undefined;
    }
    /**
     * Checks whether the argument contains any `DEFAULT` tree selection type. If yes, throws an error, otherwise returns with a reference the argument.
     */
    checkNoDefaultSelection(selections) {
        if (selections.some(selection => selection.type === undefined || selection.type === tree_selection_1.TreeSelection.SelectionType.DEFAULT)) {
            throw new Error(`Unexpected DEFAULT selection type. [${selections.map(selection => `ID: ${selection.node.id} | ${selection.type}`).join(', ')}]`);
        }
        return selections;
    }
}
exports.TreeSelectionState = TreeSelectionState;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/tree-selection.js":
/*!*************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/tree-selection.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2017 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SelectableTreeNode = exports.TreeSelection = exports.TreeSelectionService = void 0;
const tree_1 = __webpack_require__(/*! ./tree */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/tree.js");
const common_1 = __webpack_require__(/*! ../../common */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/index.js");
/**
 * The tree selection service.
 */
exports.TreeSelectionService = Symbol('TreeSelectionService');
var TreeSelection;
(function (TreeSelection) {
    /**
     * Enumeration of selection types.
     */
    let SelectionType;
    (function (SelectionType) {
        SelectionType[SelectionType["DEFAULT"] = 0] = "DEFAULT";
        SelectionType[SelectionType["TOGGLE"] = 1] = "TOGGLE";
        SelectionType[SelectionType["RANGE"] = 2] = "RANGE";
    })(SelectionType = TreeSelection.SelectionType || (TreeSelection.SelectionType = {}));
    function is(arg) {
        return (0, common_1.isObject)(arg) && 'node' in arg;
    }
    TreeSelection.is = is;
    function isRange(arg) {
        return isSelectionTypeOf(arg, SelectionType.RANGE);
    }
    TreeSelection.isRange = isRange;
    function isToggle(arg) {
        return isSelectionTypeOf(arg, SelectionType.TOGGLE);
    }
    TreeSelection.isToggle = isToggle;
    function isSelectionTypeOf(arg, expected) {
        if (arg === undefined) {
            return false;
        }
        const type = typeof arg === 'number' ? arg : arg.type;
        return type === expected;
    }
})(TreeSelection = exports.TreeSelection || (exports.TreeSelection = {}));
var SelectableTreeNode;
(function (SelectableTreeNode) {
    function is(node) {
        return tree_1.TreeNode.is(node) && 'selected' in node;
    }
    SelectableTreeNode.is = is;
    function isSelected(node) {
        return is(node) && node.selected;
    }
    SelectableTreeNode.isSelected = isSelected;
    /**
     * @deprecated @since 1.27.0. Use TreeFocusService to track the focused node.
     */
    function hasFocus(node) {
        return is(node) && node.focus === true;
    }
    SelectableTreeNode.hasFocus = hasFocus;
    function isVisible(node) {
        return is(node) && tree_1.TreeNode.isVisible(node);
    }
    SelectableTreeNode.isVisible = isVisible;
    function getVisibleParent(node) {
        if (node) {
            if (isVisible(node.parent)) {
                return node.parent;
            }
            return getVisibleParent(node.parent);
        }
    }
    SelectableTreeNode.getVisibleParent = getVisibleParent;
})(SelectableTreeNode = exports.SelectableTreeNode || (exports.SelectableTreeNode = {}));


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/tree-view-welcome-widget.js":
/*!***********************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/tree-view-welcome-widget.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2020 SAP SE or an SAP affiliate company and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TreeViewWelcomeWidget = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
/*---------------------------------------------------------------------------------------------
*  Copyright (c) Microsoft Corporation. All rights reserved.
*  Licensed under the MIT License. See License.txt in the project root for license information.
*--------------------------------------------------------------------------------------------*/
// some code is copied and modified from: https://github.com/microsoft/vscode/blob/573e5145ae3b50523925a6f6315d373e649d1b06/src/vs/base/common/linkedText.ts
const React = __webpack_require__(/*! react */ "../node_modules/react/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/es/inversify.js");
const common_1 = __webpack_require__(/*! ../../common */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/index.js");
const context_key_service_1 = __webpack_require__(/*! ../context-key-service */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/context-key-service.js");
const tree_widget_1 = __webpack_require__(/*! ./tree-widget */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/tree-widget.js");
const window_service_1 = __webpack_require__(/*! ../window/window-service */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/window/window-service.js");
let TreeViewWelcomeWidget = class TreeViewWelcomeWidget extends tree_widget_1.TreeWidget {
    constructor() {
        super(...arguments);
        this.viewWelcomeNodes = [];
        this.items = [];
        this.openLinkOrCommand = (event, href) => {
            event.stopPropagation();
            if (href.startsWith('command:')) {
                const command = href.replace('command:', '');
                this.commands.executeCommand(command);
            }
            else {
                this.windowService.openNewWindow(href, { external: true });
            }
        };
    }
    get visibleItems() {
        const visibleItems = this.items.filter(v => v.visible);
        if (visibleItems.length && this.defaultItem) {
            return [this.defaultItem.welcomeInfo];
        }
        return visibleItems.map(v => v.welcomeInfo);
    }
    renderTree(model) {
        if (this.shouldShowWelcomeView() && this.visibleItems.length) {
            return this.renderViewWelcome();
        }
        return super.renderTree(model);
    }
    shouldShowWelcomeView() {
        return false;
    }
    renderViewWelcome() {
        return (React.createElement("div", { className: 'theia-WelcomeView' }, ...this.viewWelcomeNodes));
    }
    handleViewWelcomeContentChange(viewWelcomes) {
        this.items = [];
        for (const welcomeInfo of viewWelcomes) {
            if (welcomeInfo.when === 'default') {
                this.defaultItem = { welcomeInfo, visible: true };
            }
            else {
                const visible = welcomeInfo.when === undefined || this.contextService.match(welcomeInfo.when);
                this.items.push({ welcomeInfo, visible });
            }
        }
        this.updateViewWelcomeNodes();
        this.update();
    }
    handleWelcomeContextChange() {
        let didChange = false;
        for (const item of this.items) {
            if (!item.welcomeInfo.when || item.welcomeInfo.when === 'default') {
                continue;
            }
            const visible = item.welcomeInfo.when === undefined || this.contextService.match(item.welcomeInfo.when);
            if (item.visible === visible) {
                continue;
            }
            item.visible = visible;
            didChange = true;
        }
        if (didChange) {
            this.updateViewWelcomeNodes();
            this.update();
        }
    }
    updateViewWelcomeNodes() {
        this.viewWelcomeNodes = [];
        const items = this.visibleItems.sort((a, b) => a.order - b.order);
        for (const [iIndex, { content }] of items.entries()) {
            const lines = content.split('\n');
            for (let [lIndex, line] of lines.entries()) {
                const lineKey = `${iIndex}-${lIndex}`;
                line = line.trim();
                if (!line) {
                    continue;
                }
                const linkedTextItems = this.parseLinkedText(line);
                if (linkedTextItems.length === 1 && typeof linkedTextItems[0] !== 'string') {
                    this.viewWelcomeNodes.push(this.renderButtonNode(linkedTextItems[0], lineKey));
                }
                else {
                    const linkedTextNodes = [];
                    for (const [nIndex, node] of linkedTextItems.entries()) {
                        const linkedTextKey = `${lineKey}-${nIndex}`;
                        if (typeof node === 'string') {
                            linkedTextNodes.push(this.renderTextNode(node, linkedTextKey));
                        }
                        else {
                            linkedTextNodes.push(this.renderCommandLinkNode(node, linkedTextKey));
                        }
                    }
                    this.viewWelcomeNodes.push(React.createElement("div", { key: `line-${lineKey}` }, ...linkedTextNodes));
                }
            }
        }
    }
    renderButtonNode(node, lineKey) {
        return (React.createElement("div", { key: `line-${lineKey}`, className: 'theia-WelcomeViewButtonWrapper' },
            React.createElement("button", { title: node.title, className: 'theia-button theia-WelcomeViewButton', disabled: !this.isEnabledClick(node.href), onClick: e => this.openLinkOrCommand(e, node.href) }, node.label)));
    }
    renderTextNode(node, textKey) {
        return React.createElement("span", { key: `text-${textKey}` }, node);
    }
    renderCommandLinkNode(node, linkKey) {
        return (React.createElement("a", { key: `link-${linkKey}`, className: this.getLinkClassName(node.href), title: node.title || '', onClick: e => this.openLinkOrCommand(e, node.href) }, node.label));
    }
    getLinkClassName(href) {
        const classNames = ['theia-WelcomeViewCommandLink'];
        if (!this.isEnabledClick(href)) {
            classNames.push('disabled');
        }
        return classNames.join(' ');
    }
    isEnabledClick(href) {
        if (href.startsWith('command:')) {
            const command = href.replace('command:', '');
            return this.commands.isEnabled(command);
        }
        return true;
    }
    parseLinkedText(text) {
        const result = [];
        const linkRegex = /\[([^\]]+)\]\(((?:https?:\/\/|command:)[^\)\s]+)(?: ("|')([^\3]+)(\3))?\)/gi;
        let index = 0;
        let match;
        while (match = linkRegex.exec(text)) {
            if (match.index - index > 0) {
                result.push(text.substring(index, match.index));
            }
            const [, label, href, , title] = match;
            if (title) {
                result.push({ label, href, title });
            }
            else {
                result.push({ label, href });
            }
            index = match.index + match[0].length;
        }
        if (index < text.length) {
            result.push(text.substring(index));
        }
        return result;
    }
};
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(common_1.CommandRegistry),
    (0, tslib_1.__metadata)("design:type", common_1.CommandRegistry)
], TreeViewWelcomeWidget.prototype, "commands", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(context_key_service_1.ContextKeyService),
    (0, tslib_1.__metadata)("design:type", Object)
], TreeViewWelcomeWidget.prototype, "contextService", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(window_service_1.WindowService),
    (0, tslib_1.__metadata)("design:type", Object)
], TreeViewWelcomeWidget.prototype, "windowService", void 0);
TreeViewWelcomeWidget = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)()
], TreeViewWelcomeWidget);
exports.TreeViewWelcomeWidget = TreeViewWelcomeWidget;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/tree-widget-selection.js":
/*!********************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/tree-widget-selection.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2019 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TreeWidgetSelection = void 0;
const tree_widget_1 = __webpack_require__(/*! ./tree-widget */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/tree-widget.js");
var TreeWidgetSelection;
(function (TreeWidgetSelection) {
    function isSource(selection, source) {
        return getSource(selection) === source;
    }
    TreeWidgetSelection.isSource = isSource;
    function getSource(selection) {
        return is(selection) ? selection.source : undefined;
    }
    TreeWidgetSelection.getSource = getSource;
    function is(selection) {
        return Array.isArray(selection) && ('source' in selection) && selection.source instanceof tree_widget_1.TreeWidget;
    }
    TreeWidgetSelection.is = is;
    function create(source) {
        const focusedNode = source.model.getFocusedNode();
        const selectedNodes = source.model.selectedNodes;
        const focusedIndex = selectedNodes.indexOf(focusedNode);
        // Ensure that the focused node is at index 0 - used as default single selection.
        if (focusedNode && focusedIndex > 0) {
            const selection = [focusedNode, ...selectedNodes.slice(0, focusedIndex), ...selectedNodes.slice(focusedIndex + 1)];
            return Object.assign(selection, { source });
        }
        return Object.assign(selectedNodes, { source });
    }
    TreeWidgetSelection.create = create;
})(TreeWidgetSelection = exports.TreeWidgetSelection || (exports.TreeWidgetSelection = {}));


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/tree-widget.js":
/*!**********************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/tree-widget.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var TreeWidget_1;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TreeWidget = exports.defaultTreeProps = exports.TreeProps = exports.TREE_NODE_INDENT_GUIDE_CLASS = exports.TREE_NODE_CAPTION_CLASS = exports.COMPOSITE_TREE_NODE_CLASS = exports.EXPANDABLE_TREE_NODE_CLASS = exports.TREE_NODE_SEGMENT_GROW_CLASS = exports.TREE_NODE_SEGMENT_CLASS = exports.TREE_NODE_TAIL_CLASS = exports.TREE_NODE_INFO_CLASS = exports.TREE_NODE_CONTENT_CLASS = exports.TREE_NODE_CLASS = exports.TREE_CONTAINER_CLASS = exports.TREE_CLASS = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/es/inversify.js");
const common_1 = __webpack_require__(/*! ../../common */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/index.js");
const keys_1 = __webpack_require__(/*! ../keyboard/keys */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/keyboard/keys.js");
const context_menu_renderer_1 = __webpack_require__(/*! ../context-menu-renderer */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/context-menu-renderer.js");
const widgets_1 = __webpack_require__(/*! ../widgets */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/widgets/index.js");
const tree_1 = __webpack_require__(/*! ./tree */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/tree.js");
const tree_model_1 = __webpack_require__(/*! ./tree-model */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/tree-model.js");
const tree_expansion_1 = __webpack_require__(/*! ./tree-expansion */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/tree-expansion.js");
const tree_selection_1 = __webpack_require__(/*! ./tree-selection */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/tree-selection.js");
const tree_decorator_1 = __webpack_require__(/*! ./tree-decorator */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/tree-decorator.js");
const objects_1 = __webpack_require__(/*! ../../common/objects */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/objects.js");
const os_1 = __webpack_require__(/*! ../../common/os */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/os.js");
const react_widget_1 = __webpack_require__(/*! ../widgets/react-widget */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/widgets/react-widget.js");
const React = __webpack_require__(/*! react */ "../node_modules/react/index.js");
const react_virtuoso_1 = __webpack_require__(/*! react-virtuoso */ "../node_modules/react-virtuoso/dist/index.m.js");
const tree_iterator_1 = __webpack_require__(/*! ./tree-iterator */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/tree-iterator.js");
const search_box_1 = __webpack_require__(/*! ./search-box */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/search-box.js");
const tree_search_1 = __webpack_require__(/*! ./tree-search */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/tree-search.js");
const domutils_1 = __webpack_require__(/*! @phosphor/domutils */ "../node_modules/@phosphor/domutils/lib/index.js");
const tree_widget_selection_1 = __webpack_require__(/*! ./tree-widget-selection */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/tree-widget-selection.js");
const label_provider_1 = __webpack_require__(/*! ../label-provider */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/label-provider.js");
const core_preferences_1 = __webpack_require__(/*! ../core-preferences */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/core-preferences.js");
const tree_focus_service_1 = __webpack_require__(/*! ./tree-focus-service */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/tree-focus-service.js");
const react_1 = __webpack_require__(/*! react */ "../node_modules/react/index.js");
const preferences_1 = __webpack_require__(/*! ../preferences */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/preferences/index.js");
const tree_preference_1 = __webpack_require__(/*! ./tree-preference */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/tree-preference.js");
const debounce = __webpack_require__(/*! lodash.debounce */ "../node_modules/lodash.debounce/index.js");
exports.TREE_CLASS = 'theia-Tree';
exports.TREE_CONTAINER_CLASS = 'theia-TreeContainer';
exports.TREE_NODE_CLASS = 'theia-TreeNode';
exports.TREE_NODE_CONTENT_CLASS = 'theia-TreeNodeContent';
exports.TREE_NODE_INFO_CLASS = 'theia-TreeNodeInfo';
exports.TREE_NODE_TAIL_CLASS = 'theia-TreeNodeTail';
exports.TREE_NODE_SEGMENT_CLASS = 'theia-TreeNodeSegment';
exports.TREE_NODE_SEGMENT_GROW_CLASS = 'theia-TreeNodeSegmentGrow';
exports.EXPANDABLE_TREE_NODE_CLASS = 'theia-ExpandableTreeNode';
exports.COMPOSITE_TREE_NODE_CLASS = 'theia-CompositeTreeNode';
exports.TREE_NODE_CAPTION_CLASS = 'theia-TreeNodeCaption';
exports.TREE_NODE_INDENT_GUIDE_CLASS = 'theia-tree-node-indent';
exports.TreeProps = Symbol('TreeProps');
/**
 * The default tree properties.
 */
exports.defaultTreeProps = {
    leftPadding: 8,
    expansionTogglePadding: 22
};
let TreeWidget = TreeWidget_1 = class TreeWidget extends react_widget_1.ReactWidget {
    constructor(props, model, contextMenuRenderer) {
        super();
        this.props = props;
        this.model = model;
        this.contextMenuRenderer = contextMenuRenderer;
        this.decorations = new Map();
        this.shouldScrollToRow = true;
        this.treeIndent = 8;
        this.rows = new Map();
        this.updateRows = debounce(() => this.doUpdateRows(), 10);
        this.scheduleUpdateScrollToRow = debounce(this.updateScrollToRow);
        /**
         * Update tree decorations.
         * - Updating decorations are debounced in order to limit the number of expensive updates.
         */
        this.updateDecorations = debounce(() => this.doUpdateDecorations(), 150);
        this.ScrollingRowRenderer = ({ rows }) => {
            (0, react_1.useEffect)(() => this.scrollToSelected());
            return React.createElement(React.Fragment, null, rows.map(row => React.createElement("div", { key: row.index }, this.renderNodeRow(row))));
        };
        this.scrollArea = this.node;
        /**
         * Render the node row.
         */
        this.renderNodeRow = (row) => this.doRenderNodeRow(row);
        /**
         * Toggle the node.
         */
        this.toggle = (event) => this.doToggle(event);
        /**
         * Handle the double-click mouse event on the expansion toggle.
         */
        this.handleExpansionToggleDblClickEvent = (event) => this.doHandleExpansionToggleDblClickEvent(event);
        this.scrollOptions = {
            suppressScrollX: true,
            minScrollbarLength: 35
        };
        this.addClass(exports.TREE_CLASS);
        this.node.tabIndex = 0;
    }
    init() {
        this.treeIndent = this.preferenceService.get(tree_preference_1.PREFERENCE_NAME_TREE_INDENT, this.treeIndent);
        if (this.props.search) {
            this.searchBox = this.searchBoxFactory({ ...search_box_1.SearchBoxProps.DEFAULT, showButtons: true, showFilter: true });
            this.searchBox.node.addEventListener('focus', () => {
                this.node.focus();
            });
            this.toDispose.pushAll([
                this.searchBox,
                this.searchBox.onTextChange(async (data) => {
                    await this.treeSearch.filter(data);
                    this.searchHighlights = this.treeSearch.getHighlights();
                    this.searchBox.updateHighlightInfo({
                        filterText: data,
                        total: this.rows.size,
                        matched: this.searchHighlights.size
                    });
                    this.update();
                }),
                this.searchBox.onClose(data => this.treeSearch.filter(undefined)),
                this.searchBox.onNext(() => {
                    // Enable next selection if there are currently highlights.
                    if (this.searchHighlights.size > 1) {
                        this.model.selectNextNode();
                    }
                }),
                this.searchBox.onPrevious(() => {
                    // Enable previous selection if there are currently highlights.
                    if (this.searchHighlights.size > 1) {
                        this.model.selectPrevNode();
                    }
                }),
                this.searchBox.onFilterToggled(e => {
                    this.updateRows();
                }),
                this.treeSearch,
                this.treeSearch.onFilteredNodesChanged(nodes => {
                    if (this.searchBox.isFiltering) {
                        this.updateRows();
                    }
                    const node = nodes.find(tree_selection_1.SelectableTreeNode.is);
                    if (node) {
                        this.model.selectNode(node);
                    }
                }),
            ]);
        }
        this.node.addEventListener('mousedown', this.handleMiddleClickEvent.bind(this));
        this.node.addEventListener('mouseup', this.handleMiddleClickEvent.bind(this));
        this.node.addEventListener('auxclick', this.handleMiddleClickEvent.bind(this));
        this.toDispose.pushAll([
            this.model,
            this.model.onChanged(() => this.updateRows()),
            this.model.onSelectionChanged(() => this.scheduleUpdateScrollToRow({ resize: false })),
            this.focusService.onDidChangeFocus(() => this.scheduleUpdateScrollToRow({ resize: false })),
            this.model.onDidChangeBusy(() => this.update()),
            this.model.onDidUpdate(() => this.update()),
            this.model.onNodeRefreshed(() => this.updateDecorations()),
            this.model.onExpansionChanged(() => this.updateDecorations()),
            this.decoratorService,
            this.decoratorService.onDidChangeDecorations(() => this.updateDecorations()),
            this.labelProvider.onDidChange(e => {
                for (const row of this.rows.values()) {
                    if (e.affects(row)) {
                        this.update();
                        return;
                    }
                }
            }),
            this.preferenceService.onPreferenceChanged((event) => {
                if (event.preferenceName === tree_preference_1.PREFERENCE_NAME_TREE_INDENT) {
                    this.treeIndent = event.newValue;
                    this.update();
                }
            })
        ]);
        setTimeout(() => {
            this.updateRows();
            this.updateDecorations();
        });
        if (this.props.globalSelection) {
            this.toDispose.pushAll([
                this.model.onSelectionChanged(() => {
                    if (this.node.contains(document.activeElement)) {
                        this.updateGlobalSelection();
                    }
                }),
                this.focusService.onDidChangeFocus(focus => {
                    if (focus && this.node.contains(document.activeElement) && this.model.selectedNodes[0] !== focus && this.model.selectedNodes.includes(focus)) {
                        this.updateGlobalSelection();
                    }
                }),
                common_1.Disposable.create(() => {
                    const selection = this.selectionService.selection;
                    if (tree_widget_selection_1.TreeWidgetSelection.isSource(selection, this)) {
                        this.selectionService.selection = undefined;
                    }
                })
            ]);
        }
        this.toDispose.push(this.corePreferences.onPreferenceChanged(preference => {
            if (preference.preferenceName === 'workbench.tree.renderIndentGuides') {
                this.update();
            }
        }));
    }
    /**
     * Update the global selection for the tree.
     */
    updateGlobalSelection() {
        this.selectionService.selection = tree_widget_selection_1.TreeWidgetSelection.create(this);
    }
    doUpdateRows() {
        const root = this.model.root;
        const rowsToUpdate = [];
        if (root) {
            const depths = new Map();
            let index = 0;
            for (const node of new tree_iterator_1.TopDownTreeIterator(root, {
                pruneCollapsed: true,
                pruneSiblings: true
            })) {
                if (this.shouldDisplayNode(node)) {
                    const depth = this.getDepthForNode(node, depths);
                    if (tree_1.CompositeTreeNode.is(node)) {
                        depths.set(node, depth);
                    }
                    rowsToUpdate.push([node.id, this.toNodeRow(node, index++, depth)]);
                }
            }
        }
        this.rows = new Map(rowsToUpdate);
        this.updateScrollToRow();
    }
    getDepthForNode(node, depths) {
        const parentDepth = depths.get(node.parent);
        return parentDepth === undefined ? 0 : tree_1.TreeNode.isVisible(node.parent) ? parentDepth + 1 : parentDepth;
    }
    toNodeRow(node, index, depth) {
        return { node, index, depth };
    }
    shouldDisplayNode(node) {
        var _a;
        return tree_1.TreeNode.isVisible(node) && (!((_a = this.searchBox) === null || _a === void 0 ? void 0 : _a.isFiltering) || this.treeSearch.passesFilters(node));
    }
    /**
     * Update the `scrollToRow`.
     * @param updateOptions the tree widget force update options.
     */
    updateScrollToRow() {
        this.scrollToRow = this.getScrollToRow();
        this.update();
    }
    /**
     * Get the `scrollToRow`.
     *
     * @returns the `scrollToRow` if available.
     */
    getScrollToRow() {
        var _a;
        if (!this.shouldScrollToRow) {
            return undefined;
        }
        const { focusedNode } = this.focusService;
        return focusedNode && ((_a = this.rows.get(focusedNode.id)) === null || _a === void 0 ? void 0 : _a.index);
    }
    async doUpdateDecorations() {
        this.decorations = await this.decoratorService.getDecorations(this.model);
        this.update();
    }
    onActivateRequest(msg) {
        super.onActivateRequest(msg);
        this.node.focus({ preventScroll: true });
    }
    /**
     * Actually focus the tree node.
     */
    doFocus() {
        if (!this.model.selectedNodes.length) {
            const node = this.getNodeToFocus();
            if (tree_selection_1.SelectableTreeNode.is(node)) {
                this.model.selectNode(node);
            }
        }
    }
    /**
     * Get the tree node to focus.
     *
     * @returns the node to focus if available.
     */
    getNodeToFocus() {
        const { focusedNode } = this.focusService;
        if (focusedNode) {
            return focusedNode;
        }
        const { root } = this.model;
        if (tree_selection_1.SelectableTreeNode.isVisible(root)) {
            return root;
        }
        return this.model.getNextSelectableNode(root);
    }
    onUpdateRequest(msg) {
        if (!this.isAttached || !this.isVisible) {
            return;
        }
        super.onUpdateRequest(msg);
    }
    onResize(msg) {
        super.onResize(msg);
        this.update();
    }
    render() {
        return React.createElement('div', this.createContainerAttributes(), this.renderTree(this.model));
    }
    /**
     * Create the container attributes for the widget.
     */
    createContainerAttributes() {
        const classNames = [exports.TREE_CONTAINER_CLASS];
        if (!this.rows.size) {
            classNames.push('empty');
        }
        if (this.model.selectedNodes.length === 0 && !this.focusService.focusedNode) {
            classNames.push('focused');
        }
        return {
            className: classNames.join(' '),
            onContextMenu: event => this.handleContextMenuEvent(this.getContainerTreeNode(), event)
        };
    }
    /**
     * Get the container tree node.
     *
     * @returns the tree node for the container if available.
     */
    getContainerTreeNode() {
        return this.model.root;
    }
    /**
     * Render the tree widget.
     * @param model the tree model.
     */
    renderTree(model) {
        if (model.root) {
            const rows = Array.from(this.rows.values());
            if (this.props.virtualized === false) {
                return React.createElement(this.ScrollingRowRenderer, { rows: rows });
            }
            return React.createElement(TreeWidget_1.View, { ref: view => this.view = (view || undefined), width: this.node.offsetWidth, height: this.node.offsetHeight, rows: rows, renderNodeRow: this.renderNodeRow, scrollToRow: this.scrollToRow });
        }
        // eslint-disable-next-line no-null/no-null
        return null;
    }
    /**
     * Scroll to the selected tree node.
     */
    scrollToSelected() {
        if (this.props.scrollIfActive === true && !this.node.contains(document.activeElement)) {
            return;
        }
        const focus = this.node.getElementsByClassName(widgets_1.FOCUS_CLASS)[0];
        if (focus) {
            domutils_1.ElementExt.scrollIntoViewIfNeeded(this.scrollArea, focus);
        }
        else {
            const selected = this.node.getElementsByClassName(widgets_1.SELECTED_CLASS)[0];
            if (selected) {
                domutils_1.ElementExt.scrollIntoViewIfNeeded(this.scrollArea, selected);
            }
        }
    }
    /**
     * Actually render the node row.
     */
    doRenderNodeRow({ node, depth }) {
        return React.createElement(React.Fragment, null,
            this.renderIndent(node, { depth }),
            this.renderNode(node, { depth }));
    }
    /**
     * Render the tree node given the node properties.
     * @param node the tree node.
     * @param props the node properties.
     */
    renderIcon(node, props) {
        // eslint-disable-next-line no-null/no-null
        return null;
    }
    /**
     * Actually toggle the tree node.
     * @param event the mouse click event.
     */
    doToggle(event) {
        const nodeId = event.currentTarget.getAttribute('data-node-id');
        if (nodeId) {
            const node = this.model.getNode(nodeId);
            if (node && this.props.expandOnlyOnExpansionToggleClick) {
                if (this.isExpandable(node) && !this.hasShiftMask(event) && !this.hasCtrlCmdMask(event)) {
                    this.model.toggleNodeExpansion(node);
                }
            }
            else {
                this.handleClickEvent(node, event);
            }
        }
        event.stopPropagation();
    }
    /**
     * Render the node expansion toggle.
     * @param node the tree node.
     * @param props the node properties.
     */
    renderExpansionToggle(node, props) {
        if (!this.isExpandable(node)) {
            // eslint-disable-next-line no-null/no-null
            return null;
        }
        const classes = [exports.TREE_NODE_SEGMENT_CLASS, widgets_1.EXPANSION_TOGGLE_CLASS];
        if (!node.expanded) {
            classes.push(widgets_1.COLLAPSED_CLASS);
        }
        if (node.busy) {
            classes.push(widgets_1.BUSY_CLASS, ...widgets_1.CODICON_LOADING_CLASSES);
        }
        else {
            classes.push(...widgets_1.CODICON_TREE_ITEM_CLASSES);
        }
        const className = classes.join(' ');
        return React.createElement("div", { "data-node-id": node.id, className: className, onClick: this.toggle, onDoubleClick: this.handleExpansionToggleDblClickEvent });
    }
    /**
     * Render the node expansion toggle.
     * @param node the tree node.
     * @param props the node properties.
     */
    renderCheckbox(node, props) {
        var _a, _b;
        if (node.checkboxInfo === undefined) {
            // eslint-disable-next-line no-null/no-null
            return null;
        }
        return React.createElement("input", { "data-node-id": node.id, readOnly: true, type: 'checkbox', checked: !!node.checkboxInfo.checked, title: node.checkboxInfo.tooltip, "aria-label": (_a = node.checkboxInfo.accessibilityInformation) === null || _a === void 0 ? void 0 : _a.label, role: (_b = node.checkboxInfo.accessibilityInformation) === null || _b === void 0 ? void 0 : _b.role, className: 'theia-input', onClick: event => this.toggleChecked(event) });
    }
    toggleChecked(event) {
        const nodeId = event.currentTarget.getAttribute('data-node-id');
        if (nodeId) {
            const node = this.model.getNode(nodeId);
            if (node) {
                this.model.markAsChecked(node, !node.checkboxInfo.checked);
            }
            else {
                this.handleClickEvent(node, event);
            }
        }
        event.preventDefault();
        event.stopPropagation();
    }
    /**
     * Render the tree node caption given the node properties.
     * @param node the tree node.
     * @param props the node properties.
     */
    renderCaption(node, props) {
        const attrs = this.getCaptionAttributes(node, props);
        const children = this.getCaptionChildren(node, props);
        return React.createElement('div', attrs, children);
    }
    getCaptionAttributes(node, props) {
        const tooltip = this.getDecorationData(node, 'tooltip').filter(objects_1.notEmpty).join(' • ');
        const classes = [exports.TREE_NODE_SEGMENT_CLASS];
        if (!this.hasTrailingSuffixes(node)) {
            classes.push(exports.TREE_NODE_SEGMENT_GROW_CLASS);
        }
        const className = classes.join(' ');
        let attrs = this.decorateCaption(node, {
            className, id: node.id
        });
        if (tooltip.length > 0) {
            attrs = {
                ...attrs,
                title: tooltip
            };
        }
        return attrs;
    }
    getCaptionChildren(node, props) {
        const children = [];
        const caption = this.toNodeName(node);
        const highlight = this.getDecorationData(node, 'highlight')[0];
        if (highlight) {
            children.push(this.toReactNode(caption, highlight));
        }
        const searchHighlight = this.searchHighlights ? this.searchHighlights.get(node.id) : undefined;
        if (searchHighlight) {
            children.push(...this.toReactNode(caption, searchHighlight));
        }
        else if (!highlight) {
            children.push(caption);
        }
        return children;
    }
    /**
     * Update the node given the caption and highlight.
     * @param caption the caption.
     * @param highlight the tree decoration caption highlight.
     */
    toReactNode(caption, highlight) {
        let style = {};
        if (highlight.color) {
            style = {
                ...style,
                color: highlight.color
            };
        }
        if (highlight.backgroundColor) {
            style = {
                ...style,
                backgroundColor: highlight.backgroundColor
            };
        }
        const createChildren = (fragment, index) => {
            const { data } = fragment;
            if (fragment.highlight) {
                return React.createElement("mark", { className: tree_decorator_1.TreeDecoration.Styles.CAPTION_HIGHLIGHT_CLASS, style: style, key: index }, data);
            }
            else {
                return data;
            }
        };
        return tree_decorator_1.TreeDecoration.CaptionHighlight.split(caption, highlight).map(createChildren);
    }
    /**
     * Decorate the tree caption.
     * @param node the tree node.
     * @param attrs the additional attributes.
     */
    decorateCaption(node, attrs) {
        const style = this.getDecorationData(node, 'fontData')
            .filter(objects_1.notEmpty)
            .reverse()
            .map(fontData => this.applyFontStyles({}, fontData))
            .reduce((acc, current) => ({
            ...acc,
            ...current
        }), {});
        return {
            ...attrs,
            style
        };
    }
    /**
     * Determine if the tree node contains trailing suffixes.
     * @param node the tree node.
     *
     * @returns `true` if the tree node contains trailing suffices.
     */
    hasTrailingSuffixes(node) {
        return this.getDecorationData(node, 'captionSuffixes').filter(objects_1.notEmpty).reduce((acc, current) => acc.concat(current), []).length > 0;
    }
    /**
     * Apply font styles to the tree.
     * @param original the original css properties.
     * @param fontData the optional `fontData`.
     */
    applyFontStyles(original, fontData) {
        if (fontData === undefined) {
            return original;
        }
        const modified = { ...original }; // make a copy to mutate
        const { color, style } = fontData;
        if (color) {
            modified.color = color;
        }
        if (style) {
            (Array.isArray(style) ? style : [style]).forEach(s => {
                switch (s) {
                    case 'bold':
                        modified.fontWeight = s;
                        break;
                    case 'normal':
                    case 'oblique':
                    case 'italic':
                        modified.fontStyle = s;
                        break;
                    case 'underline':
                    case 'line-through':
                        modified.textDecoration = s;
                        break;
                    default:
                        throw new Error(`Unexpected font style: "${s}".`);
                }
            });
        }
        return modified;
    }
    /**
     * Render caption affixes for the given tree node.
     * @param node the tree node.
     * @param props the node properties.
     * @param affixKey the affix key.
     */
    renderCaptionAffixes(node, props, affixKey) {
        const suffix = affixKey === 'captionSuffixes';
        const affixClass = suffix ? tree_decorator_1.TreeDecoration.Styles.CAPTION_SUFFIX_CLASS : tree_decorator_1.TreeDecoration.Styles.CAPTION_PREFIX_CLASS;
        const classes = [exports.TREE_NODE_SEGMENT_CLASS, affixClass];
        const affixes = this.getDecorationData(node, affixKey).filter(objects_1.notEmpty).reduce((acc, current) => acc.concat(current), []);
        const children = [];
        for (let i = 0; i < affixes.length; i++) {
            const affix = affixes[i];
            if (suffix && i === affixes.length - 1) {
                classes.push(exports.TREE_NODE_SEGMENT_GROW_CLASS);
            }
            const style = this.applyFontStyles({}, affix.fontData);
            const className = classes.join(' ');
            const key = node.id + '_' + i;
            const attrs = {
                className,
                style,
                key
            };
            children.push(React.createElement('div', attrs, affix.data));
        }
        return React.createElement(React.Fragment, null, children);
    }
    /**
     * Decorate the tree node icon.
     * @param node the tree node.
     * @param icon the icon.
     */
    decorateIcon(node, icon) {
        if (!icon) {
            return;
        }
        const overlayIcons = [];
        // if multiple overlays have the same overlay.position attribute, we'll de-duplicate those and only process the first one from the decoration array
        const seenPositions = new Set();
        const overlays = this.getDecorationData(node, 'iconOverlay').filter(objects_1.notEmpty);
        for (const overlay of overlays) {
            if (!seenPositions.has(overlay.position)) {
                seenPositions.add(overlay.position);
                const iconClasses = [tree_decorator_1.TreeDecoration.Styles.DECORATOR_SIZE_CLASS, tree_decorator_1.TreeDecoration.IconOverlayPosition.getStyle(overlay.position)];
                const style = (color) => color === undefined ? {} : { color };
                if (overlay.background) {
                    overlayIcons.push(React.createElement("span", { key: node.id + 'bg', className: this.getIconClass(overlay.background.shape, iconClasses), style: style(overlay.background.color) }));
                }
                const overlayIcon = 'icon' in overlay ? overlay.icon : overlay.iconClass;
                overlayIcons.push(React.createElement("span", { key: node.id, className: this.getIconClass(overlayIcon, iconClasses), style: style(overlay.color) }));
            }
        }
        if (overlayIcons.length > 0) {
            return React.createElement("div", { className: tree_decorator_1.TreeDecoration.Styles.ICON_WRAPPER_CLASS },
                icon,
                overlayIcons);
        }
        return icon;
    }
    /**
     * Render the tree node tail decorations.
     * @param node the tree node.
     * @param props the node properties.
     */
    renderTailDecorations(node, props) {
        const tailDecorations = this.getDecorationData(node, 'tailDecorations').reduce((acc, current) => acc.concat(current), []);
        if (tailDecorations.length === 0) {
            return;
        }
        return this.renderTailDecorationsForNode(node, props, tailDecorations);
    }
    renderTailDecorationsForNode(node, props, tailDecorations) {
        let dotDecoration;
        const otherDecorations = [];
        tailDecorations.reverse().forEach(decoration => {
            if (tree_decorator_1.TreeDecoration.TailDecoration.isDotDecoration(decoration)) {
                dotDecoration || (dotDecoration = decoration);
            }
            else if (decoration.data || decoration.icon || decoration.iconClass) {
                otherDecorations.push(decoration);
            }
        });
        const decorationsToRender = dotDecoration ? [dotDecoration, ...otherDecorations] : otherDecorations;
        return React.createElement(React.Fragment, null, decorationsToRender.map((decoration, index) => {
            const { tooltip, data, fontData, color, icon, iconClass } = decoration;
            const iconToRender = icon !== null && icon !== void 0 ? icon : iconClass;
            const className = [exports.TREE_NODE_SEGMENT_CLASS, exports.TREE_NODE_TAIL_CLASS, 'flex'].join(' ');
            const style = fontData ? this.applyFontStyles({}, fontData) : color ? { color } : undefined;
            const content = data ? data : iconToRender
                ? React.createElement("span", { key: node.id + 'icon' + index, className: this.getIconClass(iconToRender, iconToRender === 'circle' ? [tree_decorator_1.TreeDecoration.Styles.DECORATOR_SIZE_CLASS] : []) })
                : '';
            return React.createElement("div", { key: node.id + className + index, className: className, style: style, title: tooltip },
                content,
                index !== decorationsToRender.length - 1 ? ',' : '');
        }));
    }
    /**
     * Determine the classes to use for an icon
     * - Assumes a Font Awesome name when passed a single string, otherwise uses the passed string array
     * @param iconName the icon name or list of icon names.
     * @param additionalClasses additional CSS classes.
     *
     * @returns the icon class name.
     */
    getIconClass(iconName, additionalClasses = []) {
        const iconClass = (typeof iconName === 'string') ? ['a', 'fa', `fa-${iconName}`] : ['a'].concat(iconName);
        return iconClass.concat(additionalClasses).join(' ');
    }
    /**
     * Render indent for the file tree based on the depth
     * @param node the tree node.
     * @param depth the depth of the tree node.
     */
    renderIndent(node, props) {
        const renderIndentGuides = this.corePreferences['workbench.tree.renderIndentGuides'];
        if (renderIndentGuides === 'none') {
            return undefined;
        }
        const indentDivs = [];
        let current = node;
        let depth = props.depth;
        while (current && depth) {
            if (this.shouldRenderIndent(current)) {
                const classNames = [exports.TREE_NODE_INDENT_GUIDE_CLASS];
                if (this.needsActiveIndentGuideline(current)) {
                    classNames.push('active');
                }
                else {
                    classNames.push(renderIndentGuides === 'onHover' ? 'hover' : 'always');
                }
                const paddingLeft = this.getDepthPadding(depth);
                indentDivs.unshift(React.createElement("div", { key: depth, className: classNames.join(' '), style: {
                        paddingLeft: `${paddingLeft}px`
                    } }));
                depth--;
            }
            current = current.parent;
        }
        return indentDivs;
    }
    /**
     * Determines whether an indentation div should be rendered for the specified tree node.
     * If there are multiple tree nodes inside of a single rendered row,
     * this method should only return true for the first node.
     */
    shouldRenderIndent(node) {
        return true;
    }
    needsActiveIndentGuideline(node) {
        const parent = node.parent;
        if (!parent || !this.isExpandable(parent)) {
            return false;
        }
        if (tree_selection_1.SelectableTreeNode.isSelected(parent)) {
            return true;
        }
        if (parent.expanded) {
            for (const sibling of parent.children) {
                if (tree_selection_1.SelectableTreeNode.isSelected(sibling) && !(this.isExpandable(sibling) && sibling.expanded)) {
                    return true;
                }
            }
        }
        return false;
    }
    /**
     * Render the node given the tree node and node properties.
     * @param node the tree node.
     * @param props the node properties.
     */
    renderNode(node, props) {
        if (!tree_1.TreeNode.isVisible(node)) {
            return undefined;
        }
        const attributes = this.createNodeAttributes(node, props);
        const content = React.createElement("div", { className: exports.TREE_NODE_CONTENT_CLASS },
            this.renderExpansionToggle(node, props),
            this.renderCheckbox(node, props),
            this.decorateIcon(node, this.renderIcon(node, props)),
            this.renderCaptionAffixes(node, props, 'captionPrefixes'),
            this.renderCaption(node, props),
            this.renderCaptionAffixes(node, props, 'captionSuffixes'),
            this.renderTailDecorations(node, props));
        return React.createElement('div', attributes, content);
    }
    /**
     * Create node attributes for the tree node given the node properties.
     * @param node the tree node.
     * @param props the node properties.
     */
    createNodeAttributes(node, props) {
        const className = this.createNodeClassNames(node, props).join(' ');
        const style = this.createNodeStyle(node, props);
        return {
            className,
            style,
            onClick: event => this.handleClickEvent(node, event),
            onDoubleClick: event => this.handleDblClickEvent(node, event),
            onAuxClick: event => this.handleAuxClickEvent(node, event),
            onContextMenu: event => this.handleContextMenuEvent(node, event),
        };
    }
    /**
     * Create the node class names.
     * @param node the tree node.
     * @param props the node properties.
     *
     * @returns the list of tree node class names.
     */
    createNodeClassNames(node, props) {
        const classNames = [exports.TREE_NODE_CLASS];
        if (tree_1.CompositeTreeNode.is(node)) {
            classNames.push(exports.COMPOSITE_TREE_NODE_CLASS);
        }
        if (this.isExpandable(node)) {
            classNames.push(exports.EXPANDABLE_TREE_NODE_CLASS);
        }
        if (this.rowIsSelected(node, props)) {
            classNames.push(widgets_1.SELECTED_CLASS);
        }
        if (this.focusService.hasFocus(node)) {
            classNames.push(widgets_1.FOCUS_CLASS);
        }
        return classNames;
    }
    rowIsSelected(node, props) {
        return tree_selection_1.SelectableTreeNode.isSelected(node);
    }
    /**
     * Get the default node style.
     * @param node the tree node.
     * @param props the node properties.
     *
     * @returns the CSS properties if available.
     */
    getDefaultNodeStyle(node, props) {
        const paddingLeft = this.getPaddingLeft(node, props) + 'px';
        return { paddingLeft };
    }
    getPaddingLeft(node, props) {
        return this.getDepthPadding(props.depth) + (this.needsExpansionTogglePadding(node) ? this.props.expansionTogglePadding : 0);
    }
    /**
     * If the node is a composite, a toggle will be rendered.
     * Otherwise we need to add the width and the left, right padding => 18px
     */
    needsExpansionTogglePadding(node) {
        return !this.isExpandable(node);
    }
    /**
     * Create the tree node style.
     * @param node the tree node.
     * @param props the node properties.
     */
    createNodeStyle(node, props) {
        return this.decorateNodeStyle(node, this.getDefaultNodeStyle(node, props));
    }
    /**
     * Decorate the node style.
     * @param node the tree node.
     * @param style the optional CSS properties.
     *
     * @returns the CSS styles if available.
     */
    decorateNodeStyle(node, style) {
        const backgroundColor = this.getDecorationData(node, 'backgroundColor').filter(objects_1.notEmpty).shift();
        if (backgroundColor) {
            style = {
                ...(style || {}),
                backgroundColor
            };
        }
        return style;
    }
    /**
     * Determine if the tree node is expandable.
     * @param node the tree node.
     *
     * @returns `true` if the tree node is expandable.
     */
    isExpandable(node) {
        return tree_expansion_1.ExpandableTreeNode.is(node);
    }
    /**
     * Get the tree node decorations.
     * @param node the tree node.
     *
     * @returns the list of tree decoration data.
     */
    getDecorations(node) {
        const decorations = [];
        if (tree_decorator_1.DecoratedTreeNode.is(node)) {
            decorations.push(node.decorationData);
        }
        if (this.decorations.has(node.id)) {
            decorations.push(...this.decorations.get(node.id));
        }
        return decorations.sort(tree_decorator_1.TreeDecoration.Data.comparePriority);
    }
    /**
     * Get the tree decoration data for the given key.
     * @param node the tree node.
     * @param key the tree decoration data key.
     *
     * @returns the tree decoration data at the given key.
     */
    getDecorationData(node, key) {
        return this.getDecorations(node).filter(data => data[key] !== undefined).map(data => data[key]);
    }
    /**
     * Get the scroll container.
     */
    getScrollContainer() {
        this.toDisposeOnDetach.push(common_1.Disposable.create(() => {
            const { scrollTop, scrollLeft } = this.node;
            this.lastScrollState = { scrollTop, scrollLeft };
        }));
        if (this.lastScrollState) {
            const { scrollTop, scrollLeft } = this.lastScrollState;
            this.node.scrollTop = scrollTop;
            this.node.scrollLeft = scrollLeft;
        }
        return this.node;
    }
    onAfterAttach(msg) {
        const up = [
            keys_1.Key.ARROW_UP,
            keys_1.KeyCode.createKeyCode({ first: keys_1.Key.ARROW_UP, modifiers: [keys_1.KeyModifier.Shift] })
        ];
        const down = [
            keys_1.Key.ARROW_DOWN,
            keys_1.KeyCode.createKeyCode({ first: keys_1.Key.ARROW_DOWN, modifiers: [keys_1.KeyModifier.Shift] })
        ];
        if (this.props.search) {
            if (this.searchBox.isAttached) {
                widgets_1.Widget.detach(this.searchBox);
            }
            widgets_1.UnsafeWidgetUtilities.attach(this.searchBox, this.node.parentElement);
            this.addKeyListener(this.node, this.searchBox.keyCodePredicate.bind(this.searchBox), this.searchBox.handle.bind(this.searchBox));
            this.toDisposeOnDetach.push(common_1.Disposable.create(() => {
                widgets_1.Widget.detach(this.searchBox);
            }));
        }
        super.onAfterAttach(msg);
        this.addKeyListener(this.node, keys_1.Key.ARROW_LEFT, event => this.handleLeft(event));
        this.addKeyListener(this.node, keys_1.Key.ARROW_RIGHT, event => this.handleRight(event));
        this.addKeyListener(this.node, up, event => this.handleUp(event));
        this.addKeyListener(this.node, down, event => this.handleDown(event));
        this.addKeyListener(this.node, keys_1.Key.ENTER, event => this.handleEnter(event));
        this.addKeyListener(this.node, keys_1.Key.SPACE, event => this.handleSpace(event));
        this.addKeyListener(this.node, keys_1.Key.ESCAPE, event => this.handleEscape(event));
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        this.addEventListener(this.node, 'ps-scroll-y', (e) => {
            if (this.view && this.view.list) {
                const { scrollTop } = e.target;
                this.view.list.scrollTo({
                    top: scrollTop
                });
            }
        });
    }
    /**
     * Handle the `left arrow` keyboard event.
     * @param event the `left arrow` keyboard event.
     */
    async handleLeft(event) {
        if (!!this.props.multiSelect && (this.hasCtrlCmdMask(event) || this.hasShiftMask(event))) {
            return;
        }
        if (!await this.model.collapseNode()) {
            this.model.selectParent();
        }
    }
    /**
     * Handle the `right arrow` keyboard event.
     * @param event the `right arrow` keyboard event.
     */
    async handleRight(event) {
        if (!!this.props.multiSelect && (this.hasCtrlCmdMask(event) || this.hasShiftMask(event))) {
            return;
        }
        if (!await this.model.expandNode()) {
            this.model.selectNextNode();
        }
    }
    /**
     * Handle the `up arrow` keyboard event.
     * @param event the `up arrow` keyboard event.
     */
    handleUp(event) {
        if (!!this.props.multiSelect && this.hasShiftMask(event)) {
            this.model.selectPrevNode(tree_selection_1.TreeSelection.SelectionType.RANGE);
        }
        else {
            this.model.selectPrevNode();
        }
        this.node.focus();
    }
    /**
     * Handle the `down arrow` keyboard event.
     * @param event the `down arrow` keyboard event.
     */
    handleDown(event) {
        if (!!this.props.multiSelect && this.hasShiftMask(event)) {
            this.model.selectNextNode(tree_selection_1.TreeSelection.SelectionType.RANGE);
        }
        else {
            this.model.selectNextNode();
        }
        this.node.focus();
    }
    /**
     * Handle the `enter key` keyboard event.
     * - `enter` opens the tree node.
     * @param event the `enter key` keyboard event.
     */
    handleEnter(event) {
        this.model.openNode();
    }
    /**
     * Handle the `space key` keyboard event.
     * - If the element has a checkbox, it will be toggled.
     * - Otherwise, it should be similar to a single-click action.
     * @param event the `space key` keyboard event.
     */
    handleSpace(event) {
        const { focusedNode } = this.focusService;
        if (focusedNode && focusedNode.checkboxInfo) {
            this.model.markAsChecked(focusedNode, !focusedNode.checkboxInfo.checked);
        }
        else if (!this.props.multiSelect || (!event.ctrlKey && !event.metaKey && !event.shiftKey)) {
            this.tapNode(focusedNode);
        }
    }
    handleEscape(event) {
        if (this.model.selectedNodes.length <= 1) {
            this.focusService.setFocus(undefined);
            this.node.focus();
        }
        this.model.clearSelection();
    }
    /**
     * Handle the single-click mouse event.
     * @param node the tree node if available.
     * @param event the mouse single-click event.
     */
    handleClickEvent(node, event) {
        if (node) {
            event.stopPropagation();
            const shiftMask = this.hasShiftMask(event);
            const ctrlCmdMask = this.hasCtrlCmdMask(event);
            if (this.props.multiSelect && (shiftMask || ctrlCmdMask) && tree_selection_1.SelectableTreeNode.is(node)) {
                if (shiftMask) {
                    this.model.selectRange(node);
                }
                else if (ctrlCmdMask) {
                    this.model.toggleNode(node);
                }
            }
            else {
                this.tapNode(node);
            }
        }
    }
    /**
     * The effective handler of an unmodified single-click event.
     */
    tapNode(node) {
        if (tree_selection_1.SelectableTreeNode.is(node)) {
            this.model.selectNode(node);
        }
        if (node && !this.props.expandOnlyOnExpansionToggleClick && this.isExpandable(node)) {
            this.model.toggleNodeExpansion(node);
        }
    }
    /**
     * Handle the double-click mouse event.
     * @param node the tree node if available.
     * @param event the double-click mouse event.
     */
    handleDblClickEvent(node, event) {
        this.model.openNode(node);
        event.stopPropagation();
    }
    /**
     * Handle the middle-click mouse event.
     * @param node the tree node if available.
     * @param event the middle-click mouse event.
     */
    handleAuxClickEvent(node, event) {
        if (event.button === 1) {
            this.model.openNode(node);
            if (tree_selection_1.SelectableTreeNode.is(node)) {
                this.model.selectNode(node);
            }
        }
        event.stopPropagation();
    }
    /**
     * Handle the middle-click mouse event.
     * @param event the middle-click mouse event.
     */
    handleMiddleClickEvent(event) {
        // Prevents auto-scrolling behavior when middle-clicking.
        if (event.button === 1) {
            event.preventDefault();
        }
    }
    /**
     * Handle the context menu click event.
     * - The context menu click event is triggered by the right-click.
     * @param node the tree node if available.
     * @param event the right-click mouse event.
     */
    handleContextMenuEvent(node, event) {
        if (tree_selection_1.SelectableTreeNode.is(node)) {
            // Keep the selection for the context menu, if the widget support multi-selection and the right click happens on an already selected node.
            if (!this.props.multiSelect || !node.selected) {
                const type = !!this.props.multiSelect && this.hasCtrlCmdMask(event) ? tree_selection_1.TreeSelection.SelectionType.TOGGLE : tree_selection_1.TreeSelection.SelectionType.DEFAULT;
                this.model.addSelection({ node, type });
            }
            this.focusService.setFocus(node);
            const contextMenuPath = this.props.contextMenuPath;
            if (contextMenuPath) {
                const { x, y } = event.nativeEvent;
                const args = this.toContextMenuArgs(node);
                setTimeout(() => this.contextMenuRenderer.render({
                    menuPath: contextMenuPath,
                    anchor: { x, y },
                    args
                }), 10);
            }
        }
        event.stopPropagation();
        event.preventDefault();
    }
    /**
     * Actually handle the double-click mouse event on the expansion toggle.
     * @param event the double-click mouse event.
     */
    doHandleExpansionToggleDblClickEvent(event) {
        if (this.props.expandOnlyOnExpansionToggleClick) {
            // Ignore the double-click event.
            event.stopPropagation();
        }
    }
    /**
     * Convert the tree node to context menu arguments.
     * @param node the selectable tree node.
     */
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    toContextMenuArgs(node) {
        return undefined;
    }
    /**
     * Determine if the tree modifier aware event has a `ctrlcmd` mask.
     * @param event the tree modifier aware event.
     *
     * @returns `true` if the tree modifier aware event contains the `ctrlcmd` mask.
     */
    hasCtrlCmdMask(event) {
        return os_1.isOSX ? event.metaKey : event.ctrlKey;
    }
    /**
     * Determine if the tree modifier aware event has a `shift` mask.
     * @param event the tree modifier aware event.
     *
     * @returns `true` if the tree modifier aware event contains the `shift` mask.
     */
    hasShiftMask(event) {
        // Ctrl/Cmd mask overrules the Shift mask.
        if (this.hasCtrlCmdMask(event)) {
            return false;
        }
        return event.shiftKey;
    }
    /**
     * Deflate the tree node for storage.
     * @param node the tree node.
     */
    deflateForStorage(node) {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        const copy = Object.assign({}, node);
        if (copy.parent) {
            delete copy.parent;
        }
        if ('previousSibling' in copy) {
            delete copy.previousSibling;
        }
        if ('nextSibling' in copy) {
            delete copy.nextSibling;
        }
        if ('busy' in copy) {
            delete copy.busy;
        }
        if (tree_1.CompositeTreeNode.is(node)) {
            copy.children = [];
            for (const child of node.children) {
                copy.children.push(this.deflateForStorage(child));
            }
        }
        return copy;
    }
    /**
     * Inflate the tree node from storage.
     * @param node the tree node.
     * @param parent the optional tree node.
     */
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    inflateFromStorage(node, parent) {
        if (node.selected) {
            node.selected = false;
        }
        if (parent) {
            node.parent = parent;
        }
        if (Array.isArray(node.children)) {
            for (const child of node.children) {
                this.inflateFromStorage(child, node);
            }
        }
        return node;
    }
    /**
     * Store the tree state.
     */
    storeState() {
        var _a;
        const decorations = this.decoratorService.deflateDecorators(this.decorations);
        let state = {
            decorations
        };
        if (this.model.root) {
            state = {
                ...state,
                root: this.deflateForStorage(this.model.root),
                model: this.model.storeState(),
                focusedNodeId: (_a = this.focusService.focusedNode) === null || _a === void 0 ? void 0 : _a.id
            };
        }
        return state;
    }
    /**
     * Restore the state.
     * @param oldState the old state object.
     */
    restoreState(oldState) {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        const { root, decorations, model, focusedNodeId } = oldState;
        if (root) {
            this.model.root = this.inflateFromStorage(root);
        }
        if (decorations) {
            this.decorations = this.decoratorService.inflateDecorators(decorations);
        }
        if (model) {
            this.model.restoreState(model);
        }
        if (focusedNodeId) {
            const candidate = this.model.getNode(focusedNodeId);
            if (tree_selection_1.SelectableTreeNode.is(candidate)) {
                this.focusService.setFocus(candidate);
            }
        }
    }
    toNodeIcon(node) {
        return this.labelProvider.getIcon(node);
    }
    toNodeName(node) {
        return this.labelProvider.getName(node);
    }
    toNodeDescription(node) {
        return this.labelProvider.getLongName(node);
    }
    getDepthPadding(depth) {
        if (depth === 1) {
            return this.props.leftPadding;
        }
        return depth * this.treeIndent;
    }
};
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(tree_decorator_1.TreeDecoratorService),
    (0, tslib_1.__metadata)("design:type", Object)
], TreeWidget.prototype, "decoratorService", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(tree_search_1.TreeSearch),
    (0, tslib_1.__metadata)("design:type", tree_search_1.TreeSearch)
], TreeWidget.prototype, "treeSearch", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(search_box_1.SearchBoxFactory),
    (0, tslib_1.__metadata)("design:type", Function)
], TreeWidget.prototype, "searchBoxFactory", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(tree_focus_service_1.TreeFocusService),
    (0, tslib_1.__metadata)("design:type", Object)
], TreeWidget.prototype, "focusService", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(common_1.SelectionService),
    (0, tslib_1.__metadata)("design:type", common_1.SelectionService)
], TreeWidget.prototype, "selectionService", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(preferences_1.PreferenceService),
    (0, tslib_1.__metadata)("design:type", Object)
], TreeWidget.prototype, "preferenceService", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(label_provider_1.LabelProvider),
    (0, tslib_1.__metadata)("design:type", label_provider_1.LabelProvider)
], TreeWidget.prototype, "labelProvider", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(core_preferences_1.CorePreferences),
    (0, tslib_1.__metadata)("design:type", Object)
], TreeWidget.prototype, "corePreferences", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.postConstruct)(),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", []),
    (0, tslib_1.__metadata)("design:returntype", void 0)
], TreeWidget.prototype, "init", null);
TreeWidget = TreeWidget_1 = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)(),
    (0, tslib_1.__param)(0, (0, inversify_1.inject)(exports.TreeProps)),
    (0, tslib_1.__param)(1, (0, inversify_1.inject)(tree_model_1.TreeModel)),
    (0, tslib_1.__param)(2, (0, inversify_1.inject)(context_menu_renderer_1.ContextMenuRenderer)),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, context_menu_renderer_1.ContextMenuRenderer])
], TreeWidget);
exports.TreeWidget = TreeWidget;
(function (TreeWidget) {
    class View extends React.Component {
        render() {
            const { rows, width, height, scrollToRow } = this.props;
            return React.createElement(react_virtuoso_1.Virtuoso, { ref: list => {
                    this.list = (list || undefined);
                    if (this.list && scrollToRow !== undefined) {
                        this.list.scrollIntoView({
                            index: scrollToRow,
                            align: 'center'
                        });
                    }
                }, totalCount: rows.length, itemContent: index => this.props.renderNodeRow(rows[index]), width: width, height: height, 
                // This is a pixel value, it will scan 200px to the top and bottom of the current view
                overscan: 500 });
        }
    }
    TreeWidget.View = View;
})(TreeWidget = exports.TreeWidget || (exports.TreeWidget = {}));
exports.TreeWidget = TreeWidget;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/tree.js":
/*!***************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/tree/tree.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2017 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TreeImpl = exports.CompositeTreeNode = exports.TreeNode = exports.Tree = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/es/inversify.js");
const event_1 = __webpack_require__(/*! ../../common/event */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/event.js");
const disposable_1 = __webpack_require__(/*! ../../common/disposable */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/disposable.js");
const cancellation_1 = __webpack_require__(/*! ../../common/cancellation */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/cancellation.js");
const promise_util_1 = __webpack_require__(/*! ../../common/promise-util */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/promise-util.js");
const common_1 = __webpack_require__(/*! ../../common */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/index.js");
exports.Tree = Symbol('Tree');
var TreeNode;
(function (TreeNode) {
    function is(node) {
        return (0, common_1.isObject)(node) && 'id' in node && 'parent' in node;
    }
    TreeNode.is = is;
    function equals(left, right) {
        return left === right || (!!left && !!right && left.id === right.id);
    }
    TreeNode.equals = equals;
    function isVisible(node) {
        return !!node && (node.visible === undefined || node.visible);
    }
    TreeNode.isVisible = isVisible;
})(TreeNode = exports.TreeNode || (exports.TreeNode = {}));
var CompositeTreeNode;
(function (CompositeTreeNode) {
    function is(node) {
        return (0, common_1.isObject)(node) && 'children' in node;
    }
    CompositeTreeNode.is = is;
    function getFirstChild(parent) {
        return parent.children[0];
    }
    CompositeTreeNode.getFirstChild = getFirstChild;
    function getLastChild(parent) {
        return parent.children[parent.children.length - 1];
    }
    CompositeTreeNode.getLastChild = getLastChild;
    function isAncestor(parent, child) {
        if (!child) {
            return false;
        }
        if (TreeNode.equals(parent, child.parent)) {
            return true;
        }
        return isAncestor(parent, child.parent);
    }
    CompositeTreeNode.isAncestor = isAncestor;
    function indexOf(parent, node) {
        if (!node) {
            return -1;
        }
        return parent.children.findIndex(child => TreeNode.equals(node, child));
    }
    CompositeTreeNode.indexOf = indexOf;
    function addChildren(parent, children) {
        for (const child of children) {
            addChild(parent, child);
        }
        return parent;
    }
    CompositeTreeNode.addChildren = addChildren;
    function addChild(parent, child) {
        const children = parent.children;
        const index = children.findIndex(value => value.id === child.id);
        if (index !== -1) {
            children.splice(index, 1, child);
            setParent(child, index, parent);
        }
        else {
            children.push(child);
            setParent(child, parent.children.length - 1, parent);
        }
        return parent;
    }
    CompositeTreeNode.addChild = addChild;
    function removeChild(parent, child) {
        const children = parent.children;
        const index = children.findIndex(value => value.id === child.id);
        if (index === -1) {
            return;
        }
        children.splice(index, 1);
        const { previousSibling, nextSibling } = child;
        if (previousSibling) {
            Object.assign(previousSibling, { nextSibling });
        }
        if (nextSibling) {
            Object.assign(nextSibling, { previousSibling });
        }
    }
    CompositeTreeNode.removeChild = removeChild;
    function setParent(child, index, parent) {
        const previousSibling = parent.children[index - 1];
        const nextSibling = parent.children[index + 1];
        Object.assign(child, { parent, previousSibling, nextSibling });
        if (previousSibling) {
            Object.assign(previousSibling, { nextSibling: child });
        }
        if (nextSibling) {
            Object.assign(nextSibling, { previousSibling: child });
        }
    }
    CompositeTreeNode.setParent = setParent;
})(CompositeTreeNode = exports.CompositeTreeNode || (exports.CompositeTreeNode = {}));
/**
 * A default implementation of the tree.
 */
let TreeImpl = class TreeImpl {
    constructor() {
        this.onChangedEmitter = new event_1.Emitter();
        this.onNodeRefreshedEmitter = new event_1.Emitter();
        this.toDispose = new disposable_1.DisposableCollection();
        this.onDidChangeBusyEmitter = new event_1.Emitter();
        this.onDidChangeBusy = this.onDidChangeBusyEmitter.event;
        this.onDidUpdateEmitter = new event_1.Emitter();
        this.onDidUpdate = this.onDidUpdateEmitter.event;
        this.nodes = {};
        this.toDisposeOnSetRoot = new disposable_1.DisposableCollection();
        this.toDispose.push(this.onChangedEmitter);
        this.toDispose.push(this.onNodeRefreshedEmitter);
        this.toDispose.push(this.onDidChangeBusyEmitter);
    }
    dispose() {
        this.nodes = {};
        this.toDispose.dispose();
    }
    get root() {
        return this._root;
    }
    set root(root) {
        this.toDisposeOnSetRoot.dispose();
        const cancelRefresh = new cancellation_1.CancellationTokenSource();
        this.toDisposeOnSetRoot.push(cancelRefresh);
        this.nodes = {};
        this._root = root;
        this.addNode(root);
        this.refresh(undefined, cancelRefresh.token);
    }
    get onChanged() {
        return this.onChangedEmitter.event;
    }
    fireChanged() {
        this.onChangedEmitter.fire(undefined);
    }
    get onNodeRefreshed() {
        return this.onNodeRefreshedEmitter.event;
    }
    async fireNodeRefreshed(parent) {
        await event_1.WaitUntilEvent.fire(this.onNodeRefreshedEmitter, parent);
        this.fireChanged();
    }
    getNode(id) {
        return id !== undefined ? this.nodes[id] : undefined;
    }
    validateNode(node) {
        const id = !!node ? node.id : undefined;
        return this.getNode(id);
    }
    async refresh(raw, cancellationToken) {
        const parent = !raw ? this._root : this.validateNode(raw);
        let result;
        if (CompositeTreeNode.is(parent)) {
            const busySource = new cancellation_1.CancellationTokenSource();
            this.doMarkAsBusy(parent, 800, busySource.token);
            try {
                result = parent;
                const children = await this.resolveChildren(parent);
                if (cancellationToken === null || cancellationToken === void 0 ? void 0 : cancellationToken.isCancellationRequested) {
                    return;
                }
                result = await this.setChildren(parent, children);
                if (cancellationToken === null || cancellationToken === void 0 ? void 0 : cancellationToken.isCancellationRequested) {
                    return;
                }
            }
            finally {
                busySource.cancel();
            }
        }
        this.fireChanged();
        return result;
    }
    resolveChildren(parent) {
        return Promise.resolve(Array.from(parent.children));
    }
    async setChildren(parent, children) {
        const root = this.getRootNode(parent);
        if (this.nodes[root.id] && this.nodes[root.id] !== root) {
            console.error(`Child node '${parent.id}' does not belong to this '${root.id}' tree.`);
            return undefined;
        }
        this.removeNode(parent);
        parent.children = children;
        this.addNode(parent);
        await this.fireNodeRefreshed(parent);
        return parent;
    }
    removeNode(node) {
        if (CompositeTreeNode.is(node)) {
            node.children.forEach(child => this.removeNode(child));
        }
        if (node) {
            delete this.nodes[node.id];
        }
    }
    getRootNode(node) {
        if (node.parent === undefined) {
            return node;
        }
        else {
            return this.getRootNode(node.parent);
        }
    }
    addNode(node) {
        if (node) {
            this.nodes[node.id] = node;
        }
        if (CompositeTreeNode.is(node)) {
            const { children } = node;
            children.forEach((child, index) => {
                CompositeTreeNode.setParent(child, index, node);
                this.addNode(child);
            });
        }
    }
    async markAsBusy(raw, ms, token) {
        const node = this.validateNode(raw);
        if (node) {
            await this.doMarkAsBusy(node, ms, token);
        }
    }
    markAsChecked(node, checked) {
        node.checkboxInfo.checked = checked;
        this.onDidUpdateEmitter.fire([node]);
    }
    async doMarkAsBusy(node, ms, token) {
        try {
            token.onCancellationRequested(() => this.doResetBusy(node));
            await (0, promise_util_1.timeout)(ms, token);
            if (token.isCancellationRequested) {
                return;
            }
            this.doSetBusy(node);
        }
        catch {
            /* no-op */
        }
    }
    doSetBusy(node) {
        const oldBusy = node.busy || 0;
        node.busy = oldBusy + 1;
        if (oldBusy === 0) {
            this.onDidChangeBusyEmitter.fire(node);
        }
    }
    doResetBusy(node) {
        const oldBusy = node.busy || 0;
        if (oldBusy > 0) {
            node.busy = oldBusy - 1;
            if (node.busy === 0) {
                this.onDidChangeBusyEmitter.fire(node);
            }
        }
    }
};
TreeImpl = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)(),
    (0, tslib_1.__metadata)("design:paramtypes", [])
], TreeImpl);
exports.TreeImpl = TreeImpl;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/user-working-directory-provider.js":
/*!*************************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/user-working-directory-provider.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2022 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.UserWorkingDirectoryProvider = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/es/inversify.js");
const uri_1 = __webpack_require__(/*! ../common/uri */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/uri.js");
const common_1 = __webpack_require__(/*! ../common */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/index.js");
const env_variables_1 = __webpack_require__(/*! ../common/env-variables */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/env-variables/index.js");
const navigatable_types_1 = __webpack_require__(/*! ./navigatable-types */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/navigatable-types.js");
let UserWorkingDirectoryProvider = class UserWorkingDirectoryProvider {
    configure(app) {
        app.shell.onDidChangeCurrentWidget(e => { var _a; return this.setLastOpenResource((_a = e.newValue) !== null && _a !== void 0 ? _a : undefined); });
        this.setLastOpenResource(app.shell.currentWidget);
    }
    setLastOpenResource(widget) {
        if (navigatable_types_1.Navigatable.is(widget)) {
            const uri = widget.getResourceUri();
            if (uri && uri.scheme !== common_1.UNTITLED_SCHEME) {
                this.lastOpenResource = uri;
            }
        }
    }
    /**
     * @returns A {@link URI} that represents a good guess about the directory in which the user is currently operating.
     *
     * Factors considered may include the current widget, current selection, user home directory, or other application state.
     */
    async getUserWorkingDir() {
        var _a;
        return (_a = await this.getFromSelection()) !== null && _a !== void 0 ? _a : this.getFromUserHome();
    }
    getFromSelection() {
        const uri = common_1.UriSelection.getUri(this.selectionService.selection);
        if ((uri === null || uri === void 0 ? void 0 : uri.scheme) === common_1.UNTITLED_SCHEME) {
            // An untitled file is not a valid working directory context.
            return undefined;
        }
        return this.ensureIsDirectory(uri);
    }
    getFromLastOpenResource() {
        return this.ensureIsDirectory(this.lastOpenResource);
    }
    getFromUserHome() {
        return this.envVariables.getHomeDirUri().then(home => new uri_1.default(home));
    }
    ensureIsDirectory(uri) {
        return uri === null || uri === void 0 ? void 0 : uri.parent;
    }
};
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(common_1.SelectionService),
    (0, tslib_1.__metadata)("design:type", common_1.SelectionService)
], UserWorkingDirectoryProvider.prototype, "selectionService", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(env_variables_1.EnvVariablesServer),
    (0, tslib_1.__metadata)("design:type", Object)
], UserWorkingDirectoryProvider.prototype, "envVariables", void 0);
UserWorkingDirectoryProvider = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)()
], UserWorkingDirectoryProvider);
exports.UserWorkingDirectoryProvider = UserWorkingDirectoryProvider;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/view-container.js":
/*!********************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/view-container.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2018-2019 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var ViewContainer_1;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ViewContainerLayout = exports.ViewContainerPart = exports.ViewContainer = exports.DynamicToolbarWidget = exports.BadgeWidget = exports.DescriptionWidget = exports.ViewContainerIdentifier = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/es/inversify.js");
const algorithm_1 = __webpack_require__(/*! @phosphor/algorithm */ "../node_modules/@phosphor/algorithm/lib/index.js");
const widgets_1 = __webpack_require__(/*! ./widgets */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/widgets/index.js");
const event_1 = __webpack_require__(/*! ../common/event */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/event.js");
const disposable_1 = __webpack_require__(/*! ../common/disposable */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/disposable.js");
const command_1 = __webpack_require__(/*! ../common/command */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/command.js");
const menu_1 = __webpack_require__(/*! ../common/menu */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/menu/index.js");
const shell_1 = __webpack_require__(/*! ./shell */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/shell/index.js");
const theia_dock_panel_1 = __webpack_require__(/*! ./shell/theia-dock-panel */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/shell/theia-dock-panel.js");
const frontend_application_state_1 = __webpack_require__(/*! ./frontend-application-state */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/frontend-application-state.js");
const context_menu_renderer_1 = __webpack_require__(/*! ./context-menu-renderer */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/context-menu-renderer.js");
const browser_1 = __webpack_require__(/*! ./browser */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/browser.js");
const tab_bar_toolbar_1 = __webpack_require__(/*! ./shell/tab-bar-toolbar */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/shell/tab-bar-toolbar/index.js");
const common_1 = __webpack_require__(/*! ../common */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/index.js");
const widget_manager_1 = __webpack_require__(/*! ./widget-manager */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/widget-manager.js");
const keys_1 = __webpack_require__(/*! ./keys */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/keys.js");
const progress_bar_factory_1 = __webpack_require__(/*! ./progress-bar-factory */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/progress-bar-factory.js");
const dragdrop_1 = __webpack_require__(/*! @phosphor/dragdrop */ "../node_modules/@phosphor/dragdrop/lib/index.js");
const coreutils_1 = __webpack_require__(/*! @phosphor/coreutils */ "../node_modules/@phosphor/coreutils/lib/index.js");
const domutils_1 = __webpack_require__(/*! @phosphor/domutils */ "../node_modules/@phosphor/domutils/lib/index.js");
const tab_bar_decorator_1 = __webpack_require__(/*! ./shell/tab-bar-decorator */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/shell/tab-bar-decorator.js");
let ViewContainerIdentifier = class ViewContainerIdentifier {
};
ViewContainerIdentifier = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)()
], ViewContainerIdentifier);
exports.ViewContainerIdentifier = ViewContainerIdentifier;
var DescriptionWidget;
(function (DescriptionWidget) {
    function is(arg) {
        return (0, common_1.isObject)(arg) && 'onDidChangeDescription' in arg;
    }
    DescriptionWidget.is = is;
})(DescriptionWidget = exports.DescriptionWidget || (exports.DescriptionWidget = {}));
var BadgeWidget;
(function (BadgeWidget) {
    function is(arg) {
        return (0, common_1.isObject)(arg) && 'onDidChangeBadge' in arg && 'onDidChangeBadgeTooltip' in arg;
    }
    BadgeWidget.is = is;
})(BadgeWidget = exports.BadgeWidget || (exports.BadgeWidget = {}));
var DynamicToolbarWidget;
(function (DynamicToolbarWidget) {
    function is(arg) {
        return (0, common_1.isObject)(arg) && 'onDidChangeToolbarItems' in arg;
    }
    DynamicToolbarWidget.is = is;
})(DynamicToolbarWidget = exports.DynamicToolbarWidget || (exports.DynamicToolbarWidget = {}));
/**
 * A view container holds an arbitrary number of widgets inside a split panel.
 * Each widget is wrapped in a _part_ that displays the widget title and toolbar
 * and allows to collapse / expand the widget content.
 */
let ViewContainer = ViewContainer_1 = class ViewContainer extends widgets_1.BaseWidget {
    constructor() {
        super(...arguments);
        /**
         * Disable dragging parts from/to this view container.
         */
        this.disableDNDBetweenContainers = false;
        this.onDidChangeTrackableWidgetsEmitter = new event_1.Emitter();
        this.onDidChangeTrackableWidgets = this.onDidChangeTrackableWidgetsEmitter.event;
        this.toDisposeOnCurrentPart = new disposable_1.DisposableCollection();
        this.toDisposeOnUpdateTitle = new disposable_1.DisposableCollection();
        this._tabBarDelegate = this;
        this.toRemoveWidgets = new Map();
        this.toDisposeOnDragEnd = new disposable_1.DisposableCollection();
    }
    init() {
        this.id = this.options.id;
        this.addClass('theia-view-container');
        const layout = new widgets_1.PanelLayout();
        this.layout = layout;
        this.panel = new widgets_1.SplitPanel({
            layout: new ViewContainerLayout({
                renderer: widgets_1.SplitPanel.defaultRenderer,
                orientation: this.orientation,
                spacing: 2,
                headerSize: ViewContainerPart.HEADER_HEIGHT,
                animationDuration: 200
            }, this.splitPositionHandler)
        });
        this.panel.node.tabIndex = -1;
        this.configureLayout(layout);
        const { commandRegistry, menuRegistry, contextMenuRenderer } = this;
        this.toDispose.pushAll([
            (0, widgets_1.addEventListener)(this.node, 'contextmenu', event => {
                if (event.button === 2 && (0, algorithm_1.every)(this.containerLayout.iter(), part => !!part.isHidden)) {
                    event.stopPropagation();
                    event.preventDefault();
                    contextMenuRenderer.render({ menuPath: this.contextMenuPath, anchor: event });
                }
            }),
            commandRegistry.registerCommand({ id: this.globalHideCommandId }, {
                execute: (anchor) => {
                    const toHide = this.findPartForAnchor(anchor);
                    if (toHide && toHide.canHide) {
                        toHide.hide();
                    }
                },
                isVisible: (anchor) => {
                    const toHide = this.findPartForAnchor(anchor);
                    if (toHide) {
                        return toHide.canHide && !toHide.isHidden;
                    }
                    else {
                        return (0, algorithm_1.some)(this.containerLayout.iter(), part => !part.isHidden);
                    }
                }
            }),
            menuRegistry.registerMenuAction([...this.contextMenuPath, '0_global'], {
                commandId: this.globalHideCommandId,
                label: common_1.nls.localizeByDefault('Hide')
            }),
            this.onDidChangeTrackableWidgetsEmitter,
            this.onDidChangeTrackableWidgets(() => this.decoratorService.fireDidChangeDecorations())
        ]);
        if (this.options.progressLocationId) {
            this.toDispose.push(this.progressBarFactory({ container: this.node, insertMode: 'prepend', locationId: this.options.progressLocationId }));
        }
    }
    configureLayout(layout) {
        layout.addWidget(this.panel);
    }
    updateCurrentPart(part) {
        if (part && this.getParts().indexOf(part) !== -1) {
            this.currentPart = part;
        }
        if (this.currentPart && !this.currentPart.isDisposed) {
            return;
        }
        const visibleParts = this.getParts().filter(p => !p.isHidden);
        const expandedParts = visibleParts.filter(p => !p.collapsed);
        this.currentPart = expandedParts[0] || visibleParts[0];
    }
    updateSplitterVisibility() {
        const className = 'p-first-visible';
        let firstFound = false;
        for (const part of this.getParts()) {
            if (!part.isHidden && !firstFound) {
                part.addClass(className);
                firstFound = true;
            }
            else {
                part.removeClass(className);
            }
        }
    }
    setTitleOptions(titleOptions) {
        this.titleOptions = titleOptions;
        this.updateTitle();
    }
    updateTabBarDelegate() {
        const visibleParts = this.getParts().filter(part => !part.isHidden);
        if (visibleParts.length === 1) {
            this._tabBarDelegate = visibleParts[0].wrapped;
        }
        else {
            this._tabBarDelegate = this;
        }
    }
    getTabBarDelegate() {
        return this._tabBarDelegate;
    }
    updateTitle() {
        var _a;
        this.toDisposeOnUpdateTitle.dispose();
        this.toDispose.push(this.toDisposeOnUpdateTitle);
        this.updateTabBarDelegate();
        let title = Object.assign({}, this.titleOptions);
        if ((0, common_1.isEmpty)(title)) {
            return;
        }
        const allParts = this.getParts();
        const visibleParts = allParts.filter(part => !part.isHidden);
        this.title.label = title.label;
        // If there's only one visible part - inline it's title into the container title except in case the part
        // isn't originally belongs to this container but there are other **original** hidden parts.
        if (visibleParts.length === 1 && (visibleParts[0].originalContainerId === this.id || !this.findOriginalPart())) {
            const part = visibleParts[0];
            this.toDisposeOnUpdateTitle.push(part.onTitleChanged(() => this.updateTitle()));
            const partLabel = part.wrapped.title.label;
            // Change the container title if it contains only one part that originally belongs to another container.
            if (allParts.length === 1 && part.originalContainerId !== this.id && !this.isCurrentTitle(part.originalContainerTitle)) {
                title = Object.assign({}, part.originalContainerTitle);
                this.setTitleOptions(title);
                return;
            }
            if (partLabel) {
                if (this.title.label && this.title.label !== partLabel) {
                    this.title.label += ': ' + partLabel;
                }
                else {
                    this.title.label = partLabel;
                }
            }
            part.collapsed = false;
            part.hideTitle();
        }
        else {
            visibleParts.forEach(part => part.showTitle());
            // If at least one part originally belongs to this container the title should return to its original value.
            const originalPart = this.findOriginalPart();
            if (originalPart && !this.isCurrentTitle(originalPart.originalContainerTitle)) {
                title = Object.assign({}, originalPart.originalContainerTitle);
                this.setTitleOptions(title);
                return;
            }
        }
        this.updateToolbarItems(allParts);
        this.title.caption = (title === null || title === void 0 ? void 0 : title.caption) || (title === null || title === void 0 ? void 0 : title.label);
        if (title.iconClass) {
            this.title.iconClass = title.iconClass;
        }
        if (this.title.className.includes(widgets_1.PINNED_CLASS)) {
            (_a = this.title).closable && (_a.closable = false);
        }
        else if (title.closeable !== undefined) {
            this.title.closable = title.closeable;
        }
    }
    updateToolbarItems(allParts) {
        if (allParts.length > 1) {
            const group = this.getToggleVisibilityGroupLabel();
            for (const part of allParts) {
                const existingId = this.toggleVisibilityCommandId(part);
                const { caption, label, dataset: { visibilityCommandLabel } } = part.wrapped.title;
                this.registerToolbarItem(existingId, { tooltip: visibilityCommandLabel || caption || label, group });
            }
        }
    }
    getToggleVisibilityGroupLabel() {
        return 'view';
    }
    registerToolbarItem(commandId, options) {
        const newId = `${this.id}-tabbar-toolbar-${commandId}`;
        const existingHandler = this.commandRegistry.getAllHandlers(commandId)[0];
        const existingCommand = this.commandRegistry.getCommand(commandId);
        if (existingHandler && existingCommand) {
            this.toDisposeOnUpdateTitle.push(this.commandRegistry.registerCommand({ ...existingCommand, id: newId }, {
                execute: (_widget, ...args) => this.commandRegistry.executeCommand(commandId, ...args),
                isToggled: (_widget, ...args) => this.commandRegistry.isToggled(commandId, ...args),
                isEnabled: (_widget, ...args) => this.commandRegistry.isEnabled(commandId, ...args),
                isVisible: (widget, ...args) => widget === this.getTabBarDelegate() && this.commandRegistry.isVisible(commandId, ...args),
            }));
            this.toDisposeOnUpdateTitle.push(this.toolbarRegistry.registerItem({
                ...options,
                id: newId,
                command: newId,
            }));
        }
    }
    findOriginalPart() {
        return this.getParts().find(part => part.originalContainerId === this.id);
    }
    isCurrentTitle(titleOptions) {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        return (!!titleOptions && !!this.titleOptions && Object.keys(titleOptions).every(key => titleOptions[key] === this.titleOptions[key]))
            || (!titleOptions && !this.titleOptions);
    }
    findPartForAnchor(anchor) {
        const element = document.elementFromPoint(anchor.x, anchor.y);
        if (element instanceof Element) {
            const closestPart = ViewContainerPart.closestPart(element);
            if (closestPart && closestPart.id) {
                return (0, algorithm_1.find)(this.containerLayout.iter(), part => part.id === closestPart.id);
            }
        }
        return undefined;
    }
    createPartId(widget) {
        const description = this.widgetManager.getDescription(widget);
        return widget.id || JSON.stringify(description);
    }
    addWidget(widget, options, originalContainerId, originalContainerTitle) {
        const existing = this.toRemoveWidgets.get(widget.id);
        if (existing) {
            return existing;
        }
        const partId = this.createPartId(widget);
        const newPart = this.createPart(widget, partId, originalContainerId || this.id, originalContainerTitle || this.titleOptions, options);
        return this.attachNewPart(newPart);
    }
    attachNewPart(newPart, insertIndex) {
        const toRemoveWidget = new disposable_1.DisposableCollection();
        this.toDispose.push(toRemoveWidget);
        this.toRemoveWidgets.set(newPart.wrapped.id, toRemoveWidget);
        toRemoveWidget.push(disposable_1.Disposable.create(() => this.toRemoveWidgets.delete(newPart.wrapped.id)));
        this.registerPart(newPart);
        if (insertIndex !== undefined || (newPart.options && newPart.options.order !== undefined)) {
            const index = insertIndex !== null && insertIndex !== void 0 ? insertIndex : this.getParts().findIndex(part => part.options.order === undefined || part.options.order > newPart.options.order);
            if (index >= 0) {
                this.containerLayout.insertWidget(index, newPart);
            }
            else {
                this.containerLayout.addWidget(newPart);
            }
        }
        else {
            this.containerLayout.addWidget(newPart);
        }
        this.refreshMenu(newPart);
        this.updateTitle();
        this.updateCurrentPart();
        this.updateSplitterVisibility();
        this.update();
        this.fireDidChangeTrackableWidgets();
        toRemoveWidget.pushAll([
            disposable_1.Disposable.create(() => {
                if (newPart.currentViewContainerId === this.id) {
                    newPart.dispose();
                }
                this.unregisterPart(newPart);
                if (!newPart.isDisposed && this.getPartIndex(newPart.id) > -1) {
                    this.containerLayout.removeWidget(newPart);
                }
                if (!this.isDisposed) {
                    this.update();
                    this.updateTitle();
                    this.updateCurrentPart();
                    this.updateSplitterVisibility();
                    this.fireDidChangeTrackableWidgets();
                }
            }),
            this.registerDND(newPart),
            newPart.onDidChangeVisibility(() => {
                this.updateTitle();
                this.updateCurrentPart();
                this.updateSplitterVisibility();
                this.containerLayout.updateSashes();
            }),
            newPart.onCollapsed(() => {
                this.containerLayout.updateCollapsed(newPart, this.enableAnimation);
                this.containerLayout.updateSashes();
                this.updateCurrentPart();
            }),
            newPart.onContextMenu(event => {
                if (event.button === 2) {
                    event.preventDefault();
                    event.stopPropagation();
                    this.contextMenuRenderer.render({ menuPath: this.contextMenuPath, anchor: event });
                }
            }),
            newPart.onTitleChanged(() => this.refreshMenu(newPart)),
            newPart.onDidFocus(() => this.updateCurrentPart(newPart))
        ]);
        newPart.disposed.connect(() => toRemoveWidget.dispose());
        return toRemoveWidget;
    }
    createPart(widget, partId, originalContainerId, originalContainerTitle, options) {
        return new ViewContainerPart(widget, partId, this.id, originalContainerId, originalContainerTitle, this.toolbarRegistry, this.toolbarFactory, options);
    }
    removeWidget(widget) {
        const disposable = this.toRemoveWidgets.get(widget.id);
        if (disposable) {
            disposable.dispose();
            return true;
        }
        return false;
    }
    getParts() {
        return this.containerLayout.widgets;
    }
    getPartIndex(partId) {
        if (partId) {
            return this.getParts().findIndex(part => part.id === partId);
        }
        return -1;
    }
    getPartFor(widget) {
        return this.getParts().find(p => p.wrapped.id === widget.id);
    }
    get containerLayout() {
        const layout = this.panel.layout;
        if (layout instanceof ViewContainerLayout) {
            return layout;
        }
        throw new Error('view container is disposed');
    }
    get orientation() {
        return ViewContainer_1.getOrientation(this.node);
    }
    get enableAnimation() {
        return this.applicationStateService.state === 'ready';
    }
    storeState() {
        if (!this.isVisible && this.lastVisibleState) {
            return this.lastVisibleState;
        }
        return this.doStoreState();
    }
    doStoreState() {
        const parts = this.getParts();
        const availableSize = this.containerLayout.getAvailableSize();
        const orientation = this.orientation;
        const partStates = parts.map(part => {
            let size = this.containerLayout.getPartSize(part);
            if (size && size > ViewContainerPart.HEADER_HEIGHT && orientation === 'vertical') {
                size -= ViewContainerPart.HEADER_HEIGHT;
            }
            return {
                widget: part.wrapped,
                partId: part.partId,
                collapsed: part.collapsed,
                hidden: part.isHidden,
                relativeSize: size && availableSize ? size / availableSize : undefined,
                originalContainerId: part.originalContainerId,
                originalContainerTitle: part.originalContainerTitle
            };
        });
        return { parts: partStates, title: this.titleOptions };
    }
    restoreState(state) {
        this.lastVisibleState = state;
        this.doRestoreState(state);
    }
    doRestoreState(state) {
        this.setTitleOptions(state.title);
        // restore widgets
        for (const part of state.parts) {
            if (part.widget) {
                this.addWidget(part.widget, undefined, part.originalContainerId, part.originalContainerTitle || {});
            }
        }
        const partStates = state.parts.filter(partState => (0, algorithm_1.some)(this.containerLayout.iter(), p => p.partId === partState.partId));
        // Reorder the parts according to the stored state
        for (let index = 0; index < partStates.length; index++) {
            const partState = partStates[index];
            const widget = this.getParts().find(part => part.partId === partState.partId);
            if (widget) {
                this.containerLayout.insertWidget(index, widget);
            }
        }
        // Restore visibility and collapsed state
        const parts = this.getParts();
        for (let index = 0; index < parts.length; index++) {
            const part = parts[index];
            const partState = partStates.find(s => part.partId === s.partId);
            if (partState) {
                part.setHidden(partState.hidden);
                part.collapsed = partState.collapsed || !partState.relativeSize;
            }
            else if (part.canHide) {
                part.hide();
            }
            this.refreshMenu(part);
        }
        // Restore part sizes
        (0, widgets_1.waitForRevealed)(this).then(() => {
            this.containerLayout.setPartSizes(partStates.map(partState => partState.relativeSize));
            this.updateSplitterVisibility();
        });
    }
    /**
     * Register a command to toggle the visibility of the new part.
     */
    registerPart(toRegister) {
        const commandId = this.toggleVisibilityCommandId(toRegister);
        this.commandRegistry.registerCommand({ id: commandId }, {
            execute: () => {
                const toHide = (0, algorithm_1.find)(this.containerLayout.iter(), part => part.id === toRegister.id);
                if (toHide) {
                    toHide.setHidden(!toHide.isHidden);
                }
            },
            isToggled: () => {
                if (!toRegister.canHide) {
                    return true;
                }
                const widgetToToggle = (0, algorithm_1.find)(this.containerLayout.iter(), part => part.id === toRegister.id);
                if (widgetToToggle) {
                    return !widgetToToggle.isHidden;
                }
                return false;
            },
            isEnabled: arg => toRegister.canHide && (!this.titleOptions || !(arg instanceof widgets_1.Widget) || (arg instanceof ViewContainer_1 && arg.id === this.id)),
            isVisible: arg => !this.titleOptions || !(arg instanceof widgets_1.Widget) || (arg instanceof ViewContainer_1 && arg.id === this.id)
        });
    }
    /**
     * Register a menu action to toggle the visibility of the new part.
     * The menu action is unregistered first to enable refreshing the order of menu actions.
     */
    refreshMenu(part) {
        const commandId = this.toggleVisibilityCommandId(part);
        this.menuRegistry.unregisterMenuAction(commandId);
        if (!part.wrapped.title.label) {
            return;
        }
        const { dataset: { visibilityCommandLabel }, caption, label } = part.wrapped.title;
        const action = {
            commandId: commandId,
            label: visibilityCommandLabel || caption || label,
            order: this.getParts().indexOf(part).toString()
        };
        this.menuRegistry.registerMenuAction([...this.contextMenuPath, '1_widgets'], action);
        if (this.titleOptions) {
            this.menuRegistry.registerMenuAction([...shell_1.SIDE_PANEL_TOOLBAR_CONTEXT_MENU, 'navigation'], action);
        }
    }
    unregisterPart(part) {
        const commandId = this.toggleVisibilityCommandId(part);
        this.commandRegistry.unregisterCommand(commandId);
        this.menuRegistry.unregisterMenuAction(commandId);
    }
    get contextMenuPath() {
        return [`${this.id}-context-menu`];
    }
    toggleVisibilityCommandId(part) {
        return `${this.id}:toggle-visibility-${part.id}`;
    }
    get globalHideCommandId() {
        return `${this.id}:toggle-visibility`;
    }
    moveBefore(toMovedId, moveBeforeThisId) {
        const parts = this.getParts();
        const indexToMove = parts.findIndex(part => part.id === toMovedId);
        const targetIndex = parts.findIndex(part => part.id === moveBeforeThisId);
        if (indexToMove >= 0 && targetIndex >= 0) {
            this.containerLayout.insertWidget(targetIndex, parts[indexToMove]);
            for (let index = Math.min(indexToMove, targetIndex); index < parts.length; index++) {
                this.refreshMenu(parts[index]);
                this.activate();
            }
        }
        this.updateSplitterVisibility();
    }
    getTrackableWidgets() {
        return this.getParts().map(w => w.wrapped);
    }
    fireDidChangeTrackableWidgets() {
        this.onDidChangeTrackableWidgetsEmitter.fire(this.getTrackableWidgets());
    }
    activateWidget(id) {
        const part = this.revealPart(id);
        if (!part) {
            return undefined;
        }
        this.updateCurrentPart(part);
        part.collapsed = false;
        return part.wrapped;
    }
    revealWidget(id) {
        const part = this.revealPart(id);
        return part && part.wrapped;
    }
    revealPart(id) {
        const part = this.getParts().find(p => p.wrapped.id === id);
        if (!part) {
            return undefined;
        }
        part.setHidden(false);
        return part;
    }
    onActivateRequest(msg) {
        super.onActivateRequest(msg);
        if (this.currentPart) {
            this.currentPart.activate();
        }
        else {
            this.panel.node.focus({ preventScroll: true });
        }
    }
    onAfterAttach(msg) {
        const orientation = this.orientation;
        this.containerLayout.orientation = orientation;
        if (orientation === 'horizontal') {
            for (const part of this.getParts()) {
                part.collapsed = false;
            }
        }
        super.onAfterAttach(msg);
    }
    onBeforeHide(msg) {
        super.onBeforeHide(msg);
        this.lastVisibleState = this.storeState();
    }
    onAfterShow(msg) {
        super.onAfterShow(msg);
        this.updateTitle();
        this.lastVisibleState = undefined;
    }
    onBeforeAttach(msg) {
        super.onBeforeAttach(msg);
        this.node.addEventListener('p-dragenter', this, true);
        this.node.addEventListener('p-dragover', this, true);
        this.node.addEventListener('p-dragleave', this, true);
        this.node.addEventListener('p-drop', this, true);
    }
    onAfterDetach(msg) {
        super.onAfterDetach(msg);
        this.node.removeEventListener('p-dragenter', this, true);
        this.node.removeEventListener('p-dragover', this, true);
        this.node.removeEventListener('p-dragleave', this, true);
        this.node.removeEventListener('p-drop', this, true);
    }
    handleEvent(event) {
        switch (event.type) {
            case 'p-dragenter':
                this.handleDragEnter(event);
                break;
            case 'p-dragover':
                this.handleDragOver(event);
                break;
            case 'p-dragleave':
                this.handleDragLeave(event);
                break;
            case 'p-drop':
                this.handleDrop(event);
                break;
        }
    }
    handleDragEnter(event) {
        if (event.mimeData.hasData('application/vnd.phosphor.view-container-factory')) {
            event.preventDefault();
            event.stopPropagation();
        }
    }
    handleDragOver(event) {
        var _a;
        const factory = event.mimeData.getData('application/vnd.phosphor.view-container-factory');
        const widget = factory && factory();
        if (!(widget instanceof ViewContainerPart)) {
            return;
        }
        event.preventDefault();
        event.stopPropagation();
        const sameContainers = this.id === widget.currentViewContainerId;
        const targetPart = algorithm_1.ArrayExt.findFirstValue(this.getParts(), (p => domutils_1.ElementExt.hitTest(p.node, event.clientX, event.clientY)));
        if (!targetPart && sameContainers) {
            event.dropAction = 'none';
            return;
        }
        if (targetPart) {
            // add overlay class style to the `targetPart` node.
            targetPart.node.classList.add('drop-target');
            this.toDisposeOnDragEnd.push(disposable_1.Disposable.create(() => targetPart.node.classList.remove('drop-target')));
        }
        else {
            // show panel overlay.
            const dockPanel = this.getDockPanel();
            if (dockPanel) {
                dockPanel.overlay.show({ top: 0, bottom: 0, right: 0, left: 0 });
                this.toDisposeOnDragEnd.push(disposable_1.Disposable.create(() => dockPanel.overlay.hide(100)));
            }
        }
        const isDraggingOutsideDisabled = this.disableDNDBetweenContainers || ((_a = widget.viewContainer) === null || _a === void 0 ? void 0 : _a.disableDNDBetweenContainers)
            || widget.options.disableDraggingToOtherContainers;
        if (isDraggingOutsideDisabled && !sameContainers) {
            const { target } = event;
            if (target instanceof HTMLElement) {
                target.classList.add('theia-cursor-no-drop');
                this.toDisposeOnDragEnd.push(disposable_1.Disposable.create(() => {
                    target.classList.remove('theia-cursor-no-drop');
                }));
            }
            event.dropAction = 'none';
            return;
        }
        ;
        event.dropAction = event.proposedAction;
    }
    ;
    handleDragLeave(event) {
        this.toDisposeOnDragEnd.dispose();
        if (event.mimeData.hasData('application/vnd.phosphor.view-container-factory')) {
            event.preventDefault();
            event.stopPropagation();
        }
    }
    ;
    handleDrop(event) {
        this.toDisposeOnDragEnd.dispose();
        const factory = event.mimeData.getData('application/vnd.phosphor.view-container-factory');
        const draggedPart = factory && factory();
        if (!(draggedPart instanceof ViewContainerPart)) {
            event.dropAction = 'none';
            return;
        }
        event.preventDefault();
        event.stopPropagation();
        const parts = this.getParts();
        const toIndex = algorithm_1.ArrayExt.findFirstIndex(parts, part => domutils_1.ElementExt.hitTest(part.node, event.clientX, event.clientY));
        if (draggedPart.currentViewContainerId !== this.id) {
            this.attachNewPart(draggedPart, toIndex > -1 ? toIndex + 1 : toIndex);
            draggedPart.onPartMoved(this);
        }
        else {
            this.moveBefore(draggedPart.id, parts[toIndex].id);
        }
        event.dropAction = event.proposedAction;
    }
    registerDND(part) {
        part.headerElement.draggable = true;
        return new disposable_1.DisposableCollection((0, widgets_1.addEventListener)(part.headerElement, 'dragstart', event => {
            event.preventDefault();
            const mimeData = new coreutils_1.MimeData();
            mimeData.setData('application/vnd.phosphor.view-container-factory', () => part);
            const clonedHeader = part.headerElement.cloneNode(true);
            clonedHeader.style.width = part.node.style.width;
            clonedHeader.style.opacity = '0.6';
            const drag = new dragdrop_1.Drag({
                mimeData,
                dragImage: clonedHeader,
                proposedAction: 'move',
                supportedActions: 'move'
            });
            part.node.classList.add('p-mod-hidden');
            drag.start(event.clientX, event.clientY).then(dropAction => {
                // The promise is resolved when the drag has ended
                if (dropAction === 'move' && part.currentViewContainerId !== this.id) {
                    this.removeWidget(part.wrapped);
                    this.lastVisibleState = this.doStoreState();
                }
            });
            setTimeout(() => { part.node.classList.remove('p-mod-hidden'); }, 0);
        }, false));
    }
    getDockPanel() {
        let panel;
        let parent = this.parent;
        while (!panel && parent) {
            if (this.isSideDockPanel(parent)) {
                panel = parent;
            }
            else {
                parent = parent.parent;
            }
        }
        return panel;
    }
    isSideDockPanel(widget) {
        const { leftPanelHandler, rightPanelHandler } = this.shell;
        if (widget instanceof widgets_1.DockPanel && (widget.id === rightPanelHandler.dockPanel.id || widget.id === leftPanelHandler.dockPanel.id)) {
            return true;
        }
        return false;
    }
};
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(frontend_application_state_1.FrontendApplicationStateService),
    (0, tslib_1.__metadata)("design:type", frontend_application_state_1.FrontendApplicationStateService)
], ViewContainer.prototype, "applicationStateService", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(context_menu_renderer_1.ContextMenuRenderer),
    (0, tslib_1.__metadata)("design:type", context_menu_renderer_1.ContextMenuRenderer)
], ViewContainer.prototype, "contextMenuRenderer", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(command_1.CommandRegistry),
    (0, tslib_1.__metadata)("design:type", command_1.CommandRegistry)
], ViewContainer.prototype, "commandRegistry", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(menu_1.MenuModelRegistry),
    (0, tslib_1.__metadata)("design:type", menu_1.MenuModelRegistry)
], ViewContainer.prototype, "menuRegistry", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(widget_manager_1.WidgetManager),
    (0, tslib_1.__metadata)("design:type", widget_manager_1.WidgetManager)
], ViewContainer.prototype, "widgetManager", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(shell_1.SplitPositionHandler),
    (0, tslib_1.__metadata)("design:type", shell_1.SplitPositionHandler)
], ViewContainer.prototype, "splitPositionHandler", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(ViewContainerIdentifier),
    (0, tslib_1.__metadata)("design:type", ViewContainerIdentifier)
], ViewContainer.prototype, "options", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(tab_bar_toolbar_1.TabBarToolbarRegistry),
    (0, tslib_1.__metadata)("design:type", tab_bar_toolbar_1.TabBarToolbarRegistry)
], ViewContainer.prototype, "toolbarRegistry", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(tab_bar_toolbar_1.TabBarToolbarFactory),
    (0, tslib_1.__metadata)("design:type", Function)
], ViewContainer.prototype, "toolbarFactory", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(progress_bar_factory_1.ProgressBarFactory),
    (0, tslib_1.__metadata)("design:type", Function)
], ViewContainer.prototype, "progressBarFactory", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(shell_1.ApplicationShell),
    (0, tslib_1.__metadata)("design:type", shell_1.ApplicationShell)
], ViewContainer.prototype, "shell", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(tab_bar_decorator_1.TabBarDecoratorService),
    (0, tslib_1.__metadata)("design:type", tab_bar_decorator_1.TabBarDecoratorService)
], ViewContainer.prototype, "decoratorService", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.postConstruct)(),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", []),
    (0, tslib_1.__metadata)("design:returntype", void 0)
], ViewContainer.prototype, "init", null);
ViewContainer = ViewContainer_1 = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)()
], ViewContainer);
exports.ViewContainer = ViewContainer;
(function (ViewContainer) {
    ViewContainer.Factory = Symbol('ViewContainerFactory');
    function getOrientation(node) {
        if (node.closest(`#${theia_dock_panel_1.MAIN_AREA_ID}`) || node.closest(`#${theia_dock_panel_1.BOTTOM_AREA_ID}`)) {
            return 'horizontal';
        }
        return 'vertical';
    }
    ViewContainer.getOrientation = getOrientation;
})(ViewContainer = exports.ViewContainer || (exports.ViewContainer = {}));
exports.ViewContainer = ViewContainer;
/**
 * Wrapper around a widget held by a view container. Adds a header to display the
 * title, toolbar, and collapse / expand handle.
 */
class ViewContainerPart extends widgets_1.BaseWidget {
    constructor(wrapped, partId, currentContainerId, originalContainerId, originalContainerTitle, toolbarRegistry, toolbarFactory, options = {}) {
        var _a;
        super();
        this.wrapped = wrapped;
        this.partId = partId;
        this.currentContainerId = currentContainerId;
        this.originalContainerId = originalContainerId;
        this.originalContainerTitle = originalContainerTitle;
        this.toolbarRegistry = toolbarRegistry;
        this.toolbarFactory = toolbarFactory;
        this.options = options;
        this.collapsedEmitter = new event_1.Emitter();
        this.contextMenuEmitter = new event_1.Emitter();
        this.onTitleChangedEmitter = new event_1.Emitter();
        this.onTitleChanged = this.onTitleChangedEmitter.event;
        this.onDidFocusEmitter = new event_1.Emitter();
        this.onDidFocus = this.onDidFocusEmitter.event;
        this.onPartMovedEmitter = new event_1.Emitter();
        this.onDidMove = this.onPartMovedEmitter.event;
        this.onDidChangeDescriptionEmitter = new event_1.Emitter();
        this.onDidChangeDescription = this.onDidChangeDescriptionEmitter.event;
        this.onDidChangeBadgeEmitter = new event_1.Emitter();
        this.onDidChangeBadge = this.onDidChangeBadgeEmitter.event;
        this.onDidChangeBadgeTooltipEmitter = new event_1.Emitter();
        this.onDidChangeBadgeTooltip = this.onDidChangeBadgeTooltipEmitter.event;
        this.toShowHeader = new disposable_1.DisposableCollection();
        wrapped.parent = this;
        wrapped.disposed.connect(() => this.dispose());
        this.id = `${originalContainerId}--${wrapped.id}`;
        this.addClass('part');
        const fireTitleChanged = () => this.onTitleChangedEmitter.fire(undefined);
        this.wrapped.title.changed.connect(fireTitleChanged);
        this.toDispose.push(disposable_1.Disposable.create(() => this.wrapped.title.changed.disconnect(fireTitleChanged)));
        if (DescriptionWidget.is(this.wrapped)) {
            (_a = this.wrapped) === null || _a === void 0 ? void 0 : _a.onDidChangeDescription(() => this.onDidChangeDescriptionEmitter.fire(), undefined, this.toDispose);
        }
        if (BadgeWidget.is(this.wrapped)) {
            this.wrapped.onDidChangeBadge(() => this.onDidChangeBadgeEmitter.fire(), undefined, this.toDispose);
            this.wrapped.onDidChangeBadgeTooltip(() => this.onDidChangeBadgeTooltipEmitter.fire(), undefined, this.toDispose);
        }
        if (DynamicToolbarWidget.is(this.wrapped)) {
            this.wrapped.onDidChangeToolbarItems(() => {
                var _a;
                this.toolbar.updateTarget(this.wrapped);
                (_a = this.viewContainer) === null || _a === void 0 ? void 0 : _a.update();
            });
        }
        const { header, body, disposable } = this.createContent();
        this.header = header;
        this.body = body;
        this.toNoDisposeWrapped = this.toDispose.push(wrapped);
        this.toolbar = this.toolbarFactory();
        this.toolbar.addClass('theia-view-container-part-title');
        this.toDispose.pushAll([
            disposable,
            this.toolbar,
            this.toolbarRegistry.onDidChange(() => this.toolbar.updateTarget(this.wrapped)),
            this.collapsedEmitter,
            this.contextMenuEmitter,
            this.onTitleChangedEmitter,
            this.onDidChangeDescriptionEmitter,
            this.onDidChangeBadgeEmitter,
            this.onDidChangeBadgeTooltipEmitter,
            this.registerContextMenu(),
            this.onDidFocusEmitter,
            // focus event does not bubble, capture it
            (0, widgets_1.addEventListener)(this.node, 'focus', () => this.onDidFocusEmitter.fire(this), true)
        ]);
        this.scrollOptions = {
            suppressScrollX: true,
            minScrollbarLength: 35
        };
        this.collapsed = !!options.initiallyCollapsed;
        if (options.initiallyHidden && this.canHide) {
            this.hide();
        }
    }
    get viewContainer() {
        return this.parent ? this.parent.parent : undefined;
    }
    get currentViewContainerId() {
        return this.currentContainerId;
    }
    get headerElement() {
        return this.header;
    }
    get collapsed() {
        return this._collapsed;
    }
    set collapsed(collapsed) {
        // Cannot collapse/expand if the orientation of the container is `horizontal`.
        const orientation = ViewContainer.getOrientation(this.node);
        if (this._collapsed === collapsed || (orientation === 'horizontal' && collapsed)) {
            return;
        }
        this._collapsed = collapsed;
        this.node.classList.toggle('collapsed', collapsed);
        if (collapsed && this.wrapped.node.contains(document.activeElement)) {
            this.header.focus();
        }
        this.wrapped.setHidden(collapsed);
        const toggleIcon = this.header.querySelector(`span.${widgets_1.EXPANSION_TOGGLE_CLASS}`);
        if (toggleIcon) {
            if (collapsed) {
                toggleIcon.classList.add(widgets_1.COLLAPSED_CLASS);
            }
            else {
                toggleIcon.classList.remove(widgets_1.COLLAPSED_CLASS);
            }
        }
        this.update();
        this.collapsedEmitter.fire(collapsed);
    }
    onPartMoved(newContainer) {
        this.currentContainerId = newContainer.id;
        this.onPartMovedEmitter.fire(newContainer);
    }
    setHidden(hidden) {
        if (!this.canHide) {
            return;
        }
        super.setHidden(hidden);
    }
    get canHide() {
        return this.options.canHide === undefined || this.options.canHide;
    }
    get onCollapsed() {
        return this.collapsedEmitter.event;
    }
    get onContextMenu() {
        return this.contextMenuEmitter.event;
    }
    get minSize() {
        const style = getComputedStyle(this.body);
        if (ViewContainer.getOrientation(this.node) === 'horizontal') {
            return (0, browser_1.parseCssMagnitude)(style.minWidth, 0);
        }
        else {
            return (0, browser_1.parseCssMagnitude)(style.minHeight, 0);
        }
    }
    showTitle() {
        this.toShowHeader.dispose();
    }
    hideTitle() {
        if (this.titleHidden) {
            return;
        }
        const display = this.header.style.display;
        const height = this.body.style.height;
        this.body.style.height = '100%';
        this.header.style.display = 'none';
        this.toShowHeader.push(disposable_1.Disposable.create(() => {
            this.header.style.display = display;
            this.body.style.height = height;
        }));
    }
    get titleHidden() {
        return !this.toShowHeader.disposed || this.collapsed;
    }
    getScrollContainer() {
        return this.body;
    }
    registerContextMenu() {
        return new disposable_1.DisposableCollection((0, widgets_1.addEventListener)(this.header, 'contextmenu', event => {
            this.contextMenuEmitter.fire(event);
        }));
    }
    createContent() {
        const disposable = new disposable_1.DisposableCollection();
        const { header, disposable: headerDisposable } = this.createHeader();
        const body = document.createElement('div');
        body.classList.add('body');
        this.node.appendChild(header);
        this.node.appendChild(body);
        disposable.push(headerDisposable);
        return {
            header,
            body,
            disposable,
        };
    }
    createHeader() {
        const disposable = new disposable_1.DisposableCollection();
        const header = document.createElement('div');
        header.tabIndex = 0;
        header.classList.add('theia-header', 'header', 'theia-view-container-part-header');
        disposable.push((0, widgets_1.addEventListener)(header, 'click', event => {
            if (this.toolbar && this.toolbar.shouldHandleMouseEvent(event)) {
                return;
            }
            this.collapsed = !this.collapsed;
        }));
        disposable.push((0, widgets_1.addKeyListener)(header, keys_1.Key.ARROW_LEFT, () => this.collapsed = true));
        disposable.push((0, widgets_1.addKeyListener)(header, keys_1.Key.ARROW_RIGHT, () => this.collapsed = false));
        disposable.push((0, widgets_1.addKeyListener)(header, keys_1.Key.ENTER, () => this.collapsed = !this.collapsed));
        const toggleIcon = document.createElement('span');
        toggleIcon.classList.add(widgets_1.EXPANSION_TOGGLE_CLASS, ...widgets_1.CODICON_TREE_ITEM_CLASSES);
        if (this.collapsed) {
            toggleIcon.classList.add(widgets_1.COLLAPSED_CLASS);
        }
        header.appendChild(toggleIcon);
        const title = document.createElement('span');
        title.classList.add('label', 'noselect');
        const description = document.createElement('span');
        description.classList.add('description');
        const badgeSpan = document.createElement('span');
        badgeSpan.classList.add('notification-count');
        const badgeContainer = document.createElement('div');
        badgeContainer.classList.add('notification-count-container');
        badgeContainer.appendChild(badgeSpan);
        const badgeContainerDisplay = badgeContainer.style.display;
        const updateTitle = () => {
            var _a;
            if (this.currentContainerId !== this.originalContainerId && ((_a = this.originalContainerTitle) === null || _a === void 0 ? void 0 : _a.label)) {
                // Creating a title in format: <original_container_title>: <part_title>.
                title.innerText = this.originalContainerTitle.label + ': ' + this.wrapped.title.label;
            }
            else {
                title.innerText = this.wrapped.title.label;
            }
        };
        const updateCaption = () => title.title = this.wrapped.title.caption || this.wrapped.title.label;
        const updateDescription = () => {
            description.innerText = DescriptionWidget.is(this.wrapped) && !this.collapsed && this.wrapped.description || '';
        };
        const updateBadge = () => {
            if (BadgeWidget.is(this.wrapped)) {
                const visibleToolBarItems = this.toolbarRegistry.visibleItems(this.wrapped).length > 0;
                const badge = this.wrapped.badge;
                if (badge && !visibleToolBarItems) {
                    badgeSpan.innerText = badge.toString();
                    badgeSpan.title = this.wrapped.badgeTooltip || '';
                    badgeContainer.style.display = badgeContainerDisplay;
                    return;
                }
            }
            badgeContainer.style.display = 'none';
        };
        updateTitle();
        updateCaption();
        updateDescription();
        updateBadge();
        disposable.pushAll([
            this.onTitleChanged(updateTitle),
            this.onTitleChanged(updateCaption),
            this.onDidMove(updateTitle),
            this.onDidChangeDescription(updateDescription),
            this.onDidChangeBadge(updateBadge),
            this.onDidChangeBadgeTooltip(updateBadge),
            this.onCollapsed(updateDescription)
        ]);
        header.appendChild(title);
        header.appendChild(description);
        header.appendChild(badgeContainer);
        return {
            header,
            disposable
        };
    }
    handleResize() {
        var _a;
        const handleMouseEnter = () => {
            var _a;
            (_a = this.node) === null || _a === void 0 ? void 0 : _a.classList.add('no-pointer-events');
            setTimeout(() => {
                var _a, _b;
                (_a = this.node) === null || _a === void 0 ? void 0 : _a.classList.remove('no-pointer-events');
                (_b = this.node) === null || _b === void 0 ? void 0 : _b.removeEventListener('mouseenter', handleMouseEnter);
            }, 100);
        };
        (_a = this.node) === null || _a === void 0 ? void 0 : _a.addEventListener('mouseenter', handleMouseEnter);
    }
    onResize(msg) {
        this.handleResize();
        if (this.wrapped.isAttached && !this.collapsed) {
            widgets_1.MessageLoop.sendMessage(this.wrapped, widgets_1.Widget.ResizeMessage.UnknownSize);
        }
        super.onResize(msg);
    }
    onUpdateRequest(msg) {
        if (this.wrapped.isAttached && !this.collapsed) {
            widgets_1.MessageLoop.sendMessage(this.wrapped, msg);
        }
        super.onUpdateRequest(msg);
    }
    onAfterAttach(msg) {
        if (!this.wrapped.isAttached) {
            widgets_1.UnsafeWidgetUtilities.attach(this.wrapped, this.body);
        }
        widgets_1.UnsafeWidgetUtilities.attach(this.toolbar, this.header);
        super.onAfterAttach(msg);
    }
    onBeforeDetach(msg) {
        super.onBeforeDetach(msg);
        if (this.toolbar.isAttached) {
            widgets_1.Widget.detach(this.toolbar);
        }
        if (this.wrapped.isAttached) {
            widgets_1.UnsafeWidgetUtilities.detach(this.wrapped);
        }
    }
    onBeforeShow(msg) {
        if (this.wrapped.isAttached && !this.collapsed) {
            widgets_1.MessageLoop.sendMessage(this.wrapped, msg);
        }
        super.onBeforeShow(msg);
    }
    onAfterShow(msg) {
        super.onAfterShow(msg);
        if (this.wrapped.isAttached && !this.collapsed) {
            widgets_1.MessageLoop.sendMessage(this.wrapped, msg);
        }
    }
    onBeforeHide(msg) {
        if (this.wrapped.isAttached && !this.collapsed) {
            widgets_1.MessageLoop.sendMessage(this.wrapped, msg);
        }
        super.onBeforeShow(msg);
    }
    onAfterHide(msg) {
        super.onAfterHide(msg);
        if (this.wrapped.isAttached && !this.collapsed) {
            widgets_1.MessageLoop.sendMessage(this.wrapped, msg);
        }
    }
    onChildRemoved(msg) {
        super.onChildRemoved(msg);
        // if wrapped is not disposed, but detached then we should not dispose it, but only get rid of this part
        this.toNoDisposeWrapped.dispose();
        this.dispose();
    }
    onActivateRequest(msg) {
        super.onActivateRequest(msg);
        if (this.collapsed) {
            this.header.focus();
        }
        else {
            this.wrapped.activate();
        }
    }
}
exports.ViewContainerPart = ViewContainerPart;
(function (ViewContainerPart) {
    /**
     * Make sure to adjust the `line-height` of the `.theia-view-container .part > .header` CSS class when modifying this, and vice versa.
     */
    ViewContainerPart.HEADER_HEIGHT = 22;
    function closestPart(element, selector = 'div.part') {
        if (element instanceof Element) {
            const part = element.closest(selector);
            if (part instanceof Element) {
                return part;
            }
        }
        return undefined;
    }
    ViewContainerPart.closestPart = closestPart;
})(ViewContainerPart = exports.ViewContainerPart || (exports.ViewContainerPart = {}));
class ViewContainerLayout extends widgets_1.SplitLayout {
    constructor(options, splitPositionHandler) {
        super(options);
        this.options = options;
        this.splitPositionHandler = splitPositionHandler;
    }
    get items() {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        return this._items;
    }
    iter() {
        return (0, algorithm_1.map)(this.items, item => item.widget);
    }
    // @ts-expect-error TS2611 `SplitLayout.widgets` is declared as `readonly widgets` but is implemented as a getter.
    get widgets() {
        return (0, algorithm_1.toArray)(this.iter());
    }
    attachWidget(index, widget) {
        var _a;
        super.attachWidget(index, widget);
        if (index > -1 && this.parent && this.parent.node.contains((_a = this.widgets[index + 1]) === null || _a === void 0 ? void 0 : _a.node)) {
            // Set the correct attach index to the DOM elements.
            const ref = this.widgets[index + 1].node;
            this.parent.node.insertBefore(widget.node, ref);
            this.parent.node.insertBefore(this.handles[index], ref);
            this.parent.fit();
        }
    }
    getPartSize(part) {
        if (part.collapsed || part.isHidden) {
            return part.uncollapsedSize;
        }
        if (this.orientation === 'horizontal') {
            return part.node.offsetWidth;
        }
        else {
            return part.node.offsetHeight;
        }
    }
    /**
     * Set the sizes of the view container parts according to the given weights
     * by moving the split handles. This is similar to `setRelativeSizes` defined
     * in `SplitLayout`, but here we properly consider the collapsed / expanded state.
     */
    setPartSizes(weights) {
        const parts = this.widgets;
        const availableSize = this.getAvailableSize();
        // Sum up the weights of visible parts
        let totalWeight = 0;
        let weightCount = 0;
        for (let index = 0; index < weights.length && index < parts.length; index++) {
            const part = parts[index];
            const weight = weights[index];
            if (weight && !part.isHidden && !part.collapsed) {
                totalWeight += weight;
                weightCount++;
            }
        }
        if (weightCount === 0 || availableSize === 0) {
            return;
        }
        // Add the average weight for visible parts without weight
        const averageWeight = totalWeight / weightCount;
        for (let index = 0; index < weights.length && index < parts.length; index++) {
            const part = parts[index];
            const weight = weights[index];
            if (!weight && !part.isHidden && !part.collapsed) {
                totalWeight += averageWeight;
            }
        }
        // Apply the weights to compute actual sizes
        let position = 0;
        for (let index = 0; index < weights.length && index < parts.length - 1; index++) {
            const part = parts[index];
            if (!part.isHidden) {
                if (this.orientation === 'vertical') {
                    position += this.options.headerSize;
                }
                const weight = weights[index];
                if (part.collapsed) {
                    if (weight) {
                        part.uncollapsedSize = weight / totalWeight * availableSize;
                    }
                }
                else {
                    let contentSize = (weight || averageWeight) / totalWeight * availableSize;
                    const minSize = part.minSize;
                    if (contentSize < minSize) {
                        contentSize = minSize;
                    }
                    position += contentSize;
                }
                this.setHandlePosition(index, position);
                position += this.spacing;
            }
        }
    }
    /**
     * Determine the size of the split panel area that is available for widget content,
     * i.e. excluding part headers and split handles.
     */
    getAvailableSize() {
        if (!this.parent || !this.parent.isAttached) {
            return 0;
        }
        const parts = this.widgets;
        const visiblePartCount = parts.filter(part => !part.isHidden).length;
        let availableSize;
        if (this.orientation === 'horizontal') {
            availableSize = this.parent.node.offsetWidth;
        }
        else {
            availableSize = this.parent.node.offsetHeight;
            availableSize -= visiblePartCount * this.options.headerSize;
        }
        availableSize -= (visiblePartCount - 1) * this.spacing;
        if (availableSize < 0) {
            return 0;
        }
        return availableSize;
    }
    /**
     * Update a view container part that has been collapsed or expanded. The transition
     * to the new state is animated.
     */
    updateCollapsed(part, enableAnimation) {
        const index = this.items.findIndex(item => item.widget === part);
        if (index < 0 || !this.parent || part.isHidden) {
            return;
        }
        // Do not store the height of the "stretched item". Otherwise, we mess up the "hint height".
        // Store the height only if there are other expanded items.
        const currentSize = this.orientation === 'horizontal' ? part.node.offsetWidth : part.node.offsetHeight;
        if (part.collapsed && this.items.some(item => !item.widget.collapsed && !item.widget.isHidden)) {
            part.uncollapsedSize = currentSize;
        }
        if (!enableAnimation || this.options.animationDuration <= 0) {
            widgets_1.MessageLoop.postMessage(this.parent, widgets_1.Widget.Msg.FitRequest);
            return;
        }
        let startTime = undefined;
        const duration = this.options.animationDuration;
        const direction = part.collapsed ? 'collapse' : 'expand';
        let fullSize;
        if (direction === 'collapse') {
            fullSize = currentSize - this.options.headerSize;
        }
        else {
            fullSize = Math.max((part.uncollapsedSize || 0) - this.options.headerSize, part.minSize);
            if (this.items.filter(item => !item.widget.collapsed && !item.widget.isHidden).length === 1) {
                // Expand to full available size
                fullSize = Math.max(fullSize, this.getAvailableSize());
            }
        }
        // The update function is called on every animation frame until the predefined duration has elapsed.
        const updateFunc = (time) => {
            if (!this.parent) {
                part.animatedSize = undefined;
                return;
            }
            if (startTime === undefined) {
                startTime = time;
            }
            if (time - startTime < duration) {
                // Render an intermediate state for the animation
                const t = this.tween((time - startTime) / duration);
                if (direction === 'collapse') {
                    part.animatedSize = (1 - t) * fullSize;
                }
                else {
                    part.animatedSize = t * fullSize;
                }
                requestAnimationFrame(updateFunc);
            }
            else {
                // The animation is finished
                if (direction === 'collapse') {
                    part.animatedSize = undefined;
                }
                else {
                    part.animatedSize = fullSize;
                    // Request another frame to reset the part to variable size
                    requestAnimationFrame(() => {
                        part.animatedSize = undefined;
                        if (this.parent) {
                            widgets_1.MessageLoop.sendMessage(this.parent, widgets_1.Widget.Msg.FitRequest);
                        }
                    });
                }
            }
            widgets_1.MessageLoop.sendMessage(this.parent, widgets_1.Widget.Msg.FitRequest);
        };
        requestAnimationFrame(updateFunc);
    }
    updateSashes() {
        const { widgets, handles } = this;
        if (widgets.length !== handles.length) {
            console.warn('Unexpected mismatch between number of widgets and number of handles.');
            return;
        }
        const firstUncollapsed = this.getFirstUncollapsedWidgetIndex();
        const lastUncollapsed = firstUncollapsed === undefined ? undefined : this.getLastUncollapsedWidgetIndex();
        const allHidden = firstUncollapsed === lastUncollapsed;
        for (const [index, handle] of this.handles.entries()) {
            // The or clauses are added for type checking. If they're true, allHidden will also have been true.
            if (allHidden || firstUncollapsed === undefined || lastUncollapsed === undefined) {
                handle.classList.add('sash-hidden');
            }
            else if (index < lastUncollapsed && index >= firstUncollapsed) {
                handle.classList.remove('sash-hidden');
            }
            else {
                handle.classList.add('sash-hidden');
            }
        }
    }
    getFirstUncollapsedWidgetIndex() {
        const index = this.widgets.findIndex(widget => !widget.collapsed && !widget.isHidden);
        return index === -1 ? undefined : index;
    }
    getLastUncollapsedWidgetIndex() {
        for (let i = this.widgets.length - 1; i >= 0; i--) {
            if (!this.widgets[i].collapsed && !this.widgets[i].isHidden) {
                return i;
            }
        }
    }
    onFitRequest(msg) {
        for (const part of this.widgets) {
            const style = part.node.style;
            if (part.animatedSize !== undefined) {
                // The part size has been fixed for animating the transition to collapsed / expanded state
                const fixedSize = `${this.options.headerSize + part.animatedSize}px`;
                style.minHeight = fixedSize;
                style.maxHeight = fixedSize;
            }
            else if (part.collapsed) {
                // The part size is fixed to the header size
                const fixedSize = `${this.options.headerSize}px`;
                style.minHeight = fixedSize;
                style.maxHeight = fixedSize;
            }
            else {
                const minSize = `${this.options.headerSize + part.minSize}px`;
                style.minHeight = minSize;
                style.maxHeight = '';
            }
        }
        super.onFitRequest(msg);
    }
    /**
     * Sinusoidal tween function for smooth animation.
     */
    tween(t) {
        return 0.5 * (1 - Math.cos(Math.PI * t));
    }
    setHandlePosition(index, position) {
        const options = {
            referenceWidget: this.widgets[index],
            duration: 0
        };
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        return this.splitPositionHandler.setSplitHandlePosition(this.parent, index, position, options);
    }
}
exports.ViewContainerLayout = ViewContainerLayout;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/widget-decoration.js":
/*!***********************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/widget-decoration.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2019 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.WidgetDecoration = void 0;
/**
 * Namespace for the decoration data and the styling refinements for the decorated widgets.
 */
var WidgetDecoration;
(function (WidgetDecoration) {
    /**
     * CSS styles for the decorators.
     */
    let Styles;
    (function (Styles) {
        Styles.CAPTION_HIGHLIGHT_CLASS = 'theia-caption-highlight';
        Styles.CAPTION_PREFIX_CLASS = 'theia-caption-prefix';
        Styles.CAPTION_SUFFIX_CLASS = 'theia-caption-suffix';
        Styles.ICON_WRAPPER_CLASS = 'theia-icon-wrapper';
        Styles.DECORATOR_SIZE_CLASS = 'theia-decorator-size';
        Styles.DECORATOR_SIDEBAR_SIZE_CLASS = 'theia-decorator-sidebar-size';
        Styles.TOP_RIGHT_CLASS = 'theia-top-right';
        Styles.BOTTOM_RIGHT_CLASS = 'theia-bottom-right';
        Styles.BOTTOM_RIGHT_SIDEBAR_CLASS = 'theia-bottom-right-sidebar';
        Styles.BOTTOM_LEFT_CLASS = 'theia-bottom-left';
        Styles.TOP_LEFT_CLASS = 'theia-top-left';
    })(Styles = WidgetDecoration.Styles || (WidgetDecoration.Styles = {}));
    let TailDecoration;
    (function (TailDecoration) {
        function isDotDecoration(decoration) {
            return decoration.icon === 'circle';
        }
        TailDecoration.isDotDecoration = isDotDecoration;
    })(TailDecoration = WidgetDecoration.TailDecoration || (WidgetDecoration.TailDecoration = {}));
    /**
     * Enumeration for the quadrant to overlay the image on.
     */
    let IconOverlayPosition;
    (function (IconOverlayPosition) {
        /**
         * Overlays the top right quarter of the original image.
         */
        IconOverlayPosition[IconOverlayPosition["TOP_RIGHT"] = 0] = "TOP_RIGHT";
        /**
         * Overlays the bottom right of the original image.
         */
        IconOverlayPosition[IconOverlayPosition["BOTTOM_RIGHT"] = 1] = "BOTTOM_RIGHT";
        /**
         * Overlays the bottom left segment of the original image.
         */
        IconOverlayPosition[IconOverlayPosition["BOTTOM_LEFT"] = 2] = "BOTTOM_LEFT";
        /**
         * Occupies the top left quarter of the original icon.
         */
        IconOverlayPosition[IconOverlayPosition["TOP_LEFT"] = 3] = "TOP_LEFT";
    })(IconOverlayPosition = WidgetDecoration.IconOverlayPosition || (WidgetDecoration.IconOverlayPosition = {}));
    (function (IconOverlayPosition) {
        /**
         * Returns with the CSS class style for the enum.
         */
        function getStyle(position, inSideBar) {
            switch (position) {
                case IconOverlayPosition.TOP_RIGHT:
                    return WidgetDecoration.Styles.TOP_RIGHT_CLASS;
                case IconOverlayPosition.BOTTOM_RIGHT:
                    return inSideBar ? WidgetDecoration.Styles.BOTTOM_RIGHT_SIDEBAR_CLASS : WidgetDecoration.Styles.BOTTOM_RIGHT_CLASS;
                case IconOverlayPosition.BOTTOM_LEFT:
                    return WidgetDecoration.Styles.BOTTOM_LEFT_CLASS;
                case IconOverlayPosition.TOP_LEFT:
                    return WidgetDecoration.Styles.TOP_LEFT_CLASS;
            }
        }
        IconOverlayPosition.getStyle = getStyle;
    })(IconOverlayPosition = WidgetDecoration.IconOverlayPosition || (WidgetDecoration.IconOverlayPosition = {}));
    let CaptionHighlight;
    (function (CaptionHighlight) {
        let Range;
        (function (Range) {
            /**
             * `true` if the `arg` is contained in the range. The ranges are closed ranges, hence the check is inclusive.
             */
            function contains(arg, range) {
                return arg >= range.offset && arg <= (range.offset + range.length);
            }
            Range.contains = contains;
        })(Range = CaptionHighlight.Range || (CaptionHighlight.Range = {}));
        /**
         * Splits the `caption` argument based on the ranges from the `highlight` argument.
         */
        function split(caption, highlight) {
            const result = [];
            const ranges = highlight.ranges.slice();
            const containerOf = (index) => ranges.findIndex(range => Range.contains(index, range));
            let data = '';
            for (let i = 0; i < caption.length; i++) {
                const containerIndex = containerOf(i);
                if (containerIndex === -1) {
                    data += caption[i];
                }
                else {
                    if (data.length > 0) {
                        result.push({ data });
                    }
                    const { length } = ranges.splice(containerIndex, 1).shift();
                    result.push({ data: caption.substring(i, i + length), highlight: true });
                    data = '';
                    i = i + length - 1;
                }
            }
            if (data.length > 0) {
                result.push({ data });
            }
            if (ranges.length !== 0) {
                throw new Error('Error occurred when splitting the caption. There was a mismatch between the caption and the corresponding highlighting ranges.');
            }
            return result;
        }
        CaptionHighlight.split = split;
    })(CaptionHighlight = WidgetDecoration.CaptionHighlight || (WidgetDecoration.CaptionHighlight = {}));
    let Data;
    (function (Data) {
        /**
         * Compares the decoration data based on the priority. Lowest priorities come first (i.e. left.priority - right.priority).
         */
        Data.comparePriority = (left, right) => (left.priority || 0) - (right.priority || 0);
    })(Data = WidgetDecoration.Data || (WidgetDecoration.Data = {}));
})(WidgetDecoration = exports.WidgetDecoration || (exports.WidgetDecoration = {}));


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/widget-manager.js":
/*!********************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/widget-manager.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2017 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.WidgetManager = exports.WidgetFactory = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/es/inversify.js");
const widgets_1 = __webpack_require__(/*! @phosphor/widgets */ "../node_modules/@phosphor/widgets/lib/index.js");
const common_1 = __webpack_require__(/*! ../common */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/index.js");
const stableJsonStringify = __webpack_require__(/*! fast-json-stable-stringify */ "../node_modules/fast-json-stable-stringify/index.js");
/* eslint-disable @typescript-eslint/no-explicit-any */
exports.WidgetFactory = Symbol('WidgetFactory');
/**
 * The {@link WidgetManager} is the common component responsible for creating and managing widgets. Additional widget factories
 * can be registered by using the {@link WidgetFactory} contribution point. To identify a widget, created by a factory, the factory id and
 * the creation options are used. This key is commonly referred to as `description` of the widget.
 */
let WidgetManager = class WidgetManager {
    constructor() {
        this.widgets = new Map();
        this.pendingWidgetPromises = new Map();
        this.onWillCreateWidgetEmitter = new common_1.Emitter();
        /**
         * An event can be used to participate in the widget creation.
         * Listeners may not dispose the given widget.
         */
        this.onWillCreateWidget = this.onWillCreateWidgetEmitter.event;
        this.onDidCreateWidgetEmitter = new common_1.Emitter();
        this.onDidCreateWidget = this.onDidCreateWidgetEmitter.event;
    }
    /**
     * Get the list of widgets created by the given widget factory.
     * @param factoryId the widget factory id.
     *
     * @returns the list of widgets created by the factory with the given id.
     */
    getWidgets(factoryId) {
        const result = [];
        for (const [key, widget] of this.widgets.entries()) {
            if (this.fromKey(key).factoryId === factoryId) {
                result.push(widget);
            }
        }
        return result;
    }
    /**
     * Try to get the existing widget for the given description.
     * @param factoryId The widget factory id.
     * @param options The widget factory specific information.
     *
     * @returns the widget if available, else `undefined`.
     *
     * The widget is 'available' if it has been created with the same {@link factoryId} and {@link options} by the {@link WidgetManager}.
     * If the widget's creation is asynchronous, it is only available when the associated `Promise` is resolved.
     */
    tryGetWidget(factoryId, options) {
        const key = this.toKey({ factoryId, options });
        const existing = this.widgets.get(key);
        if (existing instanceof widgets_1.Widget) {
            return existing;
        }
        return undefined;
    }
    /**
     * Try to get the existing widget for the given description.
     * @param factoryId The widget factory id.
     * @param options The widget factory specific information.
     *
     * @returns A promise that resolves to the widget, if any exists. The promise may be pending, so be cautious when assuming that it will not reject.
     */
    tryGetPendingWidget(factoryId, options) {
        const key = this.toKey({ factoryId, options });
        return this.doGetWidget(key);
    }
    /**
     * Get the widget for the given description.
     * @param factoryId The widget factory id.
     * @param options The widget factory specific information.
     *
     * @returns a promise resolving to the widget if available, else `undefined`.
     */
    async getWidget(factoryId, options) {
        const key = this.toKey({ factoryId, options });
        const pendingWidget = this.doGetWidget(key);
        const widget = pendingWidget && await pendingWidget;
        return widget;
    }
    /**
     * Finds a widget that matches the given test predicate.
     * @param factoryId The widget factory id.
     * @param predicate The test predicate.
     *
     * @returns a promise resolving to the widget if available, else `undefined`.
     */
    async findWidget(factoryId, predicate) {
        for (const [key, widget] of this.widgets.entries()) {
            if (this.testPredicate(key, factoryId, predicate)) {
                return widget;
            }
        }
        for (const [key, widget] of this.pendingWidgetPromises.entries()) {
            if (this.testPredicate(key, factoryId, predicate)) {
                return widget;
            }
        }
    }
    testPredicate(key, factoryId, predicate) {
        const constructionOptions = this.fromKey(key);
        return constructionOptions.factoryId === factoryId && predicate(constructionOptions.options);
    }
    doGetWidget(key) {
        var _a;
        const pendingWidget = (_a = this.widgets.get(key)) !== null && _a !== void 0 ? _a : this.pendingWidgetPromises.get(key);
        if (pendingWidget) {
            return pendingWidget;
        }
        return undefined;
    }
    /**
     * Creates a new widget or returns the existing widget for the given description.
     * @param factoryId the widget factory id.
     * @param options the widget factory specific information.
     *
     * @returns a promise resolving to the widget.
     */
    async getOrCreateWidget(factoryId, options) {
        const key = this.toKey({ factoryId, options });
        const existingWidget = this.doGetWidget(key);
        if (existingWidget) {
            return existingWidget;
        }
        const factory = this.factories.get(factoryId);
        if (!factory) {
            throw Error("No widget factory '" + factoryId + "' has been registered.");
        }
        try {
            const widgetPromise = factory.createWidget(options);
            this.pendingWidgetPromises.set(key, widgetPromise);
            const widget = await widgetPromise;
            await common_1.WaitUntilEvent.fire(this.onWillCreateWidgetEmitter, { factoryId, widget });
            this.widgets.set(key, widget);
            widget.disposed.connect(() => this.widgets.delete(key));
            this.onDidCreateWidgetEmitter.fire({ factoryId, widget });
            return widget;
        }
        finally {
            this.pendingWidgetPromises.delete(key);
        }
    }
    /**
     * Get the widget construction options.
     * @param widget the widget.
     *
     * @returns the widget construction options if the widget was created through the manager, else `undefined`.
     */
    getDescription(widget) {
        for (const [key, aWidget] of this.widgets.entries()) {
            if (aWidget === widget) {
                return this.fromKey(key);
            }
        }
        return undefined;
    }
    /**
     * Convert the widget construction options to string.
     * @param options the widget construction options.
     *
     * @returns the widget construction options represented as a string.
     */
    toKey(options) {
        return stableJsonStringify(options);
    }
    /**
     * Convert the key into the widget construction options object.
     * @param key the key.
     *
     * @returns the widget construction options object.
     */
    fromKey(key) {
        return JSON.parse(key);
    }
    get factories() {
        if (!this._cachedFactories) {
            this._cachedFactories = new Map();
            for (const factory of this.factoryProvider.getContributions()) {
                if (factory.id) {
                    this._cachedFactories.set(factory.id, factory);
                }
                else {
                    this.logger.error('Invalid ID for factory: ' + factory + ". ID was: '" + factory.id + "'.");
                }
            }
        }
        return this._cachedFactories;
    }
};
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(common_1.ContributionProvider),
    (0, inversify_1.named)(exports.WidgetFactory),
    (0, tslib_1.__metadata)("design:type", Object)
], WidgetManager.prototype, "factoryProvider", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(common_1.ILogger),
    (0, tslib_1.__metadata)("design:type", Object)
], WidgetManager.prototype, "logger", void 0);
WidgetManager = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)()
], WidgetManager);
exports.WidgetManager = WidgetManager;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/widget-open-handler.js":
/*!*************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/widget-open-handler.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.WidgetOpenHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/es/inversify.js");
const common_1 = __webpack_require__(/*! ../common */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/index.js");
const shell_1 = __webpack_require__(/*! ./shell */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/shell/index.js");
const widget_manager_1 = __webpack_require__(/*! ./widget-manager */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/widget-manager.js");
/**
 * Generic base class for {@link OpenHandler}s that are opening a widget for a given {@link URI}.
 */
let WidgetOpenHandler = class WidgetOpenHandler {
    constructor() {
        this.onCreatedEmitter = new common_1.Emitter();
        /**
         * Emit when a new widget is created.
         */
        this.onCreated = this.onCreatedEmitter.event;
    }
    init() {
        this.widgetManager.onDidCreateWidget(({ factoryId, widget }) => {
            if (factoryId === this.id) {
                this.onCreatedEmitter.fire(widget);
            }
        });
    }
    /**
     * Open a widget for the given uri and options.
     * Reject if the given options are not widget options or a widget cannot be opened.
     * @param uri the uri of the resource that should be opened.
     * @param options the widget opener options.
     *
     * @returns promise of the widget that resolves when the widget has been opened.
     */
    async open(uri, options) {
        const widget = await this.getOrCreateWidget(uri, options);
        await this.doOpen(widget, options);
        return widget;
    }
    async doOpen(widget, options) {
        const op = {
            mode: 'activate',
            ...options
        };
        if (!widget.isAttached) {
            this.shell.addWidget(widget, op.widgetOptions || { area: 'main' });
        }
        if (op.mode === 'activate') {
            await this.shell.activateWidget(widget.id);
        }
        else if (op.mode === 'reveal') {
            await this.shell.revealWidget(widget.id);
        }
    }
    /**
     * Tries to get an existing widget for the given uri.
     * @param uri the uri of the widget.
     *
     * @returns a promise that resolves to the existing widget or `undefined` if no widget for the given uri exists.
     */
    getByUri(uri) {
        return this.getWidget(uri);
    }
    /**
     * Return an existing widget for the given uri or creates a new one.
     *
     * It does not open a widget, use {@link WidgetOpenHandler#open} instead.
     * @param uri uri of the widget.
     *
     * @returns a promise of the existing or newly created widget.
     */
    getOrCreateByUri(uri) {
        return this.getOrCreateWidget(uri);
    }
    /**
     * Retrieves all open widgets that have been opened by this handler.
     *
     * @returns all open widgets for this open handler.
     */
    get all() {
        return this.widgetManager.getWidgets(this.id);
    }
    tryGetPendingWidget(uri, options) {
        const factoryOptions = this.createWidgetOptions(uri, options);
        return this.widgetManager.tryGetPendingWidget(this.id, factoryOptions);
    }
    getWidget(uri, options) {
        const widgetOptions = this.createWidgetOptions(uri, options);
        return this.widgetManager.getWidget(this.id, widgetOptions);
    }
    getOrCreateWidget(uri, options) {
        const widgetOptions = this.createWidgetOptions(uri, options);
        return this.widgetManager.getOrCreateWidget(this.id, widgetOptions);
    }
    /**
     * Closes all widgets that have been opened by this open handler.
     * @param options the close options that should be applied to all widgets.
     *
     * @returns a promise of all closed widgets that resolves after they have been closed.
     */
    async closeAll(options) {
        return this.shell.closeMany(this.all, options);
    }
};
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(shell_1.ApplicationShell),
    (0, tslib_1.__metadata)("design:type", shell_1.ApplicationShell)
], WidgetOpenHandler.prototype, "shell", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(widget_manager_1.WidgetManager),
    (0, tslib_1.__metadata)("design:type", widget_manager_1.WidgetManager)
], WidgetOpenHandler.prototype, "widgetManager", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.postConstruct)(),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", []),
    (0, tslib_1.__metadata)("design:returntype", void 0)
], WidgetOpenHandler.prototype, "init", null);
WidgetOpenHandler = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)()
], WidgetOpenHandler);
exports.WidgetOpenHandler = WidgetOpenHandler;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/widgets/enhanced-preview-widget.js":
/*!*************************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/widgets/enhanced-preview-widget.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2023 STMicroelectronics and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.EnhancedPreviewWidget = void 0;
const common_1 = __webpack_require__(/*! ../../common */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/index.js");
var EnhancedPreviewWidget;
(function (EnhancedPreviewWidget) {
    function is(arg) {
        return (0, common_1.isObject)(arg) && (0, common_1.isFunction)(arg.getEnhancedPreviewNode);
    }
    EnhancedPreviewWidget.is = is;
})(EnhancedPreviewWidget = exports.EnhancedPreviewWidget || (exports.EnhancedPreviewWidget = {}));


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/widgets/extractable-widget.js":
/*!********************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/widgets/extractable-widget.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2022 STMicroelectronics, Ericsson, ARM, EclipseSource and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ExtractableWidget = void 0;
const widget_1 = __webpack_require__(/*! ./widget */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/widgets/widget.js");
var ExtractableWidget;
(function (ExtractableWidget) {
    function is(widget) {
        return widget instanceof widget_1.Widget && widget.hasOwnProperty('isExtractable') && widget.isExtractable === true;
    }
    ExtractableWidget.is = is;
})(ExtractableWidget = exports.ExtractableWidget || (exports.ExtractableWidget = {}));


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/widgets/index.js":
/*!*******************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/widgets/index.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2017 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./widget */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/widgets/widget.js"), exports);
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./react-renderer */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/widgets/react-renderer.js"), exports);
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./react-widget */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/widgets/react-widget.js"), exports);
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./extractable-widget */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/widgets/extractable-widget.js"), exports);


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/widgets/previewable-widget.js":
/*!********************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/widgets/previewable-widget.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2023 STMicroelectronics and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PreviewableWidget = void 0;
const common_1 = __webpack_require__(/*! ../../common */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/index.js");
var PreviewableWidget;
(function (PreviewableWidget) {
    function is(arg) {
        return (0, common_1.isObject)(arg) && (0, common_1.isFunction)(arg.getPreviewNode);
    }
    PreviewableWidget.is = is;
    function isPreviewable(arg) {
        return (0, common_1.isObject)(arg) && (0, common_1.isFunction)(arg.getPreviewNode) && arg.loaded === true;
    }
    PreviewableWidget.isPreviewable = isPreviewable;
})(PreviewableWidget = exports.PreviewableWidget || (exports.PreviewableWidget = {}));


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/widgets/react-renderer.js":
/*!****************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/widgets/react-renderer.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ReactRenderer = exports.RendererHost = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/es/inversify.js");
const React = __webpack_require__(/*! react */ "../node_modules/react/index.js");
const client_1 = __webpack_require__(/*! react-dom/client */ "../node_modules/react-dom/client.js");
const common_1 = __webpack_require__(/*! ../../common */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/index.js");
exports.RendererHost = Symbol('RendererHost');
let ReactRenderer = class ReactRenderer {
    constructor(host) {
        this.toDispose = new common_1.DisposableCollection();
        this.host = host || document.createElement('div');
        this.hostRoot = (0, client_1.createRoot)(this.host);
        this.toDispose.push(common_1.Disposable.create(() => this.hostRoot.unmount()));
    }
    dispose() {
        this.toDispose.dispose();
    }
    render() {
        this.hostRoot.render(React.createElement(React.Fragment, null, this.doRender()));
    }
    doRender() {
        return undefined;
    }
};
ReactRenderer = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)(),
    (0, tslib_1.__param)(0, (0, inversify_1.inject)(exports.RendererHost)),
    (0, tslib_1.__param)(0, (0, inversify_1.optional)()),
    (0, tslib_1.__metadata)("design:paramtypes", [Object])
], ReactRenderer);
exports.ReactRenderer = ReactRenderer;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/widgets/react-widget.js":
/*!**************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/widgets/react-widget.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ReactWidget = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
const React = __webpack_require__(/*! react */ "../node_modules/react/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/es/inversify.js");
const common_1 = __webpack_require__(/*! ../../common */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/index.js");
const widget_1 = __webpack_require__(/*! ./widget */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/widgets/widget.js");
const widgets_1 = __webpack_require__(/*! @phosphor/widgets */ "../node_modules/@phosphor/widgets/lib/index.js");
const client_1 = __webpack_require__(/*! react-dom/client */ "../node_modules/react-dom/client.js");
let ReactWidget = class ReactWidget extends widget_1.BaseWidget {
    constructor(options) {
        super(options);
        this.scrollOptions = {
            suppressScrollX: true,
            minScrollbarLength: 35,
        };
        this.nodeRoot = (0, client_1.createRoot)(this.node);
        this.toDispose.push(common_1.Disposable.create(() => this.nodeRoot.unmount()));
    }
    onUpdateRequest(msg) {
        super.onUpdateRequest(msg);
        this.nodeRoot.render(React.createElement(React.Fragment, null, this.render()));
    }
};
ReactWidget = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)(),
    (0, tslib_1.__param)(0, (0, inversify_1.unmanaged)()),
    (0, tslib_1.__metadata)("design:paramtypes", [Object])
], ReactWidget);
exports.ReactWidget = ReactWidget;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/widgets/select-component.js":
/*!******************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/widgets/select-component.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2022 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SelectComponent = exports.SELECT_COMPONENT_CONTAINER = void 0;
const React = __webpack_require__(/*! react */ "../node_modules/react/index.js");
const ReactDOM = __webpack_require__(/*! react-dom */ "../node_modules/react-dom/index.js");
const DOMPurify = __webpack_require__(/*! dompurify */ "../node_modules/dompurify/dist/purify.js");
const widget_1 = __webpack_require__(/*! ./widget */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/widgets/widget.js");
const browser_1 = __webpack_require__(/*! ../browser */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/browser.js");
__webpack_require__(/*! ../../../src/browser/style/select-component.css */ "../node_modules/@theia/editor/node_modules/@theia/core/src/browser/style/select-component.css");
exports.SELECT_COMPONENT_CONTAINER = 'select-component-container';
class SelectComponent extends React.Component {
    constructor(props) {
        super(props);
        this.fieldRef = React.createRef();
        this.dropdownRef = React.createRef();
        this.mountedListeners = new Map();
        this.optimalWidth = 0;
        this.optimalHeight = 0;
        let selected = 0;
        if (typeof props.defaultValue === 'number') {
            selected = props.defaultValue;
        }
        else if (typeof props.defaultValue === 'string') {
            selected = Math.max(props.options.findIndex(e => e.value === props.defaultValue), 0);
        }
        this.state = {
            selected,
            original: selected,
            hover: selected
        };
        let list = document.getElementById(exports.SELECT_COMPONENT_CONTAINER);
        if (!list) {
            list = document.createElement('div');
            list.id = exports.SELECT_COMPONENT_CONTAINER;
            list.className = 'theia-select-component-container';
            document.body.appendChild(list);
        }
        this.dropdownElement = list;
    }
    get options() {
        return this.props.options;
    }
    get value() {
        var _a;
        return (_a = this.props.options[this.state.selected].value) !== null && _a !== void 0 ? _a : this.state.selected;
    }
    set value(value) {
        let index = -1;
        if (typeof value === 'number') {
            index = value;
        }
        else if (typeof value === 'string') {
            index = this.props.options.findIndex(e => e.value === value);
        }
        if (index >= 0) {
            this.setState({
                selected: index,
                original: index,
                hover: index
            });
        }
    }
    get alignLeft() {
        return this.props.alignment !== 'right';
    }
    getOptimalWidth() {
        const textWidth = (0, browser_1.measureTextWidth)(this.props.options.map(e => e.label || e.value || '' + (e.detail || '')));
        return Math.ceil(textWidth + 16);
    }
    getOptimalHeight(maxWidth) {
        const firstLine = this.props.options.find(e => e.label || e.value || e.detail);
        if (!firstLine) {
            return 0;
        }
        if (maxWidth) {
            maxWidth = Math.ceil(maxWidth) + 10; // Increase width by 10 due to side padding
        }
        const descriptionHeight = (0, browser_1.measureTextHeight)(this.props.options.map(e => e.description || ''), { maxWidth: `${maxWidth}px` }) + 18;
        const singleLineHeight = (0, browser_1.measureTextHeight)(firstLine.label || firstLine.value || firstLine.detail || '') + 6;
        const optimal = descriptionHeight + singleLineHeight * this.props.options.length;
        return optimal + 20; // Just to be safe, add another 20 pixels here
    }
    attachListeners() {
        var _a;
        const hide = (event) => {
            var _a;
            if (!((_a = this.dropdownRef.current) === null || _a === void 0 ? void 0 : _a.contains(event.target))) {
                this.hide();
            }
        };
        this.mountedListeners.set('scroll', hide);
        this.mountedListeners.set('wheel', hide);
        let parent = (_a = this.fieldRef.current) === null || _a === void 0 ? void 0 : _a.parentElement;
        while (parent) {
            // Workaround for perfect scrollbar, since using `overflow: hidden`
            // neither triggers the `scroll`, `wheel` nor `blur` event
            if (parent.classList.contains('ps')) {
                parent.addEventListener('ps-scroll-y', hide);
            }
            parent = parent.parentElement;
        }
        for (const [key, listener] of this.mountedListeners.entries()) {
            window.addEventListener(key, listener);
        }
    }
    componentWillUnmount() {
        var _a;
        if (this.mountedListeners.size > 0) {
            const eventListener = this.mountedListeners.get('scroll');
            let parent = (_a = this.fieldRef.current) === null || _a === void 0 ? void 0 : _a.parentElement;
            while (parent) {
                parent.removeEventListener('ps-scroll-y', eventListener);
                parent = parent.parentElement;
            }
            for (const [key, listener] of this.mountedListeners.entries()) {
                window.removeEventListener(key, listener);
            }
        }
    }
    render() {
        var _a, _b, _c, _d;
        const { options } = this.props;
        let { selected } = this.state;
        if ((_a = options[selected]) === null || _a === void 0 ? void 0 : _a.separator) {
            selected = this.nextNotSeparator('forwards');
        }
        const selectedItemLabel = (_c = (_b = options[selected]) === null || _b === void 0 ? void 0 : _b.label) !== null && _c !== void 0 ? _c : (_d = options[selected]) === null || _d === void 0 ? void 0 : _d.value;
        return React.createElement(React.Fragment, null,
            React.createElement("div", { key: "select-component", ref: this.fieldRef, tabIndex: 0, className: "theia-select-component", onClick: e => this.handleClickEvent(e), onBlur: () => {
                    var _a, _b;
                    this.hide();
                    (_b = (_a = this.props).onBlur) === null || _b === void 0 ? void 0 : _b.call(_a);
                }, onFocus: () => { var _a, _b; return (_b = (_a = this.props).onFocus) === null || _b === void 0 ? void 0 : _b.call(_a); }, onKeyDown: e => this.handleKeypress(e) },
                React.createElement("div", { key: "label", className: "theia-select-component-label" }, selectedItemLabel),
                React.createElement("div", { key: "icon", className: `theia-select-component-chevron ${(0, widget_1.codicon)('chevron-down')}` })),
            ReactDOM.createPortal(this.renderDropdown(), this.dropdownElement));
    }
    nextNotSeparator(direction) {
        var _a;
        const { options } = this.props;
        const step = direction === 'forwards' ? 1 : -1;
        const length = this.props.options.length;
        let selected = this.state.selected;
        let count = 0;
        do {
            selected = (selected + step) % length;
            if (selected < 0) {
                selected = length - 1;
            }
            count++;
        } while (((_a = options[selected]) === null || _a === void 0 ? void 0 : _a.separator) && count < length);
        return selected;
    }
    handleKeypress(ev) {
        if (!this.fieldRef.current) {
            return;
        }
        if (ev.key === 'ArrowUp') {
            const selected = this.nextNotSeparator('backwards');
            this.setState({
                selected,
                hover: selected
            });
        }
        else if (ev.key === 'ArrowDown') {
            if (this.state.dimensions) {
                const selected = this.nextNotSeparator('forwards');
                this.setState({
                    selected,
                    hover: selected
                });
            }
            else {
                this.toggleVisibility();
                this.setState({
                    selected: 0,
                    hover: 0,
                });
            }
        }
        else if (ev.key === 'Enter') {
            if (!this.state.dimensions) {
                this.toggleVisibility();
            }
            else {
                const selected = this.state.selected;
                this.selectOption(selected, this.props.options[selected]);
            }
        }
        else if (ev.key === 'Escape' || ev.key === 'Tab') {
            this.hide();
        }
        ev.stopPropagation();
        ev.nativeEvent.stopImmediatePropagation();
    }
    handleClickEvent(event) {
        this.toggleVisibility();
        event.stopPropagation();
        event.nativeEvent.stopImmediatePropagation();
    }
    toggleVisibility() {
        if (!this.fieldRef.current) {
            return;
        }
        if (!this.state.dimensions) {
            const rect = this.fieldRef.current.getBoundingClientRect();
            this.setState({ dimensions: rect });
        }
        else {
            this.hide();
        }
    }
    hide(index) {
        const selectedIndex = index === undefined ? this.state.original : index;
        this.setState({
            dimensions: undefined,
            selected: selectedIndex,
            original: selectedIndex,
            hover: selectedIndex
        });
    }
    renderDropdown() {
        if (!this.state.dimensions) {
            return;
        }
        const shellArea = document.getElementById('theia-app-shell').getBoundingClientRect();
        const maxWidth = this.alignLeft ? shellArea.width - this.state.dimensions.left : this.state.dimensions.right;
        if (this.mountedListeners.size === 0) {
            // Only attach our listeners once we render our dropdown menu
            this.attachListeners();
            // We can now also calculate the optimal width
            this.optimalWidth = this.getOptimalWidth();
            this.optimalHeight = this.getOptimalHeight(Math.max(this.state.dimensions.width, this.optimalWidth));
        }
        const availableTop = this.state.dimensions.top - shellArea.top;
        const availableBottom = shellArea.top + shellArea.height - this.state.dimensions.bottom;
        // prefer rendering to the bottom unless there is not enough space and more content can be shown to the top
        const invert = availableBottom < this.optimalHeight && (availableBottom - this.optimalHeight) < (availableTop - this.optimalHeight);
        const { options } = this.props;
        const { hover } = this.state;
        const description = options[hover].description;
        const markdown = options[hover].markdown;
        const items = options.map((item, i) => this.renderOption(i, item));
        if (description) {
            let descriptionNode;
            const className = 'theia-select-component-description';
            if (markdown) {
                descriptionNode = React.createElement("div", { key: "description", className: className, dangerouslySetInnerHTML: { __html: DOMPurify.sanitize(description) } }); // eslint-disable-line react/no-danger
            }
            else {
                descriptionNode = React.createElement("div", { key: "description", className: className }, description);
            }
            if (invert) {
                items.unshift(descriptionNode);
            }
            else {
                items.push(descriptionNode);
            }
        }
        return React.createElement("div", { key: "dropdown", className: "theia-select-component-dropdown", style: {
                top: invert ? 'none' : this.state.dimensions.bottom,
                bottom: invert ? shellArea.top + shellArea.height - this.state.dimensions.top : 'none',
                left: this.alignLeft ? this.state.dimensions.left : 'none',
                right: this.alignLeft ? 'none' : shellArea.width - this.state.dimensions.right,
                width: Math.min(Math.max(this.state.dimensions.width, this.optimalWidth), maxWidth),
                maxHeight: shellArea.height - (invert ? shellArea.height - this.state.dimensions.bottom : this.state.dimensions.top) - this.state.dimensions.height,
                position: 'absolute'
            }, ref: this.dropdownRef }, items);
    }
    renderOption(index, option) {
        var _a;
        if (option.separator) {
            return React.createElement("div", { key: index, className: "theia-select-component-separator" });
        }
        const selected = this.state.hover;
        return (React.createElement("div", { key: index, className: `theia-select-component-option${index === selected ? ' selected' : ''}`, onMouseOver: () => {
                this.setState({
                    hover: index
                });
            }, onMouseDown: () => {
                this.selectOption(index, option);
            } },
            React.createElement("div", { key: "value", className: "theia-select-component-option-value" }, (_a = option.label) !== null && _a !== void 0 ? _a : option.value),
            option.detail && React.createElement("div", { key: "detail", className: "theia-select-component-option-detail" }, option.detail)));
    }
    selectOption(index, option) {
        var _a, _b;
        (_b = (_a = this.props).onChange) === null || _b === void 0 ? void 0 : _b.call(_a, option, index);
        this.hide(index);
    }
}
exports.SelectComponent = SelectComponent;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/widgets/widget.js":
/*!********************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/widgets/widget.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2017 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.togglePinned = exports.unlock = exports.lock = exports.isLocked = exports.pin = exports.unpin = exports.isPinned = exports.waitForHidden = exports.waitForRevealed = exports.waitForClosed = exports.addClipboardListener = exports.addKeyListener = exports.addEventListener = exports.EventListenerObject = exports.createIconButton = exports.setEnabled = exports.BaseWidget = exports.UnsafeWidgetUtilities = exports.DEFAULT_SCROLL_OPTIONS = exports.LOCKED_CLASS = exports.PINNED_CLASS = exports.FOCUS_CLASS = exports.SELECTED_CLASS = exports.CODICON_LOADING_CLASSES = exports.BUSY_CLASS = exports.COLLAPSED_CLASS = exports.CODICON_TREE_ITEM_CLASSES = exports.EXPANSION_TOGGLE_CLASS = exports.DISABLED_CLASS = exports.codicon = exports.codiconArray = exports.ACTION_ITEM = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
/* eslint-disable @typescript-eslint/no-explicit-any */
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/es/inversify.js");
const widgets_1 = __webpack_require__(/*! @phosphor/widgets */ "../node_modules/@phosphor/widgets/lib/index.js");
const messaging_1 = __webpack_require__(/*! @phosphor/messaging */ "../node_modules/@phosphor/messaging/lib/index.js");
const common_1 = __webpack_require__(/*! ../../common */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/index.js");
const keys_1 = __webpack_require__(/*! ../keyboard/keys */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/keyboard/keys.js");
const perfect_scrollbar_1 = __webpack_require__(/*! perfect-scrollbar */ "../node_modules/perfect-scrollbar/dist/perfect-scrollbar.esm.js");
(0, inversify_1.decorate)((0, inversify_1.injectable)(), widgets_1.Widget);
(0, inversify_1.decorate)((0, inversify_1.unmanaged)(), widgets_1.Widget, 0);
(0, tslib_1.__exportStar)(__webpack_require__(/*! @phosphor/widgets */ "../node_modules/@phosphor/widgets/lib/index.js"), exports);
(0, tslib_1.__exportStar)(__webpack_require__(/*! @phosphor/messaging */ "../node_modules/@phosphor/messaging/lib/index.js"), exports);
exports.ACTION_ITEM = 'action-label';
function codiconArray(name, actionItem = false) {
    const array = ['codicon', `codicon-${name}`];
    if (actionItem) {
        array.push(exports.ACTION_ITEM);
    }
    return array;
}
exports.codiconArray = codiconArray;
function codicon(name, actionItem = false) {
    return `codicon codicon-${name}${actionItem ? ` ${exports.ACTION_ITEM}` : ''}`;
}
exports.codicon = codicon;
exports.DISABLED_CLASS = 'theia-mod-disabled';
exports.EXPANSION_TOGGLE_CLASS = 'theia-ExpansionToggle';
exports.CODICON_TREE_ITEM_CLASSES = codiconArray('chevron-down');
exports.COLLAPSED_CLASS = 'theia-mod-collapsed';
exports.BUSY_CLASS = 'theia-mod-busy';
exports.CODICON_LOADING_CLASSES = codiconArray('loading');
exports.SELECTED_CLASS = 'theia-mod-selected';
exports.FOCUS_CLASS = 'theia-mod-focus';
exports.PINNED_CLASS = 'theia-mod-pinned';
exports.LOCKED_CLASS = 'theia-mod-locked';
exports.DEFAULT_SCROLL_OPTIONS = {
    suppressScrollX: true,
    minScrollbarLength: 35,
};
/**
 * At a number of places in the code, we have effectively reimplemented Phosphor's Widget.attach and Widget.detach,
 * but omitted the checks that Phosphor expects to be performed for those operations. That is a bad idea, because it
 * means that we are telling widgets that they are attached or detached when not all the conditions that should apply
 * do apply. We should explicitly mark those locations so that we know where we should go fix them later.
 */
var UnsafeWidgetUtilities;
(function (UnsafeWidgetUtilities) {
    /**
     * Ordinarily, the following checks should be performed before detaching a widget:
     * It should not be the child of another widget
     * It should be attached and it should be a child of document.body
     */
    function detach(widget) {
        messaging_1.MessageLoop.sendMessage(widget, widgets_1.Widget.Msg.BeforeDetach);
        widget.node.remove();
        messaging_1.MessageLoop.sendMessage(widget, widgets_1.Widget.Msg.AfterDetach);
    }
    UnsafeWidgetUtilities.detach = detach;
    ;
    /**
     * @param ref The child of the host element to insert the widget before.
     * Ordinarily the following checks should be performed:
     * The widget should have no parent
     * The widget should not be attached, and its node should not be a child of document.body
     * The host should be a child of document.body
     * We often violate the last condition.
     */
    // eslint-disable-next-line no-null/no-null
    function attach(widget, host, ref = null) {
        messaging_1.MessageLoop.sendMessage(widget, widgets_1.Widget.Msg.BeforeAttach);
        host.insertBefore(widget.node, ref);
        messaging_1.MessageLoop.sendMessage(widget, widgets_1.Widget.Msg.AfterAttach);
    }
    UnsafeWidgetUtilities.attach = attach;
    ;
})(UnsafeWidgetUtilities = exports.UnsafeWidgetUtilities || (exports.UnsafeWidgetUtilities = {}));
let BaseWidget = class BaseWidget extends widgets_1.Widget {
    constructor(options) {
        super(options);
        this.onScrollYReachEndEmitter = new common_1.Emitter();
        this.onScrollYReachEnd = this.onScrollYReachEndEmitter.event;
        this.onScrollUpEmitter = new common_1.Emitter();
        this.onScrollUp = this.onScrollUpEmitter.event;
        this.onDidChangeVisibilityEmitter = new common_1.Emitter();
        this.onDidChangeVisibility = this.onDidChangeVisibilityEmitter.event;
        this.onDidDisposeEmitter = new common_1.Emitter();
        this.onDidDispose = this.onDidDisposeEmitter.event;
        this.toDispose = new common_1.DisposableCollection(this.onDidDisposeEmitter, common_1.Disposable.create(() => this.onDidDisposeEmitter.fire()), this.onScrollYReachEndEmitter, this.onScrollUpEmitter, this.onDidChangeVisibilityEmitter);
        this.toDisposeOnDetach = new common_1.DisposableCollection();
    }
    dispose() {
        if (this.isDisposed) {
            return;
        }
        super.dispose();
        this.toDispose.dispose();
    }
    onCloseRequest(msg) {
        super.onCloseRequest(msg);
        this.dispose();
    }
    onBeforeAttach(msg) {
        if (this.title.iconClass === '') {
            this.title.iconClass = 'no-icon';
        }
        super.onBeforeAttach(msg);
    }
    onAfterDetach(msg) {
        if (this.title.iconClass === 'no-icon') {
            this.title.iconClass = '';
        }
        super.onAfterDetach(msg);
    }
    onBeforeDetach(msg) {
        this.toDisposeOnDetach.dispose();
        super.onBeforeDetach(msg);
    }
    onAfterAttach(msg) {
        super.onAfterAttach(msg);
        if (this.scrollOptions) {
            (async () => {
                const container = await this.getScrollContainer();
                container.style.overflow = 'hidden';
                this.scrollBar = new perfect_scrollbar_1.default(container, this.scrollOptions);
                this.disableScrollBarFocus(container);
                this.toDisposeOnDetach.push(addEventListener(container, 'ps-y-reach-end', () => { this.onScrollYReachEndEmitter.fire(undefined); }));
                this.toDisposeOnDetach.push(addEventListener(container, 'ps-scroll-up', () => { this.onScrollUpEmitter.fire(undefined); }));
                this.toDisposeOnDetach.push(common_1.Disposable.create(() => {
                    if (this.scrollBar) {
                        this.scrollBar.destroy();
                        this.scrollBar = undefined;
                    }
                    container.style.overflow = 'initial';
                }));
            })();
        }
    }
    getScrollContainer() {
        return this.node;
    }
    disableScrollBarFocus(scrollContainer) {
        for (const thumbs of [scrollContainer.getElementsByClassName('ps__thumb-x'), scrollContainer.getElementsByClassName('ps__thumb-y')]) {
            for (let i = 0; i < thumbs.length; i++) {
                const element = thumbs.item(i);
                if (element) {
                    element.removeAttribute('tabIndex');
                }
            }
        }
    }
    onUpdateRequest(msg) {
        super.onUpdateRequest(msg);
        if (this.scrollBar) {
            this.scrollBar.update();
        }
    }
    addUpdateListener(element, type, useCapture) {
        this.addEventListener(element, type, e => {
            this.update();
            e.preventDefault();
        }, useCapture);
    }
    addEventListener(element, type, listener, useCapture) {
        this.toDisposeOnDetach.push(addEventListener(element, type, listener, useCapture));
    }
    addKeyListener(element, keysOrKeyCodes, action, ...additionalEventTypes) {
        this.toDisposeOnDetach.push(addKeyListener(element, keysOrKeyCodes, action, ...additionalEventTypes));
    }
    addClipboardListener(element, type, listener) {
        this.toDisposeOnDetach.push(addClipboardListener(element, type, listener));
    }
    getPreviewNode() {
        return this.node;
    }
    setFlag(flag) {
        super.setFlag(flag);
        if (flag === widgets_1.Widget.Flag.IsVisible) {
            this.onDidChangeVisibilityEmitter.fire(this.isVisible);
        }
    }
    clearFlag(flag) {
        super.clearFlag(flag);
        if (flag === widgets_1.Widget.Flag.IsVisible) {
            this.onDidChangeVisibilityEmitter.fire(this.isVisible);
        }
    }
};
BaseWidget = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)(),
    (0, tslib_1.__metadata)("design:paramtypes", [Object])
], BaseWidget);
exports.BaseWidget = BaseWidget;
function setEnabled(element, enabled) {
    element.classList.toggle(exports.DISABLED_CLASS, !enabled);
    element.tabIndex = enabled ? 0 : -1;
}
exports.setEnabled = setEnabled;
function createIconButton(...classNames) {
    const icon = document.createElement('i');
    icon.classList.add(...classNames);
    const button = document.createElement('span');
    button.tabIndex = 0;
    button.appendChild(icon);
    return button;
}
exports.createIconButton = createIconButton;
var EventListenerObject;
(function (EventListenerObject) {
    function is(listener) {
        return (0, common_1.isObject)(listener) && 'handleEvent' in listener;
    }
    EventListenerObject.is = is;
})(EventListenerObject = exports.EventListenerObject || (exports.EventListenerObject = {}));
function addEventListener(element, type, listener, useCapture) {
    element.addEventListener(type, listener, useCapture);
    return common_1.Disposable.create(() => element.removeEventListener(type, listener, useCapture));
}
exports.addEventListener = addEventListener;
function addKeyListener(element, keysOrKeyCodes, action, ...additionalEventTypes) {
    const toDispose = new common_1.DisposableCollection();
    const keyCodePredicate = (() => {
        if (typeof keysOrKeyCodes === 'function') {
            return keysOrKeyCodes;
        }
        else {
            return (actual) => keys_1.KeysOrKeyCodes.toKeyCodes(keysOrKeyCodes).some(k => k.equals(actual));
        }
    })();
    toDispose.push(addEventListener(element, 'keydown', e => {
        const kc = keys_1.KeyCode.createKeyCode(e);
        if (keyCodePredicate(kc)) {
            const result = action(e);
            if (typeof result !== 'boolean' || result) {
                e.stopPropagation();
                e.preventDefault();
            }
        }
    }));
    for (const type of additionalEventTypes) {
        toDispose.push(addEventListener(element, type, e => {
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            const event = type['keydown'];
            const result = action(event);
            if (typeof result !== 'boolean' || result) {
                e.stopPropagation();
                e.preventDefault();
            }
        }));
    }
    return toDispose;
}
exports.addKeyListener = addKeyListener;
function addClipboardListener(element, type, listener) {
    const documentListener = (e) => {
        const activeElement = document.activeElement;
        if (activeElement && element.contains(activeElement)) {
            if (EventListenerObject.is(listener)) {
                listener.handleEvent(e);
            }
            else {
                listener.bind(element)(e);
            }
        }
    };
    document.addEventListener(type, documentListener);
    return common_1.Disposable.create(() => document.removeEventListener(type, documentListener));
}
exports.addClipboardListener = addClipboardListener;
/**
 * Resolves when the given widget is detached and hidden.
 */
function waitForClosed(widget) {
    return waitForVisible(widget, false, false);
}
exports.waitForClosed = waitForClosed;
/**
 * Resolves when the given widget is attached and visible.
 */
function waitForRevealed(widget) {
    return waitForVisible(widget, true, true);
}
exports.waitForRevealed = waitForRevealed;
/**
 * Resolves when the given widget is hidden regardless of attachment.
 */
function waitForHidden(widget) {
    return waitForVisible(widget, false);
}
exports.waitForHidden = waitForHidden;
function waitForVisible(widget, visible, attached) {
    if ((typeof attached !== 'boolean' || widget.isAttached === attached) &&
        (widget.isVisible === visible || (widget.node.style.visibility !== 'hidden') === visible)) {
        return new Promise(resolve => window.requestAnimationFrame(() => resolve()));
    }
    return new Promise(resolve => {
        const waitFor = () => window.requestAnimationFrame(() => {
            if ((typeof attached !== 'boolean' || widget.isAttached === attached) &&
                (widget.isVisible === visible || (widget.node.style.visibility !== 'hidden') === visible)) {
                window.requestAnimationFrame(() => resolve());
            }
            else {
                waitFor();
            }
        });
        waitFor();
    });
}
function isPinned(title) {
    const pinnedState = !title.closable && title.className.includes(exports.PINNED_CLASS);
    return pinnedState;
}
exports.isPinned = isPinned;
function unpin(title) {
    title.closable = true;
    title.className = title.className.replace(exports.PINNED_CLASS, '').trim();
}
exports.unpin = unpin;
function pin(title) {
    title.closable = false;
    if (!title.className.includes(exports.PINNED_CLASS)) {
        title.className += ` ${exports.PINNED_CLASS}`;
    }
}
exports.pin = pin;
function isLocked(title) {
    return title.className.includes(exports.LOCKED_CLASS);
}
exports.isLocked = isLocked;
function lock(title) {
    if (!title.className.includes(exports.LOCKED_CLASS)) {
        title.className += ` ${exports.LOCKED_CLASS}`;
    }
}
exports.lock = lock;
function unlock(title) {
    title.className = title.className.replace(exports.LOCKED_CLASS, '').trim();
}
exports.unlock = unlock;
function togglePinned(title) {
    if (title) {
        if (isPinned(title)) {
            unpin(title);
        }
        else {
            pin(title);
        }
    }
}
exports.togglePinned = togglePinned;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/window/secondary-window-service.js":
/*!*************************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/window/secondary-window-service.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2022 STMicroelectronics, Ericsson, ARM, EclipseSource and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SecondaryWindowService = void 0;
exports.SecondaryWindowService = Symbol('SecondaryWindowService');


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/window/window-service.js":
/*!***************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/window/window-service.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2017 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.WindowService = void 0;
/**
 * Service for opening new browser windows.
 */
exports.WindowService = Symbol('WindowService');


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/application-error.js":
/*!**********************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/common/application-error.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ApplicationError = void 0;
var ApplicationError;
(function (ApplicationError) {
    const codes = new Set();
    function declare(code, factory) {
        if (codes.has(code)) {
            throw new Error(`An application error for '${code}' code is already declared`);
        }
        codes.add(code);
        const constructorOpt = Object.assign((...args) => new Impl(code, factory(...args), constructorOpt), {
            code,
            is(arg) {
                return arg instanceof Impl && arg.code === code;
            }
        });
        return constructorOpt;
    }
    ApplicationError.declare = declare;
    function is(arg) {
        return arg instanceof Impl;
    }
    ApplicationError.is = is;
    function fromJson(code, raw) {
        return new Impl(code, raw);
    }
    ApplicationError.fromJson = fromJson;
    class Impl extends Error {
        constructor(code, raw, constructorOpt) {
            super(raw.message);
            this.code = code;
            this.data = raw.data;
            Object.setPrototypeOf(this, Impl.prototype);
            if (raw.stack) {
                this.stack = raw.stack;
            }
            else if (Error.captureStackTrace && constructorOpt) {
                Error.captureStackTrace(this, constructorOpt);
            }
        }
        toJson() {
            const { message, data, stack } = this;
            return { message, data, stack };
        }
    }
})(ApplicationError = exports.ApplicationError || (exports.ApplicationError = {}));


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/application-protocol.js":
/*!*************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/common/application-protocol.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ApplicationServer = exports.applicationPath = void 0;
exports.applicationPath = '/services/application';
exports.ApplicationServer = Symbol('ApplicationServer');


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/array-utils.js":
/*!****************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/common/array-utils.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2023 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ArrayUtils = void 0;
var ArrayUtils;
(function (ArrayUtils) {
    ArrayUtils.TailImpl = {
        tail() {
            return this[this.length - 1];
        },
    };
    ArrayUtils.HeadAndChildrenImpl = {
        head() {
            return this[0];
        },
        children() {
            return Object.assign(this.slice(1), ArrayUtils.TailImpl);
        }
    };
    function asTail(array) {
        return Object.assign(array, ArrayUtils.TailImpl);
    }
    ArrayUtils.asTail = asTail;
    function asHeadAndTail(array) {
        return Object.assign(array, ArrayUtils.HeadAndChildrenImpl, ArrayUtils.TailImpl);
    }
    ArrayUtils.asHeadAndTail = asHeadAndTail;
    let Sort;
    (function (Sort) {
        Sort[Sort["LeftBeforeRight"] = -1] = "LeftBeforeRight";
        Sort[Sort["RightBeforeLeft"] = 1] = "RightBeforeLeft";
        Sort[Sort["Equal"] = 0] = "Equal";
    })(Sort = ArrayUtils.Sort || (ArrayUtils.Sort = {}));
    // Copied from https://github.com/microsoft/vscode/blob/9c29becfad5f68270b9b23efeafb147722c5feba/src/vs/base/common/arrays.ts
    /**
     * Performs a binary search algorithm over a sorted collection. Useful for cases
     * when we need to perform a binary search over something that isn't actually an
     * array, and converting data to an array would defeat the use of binary search
     * in the first place.
     *
     * @param length The collection length.
     * @param compareToKey A function that takes an index of an element in the
     *   collection and returns zero if the value at this index is equal to the
     *   search key, a negative number if the value precedes the search key in the
     *   sorting order, or a positive number if the search key precedes the value.
     * @return A non-negative index of an element, if found. If not found, the
     *   result is -(n+1) (or ~n, using bitwise notation), where n is the index
     *   where the key should be inserted to maintain the sorting order.
     */
    function binarySearch2(length, compareToKey) {
        let low = 0;
        let high = length - 1;
        while (low <= high) {
            const mid = ((low + high) / 2) | 0;
            const comp = compareToKey(mid);
            if (comp < 0) {
                low = mid + 1;
            }
            else if (comp > 0) {
                high = mid - 1;
            }
            else {
                return mid;
            }
        }
        return -(low + 1);
    }
    ArrayUtils.binarySearch2 = binarySearch2;
    function partition(array, filter) {
        const pass = [];
        const fail = [];
        array.forEach((e, idx, arr) => (filter(e, idx, arr) ? pass : fail).push(e));
        return [pass, fail];
    }
    ArrayUtils.partition = partition;
    /**
     * @returns New array with all falsy values removed. The original array IS NOT modified.
     */
    function coalesce(array) {
        return array.filter(e => !!e);
    }
    ArrayUtils.coalesce = coalesce;
    /**
     * groups array elements through a comparator function
     * @param data array of elements to group
     * @param compare comparator function: return of 0 means should group, anything above means not group
     * @returns array of arrays with grouped elements
     */
    function groupBy(data, compare) {
        const result = [];
        let currentGroup = undefined;
        for (const element of data.slice(0).sort(compare)) {
            if (!currentGroup || compare(currentGroup[0], element) !== 0) {
                currentGroup = [element];
                result.push(currentGroup);
            }
            else {
                currentGroup.push(element);
            }
        }
        return result;
    }
    ArrayUtils.groupBy = groupBy;
})(ArrayUtils = exports.ArrayUtils || (exports.ArrayUtils = {}));


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/buffer.js":
/*!***********************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/common/buffer.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ "../node_modules/buffer/index.js")["Buffer"];

// *****************************************************************************
// Copyright (C) 2020 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
// based on https://github.com/microsoft/vscode/blob/04c36be045a94fee58e5f8992d3e3fd980294a84/src/vs/base/common/buffer.ts
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BinaryBufferWriteableStream = exports.BinaryBufferReadableBufferedStream = exports.BinaryBufferReadableStream = exports.BinaryBufferReadable = exports.BinaryBuffer = void 0;
/* eslint-disable no-null/no-null */
const safer_buffer_1 = __webpack_require__(/*! safer-buffer */ "../node_modules/safer-buffer/safer.js");
const iconv = __webpack_require__(/*! iconv-lite */ "../node_modules/@theia/editor/node_modules/iconv-lite/lib/index.js");
const streams = __webpack_require__(/*! ./stream */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/stream.js");
const hasBuffer = (typeof Buffer !== 'undefined');
const hasTextEncoder = (typeof TextEncoder !== 'undefined');
const hasTextDecoder = (typeof TextDecoder !== 'undefined');
let textEncoder;
let textDecoder;
class BinaryBuffer {
    constructor(buffer) {
        this.buffer = buffer;
        this.byteLength = this.buffer.byteLength;
    }
    static alloc(byteLength) {
        if (hasBuffer) {
            return new BinaryBuffer(Buffer.allocUnsafe(byteLength));
        }
        else {
            return new BinaryBuffer(new Uint8Array(byteLength));
        }
    }
    static wrap(actual) {
        if (hasBuffer && !(Buffer.isBuffer(actual))) {
            // https://nodejs.org/dist/latest-v10.x/docs/api/buffer.html#buffer_class_method_buffer_from_arraybuffer_byteoffset_length
            // Create a zero-copy Buffer wrapper around the ArrayBuffer pointed to by the Uint8Array
            actual = Buffer.from(actual.buffer, actual.byteOffset, actual.byteLength);
        }
        return new BinaryBuffer(actual);
    }
    static fromString(source) {
        if (hasBuffer) {
            return new BinaryBuffer(Buffer.from(source));
        }
        else if (hasTextEncoder) {
            if (!textEncoder) {
                textEncoder = new TextEncoder();
            }
            return new BinaryBuffer(textEncoder.encode(source));
        }
        else {
            return new BinaryBuffer(iconv.encode(source, 'utf8'));
        }
    }
    static concat(buffers, totalLength) {
        if (typeof totalLength === 'undefined') {
            totalLength = 0;
            for (let i = 0, len = buffers.length; i < len; i++) {
                totalLength += buffers[i].byteLength;
            }
        }
        const ret = BinaryBuffer.alloc(totalLength);
        let offset = 0;
        for (let i = 0, len = buffers.length; i < len; i++) {
            const element = buffers[i];
            ret.set(element, offset);
            offset += element.byteLength;
        }
        return ret;
    }
    toString() {
        if (hasBuffer) {
            return this.buffer.toString();
        }
        else if (hasTextDecoder) {
            if (!textDecoder) {
                textDecoder = new TextDecoder();
            }
            return textDecoder.decode(this.buffer);
        }
        else {
            return iconv.decode(safer_buffer_1.Buffer.from(this.buffer), 'utf8');
        }
    }
    slice(start, end) {
        // IMPORTANT: use subarray instead of slice because TypedArray#slice
        // creates shallow copy and NodeBuffer#slice doesn't. The use of subarray
        // ensures the same, performant, behaviour.
        return new BinaryBuffer(this.buffer.subarray(start, end));
    }
    set(array, offset) {
        if (array instanceof BinaryBuffer) {
            this.buffer.set(array.buffer, offset);
        }
        else {
            this.buffer.set(array, offset);
        }
    }
    readUInt32BE(offset) {
        return (this.buffer[offset] * 2 ** 24
            + this.buffer[offset + 1] * 2 ** 16
            + this.buffer[offset + 2] * 2 ** 8
            + this.buffer[offset + 3]);
    }
    writeUInt32BE(value, offset) {
        this.buffer[offset + 3] = value;
        value = value >>> 8;
        this.buffer[offset + 2] = value;
        value = value >>> 8;
        this.buffer[offset + 1] = value;
        value = value >>> 8;
        this.buffer[offset] = value;
    }
    readUInt32LE(offset) {
        return (((this.buffer[offset + 0] << 0) >>> 0) |
            ((this.buffer[offset + 1] << 8) >>> 0) |
            ((this.buffer[offset + 2] << 16) >>> 0) |
            ((this.buffer[offset + 3] << 24) >>> 0));
    }
    writeUInt32LE(value, offset) {
        this.buffer[offset + 0] = (value & 0b11111111);
        value = value >>> 8;
        this.buffer[offset + 1] = (value & 0b11111111);
        value = value >>> 8;
        this.buffer[offset + 2] = (value & 0b11111111);
        value = value >>> 8;
        this.buffer[offset + 3] = (value & 0b11111111);
    }
    readUInt8(offset) {
        return this.buffer[offset];
    }
    writeUInt8(value, offset) {
        this.buffer[offset] = value;
    }
}
exports.BinaryBuffer = BinaryBuffer;
var BinaryBufferReadable;
(function (BinaryBufferReadable) {
    function toBuffer(readable) {
        return streams.consumeReadable(readable, chunks => BinaryBuffer.concat(chunks));
    }
    BinaryBufferReadable.toBuffer = toBuffer;
    function fromBuffer(buffer) {
        return streams.toReadable(buffer);
    }
    BinaryBufferReadable.fromBuffer = fromBuffer;
    function fromReadable(readable) {
        return {
            read() {
                const value = readable.read();
                if (typeof value === 'string') {
                    return BinaryBuffer.fromString(value);
                }
                return null;
            }
        };
    }
    BinaryBufferReadable.fromReadable = fromReadable;
})(BinaryBufferReadable = exports.BinaryBufferReadable || (exports.BinaryBufferReadable = {}));
var BinaryBufferReadableStream;
(function (BinaryBufferReadableStream) {
    function toBuffer(stream) {
        return streams.consumeStream(stream, chunks => BinaryBuffer.concat(chunks));
    }
    BinaryBufferReadableStream.toBuffer = toBuffer;
    function fromBuffer(buffer) {
        return streams.toStream(buffer, chunks => BinaryBuffer.concat(chunks));
    }
    BinaryBufferReadableStream.fromBuffer = fromBuffer;
})(BinaryBufferReadableStream = exports.BinaryBufferReadableStream || (exports.BinaryBufferReadableStream = {}));
var BinaryBufferReadableBufferedStream;
(function (BinaryBufferReadableBufferedStream) {
    async function toBuffer(bufferedStream) {
        if (bufferedStream.ended) {
            return BinaryBuffer.concat(bufferedStream.buffer);
        }
        return BinaryBuffer.concat([
            // Include already read chunks...
            ...bufferedStream.buffer,
            // ...and all additional chunks
            await BinaryBufferReadableStream.toBuffer(bufferedStream.stream)
        ]);
    }
    BinaryBufferReadableBufferedStream.toBuffer = toBuffer;
})(BinaryBufferReadableBufferedStream = exports.BinaryBufferReadableBufferedStream || (exports.BinaryBufferReadableBufferedStream = {}));
var BinaryBufferWriteableStream;
(function (BinaryBufferWriteableStream) {
    function create(options) {
        return streams.newWriteableStream(chunks => BinaryBuffer.concat(chunks), options);
    }
    BinaryBufferWriteableStream.create = create;
})(BinaryBufferWriteableStream = exports.BinaryBufferWriteableStream || (exports.BinaryBufferWriteableStream = {}));


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/cancellation.js":
/*!*****************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/common/cancellation.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2017 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation and others. All rights reserved.
 *  Licensed under the MIT License. See https://github.com/Microsoft/vscode/blob/master/LICENSE.txt for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.checkCancelled = exports.isCancelled = exports.cancelled = exports.CancellationTokenSource = exports.CancellationError = exports.CancellationToken = void 0;
const event_1 = __webpack_require__(/*! ./event */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/event.js");
const types_1 = __webpack_require__(/*! ./types */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/types.js");
// eslint-disable-next-line @typescript-eslint/no-explicit-any
const shortcutEvent = Object.freeze(Object.assign(function (callback, context) {
    const handle = setTimeout(callback.bind(context), 0);
    return { dispose() { clearTimeout(handle); } };
}, {
    get maxListeners() { return 0; },
    set maxListeners(maxListeners) { }
}));
var CancellationToken;
(function (CancellationToken) {
    CancellationToken.None = Object.freeze({
        isCancellationRequested: false,
        onCancellationRequested: event_1.Event.None
    });
    CancellationToken.Cancelled = Object.freeze({
        isCancellationRequested: true,
        onCancellationRequested: shortcutEvent
    });
    function is(value) {
        return (0, types_1.isObject)(value) && (value === CancellationToken.None
            || value === CancellationToken.Cancelled
            || ((0, types_1.isBoolean)(value.isCancellationRequested) && !!value.onCancellationRequested));
    }
    CancellationToken.is = is;
})(CancellationToken = exports.CancellationToken || (exports.CancellationToken = {}));
class CancellationError extends Error {
    constructor() {
        super('Canceled');
        this.name = this.message;
    }
}
exports.CancellationError = CancellationError;
class MutableToken {
    constructor() {
        this._isCancelled = false;
    }
    cancel() {
        if (!this._isCancelled) {
            this._isCancelled = true;
            if (this._emitter) {
                this._emitter.fire(undefined);
                this._emitter = undefined;
            }
        }
    }
    get isCancellationRequested() {
        return this._isCancelled;
    }
    get onCancellationRequested() {
        if (this._isCancelled) {
            return shortcutEvent;
        }
        if (!this._emitter) {
            this._emitter = new event_1.Emitter();
        }
        return this._emitter.event;
    }
    dispose() {
        if (this._emitter) {
            this._emitter.dispose();
            this._emitter = undefined;
        }
    }
}
class CancellationTokenSource {
    constructor(parent) {
        this._parentListener = undefined;
        this._parentListener = parent && parent.onCancellationRequested(this.cancel, this);
    }
    get token() {
        if (!this._token) {
            // be lazy and create the token only when
            // actually needed
            this._token = new MutableToken();
        }
        return this._token;
    }
    cancel() {
        if (!this._token) {
            // save an object by returning the default
            // cancelled token when cancellation happens
            // before someone asks for the token
            this._token = CancellationToken.Cancelled;
        }
        else if (this._token !== CancellationToken.Cancelled) {
            this._token.cancel();
        }
    }
    dispose() {
        var _a;
        this.cancel();
        (_a = this._parentListener) === null || _a === void 0 ? void 0 : _a.dispose();
        if (!this._token) {
            // ensure to initialize with an empty token if we had none
            this._token = CancellationToken.None;
        }
        else if (this._token instanceof MutableToken) {
            // actually dispose
            this._token.dispose();
        }
    }
}
exports.CancellationTokenSource = CancellationTokenSource;
const cancelledMessage = 'Cancelled';
function cancelled() {
    return new Error(cancelledMessage);
}
exports.cancelled = cancelled;
function isCancelled(err) {
    return !!err && err.message === cancelledMessage;
}
exports.isCancelled = isCancelled;
function checkCancelled(token) {
    if (!!token && token.isCancellationRequested) {
        throw cancelled();
    }
}
exports.checkCancelled = checkCancelled;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/color.js":
/*!**********************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/common/color.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2019 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Color = void 0;
var Color;
(function (Color) {
    function rgba(r, g, b, a = 1) {
        return { r, g, b, a };
    }
    Color.rgba = rgba;
    function hsla(h, s, l, a = 1) {
        return { h, s, l, a };
    }
    Color.hsla = hsla;
    Color.white = rgba(255, 255, 255, 1);
    Color.black = rgba(0, 0, 0, 1);
    function transparent(v, f) {
        return { v, f, kind: 'transparent' };
    }
    Color.transparent = transparent;
    function lighten(v, f) {
        return { v, f, kind: 'lighten' };
    }
    Color.lighten = lighten;
    function darken(v, f) {
        return { v, f, kind: 'darken' };
    }
    Color.darken = darken;
})(Color = exports.Color || (exports.Color = {}));


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/command.js":
/*!************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/common/command.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2017 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CommandRegistry = exports.CommandService = exports.commandServicePath = exports.CommandContribution = exports.Command = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/es/inversify.js");
const event_1 = __webpack_require__(/*! ./event */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/event.js");
const disposable_1 = __webpack_require__(/*! ./disposable */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/disposable.js");
const contribution_provider_1 = __webpack_require__(/*! ./contribution-provider */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/contribution-provider.js");
const nls_1 = __webpack_require__(/*! ./nls */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/nls.js");
const debounce = __webpack_require__(/*! p-debounce */ "../node_modules/p-debounce/index.js");
const types_1 = __webpack_require__(/*! ./types */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/types.js");
var Command;
(function (Command) {
    /* Determine whether object is a Command */
    function is(arg) {
        return (0, types_1.isObject)(arg) && 'id' in arg;
    }
    Command.is = is;
    /** Utility function to easily translate commands */
    function toLocalizedCommand(command, nlsLabelKey = command.id, nlsCategoryKey) {
        return {
            ...command,
            label: command.label && nls_1.nls.localize(nlsLabelKey, command.label),
            originalLabel: command.label,
            category: nlsCategoryKey && command.category && nls_1.nls.localize(nlsCategoryKey, command.category) || command.category,
            originalCategory: command.category,
        };
    }
    Command.toLocalizedCommand = toLocalizedCommand;
    function toDefaultLocalizedCommand(command) {
        return {
            ...command,
            label: command.label && nls_1.nls.localizeByDefault(command.label),
            originalLabel: command.label,
            category: command.category && nls_1.nls.localizeByDefault(command.category),
            originalCategory: command.category,
        };
    }
    Command.toDefaultLocalizedCommand = toDefaultLocalizedCommand;
    /** Comparator function for when sorting commands */
    function compareCommands(a, b) {
        if (a.label && b.label) {
            const aCommand = (a.category ? `${a.category}: ${a.label}` : a.label).toLowerCase();
            const bCommand = (b.category ? `${b.category}: ${b.label}` : b.label).toLowerCase();
            return (aCommand).localeCompare(bCommand);
        }
        else {
            return 0;
        }
    }
    Command.compareCommands = compareCommands;
    /**
     * Determine if two commands are equal.
     *
     * @param a the first command for comparison.
     * @param b the second command for comparison.
     */
    function equals(a, b) {
        return (a.id === b.id &&
            a.label === b.label &&
            a.iconClass === b.iconClass &&
            a.category === b.category);
    }
    Command.equals = equals;
})(Command = exports.Command || (exports.Command = {}));
exports.CommandContribution = Symbol('CommandContribution');
exports.commandServicePath = '/services/commands';
exports.CommandService = Symbol('CommandService');
/**
 * The command registry manages commands and handlers.
 */
let CommandRegistry = class CommandRegistry {
    constructor(contributionProvider) {
        this.contributionProvider = contributionProvider;
        this._commands = {};
        this._handlers = {};
        this.toUnregisterCommands = new Map();
        // List of recently used commands.
        this._recent = [];
        this.onWillExecuteCommandEmitter = new event_1.Emitter();
        this.onWillExecuteCommand = this.onWillExecuteCommandEmitter.event;
        this.onDidExecuteCommandEmitter = new event_1.Emitter();
        this.onDidExecuteCommand = this.onDidExecuteCommandEmitter.event;
        this.onCommandsChangedEmitter = new event_1.Emitter();
        this.onCommandsChanged = this.onCommandsChangedEmitter.event;
        this.fireDidChange = debounce(() => this.doFireDidChange(), 0);
    }
    onStart() {
        const contributions = this.contributionProvider.getContributions();
        for (const contrib of contributions) {
            contrib.registerCommands(this);
        }
    }
    *getAllCommands() {
        var _a;
        for (const command of Object.values(this._commands)) {
            yield { ...command, handlers: (_a = this._handlers[command.id]) !== null && _a !== void 0 ? _a : [] };
        }
    }
    /**
     * Register the given command and handler if present.
     *
     * Throw if a command is already registered for the given command identifier.
     */
    registerCommand(command, handler) {
        if (this._commands[command.id]) {
            console.warn(`A command ${command.id} is already registered.`);
            return disposable_1.Disposable.NULL;
        }
        const toDispose = new disposable_1.DisposableCollection(this.doRegisterCommand(command));
        if (handler) {
            toDispose.push(this.registerHandler(command.id, handler));
        }
        this.toUnregisterCommands.set(command.id, toDispose);
        toDispose.push(disposable_1.Disposable.create(() => this.toUnregisterCommands.delete(command.id)));
        return toDispose;
    }
    doRegisterCommand(command) {
        this._commands[command.id] = command;
        return {
            dispose: () => {
                delete this._commands[command.id];
            }
        };
    }
    unregisterCommand(commandOrId) {
        const id = Command.is(commandOrId) ? commandOrId.id : commandOrId;
        const toUnregister = this.toUnregisterCommands.get(id);
        if (toUnregister) {
            toUnregister.dispose();
        }
    }
    /**
     * Register the given handler for the given command identifier.
     *
     * If there is already a handler for the given command
     * then the given handler is registered as more specific, and
     * has higher priority during enablement, visibility and toggle state evaluations.
     */
    registerHandler(commandId, handler) {
        let handlers = this._handlers[commandId];
        if (!handlers) {
            this._handlers[commandId] = handlers = [];
        }
        handlers.unshift(handler);
        this.fireDidChange();
        return {
            dispose: () => {
                const idx = handlers.indexOf(handler);
                if (idx >= 0) {
                    handlers.splice(idx, 1);
                    this.fireDidChange();
                }
            }
        };
    }
    doFireDidChange() {
        this.onCommandsChangedEmitter.fire();
    }
    /**
     * Test whether there is an active handler for the given command.
     */
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    isEnabled(command, ...args) {
        return typeof this.getActiveHandler(command, ...args) !== 'undefined';
    }
    /**
     * Test whether there is a visible handler for the given command.
     */
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    isVisible(command, ...args) {
        return typeof this.getVisibleHandler(command, ...args) !== 'undefined';
    }
    /**
     * Test whether there is a toggled handler for the given command.
     */
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    isToggled(command, ...args) {
        return typeof this.getToggledHandler(command, ...args) !== 'undefined';
    }
    /**
     * Execute the active handler for the given command and arguments.
     *
     * Reject if a command cannot be executed.
     */
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    async executeCommand(commandId, ...args) {
        const handler = this.getActiveHandler(commandId, ...args);
        if (handler) {
            await this.fireWillExecuteCommand(commandId, args);
            const result = await handler.execute(...args);
            this.onDidExecuteCommandEmitter.fire({ commandId, args });
            return result;
        }
        throw Object.assign(new Error(`The command '${commandId}' cannot be executed. There are no active handlers available for the command.`), { code: 'NO_ACTIVE_HANDLER' });
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    async fireWillExecuteCommand(commandId, args = []) {
        await event_1.WaitUntilEvent.fire(this.onWillExecuteCommandEmitter, { commandId, args }, 30000);
    }
    /**
     * Get a visible handler for the given command or `undefined`.
     */
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    getVisibleHandler(commandId, ...args) {
        const handlers = this._handlers[commandId];
        if (handlers) {
            for (const handler of handlers) {
                try {
                    if (!handler.isVisible || handler.isVisible(...args)) {
                        return handler;
                    }
                }
                catch (error) {
                    console.error(error);
                }
            }
        }
        return undefined;
    }
    /**
     * Get an active handler for the given command or `undefined`.
     */
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    getActiveHandler(commandId, ...args) {
        const handlers = this._handlers[commandId];
        if (handlers) {
            for (const handler of handlers) {
                try {
                    if (!handler.isEnabled || handler.isEnabled(...args)) {
                        return handler;
                    }
                }
                catch (error) {
                    console.error(error);
                }
            }
        }
        return undefined;
    }
    /**
     * Get a toggled handler for the given command or `undefined`.
     */
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    getToggledHandler(commandId, ...args) {
        const handlers = this._handlers[commandId];
        if (handlers) {
            for (const handler of handlers) {
                try {
                    if (handler.isToggled && handler.isToggled(...args)) {
                        return handler;
                    }
                }
                catch (error) {
                    console.error(error);
                }
            }
        }
        return undefined;
    }
    /**
     * Returns with all handlers for the given command. If the command does not have any handlers,
     * or the command is not registered, returns an empty array.
     */
    getAllHandlers(commandId) {
        const handlers = this._handlers[commandId];
        return handlers ? handlers.slice() : [];
    }
    /**
     * Get all registered commands.
     */
    get commands() {
        return Object.values(this._commands);
    }
    /**
     * Get a command for the given command identifier.
     */
    getCommand(id) {
        return this._commands[id];
    }
    /**
     * Get all registered commands identifiers.
     */
    get commandIds() {
        return Object.keys(this._commands);
    }
    /**
     * Get the list of recently used commands.
     */
    get recent() {
        const commands = [];
        for (const recentId of this._recent) {
            const command = this.getCommand(recentId);
            if (command) {
                commands.push(command);
            }
        }
        return commands;
    }
    /**
     * Set the list of recently used commands.
     * @param commands the list of recently used commands.
     */
    set recent(commands) {
        this._recent = Array.from(new Set(commands.map(e => e.id)));
    }
    /**
     * Adds a command to recently used list.
     * Prioritizes commands that were recently executed to be most recent.
     *
     * @param recent a recent command, or array of recent commands.
     */
    addRecentCommand(recent) {
        for (const recentCommand of Array.isArray(recent) ? recent : [recent]) {
            // Determine if the command currently exists in the recently used list.
            const index = this._recent.findIndex(commandId => commandId === recentCommand.id);
            // If the command exists, remove it from the array so it can later be placed at the top.
            if (index >= 0) {
                this._recent.splice(index, 1);
            }
            // Add the recent command to the beginning of the array (most recent).
            this._recent.unshift(recentCommand.id);
        }
    }
    /**
     * Clear the list of recently used commands.
     */
    clearCommandHistory() {
        this.recent = [];
    }
};
CommandRegistry = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)(),
    (0, tslib_1.__param)(0, (0, inversify_1.inject)(contribution_provider_1.ContributionProvider)),
    (0, tslib_1.__param)(0, (0, inversify_1.named)(exports.CommandContribution)),
    (0, tslib_1.__metadata)("design:paramtypes", [Object])
], CommandRegistry);
exports.CommandRegistry = CommandRegistry;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/contribution-filter/contribution-filter-registry.js":
/*!*****************************************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/common/contribution-filter/contribution-filter-registry.js ***!
  \*****************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2021 STMicroelectronics and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ContributionFilterRegistryImpl = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/es/inversify.js");
const contribution_filter_1 = __webpack_require__(/*! ./contribution-filter */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/contribution-filter/contribution-filter.js");
/**
 * Registry of contribution filters.
 *
 * Implement/bind to the `FilterContribution` interface/symbol to register your contribution filters.
 */
let ContributionFilterRegistryImpl = class ContributionFilterRegistryImpl {
    constructor(contributions = []) {
        this.initialized = false;
        this.genericFilters = [];
        this.typeToFilters = new Map();
        for (const contribution of contributions) {
            contribution.registerContributionFilters(this);
        }
        this.initialized = true;
    }
    addFilters(types, filters) {
        if (this.initialized) {
            throw new Error('cannot add filters after initialization is done.');
        }
        else if (types === '*') {
            this.genericFilters.push(...filters);
        }
        else {
            for (const type of types) {
                this.getOrCreate(type).push(...filters);
            }
        }
    }
    applyFilters(toFilter, type) {
        const filters = this.getFilters(type);
        if (filters.length === 0) {
            return toFilter;
        }
        return toFilter.filter(object => filters.every(filter => filter(object)));
    }
    getOrCreate(type) {
        let value = this.typeToFilters.get(type);
        if (value === undefined) {
            this.typeToFilters.set(type, value = []);
        }
        return value;
    }
    getFilters(type) {
        return [
            ...this.typeToFilters.get(type) || [],
            ...this.genericFilters
        ];
    }
};
ContributionFilterRegistryImpl = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)(),
    (0, tslib_1.__param)(0, (0, inversify_1.multiInject)(contribution_filter_1.FilterContribution)),
    (0, tslib_1.__param)(0, (0, inversify_1.optional)()),
    (0, tslib_1.__metadata)("design:paramtypes", [Array])
], ContributionFilterRegistryImpl);
exports.ContributionFilterRegistryImpl = ContributionFilterRegistryImpl;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/contribution-filter/contribution-filter.js":
/*!********************************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/common/contribution-filter/contribution-filter.js ***!
  \********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2021 STMicroelectronics and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FilterContribution = exports.ContributionFilterRegistry = void 0;
exports.ContributionFilterRegistry = Symbol('ContributionFilterRegistry');
exports.FilterContribution = Symbol('FilterContribution');


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/contribution-filter/filter.js":
/*!*******************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/common/contribution-filter/filter.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2021 STMicroelectronics and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Filter = void 0;
exports.Filter = Symbol('Filter');


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/contribution-filter/index.js":
/*!******************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/common/contribution-filter/index.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2021 STMicroelectronics and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./contribution-filter */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/contribution-filter/contribution-filter.js"), exports);
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./contribution-filter-registry */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/contribution-filter/contribution-filter-registry.js"), exports);
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./filter */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/contribution-filter/filter.js"), exports);


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/contribution-provider.js":
/*!**************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/common/contribution-provider.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2017 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.bindContribution = exports.bindContributionProvider = exports.Bindable = exports.ContributionProvider = void 0;
const contribution_filter_1 = __webpack_require__(/*! ./contribution-filter */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/contribution-filter/index.js");
exports.ContributionProvider = Symbol('ContributionProvider');
class ContainerBasedContributionProvider {
    constructor(serviceIdentifier, container) {
        this.serviceIdentifier = serviceIdentifier;
        this.container = container;
    }
    getContributions(recursive) {
        if (this.services === undefined) {
            const currentServices = [];
            let filterRegistry;
            let currentContainer = this.container;
            // eslint-disable-next-line no-null/no-null
            while (currentContainer !== null) {
                if (currentContainer.isBound(this.serviceIdentifier)) {
                    try {
                        currentServices.push(...currentContainer.getAll(this.serviceIdentifier));
                    }
                    catch (error) {
                        console.error(error);
                    }
                }
                if (filterRegistry === undefined && currentContainer.isBound(contribution_filter_1.ContributionFilterRegistry)) {
                    filterRegistry = currentContainer.get(contribution_filter_1.ContributionFilterRegistry);
                }
                // eslint-disable-next-line no-null/no-null
                currentContainer = recursive === true ? currentContainer.parent : null;
            }
            this.services = filterRegistry ? filterRegistry.applyFilters(currentServices, this.serviceIdentifier) : currentServices;
        }
        return this.services;
    }
}
var Bindable;
(function (Bindable) {
    function isContainer(arg) {
        return typeof arg !== 'function'
            // https://github.com/eclipse-theia/theia/issues/3204#issue-371029654
            // In InversifyJS `4.14.0` containers no longer have a property `guid`.
            && ('guid' in arg || 'parent' in arg);
    }
    Bindable.isContainer = isContainer;
})(Bindable = exports.Bindable || (exports.Bindable = {}));
function bindContributionProvider(bindable, id) {
    const bindingToSyntax = (Bindable.isContainer(bindable) ? bindable.bind(exports.ContributionProvider) : bindable(exports.ContributionProvider));
    bindingToSyntax
        .toDynamicValue(ctx => new ContainerBasedContributionProvider(id, ctx.container))
        .inSingletonScope().whenTargetNamed(id);
}
exports.bindContributionProvider = bindContributionProvider;
/**
 * Helper function to bind a service to a list of contributions easily.
 * @param bindable a Container or the bind function directly.
 * @param service an already bound service to refer the contributions to.
 * @param contributions array of contribution identifiers to bind the service to.
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function bindContribution(bindable, service, contributions) {
    const bind = Bindable.isContainer(bindable) ? bindable.bind.bind(bindable) : bindable;
    for (const contribution of contributions) {
        bind(contribution).toService(service);
    }
}
exports.bindContribution = bindContribution;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/disposable.js":
/*!***************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/common/disposable.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2017 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DisposableWrapper = exports.disposableTimeout = exports.DisposableGroup = exports.DisposableCollection = exports.Disposable = void 0;
const event_1 = __webpack_require__(/*! ./event */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/event.js");
const types_1 = __webpack_require__(/*! ./types */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/types.js");
var Disposable;
(function (Disposable) {
    function is(arg) {
        return (0, types_1.isObject)(arg) && (0, types_1.isFunction)(arg.dispose);
    }
    Disposable.is = is;
    function create(func) {
        return { dispose: func };
    }
    Disposable.create = create;
})(Disposable = exports.Disposable || (exports.Disposable = {}));
/**
 * Ensures that every reference to {@link Disposable.NULL} returns a new object,
 * as sharing a disposable between multiple {@link DisposableCollection} can have unexpected side effects
 */
Object.defineProperty(Disposable, 'NULL', {
    configurable: false,
    enumerable: true,
    get() {
        return { dispose: () => { } };
    }
});
/**
 * Utility for tracking a collection of Disposable objects.
 *
 * This utility provides a number of benefits over just using an array of
 * Disposables:
 *
 * - the collection is auto-pruned when an element it contains is disposed by
 * any code that has a reference to it
 * - you can register to be notified when all elements in the collection have
 * been disposed [1]
 * - you can conveniently dispose all elements by calling dispose()
 * on the collection
 *
 * Unlike an array, however, this utility does not give you direct access to
 * its elements.
 *
 * Being notified when all elements are disposed is simple:
 * ```
 * const dc = new DisposableCollection(myDisposables);
 * dc.onDispose(() => {
 *    console.log('All elements in the collection have been disposed');
 * });
 * ```
 *
 * [1] The collection will notify only once. It will continue to function in so
 * far as accepting new Disposables and pruning them when they are disposed, but
 * such activity will never result in another notification.
 */
class DisposableCollection {
    constructor(...toDispose) {
        this.disposables = [];
        this.onDisposeEmitter = new event_1.Emitter();
        this.disposingElements = false;
        toDispose.forEach(d => this.push(d));
    }
    /**
     * This event is fired only once
     * on first dispose of not empty collection.
     */
    get onDispose() {
        return this.onDisposeEmitter.event;
    }
    checkDisposed() {
        if (this.disposed && !this.disposingElements) {
            this.onDisposeEmitter.fire(undefined);
            this.onDisposeEmitter.dispose();
        }
    }
    get disposed() {
        return this.disposables.length === 0;
    }
    dispose() {
        if (this.disposed || this.disposingElements) {
            return;
        }
        this.disposingElements = true;
        while (!this.disposed) {
            try {
                this.disposables.pop().dispose();
            }
            catch (e) {
                console.error(e);
            }
        }
        this.disposingElements = false;
        this.checkDisposed();
    }
    push(disposable) {
        const disposables = this.disposables;
        disposables.push(disposable);
        const originalDispose = disposable.dispose.bind(disposable);
        const toRemove = Disposable.create(() => {
            const index = disposables.indexOf(disposable);
            if (index !== -1) {
                disposables.splice(index, 1);
            }
            this.checkDisposed();
        });
        disposable.dispose = () => {
            toRemove.dispose();
            disposable.dispose = originalDispose;
            originalDispose();
        };
        return toRemove;
    }
    pushAll(disposables) {
        return disposables.map(disposable => this.push(disposable));
    }
}
exports.DisposableCollection = DisposableCollection;
var DisposableGroup;
(function (DisposableGroup) {
    function canPush(candidate) {
        return Boolean(candidate && candidate.push);
    }
    DisposableGroup.canPush = canPush;
    function canAdd(candidate) {
        return Boolean(candidate && candidate.add);
    }
    DisposableGroup.canAdd = canAdd;
})(DisposableGroup = exports.DisposableGroup || (exports.DisposableGroup = {}));
function disposableTimeout(...args) {
    const handle = setTimeout(...args);
    return { dispose: () => clearTimeout(handle) };
}
exports.disposableTimeout = disposableTimeout;
/**
 * Wrapper for a {@link Disposable} that is not available immediately.
 */
class DisposableWrapper {
    constructor() {
        this.disposed = false;
        this.disposable = undefined;
    }
    set(disposable) {
        if (this.disposed) {
            disposable.dispose();
        }
        else {
            this.disposable = disposable;
        }
    }
    dispose() {
        this.disposed = true;
        if (this.disposable) {
            this.disposable.dispose();
            this.disposable = undefined;
        }
    }
}
exports.DisposableWrapper = DisposableWrapper;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/encoding-service.js":
/*!*********************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/common/encoding-service.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2020 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
// based on https://github.com/microsoft/vscode/blob/04c36be045a94fee58e5f8992d3e3fd980294a84/src/vs/workbench/services/textfile/common/encoding.ts
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.EncodingService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
/* eslint-disable no-null/no-null */
const iconv = __webpack_require__(/*! iconv-lite */ "../node_modules/@theia/editor/node_modules/iconv-lite/lib/index.js");
const safer_buffer_1 = __webpack_require__(/*! safer-buffer */ "../node_modules/safer-buffer/safer.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/es/inversify.js");
const buffer_1 = __webpack_require__(/*! ./buffer */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/buffer.js");
const encodings_1 = __webpack_require__(/*! ./encodings */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/encodings.js");
const stream_1 = __webpack_require__(/*! ./stream */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/stream.js");
const ZERO_BYTE_DETECTION_BUFFER_MAX_LEN = 512; // number of bytes to look at to decide about a file being binary or not
const NO_ENCODING_GUESS_MIN_BYTES = 512; // when not auto guessing the encoding, small number of bytes are enough
const AUTO_ENCODING_GUESS_MIN_BYTES = 512 * 8; // with auto guessing we want a lot more content to be read for guessing
const AUTO_ENCODING_GUESS_MAX_BYTES = 512 * 128; // set an upper limit for the number of bytes we pass on to jschardet
// we explicitly ignore a specific set of encodings from auto guessing
// - ASCII: we never want this encoding (most UTF-8 files would happily detect as
//          ASCII files and then you could not type non-ASCII characters anymore)
// - UTF-16: we have our own detection logic for UTF-16
// - UTF-32: we do not support this encoding in VSCode
const IGNORE_ENCODINGS = ['ascii', 'utf-16', 'utf-32'];
let EncodingService = class EncodingService {
    encode(value, options) {
        let encoding = options === null || options === void 0 ? void 0 : options.encoding;
        const addBOM = options === null || options === void 0 ? void 0 : options.hasBOM;
        encoding = this.toIconvEncoding(encoding);
        if (encoding === encodings_1.UTF8 && !addBOM) {
            return buffer_1.BinaryBuffer.fromString(value);
        }
        const buffer = iconv.encode(value, encoding, { addBOM });
        return buffer_1.BinaryBuffer.wrap(buffer);
    }
    decode(value, encoding) {
        const buffer = safer_buffer_1.Buffer.from(value.buffer);
        encoding = this.toIconvEncoding(encoding);
        return iconv.decode(buffer, encoding);
    }
    exists(encoding) {
        encoding = this.toIconvEncoding(encoding);
        return iconv.encodingExists(encoding);
    }
    toIconvEncoding(encoding) {
        if (encoding === encodings_1.UTF8_with_bom || !encoding) {
            return encodings_1.UTF8; // iconv does not distinguish UTF 8 with or without BOM, so we need to help it
        }
        return encoding;
    }
    async toResourceEncoding(encoding, options) {
        // Some encodings come with a BOM automatically
        if (encoding === encodings_1.UTF16be || encoding === encodings_1.UTF16le || encoding === encodings_1.UTF8_with_bom) {
            return { encoding, hasBOM: true };
        }
        // Ensure that we preserve an existing BOM if found for UTF8
        // unless we are instructed to overwrite the encoding
        const overwriteEncoding = options === null || options === void 0 ? void 0 : options.overwriteEncoding;
        if (!overwriteEncoding && encoding === encodings_1.UTF8) {
            try {
                // stream here to avoid fetching the whole content on write
                const buffer = await options.read(encodings_1.UTF8_BOM.length);
                if (this.detectEncodingByBOMFromBuffer(safer_buffer_1.Buffer.from(buffer), buffer.byteLength) === encodings_1.UTF8_with_bom) {
                    return { encoding, hasBOM: true };
                }
            }
            catch (error) {
                // ignore - file might not exist
            }
        }
        return { encoding, hasBOM: false };
    }
    async detectEncoding(data, autoGuessEncoding) {
        const buffer = safer_buffer_1.Buffer.from(data.buffer);
        const bytesRead = data.byteLength;
        // Always first check for BOM to find out about encoding
        let encoding = this.detectEncodingByBOMFromBuffer(buffer, bytesRead);
        // Detect 0 bytes to see if file is binary or UTF-16 LE/BEÏ
        // unless we already know that this file has a UTF-16 encoding
        let seemsBinary = false;
        if (encoding !== encodings_1.UTF16be && encoding !== encodings_1.UTF16le && buffer) {
            let couldBeUTF16LE = true; // e.g. 0xAA 0x00
            let couldBeUTF16BE = true; // e.g. 0x00 0xAA
            let containsZeroByte = false;
            // This is a simplified guess to detect UTF-16 BE or LE by just checking if
            // the first 512 bytes have the 0-byte at a specific location. For UTF-16 LE
            // this would be the odd byte index and for UTF-16 BE the even one.
            // Note: this can produce false positives (a binary file that uses a 2-byte
            // encoding of the same format as UTF-16) and false negatives (a UTF-16 file
            // that is using 4 bytes to encode a character).
            for (let i = 0; i < bytesRead && i < ZERO_BYTE_DETECTION_BUFFER_MAX_LEN; i++) {
                const isEndian = (i % 2 === 1); // assume 2-byte sequences typical for UTF-16
                const isZeroByte = (buffer.readUInt8(i) === 0);
                if (isZeroByte) {
                    containsZeroByte = true;
                }
                // UTF-16 LE: expect e.g. 0xAA 0x00
                if (couldBeUTF16LE && (isEndian && !isZeroByte || !isEndian && isZeroByte)) {
                    couldBeUTF16LE = false;
                }
                // UTF-16 BE: expect e.g. 0x00 0xAA
                if (couldBeUTF16BE && (isEndian && isZeroByte || !isEndian && !isZeroByte)) {
                    couldBeUTF16BE = false;
                }
                // Return if this is neither UTF16-LE nor UTF16-BE and thus treat as binary
                if (isZeroByte && !couldBeUTF16LE && !couldBeUTF16BE) {
                    break;
                }
            }
            // Handle case of 0-byte included
            if (containsZeroByte) {
                if (couldBeUTF16LE) {
                    encoding = encodings_1.UTF16le;
                }
                else if (couldBeUTF16BE) {
                    encoding = encodings_1.UTF16be;
                }
                else {
                    seemsBinary = true;
                }
            }
        }
        // Auto guess encoding if configured
        if (autoGuessEncoding && !seemsBinary && !encoding && buffer) {
            const guessedEncoding = await this.guessEncodingByBuffer(buffer.slice(0, bytesRead));
            return {
                seemsBinary: false,
                encoding: guessedEncoding
            };
        }
        return { seemsBinary, encoding };
    }
    detectEncodingByBOMFromBuffer(buffer, bytesRead) {
        if (!buffer || bytesRead < encodings_1.UTF16be_BOM.length) {
            return undefined;
        }
        const b0 = buffer.readUInt8(0);
        const b1 = buffer.readUInt8(1);
        // UTF-16 BE
        if (b0 === encodings_1.UTF16be_BOM[0] && b1 === encodings_1.UTF16be_BOM[1]) {
            return encodings_1.UTF16be;
        }
        // UTF-16 LE
        if (b0 === encodings_1.UTF16le_BOM[0] && b1 === encodings_1.UTF16le_BOM[1]) {
            return encodings_1.UTF16le;
        }
        if (bytesRead < encodings_1.UTF8_BOM.length) {
            return undefined;
        }
        const b2 = buffer.readUInt8(2);
        // UTF-8
        if (b0 === encodings_1.UTF8_BOM[0] && b1 === encodings_1.UTF8_BOM[1] && b2 === encodings_1.UTF8_BOM[2]) {
            return encodings_1.UTF8_with_bom;
        }
        return undefined;
    }
    async guessEncodingByBuffer(buffer) {
        const jschardet = await Promise.resolve().then(() => __webpack_require__(/*! jschardet */ "../node_modules/jschardet/index.js"));
        const guessed = jschardet.detect(buffer.slice(0, AUTO_ENCODING_GUESS_MAX_BYTES)); // ensure to limit buffer for guessing due to https://github.com/aadsm/jschardet/issues/53
        if (!guessed || !guessed.encoding) {
            return undefined;
        }
        const enc = guessed.encoding.toLowerCase();
        if (0 <= IGNORE_ENCODINGS.indexOf(enc)) {
            return undefined; // see comment above why we ignore some encodings
        }
        return this.toIconvEncoding(guessed.encoding);
    }
    decodeStream(source, options) {
        var _a;
        const minBytesRequiredForDetection = ((_a = options.minBytesRequiredForDetection) !== null && _a !== void 0 ? _a : options.guessEncoding) ? AUTO_ENCODING_GUESS_MIN_BYTES : NO_ENCODING_GUESS_MIN_BYTES;
        return new Promise((resolve, reject) => {
            const target = (0, stream_1.newWriteableStream)(strings => strings.join(''));
            const bufferedChunks = [];
            let bytesBuffered = 0;
            let decoder = undefined;
            const createDecoder = async () => {
                try {
                    // detect encoding from buffer
                    const detected = await this.detectEncoding(buffer_1.BinaryBuffer.concat(bufferedChunks), options.guessEncoding);
                    // ensure to respect overwrite of encoding
                    detected.encoding = await options.overwriteEncoding(detected.encoding);
                    // decode and write buffered content
                    decoder = iconv.getDecoder(this.toIconvEncoding(detected.encoding));
                    const decoded = decoder.write(safer_buffer_1.Buffer.from(buffer_1.BinaryBuffer.concat(bufferedChunks).buffer));
                    target.write(decoded);
                    bufferedChunks.length = 0;
                    bytesBuffered = 0;
                    // signal to the outside our detected encoding and final decoder stream
                    resolve({
                        stream: target,
                        detected
                    });
                }
                catch (error) {
                    reject(error);
                }
            };
            // Stream error: forward to target
            source.on('error', error => target.error(error));
            // Stream data
            source.on('data', async (chunk) => {
                // if the decoder is ready, we just write directly
                if (decoder) {
                    target.write(decoder.write(safer_buffer_1.Buffer.from(chunk.buffer)));
                }
                else {
                    bufferedChunks.push(chunk);
                    bytesBuffered += chunk.byteLength;
                    // buffered enough data for encoding detection, create stream
                    if (bytesBuffered >= minBytesRequiredForDetection) {
                        // pause stream here until the decoder is ready
                        source.pause();
                        await createDecoder();
                        // resume stream now that decoder is ready but
                        // outside of this stack to reduce recursion
                        setTimeout(() => source.resume());
                    }
                }
            });
            // Stream end
            source.on('end', async () => {
                // we were still waiting for data to do the encoding
                // detection. thus, wrap up starting the stream even
                // without all the data to get things going
                if (!decoder) {
                    await createDecoder();
                }
                // end the target with the remainders of the decoder
                target.end(decoder === null || decoder === void 0 ? void 0 : decoder.end());
            });
        });
    }
    async encodeStream(value, options) {
        let encoding = options === null || options === void 0 ? void 0 : options.encoding;
        const addBOM = options === null || options === void 0 ? void 0 : options.hasBOM;
        encoding = this.toIconvEncoding(encoding);
        if (encoding === encodings_1.UTF8 && !addBOM) {
            return value === undefined ? undefined : typeof value === 'string' ?
                buffer_1.BinaryBuffer.fromString(value) : buffer_1.BinaryBufferReadable.fromReadable(value);
        }
        value = value || '';
        const readable = typeof value === 'string' ? stream_1.Readable.fromString(value) : value;
        const encoder = iconv.getEncoder(encoding, { addBOM });
        let bytesWritten = false;
        let done = false;
        return {
            read() {
                if (done) {
                    return null;
                }
                const chunk = readable.read();
                if (typeof chunk !== 'string') {
                    done = true;
                    // If we are instructed to add a BOM but we detect that no
                    // bytes have been written, we must ensure to return the BOM
                    // ourselves so that we comply with the contract.
                    if (!bytesWritten && addBOM) {
                        switch (encoding) {
                            case encodings_1.UTF8:
                            case encodings_1.UTF8_with_bom:
                                return buffer_1.BinaryBuffer.wrap(Uint8Array.from(encodings_1.UTF8_BOM));
                            case encodings_1.UTF16be:
                                return buffer_1.BinaryBuffer.wrap(Uint8Array.from(encodings_1.UTF16be_BOM));
                            case encodings_1.UTF16le:
                                return buffer_1.BinaryBuffer.wrap(Uint8Array.from(encodings_1.UTF16le_BOM));
                        }
                    }
                    const leftovers = encoder.end();
                    if (leftovers && leftovers.length > 0) {
                        bytesWritten = true;
                        return buffer_1.BinaryBuffer.wrap(leftovers);
                    }
                    return null;
                }
                bytesWritten = true;
                return buffer_1.BinaryBuffer.wrap(encoder.write(chunk));
            }
        };
    }
};
EncodingService = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)()
], EncodingService);
exports.EncodingService = EncodingService;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/encodings.js":
/*!**************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/common/encodings.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2020 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.UTF8_BOM = exports.UTF16le_BOM = exports.UTF16be_BOM = exports.UTF16le = exports.UTF16be = exports.UTF8_with_bom = exports.UTF8 = void 0;
exports.UTF8 = 'utf8';
exports.UTF8_with_bom = 'utf8bom';
exports.UTF16be = 'utf16be';
exports.UTF16le = 'utf16le';
exports.UTF16be_BOM = [0xFE, 0xFF];
exports.UTF16le_BOM = [0xFF, 0xFE];
exports.UTF8_BOM = [0xEF, 0xBB, 0xBF];


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/env-variables/env-variables-protocol.js":
/*!*****************************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/common/env-variables/env-variables-protocol.js ***!
  \*****************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 Red Hat, Inc. and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.EnvVariablesServer = exports.envVariablesPath = void 0;
exports.envVariablesPath = '/services/envs';
exports.EnvVariablesServer = Symbol('EnvVariablesServer');


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/env-variables/index.js":
/*!************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/common/env-variables/index.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 Red Hat, Inc. and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./env-variables-protocol */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/env-variables/env-variables-protocol.js"), exports);


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/event.js":
/*!**********************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/common/event.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2017 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AsyncEmitter = exports.WaitUntilEvent = exports.Emitter = exports.Event = void 0;
/* eslint-disable @typescript-eslint/no-explicit-any */
const disposable_1 = __webpack_require__(/*! ./disposable */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/disposable.js");
var Event;
(function (Event) {
    const _disposable = { dispose() { } };
    function getMaxListeners(event) {
        const { maxListeners } = event;
        return typeof maxListeners === 'number' ? maxListeners : 0;
    }
    Event.getMaxListeners = getMaxListeners;
    function setMaxListeners(event, maxListeners) {
        if (typeof event.maxListeners === 'number') {
            return event.maxListeners = maxListeners;
        }
        return maxListeners;
    }
    Event.setMaxListeners = setMaxListeners;
    function addMaxListeners(event, add) {
        if (typeof event.maxListeners === 'number') {
            return event.maxListeners += add;
        }
        return add;
    }
    Event.addMaxListeners = addMaxListeners;
    Event.None = Object.assign(function () { return _disposable; }, {
        get maxListeners() { return 0; },
        set maxListeners(maxListeners) { }
    });
    /**
     * Given an event, returns another event which only fires once.
     */
    function once(event) {
        return (listener, thisArgs = undefined, disposables) => {
            // we need this, in case the event fires during the listener call
            let didFire = false;
            let result = undefined;
            result = event(e => {
                if (didFire) {
                    return;
                }
                else if (result) {
                    result.dispose();
                }
                else {
                    didFire = true;
                }
                return listener.call(thisArgs, e);
            }, undefined, disposables);
            if (didFire) {
                result.dispose();
            }
            return result;
        };
    }
    Event.once = once;
    function toPromise(event) {
        return new Promise(resolve => once(event)(resolve));
    }
    Event.toPromise = toPromise;
    /**
     * Given an event and a `map` function, returns another event which maps each element
     * through the mapping function.
     */
    function map(event, mapFunc) {
        return Object.assign((listener, thisArgs, disposables) => event(i => listener.call(thisArgs, mapFunc(i)), undefined, disposables), {
            get maxListeners() { return 0; },
            set maxListeners(maxListeners) { }
        });
    }
    Event.map = map;
    function any(...events) {
        return (listener, thisArgs = undefined, disposables) => new disposable_1.DisposableCollection(...events.map(event => event(e => listener.call(thisArgs, e), undefined, disposables)));
    }
    Event.any = any;
})(Event = exports.Event || (exports.Event = {}));
class CallbackList {
    get length() {
        return this._callbacks && this._callbacks.length || 0;
    }
    add(callback, context = undefined, bucket) {
        if (!this._callbacks) {
            this._callbacks = [];
            this._contexts = [];
        }
        this._callbacks.push(callback);
        this._contexts.push(context);
        if (Array.isArray(bucket)) {
            bucket.push({ dispose: () => this.remove(callback, context) });
        }
    }
    remove(callback, context = undefined) {
        if (!this._callbacks) {
            return;
        }
        let foundCallbackWithDifferentContext = false;
        for (let i = 0; i < this._callbacks.length; i++) {
            if (this._callbacks[i] === callback) {
                if (this._contexts[i] === context) {
                    // callback & context match => remove it
                    this._callbacks.splice(i, 1);
                    this._contexts.splice(i, 1);
                    return;
                }
                else {
                    foundCallbackWithDifferentContext = true;
                }
            }
        }
        if (foundCallbackWithDifferentContext) {
            throw new Error('When adding a listener with a context, you should remove it with the same context');
        }
    }
    // tslint:disable-next-line:typedef
    [Symbol.iterator]() {
        if (!this._callbacks) {
            return [][Symbol.iterator]();
        }
        const callbacks = this._callbacks.slice(0);
        const contexts = this._contexts.slice(0);
        return callbacks.map((callback, i) => (...args) => callback.apply(contexts[i], args))[Symbol.iterator]();
    }
    invoke(...args) {
        const ret = [];
        for (const callback of this) {
            try {
                ret.push(callback(...args));
            }
            catch (e) {
                console.error(e);
            }
        }
        return ret;
    }
    isEmpty() {
        return !this._callbacks || this._callbacks.length === 0;
    }
    dispose() {
        this._callbacks = undefined;
        this._contexts = undefined;
    }
}
class Emitter {
    constructor(_options) {
        this._options = _options;
        this._disposed = false;
        this._leakWarnCountdown = 0;
    }
    /**
     * For the public to allow to subscribe
     * to events from this Emitter
     */
    get event() {
        if (!this._event) {
            this._event = Object.assign((listener, thisArgs, disposables) => {
                if (!this._callbacks) {
                    this._callbacks = new CallbackList();
                }
                if (this._options && this._options.onFirstListenerAdd && this._callbacks.isEmpty()) {
                    this._options.onFirstListenerAdd(this);
                }
                this._callbacks.add(listener, thisArgs);
                const removeMaxListenersCheck = this.checkMaxListeners(Event.getMaxListeners(this._event));
                const result = {
                    dispose: () => {
                        if (removeMaxListenersCheck) {
                            removeMaxListenersCheck();
                        }
                        result.dispose = Emitter._noop;
                        if (!this._disposed) {
                            this._callbacks.remove(listener, thisArgs);
                            result.dispose = Emitter._noop;
                            if (this._options && this._options.onLastListenerRemove && this._callbacks.isEmpty()) {
                                this._options.onLastListenerRemove(this);
                            }
                        }
                    }
                };
                if (disposable_1.DisposableGroup.canPush(disposables)) {
                    disposables.push(result);
                }
                else if (disposable_1.DisposableGroup.canAdd(disposables)) {
                    disposables.add(result);
                }
                return result;
            }, {
                maxListeners: Emitter.LEAK_WARNING_THRESHHOLD
            });
        }
        return this._event;
    }
    checkMaxListeners(maxListeners) {
        if (maxListeners === 0 || !this._callbacks) {
            return undefined;
        }
        const listenerCount = this._callbacks.length;
        if (listenerCount <= maxListeners) {
            return undefined;
        }
        const popStack = this.pushLeakingStack();
        this._leakWarnCountdown -= 1;
        if (this._leakWarnCountdown <= 0) {
            // only warn on first exceed and then every time the limit
            // is exceeded by 50% again
            this._leakWarnCountdown = maxListeners * 0.5;
            let topStack;
            let topCount = 0;
            this._leakingStacks.forEach((stackCount, stack) => {
                if (!topStack || topCount < stackCount) {
                    topStack = stack;
                    topCount = stackCount;
                }
            });
            // eslint-disable-next-line max-len
            console.warn(`Possible Emitter memory leak detected. ${listenerCount} listeners added. Use event.maxListeners to increase the limit (${maxListeners}). MOST frequent listener (${topCount}):`);
            console.warn(topStack);
        }
        return popStack;
    }
    pushLeakingStack() {
        if (!this._leakingStacks) {
            this._leakingStacks = new Map();
        }
        const stack = new Error().stack.split('\n').slice(3).join('\n');
        const count = (this._leakingStacks.get(stack) || 0);
        this._leakingStacks.set(stack, count + 1);
        return () => this.popLeakingStack(stack);
    }
    popLeakingStack(stack) {
        if (!this._leakingStacks) {
            return;
        }
        const count = (this._leakingStacks.get(stack) || 0);
        this._leakingStacks.set(stack, count - 1);
    }
    /**
     * To be kept private to fire an event to
     * subscribers
     */
    fire(event) {
        if (this._callbacks) {
            return this._callbacks.invoke(event);
        }
    }
    /**
     * Process each listener one by one.
     * Return `false` to stop iterating over the listeners, `true` to continue.
     */
    async sequence(processor) {
        if (this._callbacks) {
            for (const listener of this._callbacks) {
                if (!await processor(listener)) {
                    break;
                }
            }
        }
    }
    dispose() {
        if (this._leakingStacks) {
            this._leakingStacks.clear();
            this._leakingStacks = undefined;
        }
        if (this._callbacks) {
            this._callbacks.dispose();
            this._callbacks = undefined;
        }
        this._disposed = true;
    }
}
exports.Emitter = Emitter;
Emitter.LEAK_WARNING_THRESHHOLD = 175;
Emitter._noop = function () { };
var WaitUntilEvent;
(function (WaitUntilEvent) {
    /**
     * Fire all listeners in the same tick.
     *
     * Use `AsyncEmitter.fire` to fire listeners async one after another.
     */
    async function fire(emitter, event, timeout, token = cancellation_1.CancellationToken.None) {
        const waitables = [];
        const asyncEvent = Object.assign(event, {
            token,
            waitUntil: (thenable) => {
                if (Object.isFrozen(waitables)) {
                    throw new Error('waitUntil cannot be called asynchronously.');
                }
                waitables.push(thenable);
            }
        });
        try {
            emitter.fire(asyncEvent);
            // Asynchronous calls to `waitUntil` should fail.
            Object.freeze(waitables);
        }
        finally {
            delete asyncEvent['waitUntil'];
        }
        if (!waitables.length) {
            return;
        }
        if (timeout !== undefined) {
            await Promise.race([Promise.all(waitables), new Promise(resolve => setTimeout(resolve, timeout))]);
        }
        else {
            await Promise.all(waitables);
        }
    }
    WaitUntilEvent.fire = fire;
})(WaitUntilEvent = exports.WaitUntilEvent || (exports.WaitUntilEvent = {}));
const cancellation_1 = __webpack_require__(/*! ./cancellation */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/cancellation.js");
class AsyncEmitter extends Emitter {
    /**
     * Fire listeners async one after another.
     */
    fire(event, token = cancellation_1.CancellationToken.None, promiseJoin) {
        const callbacks = this._callbacks;
        if (!callbacks) {
            return Promise.resolve();
        }
        const listeners = [...callbacks];
        if (this.deliveryQueue) {
            return this.deliveryQueue = this.deliveryQueue.then(() => this.deliver(listeners, event, token, promiseJoin));
        }
        return this.deliveryQueue = this.deliver(listeners, event, token, promiseJoin);
    }
    async deliver(listeners, event, token, promiseJoin) {
        for (const listener of listeners) {
            if (token.isCancellationRequested) {
                return;
            }
            const waitables = [];
            const asyncEvent = Object.assign(event, {
                token,
                waitUntil: (thenable) => {
                    if (Object.isFrozen(waitables)) {
                        throw new Error('waitUntil cannot be called asynchronously.');
                    }
                    if (promiseJoin) {
                        thenable = promiseJoin(thenable, listener);
                    }
                    waitables.push(thenable);
                }
            });
            try {
                listener(event);
                // Asynchronous calls to `waitUntil` should fail.
                Object.freeze(waitables);
            }
            catch (e) {
                console.error(e);
            }
            finally {
                delete asyncEvent['waitUntil'];
            }
            if (!waitables.length) {
                continue;
            }
            try {
                await Promise.all(waitables);
            }
            catch (e) {
                console.error(e);
            }
        }
    }
}
exports.AsyncEmitter = AsyncEmitter;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/frontend-application-state.js":
/*!*******************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/common/frontend-application-state.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2022 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.StopReason = void 0;
var StopReason;
(function (StopReason) {
    /**
     * Closing the window with no prospect of restart.
     */
    StopReason[StopReason["Close"] = 0] = "Close";
    /**
     * Reload without closing the window.
     */
    StopReason[StopReason["Reload"] = 1] = "Reload";
    /**
     * Reload that includes closing the window.
     */
    StopReason[StopReason["Restart"] = 2] = "Restart";
})(StopReason = exports.StopReason || (exports.StopReason = {}));


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/glob.js":
/*!*********************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/common/glob.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
// *****************************************************************************
// Copyright (C) 2018 Red Hat, Inc. and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
// copied from https://github.com/Microsoft/vscode/blob/bf7ac9201e7a7d01741d4e6e64b5dc9f3197d97b/src/vs/base/common/glob.ts
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getPathTerms = exports.getBasenameTerms = exports.parseToAsync = exports.isRelativePattern = exports.hasSiblingFn = exports.hasSiblingPromiseFn = exports.parse = exports.match = exports.splitGlobAware = exports.getEmptyExpression = void 0;
const strings = __webpack_require__(/*! ./strings */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/strings.js");
const paths = __webpack_require__(/*! ./paths */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/paths.js");
function getEmptyExpression() {
    return Object.create(null);
}
exports.getEmptyExpression = getEmptyExpression;
const GLOBSTAR = '**';
const GLOB_SPLIT = '/';
const PATH_REGEX = '[/\\\\]'; // any slash or backslash
const NO_PATH_REGEX = '[^/\\\\]'; // any non-slash and non-backslash
const ALL_FORWARD_SLASHES = /\//g;
function starsToRegExp(starCount) {
    switch (starCount) {
        case 0:
            return '';
        case 1:
            return `${NO_PATH_REGEX}*?`; // 1 star matches any number of characters except path separator (/ and \) - non greedy (?)
        default:
            // Matches:  (Path Sep OR Path Val followed by Path Sep OR Path Sep followed by Path Val) 0-many times
            // Group is non capturing because we don't need to capture at all (?:...)
            // Overall we use non-greedy matching because it could be that we match too much
            return `(?:${PATH_REGEX}|${NO_PATH_REGEX}+${PATH_REGEX}|${PATH_REGEX}${NO_PATH_REGEX}+)*?`;
    }
}
function splitGlobAware(pattern, splitChar) {
    if (!pattern) {
        return [];
    }
    const segments = [];
    let inBraces = false;
    let inBrackets = false;
    let char;
    let curVal = '';
    for (let i = 0; i < pattern.length; i++) {
        char = pattern[i];
        switch (char) {
            case splitChar:
                if (!inBraces && !inBrackets) {
                    segments.push(curVal);
                    curVal = '';
                    continue;
                }
                break;
            case '{':
                inBraces = true;
                break;
            case '}':
                inBraces = false;
                break;
            case '[':
                inBrackets = true;
                break;
            case ']':
                inBrackets = false;
                break;
        }
        curVal += char;
    }
    // Tail
    if (curVal) {
        segments.push(curVal);
    }
    return segments;
}
exports.splitGlobAware = splitGlobAware;
function parseRegExp(pattern) {
    if (!pattern) {
        return '';
    }
    let regEx = '';
    // Split up into segments for each slash found
    // eslint-disable-next-line prefer-const
    let segments = splitGlobAware(pattern, GLOB_SPLIT);
    // Special case where we only have globstars
    if (segments.every(s => s === GLOBSTAR)) {
        regEx = '.*';
    }
    // Build regex over segments
    // tslint:disable-next-line:one-line
    else {
        let previousSegmentWasGlobStar = false;
        segments.forEach((segment, index) => {
            // Globstar is special
            if (segment === GLOBSTAR) {
                // if we have more than one globstar after another, just ignore it
                if (!previousSegmentWasGlobStar) {
                    regEx += starsToRegExp(2);
                    previousSegmentWasGlobStar = true;
                }
                return;
            }
            // States
            let inBraces = false;
            let braceVal = '';
            let inBrackets = false;
            let bracketVal = '';
            let char;
            for (let i = 0; i < segment.length; i++) {
                char = segment[i];
                // Support brace expansion
                if (char !== '}' && inBraces) {
                    braceVal += char;
                    continue;
                }
                // Support brackets
                if (inBrackets && (char !== ']' || !bracketVal) /* ] is literally only allowed as first character in brackets to match it */) {
                    let res;
                    // range operator
                    if (char === '-') {
                        res = char;
                    }
                    // negation operator (only valid on first index in bracket)
                    // tslint:disable-next-line:one-line
                    else if ((char === '^' || char === '!') && !bracketVal) {
                        res = '^';
                    }
                    // glob split matching is not allowed within character ranges
                    // see http://man7.org/linux/man-pages/man7/glob.7.html
                    // tslint:disable-next-line:one-line
                    else if (char === GLOB_SPLIT) {
                        res = '';
                    }
                    // anything else gets escaped
                    // tslint:disable-next-line:one-line
                    else {
                        res = strings.escapeRegExpCharacters(char);
                    }
                    bracketVal += res;
                    continue;
                }
                switch (char) {
                    case '{':
                        inBraces = true;
                        continue;
                    case '[':
                        inBrackets = true;
                        continue;
                    case '}':
                        // eslint-disable-next-line prefer-const
                        let choices = splitGlobAware(braceVal, ',');
                        // Converts {foo,bar} => [foo|bar]
                        // eslint-disable-next-line prefer-const
                        let braceRegExp = `(?:${choices.map(c => parseRegExp(c)).join('|')})`;
                        regEx += braceRegExp;
                        inBraces = false;
                        braceVal = '';
                        break;
                    case ']':
                        regEx += ('[' + bracketVal + ']');
                        inBrackets = false;
                        bracketVal = '';
                        break;
                    case '?':
                        regEx += NO_PATH_REGEX; // 1 ? matches any single character except path separator (/ and \)
                        continue;
                    case '*':
                        regEx += starsToRegExp(1);
                        continue;
                    default:
                        regEx += strings.escapeRegExpCharacters(char);
                }
            }
            // Tail: Add the slash we had split on if there is more to come and the remaining pattern is not a globstar
            // For example if pattern: some/**/*.js we want the "/" after some to be included in the RegEx to prevent
            // a folder called "something" to match as well.
            // However, if pattern: some/**, we tolerate that we also match on "something" because our globstar behavior
            // is to match 0-N segments.
            if (index < segments.length - 1 && (segments[index + 1] !== GLOBSTAR || index + 2 < segments.length)) {
                regEx += PATH_REGEX;
            }
            // reset state
            previousSegmentWasGlobStar = false;
        });
    }
    return regEx;
}
// regexes to check for trivial glob patterns that just check for String#endsWith
const T1 = /^\*\*\/\*\.[\w\.-]+$/; // **/*.something
const T2 = /^\*\*\/([\w\.-]+)\/?$/; // **/something
const T3 = /^{\*\*\/[\*\.]?[\w\.-]+\/?(,\*\*\/[\*\.]?[\w\.-]+\/?)*}$/; // {**/*.something,**/*.else} or {**/package.json,**/project.json}
const T3_2 = /^{\*\*\/[\*\.]?[\w\.-]+(\/(\*\*)?)?(,\*\*\/[\*\.]?[\w\.-]+(\/(\*\*)?)?)*}$/; // Like T3, with optional trailing /**
const T4 = /^\*\*((\/[\w\.-]+)+)\/?$/; // **/something/else
const T5 = /^([\w\.-]+(\/[\w\.-]+)*)\/?$/; // something/else
const CACHE = new Map(); // new LRUCache<string, ParsedStringPattern>(10000); // bounded to 10000 elements
const FALSE = function () {
    return false;
};
const NULL = function () {
    return null;
};
function parsePattern(arg1, options) {
    if (!arg1) {
        return NULL;
    }
    // Handle IRelativePattern
    let pattern;
    if (typeof arg1 !== 'string') {
        pattern = arg1.pattern;
    }
    else {
        pattern = arg1;
    }
    // Whitespace trimming
    pattern = pattern.trim();
    // Check cache
    const patternKey = `${pattern}_${!!options.trimForExclusions}`;
    let parsedPattern = CACHE.get(patternKey);
    if (parsedPattern) {
        return wrapRelativePattern(parsedPattern, arg1);
    }
    // Check for Trivias
    let match;
    if (T1.test(pattern)) { // common pattern: **/*.txt just need endsWith check
        const base = pattern.substring(4); // '**/*'.length === 4
        parsedPattern = function (path, basename) {
            return path && strings.endsWith(path, base) ? pattern : null;
        };
    }
    else if (match = T2.exec(trimForExclusions(pattern, options))) { // common pattern: **/some.txt just need basename check
        parsedPattern = trivia2(match[1], pattern);
    }
    else if ((options.trimForExclusions ? T3_2 : T3).test(pattern)) { // repetition of common patterns (see above) {**/*.txt,**/*.png}
        parsedPattern = trivia3(pattern, options);
    }
    else if (match = T4.exec(trimForExclusions(pattern, options))) { // common pattern: **/something/else just need endsWith check
        parsedPattern = trivia4and5(match[1].substring(1), pattern, true);
    }
    else if (match = T5.exec(trimForExclusions(pattern, options))) { // common pattern: something/else just need equals check
        parsedPattern = trivia4and5(match[1], pattern, false);
    }
    // Otherwise convert to pattern
    // tslint:disable-next-line:one-line
    else {
        parsedPattern = toRegExp(pattern);
    }
    // Cache
    CACHE.set(patternKey, parsedPattern);
    return wrapRelativePattern(parsedPattern, arg1);
}
function wrapRelativePattern(parsedPattern, arg2) {
    if (typeof arg2 === 'string') {
        return parsedPattern;
    }
    return function (path, basename) {
        if (!paths.isEqualOrParent(path, arg2.base)) {
            return null;
        }
        return parsedPattern(paths.normalize(arg2.pathToRelative(arg2.base, path)), basename);
    };
}
function trimForExclusions(pattern, options) {
    return options.trimForExclusions && strings.endsWith(pattern, '/**') ? pattern.substring(0, pattern.length - 2) : pattern; // dropping **, tailing / is dropped later
}
// common pattern: **/some.txt just need basename check
function trivia2(base, originalPattern) {
    const slashBase = `/${base}`;
    const backslashBase = `\\${base}`;
    const parsedPattern = function (path, basename) {
        if (!path) {
            return null;
        }
        if (basename) {
            return basename === base ? originalPattern : null;
        }
        return path === base || strings.endsWith(path, slashBase) || strings.endsWith(path, backslashBase) ? originalPattern : null;
    };
    const basenames = [base];
    parsedPattern.basenames = basenames;
    parsedPattern.patterns = [originalPattern];
    parsedPattern.allBasenames = basenames;
    return parsedPattern;
}
// repetition of common patterns (see above) {**/*.txt,**/*.png}
function trivia3(pattern, options) {
    const parsedPatterns = aggregateBasenameMatches(pattern.slice(1, -1).split(',')
        .map(pattern => parsePattern(pattern, options))
        .filter(pattern => pattern !== NULL), pattern);
    const n = parsedPatterns.length;
    if (!n) {
        return NULL;
    }
    if (n === 1) {
        return parsedPatterns[0];
    }
    const parsedPattern = function (path, basename) {
        for (let i = 0, n = parsedPatterns.length; i < n; i++) {
            if (parsedPatterns[i](path, basename)) {
                return pattern;
            }
        }
        return null;
    };
    const withBasenames = parsedPatterns.find(pattern => !!pattern.allBasenames);
    // const withBasenames = arrays.first(parsedPatterns, pattern => !!(<ParsedStringPattern>pattern).allBasenames);
    if (withBasenames) {
        parsedPattern.allBasenames = withBasenames.allBasenames;
    }
    const allPaths = parsedPatterns.reduce((all, current) => current.allPaths ? all.concat(current.allPaths) : all, []);
    if (allPaths.length) {
        parsedPattern.allPaths = allPaths;
    }
    return parsedPattern;
}
// common patterns: **/something/else just need endsWith check, something/else just needs and equals check
function trivia4and5(path, pattern, matchPathEnds) {
    const nativePath = paths.nativeSep !== paths.sep ? path.replace(ALL_FORWARD_SLASHES, paths.nativeSep) : path;
    const nativePathEnd = paths.nativeSep + nativePath;
    // eslint-disable-next-line @typescript-eslint/no-shadow
    const parsedPattern = matchPathEnds ? function (path, basename) {
        return path && (path === nativePath || strings.endsWith(path, nativePathEnd)) ? pattern : null;
        // eslint-disable-next-line @typescript-eslint/no-shadow
    } : function (path, basename) {
        return path && path === nativePath ? pattern : null;
    };
    parsedPattern.allPaths = [(matchPathEnds ? '*/' : './') + path];
    return parsedPattern;
}
function toRegExp(pattern) {
    try {
        const regExp = new RegExp(`^${parseRegExp(pattern)}$`);
        return function (path, basename) {
            regExp.lastIndex = 0; // reset RegExp to its initial state to reuse it!
            return path && regExp.test(path) ? pattern : null;
        };
    }
    catch (error) {
        return NULL;
    }
}
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function match(arg1, path, hasSibling) {
    if (!arg1 || !path) {
        return false;
    }
    return parse(arg1)(path, undefined, hasSibling);
}
exports.match = match;
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function parse(arg1, options = {}) {
    if (!arg1) {
        return FALSE;
    }
    // Glob with String
    if (typeof arg1 === 'string' || isRelativePattern(arg1)) {
        const parsedPattern = parsePattern(arg1, options);
        if (parsedPattern === NULL) {
            return FALSE;
        }
        const resultPattern = function (path, basename) {
            return !!parsedPattern(path, basename);
        };
        if (parsedPattern.allBasenames) {
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            resultPattern.allBasenames = parsedPattern.allBasenames;
        }
        if (parsedPattern.allPaths) {
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            resultPattern.allPaths = parsedPattern.allPaths;
        }
        return resultPattern;
    }
    // Glob with Expression
    return parsedExpression(arg1, options);
}
exports.parse = parse;
function hasSiblingPromiseFn(siblingsFn) {
    if (!siblingsFn) {
        return undefined;
    }
    let siblings;
    return (name) => {
        if (!siblings) {
            siblings = (siblingsFn() || Promise.resolve([]))
                .then(list => list ? listToMap(list) : {});
        }
        return siblings.then(map => !!map[name]);
    };
}
exports.hasSiblingPromiseFn = hasSiblingPromiseFn;
function hasSiblingFn(siblingsFn) {
    if (!siblingsFn) {
        return undefined;
    }
    let siblings;
    return (name) => {
        if (!siblings) {
            const list = siblingsFn();
            siblings = list ? listToMap(list) : {};
        }
        return !!siblings[name];
    };
}
exports.hasSiblingFn = hasSiblingFn;
function listToMap(list) {
    const map = {};
    for (const key of list) {
        map[key] = true;
    }
    return map;
}
function isRelativePattern(obj) {
    const rp = obj;
    return !!rp && typeof rp === 'object' && typeof rp.base === 'string' && typeof rp.pattern === 'string' && typeof rp.pathToRelative === 'function';
}
exports.isRelativePattern = isRelativePattern;
/**
 * Same as `parse`, but the ParsedExpression is guaranteed to return a Promise
 */
function parseToAsync(expression, options) {
    // eslint-disable-next-line @typescript-eslint/no-shadow
    const parsedExpression = parse(expression, options);
    return (path, basename, hasSibling) => {
        const result = parsedExpression(path, basename, hasSibling);
        return result instanceof Promise ? result : Promise.resolve(result);
    };
}
exports.parseToAsync = parseToAsync;
function getBasenameTerms(patternOrExpression) {
    return patternOrExpression.allBasenames || [];
}
exports.getBasenameTerms = getBasenameTerms;
function getPathTerms(patternOrExpression) {
    return patternOrExpression.allPaths || [];
}
exports.getPathTerms = getPathTerms;
function parsedExpression(expression, options) {
    const parsedPatterns = aggregateBasenameMatches(Object.getOwnPropertyNames(expression)
        .map(pattern => parseExpressionPattern(pattern, expression[pattern], options))
        .filter(pattern => pattern !== NULL));
    const n = parsedPatterns.length;
    if (!n) {
        return NULL;
    }
    if (!parsedPatterns.some(parsedPattern => parsedPattern.requiresSiblings)) {
        if (n === 1) {
            return parsedPatterns[0];
        }
        // eslint-disable-next-line @typescript-eslint/no-shadow
        const resultExpression = function (path, basename) {
            // eslint-disable-next-line @typescript-eslint/no-shadow
            // tslint:disable-next-line:one-variable-per-declaration
            for (let i = 0, n = parsedPatterns.length; i < n; i++) {
                // Pattern matches path
                const result = parsedPatterns[i](path, basename);
                if (result) {
                    return result;
                }
            }
            return null;
        };
        // eslint-disable-next-line @typescript-eslint/no-shadow
        const withBasenames = parsedPatterns.find(pattern => !!pattern.allBasenames);
        if (withBasenames) {
            resultExpression.allBasenames = withBasenames.allBasenames;
        }
        // eslint-disable-next-line @typescript-eslint/no-shadow
        const allPaths = parsedPatterns.reduce((all, current) => current.allPaths ? all.concat(current.allPaths) : all, []);
        if (allPaths.length) {
            resultExpression.allPaths = allPaths;
        }
        return resultExpression;
    }
    const resultExpression = function (path, basename, hasSibling) {
        let name = null;
        // eslint-disable-next-line @typescript-eslint/no-shadow
        for (let i = 0, n = parsedPatterns.length; i < n; i++) {
            // Pattern matches path
            const parsedPattern = parsedPatterns[i];
            if (parsedPattern.requiresSiblings && hasSibling) {
                if (!basename) {
                    basename = paths.basename(path);
                }
                if (!name) {
                    name = basename.substring(0, basename.length - paths.extname(path).length);
                }
            }
            const result = parsedPattern(path, basename, name, hasSibling);
            if (result) {
                return result;
            }
        }
        return null;
    };
    const withBasenames = parsedPatterns.find(pattern => !!pattern.allBasenames);
    if (withBasenames) {
        resultExpression.allBasenames = withBasenames.allBasenames;
    }
    const allPaths = parsedPatterns.reduce((all, current) => current.allPaths ? all.concat(current.allPaths) : all, []);
    if (allPaths.length) {
        resultExpression.allPaths = allPaths;
    }
    return resultExpression;
}
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function parseExpressionPattern(pattern, value, options) {
    if (value === false) {
        return NULL; // pattern is disabled
    }
    const parsedPattern = parsePattern(pattern, options);
    if (parsedPattern === NULL) {
        return NULL;
    }
    // Expression Pattern is <boolean>
    if (typeof value === 'boolean') {
        return parsedPattern;
    }
    // Expression Pattern is <SiblingClause>
    if (value) {
        const when = value.when;
        if (typeof when === 'string') {
            const result = (path, basename, name, hasSibling) => {
                if (!hasSibling || !parsedPattern(path, basename)) {
                    return null;
                }
                const clausePattern = when.replace('$(basename)', name);
                const matched = hasSibling(clausePattern);
                return matched instanceof Promise ?
                    matched.then(m => m ? pattern : null) :
                    matched ? pattern : null;
            };
            result.requiresSiblings = true;
            return result;
        }
    }
    // Expression is Anything
    return parsedPattern;
}
function aggregateBasenameMatches(parsedPatterns, result) {
    const basenamePatterns = parsedPatterns.filter(parsedPattern => !!parsedPattern.basenames);
    if (basenamePatterns.length < 2) {
        return parsedPatterns;
    }
    const basenames = basenamePatterns.reduce((all, current) => all.concat(current.basenames), []);
    let patterns;
    if (result) {
        patterns = [];
        // tslint:disable-next-line:one-variable-per-declaration
        for (let i = 0, n = basenames.length; i < n; i++) {
            patterns.push(result);
        }
    }
    else {
        patterns = basenamePatterns.reduce((all, current) => all.concat(current.patterns), []);
    }
    const aggregate = function (path, basename) {
        if (!path) {
            return null;
        }
        if (!basename) {
            let i;
            for (i = path.length; i > 0; i--) {
                const ch = path.charCodeAt(i - 1);
                if (ch === 47 /* Slash */ || ch === 92 /* Backslash */) {
                    break;
                }
            }
            basename = path.substring(i);
        }
        const index = basenames.indexOf(basename);
        return index !== -1 ? patterns[index] : null;
    };
    aggregate.basenames = basenames;
    aggregate.patterns = patterns;
    aggregate.allBasenames = basenames;
    const aggregatedPatterns = parsedPatterns.filter(parsedPattern => !parsedPattern.basenames);
    aggregatedPatterns.push(aggregate);
    return aggregatedPatterns;
}


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/i18n/localization.js":
/*!**********************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/common/i18n/localization.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2021 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Localization = exports.AsyncLocalizationProvider = exports.localizationPath = void 0;
exports.localizationPath = '/services/i18n';
exports.AsyncLocalizationProvider = Symbol('AsyncLocalizationProvider');
var Localization;
(function (Localization) {
    const formatRegexp = /{([^}]+)}/g;
    function format(message, args) {
        return message.replace(formatRegexp, (match, group) => { var _a; return ((_a = args[group]) !== null && _a !== void 0 ? _a : match); });
    }
    Localization.format = format;
    function localize(localization, key, defaultValue, ...args) {
        let value = defaultValue;
        if (localization) {
            const translation = localization.translations[key];
            if (translation) {
                value = normalize(translation);
            }
        }
        return format(value, args);
    }
    Localization.localize = localize;
    /**
     * This function normalizes values from VSCode's localizations, which often contain additional mnemonics (`&&`).
     * The normalization removes the mnemonics from the input string.
     *
     * @param value Localization value coming from VSCode
     * @returns A normalized localized value
     */
    function normalize(value) {
        return value.replace(/&&/g, '');
    }
    Localization.normalize = normalize;
    function transformKey(key) {
        let nlsKey = key;
        const keySlashIndex = key.lastIndexOf('/');
        if (keySlashIndex >= 0) {
            nlsKey = key.substring(keySlashIndex + 1);
        }
        return nlsKey;
    }
    Localization.transformKey = transformKey;
})(Localization = exports.Localization || (exports.Localization = {}));


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/index.js":
/*!**********************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/common/index.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2017 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.URI = exports.environment = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
var environment_1 = __webpack_require__(/*! @theia/application-package/lib/environment */ "../node_modules/@theia/editor/node_modules/@theia/application-package/lib/environment.js");
Object.defineProperty(exports, "environment", ({ enumerable: true, get: function () { return environment_1.environment; } }));
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./application-error */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/application-error.js"), exports);
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./cancellation */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/cancellation.js"), exports);
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./command */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/command.js"), exports);
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./contribution-filter */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/contribution-filter/index.js"), exports);
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./contribution-provider */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/contribution-provider.js"), exports);
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./disposable */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/disposable.js"), exports);
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./event */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/event.js"), exports);
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./logger */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/logger.js"), exports);
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./lsp-types */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/lsp-types.js"), exports);
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./menu */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/menu/index.js"), exports);
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./message-rpc */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/message-rpc/index.js"), exports);
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./message-service */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/message-service.js"), exports);
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./message-service-protocol */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/message-service-protocol.js"), exports);
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./messaging */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/messaging/index.js"), exports);
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./nls */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/nls.js"), exports);
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./numbers */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/numbers.js"), exports);
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./objects */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/objects.js"), exports);
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./os */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/os.js"), exports);
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./path */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/path.js"), exports);
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./performance */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/performance/index.js"), exports);
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./progress-service */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/progress-service.js"), exports);
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./progress-service-protocol */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/progress-service-protocol.js"), exports);
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./quick-pick-service */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/quick-pick-service.js"), exports);
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./reference */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/reference.js"), exports);
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./resource */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/resource.js"), exports);
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./selection */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/selection.js"), exports);
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./selection-service */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/selection-service.js"), exports);
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./strings */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/strings.js"), exports);
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./telemetry */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/telemetry.js"), exports);
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./types */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/types.js"), exports);
var uri_1 = __webpack_require__(/*! ./uri */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/uri.js");
Object.defineProperty(exports, "URI", ({ enumerable: true, get: function () { return uri_1.default; } }));
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./uuid */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/uuid.js"), exports);
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./view-column */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/view-column.js"), exports);
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./version */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/version.js"), exports);


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/keybinding.js":
/*!***************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/common/keybinding.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2017 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RawKeybinding = exports.Keybinding = void 0;
const types_1 = __webpack_require__(/*! ./types */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/types.js");
var Keybinding;
(function (Keybinding) {
    /**
     * Compares two keybindings for equality.
     * Can optionally ignore the keybinding and/or args property in the comparison.
     * @param a The first Keybinding in the comparison
     * @param b The second Keybinding in the comparison
     * @param ignoreKeybinding Ignore the 'keybinding' property in the comparison
     * @param ignoreArgs Ignore the 'args' property in the comparison
     */
    function equals(a, b, ignoreKeybinding = false, ignoreArgs = false) {
        if (a.command === b.command &&
            (a.context || '') === (b.context || '') &&
            (a.when || '') === (b.when || '') &&
            (ignoreKeybinding || a.keybinding === b.keybinding) &&
            (ignoreArgs || (a.args || '') === (b.args || ''))) {
            return true;
        }
        return false;
    }
    Keybinding.equals = equals;
    /**
     * Returns a new object only containing properties which
     * are described on the `Keybinding` API.
     *
     * @param binding the binding to create an API object for.
     */
    function apiObjectify(binding) {
        return {
            command: binding.command,
            keybinding: retrieveKeybinding(binding),
            context: binding.context,
            when: binding.when,
            args: binding.args
        };
    }
    Keybinding.apiObjectify = apiObjectify;
    function retrieveKeybinding(binding) {
        var _a, _b;
        return (_b = (_a = binding.keybinding) !== null && _a !== void 0 ? _a : binding.key) !== null && _b !== void 0 ? _b : '';
    }
    Keybinding.retrieveKeybinding = retrieveKeybinding;
    /**
     * Returns with the string representation of the binding.
     * Any additional properties which are not described on
     * the `Keybinding` API will be ignored.
     *
     * @param binding the binding to stringify.
     */
    function stringify(binding) {
        return JSON.stringify(apiObjectify(binding));
    }
    Keybinding.stringify = stringify;
    /* Determine whether object is a KeyBinding */
    function is(arg) {
        return (0, types_1.isObject)(arg) && 'command' in arg && 'keybinding' in arg;
    }
    Keybinding.is = is;
    function replaceKeybinding(keybindings, oldKeybinding, newKeybinding) {
        const indexOld = keybindings.findIndex(keybinding => Keybinding.equals(keybinding, oldKeybinding, false, true));
        if (indexOld >= 0) {
            const indexNew = keybindings.findIndex(keybinding => Keybinding.equals(keybinding, newKeybinding, false, true));
            if (indexNew >= 0 && indexNew !== indexOld) {
                // if keybindings already contain the new keybinding, remove the old keybinding and update the new one
                keybindings.splice(indexOld, 1);
                keybindings[indexNew] = newKeybinding;
            }
            else {
                keybindings[indexOld] = newKeybinding;
            }
            return true;
        }
        return false;
    }
    Keybinding.replaceKeybinding = replaceKeybinding;
    function addKeybinding(keybindings, newKeybinding) {
        const index = keybindings.findIndex(keybinding => Keybinding.equals(keybinding, newKeybinding, false, true));
        if (index >= 0) {
            // if keybindings already contain the new keybinding, update it
            keybindings[index] = newKeybinding;
        }
        else {
            keybindings.push(newKeybinding);
        }
    }
    Keybinding.addKeybinding = addKeybinding;
})(Keybinding = exports.Keybinding || (exports.Keybinding = {}));
var RawKeybinding;
(function (RawKeybinding) {
    function is(candidate) {
        return (0, types_1.isObject)(candidate) && 'command' in candidate && 'key' in candidate;
    }
    RawKeybinding.is = is;
})(RawKeybinding = exports.RawKeybinding || (exports.RawKeybinding = {}));


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/keyboard/keyboard-layout-provider.js":
/*!**************************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/common/keyboard/keyboard-layout-provider.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2019 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.KeyValidator = exports.KeyboardLayoutChangeNotifier = exports.KeyboardLayoutProvider = exports.keyboardPath = void 0;
exports.keyboardPath = '/services/keyboard';
exports.KeyboardLayoutProvider = Symbol('KeyboardLayoutProvider');
exports.KeyboardLayoutChangeNotifier = Symbol('KeyboardLayoutChangeNotifier');
exports.KeyValidator = Symbol('KeyValidator');


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/keys.js":
/*!*********************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/common/keys.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2017-2019 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.KeysOrKeyCodes = exports.Key = exports.SpecialCases = exports.KeyModifier = exports.KeyCode = exports.KeySequence = void 0;
const nls_1 = __webpack_require__(/*! ./nls */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/nls.js");
const os_1 = __webpack_require__(/*! ./os */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/os.js");
const types_1 = __webpack_require__(/*! ./types */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/types.js");
var KeySequence;
(function (KeySequence) {
    function equals(a, b) {
        if (a.length !== b.length) {
            return false;
        }
        for (let i = 0; i < a.length; i++) {
            if (!a[i].equals(b[i])) {
                return false;
            }
        }
        return true;
    }
    KeySequence.equals = equals;
    let CompareResult;
    (function (CompareResult) {
        CompareResult[CompareResult["NONE"] = 0] = "NONE";
        CompareResult[CompareResult["PARTIAL"] = 1] = "PARTIAL";
        CompareResult[CompareResult["SHADOW"] = 2] = "SHADOW";
        CompareResult[CompareResult["FULL"] = 3] = "FULL";
    })(CompareResult = KeySequence.CompareResult || (KeySequence.CompareResult = {}));
    /* Compares two KeySequences, returns:
     * FULL if the KeySequences are the same.
     * PARTIAL if the KeySequence a part of b.
     * SHADOW if the KeySequence b part of a.
     * NONE if the KeySequences are not the same at all.
     */
    function compare(a, b) {
        let first = a;
        let second = b;
        let shadow = false;
        if (b.length < a.length) {
            first = b;
            second = a;
            shadow = true;
        }
        for (let i = 0; i < first.length; i++) {
            if (first[i].equals(second[i]) === false) {
                return KeySequence.CompareResult.NONE;
            }
        }
        if (first.length < second.length) {
            if (shadow === false) {
                return KeySequence.CompareResult.PARTIAL;
            }
            else {
                return KeySequence.CompareResult.SHADOW;
            }
        }
        return KeySequence.CompareResult.FULL;
    }
    KeySequence.compare = compare;
    function parse(keybinding) {
        const keyCodes = [];
        const rawKeyCodes = keybinding.trim().split(/\s+/g);
        for (const rawKeyCode of rawKeyCodes) {
            const keyCode = KeyCode.parse(rawKeyCode);
            if (keyCode !== undefined) {
                keyCodes.push(keyCode);
            }
        }
        return keyCodes;
    }
    KeySequence.parse = parse;
})(KeySequence = exports.KeySequence || (exports.KeySequence = {}));
/**
 * Representation of a pressed key combined with key modifiers.
 */
class KeyCode {
    constructor(schema) {
        const key = schema.key;
        if (key) {
            if (key.code && key.keyCode && key.easyString) {
                this.key = key;
            }
            else if (key.code) {
                this.key = Key.getKey(key.code);
            }
            else if (key.keyCode) {
                this.key = Key.getKey(key.keyCode);
            }
        }
        this.ctrl = !!schema.ctrl;
        this.shift = !!schema.shift;
        this.alt = !!schema.alt;
        this.meta = !!schema.meta;
        this.character = schema.character;
    }
    /**
     * Return true if this KeyCode only contains modifiers.
     */
    isModifierOnly() {
        return this.key === undefined;
    }
    /**
     * Return true if the given KeyCode is equal to this one.
     */
    equals(other) {
        if (this.key && (!other.key || this.key.code !== other.key.code) || !this.key && other.key) {
            return false;
        }
        return this.ctrl === other.ctrl && this.alt === other.alt && this.shift === other.shift && this.meta === other.meta;
    }
    /*
     * Return a keybinding string compatible with the `Keybinding.keybinding` property.
     */
    toString() {
        const result = [];
        if (this.meta) {
            result.push(SpecialCases.META);
        }
        if (this.shift) {
            result.push(Key.SHIFT_LEFT.easyString);
        }
        if (this.alt) {
            result.push(Key.ALT_LEFT.easyString);
        }
        if (this.ctrl) {
            result.push(Key.CONTROL_LEFT.easyString);
        }
        if (this.key) {
            result.push(this.key.easyString);
        }
        return result.join('+');
    }
    /**
     * Create a KeyCode from one of several input types.
     */
    static createKeyCode(input, eventDispatch = 'code') {
        if (typeof input === 'string') {
            const parts = input.split('+');
            if (!KeyCode.isModifierString(parts[0])) {
                return KeyCode.createKeyCode({
                    first: Key.getKey(parts[0]),
                    modifiers: parts.slice(1)
                });
            }
            return KeyCode.createKeyCode({ modifiers: parts });
        }
        else if (KeyCode.isKeyboardEvent(input)) {
            const key = KeyCode.toKey(input, eventDispatch);
            return new KeyCode({
                key: Key.isModifier(key.code) ? undefined : key,
                meta: os_1.isOSX && input.metaKey,
                shift: input.shiftKey,
                alt: input.altKey,
                ctrl: input.ctrlKey,
                character: KeyCode.toCharacter(input)
            });
        }
        else if (input.first || input.modifiers) {
            const keystroke = input;
            const schema = {
                key: keystroke.first
            };
            if (keystroke.modifiers) {
                if (os_1.isOSX) {
                    schema.meta = keystroke.modifiers.some(mod => mod === KeyModifier.CtrlCmd);
                    schema.ctrl = keystroke.modifiers.some(mod => mod === KeyModifier.MacCtrl);
                }
                else {
                    schema.meta = false;
                    schema.ctrl = keystroke.modifiers.some(mod => mod === KeyModifier.CtrlCmd);
                }
                schema.shift = keystroke.modifiers.some(mod => mod === KeyModifier.Shift);
                schema.alt = keystroke.modifiers.some(mod => mod === KeyModifier.Alt);
            }
            return new KeyCode(schema);
        }
        else {
            return new KeyCode(input);
        }
    }
    /* Reset the key hashmap, this is for testing purposes.  */
    static resetKeyBindings() {
        KeyCode.keybindings = {};
    }
    /**
     * Parses a string and returns a KeyCode object.
     * @param keybinding String representation of a keybinding
     */
    static parse(keybinding) {
        if (KeyCode.keybindings[keybinding]) {
            return KeyCode.keybindings[keybinding];
        }
        const schema = {};
        const keys = [];
        let currentKey = '';
        for (const character of keybinding.trim().toLowerCase()) {
            if (currentKey && (character === '-' || character === '+')) {
                keys.push(currentKey);
                currentKey = '';
            }
            else if (character !== '+') {
                currentKey += character;
            }
        }
        if (currentKey) {
            keys.push(currentKey);
        }
        /* If duplicates i.e ctrl+ctrl+a or alt+alt+b or b+alt+b it is invalid */
        if (keys.length !== new Set(keys).size) {
            throw new Error(nls_1.nls.localize('theia/core/keybinding/duplicateModifierError', "Can't parse keybinding {0} Duplicate modifiers", keybinding));
        }
        for (let keyString of keys) {
            if (SPECIAL_ALIASES[keyString] !== undefined) {
                keyString = SPECIAL_ALIASES[keyString];
            }
            const key = EASY_TO_KEY[keyString];
            /* meta only works on macOS */
            if (keyString === SpecialCases.META) {
                if (os_1.isOSX) {
                    schema.meta = true;
                }
                else {
                    throw new Error(nls_1.nls.localize('theia/core/keybinding/metaError', "Can't parse keybinding {0} meta is for OSX only", keybinding));
                }
                /* ctrlcmd for M1 keybindings that work on both macOS and other platforms */
            }
            else if (keyString === SpecialCases.CTRLCMD) {
                if (os_1.isOSX) {
                    schema.meta = true;
                }
                else {
                    schema.ctrl = true;
                }
            }
            else if (Key.isKey(key)) {
                if (Key.isModifier(key.code)) {
                    if (key.code === Key.CONTROL_LEFT.code || key.code === Key.CONTROL_RIGHT.code) {
                        schema.ctrl = true;
                    }
                    else if (key.code === Key.SHIFT_LEFT.code || key.code === Key.SHIFT_RIGHT.code) {
                        schema.shift = true;
                    }
                    else if (key.code === Key.ALT_LEFT.code || key.code === Key.ALT_RIGHT.code) {
                        schema.alt = true;
                    }
                }
                else {
                    schema.key = key;
                }
            }
            else {
                throw new Error(nls_1.nls.localize('theia/core/keybinding/unrecognizedKeyError', 'Unrecognized key {0} in {1}', keyString, keybinding));
            }
        }
        KeyCode.keybindings[keybinding] = new KeyCode(schema);
        return KeyCode.keybindings[keybinding];
    }
}
exports.KeyCode = KeyCode;
KeyCode.keybindings = {};
(function (KeyCode) {
    /*
     * Return true if the string is a modifier M1 to M4.
     */
    function isModifierString(key) {
        return key === KeyModifier.CtrlCmd
            || key === KeyModifier.Shift
            || key === KeyModifier.Alt
            || key === KeyModifier.MacCtrl;
    }
    KeyCode.isModifierString = isModifierString;
    /**
     * Different scopes have different execution environments. This means that they have different built-ins
     * (different global object, different constructors, etc.). This may result in unexpected results. For instance,
     * `[] instanceof window.frames[0].Array` will return `false`, because `Array.prototype !== window.frames[0].Array`
     * and arrays inherit from the former.
     * See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/instanceof
     *
     * Note: just add another check if the current `event.type` checking is insufficient.
     */
    function isKeyboardEvent(event) {
        if (typeof KeyboardEvent === 'undefined') { // This can happen in tests
            return false;
        }
        if (event instanceof KeyboardEvent) {
            return true;
        }
        const { type } = event;
        if (type) {
            return type === 'keypress' || type === 'keydown' || type === 'keyup';
        }
        return false;
    }
    KeyCode.isKeyboardEvent = isKeyboardEvent;
    /**
     * Determine the pressed key of a keyboard event. This key should correspond to the physical key according
     * to a standard US keyboard layout. International keyboard layouts are handled by `KeyboardLayoutService`.
     *
     * `keyIdentifier` is used to access this deprecated field:
     * https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/keyIdentifier
     */
    function toKey(event, dispatch = 'code') {
        const code = event.code;
        if (code && dispatch === 'code') {
            if (os_1.isOSX) {
                // https://github.com/eclipse-theia/theia/issues/4986
                const char = event.key;
                if (code === 'IntlBackslash' && (char === '`' || char === '~')) {
                    return Key.BACKQUOTE;
                }
                else if (code === 'Backquote' && (char === '§' || char === '±')) {
                    return Key.INTL_BACKSLASH;
                }
            }
            // https://github.com/eclipse-theia/theia/issues/7315
            if (code.startsWith('Numpad') && event.key && event.key.length > 1) {
                const k = Key.getKey(event.key);
                if (k) {
                    return k;
                }
            }
            const key = Key.getKey(code);
            if (key) {
                return key;
            }
        }
        // tslint:disable-next-line: deprecation
        const keyCode = event.keyCode;
        if (keyCode) {
            const key = Key.getKey(keyCode);
            if (key) {
                return key;
            }
        }
        const keyIdentifier = event.keyIdentifier;
        if (keyIdentifier) {
            const key = Key.getKey(keyIdentifier);
            if (key) {
                return key;
            }
        }
        throw new Error(`Cannot get key code from the keyboard event: ${event}.`);
    }
    KeyCode.toKey = toKey;
    /**
     * Determine the actual printable character that is generated from a pressed key.
     * If the key does not correspond to a printable character, `undefined` is returned.
     * The result may be altered by modifier keys.
     */
    function toCharacter(event) {
        const key = event.key;
        // Use the key property if it contains exactly one unicode character
        if (key && Array.from(key).length === 1) {
            return key;
        }
        const charCode = event.charCode;
        // Use the charCode property if it does not correspond to a unicode control character
        if (charCode && charCode > 0x1f && !(charCode >= 0x80 && charCode <= 0x9f)) {
            return String.fromCharCode(charCode);
        }
        return undefined;
    }
    KeyCode.toCharacter = toCharacter;
})(KeyCode = exports.KeyCode || (exports.KeyCode = {}));
var KeyModifier;
(function (KeyModifier) {
    /**
     * M1 is the COMMAND key on MacOS X, and the CTRL key on most other platforms.
     */
    KeyModifier["CtrlCmd"] = "M1";
    /**
     * M2 is the SHIFT key.
     */
    KeyModifier["Shift"] = "M2";
    /**
     * M3 is the Option key on MacOS X, and the ALT key on most other platforms.
     */
    KeyModifier["Alt"] = "M3";
    /**
     * M4 is the CTRL key on MacOS X, and is undefined on other platforms.
     */
    KeyModifier["MacCtrl"] = "M4";
})(KeyModifier = exports.KeyModifier || (exports.KeyModifier = {}));
(function (KeyModifier) {
    /**
     * The CTRL key, independently of the platform.
     * _Note:_ In general `KeyModifier.CtrlCmd` should be preferred over this constant.
     */
    KeyModifier.CTRL = os_1.isOSX ? KeyModifier.MacCtrl : KeyModifier.CtrlCmd;
    /**
     * An alias for the SHIFT key (`KeyModifier.Shift`).
     */
    KeyModifier.SHIFT = KeyModifier.Shift;
    /**
     * `true` if the argument represents a modifier. Otherwise, `false`.
     */
    function isModifier(key) {
        if (key) {
            switch (key) {
                case 'M1': // Fall through.
                case 'M2': // Fall through.
                case 'M3': // Fall through.
                case 'M4': return true;
                default: return false;
            }
        }
        return false;
    }
    KeyModifier.isModifier = isModifier;
})(KeyModifier = exports.KeyModifier || (exports.KeyModifier = {}));
const CODE_TO_KEY = {};
const KEY_CODE_TO_KEY = {};
const EASY_TO_KEY = {}; // From 'ctrl' to Key structure
const MODIFIERS = [];
const SPECIAL_ALIASES = {
    'option': 'alt',
    'command': 'meta',
    'cmd': 'meta',
    'return': 'enter',
    'esc': 'escape',
    'mod': 'ctrl',
    'ins': 'insert',
    'del': 'delete',
    'control': 'ctrl',
};
var SpecialCases;
(function (SpecialCases) {
    SpecialCases.META = 'meta';
    SpecialCases.CTRLCMD = 'ctrlcmd';
})(SpecialCases = exports.SpecialCases || (exports.SpecialCases = {}));
var Key;
(function (Key) {
    function isKey(arg) {
        return (0, types_1.isObject)(arg) && 'code' in arg && 'keyCode' in arg;
    }
    Key.isKey = isKey;
    function getKey(arg) {
        if (typeof arg === 'number') {
            return KEY_CODE_TO_KEY[arg];
        }
        else {
            return CODE_TO_KEY[arg];
        }
    }
    Key.getKey = getKey;
    function isModifier(arg) {
        if (typeof arg === 'number') {
            return MODIFIERS.find(key => key.keyCode === arg) !== undefined;
        }
        return MODIFIERS.find(key => key.code === arg) !== undefined;
    }
    Key.isModifier = isModifier;
    function equals(key, keyCode) {
        return !!keyCode.key && key.keyCode === keyCode.key.keyCode;
    }
    Key.equals = equals;
    Key.BACKSPACE = { code: 'Backspace', keyCode: 8, easyString: 'backspace' };
    Key.TAB = { code: 'Tab', keyCode: 9, easyString: 'tab' };
    Key.ENTER = { code: 'Enter', keyCode: 13, easyString: 'enter' };
    Key.ESCAPE = { code: 'Escape', keyCode: 27, easyString: 'escape' };
    Key.SPACE = { code: 'Space', keyCode: 32, easyString: 'space' };
    Key.PAGE_UP = { code: 'PageUp', keyCode: 33, easyString: 'pageup' };
    Key.PAGE_DOWN = { code: 'PageDown', keyCode: 34, easyString: 'pagedown' };
    Key.END = { code: 'End', keyCode: 35, easyString: 'end' };
    Key.HOME = { code: 'Home', keyCode: 36, easyString: 'home' };
    Key.ARROW_LEFT = { code: 'ArrowLeft', keyCode: 37, easyString: 'left' };
    Key.ARROW_UP = { code: 'ArrowUp', keyCode: 38, easyString: 'up' };
    Key.ARROW_RIGHT = { code: 'ArrowRight', keyCode: 39, easyString: 'right' };
    Key.ARROW_DOWN = { code: 'ArrowDown', keyCode: 40, easyString: 'down' };
    Key.INSERT = { code: 'Insert', keyCode: 45, easyString: 'insert' };
    Key.DELETE = { code: 'Delete', keyCode: 46, easyString: 'delete' };
    Key.SHIFT_LEFT = { code: 'ShiftLeft', keyCode: 16, easyString: 'shift' };
    Key.SHIFT_RIGHT = { code: 'ShiftRight', keyCode: 16, easyString: 'shift' };
    Key.CONTROL_LEFT = { code: 'ControlLeft', keyCode: 17, easyString: 'ctrl' };
    Key.CONTROL_RIGHT = { code: 'ControlRight', keyCode: 17, easyString: 'ctrl' };
    Key.ALT_LEFT = { code: 'AltLeft', keyCode: 18, easyString: 'alt' };
    Key.ALT_RIGHT = { code: 'AltRight', keyCode: 18, easyString: 'alt' };
    Key.CAPS_LOCK = { code: 'CapsLock', keyCode: 20, easyString: 'capslock' };
    Key.OS_LEFT = { code: 'OSLeft', keyCode: 91, easyString: 'super' };
    Key.OS_RIGHT = { code: 'OSRight', keyCode: 92, easyString: 'super' };
    Key.DIGIT0 = { code: 'Digit0', keyCode: 48, easyString: '0' };
    Key.DIGIT1 = { code: 'Digit1', keyCode: 49, easyString: '1' };
    Key.DIGIT2 = { code: 'Digit2', keyCode: 50, easyString: '2' };
    Key.DIGIT3 = { code: 'Digit3', keyCode: 51, easyString: '3' };
    Key.DIGIT4 = { code: 'Digit4', keyCode: 52, easyString: '4' };
    Key.DIGIT5 = { code: 'Digit5', keyCode: 53, easyString: '5' };
    Key.DIGIT6 = { code: 'Digit6', keyCode: 54, easyString: '6' };
    Key.DIGIT7 = { code: 'Digit7', keyCode: 55, easyString: '7' };
    Key.DIGIT8 = { code: 'Digit8', keyCode: 56, easyString: '8' };
    Key.DIGIT9 = { code: 'Digit9', keyCode: 57, easyString: '9' };
    Key.KEY_A = { code: 'KeyA', keyCode: 65, easyString: 'a' };
    Key.KEY_B = { code: 'KeyB', keyCode: 66, easyString: 'b' };
    Key.KEY_C = { code: 'KeyC', keyCode: 67, easyString: 'c' };
    Key.KEY_D = { code: 'KeyD', keyCode: 68, easyString: 'd' };
    Key.KEY_E = { code: 'KeyE', keyCode: 69, easyString: 'e' };
    Key.KEY_F = { code: 'KeyF', keyCode: 70, easyString: 'f' };
    Key.KEY_G = { code: 'KeyG', keyCode: 71, easyString: 'g' };
    Key.KEY_H = { code: 'KeyH', keyCode: 72, easyString: 'h' };
    Key.KEY_I = { code: 'KeyI', keyCode: 73, easyString: 'i' };
    Key.KEY_J = { code: 'KeyJ', keyCode: 74, easyString: 'j' };
    Key.KEY_K = { code: 'KeyK', keyCode: 75, easyString: 'k' };
    Key.KEY_L = { code: 'KeyL', keyCode: 76, easyString: 'l' };
    Key.KEY_M = { code: 'KeyM', keyCode: 77, easyString: 'm' };
    Key.KEY_N = { code: 'KeyN', keyCode: 78, easyString: 'n' };
    Key.KEY_O = { code: 'KeyO', keyCode: 79, easyString: 'o' };
    Key.KEY_P = { code: 'KeyP', keyCode: 80, easyString: 'p' };
    Key.KEY_Q = { code: 'KeyQ', keyCode: 81, easyString: 'q' };
    Key.KEY_R = { code: 'KeyR', keyCode: 82, easyString: 'r' };
    Key.KEY_S = { code: 'KeyS', keyCode: 83, easyString: 's' };
    Key.KEY_T = { code: 'KeyT', keyCode: 84, easyString: 't' };
    Key.KEY_U = { code: 'KeyU', keyCode: 85, easyString: 'u' };
    Key.KEY_V = { code: 'KeyV', keyCode: 86, easyString: 'v' };
    Key.KEY_W = { code: 'KeyW', keyCode: 87, easyString: 'w' };
    Key.KEY_X = { code: 'KeyX', keyCode: 88, easyString: 'x' };
    Key.KEY_Y = { code: 'KeyY', keyCode: 89, easyString: 'y' };
    Key.KEY_Z = { code: 'KeyZ', keyCode: 90, easyString: 'z' };
    Key.MULTIPLY = { code: 'NumpadMultiply', keyCode: 106, easyString: 'multiply' };
    Key.ADD = { code: 'NumpadAdd', keyCode: 107, easyString: 'add' };
    Key.DECIMAL = { code: 'NumpadDecimal', keyCode: 108, easyString: 'decimal' };
    Key.SUBTRACT = { code: 'NumpadSubtract', keyCode: 109, easyString: 'subtract' };
    Key.DIVIDE = { code: 'NumpadDivide', keyCode: 111, easyString: 'divide' };
    Key.F1 = { code: 'F1', keyCode: 112, easyString: 'f1' };
    Key.F2 = { code: 'F2', keyCode: 113, easyString: 'f2' };
    Key.F3 = { code: 'F3', keyCode: 114, easyString: 'f3' };
    Key.F4 = { code: 'F4', keyCode: 115, easyString: 'f4' };
    Key.F5 = { code: 'F5', keyCode: 116, easyString: 'f5' };
    Key.F6 = { code: 'F6', keyCode: 117, easyString: 'f6' };
    Key.F7 = { code: 'F7', keyCode: 118, easyString: 'f7' };
    Key.F8 = { code: 'F8', keyCode: 119, easyString: 'f8' };
    Key.F9 = { code: 'F9', keyCode: 120, easyString: 'f9' };
    Key.F10 = { code: 'F10', keyCode: 121, easyString: 'f10' };
    Key.F11 = { code: 'F11', keyCode: 122, easyString: 'f11' };
    Key.F12 = { code: 'F12', keyCode: 123, easyString: 'f12' };
    Key.F13 = { code: 'F13', keyCode: 124, easyString: 'f13' };
    Key.F14 = { code: 'F14', keyCode: 125, easyString: 'f14' };
    Key.F15 = { code: 'F15', keyCode: 126, easyString: 'f15' };
    Key.F16 = { code: 'F16', keyCode: 127, easyString: 'f16' };
    Key.F17 = { code: 'F17', keyCode: 128, easyString: 'f17' };
    Key.F18 = { code: 'F18', keyCode: 129, easyString: 'f18' };
    Key.F19 = { code: 'F19', keyCode: 130, easyString: 'f19' };
    Key.F20 = { code: 'F20', keyCode: 131, easyString: 'f20' };
    Key.F21 = { code: 'F21', keyCode: 132, easyString: 'f21' };
    Key.F22 = { code: 'F22', keyCode: 133, easyString: 'f22' };
    Key.F23 = { code: 'F23', keyCode: 134, easyString: 'f23' };
    Key.F24 = { code: 'F24', keyCode: 135, easyString: 'f24' };
    Key.NUM_LOCK = { code: 'NumLock', keyCode: 144, easyString: 'numlock' };
    Key.SEMICOLON = { code: 'Semicolon', keyCode: 186, easyString: ';' };
    Key.EQUAL = { code: 'Equal', keyCode: 187, easyString: '=' };
    Key.COMMA = { code: 'Comma', keyCode: 188, easyString: ',' };
    Key.MINUS = { code: 'Minus', keyCode: 189, easyString: '-' };
    Key.PERIOD = { code: 'Period', keyCode: 190, easyString: '.' };
    Key.SLASH = { code: 'Slash', keyCode: 191, easyString: '/' };
    Key.BACKQUOTE = { code: 'Backquote', keyCode: 192, easyString: '`' };
    Key.INTL_RO = { code: 'IntlRo', keyCode: 193, easyString: 'intlro' };
    Key.BRACKET_LEFT = { code: 'BracketLeft', keyCode: 219, easyString: '[' };
    Key.BACKSLASH = { code: 'Backslash', keyCode: 220, easyString: '\\' };
    Key.BRACKET_RIGHT = { code: 'BracketRight', keyCode: 221, easyString: ']' };
    Key.QUOTE = { code: 'Quote', keyCode: 222, easyString: '\'' };
    Key.INTL_BACKSLASH = { code: 'IntlBackslash', keyCode: 229, easyString: 'intlbackslash' };
    Key.INTL_YEN = { code: 'IntlYen', keyCode: 255, easyString: 'intlyen' };
    Key.MAX_KEY_CODE = Key.INTL_YEN.keyCode;
})(Key = exports.Key || (exports.Key = {}));
/* -------------------- Initialize the static key mappings -------------------- */
(() => {
    // Set the default key mappings from the constants in the Key namespace
    Object.keys(Key).map(prop => Reflect.get(Key, prop)).filter(key => Key.isKey(key)).forEach(key => {
        CODE_TO_KEY[key.code] = key;
        KEY_CODE_TO_KEY[key.keyCode] = key;
        EASY_TO_KEY[key.easyString] = key;
    });
    // Set additional key mappings
    CODE_TO_KEY['Numpad0'] = Key.DIGIT0;
    KEY_CODE_TO_KEY[96] = Key.DIGIT0;
    CODE_TO_KEY['Numpad1'] = Key.DIGIT1;
    KEY_CODE_TO_KEY[97] = Key.DIGIT1;
    CODE_TO_KEY['Numpad2'] = Key.DIGIT2;
    KEY_CODE_TO_KEY[98] = Key.DIGIT2;
    CODE_TO_KEY['Numpad3'] = Key.DIGIT3;
    KEY_CODE_TO_KEY[99] = Key.DIGIT3;
    CODE_TO_KEY['Numpad4'] = Key.DIGIT4;
    KEY_CODE_TO_KEY[100] = Key.DIGIT4;
    CODE_TO_KEY['Numpad5'] = Key.DIGIT5;
    KEY_CODE_TO_KEY[101] = Key.DIGIT5;
    CODE_TO_KEY['Numpad6'] = Key.DIGIT6;
    KEY_CODE_TO_KEY[102] = Key.DIGIT6;
    CODE_TO_KEY['Numpad7'] = Key.DIGIT7;
    KEY_CODE_TO_KEY[103] = Key.DIGIT7;
    CODE_TO_KEY['Numpad8'] = Key.DIGIT8;
    KEY_CODE_TO_KEY[104] = Key.DIGIT8;
    CODE_TO_KEY['Numpad9'] = Key.DIGIT9;
    KEY_CODE_TO_KEY[105] = Key.DIGIT9;
    CODE_TO_KEY['NumpadEnter'] = Key.ENTER;
    CODE_TO_KEY['NumpadEqual'] = Key.EQUAL;
    CODE_TO_KEY['MetaLeft'] = Key.OS_LEFT; // Chrome, Safari
    KEY_CODE_TO_KEY[224] = Key.OS_LEFT; // Firefox on Mac
    CODE_TO_KEY['MetaRight'] = Key.OS_RIGHT; // Chrome, Safari
    KEY_CODE_TO_KEY[93] = Key.OS_RIGHT; // Chrome, Safari, Edge
    KEY_CODE_TO_KEY[225] = Key.ALT_RIGHT; // Linux
    KEY_CODE_TO_KEY[110] = Key.DECIMAL; // Mac, Windows
    KEY_CODE_TO_KEY[59] = Key.SEMICOLON; // Firefox
    KEY_CODE_TO_KEY[61] = Key.EQUAL; // Firefox
    KEY_CODE_TO_KEY[173] = Key.MINUS; // Firefox
    KEY_CODE_TO_KEY[226] = Key.BACKSLASH; // Chrome, Edge on Windows
    KEY_CODE_TO_KEY[60] = Key.BACKSLASH; // Firefox on Linux
    // Set the modifier keys
    MODIFIERS.push(...[Key.ALT_LEFT, Key.ALT_RIGHT, Key.CONTROL_LEFT, Key.CONTROL_RIGHT, Key.OS_LEFT, Key.OS_RIGHT, Key.SHIFT_LEFT, Key.SHIFT_RIGHT]);
})();
var KeysOrKeyCodes;
(function (KeysOrKeyCodes) {
    KeysOrKeyCodes.toKeyCode = (keyOrKeyCode) => keyOrKeyCode instanceof KeyCode ? keyOrKeyCode : KeyCode.createKeyCode({ first: keyOrKeyCode });
    KeysOrKeyCodes.toKeyCodes = (keysOrKeyCodes) => {
        if (keysOrKeyCodes instanceof KeyCode) {
            return [keysOrKeyCodes];
        }
        else if (Array.isArray(keysOrKeyCodes)) {
            return keysOrKeyCodes.slice().map(KeysOrKeyCodes.toKeyCode);
        }
        return [KeysOrKeyCodes.toKeyCode(keysOrKeyCodes)];
    };
})(KeysOrKeyCodes = exports.KeysOrKeyCodes || (exports.KeysOrKeyCodes = {}));


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/logger-protocol.js":
/*!********************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/common/logger-protocol.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2017 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ConsoleLogger = exports.LogLevel = exports.rootLoggerName = exports.DispatchingLoggerClient = exports.ILoggerClient = exports.loggerPath = exports.ILoggerServer = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/es/inversify.js");
exports.ILoggerServer = Symbol('ILoggerServer');
exports.loggerPath = '/services/logger';
exports.ILoggerClient = Symbol('ILoggerClient');
let DispatchingLoggerClient = class DispatchingLoggerClient {
    constructor() {
        this.clients = new Set();
    }
    onLogLevelChanged(event) {
        this.clients.forEach(client => client.onLogLevelChanged(event));
    }
    onLogConfigChanged() {
        this.clients.forEach(client => client.onLogConfigChanged());
    }
};
DispatchingLoggerClient = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)()
], DispatchingLoggerClient);
exports.DispatchingLoggerClient = DispatchingLoggerClient;
exports.rootLoggerName = 'root';
var LogLevel;
(function (LogLevel) {
    LogLevel[LogLevel["FATAL"] = 60] = "FATAL";
    LogLevel[LogLevel["ERROR"] = 50] = "ERROR";
    LogLevel[LogLevel["WARN"] = 40] = "WARN";
    LogLevel[LogLevel["INFO"] = 30] = "INFO";
    LogLevel[LogLevel["DEBUG"] = 20] = "DEBUG";
    LogLevel[LogLevel["TRACE"] = 10] = "TRACE";
})(LogLevel = exports.LogLevel || (exports.LogLevel = {}));
(function (LogLevel) {
    LogLevel.strings = new Map([
        [LogLevel.FATAL, 'fatal'],
        [LogLevel.ERROR, 'error'],
        [LogLevel.WARN, 'warn'],
        [LogLevel.INFO, 'info'],
        [LogLevel.DEBUG, 'debug'],
        [LogLevel.TRACE, 'trace']
    ]);
    function toString(level) {
        return LogLevel.strings.get(level);
    }
    LogLevel.toString = toString;
    function fromString(levelStr) {
        for (const pair of LogLevel.strings) {
            if (pair[1] === levelStr) {
                return pair[0];
            }
        }
        return undefined;
    }
    LogLevel.fromString = fromString;
})(LogLevel = exports.LogLevel || (exports.LogLevel = {}));
/* eslint-disable @typescript-eslint/no-explicit-any */
var ConsoleLogger;
(function (ConsoleLogger) {
    const originalConsoleLog = console.log;
    const consoles = new Map([
        [LogLevel.FATAL, console.error],
        [LogLevel.ERROR, console.error],
        [LogLevel.WARN, console.warn],
        [LogLevel.INFO, console.info],
        [LogLevel.DEBUG, console.debug],
        [LogLevel.TRACE, console.trace]
    ]);
    function reset() {
        console.error = consoles.get(LogLevel.ERROR);
        console.warn = consoles.get(LogLevel.WARN);
        console.info = consoles.get(LogLevel.INFO);
        console.debug = consoles.get(LogLevel.DEBUG);
        console.trace = consoles.get(LogLevel.TRACE);
        console.log = originalConsoleLog;
    }
    ConsoleLogger.reset = reset;
    function log(name, logLevel, message, params) {
        const console = consoles.get(logLevel) || originalConsoleLog;
        const severity = (LogLevel.strings.get(logLevel) || 'unknown').toUpperCase();
        const now = new Date();
        console(`${now.toISOString()} ${name} ${severity} ${message}`, ...params);
    }
    ConsoleLogger.log = log;
})(ConsoleLogger = exports.ConsoleLogger || (exports.ConsoleLogger = {}));


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/logger-watcher.js":
/*!*******************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/common/logger-watcher.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2017 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LoggerWatcher = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/es/inversify.js");
const event_1 = __webpack_require__(/*! ./event */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/event.js");
let LoggerWatcher = class LoggerWatcher {
    constructor() {
        this.onLogLevelChangedEmitter = new event_1.Emitter();
        this.onLogConfigChangedEmitter = new event_1.Emitter();
    }
    getLoggerClient() {
        const logLevelEmitter = this.onLogLevelChangedEmitter;
        const logConfigEmitter = this.onLogConfigChangedEmitter;
        return {
            onLogLevelChanged(event) {
                logLevelEmitter.fire(event);
            },
            onLogConfigChanged() {
                logConfigEmitter.fire();
            },
        };
    }
    get onLogLevelChanged() {
        return this.onLogLevelChangedEmitter.event;
    }
    get onLogConfigChanged() {
        return this.onLogConfigChangedEmitter.event;
    }
};
LoggerWatcher = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)()
], LoggerWatcher);
exports.LoggerWatcher = LoggerWatcher;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/logger.js":
/*!***********************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/common/logger.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2017 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Logger = exports.ILogger = exports.LoggerName = exports.LoggerFactory = exports.setRootLogger = exports.unsetRootLogger = exports.logger = exports.rootLoggerName = exports.LogLevel = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/es/inversify.js");
const logger_watcher_1 = __webpack_require__(/*! ./logger-watcher */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/logger-watcher.js");
const logger_protocol_1 = __webpack_require__(/*! ./logger-protocol */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/logger-protocol.js");
Object.defineProperty(exports, "LogLevel", ({ enumerable: true, get: function () { return logger_protocol_1.LogLevel; } }));
Object.defineProperty(exports, "rootLoggerName", ({ enumerable: true, get: function () { return logger_protocol_1.rootLoggerName; } }));
/**
 * Counterpart of the `#setRootLogger(ILogger)`. Restores the `console.xxx` bindings to the original one.
 * Invoking has no side-effect if `setRootLogger` was not called before. Multiple function invocation has
 * no side-effect either.
 */
function unsetRootLogger() {
    if (exports.logger !== undefined) {
        logger_protocol_1.ConsoleLogger.reset();
        exports.logger = undefined;
    }
}
exports.unsetRootLogger = unsetRootLogger;
function setRootLogger(aLogger) {
    exports.logger = aLogger;
    const log = (logLevel, message, ...optionalParams) => exports.logger.log(logLevel, message, ...optionalParams);
    console.error = log.bind(undefined, logger_protocol_1.LogLevel.ERROR);
    console.warn = log.bind(undefined, logger_protocol_1.LogLevel.WARN);
    console.info = log.bind(undefined, logger_protocol_1.LogLevel.INFO);
    console.debug = log.bind(undefined, logger_protocol_1.LogLevel.DEBUG);
    console.trace = log.bind(undefined, logger_protocol_1.LogLevel.TRACE);
    console.log = log.bind(undefined, logger_protocol_1.LogLevel.INFO);
}
exports.setRootLogger = setRootLogger;
exports.LoggerFactory = Symbol('LoggerFactory');
exports.LoggerName = Symbol('LoggerName');
exports.ILogger = Symbol('ILogger');
let Logger = class Logger {
    init() {
        if (this.name !== logger_protocol_1.rootLoggerName) {
            /* Creating a child logger.  */
            this.created = this.server.child(this.name);
        }
        else {
            /* Creating the root logger (it already exists at startup).  */
            this.created = Promise.resolve();
        }
        /* Fetch the log level so it's cached in the frontend.  */
        this._logLevel = this.created.then(_ => this.server.getLogLevel(this.name));
        /* Update the log level if it changes in the backend. */
        this.loggerWatcher.onLogLevelChanged(event => {
            this.created.then(() => {
                if (event.loggerName === this.name) {
                    this._logLevel = Promise.resolve(event.newLogLevel);
                }
            });
        });
        /* Refetch log level if overall config in backend changed. */
        this.loggerWatcher.onLogConfigChanged(() => {
            this._logLevel = this.created.then(_ => this.server.getLogLevel(this.name));
        });
    }
    setLogLevel(logLevel) {
        return new Promise(resolve => {
            this.created.then(() => {
                this._logLevel.then(oldLevel => {
                    this.server.setLogLevel(this.name, logLevel).then(() => {
                        this._logLevel = Promise.resolve(logLevel);
                        resolve();
                    });
                });
            });
        });
    }
    getLogLevel() {
        return this._logLevel;
    }
    isEnabled(logLevel) {
        return this._logLevel.then(level => logLevel >= level);
    }
    ifEnabled(logLevel) {
        return new Promise(resolve => this.isEnabled(logLevel).then(enabled => {
            if (enabled) {
                resolve();
            }
        }));
    }
    log(logLevel, arg2, ...params) {
        return this.getLog(logLevel).then(log => {
            if (typeof arg2 === 'function') {
                const loggable = arg2;
                loggable(log);
            }
            else if (arg2) {
                log(arg2, ...params);
            }
        });
    }
    getLog(logLevel) {
        return this.ifEnabled(logLevel).then(() => this.created.then(() => (message, ...params) => this.server.log(this.name, logLevel, this.format(message), params.map(p => this.format(p)))));
    }
    format(value) {
        if (value instanceof Error) {
            return value.stack || value.toString();
        }
        return value;
    }
    isTrace() {
        return this.isEnabled(logger_protocol_1.LogLevel.TRACE);
    }
    ifTrace() {
        return this.ifEnabled(logger_protocol_1.LogLevel.TRACE);
    }
    trace(arg, ...params) {
        return this.log(logger_protocol_1.LogLevel.TRACE, arg, ...params);
    }
    isDebug() {
        return this.isEnabled(logger_protocol_1.LogLevel.DEBUG);
    }
    ifDebug() {
        return this.ifEnabled(logger_protocol_1.LogLevel.DEBUG);
    }
    debug(arg, ...params) {
        return this.log(logger_protocol_1.LogLevel.DEBUG, arg, ...params);
    }
    isInfo() {
        return this.isEnabled(logger_protocol_1.LogLevel.INFO);
    }
    ifInfo() {
        return this.ifEnabled(logger_protocol_1.LogLevel.INFO);
    }
    info(arg, ...params) {
        return this.log(logger_protocol_1.LogLevel.INFO, arg, ...params);
    }
    isWarn() {
        return this.isEnabled(logger_protocol_1.LogLevel.WARN);
    }
    ifWarn() {
        return this.ifEnabled(logger_protocol_1.LogLevel.WARN);
    }
    warn(arg, ...params) {
        return this.log(logger_protocol_1.LogLevel.WARN, arg, ...params);
    }
    isError() {
        return this.isEnabled(logger_protocol_1.LogLevel.ERROR);
    }
    ifError() {
        return this.ifEnabled(logger_protocol_1.LogLevel.ERROR);
    }
    error(arg, ...params) {
        return this.log(logger_protocol_1.LogLevel.ERROR, arg, ...params);
    }
    isFatal() {
        return this.isEnabled(logger_protocol_1.LogLevel.FATAL);
    }
    ifFatal() {
        return this.ifEnabled(logger_protocol_1.LogLevel.FATAL);
    }
    fatal(arg, ...params) {
        return this.log(logger_protocol_1.LogLevel.FATAL, arg, ...params);
    }
    child(name) {
        return this.factory(name);
    }
};
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(logger_protocol_1.ILoggerServer),
    (0, tslib_1.__metadata)("design:type", Object)
], Logger.prototype, "server", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(logger_watcher_1.LoggerWatcher),
    (0, tslib_1.__metadata)("design:type", logger_watcher_1.LoggerWatcher)
], Logger.prototype, "loggerWatcher", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(exports.LoggerFactory),
    (0, tslib_1.__metadata)("design:type", Function)
], Logger.prototype, "factory", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(exports.LoggerName),
    (0, tslib_1.__metadata)("design:type", String)
], Logger.prototype, "name", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.postConstruct)(),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", []),
    (0, tslib_1.__metadata)("design:returntype", void 0)
], Logger.prototype, "init", null);
Logger = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)()
], Logger);
exports.Logger = Logger;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/lsp-types.js":
/*!**************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/common/lsp-types.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2019 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TextDocumentContentChangeDelta = void 0;
const vscode_languageserver_protocol_1 = __webpack_require__(/*! vscode-languageserver-protocol */ "../node_modules/vscode-languageserver-protocol/lib/browser/main.js");
const types_1 = __webpack_require__(/*! ./types */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/types.js");
var TextDocumentContentChangeDelta;
(function (TextDocumentContentChangeDelta) {
    function is(arg) {
        return (0, types_1.isObject)(arg)
            && (0, types_1.isString)(arg.text)
            && ((0, types_1.isNumber)(arg.rangeLength) || (0, types_1.isUndefined)(arg.rangeLength))
            && vscode_languageserver_protocol_1.Range.is(arg.range);
    }
    TextDocumentContentChangeDelta.is = is;
})(TextDocumentContentChangeDelta = exports.TextDocumentContentChangeDelta || (exports.TextDocumentContentChangeDelta = {}));


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/menu/action-menu-node.js":
/*!**************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/common/menu/action-menu-node.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2022 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ActionMenuNode = void 0;
/**
 * Node representing an action in the menu tree structure.
 * It's based on {@link MenuAction} for which it tries to determine the
 * best label, icon and sortString with the given data.
 */
class ActionMenuNode {
    constructor(action, commands) {
        this.action = action;
        this.commands = commands;
        if (action.alt) {
            this.altNode = new ActionMenuNode({ commandId: action.alt }, commands);
        }
    }
    get command() { return this.action.commandId; }
    ;
    get when() { return this.action.when; }
    get id() { return this.action.commandId; }
    get label() {
        if (this.action.label) {
            return this.action.label;
        }
        const cmd = this.commands.getCommand(this.action.commandId);
        if (!cmd) {
            console.debug(`No label for action menu node: No command "${this.action.commandId}" exists.`);
            return '';
        }
        return cmd.label || cmd.id;
    }
    get icon() {
        if (this.action.icon) {
            return this.action.icon;
        }
        const command = this.commands.getCommand(this.action.commandId);
        return command && command.iconClass;
    }
    get sortString() { return this.action.order || this.label; }
}
exports.ActionMenuNode = ActionMenuNode;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/menu/composite-menu-node.js":
/*!*****************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/common/menu/composite-menu-node.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2022 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CompositeMenuNodeWrapper = exports.CompositeMenuNode = void 0;
const menu_types_1 = __webpack_require__(/*! ./menu-types */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/menu/menu-types.js");
/**
 * Node representing a (sub)menu in the menu tree structure.
 */
class CompositeMenuNode {
    constructor(id, label, options, parent) {
        this.id = id;
        this.label = label;
        this.parent = parent;
        this._children = [];
        this.updateOptions(options);
    }
    get when() { return this._when; }
    get icon() { return this.iconClass; }
    get children() { return this._children; }
    get role() { var _a; return (_a = this._role) !== null && _a !== void 0 ? _a : (this.label ? 0 /* Submenu */ : 1 /* Group */); }
    addNode(node) {
        this._children.push(node);
        this._children.sort(menu_types_1.CompoundMenuNode.sortChildren);
        return {
            dispose: () => {
                const idx = this._children.indexOf(node);
                if (idx >= 0) {
                    this._children.splice(idx, 1);
                }
            }
        };
    }
    removeNode(id) {
        const idx = this._children.findIndex(n => n.id === id);
        if (idx >= 0) {
            this._children.splice(idx, 1);
        }
    }
    updateOptions(options) {
        var _a, _b, _c, _d, _e, _f;
        if (options) {
            this.iconClass = (_b = (_a = options.icon) !== null && _a !== void 0 ? _a : options.iconClass) !== null && _b !== void 0 ? _b : this.iconClass;
            this.label = (_c = options.label) !== null && _c !== void 0 ? _c : this.label;
            this.order = (_d = options.order) !== null && _d !== void 0 ? _d : this.order;
            this._role = (_e = options.role) !== null && _e !== void 0 ? _e : this._role;
            this._when = (_f = options.when) !== null && _f !== void 0 ? _f : this._when;
        }
    }
    get sortString() {
        return this.order || this.id;
    }
    get isSubmenu() {
        return Boolean(this.label);
    }
}
exports.CompositeMenuNode = CompositeMenuNode;
/** @deprecated @since 1.28 use CompoundMenuNode.isNavigationGroup instead */
CompositeMenuNode.isNavigationGroup = menu_types_1.CompoundMenuNode.isNavigationGroup;
class CompositeMenuNodeWrapper {
    constructor(wrapped, parent, options) {
        this.wrapped = wrapped;
        this.parent = parent;
        this.options = options;
    }
    get id() { return this.wrapped.id; }
    get label() { return this.wrapped.label; }
    get sortString() { var _a; return ((_a = this.options) === null || _a === void 0 ? void 0 : _a.order) || this.wrapped.sortString; }
    get isSubmenu() { return Boolean(this.label); }
    get role() { var _a, _b; return (_b = (_a = this.options) === null || _a === void 0 ? void 0 : _a.role) !== null && _b !== void 0 ? _b : this.wrapped.role; }
    get icon() { return this.iconClass; }
    get iconClass() { var _a, _b; return (_b = (_a = this.options) === null || _a === void 0 ? void 0 : _a.iconClass) !== null && _b !== void 0 ? _b : this.wrapped.icon; }
    get order() { return this.sortString; }
    get when() { var _a, _b; return (_b = (_a = this.options) === null || _a === void 0 ? void 0 : _a.when) !== null && _b !== void 0 ? _b : this.wrapped.when; }
    get children() { return this.wrapped.children; }
    addNode(node) { return this.wrapped.addNode(node); }
    removeNode(id) { return this.wrapped.removeNode(id); }
    updateOptions(options) { return this.wrapped.updateOptions(options); }
}
exports.CompositeMenuNodeWrapper = CompositeMenuNodeWrapper;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/menu/index.js":
/*!***************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/common/menu/index.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2022 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./action-menu-node */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/menu/action-menu-node.js"), exports);
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./composite-menu-node */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/menu/composite-menu-node.js"), exports);
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./menu-adapter */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/menu/menu-adapter.js"), exports);
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./menu-model-registry */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/menu/menu-model-registry.js"), exports);
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./menu-types */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/menu/menu-types.js"), exports);


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/menu/menu-adapter.js":
/*!**********************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/common/menu/menu-adapter.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2022 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MenuCommandAdapterRegistryImpl = exports.MenuCommandExecutorImpl = exports.MenuCommandAdapterRegistry = exports.MenuCommandAdapter = exports.MenuCommandExecutor = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/es/inversify.js");
const command_1 = __webpack_require__(/*! ../command */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/command.js");
const disposable_1 = __webpack_require__(/*! ../disposable */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/disposable.js");
exports.MenuCommandExecutor = Symbol('MenuCommandExecutor');
;
exports.MenuCommandAdapter = Symbol('MenuCommandAdapter');
exports.MenuCommandAdapterRegistry = Symbol('MenuCommandAdapterRegistry');
let MenuCommandExecutorImpl = class MenuCommandExecutorImpl {
    executeCommand(menuPath, command, ...commandArgs) {
        return this.delegate(menuPath, command, commandArgs, 'executeCommand');
    }
    isVisible(menuPath, command, ...commandArgs) {
        return this.delegate(menuPath, command, commandArgs, 'isVisible');
    }
    isEnabled(menuPath, command, ...commandArgs) {
        return this.delegate(menuPath, command, commandArgs, 'isEnabled');
    }
    isToggled(menuPath, command, ...commandArgs) {
        return this.delegate(menuPath, command, commandArgs, 'isToggled');
    }
    delegate(menuPath, command, commandArgs, method) {
        const adapter = this.adapterRegistry.getAdapterFor(menuPath, command, commandArgs);
        return (adapter
            ? adapter[method](menuPath, command, ...commandArgs)
            : this.commandRegistry[method](command, ...commandArgs));
    }
};
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(exports.MenuCommandAdapterRegistry),
    (0, tslib_1.__metadata)("design:type", Object)
], MenuCommandExecutorImpl.prototype, "adapterRegistry", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(command_1.CommandRegistry),
    (0, tslib_1.__metadata)("design:type", command_1.CommandRegistry)
], MenuCommandExecutorImpl.prototype, "commandRegistry", void 0);
MenuCommandExecutorImpl = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)()
], MenuCommandExecutorImpl);
exports.MenuCommandExecutorImpl = MenuCommandExecutorImpl;
let MenuCommandAdapterRegistryImpl = class MenuCommandAdapterRegistryImpl {
    constructor() {
        this.adapters = new Array();
    }
    registerAdapter(adapter) {
        if (!this.adapters.includes(adapter)) {
            this.adapters.push(adapter);
            return disposable_1.Disposable.create(() => {
                const index = this.adapters.indexOf(adapter);
                if (index !== -1) {
                    this.adapters.splice(index, 1);
                }
            });
        }
        return disposable_1.Disposable.NULL;
    }
    getAdapterFor(menuPath, command, ...commandArgs) {
        let bestAdapter = undefined;
        let bestScore = 0;
        let currentScore = 0;
        for (const adapter of this.adapters) {
            // Greater than or equal: favor later registrations over earlier.
            if ((currentScore = adapter.canHandle(menuPath, command, ...commandArgs)) >= bestScore) {
                bestScore = currentScore;
                bestAdapter = adapter;
            }
        }
        return bestAdapter;
    }
};
MenuCommandAdapterRegistryImpl = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)()
], MenuCommandAdapterRegistryImpl);
exports.MenuCommandAdapterRegistryImpl = MenuCommandAdapterRegistryImpl;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/menu/menu-model-registry.js":
/*!*****************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/common/menu/menu-model-registry.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2017 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MenuModelRegistry = exports.MenuContribution = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/es/inversify.js");
const command_1 = __webpack_require__(/*! ../command */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/command.js");
const contribution_provider_1 = __webpack_require__(/*! ../contribution-provider */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/contribution-provider.js");
const disposable_1 = __webpack_require__(/*! ../disposable */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/disposable.js");
const action_menu_node_1 = __webpack_require__(/*! ./action-menu-node */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/menu/action-menu-node.js");
const composite_menu_node_1 = __webpack_require__(/*! ./composite-menu-node */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/menu/composite-menu-node.js");
const menu_types_1 = __webpack_require__(/*! ./menu-types */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/menu/menu-types.js");
exports.MenuContribution = Symbol('MenuContribution');
/**
 * The MenuModelRegistry allows to register and unregister menus, submenus and actions
 * via strings and {@link MenuAction}s without the need to access the underlying UI
 * representation.
 */
let MenuModelRegistry = class MenuModelRegistry {
    constructor(contributions, commands) {
        this.contributions = contributions;
        this.commands = commands;
        this.root = new composite_menu_node_1.CompositeMenuNode('');
        this.independentSubmenus = new Map();
    }
    onStart() {
        for (const contrib of this.contributions.getContributions()) {
            contrib.registerMenus(this);
        }
    }
    /**
     * Adds the given menu action to the menu denoted by the given path.
     *
     * @returns a disposable which, when called, will remove the menu action again.
     */
    registerMenuAction(menuPath, item) {
        const menuNode = new action_menu_node_1.ActionMenuNode(item, this.commands);
        return this.registerMenuNode(menuPath, menuNode);
    }
    /**
     * Adds the given menu node to the menu denoted by the given path.
     *
     * @returns a disposable which, when called, will remove the menu node again.
     */
    registerMenuNode(menuPath, menuNode, group) {
        const parent = this.getMenuNode(menuPath, group);
        return parent.addNode(menuNode);
    }
    getMenuNode(menuPath, group) {
        if (typeof menuPath === 'string') {
            const target = this.independentSubmenus.get(menuPath);
            if (!target) {
                throw new Error(`Could not find submenu with id ${menuPath}`);
            }
            if (group) {
                return this.findSubMenu(target, group);
            }
            return target;
        }
        else {
            return this.findGroup(group ? menuPath.concat(group) : menuPath);
        }
    }
    /**
     * Register a new menu at the given path with the given label.
     * (If the menu already exists without a label, iconClass or order this method can be used to set them.)
     *
     * @param menuPath the path for which a new submenu shall be registered.
     * @param label the label to be used for the new submenu.
     * @param options optionally allows to set an icon class and specify the order of the new menu.
     *
     * @returns if the menu was successfully created a disposable will be returned which,
     * when called, will remove the menu again. If the menu already existed a no-op disposable
     * will be returned.
     *
     * Note that if the menu already existed and was registered with a different label an error
     * will be thrown.
     */
    registerSubmenu(menuPath, label, options) {
        if (menuPath.length === 0) {
            throw new Error('The sub menu path cannot be empty.');
        }
        const index = menuPath.length - 1;
        const menuId = menuPath[index];
        const groupPath = index === 0 ? [] : menuPath.slice(0, index);
        const parent = this.findGroup(groupPath, options);
        let groupNode = this.findSubMenu(parent, menuId, options);
        if (!groupNode) {
            groupNode = new composite_menu_node_1.CompositeMenuNode(menuId, label, options, parent);
            return parent.addNode(groupNode);
        }
        else {
            groupNode.updateOptions({ ...options, label });
            return disposable_1.Disposable.NULL;
        }
    }
    registerIndependentSubmenu(id, label, options) {
        if (this.independentSubmenus.has(id)) {
            console.debug(`Independent submenu with path ${id} registered, but given ID already exists.`);
        }
        this.independentSubmenus.set(id, new composite_menu_node_1.CompositeMenuNode(id, label, options));
        return { dispose: () => this.independentSubmenus.delete(id) };
    }
    linkSubmenu(parentPath, childId, options, group) {
        const child = this.getMenuNode(childId);
        const parent = this.getMenuNode(parentPath, group);
        const isRecursive = (node, childNode) => {
            if (node.id === childNode.id) {
                return true;
            }
            if (node.parent) {
                return isRecursive(node.parent, childNode);
            }
            return false;
        };
        // check for menu contribution recursion
        if (isRecursive(parent, child)) {
            console.warn(`Recursive menu contribution detected: ${child.id} is already in hierarchy of ${parent.id}.`);
            return disposable_1.Disposable.NULL;
        }
        const wrapper = new composite_menu_node_1.CompositeMenuNodeWrapper(child, parent, options);
        return parent.addNode(wrapper);
    }
    unregisterMenuAction(itemOrCommandOrId, menuPath) {
        const id = menu_types_1.MenuAction.is(itemOrCommandOrId) ? itemOrCommandOrId.commandId
            : command_1.Command.is(itemOrCommandOrId) ? itemOrCommandOrId.id
                : itemOrCommandOrId;
        if (menuPath) {
            const parent = this.findGroup(menuPath);
            parent.removeNode(id);
            return;
        }
        this.unregisterMenuNode(id);
    }
    /**
     * Recurse all menus, removing any menus matching the `id`.
     *
     * @param id technical identifier of the `MenuNode`.
     */
    unregisterMenuNode(id) {
        const recurse = (root) => {
            root.children.forEach(node => {
                if (menu_types_1.CompoundMenuNode.isMutable(node)) {
                    node.removeNode(id);
                    recurse(node);
                }
            });
        };
        recurse(this.root);
    }
    /**
     * Finds a submenu as a descendant of the `root` node.
     * See {@link MenuModelRegistry.findSubMenu findSubMenu}.
     */
    findGroup(menuPath, options) {
        let currentMenu = this.root;
        for (const segment of menuPath) {
            currentMenu = this.findSubMenu(currentMenu, segment, options);
        }
        return currentMenu;
    }
    /**
     * Finds or creates a submenu as an immediate child of `current`.
     * @throws if a node with the given `menuId` exists but is not a {@link MutableCompoundMenuNode}.
     */
    findSubMenu(current, menuId, options) {
        const sub = current.children.find(e => e.id === menuId);
        if (menu_types_1.CompoundMenuNode.isMutable(sub)) {
            return sub;
        }
        if (sub) {
            throw new Error(`'${menuId}' is not a menu group.`);
        }
        const newSub = new composite_menu_node_1.CompositeMenuNode(menuId, undefined, options, current);
        current.addNode(newSub);
        return newSub;
    }
    /**
     * Returns the menu at the given path.
     *
     * @param menuPath the path specifying the menu to return. If not given the empty path will be used.
     *
     * @returns the root menu when `menuPath` is empty. If `menuPath` is not empty the specified menu is
     * returned if it exists, otherwise an error is thrown.
     */
    getMenu(menuPath = []) {
        return this.findGroup(menuPath);
    }
    /**
     * Checks the given menu model whether it will show a menu with a single submenu.
     *
     * @param fullMenuModel the menu model to analyze
     * @param menuPath the menu's path
     * @returns if the menu will show a single submenu this returns a menu that will show the child elements of the submenu,
     * otherwise the given `fullMenuModel` is return
     */
    removeSingleRootNode(fullMenuModel, menuPath) {
        // check whether all children are compound menus and that there is only one child that has further children
        if (!this.allChildrenCompound(fullMenuModel.children)) {
            return fullMenuModel;
        }
        let nonEmptyNode = undefined;
        for (const child of fullMenuModel.children) {
            if (!this.isEmpty(child.children || [])) {
                if (nonEmptyNode === undefined) {
                    nonEmptyNode = child;
                }
                else {
                    return fullMenuModel;
                }
            }
        }
        if (menu_types_1.CompoundMenuNode.is(nonEmptyNode) && nonEmptyNode.children.length === 1 && menu_types_1.CompoundMenuNode.is(nonEmptyNode.children[0])) {
            nonEmptyNode = nonEmptyNode.children[0];
        }
        return menu_types_1.CompoundMenuNode.is(nonEmptyNode) ? nonEmptyNode : fullMenuModel;
    }
    allChildrenCompound(children) {
        return children.every(menu_types_1.CompoundMenuNode.is);
    }
    isEmpty(children) {
        if (children.length === 0) {
            return true;
        }
        if (!this.allChildrenCompound(children)) {
            return false;
        }
        for (const child of children) {
            if (!this.isEmpty(child.children || [])) {
                return false;
            }
        }
        return true;
    }
    /**
     * Returns the {@link MenuPath path} at which a given menu node can be accessed from this registry, if it can be determined.
     * Returns `undefined` if the `parent` of any node in the chain is unknown.
     */
    getPath(node) {
        const identifiers = [];
        const visited = [];
        let next = node;
        while (next && !visited.includes(next)) {
            if (next === this.root) {
                return identifiers.reverse();
            }
            visited.push(next);
            identifiers.push(next.id);
            next = next.parent;
        }
        return undefined;
    }
};
MenuModelRegistry = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)(),
    (0, tslib_1.__param)(0, (0, inversify_1.inject)(contribution_provider_1.ContributionProvider)),
    (0, tslib_1.__param)(0, (0, inversify_1.named)(exports.MenuContribution)),
    (0, tslib_1.__param)(1, (0, inversify_1.inject)(command_1.CommandRegistry)),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, command_1.CommandRegistry])
], MenuModelRegistry);
exports.MenuModelRegistry = MenuModelRegistry;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/menu/menu-types.js":
/*!********************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/common/menu/menu-types.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2022 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CommandMenuNode = exports.CompoundMenuNode = exports.MenuAction = exports.ACCOUNTS_SUBMENU = exports.ACCOUNTS_MENU = exports.MANAGE_MENU = exports.MAIN_MENU_BAR = void 0;
const types_1 = __webpack_require__(/*! ../types */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/types.js");
exports.MAIN_MENU_BAR = ['menubar'];
exports.MANAGE_MENU = ['manage_menu'];
exports.ACCOUNTS_MENU = ['accounts_menu'];
exports.ACCOUNTS_SUBMENU = [...exports.ACCOUNTS_MENU, '1_accounts_submenu'];
var MenuAction;
(function (MenuAction) {
    /* Determine whether object is a MenuAction */
    function is(arg) {
        return (0, types_1.isObject)(arg) && 'commandId' in arg;
    }
    MenuAction.is = is;
})(MenuAction = exports.MenuAction || (exports.MenuAction = {}));
var CompoundMenuNode;
(function (CompoundMenuNode) {
    function is(node) { return !!node && Array.isArray(node.children); }
    CompoundMenuNode.is = is;
    function getRole(node) {
        var _a;
        if (!is(node)) {
            return undefined;
        }
        return (_a = node.role) !== null && _a !== void 0 ? _a : (node.label ? 0 /* Submenu */ : 1 /* Group */);
    }
    CompoundMenuNode.getRole = getRole;
    function sortChildren(m1, m2) {
        // The navigation group is special as it will always be sorted to the top/beginning of a menu.
        if (isNavigationGroup(m1)) {
            return -1;
        }
        if (isNavigationGroup(m2)) {
            return 1;
        }
        return m1.sortString.localeCompare(m2.sortString);
    }
    CompoundMenuNode.sortChildren = sortChildren;
    /** Collapses the children of any subemenus with role {@link CompoundMenuNodeRole Flat} and sorts */
    function getFlatChildren(children) {
        const childrenToMerge = [];
        return children.filter(child => {
            if (getRole(child) === 2 /* Flat */) {
                childrenToMerge.push(child.children);
                return false;
            }
            return true;
        }).concat(...childrenToMerge).sort(sortChildren);
    }
    CompoundMenuNode.getFlatChildren = getFlatChildren;
    /**
     * Indicates whether the given node is the special `navigation` menu.
     *
     * @param node the menu node to check.
     * @returns `true` when the given node is a {@link CompoundMenuNode} with id `navigation`,
     * `false` otherwise.
     */
    function isNavigationGroup(node) {
        return is(node) && node.id === 'navigation';
    }
    CompoundMenuNode.isNavigationGroup = isNavigationGroup;
    function isMutable(node) {
        const candidate = node;
        return is(candidate) && typeof candidate.addNode === 'function' && typeof candidate.removeNode === 'function';
    }
    CompoundMenuNode.isMutable = isMutable;
})(CompoundMenuNode = exports.CompoundMenuNode || (exports.CompoundMenuNode = {}));
var CommandMenuNode;
(function (CommandMenuNode) {
    function is(candidate) { return Boolean(candidate === null || candidate === void 0 ? void 0 : candidate.command); }
    CommandMenuNode.is = is;
    function hasAltHandler(candidate) {
        const asAltNode = candidate;
        return is(asAltNode) && is(asAltNode === null || asAltNode === void 0 ? void 0 : asAltNode.altNode);
    }
    CommandMenuNode.hasAltHandler = hasAltHandler;
})(CommandMenuNode = exports.CommandMenuNode || (exports.CommandMenuNode = {}));


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/message-rpc/channel.js":
/*!************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/common/message-rpc/channel.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2021 Red Hat, Inc. and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ChannelMultiplexer = exports.MessageTypes = exports.ForwardingChannel = exports.BasicChannel = exports.AbstractChannel = void 0;
const disposable_1 = __webpack_require__(/*! ../disposable */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/disposable.js");
const event_1 = __webpack_require__(/*! ../event */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/event.js");
;
/**
 *  Reusable abstract {@link Channel} implementation that sets up
 *  the basic channel event listeners and offers a generic close method.
 */
class AbstractChannel {
    constructor() {
        this.onCloseEmitter = new event_1.Emitter();
        this.onErrorEmitter = new event_1.Emitter();
        this.onMessageEmitter = new event_1.Emitter();
        this.toDispose = new disposable_1.DisposableCollection();
        this.toDispose.pushAll([this.onCloseEmitter, this.onErrorEmitter, this.onMessageEmitter]);
    }
    get onClose() {
        return this.onCloseEmitter.event;
    }
    ;
    get onError() {
        return this.onErrorEmitter.event;
    }
    ;
    get onMessage() {
        return this.onMessageEmitter.event;
    }
    ;
    close() {
        this.toDispose.dispose();
    }
}
exports.AbstractChannel = AbstractChannel;
/**
 * A very basic {@link AbstractChannel} implementation which takes a function
 * for retrieving the {@link WriteBuffer} as constructor argument.
 */
class BasicChannel extends AbstractChannel {
    constructor(writeBufferProvider) {
        super();
        this.writeBufferProvider = writeBufferProvider;
    }
    getWriteBuffer() {
        return this.writeBufferProvider();
    }
}
exports.BasicChannel = BasicChannel;
/**
 * Helper class to implement the single channels on a {@link ChannelMultiplexer}. Simply forwards write requests to
 * the given write buffer source i.e. the main channel of the {@link ChannelMultiplexer}.
 */
class ForwardingChannel extends AbstractChannel {
    constructor(id, closeHandler, writeBufferSource) {
        super();
        this.id = id;
        this.closeHandler = closeHandler;
        this.writeBufferSource = writeBufferSource;
    }
    getWriteBuffer() {
        return this.writeBufferSource();
    }
    close() {
        super.close();
        this.closeHandler();
    }
}
exports.ForwardingChannel = ForwardingChannel;
/**
 * The different message types used in the messaging protocol of the {@link ChannelMultiplexer}
 */
var MessageTypes;
(function (MessageTypes) {
    MessageTypes[MessageTypes["Open"] = 1] = "Open";
    MessageTypes[MessageTypes["Close"] = 2] = "Close";
    MessageTypes[MessageTypes["AckOpen"] = 3] = "AckOpen";
    MessageTypes[MessageTypes["Data"] = 4] = "Data";
})(MessageTypes = exports.MessageTypes || (exports.MessageTypes = {}));
/**
 * The write buffers in this implementation immediately write to the underlying
 * channel, so we rely on writers to the multiplexed channels to always commit their
 * messages and always in one go.
 */
class ChannelMultiplexer {
    constructor(underlyingChannel) {
        this.underlyingChannel = underlyingChannel;
        this.pendingOpen = new Map();
        this.openChannels = new Map();
        this.onOpenChannelEmitter = new event_1.Emitter();
        this.toDispose = new disposable_1.DisposableCollection();
        this.toDispose.pushAll([
            this.underlyingChannel.onMessage(buffer => this.handleMessage(buffer())),
            this.underlyingChannel.onClose(event => this.onUnderlyingChannelClose(event)),
            this.underlyingChannel.onError(error => this.handleError(error)),
            this.onOpenChannelEmitter
        ]);
    }
    get onDidOpenChannel() {
        return this.onOpenChannelEmitter.event;
    }
    handleError(error) {
        this.openChannels.forEach(channel => {
            channel.onErrorEmitter.fire(error);
        });
    }
    onUnderlyingChannelClose(event) {
        if (!this.toDispose.disposed) {
            this.toDispose.push(disposable_1.Disposable.create(() => {
                this.pendingOpen.clear();
                this.openChannels.forEach(channel => {
                    channel.onCloseEmitter.fire(event !== null && event !== void 0 ? event : { reason: 'Multiplexer main channel has been closed from the remote side!' });
                });
                this.openChannels.clear();
            }));
            this.dispose();
        }
    }
    handleMessage(buffer) {
        const type = buffer.readUint8();
        const id = buffer.readString();
        switch (type) {
            case MessageTypes.AckOpen: {
                return this.handleAckOpen(id);
            }
            case MessageTypes.Open: {
                return this.handleOpen(id);
            }
            case MessageTypes.Close: {
                return this.handleClose(id);
            }
            case MessageTypes.Data: {
                return this.handleData(id, buffer);
            }
        }
    }
    handleAckOpen(id) {
        // edge case: both side try to open a channel at the same time.
        const resolve = this.pendingOpen.get(id);
        if (resolve) {
            const channel = this.createChannel(id);
            this.pendingOpen.delete(id);
            this.openChannels.set(id, channel);
            resolve(channel);
            this.onOpenChannelEmitter.fire({ id, channel });
        }
        else {
            console.error(`not expecting ack-open on for ${id}`);
        }
    }
    handleOpen(id) {
        if (!this.openChannels.has(id)) {
            const channel = this.createChannel(id);
            this.openChannels.set(id, channel);
            const resolve = this.pendingOpen.get(id);
            if (resolve) {
                // edge case: both side try to open a channel at the same time.
                resolve(channel);
            }
            this.underlyingChannel.getWriteBuffer().writeUint8(MessageTypes.AckOpen).writeString(id).commit();
            this.onOpenChannelEmitter.fire({ id, channel });
        }
        else {
            console.error(`channel already open: ${id}`);
        }
    }
    handleClose(id) {
        const channel = this.openChannels.get(id);
        if (channel) {
            channel.onCloseEmitter.fire({ reason: 'Channel has been closed from the remote side' });
            this.openChannels.delete(id);
        }
    }
    handleData(id, data) {
        const channel = this.openChannels.get(id);
        if (channel) {
            channel.onMessageEmitter.fire(() => data.sliceAtReadPosition());
        }
    }
    createChannel(id) {
        return new ForwardingChannel(id, () => this.closeChannel(id), () => this.prepareWriteBuffer(id));
    }
    // Prepare the write buffer for the channel with the give, id. The channel id has to be encoded
    // and written to the buffer before the actual message.
    prepareWriteBuffer(id) {
        const underlying = this.underlyingChannel.getWriteBuffer();
        underlying.writeUint8(MessageTypes.Data);
        underlying.writeString(id);
        return underlying;
    }
    closeChannel(id) {
        this.underlyingChannel.getWriteBuffer()
            .writeUint8(MessageTypes.Close)
            .writeString(id)
            .commit();
        this.openChannels.delete(id);
    }
    open(id) {
        if (this.openChannels.has(id) || this.pendingOpen.has(id)) {
            throw new Error(`Another channel with the id '${id}' is already open.`);
        }
        const result = new Promise((resolve, reject) => {
            this.pendingOpen.set(id, resolve);
        });
        this.underlyingChannel.getWriteBuffer().writeUint8(MessageTypes.Open).writeString(id).commit();
        return result;
    }
    getOpenChannel(id) {
        return this.openChannels.get(id);
    }
    dispose() {
        this.toDispose.dispose();
    }
}
exports.ChannelMultiplexer = ChannelMultiplexer;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/message-rpc/index.js":
/*!**********************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/common/message-rpc/index.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RpcProtocol = exports.AbstractChannel = void 0;
// *****************************************************************************
// Copyright (C) 2022 STMicroelectronics and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var channel_1 = __webpack_require__(/*! ./channel */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/message-rpc/channel.js");
Object.defineProperty(exports, "AbstractChannel", ({ enumerable: true, get: function () { return channel_1.AbstractChannel; } }));
var rpc_protocol_1 = __webpack_require__(/*! ./rpc-protocol */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/message-rpc/rpc-protocol.js");
Object.defineProperty(exports, "RpcProtocol", ({ enumerable: true, get: function () { return rpc_protocol_1.RpcProtocol; } }));
const rpc_message_encoder_1 = __webpack_require__(/*! ./rpc-message-encoder */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/message-rpc/rpc-message-encoder.js");
(0, rpc_message_encoder_1.registerMsgPackExtensions)();


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/message-rpc/msg-pack-extension-manager.js":
/*!*******************************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/common/message-rpc/msg-pack-extension-manager.js ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2022 STMicroelectronics and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MsgPackExtensionManager = void 0;
const msgpackr_1 = __webpack_require__(/*! msgpackr */ "../node_modules/msgpackr/index.js");
/**
 * Handles the global registration of custom MsgPackR extensions
 * required for the default RPC communication. MsgPackR extensions
 * are installed globally on both ends of the communication channel.
 * (frontend-backend, pluginExt-pluginMain).
 * Is implemented as singleton as it is also used in plugin child processes which have no access to inversify.
 */
class MsgPackExtensionManager {
    constructor() {
        this.extensions = new Map();
    }
    static getInstance() {
        return this.INSTANCE;
    }
    registerExtensions(...extensions) {
        extensions.forEach(extension => {
            if (extension.tag < 1 || extension.tag > 100) {
                // MsgPackR reserves the tag range 1-100 for custom extensions.
                throw new Error(`MsgPack extension tag should be a number from 1-100 but was '${extension.tag}'`);
            }
            if (this.extensions.has(extension.tag)) {
                throw new Error(`Another MsgPack extension with the tag '${extension.tag}' is already registered`);
            }
            this.extensions.set(extension.tag, extension);
            (0, msgpackr_1.addExtension)({
                Class: extension.class,
                type: extension.tag,
                write: extension.serialize,
                read: extension.deserialize
            });
        });
    }
    getExtension(tag) {
        return this.extensions.get(tag);
    }
}
exports.MsgPackExtensionManager = MsgPackExtensionManager;
MsgPackExtensionManager.INSTANCE = new MsgPackExtensionManager();


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/message-rpc/rpc-message-encoder.js":
/*!************************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/common/message-rpc/rpc-message-encoder.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2022 Red Hat, Inc. and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
/* eslint-disable @typescript-eslint/no-explicit-any */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.registerMsgPackExtensions = exports.MsgPackMessageDecoder = exports.MsgPackMessageEncoder = exports.defaultMsgPack = exports.EncodingError = exports.ResponseError = void 0;
const msgpackr_1 = __webpack_require__(/*! msgpackr */ "../node_modules/msgpackr/index.js");
const msg_pack_extension_manager_1 = __webpack_require__(/*! ./msg-pack-extension-manager */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/message-rpc/msg-pack-extension-manager.js");
/**
 * A special error that can be returned in case a request
 * has failed. Provides additional information i.e. an error code
 * and additional error data.
 */
class ResponseError extends Error {
    constructor(code, message, data) {
        super(message);
        this.code = code;
        this.data = data;
    }
}
exports.ResponseError = ResponseError;
/**
 * Custom error thrown by the {@link RpcMessageEncoder} if an error occurred during the encoding and the
 * object could not be written to the given {@link WriteBuffer}
 */
class EncodingError extends Error {
    constructor(msg, cause) {
        super(msg);
        this.cause = cause;
    }
}
exports.EncodingError = EncodingError;
exports.defaultMsgPack = new msgpackr_1.Packr({ moreTypes: true, encodeUndefinedAsNil: false, bundleStrings: false });
class MsgPackMessageEncoder {
    constructor(msgPack = exports.defaultMsgPack) {
        this.msgPack = msgPack;
    }
    cancel(buf, requestId) {
        this.encode(buf, { type: 5 /* Cancel */, id: requestId });
    }
    notification(buf, method, args, id) {
        this.encode(buf, { type: 2 /* Notification */, method, args, id });
    }
    request(buf, requestId, method, args) {
        this.encode(buf, { type: 1 /* Request */, id: requestId, method, args });
    }
    replyOK(buf, requestId, res) {
        this.encode(buf, { type: 3 /* Reply */, id: requestId, res });
    }
    replyErr(buf, requestId, err) {
        this.encode(buf, { type: 4 /* ReplyErr */, id: requestId, err });
    }
    encode(buf, value) {
        try {
            buf.writeBytes(this.msgPack.encode(value));
        }
        catch (err) {
            if (err instanceof Error) {
                throw new EncodingError(`Error during encoding: '${err.message}'`, err);
            }
            throw err;
        }
    }
}
exports.MsgPackMessageEncoder = MsgPackMessageEncoder;
class MsgPackMessageDecoder {
    constructor(msgPack = exports.defaultMsgPack) {
        this.msgPack = msgPack;
    }
    decode(buf) {
        const bytes = buf.readBytes();
        return this.msgPack.decode(bytes);
    }
    parse(buffer) {
        return this.decode(buffer);
    }
}
exports.MsgPackMessageDecoder = MsgPackMessageDecoder;
function registerMsgPackExtensions() {
    // Register custom msgPack extension for Errors.
    msg_pack_extension_manager_1.MsgPackExtensionManager.getInstance().registerExtensions({
        class: Error,
        tag: 1,
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        serialize: (error) => {
            var _a;
            const { code, data, message, name } = error;
            const stack = (_a = error.stacktrace) !== null && _a !== void 0 ? _a : error.stack;
            const isResponseError = error instanceof ResponseError;
            return { code, data, message, name, stack, isResponseError };
        },
        deserialize: data => {
            const error = data.isResponseError ? new ResponseError(data.code, data.message, data.data) : new Error(data.message);
            error.name = data.name;
            error.stack = data.stack;
            return error;
        }
    });
}
exports.registerMsgPackExtensions = registerMsgPackExtensions;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/message-rpc/rpc-protocol.js":
/*!*****************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/common/message-rpc/rpc-protocol.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2021 Red Hat, Inc. and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
/* eslint-disable @typescript-eslint/no-explicit-any */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RpcProtocol = void 0;
const cancellation_1 = __webpack_require__(/*! ../cancellation */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/cancellation.js");
const disposable_1 = __webpack_require__(/*! ../disposable */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/disposable.js");
const event_1 = __webpack_require__(/*! ../event */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/event.js");
const promise_util_1 = __webpack_require__(/*! ../promise-util */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/promise-util.js");
const rpc_message_encoder_1 = __webpack_require__(/*! ./rpc-message-encoder */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/message-rpc/rpc-message-encoder.js");
/**
 * Establish a RPC protocol on top of a given channel. By default the rpc protocol is bi-directional, meaning it is possible to send
 * requests and notifications to the remote side (i.e. acts as client) as well as receiving requests and notifications from the remote side (i.e. acts as a server).
 * Clients can get a promise for a remote request result that will be either resolved or
 * rejected depending on the success of the request. Keeps track of outstanding requests and matches replies to the appropriate request
 * Currently, there is no timeout handling for long running requests implemented.
 * The bi-directional mode can be reconfigured using the {@link RpcProtocolOptions} to construct an RPC protocol instance that acts only as client or server instead.
 */
class RpcProtocol {
    constructor(channel, requestHandler, options = {}) {
        var _a, _b, _c;
        this.channel = channel;
        this.requestHandler = requestHandler;
        this.pendingRequests = new Map();
        this.pendingRequestCancellationEventListeners = new Map();
        this.nextMessageId = 0;
        this.onNotificationEmitter = new event_1.Emitter();
        this.cancellationTokenSources = new Map();
        this.toDispose = new disposable_1.DisposableCollection();
        this.encoder = (_a = options.encoder) !== null && _a !== void 0 ? _a : new rpc_message_encoder_1.MsgPackMessageEncoder();
        this.decoder = (_b = options.decoder) !== null && _b !== void 0 ? _b : new rpc_message_encoder_1.MsgPackMessageDecoder();
        this.toDispose.push(this.onNotificationEmitter);
        channel.onClose(event => {
            this.pendingRequests.forEach(pending => pending.reject(new Error(event.reason)));
            this.pendingRequests.clear();
            this.pendingRequestCancellationEventListeners.forEach(disposable => disposable.dispose());
            this.pendingRequestCancellationEventListeners.clear();
            this.toDispose.dispose();
        });
        this.toDispose.push(channel.onMessage(readBuffer => this.handleMessage(this.decoder.parse(readBuffer()))));
        this.mode = (_c = options.mode) !== null && _c !== void 0 ? _c : 'default';
        if (this.mode !== 'clientOnly' && requestHandler === undefined) {
            console.error('RPCProtocol was initialized without a request handler but was not set to clientOnly mode.');
        }
    }
    get onNotification() {
        return this.onNotificationEmitter.event;
    }
    handleMessage(message) {
        if (this.mode !== 'clientOnly') {
            switch (message.type) {
                case 5 /* Cancel */: {
                    this.handleCancel(message.id);
                    return;
                }
                case 1 /* Request */: {
                    this.handleRequest(message.id, message.method, message.args);
                    return;
                }
                case 2 /* Notification */: {
                    this.handleNotify(message.method, message.args, message.id);
                    return;
                }
            }
        }
        if (this.mode !== 'serverOnly') {
            switch (message.type) {
                case 3 /* Reply */: {
                    this.handleReply(message.id, message.res);
                    return;
                }
                case 4 /* ReplyErr */: {
                    this.handleReplyErr(message.id, message.err);
                    return;
                }
            }
        }
        // If the message was not handled until here, it is incompatible with the mode.
        console.warn(`Received message incompatible with this RPCProtocol's mode '${this.mode}'. Type: ${message.type}. ID: ${message.id}.`);
    }
    handleReply(id, value) {
        const replyHandler = this.pendingRequests.get(id);
        if (replyHandler) {
            this.pendingRequests.delete(id);
            replyHandler.resolve(value);
        }
        else {
            throw new Error(`No reply handler for reply with id: ${id}`);
        }
        this.disposeCancellationEventListener(id);
    }
    handleReplyErr(id, error) {
        const replyHandler = this.pendingRequests.get(id);
        if (replyHandler) {
            this.pendingRequests.delete(id);
            replyHandler.reject(error);
        }
        else {
            throw new Error(`No reply handler for error reply with id: ${id}`);
        }
        this.disposeCancellationEventListener(id);
    }
    disposeCancellationEventListener(id) {
        const toDispose = this.pendingRequestCancellationEventListeners.get(id);
        if (toDispose) {
            this.pendingRequestCancellationEventListeners.delete(id);
            toDispose.dispose();
        }
    }
    sendRequest(method, args) {
        // The last element of the request args might be a cancellation token. As these tokens are not serializable we have to remove it from the
        // args array and the `CANCELLATION_TOKEN_KEY` string instead.
        const cancellationToken = args.length && cancellation_1.CancellationToken.is(args[args.length - 1]) ? args.pop() : undefined;
        const id = this.nextMessageId++;
        const reply = new promise_util_1.Deferred();
        if (cancellationToken) {
            args.push(RpcProtocol.CANCELLATION_TOKEN_KEY);
        }
        this.pendingRequests.set(id, reply);
        // register disposable before output.commit() even when not available yet
        const disposableWrapper = new disposable_1.DisposableWrapper();
        this.pendingRequestCancellationEventListeners.set(id, disposableWrapper);
        const output = this.channel.getWriteBuffer();
        this.encoder.request(output, id, method, args);
        output.commit();
        if (cancellationToken === null || cancellationToken === void 0 ? void 0 : cancellationToken.isCancellationRequested) {
            this.sendCancel(id);
        }
        else {
            const disposable = cancellationToken === null || cancellationToken === void 0 ? void 0 : cancellationToken.onCancellationRequested(() => this.sendCancel(id));
            if (disposable) {
                disposableWrapper.set(disposable);
            }
        }
        return reply.promise;
    }
    sendNotification(method, args) {
        // If the notification supports a CancellationToken, it needs to be treated like a request
        // because cancellation does not work with the simplified "fire and forget" approach of simple notifications.
        if (args.length && cancellation_1.CancellationToken.is(args[args.length - 1])) {
            this.sendRequest(method, args);
            return;
        }
        const output = this.channel.getWriteBuffer();
        this.encoder.notification(output, method, args, this.nextMessageId++);
        output.commit();
    }
    sendCancel(requestId) {
        const output = this.channel.getWriteBuffer();
        this.encoder.cancel(output, requestId);
        output.commit();
    }
    handleCancel(id) {
        const cancellationTokenSource = this.cancellationTokenSources.get(id);
        if (cancellationTokenSource) {
            cancellationTokenSource.cancel();
        }
    }
    async handleRequest(id, method, args) {
        const output = this.channel.getWriteBuffer();
        // Check if the last argument of the received args is the key for indicating that a cancellation token should be used
        // If so remove the key from the args and create a new cancellation token.
        const addToken = args.length && args[args.length - 1] === RpcProtocol.CANCELLATION_TOKEN_KEY ? args.pop() : false;
        if (addToken) {
            const tokenSource = new cancellation_1.CancellationTokenSource();
            this.cancellationTokenSources.set(id, tokenSource);
            args.push(tokenSource.token);
        }
        try {
            const result = await this.requestHandler(method, args);
            this.cancellationTokenSources.delete(id);
            this.encoder.replyOK(output, id, result);
            output.commit();
        }
        catch (err) {
            // In case of an error the output buffer might already contains parts of an message.
            // => Dispose the current buffer and retrieve a new, clean one for writing the response error.
            if (disposable_1.Disposable.is(output)) {
                output.dispose();
            }
            const errorOutput = this.channel.getWriteBuffer();
            this.cancellationTokenSources.delete(id);
            this.encoder.replyErr(errorOutput, id, err);
            errorOutput.commit();
        }
    }
    async handleNotify(method, args, id) {
        if (this.toDispose.disposed) {
            return;
        }
        this.onNotificationEmitter.fire({ method, args });
    }
}
exports.RpcProtocol = RpcProtocol;
RpcProtocol.CANCELLATION_TOKEN_KEY = 'add.cancellation.token';


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/message-service-protocol.js":
/*!*****************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/common/message-service-protocol.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2017 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MessageClient = exports.ProgressMessage = exports.MessageType = exports.messageServicePath = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/es/inversify.js");
const nls_1 = __webpack_require__(/*! ./nls */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/nls.js");
exports.messageServicePath = '/services/messageService';
var MessageType;
(function (MessageType) {
    MessageType[MessageType["Error"] = 1] = "Error";
    MessageType[MessageType["Warning"] = 2] = "Warning";
    MessageType[MessageType["Info"] = 3] = "Info";
    MessageType[MessageType["Log"] = 4] = "Log";
    MessageType[MessageType["Progress"] = 5] = "Progress";
})(MessageType = exports.MessageType || (exports.MessageType = {}));
var ProgressMessage;
(function (ProgressMessage) {
    ProgressMessage.Cancel = nls_1.nls.localizeByDefault('Cancel');
    function isCancelable(message) {
        var _a;
        return !!((_a = message.options) === null || _a === void 0 ? void 0 : _a.cancelable);
    }
    ProgressMessage.isCancelable = isCancelable;
})(ProgressMessage = exports.ProgressMessage || (exports.ProgressMessage = {}));
let MessageClient = class MessageClient {
    /**
     * Show a message of the given type and possible actions to the user.
     * Resolve to a chosen action.
     * Never reject.
     *
     * To be implemented by an extension, e.g. by the messages extension.
     */
    showMessage(message) {
        console.info(message.text);
        return Promise.resolve(undefined);
    }
    /**
     * Show a progress message with possible actions to user.
     *
     * To be implemented by an extension, e.g. by the messages extension.
     */
    showProgress(progressId, message, cancellationToken) {
        console.info(message.text);
        return Promise.resolve(undefined);
    }
    /**
     * Update a previously created progress message.
     *
     * To be implemented by an extension, e.g. by the messages extension.
     */
    reportProgress(progressId, update, message, cancellationToken) {
        return Promise.resolve(undefined);
    }
};
MessageClient = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)()
], MessageClient);
exports.MessageClient = MessageClient;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/message-service.js":
/*!********************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/common/message-service.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2017 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MessageService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/es/inversify.js");
const message_service_protocol_1 = __webpack_require__(/*! ./message-service-protocol */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/message-service-protocol.js");
const cancellation_1 = __webpack_require__(/*! ./cancellation */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/cancellation.js");
/**
 * Service to log and categorize messages, show progress information and offer actions.
 *
 * The messages are processed by this service and forwarded to an injected {@link MessageClient}.
 * For example "@theia/messages" provides such a client, rendering messages as notifications
 * in the frontend.
 *
 * ### Example usage
 *
 * ```typescript
 *   @inject(MessageService)
 *   protected readonly messageService: MessageService;
 *
 *   messageService.warn("Typings not available");
 *
 *   messageService.error("Could not restore state", ["Rollback", "Ignore"])
 *   .then(action => action === "Rollback" && rollback());
 * ```
 */
let MessageService = class MessageService {
    constructor(client) {
        this.client = client;
        this.progressIdPrefix = Math.random().toString(36).substring(5);
        this.counter = 0;
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    log(message, ...args) {
        return this.processMessage(message_service_protocol_1.MessageType.Log, message, args);
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    info(message, ...args) {
        return this.processMessage(message_service_protocol_1.MessageType.Info, message, args);
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    warn(message, ...args) {
        return this.processMessage(message_service_protocol_1.MessageType.Warning, message, args);
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    error(message, ...args) {
        return this.processMessage(message_service_protocol_1.MessageType.Error, message, args);
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    processMessage(type, text, args) {
        if (!!args && args.length > 0) {
            const first = args[0];
            const actions = Array.from(new Set(args.filter(a => typeof a === 'string')));
            const options = (typeof first === 'object' && !Array.isArray(first))
                ? first
                : undefined;
            return this.client.showMessage({ type, options, text, actions });
        }
        return this.client.showMessage({ type, text });
    }
    /**
     * Shows the given message as a progress.
     *
     * @param message the message to show for the progress.
     * @param onDidCancel an optional callback which will be invoked if the progress indicator was canceled.
     *
     * @returns a promise resolving to a {@link Progress} object with which the progress can be updated.
     *
     * ### Example usage
     *
     * ```typescript
     *   @inject(MessageService)
     *   protected readonly messageService: MessageService;
     *
     *   // this will show "Progress" as a cancelable message
     *   this.messageService.showProgress({text: 'Progress'});
     *
     *   // this will show "Rolling back" with "Cancel" and an additional "Skip" action
     *   this.messageService.showProgress({
     *     text: `Rolling back`,
     *     actions: ["Skip"],
     *   },
     *   () => console.log("canceled"))
     *   .then((progress) => {
     *     // register if interested in the result (only necessary for custom actions)
     *     progress.result.then((result) => {
     *       // will be 'Cancel', 'Skip' or `undefined`
     *       console.log("result is", result);
     *     });
     *     progress.report({message: "Cleaning references", work: {done: 10, total: 100}});
     *     progress.report({message: "Restoring previous state", work: {done: 80, total: 100}});
     *     progress.report({message: "Complete", work: {done: 100, total: 100}});
     *     // we are done so we can cancel the progress message, note that this will also invoke `onDidCancel`
     *     progress.cancel();
     *   });
     * ```
     */
    async showProgress(message, onDidCancel) {
        var _a;
        const id = this.newProgressId();
        const cancellationSource = new cancellation_1.CancellationTokenSource();
        const report = (update) => {
            this.client.reportProgress(id, update, message, cancellationSource.token);
        };
        const type = (_a = message.type) !== null && _a !== void 0 ? _a : message_service_protocol_1.MessageType.Progress;
        const actions = new Set(message.actions);
        if (message_service_protocol_1.ProgressMessage.isCancelable(message)) {
            actions.delete(message_service_protocol_1.ProgressMessage.Cancel);
            actions.add(message_service_protocol_1.ProgressMessage.Cancel);
        }
        const clientMessage = { ...message, type, actions: Array.from(actions) };
        const result = this.client.showProgress(id, clientMessage, cancellationSource.token);
        if (message_service_protocol_1.ProgressMessage.isCancelable(message) && typeof onDidCancel === 'function') {
            result.then(value => {
                if (value === message_service_protocol_1.ProgressMessage.Cancel) {
                    onDidCancel();
                }
            });
        }
        return {
            id,
            cancel: () => cancellationSource.cancel(),
            result,
            report
        };
    }
    newProgressId() {
        return `${this.progressIdPrefix}-${++this.counter}`;
    }
};
MessageService = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)(),
    (0, tslib_1.__param)(0, (0, inversify_1.inject)(message_service_protocol_1.MessageClient)),
    (0, tslib_1.__metadata)("design:paramtypes", [message_service_protocol_1.MessageClient])
], MessageService);
exports.MessageService = MessageService;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/messaging/connection-error-handler.js":
/*!***************************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/common/messaging/connection-error-handler.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2017 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ConnectionErrorHandler = void 0;
class ConnectionErrorHandler {
    constructor(options) {
        this.restarts = [];
        this.options = {
            maxErrors: 3,
            maxRestarts: 5,
            restartInterval: 3,
            ...options
        };
    }
    shouldStop(error, count) {
        return !count || count > this.options.maxErrors;
    }
    shouldRestart() {
        this.restarts.push(Date.now());
        if (this.restarts.length <= this.options.maxRestarts) {
            return true;
        }
        const diff = this.restarts[this.restarts.length - 1] - this.restarts[0];
        if (diff <= this.options.restartInterval * 60 * 1000) {
            // eslint-disable-next-line max-len
            this.options.logger.error(`The ${this.options.serverName} server crashed ${this.options.maxRestarts} times in the last ${this.options.restartInterval} minutes. The server will not be restarted.`);
            return false;
        }
        this.restarts.shift();
        return true;
    }
}
exports.ConnectionErrorHandler = ConnectionErrorHandler;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/messaging/handler.js":
/*!**********************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/common/messaging/handler.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2017 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ConnectionHandler = exports.servicesPath = void 0;
exports.servicesPath = '/services';
exports.ConnectionHandler = Symbol('ConnectionHandler');


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/messaging/index.js":
/*!********************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/common/messaging/index.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2017 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./handler */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/messaging/handler.js"), exports);
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./proxy-factory */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/messaging/proxy-factory.js"), exports);
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./connection-error-handler */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/messaging/connection-error-handler.js"), exports);


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/messaging/proxy-factory.js":
/*!****************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/common/messaging/proxy-factory.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2017 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.JsonRpcProxyFactory = exports.JsonRpcConnectionHandler = exports.RpcProxyFactory = exports.RpcConnectionHandler = void 0;
/* eslint-disable @typescript-eslint/no-explicit-any */
const rpc_message_encoder_1 = __webpack_require__(/*! ../message-rpc/rpc-message-encoder */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/message-rpc/rpc-message-encoder.js");
const application_error_1 = __webpack_require__(/*! ../application-error */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/application-error.js");
const event_1 = __webpack_require__(/*! ../event */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/event.js");
const rpc_protocol_1 = __webpack_require__(/*! ../message-rpc/rpc-protocol */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/message-rpc/rpc-protocol.js");
const promise_util_1 = __webpack_require__(/*! ../promise-util */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/promise-util.js");
const inversify_1 = __webpack_require__(/*! ../../../shared/inversify */ "../node_modules/@theia/editor/node_modules/@theia/core/shared/inversify/index.js");
class RpcConnectionHandler {
    constructor(path, targetFactory, factoryConstructor = RpcProxyFactory) {
        this.path = path;
        this.targetFactory = targetFactory;
        this.factoryConstructor = factoryConstructor;
    }
    onConnection(connection) {
        const factory = new this.factoryConstructor();
        const proxy = factory.createProxy();
        factory.target = this.targetFactory(proxy);
        factory.listen(connection);
    }
}
exports.RpcConnectionHandler = RpcConnectionHandler;
const defaultRpcProtocolFactory = (channel, requestHandler) => new rpc_protocol_1.RpcProtocol(channel, requestHandler);
/**
 * Factory for RPC proxy objects.
 *
 * A RPC proxy exposes the programmatic interface of an object through
 * Theia's RPC protocol. This allows remote programs to call methods of this objects by
 * sending RPC requests. This takes place over a bi-directional stream,
 * where both ends can expose an object and both can call methods on each other'
 * exposed object.
 *
 * For example, assuming we have an object of the following type on one end:
 *
 *     class Foo {
 *         bar(baz: number): number { return baz + 1 }
 *     }
 *
 * which we want to expose through a RPC interface.  We would do:
 *
 *     let target = new Foo()
 *     let factory = new RpcProxyFactory<Foo>('/foo', target)
 *     factory.onConnection(connection)
 *
 * The party at the other end of the `connection`, in order to remotely call
 * methods on this object would do:
 *
 *     let factory = new RpcProxyFactory<Foo>('/foo')
 *     factory.onConnection(connection)
 *     let proxy = factory.createProxy();
 *     let result = proxy.bar(42)
 *     // result is equal to 43
 *
 * One the wire, it would look like this:
 *
 *     --> { "type":"1", "id": 1, "method": "bar", "args": [42]}
 *     <-- { "type":"3", "id": 1, "res": 43}
 *
 * Note that in the code of the caller, we didn't pass a target object to
 * RpcProxyFactory, because we don't want/need to expose an object.
 * If we had passed a target object, the other side could've called methods on
 * it.
 *
 * @param <T> - The type of the object to expose to RPC.
 */
class RpcProxyFactory {
    /**
     * Build a new RpcProxyFactory.
     *
     * @param target - The object to expose to RPC methods calls.  If this
     *   is omitted, the proxy won't be able to handle requests, only send them.
     */
    constructor(target, rpcProtocolFactory = defaultRpcProtocolFactory) {
        this.target = target;
        this.rpcProtocolFactory = rpcProtocolFactory;
        this.onDidOpenConnectionEmitter = new event_1.Emitter();
        this.onDidCloseConnectionEmitter = new event_1.Emitter();
        this.waitForConnection();
    }
    waitForConnection() {
        this.rpcDeferred = new promise_util_1.Deferred();
        this.rpcDeferred.promise.then(protocol => {
            protocol.channel.onClose(() => {
                this.onDidCloseConnectionEmitter.fire(undefined);
                // Wait for connection in case the backend reconnects
                this.waitForConnection();
            });
            this.onDidOpenConnectionEmitter.fire(undefined);
        });
    }
    /**
     * Connect a {@link Channel} to the factory by creating an {@link RpcProtocol} on top of it.
     *
     * This protocol will be used to send/receive RPC requests and
     * responses.
     */
    listen(channel) {
        const protocol = this.rpcProtocolFactory(channel, (meth, args) => this.onRequest(meth, ...args));
        protocol.onNotification(event => this.onNotification(event.method, ...event.args));
        this.rpcDeferred.resolve(protocol);
    }
    /**
     * Process an incoming RPC method call.
     *
     * onRequest is called when the RPC connection received a method call
     * request.  It calls the corresponding method on [[target]].
     *
     * The return value is a Promise object that is resolved with the return
     * value of the method call, if it is successful.  The promise is rejected
     * if the called method does not exist or if it throws.
     *
     * @returns A promise of the method call completion.
     */
    async onRequest(method, ...args) {
        try {
            if (this.target) {
                return await this.target[method](...args);
            }
            else {
                throw new Error(`no target was set to handle ${method}`);
            }
        }
        catch (error) {
            throw this.serializeError(error);
        }
    }
    /**
     * Process an incoming RPC notification.
     *
     * Same as [[onRequest]], but called on incoming notifications rather than
     * methods calls.
     */
    onNotification(method, ...args) {
        if (this.target) {
            this.target[method](...args);
        }
    }
    /**
     * Create a Proxy exposing the interface of an object of type T.  This Proxy
     * can be used to do RPC method calls on the remote target object as
     * if it was local.
     *
     * If `T` implements `RpcServer` then a client is used as a target object for a remote target object.
     */
    createProxy() {
        const result = new Proxy(this, this);
        return result;
    }
    /**
     * Get a callable object that executes a RPC method call.
     *
     * Getting a property on the Proxy object returns a callable that, when
     * called, executes a RPC call.  The name of the property defines the
     * method to be called.  The callable takes a variable number of arguments,
     * which are passed in the RPC method call.
     *
     * For example, if you have a Proxy object:
     *
     *     let fooProxyFactory = RpcProxyFactory<Foo>('/foo')
     *     let fooProxy = fooProxyFactory.createProxy()
     *
     * accessing `fooProxy.bar` will return a callable that, when called,
     * executes a RPC method call to method `bar`.  Therefore, doing
     * `fooProxy.bar()` will call the `bar` method on the remote Foo object.
     *
     * @param target - unused.
     * @param p - The property accessed on the Proxy object.
     * @param receiver - unused.
     * @returns A callable that executes the RPC call.
     */
    get(target, p, receiver) {
        if (p === 'setClient') {
            return (client) => {
                this.target = client;
            };
        }
        if (p === 'getClient') {
            return () => this.target;
        }
        if (p === 'onDidOpenConnection') {
            return this.onDidOpenConnectionEmitter.event;
        }
        if (p === 'onDidCloseConnection') {
            return this.onDidCloseConnectionEmitter.event;
        }
        if (p === 'then') {
            // Prevent inversify from identifying this proxy as a promise object.
            return undefined;
        }
        const isNotify = this.isNotification(p);
        return (...args) => {
            const method = p.toString();
            const capturedError = new Error(`Request '${method}' failed`);
            return this.rpcDeferred.promise.then(connection => new Promise((resolve, reject) => {
                try {
                    if (isNotify) {
                        connection.sendNotification(method, args);
                        resolve(undefined);
                    }
                    else {
                        const resultPromise = connection.sendRequest(method, args);
                        resultPromise
                            .catch((err) => reject(this.deserializeError(capturedError, err)))
                            .then((result) => resolve(result));
                    }
                }
                catch (err) {
                    reject(err);
                }
            }));
        };
    }
    /**
     * Return whether the given property represents a notification.
     *
     * A property leads to a notification rather than a method call if its name
     * begins with `notify` or `on`.
     *
     * @param p - The property being called on the proxy.
     * @return Whether `p` represents a notification.
     */
    isNotification(p) {
        return p.toString().startsWith('notify') || p.toString().startsWith('on');
    }
    serializeError(e) {
        if (application_error_1.ApplicationError.is(e)) {
            return new rpc_message_encoder_1.ResponseError(e.code, '', Object.assign({ kind: 'application' }, e.toJson()));
        }
        return e;
    }
    deserializeError(capturedError, e) {
        if (e instanceof rpc_message_encoder_1.ResponseError) {
            const capturedStack = capturedError.stack || '';
            if (e.data && e.data.kind === 'application') {
                const { stack, data, message } = e.data;
                return application_error_1.ApplicationError.fromJson(e.code, {
                    message: message || capturedError.message,
                    data,
                    stack: `${capturedStack}\nCaused by: ${stack}`
                });
            }
            e.stack = capturedStack;
        }
        return e;
    }
}
exports.RpcProxyFactory = RpcProxyFactory;
/**
 * @deprecated since 1.39.0 use `RpcConnectionHandler` instead
 */
class JsonRpcConnectionHandler extends RpcConnectionHandler {
}
exports.JsonRpcConnectionHandler = JsonRpcConnectionHandler;
/**
 * @deprecated since 1.39.0 use `RpcProxyFactory` instead
 */
class JsonRpcProxyFactory extends RpcProxyFactory {
}
exports.JsonRpcProxyFactory = JsonRpcProxyFactory;
// eslint-disable-next-line deprecation/deprecation
(0, inversify_1.decorate)((0, inversify_1.injectable)(), JsonRpcProxyFactory);
// eslint-disable-next-line deprecation/deprecation
(0, inversify_1.decorate)((0, inversify_1.unmanaged)(), JsonRpcProxyFactory, 0);


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/nls.js":
/*!********************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/common/nls.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2021 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.nls = void 0;
const localization_1 = __webpack_require__(/*! ./i18n/localization */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/i18n/localization.js");
var nls;
(function (nls) {
    nls.defaultLocale = 'en';
    nls.localeId = 'localeId';
    nls.locale = typeof window === 'object' && window && window.localStorage.getItem(nls.localeId) || undefined;
    let keyProvider;
    /**
     * Automatically localizes a text if that text also exists in the vscode repository.
     */
    function localizeByDefault(defaultValue, ...args) {
        if (nls.localization) {
            const key = getDefaultKey(defaultValue);
            if (key) {
                return localize(key, defaultValue, ...args);
            }
            else {
                console.warn(`Could not find translation key for default value: "${defaultValue}"`);
            }
        }
        return localization_1.Localization.format(defaultValue, args);
    }
    nls.localizeByDefault = localizeByDefault;
    function getDefaultKey(defaultValue) {
        if (!keyProvider) {
            keyProvider = new LocalizationKeyProvider();
        }
        const key = keyProvider.get(defaultValue);
        if (key) {
            return key;
        }
        return '';
    }
    nls.getDefaultKey = getDefaultKey;
    function localize(key, defaultValue, ...args) {
        return localization_1.Localization.localize(nls.localization, key, defaultValue, ...args);
    }
    nls.localize = localize;
    function isSelectedLocale(id) {
        if (nls.locale === undefined && id === nls.defaultLocale) {
            return true;
        }
        return nls.locale === id;
    }
    nls.isSelectedLocale = isSelectedLocale;
    function setLocale(id) {
        window.localStorage.setItem(nls.localeId, id);
    }
    nls.setLocale = setLocale;
})(nls = exports.nls || (exports.nls = {}));
class LocalizationKeyProvider {
    constructor() {
        this.preferredKeys = new Set([
            // We only want the `File` translation used in the menu
            'vscode/fileActions.contribution/filesCategory',
            // Needed for `Close Editor` translation
            'vscode/editor.contribution/closeEditor'
        ]);
        this.data = this.buildData();
    }
    get(defaultValue) {
        const normalized = localization_1.Localization.normalize(defaultValue);
        return this.data.get(normalized) || this.data.get(normalized.toUpperCase());
    }
    /**
     * Transforms the data coming from the `nls.metadata.json` file into a map.
     * The original data contains arrays of keys and messages.
     * The result is a map that matches each message to the key that belongs to it.
     *
     * This allows us to skip the key in the localization process and map the original english default values to their translations in different languages.
     */
    buildData() {
        const bundles = __webpack_require__(/*! ../../src/common/i18n/nls.metadata.json */ "../node_modules/@theia/editor/node_modules/@theia/core/src/common/i18n/nls.metadata.json");
        const keys = bundles.keys;
        const messages = bundles.messages;
        const data = new Map();
        const foundPreferredKeys = new Set();
        const keysAndMessages = this.buildKeyMessageTuples(keys, messages);
        for (const { key, message } of keysAndMessages) {
            if (!foundPreferredKeys.has(message)) {
                data.set(message, key);
                if (this.preferredKeys.has(key)) {
                    // Prevent messages with preferred keys to be overridden
                    foundPreferredKeys.add(message);
                }
            }
        }
        // Second pass adds each message again in upper case, if the message doesn't already exist in upper case
        // The second pass is needed to not accidentally override any translations which actually use the upper case message
        for (const { key, message } of keysAndMessages) {
            const upperMessage = message.toUpperCase();
            if (!data.has(upperMessage)) {
                data.set(upperMessage, key);
            }
        }
        return data;
    }
    buildKeyMessageTuples(keys, messages) {
        const list = [];
        for (const [fileKey, messageBundle] of Object.entries(messages)) {
            const keyBundle = keys[fileKey];
            for (let i = 0; i < messageBundle.length; i++) {
                const message = localization_1.Localization.normalize(messageBundle[i]);
                const key = keyBundle[i];
                const localizationKey = this.buildKey(typeof key === 'string' ? key : key.key, fileKey);
                list.push({
                    key: localizationKey,
                    message
                });
            }
        }
        return list;
    }
    buildKey(key, filepath) {
        return `vscode/${localization_1.Localization.transformKey(filepath)}/${key}`;
    }
}


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/numbers.js":
/*!************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/common/numbers.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2021 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MAX_SAFE_INTEGER = void 0;
/**
 * The maximum safe integer (`2^32-1`) is used as a placeholder for large numbers which are not allowed to be floats.
 * For example as line/column arguments for monaco-ranges.
 */
exports.MAX_SAFE_INTEGER = 2147483647;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/objects.js":
/*!************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/common/objects.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.cloneAndChange = exports.isEmpty = exports.notEmpty = exports.deepFreeze = exports.deepClone = void 0;
const types_1 = __webpack_require__(/*! ./types */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/types.js");
function deepClone(obj) {
    if (!(0, types_1.isObject)(obj)) {
        return obj;
    }
    if (obj instanceof RegExp) {
        return obj;
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const result = Array.isArray(obj) ? [] : {};
    Object.keys(obj).forEach((key) => {
        const prop = obj[key];
        if ((0, types_1.isObject)(prop)) {
            result[key] = deepClone(prop);
        }
        else {
            result[key] = prop;
        }
    });
    return result;
}
exports.deepClone = deepClone;
function deepFreeze(obj) {
    if (!(0, types_1.isObject)(obj)) {
        return obj;
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const stack = [obj];
    while (stack.length > 0) {
        const objectToFreeze = stack.shift();
        Object.freeze(objectToFreeze);
        for (const key in objectToFreeze) {
            if (_hasOwnProperty.call(objectToFreeze, key)) {
                const prop = objectToFreeze[key];
                if ((0, types_1.isObject)(prop) && !Object.isFrozen(prop)) {
                    stack.push(prop);
                }
            }
        }
    }
    return obj;
}
exports.deepFreeze = deepFreeze;
const _hasOwnProperty = Object.prototype.hasOwnProperty;
function notEmpty(arg) {
    // eslint-disable-next-line no-null/no-null
    return arg !== undefined && arg !== null;
}
exports.notEmpty = notEmpty;
/**
 * `true` if the argument is an empty object. Otherwise, `false`.
 */
function isEmpty(arg) {
    return Object.keys(arg).length === 0 && arg.constructor === Object;
}
exports.isEmpty = isEmpty;
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation and others. All rights reserved.
 *  Licensed under the MIT License. See https://github.com/Microsoft/vscode/blob/master/LICENSE.txt for license information.
 *--------------------------------------------------------------------------------------------*/
// Copied from https://github.com/microsoft/vscode/blob/1.72.2/src/vs/base/common/objects.ts
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function cloneAndChange(obj, changer) {
    return _cloneAndChange(obj, changer, new Set());
}
exports.cloneAndChange = cloneAndChange;
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function _cloneAndChange(obj, changer, seen) {
    if ((0, types_1.isUndefinedOrNull)(obj)) {
        return obj;
    }
    const changed = changer(obj);
    if (!(0, types_1.isUndefined)(changed)) {
        return changed;
    }
    if (Array.isArray(obj)) {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        const r1 = [];
        for (const e of obj) {
            r1.push(_cloneAndChange(e, changer, seen));
        }
        return r1;
    }
    if ((0, types_1.isObject)(obj)) {
        if (seen.has(obj)) {
            throw new Error('Cannot clone recursive data-structure');
        }
        seen.add(obj);
        const r2 = {};
        for (const i2 in obj) {
            if (_hasOwnProperty.call(obj, i2)) {
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                r2[i2] = _cloneAndChange(obj[i2], changer, seen);
            }
        }
        seen.delete(obj);
        return r2;
    }
    return obj;
}


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/os.js":
/*!*******************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/common/os.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2017 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.OSBackendProvider = exports.OSBackendProviderPath = exports.OS = exports.cmd = exports.EOL = exports.isOSX = exports.isWindows = void 0;
function is(userAgent, platform) {
    if (typeof navigator !== 'undefined') {
        if (navigator.userAgent && navigator.userAgent.indexOf(userAgent) >= 0) {
            return true;
        }
    }
    if (typeof process !== 'undefined') {
        return (process.platform === platform);
    }
    return false;
}
exports.isWindows = is('Windows', 'win32');
exports.isOSX = is('Mac', 'darwin');
exports.EOL = exports.isWindows ? '\r\n' : '\n';
function cmd(command, ...args) {
    return [
        exports.isWindows ? 'cmd' : command,
        exports.isWindows ? ['/c', command, ...args] : args
    ];
}
exports.cmd = cmd;
var OS;
(function (OS) {
    /**
     * Enumeration of the supported operating systems.
     */
    let Type;
    (function (Type) {
        Type["Windows"] = "Windows";
        Type["Linux"] = "Linux";
        Type["OSX"] = "OSX";
    })(Type = OS.Type || (OS.Type = {}));
    /**
     * Returns with the type of the operating system. If it is neither [Windows](isWindows) nor [OS X](isOSX), then
     * it always return with the `Linux` OS type.
     */
    function type() {
        if (exports.isWindows) {
            return Type.Windows;
        }
        if (exports.isOSX) {
            return Type.OSX;
        }
        return Type.Linux;
    }
    OS.type = type;
    OS.backend = {
        type,
        isWindows: exports.isWindows,
        isOSX: exports.isOSX,
        EOL: exports.EOL
    };
})(OS = exports.OS || (exports.OS = {}));
exports.OSBackendProviderPath = '/os';
exports.OSBackendProvider = Symbol('OSBackendProvider');


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/path.js":
/*!*********************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/common/path.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2017 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Path = void 0;
/**
 * On POSIX:
 * ┌──────────────────────┬────────────┐
 * │          dir         │    base    │
 * ├──────┬               ├──────┬─────┤
 * │ root │               │ name │ ext │
 * "  /     home/user/dir / file  .txt "
 * └──────┴───────────────┴──────┴─────┘
 *
 * On Windows:
 * ┌──────────────────────┬────────────┐
 * │           dir        │    base    │
 * ├──────┬               ├──────┬─────┤
 * │ root │               │ name │ ext │
 * "  /c: / home/user/dir / file  .txt "
 * └──────┴───────────────┴──────┴─────┘
 */
const os_1 = __webpack_require__(/*! ./os */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/os.js");
class Path {
    /**
     * The raw should be normalized, meaning that only '/' is allowed as a path separator.
     */
    constructor(raw) {
        raw = Path.normalizePathSeparator(raw);
        this.raw = Path.normalizeDrive(raw);
        const firstIndex = this.raw.indexOf(Path.separator);
        const lastIndex = this.raw.lastIndexOf(Path.separator);
        this.isAbsolute = firstIndex === 0;
        this.base = lastIndex === -1 ? this.raw : this.raw.substring(lastIndex + 1);
        this.isRoot = this.isAbsolute && firstIndex === lastIndex && (!this.base || Path.isDrive(this.base));
        this.root = this.computeRoot();
        const extIndex = this.base.lastIndexOf('.');
        this.name = extIndex === -1 ? this.base : this.base.substring(0, extIndex);
        this.ext = extIndex === -1 ? '' : this.base.substring(extIndex);
    }
    static isDrive(segment) {
        return segment.endsWith(':');
    }
    /**
     * vscode-uri always normalizes drive letters to lower case:
     * https://github.com/Microsoft/vscode-uri/blob/b1d3221579f97f28a839b6f996d76fc45e9964d8/src/index.ts#L1025
     * Theia path should be adjusted to this.
     */
    static normalizeDrive(path) {
        // lower-case windows drive letters in /C:/fff or C:/fff
        if (path.length >= 3 && path.charCodeAt(0) === 47 /* '/' */ && path.charCodeAt(2) === 58 /* ':' */) {
            const code = path.charCodeAt(1);
            if (code >= 65 /* A */ && code <= 90 /* Z */) {
                path = `/${String.fromCharCode(code + 32)}:${path.substring(3)}`; // "/c:".length === 3
            }
        }
        else if (path.length >= 2 && path.charCodeAt(1) === 58 /* ':' */) {
            const code = path.charCodeAt(0);
            if (code >= 65 /* A */ && code <= 90 /* Z */) {
                path = `${String.fromCharCode(code + 32)}:${path.substring(2)}`; // "c:".length === 2
            }
            if (path.charCodeAt(0) !== 47 /* '/' */) {
                path = `${String.fromCharCode(47)}${path}`;
            }
        }
        return path;
    }
    /**
     * Normalize path separator to use Path.separator
     * @param Path candidate to normalize
     * @returns Normalized string path
     */
    static normalizePathSeparator(path) {
        return path.split(/[\\]/).join(Path.separator);
    }
    /**
     * Creates a windows path from the given path string.
     * A windows path uses an upper case drive letter and backwards slashes.
     * @param path The input path
     * @returns Windows style path
     */
    static windowsPath(path) {
        const offset = path.charAt(0) === '/' ? 1 : 0;
        if (path.charAt(offset + 1) === ':') {
            const driveLetter = path.charAt(offset).toUpperCase();
            const substring = path.substring(offset + 2).replace(/\//g, '\\');
            return `${driveLetter}:${substring || '\\'}`;
        }
        return path.replace(/\//g, '\\');
    }
    /**
     * Tildify path, replacing `home` with `~` if user's `home` is present at the beginning of the path.
     * This is a non-operation for Windows.
     *
     * @param resourcePath
     * @param home
     */
    static tildify(resourcePath, home) {
        const path = new Path(resourcePath);
        const isWindows = path.root && Path.isDrive(path.root.base);
        if (!isWindows && home && resourcePath.indexOf(`${home}/`) === 0) {
            return resourcePath.replace(`${home}/`, '~/');
        }
        return resourcePath;
    }
    /**
     * Untildify path, replacing `~` with `home` if `~` present at the beginning of the path.
     * This is a non-operation for Windows.
     *
     * @param resourcePath
     * @param home
     */
    static untildify(resourcePath, home) {
        if (resourcePath.startsWith('~')) {
            const untildifiedResource = resourcePath.replace(/^~/, home);
            const untildifiedPath = new Path(untildifiedResource);
            const isWindows = untildifiedPath.root && Path.isDrive(untildifiedPath.root.base);
            if (!isWindows && home && untildifiedResource.startsWith(`${home}`)) {
                return untildifiedResource;
            }
        }
        return resourcePath;
    }
    computeRoot() {
        // '/' -> '/'
        // '/c:' -> '/c:'
        if (this.isRoot) {
            return this;
        }
        // 'foo/bar' -> `undefined`
        if (!this.isAbsolute) {
            return undefined;
        }
        const index = this.raw.indexOf(Path.separator, Path.separator.length);
        if (index === -1) {
            // '/foo/bar' -> '/'
            return new Path(Path.separator);
        }
        // '/c:/foo/bar' -> '/c:'
        // '/foo/bar' -> '/'
        return new Path(this.raw.substring(0, index)).root;
    }
    /**
     * Returns the parent directory if it exists (`hasDir === true`) or `this` otherwise.
     */
    get dir() {
        if (this._dir === undefined) {
            this._dir = this.computeDir();
        }
        return this._dir;
    }
    /**
     * Returns `true` if this has a parent directory, `false` otherwise.
     *
     * _This implementation returns `true` if and only if this is not the root dir and
     * there is a path separator in the raw path._
     */
    get hasDir() {
        return !this.isRoot && this.raw.lastIndexOf(Path.separator) !== -1;
    }
    computeDir() {
        if (!this.hasDir) {
            return this;
        }
        const lastIndex = this.raw.lastIndexOf(Path.separator);
        if (this.isAbsolute) {
            const firstIndex = this.raw.indexOf(Path.separator);
            if (firstIndex === lastIndex) {
                return new Path(this.raw.substring(0, firstIndex + 1));
            }
        }
        return new Path(this.raw.substring(0, lastIndex));
    }
    join(...paths) {
        const relativePath = paths.filter(s => !!s).join(Path.separator);
        if (!relativePath) {
            return this;
        }
        if (this.raw.endsWith(Path.separator)) {
            return new Path(this.raw + relativePath);
        }
        return new Path(this.raw + Path.separator + relativePath);
    }
    /**
     *
     * @param paths portions of a path
     * @returns a new Path if an absolute path can be computed from the segments passed in + this.raw
     * If no absolute path can be computed, returns undefined.
     *
     * Processes the path segments passed in from right to left (reverse order) concatenating until an
     * absolute path is found.
     */
    resolve(...paths) {
        const segments = paths.slice().reverse(); // Don't mutate the caller's array.
        segments.push(this.raw);
        let result = new Path('');
        for (const segment of segments) {
            if (segment) {
                const next = new Path(segment).join(result.raw);
                if (next.isAbsolute) {
                    return next.normalize();
                }
                result = next;
            }
        }
    }
    toString() {
        return this.raw;
    }
    /**
     * Converts the current path into a file system path.
     * @param format Determines the format of the path.
     * If `undefined`, the format will be determined by the `OS.backend.type` value.
     * @returns A file system path.
     */
    fsPath(format) {
        if (format === Path.Format.Windows || (format === undefined && os_1.OS.backend.isWindows)) {
            return Path.windowsPath(this.raw);
        }
        else {
            return this.raw;
        }
    }
    relative(path) {
        if (this.raw === path.raw) {
            return new Path('');
        }
        if (!this.raw || !path.raw) {
            return undefined;
        }
        const raw = this.base ? this.raw + Path.separator : this.raw;
        if (!path.raw.startsWith(raw)) {
            return undefined;
        }
        const relativePath = path.raw.substring(raw.length);
        return new Path(relativePath);
    }
    isEqualOrParent(path) {
        return !!this.relative(path);
    }
    relativity(path) {
        const relative = this.relative(path);
        if (relative) {
            const relativeStr = relative.toString();
            if (relativeStr === '') {
                return 0;
            }
            return relativeStr.split(Path.separator).length;
        }
        return -1;
    }
    /*
     * return a normalized Path, resolving '..' and '.' segments
     */
    normalize() {
        const trailingSlash = this.raw.endsWith('/');
        const pathArray = this.toString().split('/');
        const resultArray = [];
        pathArray.forEach((value, index) => {
            if (!value || value === '.') {
                return;
            }
            if (value === '..') {
                if (resultArray.length && resultArray[resultArray.length - 1] !== '..') {
                    resultArray.pop();
                }
                else if (!this.isAbsolute) {
                    resultArray.push('..');
                }
            }
            else {
                resultArray.push(value);
            }
        });
        if (resultArray.length === 0) {
            if (this.isRoot) {
                return new Path('/');
            }
            else {
                return new Path('.');
            }
        }
        return new Path((this.isAbsolute ? '/' : '') + resultArray.join('/') + (trailingSlash ? '/' : ''));
    }
}
exports.Path = Path;
Path.separator = '/';
(function (Path) {
    let Format;
    (function (Format) {
        Format[Format["Posix"] = 0] = "Posix";
        Format[Format["Windows"] = 1] = "Windows";
    })(Format = Path.Format || (Path.Format = {}));
})(Path = exports.Path || (exports.Path = {}));


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/paths.js":
/*!**********************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/common/paths.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
// *****************************************************************************
// Copyright (C) 2018 Red Hat, Inc. and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
// copied from https://github.com/Microsoft/vscode/blob/bf7ac9201e7a7d01741d4e6e64b5dc9f3197d97b/src/vs/base/common/paths.ts
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
/* eslint-disable no-void */
/* eslint-disable no-null/no-null */

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.isEqualOrParent = exports.getRoot = exports.normalize = exports.extname = exports.basename = exports.nativeSep = exports.sep = void 0;
const os_1 = __webpack_require__(/*! ./os */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/os.js");
const strings_1 = __webpack_require__(/*! ./strings */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/strings.js");
/**
 * The forward slash path separator.
 */
exports.sep = '/';
/**
 * The native path separator depending on the OS.
 */
exports.nativeSep = os_1.isWindows ? '\\' : '/';
const _posixBadPath = /(\/\.\.?\/)|(\/\.\.?)$|^(\.\.?\/)|(\/\/+)|(\\)/;
const _winBadPath = /(\\\.\.?\\)|(\\\.\.?)$|^(\.\.?\\)|(\\\\+)|(\/)/;
function _isNormal(path, win) {
    return win
        ? !_winBadPath.test(path)
        : !_posixBadPath.test(path);
}
/**
 * @returns the base name of a path.
 */
function basename(path) {
    const idx = ~path.lastIndexOf('/') || ~path.lastIndexOf('\\');
    if (idx === 0) {
        return path;
    }
    else if (~idx === path.length - 1) {
        return basename(path.substring(0, path.length - 1));
    }
    else {
        return path.substring(~idx + 1);
    }
}
exports.basename = basename;
/**
 * @returns `.far` from `boo.far` or the empty string.
 */
function extname(path) {
    path = basename(path);
    const idx = ~path.lastIndexOf('.');
    return idx ? path.substring(~idx) : '';
}
exports.extname = extname;
function normalize(path, toOSPath) {
    if (path === null || path === void 0) {
        return path;
    }
    const len = path.length;
    if (len === 0) {
        return '.';
    }
    const wantsBackslash = os_1.isWindows && toOSPath;
    if (_isNormal(path, wantsBackslash)) {
        return path;
    }
    // eslint-disable-next-line @typescript-eslint/no-shadow
    const sep = wantsBackslash ? '\\' : '/';
    const root = getRoot(path, sep);
    // skip the root-portion of the path
    let start = root.length;
    let skip = false;
    let res = '';
    for (let end = root.length; end <= len; end++) {
        // either at the end or at a path-separator character
        if (end === len || path.charCodeAt(end) === 47 /* Slash */ || path.charCodeAt(end) === 92 /* Backslash */) {
            if (streql(path, start, end, '..')) {
                // skip current and remove parent (if there is already something)
                const prev_start = res.lastIndexOf(sep);
                const prev_part = res.slice(prev_start + 1);
                if ((root || prev_part.length > 0) && prev_part !== '..') {
                    res = prev_start === -1 ? '' : res.slice(0, prev_start);
                    skip = true;
                }
            }
            else if (streql(path, start, end, '.') && (root || res || end < len - 1)) {
                // skip current (if there is already something or if there is more to come)
                skip = true;
            }
            if (!skip) {
                const part = path.slice(start, end);
                if (res !== '' && res[res.length - 1] !== sep) {
                    res += sep;
                }
                res += part;
            }
            start = end + 1;
            skip = false;
        }
    }
    return root + res;
}
exports.normalize = normalize;
function streql(value, start, end, other) {
    return start + other.length === end && value.indexOf(other, start) === start;
}
/**
 * Computes the _root_ this path, like `getRoot('c:\files') === c:\`,
 * `getRoot('files:///files/path') === files:///`,
 * or `getRoot('\\server\shares\path') === \\server\shares\`
 */
// eslint-disable-next-line @typescript-eslint/no-shadow
function getRoot(path, sep = '/') {
    if (!path) {
        return '';
    }
    const len = path.length;
    let code = path.charCodeAt(0);
    if (code === 47 /* Slash */ || code === 92 /* Backslash */) {
        code = path.charCodeAt(1);
        if (code === 47 /* Slash */ || code === 92 /* Backslash */) {
            // UNC candidate \\localhost\shares\ddd
            //               ^^^^^^^^^^^^^^^^^^^
            code = path.charCodeAt(2);
            if (code !== 47 /* Slash */ && code !== 92 /* Backslash */) {
                // eslint-disable-next-line @typescript-eslint/no-shadow
                let pos = 3;
                const start = pos;
                for (; pos < len; pos++) {
                    code = path.charCodeAt(pos);
                    if (code === 47 /* Slash */ || code === 92 /* Backslash */) {
                        break;
                    }
                }
                code = path.charCodeAt(pos + 1);
                if (start !== pos && code !== 47 /* Slash */ && code !== 92 /* Backslash */) {
                    pos += 1;
                    for (; pos < len; pos++) {
                        code = path.charCodeAt(pos);
                        if (code === 47 /* Slash */ || code === 92 /* Backslash */) {
                            return path.slice(0, pos + 1) // consume this separator
                                .replace(/[\\/]/g, sep);
                        }
                    }
                }
            }
        }
        // /user/far
        // ^
        return sep;
    }
    else if ((code >= 65 /* A */ && code <= 90 /* Z */) || (code >= 97 /* a */ && code <= 122 /* z */)) {
        // check for windows drive letter c:\ or c:
        if (path.charCodeAt(1) === 58 /* Colon */) {
            code = path.charCodeAt(2);
            if (code === 47 /* Slash */ || code === 92 /* Backslash */) {
                // C:\fff
                // ^^^
                return path.slice(0, 2) + sep;
            }
            else {
                // C:
                // ^^
                return path.slice(0, 2);
            }
        }
    }
    // check for URI
    // scheme://authority/path
    // ^^^^^^^^^^^^^^^^^^^
    let pos = path.indexOf('://');
    if (pos !== -1) {
        pos += 3; // 3 -> "://".length
        for (; pos < len; pos++) {
            code = path.charCodeAt(pos);
            if (code === 47 /* Slash */ || code === 92 /* Backslash */) {
                return path.slice(0, pos + 1); // consume this separator
            }
        }
    }
    return '';
}
exports.getRoot = getRoot;
function isEqualOrParent(path, candidate, ignoreCase) {
    if (path === candidate) {
        return true;
    }
    if (!path || !candidate) {
        return false;
    }
    if (candidate.length > path.length) {
        return false;
    }
    if (ignoreCase) {
        const beginsWith = (0, strings_1.startsWithIgnoreCase)(path, candidate);
        if (!beginsWith) {
            return false;
        }
        if (candidate.length === path.length) {
            return true; // same path, different casing
        }
        let sepOffset = candidate.length;
        if (candidate.charAt(candidate.length - 1) === exports.nativeSep) {
            sepOffset--; // adjust the expected sep offset in case our candidate already ends in separator character
        }
        return path.charAt(sepOffset) === exports.nativeSep;
    }
    if (candidate.charAt(candidate.length - 1) !== exports.nativeSep) {
        candidate += exports.nativeSep;
    }
    return path.indexOf(candidate) === 0;
}
exports.isEqualOrParent = isEqualOrParent;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/performance/index.js":
/*!**********************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/common/performance/index.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2021 STMicroelectronics and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./measurement */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/performance/measurement.js"), exports);
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./stopwatch */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/performance/stopwatch.js"), exports);
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./measurement-protocol */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/performance/measurement-protocol.js"), exports);


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/performance/measurement-protocol.js":
/*!*************************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/common/performance/measurement-protocol.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
* Copyright (c) 2021 STMicroelectronics and others.
*
* This program and the accompanying materials are made available under the
* terms of the Eclipse Public License 2.0 which is available at
* http://www.eclipse.org/legal/epl-2.0.
*
* This Source Code may also be made available under the following Secondary
* Licenses when the conditions for such availability set forth in the Eclipse
* Public License v. 2.0 are satisfied: GNU General Public License, version 2
* with the GNU Classpath Exception which is available at
* https://www.gnu.org/software/classpath/license.html.
*
* SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
*******************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.NullBackendStopwatch = exports.DefaultBackendStopwatch = exports.BackendStopwatchOptions = exports.stopwatchPath = exports.BackendStopwatch = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
/* eslint-disable @typescript-eslint/no-explicit-any */
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/es/inversify.js");
const stopwatch_1 = __webpack_require__(/*! ./stopwatch */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/performance/stopwatch.js");
exports.BackendStopwatch = Symbol('BackendStopwatch');
/** API path of the stopwatch service that exposes the back-end stopwatch to clients. */
exports.stopwatchPath = '/services/stopwatch';
exports.BackendStopwatchOptions = Symbol('BackendStopwatchOptions');
/**
 * Default implementation of the (remote) back-end stopwatch service.
 */
let DefaultBackendStopwatch = class DefaultBackendStopwatch {
    constructor() {
        this.measurements = new Map();
        this.idSequence = 0;
    }
    start(name, options) {
        const result = ++this.idSequence;
        this.measurements.set(result, this.stopwatch.start(name, options));
        return result;
    }
    stop(measurementToken, message, messageArgs) {
        const measurement = this.measurements.get(measurementToken);
        if (measurement) {
            this.measurements.delete(measurementToken);
            measurement.log(message, ...messageArgs);
        }
    }
};
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(stopwatch_1.Stopwatch),
    (0, tslib_1.__metadata)("design:type", stopwatch_1.Stopwatch)
], DefaultBackendStopwatch.prototype, "stopwatch", void 0);
DefaultBackendStopwatch = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)()
], DefaultBackendStopwatch);
exports.DefaultBackendStopwatch = DefaultBackendStopwatch;
/**
 * No-op implementation of the (remote) back-end stopwatch service.
 */
let NullBackendStopwatch = class NullBackendStopwatch {
    start() {
        return Promise.resolve(0);
    }
    stop() {
        return Promise.resolve();
    }
};
NullBackendStopwatch = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)()
], NullBackendStopwatch);
exports.NullBackendStopwatch = NullBackendStopwatch;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/performance/measurement.js":
/*!****************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/common/performance/measurement.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/********************************************************************************
* Copyright (c) 2021 STMicroelectronics and others.
*
* This program and the accompanying materials are made available under the
* terms of the Eclipse Public License 2.0 which is available at
* http://www.eclipse.org/legal/epl-2.0.
*
* This Source Code may also be made available under the following Secondary
* Licenses when the conditions for such availability set forth in the Eclipse
* Public License v. 2.0 are satisfied: GNU General Public License, version 2
* with the GNU Classpath Exception which is available at
* https://www.gnu.org/software/classpath/license.html.
*
* SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
*******************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/performance/stopwatch.js":
/*!**************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/common/performance/stopwatch.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
* Copyright (c) 2021 STMicroelectronics and others.
*
* This program and the accompanying materials are made available under the
* terms of the Eclipse Public License 2.0 which is available at
* http://www.eclipse.org/legal/epl-2.0.
*
* This Source Code may also be made available under the following Secondary
* Licenses when the conditions for such availability set forth in the Eclipse
* Public License v. 2.0 are satisfied: GNU General Public License, version 2
* with the GNU Classpath Exception which is available at
* https://www.gnu.org/software/classpath/license.html.
*
* SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
*******************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Stopwatch = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
/* eslint-disable @typescript-eslint/no-explicit-any */
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/es/inversify.js");
const logger_1 = __webpack_require__(/*! ../logger */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/logger.js");
const event_1 = __webpack_require__(/*! ../event */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/event.js");
/** The default log level for measurements that are not otherwise configured with a default. */
const DEFAULT_LOG_LEVEL = logger_1.LogLevel.INFO;
/**
 * A factory of {@link Measurement}s for performance logging.
 */
let Stopwatch = class Stopwatch {
    constructor(defaultLogOptions) {
        this.defaultLogOptions = defaultLogOptions;
        this._storedMeasurements = [];
        this.onDidAddMeasurementResultEmitter = new event_1.Emitter();
        if (!defaultLogOptions.defaultLogLevel) {
            defaultLogOptions.defaultLogLevel = DEFAULT_LOG_LEVEL;
        }
        if (defaultLogOptions.storeResults === undefined) {
            defaultLogOptions.storeResults = true;
        }
    }
    get onDidAddMeasurementResult() {
        return this.onDidAddMeasurementResultEmitter.event;
    }
    /**
     * Wrap an asynchronous function in a {@link Measurement} that logs itself on completion.
     * If obtaining and awaiting the `computation` runs too long according to the threshold
     * set in the `options`, then the log message is a warning, otherwise a debug log.
     *
     * @param name the {@link Measurement.name name of the measurement} to wrap around the function
     * @param description a description of what the function does, to be included in the log
     * @param computation a supplier of the asynchronous function to wrap
     * @param options optional addition configuration as for {@link measure}
     * @returns the wrapped `computation`
     *
     * @see {@link MeasurementOptions.thresholdMillis}
     */
    async startAsync(name, description, computation, options) {
        var _a;
        const threshold = (_a = options === null || options === void 0 ? void 0 : options.thresholdMillis) !== null && _a !== void 0 ? _a : Number.POSITIVE_INFINITY;
        const measure = this.start(name, options);
        const result = await computation();
        if (measure.stop() > threshold) {
            measure.warn(`${description} took longer than the expected maximum ${threshold} milliseconds`);
        }
        else {
            measure.log(description);
        }
        return result;
    }
    createMeasurement(name, measure, options) {
        const logOptions = this.mergeLogOptions(options);
        const measurement = {
            name,
            stop: () => {
                if (measurement.elapsed === undefined) {
                    const { startTime, duration } = measure();
                    measurement.elapsed = duration;
                    const result = {
                        name,
                        elapsed: duration,
                        startTime,
                        owner: logOptions.owner
                    };
                    if (logOptions.storeResults) {
                        this._storedMeasurements.push(result);
                    }
                    this.onDidAddMeasurementResultEmitter.fire(result);
                }
                return measurement.elapsed;
            },
            log: (activity, ...optionalArgs) => this.log(measurement, activity, this.atLevel(logOptions, undefined, optionalArgs)),
            debug: (activity, ...optionalArgs) => this.log(measurement, activity, this.atLevel(logOptions, logger_1.LogLevel.DEBUG, optionalArgs)),
            info: (activity, ...optionalArgs) => this.log(measurement, activity, this.atLevel(logOptions, logger_1.LogLevel.INFO, optionalArgs)),
            warn: (activity, ...optionalArgs) => this.log(measurement, activity, this.atLevel(logOptions, logger_1.LogLevel.WARN, optionalArgs)),
            error: (activity, ...optionalArgs) => this.log(measurement, activity, this.atLevel(logOptions, logger_1.LogLevel.ERROR, optionalArgs)),
        };
        return measurement;
    }
    mergeLogOptions(logOptions) {
        const result = { ...this.defaultLogOptions };
        if (logOptions) {
            Object.assign(result, logOptions);
        }
        return result;
    }
    atLevel(logOptions, levelOverride, optionalArgs) {
        return { ...logOptions, levelOverride, arguments: optionalArgs };
    }
    logLevel(elapsed, options) {
        var _a, _b;
        if (options === null || options === void 0 ? void 0 : options.levelOverride) {
            return options.levelOverride;
        }
        return (_b = (_a = options === null || options === void 0 ? void 0 : options.defaultLogLevel) !== null && _a !== void 0 ? _a : this.defaultLogOptions.defaultLogLevel) !== null && _b !== void 0 ? _b : DEFAULT_LOG_LEVEL;
    }
    log(measurement, activity, options) {
        var _a;
        const elapsed = measurement.stop();
        const level = this.logLevel(elapsed, options);
        if (Number.isNaN(elapsed)) {
            switch (level) {
                case logger_1.LogLevel.ERROR:
                case logger_1.LogLevel.FATAL:
                    // Always log errors, even if NaN duration from native API preventing a measurement
                    break;
                default:
                    // Measurement was prevented by native API, do not log NaN duration
                    return;
            }
        }
        const start = options.owner ? `${options.owner} start` : 'start';
        const timeFromStart = `Finished ${(options.now() / 1000).toFixed(3)} s after ${start}`;
        const whatWasMeasured = options.context ? `[${options.context}] ${activity}` : activity;
        this.logger.log(level, `${whatWasMeasured}: ${elapsed.toFixed(1)} ms [${timeFromStart}]`, ...((_a = options.arguments) !== null && _a !== void 0 ? _a : []));
    }
    get storedMeasurements() {
        return this._storedMeasurements;
    }
};
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(logger_1.ILogger),
    (0, tslib_1.__metadata)("design:type", Object)
], Stopwatch.prototype, "logger", void 0);
Stopwatch = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)(),
    (0, tslib_1.__metadata)("design:paramtypes", [Object])
], Stopwatch);
exports.Stopwatch = Stopwatch;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/preferences/preference-schema.js":
/*!**********************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/common/preferences/preference-schema.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2019 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PreferenceDataProperty = exports.PreferenceSchemaProperties = exports.PreferenceSchema = void 0;
const preference_scope_1 = __webpack_require__(/*! ./preference-scope */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/preferences/preference-scope.js");
const types_1 = __webpack_require__(/*! ../types */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/types.js");
var PreferenceSchema;
(function (PreferenceSchema) {
    function is(obj) {
        return (0, types_1.isObject)(obj) && PreferenceSchemaProperties.is(obj.properties);
    }
    PreferenceSchema.is = is;
    function getDefaultScope(schema) {
        let defaultScope = preference_scope_1.PreferenceScope.Workspace;
        if (!preference_scope_1.PreferenceScope.is(schema.scope)) {
            defaultScope = preference_scope_1.PreferenceScope.fromString(schema.scope) || preference_scope_1.PreferenceScope.Workspace;
        }
        else {
            defaultScope = schema.scope;
        }
        return defaultScope;
    }
    PreferenceSchema.getDefaultScope = getDefaultScope;
})(PreferenceSchema = exports.PreferenceSchema || (exports.PreferenceSchema = {}));
var PreferenceSchemaProperties;
(function (PreferenceSchemaProperties) {
    function is(obj) {
        return (0, types_1.isObject)(obj);
    }
    PreferenceSchemaProperties.is = is;
})(PreferenceSchemaProperties = exports.PreferenceSchemaProperties || (exports.PreferenceSchemaProperties = {}));
var PreferenceDataProperty;
(function (PreferenceDataProperty) {
    function fromPreferenceSchemaProperty(schemaProps, defaultScope = preference_scope_1.PreferenceScope.Workspace) {
        if (!schemaProps.scope) {
            schemaProps.scope = defaultScope;
        }
        else if ((0, types_1.isString)(schemaProps.scope)) {
            return Object.assign(schemaProps, { scope: preference_scope_1.PreferenceScope.fromString(schemaProps.scope) || defaultScope });
        }
        return schemaProps;
    }
    PreferenceDataProperty.fromPreferenceSchemaProperty = fromPreferenceSchemaProperty;
})(PreferenceDataProperty = exports.PreferenceDataProperty || (exports.PreferenceDataProperty = {}));


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/preferences/preference-scope.js":
/*!*********************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/common/preferences/preference-scope.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2019 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PreferenceScope = void 0;
var PreferenceScope;
(function (PreferenceScope) {
    PreferenceScope[PreferenceScope["Default"] = 0] = "Default";
    PreferenceScope[PreferenceScope["User"] = 1] = "User";
    PreferenceScope[PreferenceScope["Workspace"] = 2] = "Workspace";
    PreferenceScope[PreferenceScope["Folder"] = 3] = "Folder";
})(PreferenceScope = exports.PreferenceScope || (exports.PreferenceScope = {}));
(function (PreferenceScope) {
    function is(scope) {
        return typeof scope === 'number' && getScopes().includes(scope);
    }
    PreferenceScope.is = is;
    /**
     * @returns preference scopes from broadest to narrowest: Default -> Folder.
     */
    function getScopes() {
        return Object.values(PreferenceScope).filter(nameOrIndex => !isNaN(Number(nameOrIndex)));
    }
    PreferenceScope.getScopes = getScopes;
    /**
     * @returns preference scopes from narrowest to broadest. Folder -> Default.
     */
    function getReversedScopes() {
        return getScopes().reverse();
    }
    PreferenceScope.getReversedScopes = getReversedScopes;
    function getScopeNames(scope) {
        const names = [];
        const scopes = getScopes();
        if (scope) {
            for (const scopeIndex of scopes) {
                if (scopeIndex <= scope) {
                    names.push(PreferenceScope[scopeIndex]);
                }
            }
        }
        return names;
    }
    PreferenceScope.getScopeNames = getScopeNames;
    function fromString(strScope) {
        switch (strScope) {
            case 'application':
                return PreferenceScope.User;
            case 'window':
                return PreferenceScope.Folder;
            case 'resource':
                return PreferenceScope.Folder;
            case 'language-overridable':
                return PreferenceScope.Folder;
        }
    }
    PreferenceScope.fromString = fromString;
})(PreferenceScope = exports.PreferenceScope || (exports.PreferenceScope = {}));


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/prioritizeable.js":
/*!*******************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/common/prioritizeable.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2023 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Prioritizeable = void 0;
var Prioritizeable;
(function (Prioritizeable) {
    async function toPrioritizeable(rawValue, getPriority) {
        if (rawValue instanceof Array) {
            return Promise.all(rawValue.map(v => toPrioritizeable(v, getPriority)));
        }
        const value = await rawValue;
        const priority = await getPriority(value);
        return { priority, value };
    }
    Prioritizeable.toPrioritizeable = toPrioritizeable;
    function toPrioritizeableSync(rawValue, getPriority) {
        return rawValue.map(v => ({
            value: v,
            priority: getPriority(v)
        }));
    }
    Prioritizeable.toPrioritizeableSync = toPrioritizeableSync;
    function prioritizeAllSync(values, getPriority) {
        const prioritizeable = toPrioritizeableSync(values, getPriority);
        return prioritizeable.filter(isValid).sort(compare);
    }
    Prioritizeable.prioritizeAllSync = prioritizeAllSync;
    async function prioritizeAll(values, getPriority) {
        const prioritizeable = await toPrioritizeable(values, getPriority);
        return prioritizeable.filter(isValid).sort(compare);
    }
    Prioritizeable.prioritizeAll = prioritizeAll;
    function isValid(p) {
        return p.priority > 0;
    }
    Prioritizeable.isValid = isValid;
    function compare(p, p2) {
        return p2.priority - p.priority;
    }
    Prioritizeable.compare = compare;
})(Prioritizeable = exports.Prioritizeable || (exports.Prioritizeable = {}));


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/progress-service-protocol.js":
/*!******************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/common/progress-service-protocol.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2019 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ProgressClient = void 0;
exports.ProgressClient = Symbol('ProgressClient');


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/progress-service.js":
/*!*********************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/common/progress-service.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2019 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ProgressService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/es/inversify.js");
const message_service_protocol_1 = __webpack_require__(/*! ./message-service-protocol */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/message-service-protocol.js");
const cancellation_1 = __webpack_require__(/*! ./cancellation */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/cancellation.js");
const progress_service_protocol_1 = __webpack_require__(/*! ./progress-service-protocol */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/progress-service-protocol.js");
const message_service_1 = __webpack_require__(/*! ./message-service */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/message-service.js");
let ProgressService = class ProgressService {
    constructor() {
        this.progressIdPrefix = Math.random().toString(36).substring(5);
        this.counter = 0;
    }
    async showProgress(message, onDidCancel) {
        if (this.shouldDelegate(message)) {
            return this.messageService.showProgress(message, onDidCancel);
        }
        const id = this.newProgressId();
        const cancellationSource = new cancellation_1.CancellationTokenSource();
        const report = (update) => {
            this.client.reportProgress(id, update, message, cancellationSource.token);
        };
        const actions = new Set(message.actions);
        if (message_service_protocol_1.ProgressMessage.isCancelable(message)) {
            actions.delete(message_service_protocol_1.ProgressMessage.Cancel);
            actions.add(message_service_protocol_1.ProgressMessage.Cancel);
        }
        const clientMessage = { ...message, actions: Array.from(actions) };
        const result = this.client.showProgress(id, clientMessage, cancellationSource.token);
        if (message_service_protocol_1.ProgressMessage.isCancelable(message) && typeof onDidCancel === 'function') {
            result.then(value => {
                if (value === message_service_protocol_1.ProgressMessage.Cancel) {
                    onDidCancel();
                }
            });
        }
        return {
            id,
            cancel: () => cancellationSource.cancel(),
            result,
            report
        };
    }
    shouldDelegate(message) {
        const location = message.options && message.options.location;
        return location === 'notification';
    }
    newProgressId() {
        return `${this.progressIdPrefix}-${++this.counter}`;
    }
    async withProgress(text, locationId, task, onDidCancel) {
        const progress = await this.showProgress({ text, options: { cancelable: true, location: locationId } }, onDidCancel);
        try {
            return await task();
        }
        finally {
            progress.cancel();
        }
    }
};
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(progress_service_protocol_1.ProgressClient),
    (0, tslib_1.__metadata)("design:type", Object)
], ProgressService.prototype, "client", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(message_service_1.MessageService),
    (0, tslib_1.__metadata)("design:type", message_service_1.MessageService)
], ProgressService.prototype, "messageService", void 0);
ProgressService = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)()
], ProgressService);
exports.ProgressService = ProgressService;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/promise-util.js":
/*!*****************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/common/promise-util.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2017 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.firstTrue = exports.isThenable = exports.waitForEvent = exports.wait = exports.delay = exports.retry = exports.timeoutReject = exports.timeout = exports.Deferred = void 0;
const cancellation_1 = __webpack_require__(/*! ./cancellation */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/cancellation.js");
const types_1 = __webpack_require__(/*! ./types */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/types.js");
/**
 * Simple implementation of the deferred pattern.
 * An object that exposes a promise and functions to resolve and reject it.
 */
class Deferred {
    constructor() {
        this.state = 'unresolved';
        this.promise = new Promise((resolve, reject) => {
            this.resolve = resolve;
            this.reject = reject;
        }).then(res => (this.setState('resolved'), res), err => (this.setState('rejected'), Promise.reject(err)));
    }
    setState(state) {
        if (this.state === 'unresolved') {
            this.state = state;
        }
    }
}
exports.Deferred = Deferred;
/**
 * @returns resolves after a specified number of milliseconds
 * @throws cancelled if a given token is cancelled before a specified number of milliseconds
 */
function timeout(ms, token = cancellation_1.CancellationToken.None) {
    const deferred = new Deferred();
    const handle = setTimeout(() => deferred.resolve(), ms);
    token.onCancellationRequested(() => {
        clearTimeout(handle);
        deferred.reject((0, cancellation_1.cancelled)());
    });
    return deferred.promise;
}
exports.timeout = timeout;
/**
 * Creates a promise that is rejected after the given amount of time. A typical use case is to wait for another promise until a specified timeout using:
 * ```
 * Promise.race([ promiseToPerform, timeoutReject(timeout, 'Timeout error message') ]);
 * ```
 *
 * @param ms timeout in milliseconds
 * @param message error message on promise rejection
 * @returns rejection promise
 */
function timeoutReject(ms, message) {
    const deferred = new Deferred();
    setTimeout(() => deferred.reject(new Error(message)), ms);
    return deferred.promise;
}
exports.timeoutReject = timeoutReject;
async function retry(task, retryDelay, retries) {
    let lastError;
    for (let i = 0; i < retries; i++) {
        try {
            return await task();
        }
        catch (error) {
            lastError = error;
            await timeout(retryDelay);
        }
    }
    throw lastError;
}
exports.retry = retry;
/**
 * A function to allow a promise resolution to be delayed by a number of milliseconds. Usage is as follows:
 *
 * `const stringValue = await myPromise.then(delay(600)).then(value => value.toString());`
 *
 * @param ms the number of millisecond to delay
 * @returns a function that returns a promise that returns the given value, but delayed
 */
function delay(ms) {
    return value => new Promise((resolve, reject) => { setTimeout(() => resolve(value), ms); });
}
exports.delay = delay;
/**
 * Constructs a promise that will resolve after a given delay.
 * @param ms the number of milliseconds to wait
 */
async function wait(ms) {
    await delay(ms)(undefined);
}
exports.wait = wait;
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function waitForEvent(event, ms, thisArg, disposables) {
    return new Promise((resolve, reject) => {
        const registration = setTimeout(() => {
            listener.dispose();
            reject(new cancellation_1.CancellationError());
        }, ms);
        const listener = event((evt) => {
            clearTimeout(registration);
            listener.dispose();
            resolve(evt);
        }, thisArg, disposables);
    });
}
exports.waitForEvent = waitForEvent;
function isThenable(obj) {
    return (0, types_1.isObject)(obj) && (0, types_1.isFunction)(obj.then);
}
exports.isThenable = isThenable;
/**
 * Returns with a promise that waits until the first promise resolves to `true`.
 */
// Based on https://stackoverflow.com/a/51160727/5529090
function firstTrue(...promises) {
    const newPromises = promises.map(promise => new Promise((resolve, reject) => promise.then(result => result && resolve(true), reject)));
    newPromises.push(Promise.all(promises).then(() => false));
    return Promise.race(newPromises);
}
exports.firstTrue = firstTrue;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/quick-pick-service.js":
/*!***********************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/common/quick-pick-service.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.findMatches = exports.filterItems = exports.QuickInputService = exports.quickInputServicePath = exports.QuickInputHideReason = exports.QuickPickSeparator = exports.QuickPickItem = exports.QuickPickService = exports.quickPickServicePath = void 0;
const fuzzy = __webpack_require__(/*! fuzzy */ "../node_modules/fuzzy/lib/fuzzy.js");
exports.quickPickServicePath = '/services/quickPick';
exports.QuickPickService = Symbol('QuickPickService');
var QuickPickItem;
(function (QuickPickItem) {
    function is(item) {
        // if it's not a separator, it's an item
        return item.type !== 'separator';
    }
    QuickPickItem.is = is;
})(QuickPickItem = exports.QuickPickItem || (exports.QuickPickItem = {}));
var QuickPickSeparator;
(function (QuickPickSeparator) {
    function is(item) {
        return item.type === 'separator';
    }
    QuickPickSeparator.is = is;
})(QuickPickSeparator = exports.QuickPickSeparator || (exports.QuickPickSeparator = {}));
var QuickInputHideReason;
(function (QuickInputHideReason) {
    /**
     * Focus was moved away from the input, but the user may not have explicitly closed it.
     */
    QuickInputHideReason[QuickInputHideReason["Blur"] = 1] = "Blur";
    /**
     * An explicit close gesture, like striking the Escape key
     */
    QuickInputHideReason[QuickInputHideReason["Gesture"] = 2] = "Gesture";
    /**
     * Any other reason
     */
    QuickInputHideReason[QuickInputHideReason["Other"] = 3] = "Other";
})(QuickInputHideReason = exports.QuickInputHideReason || (exports.QuickInputHideReason = {}));
exports.quickInputServicePath = '/services/quickInput';
exports.QuickInputService = Symbol('QuickInputService');
/**
 * Filter the list of quick pick items based on the provided filter.
 * Items are filtered based on if:
 * - their `label` satisfies the filter using `fuzzy`.
 * - their `description` satisfies the filter using `fuzzy`.
 * - their `detail` satisfies the filter using `fuzzy`.
 * Filtered items are also updated to display proper highlights based on how they were filtered.
 * @param items the list of quick pick items.
 * @param filter the filter to search for.
 * @returns the list of quick pick items that satisfy the filter.
 */
function filterItems(items, filter) {
    filter = filter.trim().toLowerCase();
    if (filter.length === 0) {
        for (const item of items) {
            if (item.type !== 'separator') {
                item.highlights = undefined; // reset highlights from previous filtering.
            }
        }
        return items;
    }
    const filteredItems = [];
    for (const item of items) {
        if (item.type === 'separator') {
            filteredItems.push(item);
        }
        else if (fuzzy.test(filter, item.label) ||
            (item.description && fuzzy.test(filter, item.description)) ||
            (item.detail && fuzzy.test(filter, item.detail))) {
            item.highlights = {
                label: findMatches(item.label, filter),
                description: item.description ? findMatches(item.description, filter) : undefined,
                detail: item.detail ? findMatches(item.detail, filter) : undefined
            };
            filteredItems.push(item);
        }
    }
    return filteredItems;
}
exports.filterItems = filterItems;
/**
 * Find match highlights when testing a word against a pattern.
 * @param word the word to test.
 * @param pattern the word to match against.
 * @returns the list of highlights if present.
 */
function findMatches(word, pattern) {
    word = word.toLocaleLowerCase();
    pattern = pattern.toLocaleLowerCase();
    if (pattern.trim().length === 0) {
        return undefined;
    }
    const delimiter = '\u0000'; // null byte that shouldn't appear in the input and is used to denote matches.
    const matchResult = fuzzy.match(pattern.replace(/\u0000/gu, ''), word, { pre: delimiter, post: delimiter });
    if (!matchResult) {
        return undefined;
    }
    const match = matchResult.rendered;
    const highlights = [];
    let lastIndex = 0;
    /** We need to account for the extra markers by removing them from the range */
    let offset = 0;
    while (true) {
        const start = match.indexOf(delimiter, lastIndex);
        if (start === -1) {
            break;
        }
        const end = match.indexOf(delimiter, start + 1);
        if (end === -1) {
            break;
        }
        highlights.push({
            start: start - offset++,
            end: end - offset++
        });
        lastIndex = end + 1;
    }
    return highlights.length > 0 ? highlights : undefined;
}
exports.findMatches = findMatches;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/reference.js":
/*!**************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/common/reference.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SyncReferenceCollection = exports.ReferenceCollection = exports.AbstractReferenceCollection = void 0;
const disposable_1 = __webpack_require__(/*! ./disposable */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/disposable.js");
const event_1 = __webpack_require__(/*! ./event */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/event.js");
/**
 * Abstract class for a map of reference-counted disposable objects, with the
 * following features:
 *
 *    - values are not inserted explicitly; instead, acquire() is used to
 *      create the value for a given key, or return the previously created
 *      value for it. How the value is created for a given key is
 *      implementation specific.
 *
 *    - any subsquent acquire() with the same key will bump the reference
 *      count on that value. acquire() returns not the value directly but
 *      a reference object that holds the value. Calling dispose() on the
 *      reference decreases the value's effective reference count.
 *
 *    - a contained value will have its dispose() function called when its
 *      reference count reaches zero. The key/value pair will be purged
 *      from the collection.
 *
 *    - calling dispose() on the value directly, instead of calling it on
 *      the reference returned by acquire(), will automatically dispose
 *      all outstanding references to that value and the key/value pair
 *      will be purged from the collection.
 *
 *    - supports synchronous and asynchronous implementations. acquire() will
 *      return a Promise if the value cannot be created immediately
 *
 *    - functions has|keys|values|get are always synchronous and the result
 *      excludes asynchronous additions in flight.
 *
 *    - functions values|get return the value directly and not a reference
 *      to the value. Use these functions to obtain a value without bumping
 *      its reference count.
 *
 *    - clients can register to be notified when values are added and removed;
 *      notification for asynchronous additions happen when the creation
 *      completes, not when it's requested.
 *
 *    - keys can be any value/object that can be successfully stringified using
 *      JSON.stringify(), sans arguments
 *
 *    - calling dispose() on the collection will dispose all outstanding
 *      references to all contained values, which results in the disposal of
 *      the values themselves.
 */
class AbstractReferenceCollection {
    constructor() {
        this._keys = new Map();
        this._values = new Map();
        this.references = new Map();
        this.onDidCreateEmitter = new event_1.Emitter();
        this.onDidCreate = this.onDidCreateEmitter.event;
        this.onWillDisposeEmitter = new event_1.Emitter();
        this.onWillDispose = this.onWillDisposeEmitter.event;
        this.toDispose = new disposable_1.DisposableCollection();
        this.toDispose.push(this.onDidCreateEmitter);
        this.toDispose.push(this.onWillDisposeEmitter);
        this.toDispose.push(disposable_1.Disposable.create(() => this.clear()));
    }
    dispose() {
        this.toDispose.dispose();
    }
    clear() {
        for (const value of this._values.values()) {
            try {
                value.dispose();
            }
            catch (e) {
                console.error(e);
            }
        }
    }
    has(args) {
        const key = this.toKey(args);
        return this.references.has(key);
    }
    keys() {
        return [...this._keys.values()];
    }
    values() {
        return [...this._values.values()];
    }
    get(args) {
        const key = this.toKey(args);
        return this._values.get(key);
    }
    doAcquire(key, object) {
        const references = this.references.get(key) || this.createReferences(key, object);
        const reference = {
            object,
            dispose: () => { }
        };
        references.push(reference);
        return reference;
    }
    toKey(args) {
        return JSON.stringify(args);
    }
    createReferences(key, value) {
        const references = new disposable_1.DisposableCollection();
        references.onDispose(() => value.dispose());
        const disposeObject = value.dispose.bind(value);
        value.dispose = () => {
            this.onWillDisposeEmitter.fire(value);
            disposeObject();
            this._values.delete(key);
            this._keys.delete(key);
            this.references.delete(key);
            references.dispose();
        };
        this.references.set(key, references);
        return references;
    }
}
exports.AbstractReferenceCollection = AbstractReferenceCollection;
/**
 * Asynchronous implementation of AbstractReferenceCollection that requires
 * the client to provide a value factory, used to service the acquire()
 * function. That factory may return a Promise if the value cannot be
 * created immediately.
 */
class ReferenceCollection extends AbstractReferenceCollection {
    constructor(factory) {
        super();
        this.factory = factory;
        this.pendingValues = new Map();
    }
    async acquire(args) {
        const key = this.toKey(args);
        const existing = this._values.get(key);
        if (existing) {
            return this.doAcquire(key, existing);
        }
        const object = await this.getOrCreateValue(key, args);
        return this.doAcquire(key, object);
    }
    async getOrCreateValue(key, args) {
        const existing = this.pendingValues.get(key);
        if (existing) {
            return existing;
        }
        const pending = this.factory(args);
        this._keys.set(key, args);
        this.pendingValues.set(key, pending);
        try {
            const value = await pending;
            this._values.set(key, value);
            this.onDidCreateEmitter.fire(value);
            return value;
        }
        catch (e) {
            this._keys.delete(key);
            throw e;
        }
        finally {
            this.pendingValues.delete(key);
        }
    }
}
exports.ReferenceCollection = ReferenceCollection;
/**
 * Synchronous implementation of AbstractReferenceCollection that requires
 * the client to provide a value factory, used to service the acquire()
 * function.
 */
class SyncReferenceCollection extends AbstractReferenceCollection {
    constructor(factory) {
        super();
        this.factory = factory;
    }
    acquire(args) {
        const key = this.toKey(args);
        const object = this.getOrCreateValue(key, args);
        return this.doAcquire(key, object);
    }
    getOrCreateValue(key, args) {
        const existing = this._values.get(key);
        if (existing) {
            return existing;
        }
        const value = this.factory(args);
        this._keys.set(key, args);
        this._values.set(key, value);
        this.onDidCreateEmitter.fire(value);
        return value;
    }
}
exports.SyncReferenceCollection = SyncReferenceCollection;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/resource.js":
/*!*************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/common/resource.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2017 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createUntitledURI = exports.UntitledResource = exports.UntitledResourceResolver = exports.UNTITLED_SCHEME = exports.InMemoryTextResourceResolver = exports.InMemoryTextResource = exports.MEMORY_TEXT = exports.InMemoryResources = exports.ReferenceMutableResource = exports.MutableResource = exports.DefaultResourceProvider = exports.ResourceProvider = exports.ResourceResolver = exports.ResourceError = exports.Resource = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/es/inversify.js");
const uri_1 = __webpack_require__(/*! ../common/uri */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/uri.js");
const contribution_provider_1 = __webpack_require__(/*! ./contribution-provider */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/contribution-provider.js");
const event_1 = __webpack_require__(/*! ./event */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/event.js");
const application_error_1 = __webpack_require__(/*! ./application-error */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/application-error.js");
const stream_1 = __webpack_require__(/*! ./stream */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/stream.js");
const reference_1 = __webpack_require__(/*! ./reference */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/reference.js");
var Resource;
(function (Resource) {
    async function save(resource, context, token) {
        if (!resource.saveContents) {
            return;
        }
        if (await trySaveContentChanges(resource, context)) {
            return;
        }
        if (token && token.isCancellationRequested) {
            return;
        }
        if (typeof context.content !== 'string' && resource.saveStream) {
            await resource.saveStream(context.content, context.options);
        }
        else {
            const content = typeof context.content === 'string' ? context.content : stream_1.Readable.toString(context.content);
            await resource.saveContents(content, context.options);
        }
    }
    Resource.save = save;
    async function trySaveContentChanges(resource, context) {
        if (!context.changes || !resource.saveContentChanges || shouldSaveContent(resource, context)) {
            return false;
        }
        try {
            await resource.saveContentChanges(context.changes, context.options);
            return true;
        }
        catch (e) {
            if (!ResourceError.NotFound.is(e) && !ResourceError.OutOfSync.is(e)) {
                console.error(`Failed to apply incremental changes to '${resource.uri.toString()}':`, e);
            }
            return false;
        }
    }
    Resource.trySaveContentChanges = trySaveContentChanges;
    function shouldSaveContent(resource, { contentLength, changes }) {
        if (!changes || (resource.saveStream && contentLength > 32 * 1024 * 1024)) {
            return true;
        }
        let contentChangesLength = 0;
        for (const change of changes) {
            contentChangesLength += JSON.stringify(change).length;
            if (contentChangesLength > contentLength) {
                return true;
            }
        }
        return contentChangesLength > contentLength;
    }
    Resource.shouldSaveContent = shouldSaveContent;
})(Resource = exports.Resource || (exports.Resource = {}));
var ResourceError;
(function (ResourceError) {
    ResourceError.NotFound = application_error_1.ApplicationError.declare(-40000, (raw) => raw);
    ResourceError.OutOfSync = application_error_1.ApplicationError.declare(-40001, (raw) => raw);
})(ResourceError = exports.ResourceError || (exports.ResourceError = {}));
exports.ResourceResolver = Symbol('ResourceResolver');
exports.ResourceProvider = Symbol('ResourceProvider');
let DefaultResourceProvider = class DefaultResourceProvider {
    constructor(resolversProvider) {
        this.resolversProvider = resolversProvider;
    }
    /**
     * Reject if a resource cannot be provided.
     */
    async get(uri) {
        const resolvers = this.resolversProvider.getContributions();
        for (const resolver of resolvers) {
            try {
                return await resolver.resolve(uri);
            }
            catch (err) {
                // no-op
            }
        }
        return Promise.reject(new Error(`A resource provider for '${uri.toString()}' is not registered.`));
    }
};
DefaultResourceProvider = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)(),
    (0, tslib_1.__param)(0, (0, inversify_1.inject)(contribution_provider_1.ContributionProvider)),
    (0, tslib_1.__param)(0, (0, inversify_1.named)(exports.ResourceResolver)),
    (0, tslib_1.__metadata)("design:paramtypes", [Object])
], DefaultResourceProvider);
exports.DefaultResourceProvider = DefaultResourceProvider;
class MutableResource {
    constructor(uri) {
        this.uri = uri;
        this.contents = '';
        this.onDidChangeContentsEmitter = new event_1.Emitter();
        this.onDidChangeContents = this.onDidChangeContentsEmitter.event;
    }
    dispose() { }
    async readContents() {
        return this.contents;
    }
    async saveContents(contents) {
        this.contents = contents;
        this.fireDidChangeContents();
    }
    fireDidChangeContents() {
        this.onDidChangeContentsEmitter.fire(undefined);
    }
}
exports.MutableResource = MutableResource;
class ReferenceMutableResource {
    constructor(reference) {
        this.reference = reference;
    }
    get uri() {
        return this.reference.object.uri;
    }
    get onDidChangeContents() {
        return this.reference.object.onDidChangeContents;
    }
    dispose() {
        this.reference.dispose();
    }
    readContents() {
        return this.reference.object.readContents();
    }
    saveContents(contents) {
        return this.reference.object.saveContents(contents);
    }
}
exports.ReferenceMutableResource = ReferenceMutableResource;
let InMemoryResources = class InMemoryResources {
    constructor() {
        this.resources = new reference_1.SyncReferenceCollection(uri => new MutableResource(new uri_1.default(uri)));
    }
    add(uri, contents) {
        const resourceUri = uri.toString();
        if (this.resources.has(resourceUri)) {
            throw new Error(`Cannot add already existing in-memory resource '${resourceUri}'`);
        }
        const resource = this.acquire(resourceUri);
        resource.saveContents(contents);
        return resource;
    }
    update(uri, contents) {
        const resourceUri = uri.toString();
        const resource = this.resources.get(resourceUri);
        if (!resource) {
            throw new Error(`Cannot update non-existed in-memory resource '${resourceUri}'`);
        }
        resource.saveContents(contents);
        return resource;
    }
    resolve(uri) {
        const uriString = uri.toString();
        if (!this.resources.has(uriString)) {
            throw new Error(`In memory '${uriString}' resource does not exist.`);
        }
        return this.acquire(uriString);
    }
    acquire(uri) {
        const reference = this.resources.acquire(uri);
        return new ReferenceMutableResource(reference);
    }
};
InMemoryResources = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)()
], InMemoryResources);
exports.InMemoryResources = InMemoryResources;
exports.MEMORY_TEXT = 'mem-txt';
/**
 * Resource implementation for 'mem-txt' URI scheme where content is saved in URI query.
 */
class InMemoryTextResource {
    constructor(uri) {
        this.uri = uri;
    }
    async readContents(options) {
        return this.uri.query;
    }
    dispose() { }
}
exports.InMemoryTextResource = InMemoryTextResource;
/**
 * ResourceResolver implementation for 'mem-txt' URI scheme.
 */
let InMemoryTextResourceResolver = class InMemoryTextResourceResolver {
    resolve(uri) {
        if (uri.scheme !== exports.MEMORY_TEXT) {
            throw new Error(`Expected a URI with ${exports.MEMORY_TEXT} scheme. Was: ${uri}.`);
        }
        return new InMemoryTextResource(uri);
    }
};
InMemoryTextResourceResolver = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)()
], InMemoryTextResourceResolver);
exports.InMemoryTextResourceResolver = InMemoryTextResourceResolver;
exports.UNTITLED_SCHEME = 'untitled';
let untitledResourceSequenceIndex = 0;
let UntitledResourceResolver = class UntitledResourceResolver {
    constructor() {
        this.resources = new Map();
    }
    has(uri) {
        if (uri.scheme !== exports.UNTITLED_SCHEME) {
            throw new Error('The given uri is not untitled file uri: ' + uri);
        }
        else {
            return this.resources.has(uri.toString());
        }
    }
    async resolve(uri) {
        if (uri.scheme !== exports.UNTITLED_SCHEME) {
            throw new Error('The given uri is not untitled file uri: ' + uri);
        }
        else {
            const untitledResource = this.resources.get(uri.toString());
            if (!untitledResource) {
                return this.createUntitledResource('', '', uri);
            }
            else {
                return untitledResource;
            }
        }
    }
    async createUntitledResource(content, extension, uri) {
        if (!uri) {
            uri = this.createUntitledURI(extension);
        }
        return new UntitledResource(this.resources, uri, content);
    }
    createUntitledURI(extension, parent) {
        let counter = 1; // vscode starts at 1
        let untitledUri;
        do {
            const name = `Untitled-${counter}${extension !== null && extension !== void 0 ? extension : ''}`;
            if (parent) {
                untitledUri = parent.resolve(name).withScheme(exports.UNTITLED_SCHEME);
            }
            untitledUri = new uri_1.default().resolve(name).withScheme(exports.UNTITLED_SCHEME);
            counter++;
        } while (this.has(untitledUri));
        return untitledUri;
    }
};
UntitledResourceResolver = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)()
], UntitledResourceResolver);
exports.UntitledResourceResolver = UntitledResourceResolver;
class UntitledResource {
    constructor(resources, uri, content) {
        this.resources = resources;
        this.uri = uri;
        this.content = content;
        this.onDidChangeContentsEmitter = new event_1.Emitter();
        this.resources.set(this.uri.toString(), this);
    }
    get onDidChangeContents() {
        return this.onDidChangeContentsEmitter.event;
    }
    dispose() {
        this.resources.delete(this.uri.toString());
        this.onDidChangeContentsEmitter.dispose();
    }
    async readContents(options) {
        if (this.content) {
            return this.content;
        }
        else {
            return '';
        }
    }
    async saveContents(content, options) {
        // This function must exist to ensure readOnly is false for the Monaco editor.
        // However it should not be called because saving 'untitled' is always processed as 'Save As'.
        throw Error('Untitled resources cannot be saved.');
    }
    fireDidChangeContents() {
        this.onDidChangeContentsEmitter.fire(undefined);
    }
    get version() {
        return undefined;
    }
    get encoding() {
        return undefined;
    }
}
exports.UntitledResource = UntitledResource;
/**
 * @deprecated Since 1.27.0. Please use `UntitledResourceResolver.createUntitledURI` instead.
 */
function createUntitledURI(extension, parent) {
    const name = `Untitled-${untitledResourceSequenceIndex++}${extension !== null && extension !== void 0 ? extension : ''}`;
    if (parent) {
        return parent.resolve(name).withScheme(exports.UNTITLED_SCHEME);
    }
    return new uri_1.default().resolve(name).withScheme(exports.UNTITLED_SCHEME);
}
exports.createUntitledURI = createUntitledURI;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/selection-service.js":
/*!**********************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/common/selection-service.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2017 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
/* eslint-disable @typescript-eslint/no-explicit-any */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SelectionService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/es/inversify.js");
const event_1 = __webpack_require__(/*! ../common/event */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/event.js");
/**
 * Singleton service that is used to share the current selection globally in a Theia application.
 * On each change of selection, subscribers are notified and receive the updated selection object.
 */
let SelectionService = class SelectionService {
    constructor() {
        this.onSelectionChangedEmitter = new event_1.Emitter();
        this.onSelectionChanged = this.onSelectionChangedEmitter.event;
    }
    get selection() {
        return this.currentSelection;
    }
    set selection(selection) {
        this.currentSelection = selection;
        this.onSelectionChangedEmitter.fire(this.currentSelection);
    }
};
SelectionService = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)()
], SelectionService);
exports.SelectionService = SelectionService;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/selection.js":
/*!**************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/common/selection.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.UriSelection = void 0;
const types_1 = __webpack_require__(/*! ./types */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/types.js");
const uri_1 = __webpack_require__(/*! ./uri */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/uri.js");
var UriSelection;
(function (UriSelection) {
    function is(arg) {
        return (0, types_1.isObject)(arg) && arg.uri instanceof uri_1.default;
    }
    UriSelection.is = is;
    function getUri(selection) {
        if (is(selection)) {
            return selection.uri;
        }
        if (Array.isArray(selection) && is(selection[0])) {
            return selection[0].uri;
        }
        return undefined;
    }
    UriSelection.getUri = getUri;
    function getUris(selection) {
        if (is(selection)) {
            return [selection.uri];
        }
        if (Array.isArray(selection)) {
            return selection.filter(is).map(s => s.uri);
        }
        return [];
    }
    UriSelection.getUris = getUris;
})(UriSelection = exports.UriSelection || (exports.UriSelection = {}));


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/severity.js":
/*!*************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/common/severity.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2019 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Severity = void 0;
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
const vscode_languageserver_protocol_1 = __webpack_require__(/*! vscode-languageserver-protocol */ "../node_modules/vscode-languageserver-protocol/lib/browser/main.js");
const nls_1 = __webpack_require__(/*! ./nls */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/nls.js");
var Severity;
(function (Severity) {
    Severity[Severity["Ignore"] = 0] = "Ignore";
    Severity[Severity["Error"] = 1] = "Error";
    Severity[Severity["Warning"] = 2] = "Warning";
    Severity[Severity["Info"] = 3] = "Info";
    Severity[Severity["Log"] = 4] = "Log";
})(Severity = exports.Severity || (exports.Severity = {}));
const error = 'Errors';
const warning = 'Warnings';
const info = 'Info';
const log = 'Log';
const ignore = 'All';
(function (Severity) {
    function fromValue(value) {
        value = value && value.toLowerCase();
        if (!value) {
            return Severity.Ignore;
        }
        if (['error', 'errors'].indexOf(value) !== -1) {
            return Severity.Error;
        }
        if (['warn', 'warning', 'warnings'].indexOf(value) !== -1) {
            return Severity.Warning;
        }
        if (value === 'info') {
            return Severity.Info;
        }
        if (value === 'log') {
            return Severity.Log;
        }
        return Severity.Ignore;
    }
    Severity.fromValue = fromValue;
    function toDiagnosticSeverity(value) {
        switch (value) {
            case Severity.Ignore:
                return vscode_languageserver_protocol_1.DiagnosticSeverity.Hint;
            case Severity.Info:
                return vscode_languageserver_protocol_1.DiagnosticSeverity.Information;
            case Severity.Log:
                return vscode_languageserver_protocol_1.DiagnosticSeverity.Information;
            case Severity.Warning:
                return vscode_languageserver_protocol_1.DiagnosticSeverity.Warning;
            case Severity.Error:
                return vscode_languageserver_protocol_1.DiagnosticSeverity.Error;
            default:
                return vscode_languageserver_protocol_1.DiagnosticSeverity.Error;
        }
    }
    Severity.toDiagnosticSeverity = toDiagnosticSeverity;
    function toString(severity) {
        switch (severity) {
            case Severity.Error:
                return error;
            case Severity.Warning:
                return warning;
            case Severity.Info:
                return info;
            case Severity.Log:
                return log;
            default:
                return ignore;
        }
    }
    Severity.toString = toString;
    function toLocaleString(severity) {
        if (severity === Severity.Error || severity === error) {
            return nls_1.nls.localize('theia/core/severity/errors', 'Errors');
        }
        else if (severity === Severity.Warning || severity === warning) {
            return nls_1.nls.localize('theia/core/severity/warnings', 'Warnings');
        }
        else if (severity === Severity.Info || severity === info) {
            return nls_1.nls.localizeByDefault('Info');
        }
        else if (severity === Severity.Log || severity === log) {
            return nls_1.nls.localize('theia/core/severity/log', 'Log');
        }
        else {
            return nls_1.nls.localizeByDefault('All');
        }
    }
    Severity.toLocaleString = toLocaleString;
    function toArray() {
        return [ignore, error, warning, info, log];
    }
    Severity.toArray = toArray;
})(Severity = exports.Severity || (exports.Severity = {}));


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/stream.js":
/*!***********************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/common/stream.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2020 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.transform = exports.toReadable = exports.toStream = exports.consumeStreamWithLimit = exports.peekStream = exports.consumeStream = exports.peekReadable = exports.consumeReadableWithLimit = exports.consumeReadable = exports.newWriteableStream = exports.isReadableBufferedStream = exports.isReadableStream = exports.Readable = void 0;
// based on https://github.com/microsoft/vscode/blob/04c36be045a94fee58e5f8992d3e3fd980294a84/src/vs/base/common/stream.ts
/* eslint-disable max-len */
/* eslint-disable no-null/no-null */
/* eslint-disable @typescript-eslint/tslint/config */
/* eslint-disable @typescript-eslint/no-explicit-any */
const disposable_1 = __webpack_require__(/*! ./disposable */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/disposable.js");
var Readable;
(function (Readable) {
    function fromString(value) {
        let done = false;
        return {
            read() {
                if (!done) {
                    done = true;
                    return value;
                }
                return null;
            }
        };
    }
    Readable.fromString = fromString;
    function toString(readable) {
        let result = '';
        let chunk;
        while ((chunk = readable.read()) != null) {
            result += chunk;
        }
        return result;
    }
    Readable.toString = toString;
})(Readable = exports.Readable || (exports.Readable = {}));
function isReadableStream(obj) {
    const candidate = obj;
    return candidate && [candidate.on, candidate.pause, candidate.resume, candidate.destroy].every(fn => typeof fn === 'function');
}
exports.isReadableStream = isReadableStream;
function isReadableBufferedStream(obj) {
    const candidate = obj;
    return candidate && isReadableStream(candidate.stream) && Array.isArray(candidate.buffer) && typeof candidate.ended === 'boolean';
}
exports.isReadableBufferedStream = isReadableBufferedStream;
function newWriteableStream(reducer, options) {
    return new WriteableStreamImpl(reducer);
}
exports.newWriteableStream = newWriteableStream;
class WriteableStreamImpl {
    constructor(reducer, options) {
        this.reducer = reducer;
        this.options = options;
        this.state = {
            flowing: false,
            ended: false,
            destroyed: false
        };
        this.buffer = {
            data: [],
            error: []
        };
        this.listeners = {
            data: [],
            error: [],
            end: []
        };
        this.pendingWritePromises = [];
    }
    pause() {
        if (this.state.destroyed) {
            return;
        }
        this.state.flowing = false;
    }
    resume() {
        if (this.state.destroyed) {
            return;
        }
        if (!this.state.flowing) {
            this.state.flowing = true;
            // emit buffered events
            this.flowData();
            this.flowErrors();
            this.flowEnd();
        }
    }
    write(data) {
        var _a;
        if (this.state.destroyed) {
            return;
        }
        // flowing: directly send the data to listeners
        if (this.state.flowing) {
            this.listeners.data.forEach(listener => listener(data));
        }
        // not yet flowing: buffer data until flowing
        else {
            this.buffer.data.push(data);
            // highWaterMark: if configured, signal back when buffer reached limits
            if (typeof ((_a = this.options) === null || _a === void 0 ? void 0 : _a.highWaterMark) === 'number' && this.buffer.data.length > this.options.highWaterMark) {
                return new Promise(resolve => this.pendingWritePromises.push(resolve));
            }
        }
    }
    error(error) {
        if (this.state.destroyed) {
            return;
        }
        // flowing: directly send the error to listeners
        if (this.state.flowing) {
            this.listeners.error.forEach(listener => listener(error));
        }
        // not yet flowing: buffer errors until flowing
        else {
            this.buffer.error.push(error);
        }
    }
    end(result) {
        if (this.state.destroyed) {
            return;
        }
        // end with data or error if provided
        if (result instanceof Error) {
            this.error(result);
        }
        else if (result) {
            this.write(result);
        }
        // flowing: send end event to listeners
        if (this.state.flowing) {
            this.listeners.end.forEach(listener => listener());
            this.destroy();
        }
        // not yet flowing: remember state
        else {
            this.state.ended = true;
        }
    }
    on(event, callback) {
        if (this.state.destroyed) {
            return;
        }
        switch (event) {
            case 'data':
                this.listeners.data.push(callback);
                // switch into flowing mode as soon as the first 'data'
                // listener is added and we are not yet in flowing mode
                this.resume();
                break;
            case 'end':
                this.listeners.end.push(callback);
                // emit 'end' event directly if we are flowing
                // and the end has already been reached
                //
                // finish() when it went through
                if (this.state.flowing && this.flowEnd()) {
                    this.destroy();
                }
                break;
            case 'error':
                this.listeners.error.push(callback);
                // emit buffered 'error' events unless done already
                // now that we know that we have at least one listener
                if (this.state.flowing) {
                    this.flowErrors();
                }
                break;
        }
    }
    removeListener(event, callback) {
        if (this.state.destroyed) {
            return;
        }
        let listeners = undefined;
        switch (event) {
            case 'data':
                listeners = this.listeners.data;
                break;
            case 'end':
                listeners = this.listeners.end;
                break;
            case 'error':
                listeners = this.listeners.error;
                break;
        }
        if (listeners) {
            const index = listeners.indexOf(callback);
            if (index >= 0) {
                listeners.splice(index, 1);
            }
        }
    }
    flowData() {
        if (this.buffer.data.length > 0) {
            const fullDataBuffer = this.reducer(this.buffer.data);
            this.listeners.data.forEach(listener => listener(fullDataBuffer));
            this.buffer.data.length = 0;
            // When the buffer is empty, resolve all pending writers
            const pendingWritePromises = [...this.pendingWritePromises];
            this.pendingWritePromises.length = 0;
            pendingWritePromises.forEach(pendingWritePromise => pendingWritePromise());
        }
    }
    flowErrors() {
        if (this.listeners.error.length > 0) {
            for (const error of this.buffer.error) {
                this.listeners.error.forEach(listener => listener(error));
            }
            this.buffer.error.length = 0;
        }
    }
    flowEnd() {
        if (this.state.ended) {
            this.listeners.end.forEach(listener => listener());
            return this.listeners.end.length > 0;
        }
        return false;
    }
    destroy() {
        if (!this.state.destroyed) {
            this.state.destroyed = true;
            this.state.ended = true;
            this.buffer.data.length = 0;
            this.buffer.error.length = 0;
            this.listeners.data.length = 0;
            this.listeners.error.length = 0;
            this.listeners.end.length = 0;
            this.pendingWritePromises.length = 0;
        }
    }
}
/**
 * Helper to fully read a T readable into a T.
 */
function consumeReadable(readable, reducer) {
    const chunks = [];
    let chunk;
    while ((chunk = readable.read()) !== null) {
        chunks.push(chunk);
    }
    return reducer(chunks);
}
exports.consumeReadable = consumeReadable;
/**
 * Helper to read a T readable up to a maximum of chunks. If the limit is
 * reached, will return a readable instead to ensure all data can still
 * be read.
 */
function consumeReadableWithLimit(readable, reducer, maxChunks) {
    const chunks = [];
    let chunk = undefined;
    while ((chunk = readable.read()) !== null && chunks.length < maxChunks) {
        chunks.push(chunk);
    }
    // If the last chunk is null, it means we reached the end of
    // the readable and return all the data at once
    if (chunk === null && chunks.length > 0) {
        return reducer(chunks);
    }
    // Otherwise, we still have a chunk, it means we reached the maxChunks
    // value and as such we return a new Readable that first returns
    // the existing read chunks and then continues with reading from
    // the underlying readable.
    return {
        read: () => {
            // First consume chunks from our array
            if (chunks.length > 0) {
                return chunks.shift();
            }
            // Then ensure to return our last read chunk
            if (typeof chunk !== 'undefined') {
                const lastReadChunk = chunk;
                // explicitly use undefined here to indicate that we consumed
                // the chunk, which could have either been null or valued.
                chunk = undefined;
                return lastReadChunk;
            }
            // Finally delegate back to the Readable
            return readable.read();
        }
    };
}
exports.consumeReadableWithLimit = consumeReadableWithLimit;
/**
 * Helper to read a T readable up to a maximum of chunks. If the limit is
 * reached, will return a readable instead to ensure all data can still
 * be read.
 */
function peekReadable(readable, reducer, maxChunks) {
    const chunks = [];
    let chunk = undefined;
    while ((chunk = readable.read()) !== null && chunks.length < maxChunks) {
        chunks.push(chunk);
    }
    // If the last chunk is null, it means we reached the end of
    // the readable and return all the data at once
    if (chunk === null && chunks.length > 0) {
        return reducer(chunks);
    }
    // Otherwise, we still have a chunk, it means we reached the maxChunks
    // value and as such we return a new Readable that first returns
    // the existing read chunks and then continues with reading from
    // the underlying readable.
    return {
        read: () => {
            // First consume chunks from our array
            if (chunks.length > 0) {
                return chunks.shift();
            }
            // Then ensure to return our last read chunk
            if (typeof chunk !== 'undefined') {
                const lastReadChunk = chunk;
                // explicitly use undefined here to indicate that we consumed
                // the chunk, which could have either been null or valued.
                chunk = undefined;
                return lastReadChunk;
            }
            // Finally delegate back to the Readable
            return readable.read();
        }
    };
}
exports.peekReadable = peekReadable;
/**
 * Helper to fully read a T stream into a T.
 */
function consumeStream(stream, reducer) {
    return new Promise((resolve, reject) => {
        const chunks = [];
        stream.on('data', data => chunks.push(data));
        stream.on('error', error => reject(error));
        stream.on('end', () => resolve(reducer(chunks)));
    });
}
exports.consumeStream = consumeStream;
/**
 * Helper to peek up to `maxChunks` into a stream. The return type signals if
 * the stream has ended or not. If not, caller needs to add a `data` listener
 * to continue reading.
 */
function peekStream(stream, maxChunks) {
    return new Promise((resolve, reject) => {
        const streamListeners = new disposable_1.DisposableCollection();
        // Data Listener
        const buffer = [];
        const dataListener = (chunk) => {
            // Add to buffer
            buffer.push(chunk);
            // We reached maxChunks and thus need to return
            if (buffer.length > maxChunks) {
                // Dispose any listeners and ensure to pause the
                // stream so that it can be consumed again by caller
                streamListeners.dispose();
                stream.pause();
                return resolve({ stream, buffer, ended: false });
            }
        };
        streamListeners.push(disposable_1.Disposable.create(() => stream.removeListener('data', dataListener)));
        stream.on('data', dataListener);
        // Error Listener
        const errorListener = (error) => reject(error);
        streamListeners.push(disposable_1.Disposable.create(() => stream.removeListener('error', errorListener)));
        stream.on('error', errorListener);
        const endListener = () => resolve({ stream, buffer, ended: true });
        streamListeners.push(disposable_1.Disposable.create(() => stream.removeListener('end', endListener)));
        stream.on('end', endListener);
    });
}
exports.peekStream = peekStream;
/**
 * Helper to read a T stream up to a maximum of chunks. If the limit is
 * reached, will return a stream instead to ensure all data can still
 * be read.
 */
function consumeStreamWithLimit(stream, reducer, maxChunks) {
    return new Promise((resolve, reject) => {
        const chunks = [];
        let wrapperStream = undefined;
        stream.on('data', data => {
            // If we reach maxChunks, we start to return a stream
            // and make sure that any data we have already read
            // is in it as well
            if (!wrapperStream && chunks.length === maxChunks) {
                wrapperStream = newWriteableStream(reducer);
                while (chunks.length) {
                    wrapperStream.write(chunks.shift());
                }
                wrapperStream.write(data);
                return resolve(wrapperStream);
            }
            if (wrapperStream) {
                wrapperStream.write(data);
            }
            else {
                chunks.push(data);
            }
        });
        stream.on('error', error => {
            if (wrapperStream) {
                wrapperStream.error(error);
            }
            else {
                return reject(error);
            }
        });
        stream.on('end', () => {
            if (wrapperStream) {
                while (chunks.length) {
                    wrapperStream.write(chunks.shift());
                }
                wrapperStream.end();
            }
            else {
                return resolve(reducer(chunks));
            }
        });
    });
}
exports.consumeStreamWithLimit = consumeStreamWithLimit;
/**
 * Helper to create a readable stream from an existing T.
 */
function toStream(t, reducer) {
    const stream = newWriteableStream(reducer);
    stream.end(t);
    return stream;
}
exports.toStream = toStream;
/**
 * Helper to convert a T into a Readable<T>.
 */
function toReadable(t) {
    let consumed = false;
    return {
        read: () => {
            if (consumed) {
                return null;
            }
            consumed = true;
            return t;
        }
    };
}
exports.toReadable = toReadable;
/**
 * Helper to transform a readable stream into another stream.
 */
function transform(stream, transformer, reducer) {
    const target = newWriteableStream(reducer);
    stream.on('data', data => target.write(transformer.data(data)));
    stream.on('end', () => target.end());
    stream.on('error', error => target.error(transformer.error ? transformer.error(error) : error));
    return target;
}
exports.transform = transform;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/strings.js":
/*!************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/common/strings.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.regExpFlags = exports.compareSubstringIgnoreCase = exports.compareIgnoreCase = exports.compareSubstring = exports.compare = exports.unescapeInvisibleChars = exports.escapeInvisibleChars = exports.split = exports.startsWithIgnoreCase = exports.escapeRegExpCharacters = exports.commonPrefixLength = exports.equalsIgnoreCase = exports.isUpperAsciiLetter = exports.isLowerAsciiLetter = exports.endsWith = void 0;
/**
 * Determines if haystack ends with needle.
 */
function endsWith(haystack, needle) {
    const diff = haystack.length - needle.length;
    if (diff > 0) {
        return haystack.indexOf(needle, diff) === diff;
    }
    else if (diff === 0) {
        return haystack === needle;
    }
    else {
        return false;
    }
}
exports.endsWith = endsWith;
function isLowerAsciiLetter(code) {
    return code >= 97 /* a */ && code <= 122 /* z */;
}
exports.isLowerAsciiLetter = isLowerAsciiLetter;
function isUpperAsciiLetter(code) {
    return code >= 65 /* A */ && code <= 90 /* Z */;
}
exports.isUpperAsciiLetter = isUpperAsciiLetter;
function isAsciiLetter(code) {
    return isLowerAsciiLetter(code) || isUpperAsciiLetter(code);
}
function equalsIgnoreCase(a, b) {
    const len1 = a ? a.length : 0;
    const len2 = b ? b.length : 0;
    if (len1 !== len2) {
        return false;
    }
    return doEqualsIgnoreCase(a, b);
}
exports.equalsIgnoreCase = equalsIgnoreCase;
function doEqualsIgnoreCase(a, b, stopAt = a.length) {
    if (typeof a !== 'string' || typeof b !== 'string') {
        return false;
    }
    for (let i = 0; i < stopAt; i++) {
        const codeA = a.charCodeAt(i);
        const codeB = b.charCodeAt(i);
        if (codeA === codeB) {
            continue;
        }
        // a-z A-Z
        if (isAsciiLetter(codeA) && isAsciiLetter(codeB)) {
            const diff = Math.abs(codeA - codeB);
            if (diff !== 0 && diff !== 32) {
                return false;
            }
        }
        // Any other charcode
        // tslint:disable-next-line:one-line
        else {
            if (String.fromCharCode(codeA).toLowerCase() !== String.fromCharCode(codeB).toLowerCase()) {
                return false;
            }
        }
    }
    return true;
}
/**
 * @returns the length of the common prefix of the two strings.
 */
function commonPrefixLength(a, b) {
    let i;
    const len = Math.min(a.length, b.length);
    for (i = 0; i < len; i++) {
        if (a.charCodeAt(i) !== b.charCodeAt(i)) {
            return i;
        }
    }
    return len;
}
exports.commonPrefixLength = commonPrefixLength;
/**
 * Escapes regular expression characters in a given string
 */
function escapeRegExpCharacters(value) {
    return value.replace(/[\-\\\{\}\*\+\?\|\^\$\.\[\]\(\)\#]/g, '\\$&');
}
exports.escapeRegExpCharacters = escapeRegExpCharacters;
function startsWithIgnoreCase(str, candidate) {
    const candidateLength = candidate.length;
    if (candidate.length > str.length) {
        return false;
    }
    return doEqualsIgnoreCase(str, candidate, candidateLength);
}
exports.startsWithIgnoreCase = startsWithIgnoreCase;
function* split(s, splitter) {
    let start = 0;
    while (start < s.length) {
        let end = s.indexOf(splitter, start);
        if (end === -1) {
            end = s.length;
        }
        yield s.substring(start, end);
        start = end + splitter.length;
    }
}
exports.split = split;
function escapeInvisibleChars(value) {
    return value.replace(/\n/g, '\\n').replace(/\r/g, '\\r');
}
exports.escapeInvisibleChars = escapeInvisibleChars;
function unescapeInvisibleChars(value) {
    return value.replace(/\\n/g, '\n').replace(/\\r/g, '\r');
}
exports.unescapeInvisibleChars = unescapeInvisibleChars;
function compare(a, b) {
    if (a < b) {
        return -1;
    }
    else if (a > b) {
        return 1;
    }
    else {
        return 0;
    }
}
exports.compare = compare;
function compareSubstring(a, b, aStart = 0, aEnd = a.length, bStart = 0, bEnd = b.length) {
    for (; aStart < aEnd && bStart < bEnd; aStart++, bStart++) {
        const codeA = a.charCodeAt(aStart);
        const codeB = b.charCodeAt(bStart);
        if (codeA < codeB) {
            return -1;
        }
        else if (codeA > codeB) {
            return 1;
        }
    }
    const aLen = aEnd - aStart;
    const bLen = bEnd - bStart;
    if (aLen < bLen) {
        return -1;
    }
    else if (aLen > bLen) {
        return 1;
    }
    return 0;
}
exports.compareSubstring = compareSubstring;
function compareIgnoreCase(a, b) {
    return compareSubstringIgnoreCase(a, b, 0, a.length, 0, b.length);
}
exports.compareIgnoreCase = compareIgnoreCase;
function compareSubstringIgnoreCase(a, b, aStart = 0, aEnd = a.length, bStart = 0, bEnd = b.length) {
    for (; aStart < aEnd && bStart < bEnd; aStart++, bStart++) {
        const codeA = a.charCodeAt(aStart);
        const codeB = b.charCodeAt(bStart);
        if (codeA === codeB) {
            // equal
            continue;
        }
        const diff = codeA - codeB;
        if (diff === 32 && isUpperAsciiLetter(codeB)) { // codeB =[65-90] && codeA =[97-122]
            continue;
        }
        else if (diff === -32 && isUpperAsciiLetter(codeA)) { // codeB =[97-122] && codeA =[65-90]
            continue;
        }
        if (isLowerAsciiLetter(codeA) && isLowerAsciiLetter(codeB)) {
            //
            return diff;
        }
        else {
            return compareSubstring(a.toLowerCase(), b.toLowerCase(), aStart, aEnd, bStart, bEnd);
        }
    }
    const aLen = aEnd - aStart;
    const bLen = bEnd - bStart;
    if (aLen < bLen) {
        return -1;
    }
    else if (aLen > bLen) {
        return 1;
    }
    return 0;
}
exports.compareSubstringIgnoreCase = compareSubstringIgnoreCase;
// Copied from https://github.com/microsoft/vscode/blob/1.72.2/src/vs/base/common/strings.ts
function regExpFlags(regexp) {
    return (regexp.global ? 'g' : '')
        + (regexp.ignoreCase ? 'i' : '')
        + (regexp.multiline ? 'm' : '')
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        + (regexp /* standalone editor compilation */.unicode ? 'u' : '');
}
exports.regExpFlags = regExpFlags;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/telemetry.js":
/*!**************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/common/telemetry.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2023 STMicroelectronics and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TelemetryTrustedValue = void 0;
class TelemetryTrustedValue {
    constructor(value) {
        this.value = value;
    }
}
exports.TelemetryTrustedValue = TelemetryTrustedValue;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/ternary-search-tree.js":
/*!************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/common/ternary-search-tree.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2020 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TernarySearchTree = exports.UriIterator = exports.PathIterator = void 0;
const strings_1 = __webpack_require__(/*! ./strings */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/strings.js");
class PathIterator {
    constructor(_splitOnBackslash = true, _caseSensitive = true) {
        this._splitOnBackslash = _splitOnBackslash;
        this._caseSensitive = _caseSensitive;
    }
    reset(key) {
        this._value = key.replace(/\\$|\/$/, '');
        this._from = 0;
        this._to = 0;
        return this.next();
    }
    hasNext() {
        return this._to < this._value.length;
    }
    next() {
        // this._data = key.split(/[\\/]/).filter(s => !!s);
        this._from = this._to;
        let justSeps = true;
        for (; this._to < this._value.length; this._to++) {
            const ch = this._value.charCodeAt(this._to);
            if (ch === 47 /* Slash */ || this._splitOnBackslash && ch === 92 /* Backslash */) {
                if (justSeps) {
                    this._from++;
                }
                else {
                    break;
                }
            }
            else {
                justSeps = false;
            }
        }
        return this;
    }
    cmp(a) {
        return this._caseSensitive
            ? (0, strings_1.compareSubstring)(a, this._value, 0, a.length, this._from, this._to)
            : (0, strings_1.compareSubstringIgnoreCase)(a, this._value, 0, a.length, this._from, this._to);
    }
    value() {
        return this._value.substring(this._from, this._to);
    }
}
exports.PathIterator = PathIterator;
class UriIterator {
    constructor(caseSensitive) {
        this.caseSensitive = caseSensitive;
        this._states = [];
        this._stateIdx = 0;
    }
    reset(key) {
        this._value = key;
        this._states = [];
        if (this._value.scheme) {
            this._states.push(1 /* Scheme */);
        }
        if (this._value.authority) {
            this._states.push(2 /* Authority */);
        }
        if (this._value.path) {
            this._pathIterator = new PathIterator(false, this.caseSensitive);
            this._pathIterator.reset(key.path.toString());
            if (this._pathIterator.value()) {
                this._states.push(3 /* Path */);
            }
        }
        if (this._value.query) {
            this._states.push(4 /* Query */);
        }
        if (this._value.fragment) {
            this._states.push(5 /* Fragment */);
        }
        this._stateIdx = 0;
        return this;
    }
    next() {
        if (this._states[this._stateIdx] === 3 /* Path */ && this._pathIterator.hasNext()) {
            this._pathIterator.next();
        }
        else {
            this._stateIdx += 1;
        }
        return this;
    }
    hasNext() {
        return (this._states[this._stateIdx] === 3 /* Path */ && this._pathIterator.hasNext())
            || this._stateIdx < this._states.length - 1;
    }
    cmp(a) {
        if (this._states[this._stateIdx] === 1 /* Scheme */) {
            return (0, strings_1.compareSubstringIgnoreCase)(a, this._value.scheme);
        }
        else if (this._states[this._stateIdx] === 2 /* Authority */) {
            return (0, strings_1.compareSubstringIgnoreCase)(a, this._value.authority);
        }
        else if (this._states[this._stateIdx] === 3 /* Path */) {
            return this._pathIterator.cmp(a);
        }
        else if (this._states[this._stateIdx] === 4 /* Query */) {
            return (0, strings_1.compare)(a, this._value.query);
        }
        else if (this._states[this._stateIdx] === 5 /* Fragment */) {
            return (0, strings_1.compare)(a, this._value.fragment);
        }
        throw new Error();
    }
    value() {
        if (this._states[this._stateIdx] === 1 /* Scheme */) {
            return this._value.scheme;
        }
        else if (this._states[this._stateIdx] === 2 /* Authority */) {
            return this._value.authority;
        }
        else if (this._states[this._stateIdx] === 3 /* Path */) {
            return this._pathIterator.value();
        }
        else if (this._states[this._stateIdx] === 4 /* Query */) {
            return this._value.query;
        }
        else if (this._states[this._stateIdx] === 5 /* Fragment */) {
            return this._value.fragment;
        }
        throw new Error();
    }
}
exports.UriIterator = UriIterator;
class TernarySearchTreeNode {
    isEmpty() {
        return !this.left && !this.mid && !this.right && !this.value;
    }
}
class TernarySearchTree {
    constructor(segments) {
        this._iter = segments;
    }
    static forUris(caseSensitive) {
        return new TernarySearchTree(new UriIterator(caseSensitive));
    }
    static forPaths() {
        return new TernarySearchTree(new PathIterator());
    }
    clear() {
        this._root = undefined;
    }
    set(key, element) {
        const iter = this._iter.reset(key);
        let node;
        if (!this._root) {
            this._root = new TernarySearchTreeNode();
            this._root.segment = iter.value();
        }
        node = this._root;
        while (true) {
            const val = iter.cmp(node.segment);
            if (val > 0) {
                // left
                if (!node.left) {
                    node.left = new TernarySearchTreeNode();
                    node.left.segment = iter.value();
                }
                node = node.left;
            }
            else if (val < 0) {
                // right
                if (!node.right) {
                    node.right = new TernarySearchTreeNode();
                    node.right.segment = iter.value();
                }
                node = node.right;
            }
            else if (iter.hasNext()) {
                // mid
                iter.next();
                if (!node.mid) {
                    node.mid = new TernarySearchTreeNode();
                    node.mid.segment = iter.value();
                }
                node = node.mid;
            }
            else {
                break;
            }
        }
        const oldElement = node.value;
        node.value = element;
        node.key = key;
        return oldElement;
    }
    get(key) {
        const iter = this._iter.reset(key);
        let node = this._root;
        while (node) {
            const val = iter.cmp(node.segment);
            if (val > 0) {
                // left
                node = node.left;
            }
            else if (val < 0) {
                // right
                node = node.right;
            }
            else if (iter.hasNext()) {
                // mid
                iter.next();
                node = node.mid;
            }
            else {
                break;
            }
        }
        return node ? node.value : undefined;
    }
    delete(key) {
        const iter = this._iter.reset(key);
        const stack = [];
        let node = this._root;
        // find and unset node
        while (node) {
            const val = iter.cmp(node.segment);
            if (val > 0) {
                // left
                stack.push([1, node]);
                node = node.left;
            }
            else if (val < 0) {
                // right
                stack.push([-1, node]);
                node = node.right;
            }
            else if (iter.hasNext()) {
                // mid
                iter.next();
                stack.push([0, node]);
                node = node.mid;
            }
            else {
                // remove element
                node.value = undefined;
                // clean up empty nodes
                while (stack.length > 0 && node.isEmpty()) {
                    const [dir, parent] = stack.pop();
                    switch (dir) {
                        case 1:
                            parent.left = undefined;
                            break;
                        case 0:
                            parent.mid = undefined;
                            break;
                        case -1:
                            parent.right = undefined;
                            break;
                    }
                    node = parent;
                }
                break;
            }
        }
    }
    findSubstr(key) {
        const iter = this._iter.reset(key);
        let node = this._root;
        let candidate = undefined;
        while (node) {
            const val = iter.cmp(node.segment);
            if (val > 0) {
                // left
                node = node.left;
            }
            else if (val < 0) {
                // right
                node = node.right;
            }
            else if (iter.hasNext()) {
                // mid
                iter.next();
                candidate = node.value || candidate;
                node = node.mid;
            }
            else {
                break;
            }
        }
        return node && node.value || candidate;
    }
    findSuperstr(key) {
        const iter = this._iter.reset(key);
        let node = this._root;
        while (node) {
            const val = iter.cmp(node.segment);
            if (val > 0) {
                // left
                node = node.left;
            }
            else if (val < 0) {
                // right
                node = node.right;
            }
            else if (iter.hasNext()) {
                // mid
                iter.next();
                node = node.mid;
            }
            else {
                // collect
                if (!node.mid) {
                    return undefined;
                }
                else {
                    return this._nodeIterator(node.mid);
                }
            }
        }
        return undefined;
    }
    _nodeIterator(node) {
        let res;
        let idx;
        let data;
        const next = () => {
            if (!data) {
                // lazy till first invocation
                data = [];
                idx = 0;
                this._forEach(node, value => data.push(value));
            }
            if (idx >= data.length) {
                return { done: true, value: undefined };
            }
            if (!res) {
                res = { done: false, value: data[idx++] };
            }
            else {
                res.value = data[idx++];
            }
            return res;
        };
        return { next };
    }
    forEach(callback) {
        this._forEach(this._root, callback);
    }
    _forEach(node, callback) {
        if (node) {
            // left
            this._forEach(node.left, callback);
            // node
            if (node.value) {
                // callback(node.value, this._iter.join(parts));
                callback(node.value, node.key);
            }
            // mid
            this._forEach(node.mid, callback);
            // right
            this._forEach(node.right, callback);
        }
    }
}
exports.TernarySearchTree = TernarySearchTree;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/types.js":
/*!**********************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/common/types.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2017 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.isUndefinedOrNull = exports.isDefined = exports.unreachable = exports.nullToUndefined = exports.isStringArray = exports.isArray = exports.isUndefined = exports.isObject = exports.isEmptyObject = exports.isFunction = exports.isErrorLike = exports.isError = exports.isNumber = exports.isString = exports.isBoolean = exports.Prioritizeable = exports.ArrayUtils = void 0;
var array_utils_1 = __webpack_require__(/*! ./array-utils */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/array-utils.js");
Object.defineProperty(exports, "ArrayUtils", ({ enumerable: true, get: function () { return array_utils_1.ArrayUtils; } }));
var prioritizeable_1 = __webpack_require__(/*! ./prioritizeable */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/prioritizeable.js");
Object.defineProperty(exports, "Prioritizeable", ({ enumerable: true, get: function () { return prioritizeable_1.Prioritizeable; } }));
function isBoolean(value) {
    return value === true || value === false;
}
exports.isBoolean = isBoolean;
function isString(value) {
    return typeof value === 'string' || value instanceof String;
}
exports.isString = isString;
function isNumber(value) {
    return typeof value === 'number' || value instanceof Number;
}
exports.isNumber = isNumber;
function isError(value) {
    return value instanceof Error;
}
exports.isError = isError;
function isErrorLike(value) {
    return isObject(value) && isString(value.name) && isString(value.message) && (isUndefined(value.stack) || isString(value.stack));
}
exports.isErrorLike = isErrorLike;
// eslint-disable-next-line space-before-function-paren
function isFunction(value) {
    return typeof value === 'function';
}
exports.isFunction = isFunction;
/**
 * @returns whether the provided parameter is an empty JavaScript Object or not.
 */
function isEmptyObject(obj) {
    if (!isObject(obj)) {
        return false;
    }
    for (const key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
            return false;
        }
    }
    return true;
}
exports.isEmptyObject = isEmptyObject;
function isObject(value) {
    // eslint-disable-next-line no-null/no-null
    return typeof value === 'object' && value !== null;
}
exports.isObject = isObject;
function isUndefined(value) {
    return typeof value === 'undefined';
}
exports.isUndefined = isUndefined;
/**
 * @param value value to check.
 * @param every optional predicate ran on every element of the array.
 * @param thisArg value to substitute `this` with when invoking in the predicate.
 * @returns whether or not `value` is an array.
 */
function isArray(value, every, thisArg) {
    return Array.isArray(value) && (!isFunction(every) || value.every(every, thisArg));
}
exports.isArray = isArray;
function isStringArray(value) {
    return isArray(value, isString);
}
exports.isStringArray = isStringArray;
/**
 * Creates a shallow copy with all ownkeys of the original object that are `null` made `undefined`
 */
function nullToUndefined(nullable) {
    const undefinable = { ...nullable };
    for (const key in nullable) {
        // eslint-disable-next-line no-null/no-null
        if (nullable[key] === null && Object.prototype.hasOwnProperty.call(nullable, key)) {
            undefinable[key] = undefined;
        }
    }
    return undefinable;
}
exports.nullToUndefined = nullToUndefined;
/**
 * Throws when called and statically makes sure that all variants of a type were consumed.
 */
function unreachable(_never, message = 'unhandled case') {
    throw new Error(message);
}
exports.unreachable = unreachable;
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation and others. All rights reserved.
 *  Licensed under the MIT License. See https://github.com/Microsoft/vscode/blob/master/LICENSE.txt for license information.
 *--------------------------------------------------------------------------------------------*/
// Copied from https://github.com/microsoft/vscode/blob/1.72.2/src/vs/base/common/types.ts
/**
 * @returns whether the provided parameter is defined.
 */
function isDefined(arg) {
    return !isUndefinedOrNull(arg);
}
exports.isDefined = isDefined;
/**
 * @returns whether the provided parameter is undefined or null.
 */
function isUndefinedOrNull(obj) {
    // eslint-disable-next-line no-null/no-null
    return (isUndefined(obj) || obj === null);
}
exports.isUndefinedOrNull = isUndefinedOrNull;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/uri-command-handler.js":
/*!************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/common/uri-command-handler.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.UriAwareCommandHandler = void 0;
const selection_1 = __webpack_require__(/*! ../common/selection */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/selection.js");
const uri_1 = __webpack_require__(/*! ./uri */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/uri.js");
const types_1 = __webpack_require__(/*! ./types */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/types.js");
class UriAwareCommandHandler {
    /**
     * @deprecated since 1.6.0. Please use `UriAwareCommandHandler.MonoSelect` or `UriAwareCommandHandler.MultiSelect`.
     */
    constructor(selectionService, handler, options) {
        this.selectionService = selectionService;
        this.handler = handler;
        this.options = options;
    }
    getUri(...args) {
        const [maybeUriArray] = args;
        const firstArgIsOK = this.isMulti()
            ? (0, types_1.isArray)(maybeUriArray, uri => uri instanceof uri_1.default)
            : maybeUriArray instanceof uri_1.default;
        if (firstArgIsOK) {
            return maybeUriArray;
        }
        const { selection } = this.selectionService;
        const uriOrUris = this.isMulti()
            ? selection_1.UriSelection.getUris(selection)
            : selection_1.UriSelection.getUri(selection);
        return uriOrUris;
    }
    getArgsWithUri(...args) {
        const uri = this.getUri(...args);
        const [maybeUri, ...others] = args;
        if (uri === maybeUri) {
            return [maybeUri, ...others];
        }
        return [uri, ...args];
    }
    execute(...args) {
        const [uri, ...others] = this.getArgsWithUri(...args);
        return uri ? this.handler.execute(uri, ...others) : undefined;
    }
    isVisible(...args) {
        const [uri, ...others] = this.getArgsWithUri(...args);
        if (uri) {
            if (this.handler.isVisible) {
                return this.handler.isVisible(uri, ...others);
            }
            return true;
        }
        return false;
    }
    isEnabled(...args) {
        const [uri, ...others] = this.getArgsWithUri(...args);
        if (uri) {
            if (this.handler.isEnabled) {
                return this.handler.isEnabled(uri, ...others);
            }
            return true;
        }
        return false;
    }
    isMulti() {
        return this.options && !!this.options.multi;
    }
}
exports.UriAwareCommandHandler = UriAwareCommandHandler;
(function (UriAwareCommandHandler) {
    /**
     * @returns a command handler for mono-select contexts that expects a `URI` as the first parameter of its methods.
     */
    function MonoSelect(selectionService, handler) {
        /* eslint-disable-next-line deprecation/deprecation*/ // Safe to use when the generic and the options agree.
        return new UriAwareCommandHandler(selectionService, handler, { multi: false });
    }
    UriAwareCommandHandler.MonoSelect = MonoSelect;
    /**
     * @returns a command handler for multi-select contexts that expects a `URI[]` as the first parameter of its methods.
     */
    function MultiSelect(selectionService, handler) {
        /* eslint-disable-next-line deprecation/deprecation*/ // Safe to use when the generic and the options agree.
        return new UriAwareCommandHandler(selectionService, handler, { multi: true });
    }
    UriAwareCommandHandler.MultiSelect = MultiSelect;
})(UriAwareCommandHandler = exports.UriAwareCommandHandler || (exports.UriAwareCommandHandler = {}));


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/uri.js":
/*!********************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/common/uri.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2017 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.URI = void 0;
const vscode_uri_1 = __webpack_require__(/*! vscode-uri */ "../node_modules/vscode-uri/lib/esm/index.js");
const path_1 = __webpack_require__(/*! ./path */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/path.js");
class URI {
    constructor(uri = '') {
        if (uri instanceof vscode_uri_1.URI) {
            this.codeUri = uri;
        }
        else {
            this.codeUri = vscode_uri_1.URI.parse(uri);
        }
    }
    static fromComponents(components) {
        return components ? new URI(vscode_uri_1.URI.revive(components)) : undefined;
    }
    static fromFilePath(path) {
        return new URI(vscode_uri_1.URI.file(path));
    }
    /**
     * TODO move implementation to `DefaultUriLabelProviderContribution.getName`
     *
     * @deprecated use `LabelProvider.getName` instead
     */
    get displayName() {
        const base = this.path.base;
        if (base) {
            return base;
        }
        if (this.path.isRoot) {
            return this.path.fsPath();
        }
        return '';
    }
    /**
     * Return all uri from the current to the top most.
     */
    get allLocations() {
        const locations = [];
        let location = this;
        while (!location.path.isRoot && location.path.hasDir) {
            locations.push(location);
            location = location.parent;
        }
        locations.push(location);
        return locations;
    }
    get parent() {
        if (this.path.isRoot) {
            return this;
        }
        return this.withPath(this.path.dir);
    }
    relative(uri) {
        if (this.authority !== uri.authority || this.scheme !== uri.scheme) {
            return undefined;
        }
        return this.path.relative(uri.path);
    }
    resolve(path) {
        return this.withPath(this.path.join(path.toString()));
    }
    /**
     * @returns a new, absolute URI if one can be computed from the path segments passed in.
     */
    resolveToAbsolute(...pathSegments) {
        const absolutePath = this.path.resolve(...pathSegments.map(path => path.toString()));
        if (absolutePath) {
            return this.withPath(absolutePath);
        }
    }
    /**
     * return a new URI replacing the current with the given scheme
     */
    withScheme(scheme) {
        const newCodeUri = vscode_uri_1.URI.from({
            ...this.codeUri.toJSON(),
            scheme
        });
        return new URI(newCodeUri);
    }
    /**
     * return a new URI replacing the current with the given authority
     */
    withAuthority(authority) {
        const newCodeUri = vscode_uri_1.URI.from({
            ...this.codeUri.toJSON(),
            scheme: this.codeUri.scheme,
            authority
        });
        return new URI(newCodeUri);
    }
    /**
     * return this URI without a authority
     */
    withoutAuthority() {
        return this.withAuthority('');
    }
    /**
     * return a new URI replacing the current with the given path
     */
    withPath(path) {
        const newCodeUri = vscode_uri_1.URI.from({
            ...this.codeUri.toJSON(),
            scheme: this.codeUri.scheme,
            path: path.toString()
        });
        return new URI(newCodeUri);
    }
    /**
     * return this URI without a path
     */
    withoutPath() {
        return this.withPath('');
    }
    /**
     * return a new URI replacing the current with the given query
     */
    withQuery(query) {
        const newCodeUri = vscode_uri_1.URI.from({
            ...this.codeUri.toJSON(),
            scheme: this.codeUri.scheme,
            query
        });
        return new URI(newCodeUri);
    }
    /**
     * return this URI without a query
     */
    withoutQuery() {
        return this.withQuery('');
    }
    /**
     * return a new URI replacing the current with the given fragment
     */
    withFragment(fragment) {
        const newCodeUri = vscode_uri_1.URI.from({
            ...this.codeUri.toJSON(),
            scheme: this.codeUri.scheme,
            fragment
        });
        return new URI(newCodeUri);
    }
    /**
     * return this URI without a fragment
     */
    withoutFragment() {
        return this.withFragment('');
    }
    /**
     * return a new URI replacing the current with its normalized path, resolving '..' and '.' segments
     */
    normalizePath() {
        return this.withPath(this.path.normalize());
    }
    get scheme() {
        return this.codeUri.scheme;
    }
    get authority() {
        return this.codeUri.authority;
    }
    get path() {
        if (this._path === undefined) {
            this._path = new path_1.Path(this.codeUri.path);
        }
        return this._path;
    }
    get query() {
        return this.codeUri.query;
    }
    get fragment() {
        return this.codeUri.fragment;
    }
    toString(skipEncoding) {
        return this.codeUri.toString(skipEncoding);
    }
    isEqual(uri, caseSensitive = true) {
        if (!this.hasSameOrigin(uri)) {
            return false;
        }
        return caseSensitive
            ? this.toString() === uri.toString()
            : this.toString().toLowerCase() === uri.toString().toLowerCase();
    }
    isEqualOrParent(uri, caseSensitive = true) {
        if (!this.hasSameOrigin(uri)) {
            return false;
        }
        let left = this.path;
        let right = uri.path;
        if (!caseSensitive) {
            left = new path_1.Path(left.toString().toLowerCase());
            right = new path_1.Path(right.toString().toLowerCase());
        }
        return left.isEqualOrParent(right);
    }
    static getDistinctParents(uris) {
        const result = [];
        uris.forEach((uri, i) => {
            if (!uris.some((otherUri, index) => index !== i && otherUri.isEqualOrParent(uri))) {
                result.push(uri);
            }
        });
        return result;
    }
    hasSameOrigin(uri) {
        return (this.authority === uri.authority) && (this.scheme === uri.scheme);
    }
    toComponents() {
        return {
            scheme: this.scheme,
            authority: this.authority,
            path: this.path.toString(),
            query: this.query,
            fragment: this.fragment
        };
    }
}
exports.URI = URI;
exports["default"] = URI;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/uuid.js":
/*!*********************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/common/uuid.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2023 Mathieu Bussieres and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.hashValue = exports.generateUuid = exports.isUUID = void 0;
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation and others. All rights reserved.
 *  Licensed under the MIT License. See https://github.com/Microsoft/vscode/blob/master/LICENSE.txt for license information.
 *--------------------------------------------------------------------------------------------*/
// based on https://github.com/microsoft/vscode/blob/1.72.2/src/vs/base/common/uuid.ts
const uuid_1 = __webpack_require__(/*! uuid */ "../node_modules/@theia/editor/node_modules/uuid/dist/commonjs-browser/index.js");
const _UUIDPattern = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;
function isUUID(value) {
    return _UUIDPattern.test(value);
}
exports.isUUID = isUUID;
function generateUuid() {
    return (0, uuid_1.v4)();
}
exports.generateUuid = generateUuid;
const NAMESPACE = '4c90ee4f-d952-44b1-83ca-f04121ab8e05';
/**
 * This function will hash the given value using SHA1. The result will be a uuid.
 * @param value the string to hash
 * @returns a uuid
 */
function hashValue(value) {
    // as opposed to v4, v5 is deterministic and uses SHA1 hashing
    return (0, uuid_1.v5)(value, NAMESPACE);
}
exports.hashValue = hashValue;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/version.js":
/*!************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/common/version.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2017 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.THEIA_VERSION = void 0;
exports.THEIA_VERSION = __webpack_require__(/*! ../../package.json */ "../node_modules/@theia/editor/node_modules/@theia/core/package.json").version;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/view-column.js":
/*!****************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/lib/common/view-column.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2022 STMicroelectronics.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ViewColumn = void 0;
/**
 * Denotes a column in the editor window.
 * Columns are used to show editors side by side.
 */
var ViewColumn;
(function (ViewColumn) {
    ViewColumn[ViewColumn["Active"] = -1] = "Active";
    ViewColumn[ViewColumn["Beside"] = -2] = "Beside";
    ViewColumn[ViewColumn["One"] = 1] = "One";
    ViewColumn[ViewColumn["Two"] = 2] = "Two";
    ViewColumn[ViewColumn["Three"] = 3] = "Three";
    ViewColumn[ViewColumn["Four"] = 4] = "Four";
    ViewColumn[ViewColumn["Five"] = 5] = "Five";
    ViewColumn[ViewColumn["Six"] = 6] = "Six";
    ViewColumn[ViewColumn["Seven"] = 7] = "Seven";
    ViewColumn[ViewColumn["Eight"] = 8] = "Eight";
    ViewColumn[ViewColumn["Nine"] = 9] = "Nine";
})(ViewColumn = exports.ViewColumn || (exports.ViewColumn = {}));


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/shared/@phosphor/algorithm/index.js":
/*!**************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/shared/@phosphor/algorithm/index.js ***!
  \**************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__(/*! @phosphor/algorithm */ "../node_modules/@phosphor/algorithm/lib/index.js");


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/shared/@theia/application-package/lib/environment/index.js":
/*!*************************************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/shared/@theia/application-package/lib/environment/index.js ***!
  \*************************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__(/*! @theia/application-package/lib/environment */ "../node_modules/@theia/editor/node_modules/@theia/application-package/lib/environment.js");


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/shared/inversify/index.js":
/*!****************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/shared/inversify/index.js ***!
  \****************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__(/*! inversify */ "../node_modules/inversify/es/inversify.js");


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/shared/vscode-languageserver-protocol/index.js":
/*!*************************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/shared/vscode-languageserver-protocol/index.js ***!
  \*************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__(/*! vscode-languageserver-protocol */ "../node_modules/vscode-languageserver-protocol/lib/browser/main.js");


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/variable-resolver/lib/browser/index.js":
/*!************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/variable-resolver/lib/browser/index.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 Red Hat, Inc. and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./variable */ "../node_modules/@theia/editor/node_modules/@theia/variable-resolver/lib/browser/variable.js"), exports);
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./variable-quick-open-service */ "../node_modules/@theia/editor/node_modules/@theia/variable-resolver/lib/browser/variable-quick-open-service.js"), exports);
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./variable-resolver-service */ "../node_modules/@theia/editor/node_modules/@theia/variable-resolver/lib/browser/variable-resolver-service.js"), exports);


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/variable-resolver/lib/browser/variable-quick-open-service.js":
/*!**********************************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/variable-resolver/lib/browser/variable-quick-open-service.js ***!
  \**********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 Red Hat, Inc. and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.VariableQuickOpenService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../node_modules/@theia/editor/node_modules/@theia/core/shared/inversify/index.js");
const message_service_1 = __webpack_require__(/*! @theia/core/lib/common/message-service */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/message-service.js");
const variable_1 = __webpack_require__(/*! ./variable */ "../node_modules/@theia/editor/node_modules/@theia/variable-resolver/lib/browser/variable.js");
const variable_resolver_service_1 = __webpack_require__(/*! ./variable-resolver-service */ "../node_modules/@theia/editor/node_modules/@theia/variable-resolver/lib/browser/variable-resolver-service.js");
const browser_1 = __webpack_require__(/*! @theia/core/lib/browser */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/browser/index.js");
let VariableQuickOpenService = class VariableQuickOpenService {
    constructor(variableRegistry) {
        this.variableRegistry = variableRegistry;
    }
    open() {
        var _a;
        this.items = this.variableRegistry.getVariables().map(v => ({
            label: '${' + v.name + '}',
            detail: v.description,
            execute: () => {
                setTimeout(() => this.showValue(v));
            }
        }));
        (_a = this.quickInputService) === null || _a === void 0 ? void 0 : _a.showQuickPick(this.items, { placeholder: 'Registered variables' });
    }
    async showValue(variable) {
        var _a;
        const argument = await ((_a = this.quickInputService) === null || _a === void 0 ? void 0 : _a.input({
            placeHolder: 'Type a variable argument'
        }));
        const value = await this.variableResolver.resolve('${' + variable.name + ':' + argument + '}');
        if (typeof value === 'string') {
            this.messages.info(value);
        }
    }
};
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(message_service_1.MessageService),
    (0, tslib_1.__metadata)("design:type", message_service_1.MessageService)
], VariableQuickOpenService.prototype, "messages", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(browser_1.QuickInputService),
    (0, inversify_1.optional)(),
    (0, tslib_1.__metadata)("design:type", Object)
], VariableQuickOpenService.prototype, "quickInputService", void 0);
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(variable_resolver_service_1.VariableResolverService),
    (0, tslib_1.__metadata)("design:type", variable_resolver_service_1.VariableResolverService)
], VariableQuickOpenService.prototype, "variableResolver", void 0);
VariableQuickOpenService = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)(),
    (0, tslib_1.__param)(0, (0, inversify_1.inject)(variable_1.VariableRegistry)),
    (0, tslib_1.__metadata)("design:paramtypes", [variable_1.VariableRegistry])
], VariableQuickOpenService);
exports.VariableQuickOpenService = VariableQuickOpenService;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/variable-resolver/lib/browser/variable-resolver-service.js":
/*!********************************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/variable-resolver/lib/browser/variable-resolver-service.js ***!
  \********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 Red Hat, Inc. and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var VariableResolverService_1;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.VariableResolverService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
/* eslint-disable @typescript-eslint/no-explicit-any */
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../node_modules/@theia/editor/node_modules/@theia/core/shared/inversify/index.js");
const variable_1 = __webpack_require__(/*! ./variable */ "../node_modules/@theia/editor/node_modules/@theia/variable-resolver/lib/browser/variable.js");
const core_1 = __webpack_require__(/*! @theia/core */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/index.js");
/**
 * The variable resolver service should be used to resolve variables in strings.
 */
let VariableResolverService = VariableResolverService_1 = class VariableResolverService {
    /**
     * Resolve the variables in the given string array.
     * @param value The array of data to resolve variables in.
     * @param options Options of the variable resolution.
     * @returns Promise to array with variables resolved. Never rejects.
     *
     * @deprecated since 1.28.0 use {@link resolve} instead.
     */
    resolveArray(value, options = {}) {
        return this.resolve(value, options);
    }
    /**
     * Resolve the variables for all strings found in the object and nested objects.
     * @param value Data to resolve variables in.
     * @param options Options of the variable resolution
     * @returns Promise to object with variables resolved. Returns `undefined` if a variable resolution was cancelled.
     */
    async resolve(value, options = {}) {
        const context = new VariableResolverService_1.Context(this.variableRegistry, options);
        try {
            return await this.doResolve(value, context);
        }
        catch (error) {
            if ((0, core_1.isCancelled)(error)) {
                return undefined;
            }
            throw error;
        }
    }
    async doResolve(value, context) {
        // eslint-disable-next-line no-null/no-null
        if (value === undefined || value === null) {
            return value;
        }
        if (typeof value === 'string') {
            return this.doResolveString(value, context);
        }
        if (Array.isArray(value)) {
            return this.doResolveArray(value, context);
        }
        if (typeof value === 'object') {
            return this.doResolveObject(value, context);
        }
        return value;
    }
    async doResolveObject(obj, context) {
        const result = {};
        for (const name of Object.keys(obj)) {
            const value = obj[name];
            const resolved = await this.doResolve(value, context);
            result[name] = resolved;
        }
        return result;
    }
    async doResolveArray(values, context) {
        const result = [];
        for (const value of values) {
            const resolved = await this.doResolve(value, context);
            result.push(resolved);
        }
        return result;
    }
    async doResolveString(value, context) {
        await this.resolveVariables(value, context);
        return value.replace(VariableResolverService_1.VAR_REGEXP, (match, varName) => {
            const varValue = context.get(varName);
            return varValue !== undefined ? varValue : match;
        });
    }
    async resolveVariables(value, context) {
        const variableRegExp = new RegExp(VariableResolverService_1.VAR_REGEXP);
        let match;
        // eslint-disable-next-line no-null/no-null
        while ((match = variableRegExp.exec(value)) !== null) {
            const variableName = match[1];
            await context.resolve(variableName);
        }
    }
};
VariableResolverService.VAR_REGEXP = /\$\{(.*?)\}/g;
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(variable_1.VariableRegistry),
    (0, tslib_1.__metadata)("design:type", variable_1.VariableRegistry)
], VariableResolverService.prototype, "variableRegistry", void 0);
VariableResolverService = VariableResolverService_1 = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)()
], VariableResolverService);
exports.VariableResolverService = VariableResolverService;
(function (VariableResolverService) {
    class Context {
        constructor(variableRegistry, options) {
            this.variableRegistry = variableRegistry;
            this.options = options;
            this.resolved = new Map();
        }
        get(name) {
            return this.resolved.get(name);
        }
        async resolve(name) {
            if (this.resolved.has(name)) {
                return;
            }
            try {
                let variableName = name;
                let argument;
                const parts = name.split(':', 2);
                if (parts.length > 1) {
                    variableName = parts[0];
                    argument = parts[1];
                }
                const variable = this.variableRegistry.getVariable(variableName);
                const resolved = await (variable === null || variable === void 0 ? void 0 : variable.resolve(this.options.context, argument, this.options.configurationSection, this.options.commandIdVariables, this.options.configuration));
                if (typeof resolved === 'bigint' ||
                    typeof resolved === 'boolean' ||
                    typeof resolved === 'number' ||
                    typeof resolved === 'string') {
                    this.resolved.set(name, `${resolved}`);
                }
                else {
                    this.resolved.set(name, undefined);
                }
            }
            catch (e) {
                if ((0, core_1.isCancelled)(e)) {
                    throw e;
                }
                this.resolved.set(name, undefined);
                console.error(`Failed to resolve '${name}' variable:`, e);
            }
        }
    }
    VariableResolverService.Context = Context;
})(VariableResolverService = exports.VariableResolverService || (exports.VariableResolverService = {}));
exports.VariableResolverService = VariableResolverService;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/variable-resolver/lib/browser/variable.js":
/*!***************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/variable-resolver/lib/browser/variable.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 Red Hat, Inc. and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.VariableRegistry = exports.VariableContribution = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../node_modules/@theia/editor/node_modules/@theia/core/shared/inversify/index.js");
const core_1 = __webpack_require__(/*! @theia/core */ "../node_modules/@theia/editor/node_modules/@theia/core/lib/common/index.js");
exports.VariableContribution = Symbol('VariableContribution');
/**
 * The variable registry manages variables.
 */
let VariableRegistry = class VariableRegistry {
    constructor() {
        this.variables = new Map();
        this.toDispose = new core_1.DisposableCollection();
    }
    dispose() {
        this.toDispose.dispose();
    }
    /**
     * Register the given variable.
     * Do nothing if a variable is already registered for the given variable name.
     */
    registerVariable(variable) {
        if (this.variables.has(variable.name)) {
            console.warn(`A variables with name ${variable.name} is already registered.`);
            return core_1.Disposable.NULL;
        }
        this.variables.set(variable.name, variable);
        const disposable = {
            dispose: () => this.variables.delete(variable.name)
        };
        this.toDispose.push(disposable);
        return disposable;
    }
    /**
     * Return all registered variables.
     */
    getVariables() {
        return [...this.variables.values()];
    }
    /**
     * Get a variable for the given name or `undefined` if none.
     */
    getVariable(name) {
        return this.variables.get(name);
    }
    /**
     * Register an array of variables.
     * Do nothing if a variable is already registered for the given variable name.
     */
    registerVariables(variables) {
        return variables.map(v => this.registerVariable(v));
    }
};
VariableRegistry = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)()
], VariableRegistry);
exports.VariableRegistry = VariableRegistry;


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/iconv-lite/encodings/dbcs-codec.js":
/*!*************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/iconv-lite/encodings/dbcs-codec.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var Buffer = (__webpack_require__(/*! safer-buffer */ "../node_modules/safer-buffer/safer.js").Buffer);

// Multibyte codec. In this scheme, a character is represented by 1 or more bytes.
// Our codec supports UTF-16 surrogates, extensions for GB18030 and unicode sequences.
// To save memory and loading time, we read table files only when requested.

exports._dbcs = DBCSCodec;

var UNASSIGNED = -1,
    GB18030_CODE = -2,
    SEQ_START  = -10,
    NODE_START = -1000,
    UNASSIGNED_NODE = new Array(0x100),
    DEF_CHAR = -1;

for (var i = 0; i < 0x100; i++)
    UNASSIGNED_NODE[i] = UNASSIGNED;


// Class DBCSCodec reads and initializes mapping tables.
function DBCSCodec(codecOptions, iconv) {
    this.encodingName = codecOptions.encodingName;
    if (!codecOptions)
        throw new Error("DBCS codec is called without the data.")
    if (!codecOptions.table)
        throw new Error("Encoding '" + this.encodingName + "' has no data.");

    // Load tables.
    var mappingTable = codecOptions.table();


    // Decode tables: MBCS -> Unicode.

    // decodeTables is a trie, encoded as an array of arrays of integers. Internal arrays are trie nodes and all have len = 256.
    // Trie root is decodeTables[0].
    // Values: >=  0 -> unicode character code. can be > 0xFFFF
    //         == UNASSIGNED -> unknown/unassigned sequence.
    //         == GB18030_CODE -> this is the end of a GB18030 4-byte sequence.
    //         <= NODE_START -> index of the next node in our trie to process next byte.
    //         <= SEQ_START  -> index of the start of a character code sequence, in decodeTableSeq.
    this.decodeTables = [];
    this.decodeTables[0] = UNASSIGNED_NODE.slice(0); // Create root node.

    // Sometimes a MBCS char corresponds to a sequence of unicode chars. We store them as arrays of integers here. 
    this.decodeTableSeq = [];

    // Actual mapping tables consist of chunks. Use them to fill up decode tables.
    for (var i = 0; i < mappingTable.length; i++)
        this._addDecodeChunk(mappingTable[i]);

    // Load & create GB18030 tables when needed.
    if (typeof codecOptions.gb18030 === 'function') {
        this.gb18030 = codecOptions.gb18030(); // Load GB18030 ranges.

        // Add GB18030 common decode nodes.
        var commonThirdByteNodeIdx = this.decodeTables.length;
        this.decodeTables.push(UNASSIGNED_NODE.slice(0));

        var commonFourthByteNodeIdx = this.decodeTables.length;
        this.decodeTables.push(UNASSIGNED_NODE.slice(0));

        // Fill out the tree
        var firstByteNode = this.decodeTables[0];
        for (var i = 0x81; i <= 0xFE; i++) {
            var secondByteNode = this.decodeTables[NODE_START - firstByteNode[i]];
            for (var j = 0x30; j <= 0x39; j++) {
                if (secondByteNode[j] === UNASSIGNED) {
                    secondByteNode[j] = NODE_START - commonThirdByteNodeIdx;
                } else if (secondByteNode[j] > NODE_START) {
                    throw new Error("gb18030 decode tables conflict at byte 2");
                }

                var thirdByteNode = this.decodeTables[NODE_START - secondByteNode[j]];
                for (var k = 0x81; k <= 0xFE; k++) {
                    if (thirdByteNode[k] === UNASSIGNED) {
                        thirdByteNode[k] = NODE_START - commonFourthByteNodeIdx;
                    } else if (thirdByteNode[k] === NODE_START - commonFourthByteNodeIdx) {
                        continue;
                    } else if (thirdByteNode[k] > NODE_START) {
                        throw new Error("gb18030 decode tables conflict at byte 3");
                    }

                    var fourthByteNode = this.decodeTables[NODE_START - thirdByteNode[k]];
                    for (var l = 0x30; l <= 0x39; l++) {
                        if (fourthByteNode[l] === UNASSIGNED)
                            fourthByteNode[l] = GB18030_CODE;
                    }
                }
            }
        }
    }

    this.defaultCharUnicode = iconv.defaultCharUnicode;

    
    // Encode tables: Unicode -> DBCS.

    // `encodeTable` is array mapping from unicode char to encoded char. All its values are integers for performance.
    // Because it can be sparse, it is represented as array of buckets by 256 chars each. Bucket can be null.
    // Values: >=  0 -> it is a normal char. Write the value (if <=256 then 1 byte, if <=65536 then 2 bytes, etc.).
    //         == UNASSIGNED -> no conversion found. Output a default char.
    //         <= SEQ_START  -> it's an index in encodeTableSeq, see below. The character starts a sequence.
    this.encodeTable = [];
    
    // `encodeTableSeq` is used when a sequence of unicode characters is encoded as a single code. We use a tree of
    // objects where keys correspond to characters in sequence and leafs are the encoded dbcs values. A special DEF_CHAR key
    // means end of sequence (needed when one sequence is a strict subsequence of another).
    // Objects are kept separately from encodeTable to increase performance.
    this.encodeTableSeq = [];

    // Some chars can be decoded, but need not be encoded.
    var skipEncodeChars = {};
    if (codecOptions.encodeSkipVals)
        for (var i = 0; i < codecOptions.encodeSkipVals.length; i++) {
            var val = codecOptions.encodeSkipVals[i];
            if (typeof val === 'number')
                skipEncodeChars[val] = true;
            else
                for (var j = val.from; j <= val.to; j++)
                    skipEncodeChars[j] = true;
        }
        
    // Use decode trie to recursively fill out encode tables.
    this._fillEncodeTable(0, 0, skipEncodeChars);

    // Add more encoding pairs when needed.
    if (codecOptions.encodeAdd) {
        for (var uChar in codecOptions.encodeAdd)
            if (Object.prototype.hasOwnProperty.call(codecOptions.encodeAdd, uChar))
                this._setEncodeChar(uChar.charCodeAt(0), codecOptions.encodeAdd[uChar]);
    }

    this.defCharSB  = this.encodeTable[0][iconv.defaultCharSingleByte.charCodeAt(0)];
    if (this.defCharSB === UNASSIGNED) this.defCharSB = this.encodeTable[0]['?'];
    if (this.defCharSB === UNASSIGNED) this.defCharSB = "?".charCodeAt(0);
}

DBCSCodec.prototype.encoder = DBCSEncoder;
DBCSCodec.prototype.decoder = DBCSDecoder;

// Decoder helpers
DBCSCodec.prototype._getDecodeTrieNode = function(addr) {
    var bytes = [];
    for (; addr > 0; addr >>>= 8)
        bytes.push(addr & 0xFF);
    if (bytes.length == 0)
        bytes.push(0);

    var node = this.decodeTables[0];
    for (var i = bytes.length-1; i > 0; i--) { // Traverse nodes deeper into the trie.
        var val = node[bytes[i]];

        if (val == UNASSIGNED) { // Create new node.
            node[bytes[i]] = NODE_START - this.decodeTables.length;
            this.decodeTables.push(node = UNASSIGNED_NODE.slice(0));
        }
        else if (val <= NODE_START) { // Existing node.
            node = this.decodeTables[NODE_START - val];
        }
        else
            throw new Error("Overwrite byte in " + this.encodingName + ", addr: " + addr.toString(16));
    }
    return node;
}


DBCSCodec.prototype._addDecodeChunk = function(chunk) {
    // First element of chunk is the hex mbcs code where we start.
    var curAddr = parseInt(chunk[0], 16);

    // Choose the decoding node where we'll write our chars.
    var writeTable = this._getDecodeTrieNode(curAddr);
    curAddr = curAddr & 0xFF;

    // Write all other elements of the chunk to the table.
    for (var k = 1; k < chunk.length; k++) {
        var part = chunk[k];
        if (typeof part === "string") { // String, write as-is.
            for (var l = 0; l < part.length;) {
                var code = part.charCodeAt(l++);
                if (0xD800 <= code && code < 0xDC00) { // Decode surrogate
                    var codeTrail = part.charCodeAt(l++);
                    if (0xDC00 <= codeTrail && codeTrail < 0xE000)
                        writeTable[curAddr++] = 0x10000 + (code - 0xD800) * 0x400 + (codeTrail - 0xDC00);
                    else
                        throw new Error("Incorrect surrogate pair in "  + this.encodingName + " at chunk " + chunk[0]);
                }
                else if (0x0FF0 < code && code <= 0x0FFF) { // Character sequence (our own encoding used)
                    var len = 0xFFF - code + 2;
                    var seq = [];
                    for (var m = 0; m < len; m++)
                        seq.push(part.charCodeAt(l++)); // Simple variation: don't support surrogates or subsequences in seq.

                    writeTable[curAddr++] = SEQ_START - this.decodeTableSeq.length;
                    this.decodeTableSeq.push(seq);
                }
                else
                    writeTable[curAddr++] = code; // Basic char
            }
        } 
        else if (typeof part === "number") { // Integer, meaning increasing sequence starting with prev character.
            var charCode = writeTable[curAddr - 1] + 1;
            for (var l = 0; l < part; l++)
                writeTable[curAddr++] = charCode++;
        }
        else
            throw new Error("Incorrect type '" + typeof part + "' given in "  + this.encodingName + " at chunk " + chunk[0]);
    }
    if (curAddr > 0xFF)
        throw new Error("Incorrect chunk in "  + this.encodingName + " at addr " + chunk[0] + ": too long" + curAddr);
}

// Encoder helpers
DBCSCodec.prototype._getEncodeBucket = function(uCode) {
    var high = uCode >> 8; // This could be > 0xFF because of astral characters.
    if (this.encodeTable[high] === undefined)
        this.encodeTable[high] = UNASSIGNED_NODE.slice(0); // Create bucket on demand.
    return this.encodeTable[high];
}

DBCSCodec.prototype._setEncodeChar = function(uCode, dbcsCode) {
    var bucket = this._getEncodeBucket(uCode);
    var low = uCode & 0xFF;
    if (bucket[low] <= SEQ_START)
        this.encodeTableSeq[SEQ_START-bucket[low]][DEF_CHAR] = dbcsCode; // There's already a sequence, set a single-char subsequence of it.
    else if (bucket[low] == UNASSIGNED)
        bucket[low] = dbcsCode;
}

DBCSCodec.prototype._setEncodeSequence = function(seq, dbcsCode) {
    
    // Get the root of character tree according to first character of the sequence.
    var uCode = seq[0];
    var bucket = this._getEncodeBucket(uCode);
    var low = uCode & 0xFF;

    var node;
    if (bucket[low] <= SEQ_START) {
        // There's already a sequence with  - use it.
        node = this.encodeTableSeq[SEQ_START-bucket[low]];
    }
    else {
        // There was no sequence object - allocate a new one.
        node = {};
        if (bucket[low] !== UNASSIGNED) node[DEF_CHAR] = bucket[low]; // If a char was set before - make it a single-char subsequence.
        bucket[low] = SEQ_START - this.encodeTableSeq.length;
        this.encodeTableSeq.push(node);
    }

    // Traverse the character tree, allocating new nodes as needed.
    for (var j = 1; j < seq.length-1; j++) {
        var oldVal = node[uCode];
        if (typeof oldVal === 'object')
            node = oldVal;
        else {
            node = node[uCode] = {}
            if (oldVal !== undefined)
                node[DEF_CHAR] = oldVal
        }
    }

    // Set the leaf to given dbcsCode.
    uCode = seq[seq.length-1];
    node[uCode] = dbcsCode;
}

DBCSCodec.prototype._fillEncodeTable = function(nodeIdx, prefix, skipEncodeChars) {
    var node = this.decodeTables[nodeIdx];
    var hasValues = false;
    var subNodeEmpty = {};
    for (var i = 0; i < 0x100; i++) {
        var uCode = node[i];
        var mbCode = prefix + i;
        if (skipEncodeChars[mbCode])
            continue;

        if (uCode >= 0) {
            this._setEncodeChar(uCode, mbCode);
            hasValues = true;
        } else if (uCode <= NODE_START) {
            var subNodeIdx = NODE_START - uCode;
            if (!subNodeEmpty[subNodeIdx]) {  // Skip empty subtrees (they are too large in gb18030).
                var newPrefix = (mbCode << 8) >>> 0;  // NOTE: '>>> 0' keeps 32-bit num positive.
                if (this._fillEncodeTable(subNodeIdx, newPrefix, skipEncodeChars))
                    hasValues = true;
                else
                    subNodeEmpty[subNodeIdx] = true;
            }
        } else if (uCode <= SEQ_START) {
            this._setEncodeSequence(this.decodeTableSeq[SEQ_START - uCode], mbCode);
            hasValues = true;
        }
    }
    return hasValues;
}



// == Encoder ==================================================================

function DBCSEncoder(options, codec) {
    // Encoder state
    this.leadSurrogate = -1;
    this.seqObj = undefined;
    
    // Static data
    this.encodeTable = codec.encodeTable;
    this.encodeTableSeq = codec.encodeTableSeq;
    this.defaultCharSingleByte = codec.defCharSB;
    this.gb18030 = codec.gb18030;
}

DBCSEncoder.prototype.write = function(str) {
    var newBuf = Buffer.alloc(str.length * (this.gb18030 ? 4 : 3)),
        leadSurrogate = this.leadSurrogate,
        seqObj = this.seqObj, nextChar = -1,
        i = 0, j = 0;

    while (true) {
        // 0. Get next character.
        if (nextChar === -1) {
            if (i == str.length) break;
            var uCode = str.charCodeAt(i++);
        }
        else {
            var uCode = nextChar;
            nextChar = -1;    
        }

        // 1. Handle surrogates.
        if (0xD800 <= uCode && uCode < 0xE000) { // Char is one of surrogates.
            if (uCode < 0xDC00) { // We've got lead surrogate.
                if (leadSurrogate === -1) {
                    leadSurrogate = uCode;
                    continue;
                } else {
                    leadSurrogate = uCode;
                    // Double lead surrogate found.
                    uCode = UNASSIGNED;
                }
            } else { // We've got trail surrogate.
                if (leadSurrogate !== -1) {
                    uCode = 0x10000 + (leadSurrogate - 0xD800) * 0x400 + (uCode - 0xDC00);
                    leadSurrogate = -1;
                } else {
                    // Incomplete surrogate pair - only trail surrogate found.
                    uCode = UNASSIGNED;
                }
                
            }
        }
        else if (leadSurrogate !== -1) {
            // Incomplete surrogate pair - only lead surrogate found.
            nextChar = uCode; uCode = UNASSIGNED; // Write an error, then current char.
            leadSurrogate = -1;
        }

        // 2. Convert uCode character.
        var dbcsCode = UNASSIGNED;
        if (seqObj !== undefined && uCode != UNASSIGNED) { // We are in the middle of the sequence
            var resCode = seqObj[uCode];
            if (typeof resCode === 'object') { // Sequence continues.
                seqObj = resCode;
                continue;

            } else if (typeof resCode == 'number') { // Sequence finished. Write it.
                dbcsCode = resCode;

            } else if (resCode == undefined) { // Current character is not part of the sequence.

                // Try default character for this sequence
                resCode = seqObj[DEF_CHAR];
                if (resCode !== undefined) {
                    dbcsCode = resCode; // Found. Write it.
                    nextChar = uCode; // Current character will be written too in the next iteration.

                } else {
                    // TODO: What if we have no default? (resCode == undefined)
                    // Then, we should write first char of the sequence as-is and try the rest recursively.
                    // Didn't do it for now because no encoding has this situation yet.
                    // Currently, just skip the sequence and write current char.
                }
            }
            seqObj = undefined;
        }
        else if (uCode >= 0) {  // Regular character
            var subtable = this.encodeTable[uCode >> 8];
            if (subtable !== undefined)
                dbcsCode = subtable[uCode & 0xFF];
            
            if (dbcsCode <= SEQ_START) { // Sequence start
                seqObj = this.encodeTableSeq[SEQ_START-dbcsCode];
                continue;
            }

            if (dbcsCode == UNASSIGNED && this.gb18030) {
                // Use GB18030 algorithm to find character(s) to write.
                var idx = findIdx(this.gb18030.uChars, uCode);
                if (idx != -1) {
                    var dbcsCode = this.gb18030.gbChars[idx] + (uCode - this.gb18030.uChars[idx]);
                    newBuf[j++] = 0x81 + Math.floor(dbcsCode / 12600); dbcsCode = dbcsCode % 12600;
                    newBuf[j++] = 0x30 + Math.floor(dbcsCode / 1260); dbcsCode = dbcsCode % 1260;
                    newBuf[j++] = 0x81 + Math.floor(dbcsCode / 10); dbcsCode = dbcsCode % 10;
                    newBuf[j++] = 0x30 + dbcsCode;
                    continue;
                }
            }
        }

        // 3. Write dbcsCode character.
        if (dbcsCode === UNASSIGNED)
            dbcsCode = this.defaultCharSingleByte;
        
        if (dbcsCode < 0x100) {
            newBuf[j++] = dbcsCode;
        }
        else if (dbcsCode < 0x10000) {
            newBuf[j++] = dbcsCode >> 8;   // high byte
            newBuf[j++] = dbcsCode & 0xFF; // low byte
        }
        else if (dbcsCode < 0x1000000) {
            newBuf[j++] = dbcsCode >> 16;
            newBuf[j++] = (dbcsCode >> 8) & 0xFF;
            newBuf[j++] = dbcsCode & 0xFF;
        } else {
            newBuf[j++] = dbcsCode >>> 24;
            newBuf[j++] = (dbcsCode >>> 16) & 0xFF;
            newBuf[j++] = (dbcsCode >>> 8) & 0xFF;
            newBuf[j++] = dbcsCode & 0xFF;
        }
    }

    this.seqObj = seqObj;
    this.leadSurrogate = leadSurrogate;
    return newBuf.slice(0, j);
}

DBCSEncoder.prototype.end = function() {
    if (this.leadSurrogate === -1 && this.seqObj === undefined)
        return; // All clean. Most often case.

    var newBuf = Buffer.alloc(10), j = 0;

    if (this.seqObj) { // We're in the sequence.
        var dbcsCode = this.seqObj[DEF_CHAR];
        if (dbcsCode !== undefined) { // Write beginning of the sequence.
            if (dbcsCode < 0x100) {
                newBuf[j++] = dbcsCode;
            }
            else {
                newBuf[j++] = dbcsCode >> 8;   // high byte
                newBuf[j++] = dbcsCode & 0xFF; // low byte
            }
        } else {
            // See todo above.
        }
        this.seqObj = undefined;
    }

    if (this.leadSurrogate !== -1) {
        // Incomplete surrogate pair - only lead surrogate found.
        newBuf[j++] = this.defaultCharSingleByte;
        this.leadSurrogate = -1;
    }
    
    return newBuf.slice(0, j);
}

// Export for testing
DBCSEncoder.prototype.findIdx = findIdx;


// == Decoder ==================================================================

function DBCSDecoder(options, codec) {
    // Decoder state
    this.nodeIdx = 0;
    this.prevBytes = [];

    // Static data
    this.decodeTables = codec.decodeTables;
    this.decodeTableSeq = codec.decodeTableSeq;
    this.defaultCharUnicode = codec.defaultCharUnicode;
    this.gb18030 = codec.gb18030;
}

DBCSDecoder.prototype.write = function(buf) {
    var newBuf = Buffer.alloc(buf.length*2),
        nodeIdx = this.nodeIdx, 
        prevBytes = this.prevBytes, prevOffset = this.prevBytes.length,
        seqStart = -this.prevBytes.length, // idx of the start of current parsed sequence.
        uCode;

    for (var i = 0, j = 0; i < buf.length; i++) {
        var curByte = (i >= 0) ? buf[i] : prevBytes[i + prevOffset];

        // Lookup in current trie node.
        var uCode = this.decodeTables[nodeIdx][curByte];

        if (uCode >= 0) { 
            // Normal character, just use it.
        }
        else if (uCode === UNASSIGNED) { // Unknown char.
            // TODO: Callback with seq.
            uCode = this.defaultCharUnicode.charCodeAt(0);
            i = seqStart; // Skip one byte ('i' will be incremented by the for loop) and try to parse again.
        }
        else if (uCode === GB18030_CODE) {
            if (i >= 3) {
                var ptr = (buf[i-3]-0x81)*12600 + (buf[i-2]-0x30)*1260 + (buf[i-1]-0x81)*10 + (curByte-0x30);
            } else {
                var ptr = (prevBytes[i-3+prevOffset]-0x81)*12600 + 
                          (((i-2 >= 0) ? buf[i-2] : prevBytes[i-2+prevOffset])-0x30)*1260 + 
                          (((i-1 >= 0) ? buf[i-1] : prevBytes[i-1+prevOffset])-0x81)*10 + 
                          (curByte-0x30);
            }
            var idx = findIdx(this.gb18030.gbChars, ptr);
            uCode = this.gb18030.uChars[idx] + ptr - this.gb18030.gbChars[idx];
        }
        else if (uCode <= NODE_START) { // Go to next trie node.
            nodeIdx = NODE_START - uCode;
            continue;
        }
        else if (uCode <= SEQ_START) { // Output a sequence of chars.
            var seq = this.decodeTableSeq[SEQ_START - uCode];
            for (var k = 0; k < seq.length - 1; k++) {
                uCode = seq[k];
                newBuf[j++] = uCode & 0xFF;
                newBuf[j++] = uCode >> 8;
            }
            uCode = seq[seq.length-1];
        }
        else
            throw new Error("iconv-lite internal error: invalid decoding table value " + uCode + " at " + nodeIdx + "/" + curByte);

        // Write the character to buffer, handling higher planes using surrogate pair.
        if (uCode >= 0x10000) { 
            uCode -= 0x10000;
            var uCodeLead = 0xD800 | (uCode >> 10);
            newBuf[j++] = uCodeLead & 0xFF;
            newBuf[j++] = uCodeLead >> 8;

            uCode = 0xDC00 | (uCode & 0x3FF);
        }
        newBuf[j++] = uCode & 0xFF;
        newBuf[j++] = uCode >> 8;

        // Reset trie node.
        nodeIdx = 0; seqStart = i+1;
    }

    this.nodeIdx = nodeIdx;
    this.prevBytes = (seqStart >= 0)
        ? Array.prototype.slice.call(buf, seqStart)
        : prevBytes.slice(seqStart + prevOffset).concat(Array.prototype.slice.call(buf));

    return newBuf.slice(0, j).toString('ucs2');
}

DBCSDecoder.prototype.end = function() {
    var ret = '';

    // Try to parse all remaining chars.
    while (this.prevBytes.length > 0) {
        // Skip 1 character in the buffer.
        ret += this.defaultCharUnicode;
        var bytesArr = this.prevBytes.slice(1);

        // Parse remaining as usual.
        this.prevBytes = [];
        this.nodeIdx = 0;
        if (bytesArr.length > 0)
            ret += this.write(bytesArr);
    }

    this.prevBytes = [];
    this.nodeIdx = 0;
    return ret;
}

// Binary search for GB18030. Returns largest i such that table[i] <= val.
function findIdx(table, val) {
    if (table[0] > val)
        return -1;

    var l = 0, r = table.length;
    while (l < r-1) { // always table[l] <= val < table[r]
        var mid = l + ((r-l+1) >> 1);
        if (table[mid] <= val)
            l = mid;
        else
            r = mid;
    }
    return l;
}



/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/iconv-lite/encodings/dbcs-data.js":
/*!************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/iconv-lite/encodings/dbcs-data.js ***!
  \************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


// Description of supported double byte encodings and aliases.
// Tables are not require()-d until they are needed to speed up library load.
// require()-s are direct to support Browserify.

module.exports = {
    
    // == Japanese/ShiftJIS ====================================================
    // All japanese encodings are based on JIS X set of standards:
    // JIS X 0201 - Single-byte encoding of ASCII + ¥ + Kana chars at 0xA1-0xDF.
    // JIS X 0208 - Main set of 6879 characters, placed in 94x94 plane, to be encoded by 2 bytes. 
    //              Has several variations in 1978, 1983, 1990 and 1997.
    // JIS X 0212 - Supplementary plane of 6067 chars in 94x94 plane. 1990. Effectively dead.
    // JIS X 0213 - Extension and modern replacement of 0208 and 0212. Total chars: 11233.
    //              2 planes, first is superset of 0208, second - revised 0212.
    //              Introduced in 2000, revised 2004. Some characters are in Unicode Plane 2 (0x2xxxx)

    // Byte encodings are:
    //  * Shift_JIS: Compatible with 0201, uses not defined chars in top half as lead bytes for double-byte
    //               encoding of 0208. Lead byte ranges: 0x81-0x9F, 0xE0-0xEF; Trail byte ranges: 0x40-0x7E, 0x80-0x9E, 0x9F-0xFC.
    //               Windows CP932 is a superset of Shift_JIS. Some companies added more chars, notably KDDI.
    //  * EUC-JP:    Up to 3 bytes per character. Used mostly on *nixes.
    //               0x00-0x7F       - lower part of 0201
    //               0x8E, 0xA1-0xDF - upper part of 0201
    //               (0xA1-0xFE)x2   - 0208 plane (94x94).
    //               0x8F, (0xA1-0xFE)x2 - 0212 plane (94x94).
    //  * JIS X 208: 7-bit, direct encoding of 0208. Byte ranges: 0x21-0x7E (94 values). Uncommon.
    //               Used as-is in ISO2022 family.
    //  * ISO2022-JP: Stateful encoding, with escape sequences to switch between ASCII, 
    //                0201-1976 Roman, 0208-1978, 0208-1983.
    //  * ISO2022-JP-1: Adds esc seq for 0212-1990.
    //  * ISO2022-JP-2: Adds esc seq for GB2313-1980, KSX1001-1992, ISO8859-1, ISO8859-7.
    //  * ISO2022-JP-3: Adds esc seq for 0201-1976 Kana set, 0213-2000 Planes 1, 2.
    //  * ISO2022-JP-2004: Adds 0213-2004 Plane 1.
    //
    // After JIS X 0213 appeared, Shift_JIS-2004, EUC-JISX0213 and ISO2022-JP-2004 followed, with just changing the planes.
    //
    // Overall, it seems that it's a mess :( http://www8.plala.or.jp/tkubota1/unicode-symbols-map2.html

    'shiftjis': {
        type: '_dbcs',
        table: function() { return __webpack_require__(/*! ./tables/shiftjis.json */ "../node_modules/@theia/editor/node_modules/iconv-lite/encodings/tables/shiftjis.json") },
        encodeAdd: {'\u00a5': 0x5C, '\u203E': 0x7E},
        encodeSkipVals: [{from: 0xED40, to: 0xF940}],
    },
    'csshiftjis': 'shiftjis',
    'mskanji': 'shiftjis',
    'sjis': 'shiftjis',
    'windows31j': 'shiftjis',
    'ms31j': 'shiftjis',
    'xsjis': 'shiftjis',
    'windows932': 'shiftjis',
    'ms932': 'shiftjis',
    '932': 'shiftjis',
    'cp932': 'shiftjis',

    'eucjp': {
        type: '_dbcs',
        table: function() { return __webpack_require__(/*! ./tables/eucjp.json */ "../node_modules/@theia/editor/node_modules/iconv-lite/encodings/tables/eucjp.json") },
        encodeAdd: {'\u00a5': 0x5C, '\u203E': 0x7E},
    },

    // TODO: KDDI extension to Shift_JIS
    // TODO: IBM CCSID 942 = CP932, but F0-F9 custom chars and other char changes.
    // TODO: IBM CCSID 943 = Shift_JIS = CP932 with original Shift_JIS lower 128 chars.


    // == Chinese/GBK ==========================================================
    // http://en.wikipedia.org/wiki/GBK
    // We mostly implement W3C recommendation: https://www.w3.org/TR/encoding/#gbk-encoder

    // Oldest GB2312 (1981, ~7600 chars) is a subset of CP936
    'gb2312': 'cp936',
    'gb231280': 'cp936',
    'gb23121980': 'cp936',
    'csgb2312': 'cp936',
    'csiso58gb231280': 'cp936',
    'euccn': 'cp936',

    // Microsoft's CP936 is a subset and approximation of GBK.
    'windows936': 'cp936',
    'ms936': 'cp936',
    '936': 'cp936',
    'cp936': {
        type: '_dbcs',
        table: function() { return __webpack_require__(/*! ./tables/cp936.json */ "../node_modules/@theia/editor/node_modules/iconv-lite/encodings/tables/cp936.json") },
    },

    // GBK (~22000 chars) is an extension of CP936 that added user-mapped chars and some other.
    'gbk': {
        type: '_dbcs',
        table: function() { return (__webpack_require__(/*! ./tables/cp936.json */ "../node_modules/@theia/editor/node_modules/iconv-lite/encodings/tables/cp936.json").concat)(__webpack_require__(/*! ./tables/gbk-added.json */ "../node_modules/@theia/editor/node_modules/iconv-lite/encodings/tables/gbk-added.json")) },
    },
    'xgbk': 'gbk',
    'isoir58': 'gbk',

    // GB18030 is an algorithmic extension of GBK.
    // Main source: https://www.w3.org/TR/encoding/#gbk-encoder
    // http://icu-project.org/docs/papers/gb18030.html
    // http://source.icu-project.org/repos/icu/data/trunk/charset/data/xml/gb-18030-2000.xml
    // http://www.khngai.com/chinese/charmap/tblgbk.php?page=0
    'gb18030': {
        type: '_dbcs',
        table: function() { return (__webpack_require__(/*! ./tables/cp936.json */ "../node_modules/@theia/editor/node_modules/iconv-lite/encodings/tables/cp936.json").concat)(__webpack_require__(/*! ./tables/gbk-added.json */ "../node_modules/@theia/editor/node_modules/iconv-lite/encodings/tables/gbk-added.json")) },
        gb18030: function() { return __webpack_require__(/*! ./tables/gb18030-ranges.json */ "../node_modules/@theia/editor/node_modules/iconv-lite/encodings/tables/gb18030-ranges.json") },
        encodeSkipVals: [0x80],
        encodeAdd: {'€': 0xA2E3},
    },

    'chinese': 'gb18030',


    // == Korean ===============================================================
    // EUC-KR, KS_C_5601 and KS X 1001 are exactly the same.
    'windows949': 'cp949',
    'ms949': 'cp949',
    '949': 'cp949',
    'cp949': {
        type: '_dbcs',
        table: function() { return __webpack_require__(/*! ./tables/cp949.json */ "../node_modules/@theia/editor/node_modules/iconv-lite/encodings/tables/cp949.json") },
    },

    'cseuckr': 'cp949',
    'csksc56011987': 'cp949',
    'euckr': 'cp949',
    'isoir149': 'cp949',
    'korean': 'cp949',
    'ksc56011987': 'cp949',
    'ksc56011989': 'cp949',
    'ksc5601': 'cp949',


    // == Big5/Taiwan/Hong Kong ================================================
    // There are lots of tables for Big5 and cp950. Please see the following links for history:
    // http://moztw.org/docs/big5/  http://www.haible.de/bruno/charsets/conversion-tables/Big5.html
    // Variations, in roughly number of defined chars:
    //  * Windows CP 950: Microsoft variant of Big5. Canonical: http://www.unicode.org/Public/MAPPINGS/VENDORS/MICSFT/WINDOWS/CP950.TXT
    //  * Windows CP 951: Microsoft variant of Big5-HKSCS-2001. Seems to be never public. http://me.abelcheung.org/articles/research/what-is-cp951/
    //  * Big5-2003 (Taiwan standard) almost superset of cp950.
    //  * Unicode-at-on (UAO) / Mozilla 1.8. Falling out of use on the Web. Not supported by other browsers.
    //  * Big5-HKSCS (-2001, -2004, -2008). Hong Kong standard. 
    //    many unicode code points moved from PUA to Supplementary plane (U+2XXXX) over the years.
    //    Plus, it has 4 combining sequences.
    //    Seems that Mozilla refused to support it for 10 yrs. https://bugzilla.mozilla.org/show_bug.cgi?id=162431 https://bugzilla.mozilla.org/show_bug.cgi?id=310299
    //    because big5-hkscs is the only encoding to include astral characters in non-algorithmic way.
    //    Implementations are not consistent within browsers; sometimes labeled as just big5.
    //    MS Internet Explorer switches from big5 to big5-hkscs when a patch applied.
    //    Great discussion & recap of what's going on https://bugzilla.mozilla.org/show_bug.cgi?id=912470#c31
    //    In the encoder, it might make sense to support encoding old PUA mappings to Big5 bytes seq-s.
    //    Official spec: http://www.ogcio.gov.hk/en/business/tech_promotion/ccli/terms/doc/2003cmp_2008.txt
    //                   http://www.ogcio.gov.hk/tc/business/tech_promotion/ccli/terms/doc/hkscs-2008-big5-iso.txt
    // 
    // Current understanding of how to deal with Big5(-HKSCS) is in the Encoding Standard, http://encoding.spec.whatwg.org/#big5-encoder
    // Unicode mapping (http://www.unicode.org/Public/MAPPINGS/OBSOLETE/EASTASIA/OTHER/BIG5.TXT) is said to be wrong.

    'windows950': 'cp950',
    'ms950': 'cp950',
    '950': 'cp950',
    'cp950': {
        type: '_dbcs',
        table: function() { return __webpack_require__(/*! ./tables/cp950.json */ "../node_modules/@theia/editor/node_modules/iconv-lite/encodings/tables/cp950.json") },
    },

    // Big5 has many variations and is an extension of cp950. We use Encoding Standard's as a consensus.
    'big5': 'big5hkscs',
    'big5hkscs': {
        type: '_dbcs',
        table: function() { return (__webpack_require__(/*! ./tables/cp950.json */ "../node_modules/@theia/editor/node_modules/iconv-lite/encodings/tables/cp950.json").concat)(__webpack_require__(/*! ./tables/big5-added.json */ "../node_modules/@theia/editor/node_modules/iconv-lite/encodings/tables/big5-added.json")) },
        encodeSkipVals: [
            // Although Encoding Standard says we should avoid encoding to HKSCS area (See Step 1 of
            // https://encoding.spec.whatwg.org/#index-big5-pointer), we still do it to increase compatibility with ICU.
            // But if a single unicode point can be encoded both as HKSCS and regular Big5, we prefer the latter.
            0x8e69, 0x8e6f, 0x8e7e, 0x8eab, 0x8eb4, 0x8ecd, 0x8ed0, 0x8f57, 0x8f69, 0x8f6e, 0x8fcb, 0x8ffe,
            0x906d, 0x907a, 0x90c4, 0x90dc, 0x90f1, 0x91bf, 0x92af, 0x92b0, 0x92b1, 0x92b2, 0x92d1, 0x9447, 0x94ca,
            0x95d9, 0x96fc, 0x9975, 0x9b76, 0x9b78, 0x9b7b, 0x9bc6, 0x9bde, 0x9bec, 0x9bf6, 0x9c42, 0x9c53, 0x9c62,
            0x9c68, 0x9c6b, 0x9c77, 0x9cbc, 0x9cbd, 0x9cd0, 0x9d57, 0x9d5a, 0x9dc4, 0x9def, 0x9dfb, 0x9ea9, 0x9eef,
            0x9efd, 0x9f60, 0x9fcb, 0xa077, 0xa0dc, 0xa0df, 0x8fcc, 0x92c8, 0x9644, 0x96ed,

            // Step 2 of https://encoding.spec.whatwg.org/#index-big5-pointer: Use last pointer for U+2550, U+255E, U+2561, U+256A, U+5341, or U+5345
            0xa2a4, 0xa2a5, 0xa2a7, 0xa2a6, 0xa2cc, 0xa2ce,
        ],
    },

    'cnbig5': 'big5hkscs',
    'csbig5': 'big5hkscs',
    'xxbig5': 'big5hkscs',
};


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/iconv-lite/encodings/index.js":
/*!********************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/iconv-lite/encodings/index.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


// Update this array if you add/rename/remove files in this directory.
// We support Browserify by skipping automatic module discovery and requiring modules directly.
var modules = [
    __webpack_require__(/*! ./internal */ "../node_modules/@theia/editor/node_modules/iconv-lite/encodings/internal.js"),
    __webpack_require__(/*! ./utf32 */ "../node_modules/@theia/editor/node_modules/iconv-lite/encodings/utf32.js"),
    __webpack_require__(/*! ./utf16 */ "../node_modules/@theia/editor/node_modules/iconv-lite/encodings/utf16.js"),
    __webpack_require__(/*! ./utf7 */ "../node_modules/@theia/editor/node_modules/iconv-lite/encodings/utf7.js"),
    __webpack_require__(/*! ./sbcs-codec */ "../node_modules/@theia/editor/node_modules/iconv-lite/encodings/sbcs-codec.js"),
    __webpack_require__(/*! ./sbcs-data */ "../node_modules/@theia/editor/node_modules/iconv-lite/encodings/sbcs-data.js"),
    __webpack_require__(/*! ./sbcs-data-generated */ "../node_modules/@theia/editor/node_modules/iconv-lite/encodings/sbcs-data-generated.js"),
    __webpack_require__(/*! ./dbcs-codec */ "../node_modules/@theia/editor/node_modules/iconv-lite/encodings/dbcs-codec.js"),
    __webpack_require__(/*! ./dbcs-data */ "../node_modules/@theia/editor/node_modules/iconv-lite/encodings/dbcs-data.js"),
];

// Put all encoding/alias/codec definitions to single object and export it.
for (var i = 0; i < modules.length; i++) {
    var module = modules[i];
    for (var enc in module)
        if (Object.prototype.hasOwnProperty.call(module, enc))
            exports[enc] = module[enc];
}


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/iconv-lite/encodings/internal.js":
/*!***********************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/iconv-lite/encodings/internal.js ***!
  \***********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var Buffer = (__webpack_require__(/*! safer-buffer */ "../node_modules/safer-buffer/safer.js").Buffer);

// Export Node.js internal encodings.

module.exports = {
    // Encodings
    utf8:   { type: "_internal", bomAware: true},
    cesu8:  { type: "_internal", bomAware: true},
    unicode11utf8: "utf8",

    ucs2:   { type: "_internal", bomAware: true},
    utf16le: "ucs2",

    binary: { type: "_internal" },
    base64: { type: "_internal" },
    hex:    { type: "_internal" },

    // Codec.
    _internal: InternalCodec,
};

//------------------------------------------------------------------------------

function InternalCodec(codecOptions, iconv) {
    this.enc = codecOptions.encodingName;
    this.bomAware = codecOptions.bomAware;

    if (this.enc === "base64")
        this.encoder = InternalEncoderBase64;
    else if (this.enc === "cesu8") {
        this.enc = "utf8"; // Use utf8 for decoding.
        this.encoder = InternalEncoderCesu8;

        // Add decoder for versions of Node not supporting CESU-8
        if (Buffer.from('eda0bdedb2a9', 'hex').toString() !== '💩') {
            this.decoder = InternalDecoderCesu8;
            this.defaultCharUnicode = iconv.defaultCharUnicode;
        }
    }
}

InternalCodec.prototype.encoder = InternalEncoder;
InternalCodec.prototype.decoder = InternalDecoder;

//------------------------------------------------------------------------------

// We use node.js internal decoder. Its signature is the same as ours.
var StringDecoder = (__webpack_require__(/*! string_decoder */ "../node_modules/string_decoder/lib/string_decoder.js").StringDecoder);

if (!StringDecoder.prototype.end) // Node v0.8 doesn't have this method.
    StringDecoder.prototype.end = function() {};


function InternalDecoder(options, codec) {
    this.decoder = new StringDecoder(codec.enc);
}

InternalDecoder.prototype.write = function(buf) {
    if (!Buffer.isBuffer(buf)) {
        buf = Buffer.from(buf);
    }

    return this.decoder.write(buf);
}

InternalDecoder.prototype.end = function() {
    return this.decoder.end();
}


//------------------------------------------------------------------------------
// Encoder is mostly trivial

function InternalEncoder(options, codec) {
    this.enc = codec.enc;
}

InternalEncoder.prototype.write = function(str) {
    return Buffer.from(str, this.enc);
}

InternalEncoder.prototype.end = function() {
}


//------------------------------------------------------------------------------
// Except base64 encoder, which must keep its state.

function InternalEncoderBase64(options, codec) {
    this.prevStr = '';
}

InternalEncoderBase64.prototype.write = function(str) {
    str = this.prevStr + str;
    var completeQuads = str.length - (str.length % 4);
    this.prevStr = str.slice(completeQuads);
    str = str.slice(0, completeQuads);

    return Buffer.from(str, "base64");
}

InternalEncoderBase64.prototype.end = function() {
    return Buffer.from(this.prevStr, "base64");
}


//------------------------------------------------------------------------------
// CESU-8 encoder is also special.

function InternalEncoderCesu8(options, codec) {
}

InternalEncoderCesu8.prototype.write = function(str) {
    var buf = Buffer.alloc(str.length * 3), bufIdx = 0;
    for (var i = 0; i < str.length; i++) {
        var charCode = str.charCodeAt(i);
        // Naive implementation, but it works because CESU-8 is especially easy
        // to convert from UTF-16 (which all JS strings are encoded in).
        if (charCode < 0x80)
            buf[bufIdx++] = charCode;
        else if (charCode < 0x800) {
            buf[bufIdx++] = 0xC0 + (charCode >>> 6);
            buf[bufIdx++] = 0x80 + (charCode & 0x3f);
        }
        else { // charCode will always be < 0x10000 in javascript.
            buf[bufIdx++] = 0xE0 + (charCode >>> 12);
            buf[bufIdx++] = 0x80 + ((charCode >>> 6) & 0x3f);
            buf[bufIdx++] = 0x80 + (charCode & 0x3f);
        }
    }
    return buf.slice(0, bufIdx);
}

InternalEncoderCesu8.prototype.end = function() {
}

//------------------------------------------------------------------------------
// CESU-8 decoder is not implemented in Node v4.0+

function InternalDecoderCesu8(options, codec) {
    this.acc = 0;
    this.contBytes = 0;
    this.accBytes = 0;
    this.defaultCharUnicode = codec.defaultCharUnicode;
}

InternalDecoderCesu8.prototype.write = function(buf) {
    var acc = this.acc, contBytes = this.contBytes, accBytes = this.accBytes, 
        res = '';
    for (var i = 0; i < buf.length; i++) {
        var curByte = buf[i];
        if ((curByte & 0xC0) !== 0x80) { // Leading byte
            if (contBytes > 0) { // Previous code is invalid
                res += this.defaultCharUnicode;
                contBytes = 0;
            }

            if (curByte < 0x80) { // Single-byte code
                res += String.fromCharCode(curByte);
            } else if (curByte < 0xE0) { // Two-byte code
                acc = curByte & 0x1F;
                contBytes = 1; accBytes = 1;
            } else if (curByte < 0xF0) { // Three-byte code
                acc = curByte & 0x0F;
                contBytes = 2; accBytes = 1;
            } else { // Four or more are not supported for CESU-8.
                res += this.defaultCharUnicode;
            }
        } else { // Continuation byte
            if (contBytes > 0) { // We're waiting for it.
                acc = (acc << 6) | (curByte & 0x3f);
                contBytes--; accBytes++;
                if (contBytes === 0) {
                    // Check for overlong encoding, but support Modified UTF-8 (encoding NULL as C0 80)
                    if (accBytes === 2 && acc < 0x80 && acc > 0)
                        res += this.defaultCharUnicode;
                    else if (accBytes === 3 && acc < 0x800)
                        res += this.defaultCharUnicode;
                    else
                        // Actually add character.
                        res += String.fromCharCode(acc);
                }
            } else { // Unexpected continuation byte
                res += this.defaultCharUnicode;
            }
        }
    }
    this.acc = acc; this.contBytes = contBytes; this.accBytes = accBytes;
    return res;
}

InternalDecoderCesu8.prototype.end = function() {
    var res = 0;
    if (this.contBytes > 0)
        res += this.defaultCharUnicode;
    return res;
}


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/iconv-lite/encodings/sbcs-codec.js":
/*!*************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/iconv-lite/encodings/sbcs-codec.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var Buffer = (__webpack_require__(/*! safer-buffer */ "../node_modules/safer-buffer/safer.js").Buffer);

// Single-byte codec. Needs a 'chars' string parameter that contains 256 or 128 chars that
// correspond to encoded bytes (if 128 - then lower half is ASCII). 

exports._sbcs = SBCSCodec;
function SBCSCodec(codecOptions, iconv) {
    if (!codecOptions)
        throw new Error("SBCS codec is called without the data.")
    
    // Prepare char buffer for decoding.
    if (!codecOptions.chars || (codecOptions.chars.length !== 128 && codecOptions.chars.length !== 256))
        throw new Error("Encoding '"+codecOptions.type+"' has incorrect 'chars' (must be of len 128 or 256)");
    
    if (codecOptions.chars.length === 128) {
        var asciiString = "";
        for (var i = 0; i < 128; i++)
            asciiString += String.fromCharCode(i);
        codecOptions.chars = asciiString + codecOptions.chars;
    }

    this.decodeBuf = Buffer.from(codecOptions.chars, 'ucs2');
    
    // Encoding buffer.
    var encodeBuf = Buffer.alloc(65536, iconv.defaultCharSingleByte.charCodeAt(0));

    for (var i = 0; i < codecOptions.chars.length; i++)
        encodeBuf[codecOptions.chars.charCodeAt(i)] = i;

    this.encodeBuf = encodeBuf;
}

SBCSCodec.prototype.encoder = SBCSEncoder;
SBCSCodec.prototype.decoder = SBCSDecoder;


function SBCSEncoder(options, codec) {
    this.encodeBuf = codec.encodeBuf;
}

SBCSEncoder.prototype.write = function(str) {
    var buf = Buffer.alloc(str.length);
    for (var i = 0; i < str.length; i++)
        buf[i] = this.encodeBuf[str.charCodeAt(i)];
    
    return buf;
}

SBCSEncoder.prototype.end = function() {
}


function SBCSDecoder(options, codec) {
    this.decodeBuf = codec.decodeBuf;
}

SBCSDecoder.prototype.write = function(buf) {
    // Strings are immutable in JS -> we use ucs2 buffer to speed up computations.
    var decodeBuf = this.decodeBuf;
    var newBuf = Buffer.alloc(buf.length*2);
    var idx1 = 0, idx2 = 0;
    for (var i = 0; i < buf.length; i++) {
        idx1 = buf[i]*2; idx2 = i*2;
        newBuf[idx2] = decodeBuf[idx1];
        newBuf[idx2+1] = decodeBuf[idx1+1];
    }
    return newBuf.toString('ucs2');
}

SBCSDecoder.prototype.end = function() {
}


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/iconv-lite/encodings/sbcs-data-generated.js":
/*!**********************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/iconv-lite/encodings/sbcs-data-generated.js ***!
  \**********************************************************************************************/
/***/ ((module) => {

"use strict";


// Generated data for sbcs codec. Don't edit manually. Regenerate using generation/gen-sbcs.js script.
module.exports = {
  "437": "cp437",
  "737": "cp737",
  "775": "cp775",
  "850": "cp850",
  "852": "cp852",
  "855": "cp855",
  "856": "cp856",
  "857": "cp857",
  "858": "cp858",
  "860": "cp860",
  "861": "cp861",
  "862": "cp862",
  "863": "cp863",
  "864": "cp864",
  "865": "cp865",
  "866": "cp866",
  "869": "cp869",
  "874": "windows874",
  "922": "cp922",
  "1046": "cp1046",
  "1124": "cp1124",
  "1125": "cp1125",
  "1129": "cp1129",
  "1133": "cp1133",
  "1161": "cp1161",
  "1162": "cp1162",
  "1163": "cp1163",
  "1250": "windows1250",
  "1251": "windows1251",
  "1252": "windows1252",
  "1253": "windows1253",
  "1254": "windows1254",
  "1255": "windows1255",
  "1256": "windows1256",
  "1257": "windows1257",
  "1258": "windows1258",
  "28591": "iso88591",
  "28592": "iso88592",
  "28593": "iso88593",
  "28594": "iso88594",
  "28595": "iso88595",
  "28596": "iso88596",
  "28597": "iso88597",
  "28598": "iso88598",
  "28599": "iso88599",
  "28600": "iso885910",
  "28601": "iso885911",
  "28603": "iso885913",
  "28604": "iso885914",
  "28605": "iso885915",
  "28606": "iso885916",
  "windows874": {
    "type": "_sbcs",
    "chars": "€����…�����������‘’“”•–—�������� กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู����฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛����"
  },
  "win874": "windows874",
  "cp874": "windows874",
  "windows1250": {
    "type": "_sbcs",
    "chars": "€�‚�„…†‡�‰Š‹ŚŤŽŹ�‘’“”•–—�™š›śťžź ˇ˘Ł¤Ą¦§¨©Ş«¬­®Ż°±˛ł´µ¶·¸ąş»Ľ˝ľżŔÁÂĂÄĹĆÇČÉĘËĚÍÎĎĐŃŇÓÔŐÖ×ŘŮÚŰÜÝŢßŕáâăäĺćçčéęëěíîďđńňóôőö÷řůúűüýţ˙"
  },
  "win1250": "windows1250",
  "cp1250": "windows1250",
  "windows1251": {
    "type": "_sbcs",
    "chars": "ЂЃ‚ѓ„…†‡€‰Љ‹ЊЌЋЏђ‘’“”•–—�™љ›њќћџ ЎўЈ¤Ґ¦§Ё©Є«¬­®Ї°±Ііґµ¶·ё№є»јЅѕїАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя"
  },
  "win1251": "windows1251",
  "cp1251": "windows1251",
  "windows1252": {
    "type": "_sbcs",
    "chars": "€�‚ƒ„…†‡ˆ‰Š‹Œ�Ž��‘’“”•–—˜™š›œ�žŸ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ"
  },
  "win1252": "windows1252",
  "cp1252": "windows1252",
  "windows1253": {
    "type": "_sbcs",
    "chars": "€�‚ƒ„…†‡�‰�‹�����‘’“”•–—�™�›���� ΅Ά£¤¥¦§¨©�«¬­®―°±²³΄µ¶·ΈΉΊ»Ό½ΎΏΐΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡ�ΣΤΥΦΧΨΩΪΫάέήίΰαβγδεζηθικλμνξοπρςστυφχψωϊϋόύώ�"
  },
  "win1253": "windows1253",
  "cp1253": "windows1253",
  "windows1254": {
    "type": "_sbcs",
    "chars": "€�‚ƒ„…†‡ˆ‰Š‹Œ����‘’“”•–—˜™š›œ��Ÿ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏĞÑÒÓÔÕÖ×ØÙÚÛÜİŞßàáâãäåæçèéêëìíîïğñòóôõö÷øùúûüışÿ"
  },
  "win1254": "windows1254",
  "cp1254": "windows1254",
  "windows1255": {
    "type": "_sbcs",
    "chars": "€�‚ƒ„…†‡ˆ‰�‹�����‘’“”•–—˜™�›���� ¡¢£₪¥¦§¨©×«¬­®¯°±²³´µ¶·¸¹÷»¼½¾¿ְֱֲֳִֵֶַָֹֺֻּֽ־ֿ׀ׁׂ׃װױײ׳״�������אבגדהוזחטיךכלםמןנסעףפץצקרשת��‎‏�"
  },
  "win1255": "windows1255",
  "cp1255": "windows1255",
  "windows1256": {
    "type": "_sbcs",
    "chars": "€پ‚ƒ„…†‡ˆ‰ٹ‹Œچژڈگ‘’“”•–—ک™ڑ›œ‌‍ں ،¢£¤¥¦§¨©ھ«¬­®¯°±²³´µ¶·¸¹؛»¼½¾؟ہءآأؤإئابةتثجحخدذرزسشصض×طظعغـفقكàلâمنهوçèéêëىيîïًٌٍَôُِ÷ّùْûü‎‏ے"
  },
  "win1256": "windows1256",
  "cp1256": "windows1256",
  "windows1257": {
    "type": "_sbcs",
    "chars": "€�‚�„…†‡�‰�‹�¨ˇ¸�‘’“”•–—�™�›�¯˛� �¢£¤�¦§Ø©Ŗ«¬­®Æ°±²³´µ¶·ø¹ŗ»¼½¾æĄĮĀĆÄÅĘĒČÉŹĖĢĶĪĻŠŃŅÓŌÕÖ×ŲŁŚŪÜŻŽßąįāćäåęēčéźėģķīļšńņóōõö÷ųłśūüżž˙"
  },
  "win1257": "windows1257",
  "cp1257": "windows1257",
  "windows1258": {
    "type": "_sbcs",
    "chars": "€�‚ƒ„…†‡ˆ‰�‹Œ����‘’“”•–—˜™�›œ��Ÿ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂĂÄÅÆÇÈÉÊË̀ÍÎÏĐÑ̉ÓÔƠÖ×ØÙÚÛÜỮßàáâăäåæçèéêë́íîïđṇ̃óôơö÷øùúûüư₫ÿ"
  },
  "win1258": "windows1258",
  "cp1258": "windows1258",
  "iso88591": {
    "type": "_sbcs",
    "chars": " ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ"
  },
  "cp28591": "iso88591",
  "iso88592": {
    "type": "_sbcs",
    "chars": " Ą˘Ł¤ĽŚ§¨ŠŞŤŹ­ŽŻ°ą˛ł´ľśˇ¸šşťź˝žżŔÁÂĂÄĹĆÇČÉĘËĚÍÎĎĐŃŇÓÔŐÖ×ŘŮÚŰÜÝŢßŕáâăäĺćçčéęëěíîďđńňóôőö÷řůúűüýţ˙"
  },
  "cp28592": "iso88592",
  "iso88593": {
    "type": "_sbcs",
    "chars": " Ħ˘£¤�Ĥ§¨İŞĞĴ­�Ż°ħ²³´µĥ·¸ışğĵ½�żÀÁÂ�ÄĊĈÇÈÉÊËÌÍÎÏ�ÑÒÓÔĠÖ×ĜÙÚÛÜŬŜßàáâ�äċĉçèéêëìíîï�ñòóôġö÷ĝùúûüŭŝ˙"
  },
  "cp28593": "iso88593",
  "iso88594": {
    "type": "_sbcs",
    "chars": " ĄĸŖ¤ĨĻ§¨ŠĒĢŦ­Ž¯°ą˛ŗ´ĩļˇ¸šēģŧŊžŋĀÁÂÃÄÅÆĮČÉĘËĖÍÎĪĐŅŌĶÔÕÖ×ØŲÚÛÜŨŪßāáâãäåæįčéęëėíîīđņōķôõö÷øųúûüũū˙"
  },
  "cp28594": "iso88594",
  "iso88595": {
    "type": "_sbcs",
    "chars": " ЁЂЃЄЅІЇЈЉЊЋЌ­ЎЏАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя№ёђѓєѕіїјљњћќ§ўџ"
  },
  "cp28595": "iso88595",
  "iso88596": {
    "type": "_sbcs",
    "chars": " ���¤�������،­�������������؛���؟�ءآأؤإئابةتثجحخدذرزسشصضطظعغ�����ـفقكلمنهوىيًٌٍَُِّْ�������������"
  },
  "cp28596": "iso88596",
  "iso88597": {
    "type": "_sbcs",
    "chars": " ‘’£€₯¦§¨©ͺ«¬­�―°±²³΄΅Ά·ΈΉΊ»Ό½ΎΏΐΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡ�ΣΤΥΦΧΨΩΪΫάέήίΰαβγδεζηθικλμνξοπρςστυφχψωϊϋόύώ�"
  },
  "cp28597": "iso88597",
  "iso88598": {
    "type": "_sbcs",
    "chars": " �¢£¤¥¦§¨©×«¬­®¯°±²³´µ¶·¸¹÷»¼½¾��������������������������������‗אבגדהוזחטיךכלםמןנסעףפץצקרשת��‎‏�"
  },
  "cp28598": "iso88598",
  "iso88599": {
    "type": "_sbcs",
    "chars": " ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏĞÑÒÓÔÕÖ×ØÙÚÛÜİŞßàáâãäåæçèéêëìíîïğñòóôõö÷øùúûüışÿ"
  },
  "cp28599": "iso88599",
  "iso885910": {
    "type": "_sbcs",
    "chars": " ĄĒĢĪĨĶ§ĻĐŠŦŽ­ŪŊ°ąēģīĩķ·ļđšŧž―ūŋĀÁÂÃÄÅÆĮČÉĘËĖÍÎÏÐŅŌÓÔÕÖŨØŲÚÛÜÝÞßāáâãäåæįčéęëėíîïðņōóôõöũøųúûüýþĸ"
  },
  "cp28600": "iso885910",
  "iso885911": {
    "type": "_sbcs",
    "chars": " กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู����฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛����"
  },
  "cp28601": "iso885911",
  "iso885913": {
    "type": "_sbcs",
    "chars": " ”¢£¤„¦§Ø©Ŗ«¬­®Æ°±²³“µ¶·ø¹ŗ»¼½¾æĄĮĀĆÄÅĘĒČÉŹĖĢĶĪĻŠŃŅÓŌÕÖ×ŲŁŚŪÜŻŽßąįāćäåęēčéźėģķīļšńņóōõö÷ųłśūüżž’"
  },
  "cp28603": "iso885913",
  "iso885914": {
    "type": "_sbcs",
    "chars": " Ḃḃ£ĊċḊ§Ẁ©ẂḋỲ­®ŸḞḟĠġṀṁ¶ṖẁṗẃṠỳẄẅṡÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏŴÑÒÓÔÕÖṪØÙÚÛÜÝŶßàáâãäåæçèéêëìíîïŵñòóôõöṫøùúûüýŷÿ"
  },
  "cp28604": "iso885914",
  "iso885915": {
    "type": "_sbcs",
    "chars": " ¡¢£€¥Š§š©ª«¬­®¯°±²³Žµ¶·ž¹º»ŒœŸ¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ"
  },
  "cp28605": "iso885915",
  "iso885916": {
    "type": "_sbcs",
    "chars": " ĄąŁ€„Š§š©Ș«Ź­źŻ°±ČłŽ”¶·žčș»ŒœŸżÀÁÂĂÄĆÆÇÈÉÊËÌÍÎÏĐŃÒÓÔŐÖŚŰÙÚÛÜĘȚßàáâăäćæçèéêëìíîïđńòóôőöśűùúûüęțÿ"
  },
  "cp28606": "iso885916",
  "cp437": {
    "type": "_sbcs",
    "chars": "ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜ¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "
  },
  "ibm437": "cp437",
  "csibm437": "cp437",
  "cp737": {
    "type": "_sbcs",
    "chars": "ΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩαβγδεζηθικλμνξοπρσςτυφχψ░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀ωάέήϊίόύϋώΆΈΉΊΌΎΏ±≥≤ΪΫ÷≈°∙·√ⁿ²■ "
  },
  "ibm737": "cp737",
  "csibm737": "cp737",
  "cp775": {
    "type": "_sbcs",
    "chars": "ĆüéāäģåćłēŖŗīŹÄÅÉæÆōöĢ¢ŚśÖÜø£Ø×¤ĀĪóŻżź”¦©®¬½¼Ł«»░▒▓│┤ĄČĘĖ╣║╗╝ĮŠ┐└┴┬├─┼ŲŪ╚╔╩╦╠═╬Žąčęėįšųūž┘┌█▄▌▐▀ÓßŌŃõÕµńĶķĻļņĒŅ’­±“¾¶§÷„°∙·¹³²■ "
  },
  "ibm775": "cp775",
  "csibm775": "cp775",
  "cp850": {
    "type": "_sbcs",
    "chars": "ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜø£Ø×ƒáíóúñÑªº¿®¬½¼¡«»░▒▓│┤ÁÂÀ©╣║╗╝¢¥┐└┴┬├─┼ãÃ╚╔╩╦╠═╬¤ðÐÊËÈıÍÎÏ┘┌█▄¦Ì▀ÓßÔÒõÕµþÞÚÛÙýÝ¯´­±‗¾¶§÷¸°¨·¹³²■ "
  },
  "ibm850": "cp850",
  "csibm850": "cp850",
  "cp852": {
    "type": "_sbcs",
    "chars": "ÇüéâäůćçłëŐőîŹÄĆÉĹĺôöĽľŚśÖÜŤťŁ×čáíóúĄąŽžĘę¬źČş«»░▒▓│┤ÁÂĚŞ╣║╗╝Żż┐└┴┬├─┼Ăă╚╔╩╦╠═╬¤đĐĎËďŇÍÎě┘┌█▄ŢŮ▀ÓßÔŃńňŠšŔÚŕŰýÝţ´­˝˛ˇ˘§÷¸°¨˙űŘř■ "
  },
  "ibm852": "cp852",
  "csibm852": "cp852",
  "cp855": {
    "type": "_sbcs",
    "chars": "ђЂѓЃёЁєЄѕЅіІїЇјЈљЉњЊћЋќЌўЎџЏюЮъЪаАбБцЦдДеЕфФгГ«»░▒▓│┤хХиИ╣║╗╝йЙ┐└┴┬├─┼кК╚╔╩╦╠═╬¤лЛмМнНоОп┘┌█▄Пя▀ЯрРсСтТуУжЖвВьЬ№­ыЫзЗшШэЭщЩчЧ§■ "
  },
  "ibm855": "cp855",
  "csibm855": "cp855",
  "cp856": {
    "type": "_sbcs",
    "chars": "אבגדהוזחטיךכלםמןנסעףפץצקרשת�£�×����������®¬½¼�«»░▒▓│┤���©╣║╗╝¢¥┐└┴┬├─┼��╚╔╩╦╠═╬¤���������┘┌█▄¦�▀������µ�������¯´­±‗¾¶§÷¸°¨·¹³²■ "
  },
  "ibm856": "cp856",
  "csibm856": "cp856",
  "cp857": {
    "type": "_sbcs",
    "chars": "ÇüéâäàåçêëèïîıÄÅÉæÆôöòûùİÖÜø£ØŞşáíóúñÑĞğ¿®¬½¼¡«»░▒▓│┤ÁÂÀ©╣║╗╝¢¥┐└┴┬├─┼ãÃ╚╔╩╦╠═╬¤ºªÊËÈ�ÍÎÏ┘┌█▄¦Ì▀ÓßÔÒõÕµ�×ÚÛÙìÿ¯´­±�¾¶§÷¸°¨·¹³²■ "
  },
  "ibm857": "cp857",
  "csibm857": "cp857",
  "cp858": {
    "type": "_sbcs",
    "chars": "ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜø£Ø×ƒáíóúñÑªº¿®¬½¼¡«»░▒▓│┤ÁÂÀ©╣║╗╝¢¥┐└┴┬├─┼ãÃ╚╔╩╦╠═╬¤ðÐÊËÈ€ÍÎÏ┘┌█▄¦Ì▀ÓßÔÒõÕµþÞÚÛÙýÝ¯´­±‗¾¶§÷¸°¨·¹³²■ "
  },
  "ibm858": "cp858",
  "csibm858": "cp858",
  "cp860": {
    "type": "_sbcs",
    "chars": "ÇüéâãàÁçêÊèÍÔìÃÂÉÀÈôõòÚùÌÕÜ¢£Ù₧ÓáíóúñÑªº¿Ò¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "
  },
  "ibm860": "cp860",
  "csibm860": "cp860",
  "cp861": {
    "type": "_sbcs",
    "chars": "ÇüéâäàåçêëèÐðÞÄÅÉæÆôöþûÝýÖÜø£Ø₧ƒáíóúÁÍÓÚ¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "
  },
  "ibm861": "cp861",
  "csibm861": "cp861",
  "cp862": {
    "type": "_sbcs",
    "chars": "אבגדהוזחטיךכלםמןנסעףפץצקרשת¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "
  },
  "ibm862": "cp862",
  "csibm862": "cp862",
  "cp863": {
    "type": "_sbcs",
    "chars": "ÇüéâÂà¶çêëèïî‗À§ÉÈÊôËÏûù¤ÔÜ¢£ÙÛƒ¦´óú¨¸³¯Î⌐¬½¼¾«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "
  },
  "ibm863": "cp863",
  "csibm863": "cp863",
  "cp864": {
    "type": "_sbcs",
    "chars": "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$٪&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~°·∙√▒─│┼┤┬├┴┐┌└┘β∞φ±½¼≈«»ﻷﻸ��ﻻﻼ� ­ﺂ£¤ﺄ��ﺎﺏﺕﺙ،ﺝﺡﺥ٠١٢٣٤٥٦٧٨٩ﻑ؛ﺱﺵﺹ؟¢ﺀﺁﺃﺅﻊﺋﺍﺑﺓﺗﺛﺟﺣﺧﺩﺫﺭﺯﺳﺷﺻﺿﻁﻅﻋﻏ¦¬÷×ﻉـﻓﻗﻛﻟﻣﻧﻫﻭﻯﻳﺽﻌﻎﻍﻡﹽّﻥﻩﻬﻰﻲﻐﻕﻵﻶﻝﻙﻱ■�"
  },
  "ibm864": "cp864",
  "csibm864": "cp864",
  "cp865": {
    "type": "_sbcs",
    "chars": "ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜø£Ø₧ƒáíóúñÑªº¿⌐¬½¼¡«¤░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "
  },
  "ibm865": "cp865",
  "csibm865": "cp865",
  "cp866": {
    "type": "_sbcs",
    "chars": "АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмноп░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀рстуфхцчшщъыьэюяЁёЄєЇїЎў°∙·√№¤■ "
  },
  "ibm866": "cp866",
  "csibm866": "cp866",
  "cp869": {
    "type": "_sbcs",
    "chars": "������Ά�·¬¦‘’Έ―ΉΊΪΌ��ΎΫ©Ώ²³ά£έήίϊΐόύΑΒΓΔΕΖΗ½ΘΙ«»░▒▓│┤ΚΛΜΝ╣║╗╝ΞΟ┐└┴┬├─┼ΠΡ╚╔╩╦╠═╬ΣΤΥΦΧΨΩαβγ┘┌█▄δε▀ζηθικλμνξοπρσςτ΄­±υφχ§ψ΅°¨ωϋΰώ■ "
  },
  "ibm869": "cp869",
  "csibm869": "cp869",
  "cp922": {
    "type": "_sbcs",
    "chars": " ¡¢£¤¥¦§¨©ª«¬­®‾°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏŠÑÒÓÔÕÖ×ØÙÚÛÜÝŽßàáâãäåæçèéêëìíîïšñòóôõö÷øùúûüýžÿ"
  },
  "ibm922": "cp922",
  "csibm922": "cp922",
  "cp1046": {
    "type": "_sbcs",
    "chars": "ﺈ×÷ﹱ■│─┐┌└┘ﹹﹻﹽﹿﹷﺊﻰﻳﻲﻎﻏﻐﻶﻸﻺﻼ ¤ﺋﺑﺗﺛﺟﺣ،­ﺧﺳ٠١٢٣٤٥٦٧٨٩ﺷ؛ﺻﺿﻊ؟ﻋءآأؤإئابةتثجحخدذرزسشصضطﻇعغﻌﺂﺄﺎﻓـفقكلمنهوىيًٌٍَُِّْﻗﻛﻟﻵﻷﻹﻻﻣﻧﻬﻩ�"
  },
  "ibm1046": "cp1046",
  "csibm1046": "cp1046",
  "cp1124": {
    "type": "_sbcs",
    "chars": " ЁЂҐЄЅІЇЈЉЊЋЌ­ЎЏАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя№ёђґєѕіїјљњћќ§ўџ"
  },
  "ibm1124": "cp1124",
  "csibm1124": "cp1124",
  "cp1125": {
    "type": "_sbcs",
    "chars": "АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмноп░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀рстуфхцчшщъыьэюяЁёҐґЄєІіЇї·√№¤■ "
  },
  "ibm1125": "cp1125",
  "csibm1125": "cp1125",
  "cp1129": {
    "type": "_sbcs",
    "chars": " ¡¢£¤¥¦§œ©ª«¬­®¯°±²³Ÿµ¶·Œ¹º»¼½¾¿ÀÁÂĂÄÅÆÇÈÉÊË̀ÍÎÏĐÑ̉ÓÔƠÖ×ØÙÚÛÜỮßàáâăäåæçèéêë́íîïđṇ̃óôơö÷øùúûüư₫ÿ"
  },
  "ibm1129": "cp1129",
  "csibm1129": "cp1129",
  "cp1133": {
    "type": "_sbcs",
    "chars": " ກຂຄງຈສຊຍດຕຖທນບປຜຝພຟມຢຣລວຫອຮ���ຯະາຳິີຶືຸູຼັົຽ���ເແໂໃໄ່້໊໋໌ໍໆ�ໜໝ₭����������������໐໑໒໓໔໕໖໗໘໙��¢¬¦�"
  },
  "ibm1133": "cp1133",
  "csibm1133": "cp1133",
  "cp1161": {
    "type": "_sbcs",
    "chars": "��������������������������������่กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู้๊๋€฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛¢¬¦ "
  },
  "ibm1161": "cp1161",
  "csibm1161": "cp1161",
  "cp1162": {
    "type": "_sbcs",
    "chars": "€…‘’“”•–— กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู����฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛����"
  },
  "ibm1162": "cp1162",
  "csibm1162": "cp1162",
  "cp1163": {
    "type": "_sbcs",
    "chars": " ¡¢£€¥¦§œ©ª«¬­®¯°±²³Ÿµ¶·Œ¹º»¼½¾¿ÀÁÂĂÄÅÆÇÈÉÊË̀ÍÎÏĐÑ̉ÓÔƠÖ×ØÙÚÛÜỮßàáâăäåæçèéêë́íîïđṇ̃óôơö÷øùúûüư₫ÿ"
  },
  "ibm1163": "cp1163",
  "csibm1163": "cp1163",
  "maccroatian": {
    "type": "_sbcs",
    "chars": "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®Š™´¨≠ŽØ∞±≤≥∆µ∂∑∏š∫ªºΩžø¿¡¬√ƒ≈Ć«Č… ÀÃÕŒœĐ—“”‘’÷◊�©⁄¤‹›Æ»–·‚„‰ÂćÁčÈÍÎÏÌÓÔđÒÚÛÙıˆ˜¯πË˚¸Êæˇ"
  },
  "maccyrillic": {
    "type": "_sbcs",
    "chars": "АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ†°¢£§•¶І®©™Ђђ≠Ѓѓ∞±≤≥іµ∂ЈЄєЇїЉљЊњјЅ¬√ƒ≈∆«»… ЋћЌќѕ–—“”‘’÷„ЎўЏџ№Ёёяабвгдежзийклмнопрстуфхцчшщъыьэю¤"
  },
  "macgreek": {
    "type": "_sbcs",
    "chars": "Ä¹²É³ÖÜ΅àâä΄¨çéèêë£™îï•½‰ôö¦­ùûü†ΓΔΘΛΞΠß®©ΣΪ§≠°·Α±≤≥¥ΒΕΖΗΙΚΜΦΫΨΩάΝ¬ΟΡ≈Τ«»… ΥΧΆΈœ–―“”‘’÷ΉΊΌΎέήίόΏύαβψδεφγηιξκλμνοπώρστθωςχυζϊϋΐΰ�"
  },
  "maciceland": {
    "type": "_sbcs",
    "chars": "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûüÝ°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄¤ÐðÞþý·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ"
  },
  "macroman": {
    "type": "_sbcs",
    "chars": "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄¤‹›ﬁﬂ‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ"
  },
  "macromania": {
    "type": "_sbcs",
    "chars": "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ĂŞ∞±≤≥¥µ∂∑∏π∫ªºΩăş¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄¤‹›Ţţ‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ"
  },
  "macthai": {
    "type": "_sbcs",
    "chars": "«»…“”�•‘’� กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู﻿​–—฿เแโใไๅๆ็่้๊๋์ํ™๏๐๑๒๓๔๕๖๗๘๙®©����"
  },
  "macturkish": {
    "type": "_sbcs",
    "chars": "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸĞğİıŞş‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙ�ˆ˜¯˘˙˚¸˝˛ˇ"
  },
  "macukraine": {
    "type": "_sbcs",
    "chars": "АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ†°Ґ£§•¶І®©™Ђђ≠Ѓѓ∞±≤≥іµґЈЄєЇїЉљЊњјЅ¬√ƒ≈∆«»… ЋћЌќѕ–—“”‘’÷„ЎўЏџ№Ёёяабвгдежзийклмнопрстуфхцчшщъыьэю¤"
  },
  "koi8r": {
    "type": "_sbcs",
    "chars": "─│┌┐└┘├┤┬┴┼▀▄█▌▐░▒▓⌠■∙√≈≤≥ ⌡°²·÷═║╒ё╓╔╕╖╗╘╙╚╛╜╝╞╟╠╡Ё╢╣╤╥╦╧╨╩╪╫╬©юабцдефгхийклмнопярстужвьызшэщчъЮАБЦДЕФГХИЙКЛМНОПЯРСТУЖВЬЫЗШЭЩЧЪ"
  },
  "koi8u": {
    "type": "_sbcs",
    "chars": "─│┌┐└┘├┤┬┴┼▀▄█▌▐░▒▓⌠■∙√≈≤≥ ⌡°²·÷═║╒ёє╔ії╗╘╙╚╛ґ╝╞╟╠╡ЁЄ╣ІЇ╦╧╨╩╪Ґ╬©юабцдефгхийклмнопярстужвьызшэщчъЮАБЦДЕФГХИЙКЛМНОПЯРСТУЖВЬЫЗШЭЩЧЪ"
  },
  "koi8ru": {
    "type": "_sbcs",
    "chars": "─│┌┐└┘├┤┬┴┼▀▄█▌▐░▒▓⌠■∙√≈≤≥ ⌡°²·÷═║╒ёє╔ії╗╘╙╚╛ґў╞╟╠╡ЁЄ╣ІЇ╦╧╨╩╪ҐЎ©юабцдефгхийклмнопярстужвьызшэщчъЮАБЦДЕФГХИЙКЛМНОПЯРСТУЖВЬЫЗШЭЩЧЪ"
  },
  "koi8t": {
    "type": "_sbcs",
    "chars": "қғ‚Ғ„…†‡�‰ҳ‹ҲҷҶ�Қ‘’“”•–—�™�›�����ӯӮё¤ӣ¦§���«¬­®�°±²Ё�Ӣ¶·�№�»���©юабцдефгхийклмнопярстужвьызшэщчъЮАБЦДЕФГХИЙКЛМНОПЯРСТУЖВЬЫЗШЭЩЧЪ"
  },
  "armscii8": {
    "type": "_sbcs",
    "chars": " �և։)(»«—.՝,-֊…՜՛՞ԱաԲբԳգԴդԵեԶզԷէԸըԹթԺժԻիԼլԽխԾծԿկՀհՁձՂղՃճՄմՅյՆնՇշՈոՉչՊպՋջՌռՍսՎվՏտՐրՑցՒւՓփՔքՕօՖֆ՚�"
  },
  "rk1048": {
    "type": "_sbcs",
    "chars": "ЂЃ‚ѓ„…†‡€‰Љ‹ЊҚҺЏђ‘’“”•–—�™љ›њқһџ ҰұӘ¤Ө¦§Ё©Ғ«¬­®Ү°±Ііөµ¶·ё№ғ»әҢңүАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя"
  },
  "tcvn": {
    "type": "_sbcs",
    "chars": "\u0000ÚỤ\u0003ỪỬỮ\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010ỨỰỲỶỸÝỴ\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÀẢÃÁẠẶẬÈẺẼÉẸỆÌỈĨÍỊÒỎÕÓỌỘỜỞỠỚỢÙỦŨ ĂÂÊÔƠƯĐăâêôơưđẶ̀̀̉̃́àảãáạẲằẳẵắẴẮẦẨẪẤỀặầẩẫấậèỂẻẽéẹềểễếệìỉỄẾỒĩíịòỔỏõóọồổỗốộờởỡớợùỖủũúụừửữứựỳỷỹýỵỐ"
  },
  "georgianacademy": {
    "type": "_sbcs",
    "chars": "‚ƒ„…†‡ˆ‰Š‹Œ‘’“”•–—˜™š›œŸ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿აბგდევზთიკლმნოპჟრსტუფქღყშჩცძწჭხჯჰჱჲჳჴჵჶçèéêëìíîïðñòóôõö÷øùúûüýþÿ"
  },
  "georgianps": {
    "type": "_sbcs",
    "chars": "‚ƒ„…†‡ˆ‰Š‹Œ‘’“”•–—˜™š›œŸ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿აბგდევზჱთიკლმნჲოპჟრსტჳუფქღყშჩცძწჭხჴჯჰჵæçèéêëìíîïðñòóôõö÷øùúûüýþÿ"
  },
  "pt154": {
    "type": "_sbcs",
    "chars": "ҖҒӮғ„…ҶҮҲүҠӢҢҚҺҸҗ‘’“”•–—ҳҷҡӣңқһҹ ЎўЈӨҘҰ§Ё©Ә«¬ӯ®Ҝ°ұІіҙө¶·ё№ә»јҪҫҝАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя"
  },
  "viscii": {
    "type": "_sbcs",
    "chars": "\u0000\u0001Ẳ\u0003\u0004ẴẪ\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013Ỷ\u0015\u0016\u0017\u0018Ỹ\u001a\u001b\u001c\u001dỴ\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ẠẮẰẶẤẦẨẬẼẸẾỀỂỄỆỐỒỔỖỘỢỚỜỞỊỎỌỈỦŨỤỲÕắằặấầẩậẽẹếềểễệốồổỗỠƠộờởịỰỨỪỬơớƯÀÁÂÃẢĂẳẵÈÉÊẺÌÍĨỳĐứÒÓÔạỷừửÙÚỹỵÝỡưàáâãảăữẫèéêẻìíĩỉđựòóôõỏọụùúũủýợỮ"
  },
  "iso646cn": {
    "type": "_sbcs",
    "chars": "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#¥%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}‾��������������������������������������������������������������������������������������������������������������������������������"
  },
  "iso646jp": {
    "type": "_sbcs",
    "chars": "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[¥]^_`abcdefghijklmnopqrstuvwxyz{|}‾��������������������������������������������������������������������������������������������������������������������������������"
  },
  "hproman8": {
    "type": "_sbcs",
    "chars": " ÀÂÈÊËÎÏ´ˋˆ¨˜ÙÛ₤¯Ýý°ÇçÑñ¡¿¤£¥§ƒ¢âêôûáéóúàèòùäëöüÅîØÆåíøæÄìÖÜÉïßÔÁÃãÐðÍÌÓÒÕõŠšÚŸÿÞþ·µ¶¾—¼½ªº«■»±�"
  },
  "macintosh": {
    "type": "_sbcs",
    "chars": "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄¤‹›ﬁﬂ‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ"
  },
  "ascii": {
    "type": "_sbcs",
    "chars": "��������������������������������������������������������������������������������������������������������������������������������"
  },
  "tis620": {
    "type": "_sbcs",
    "chars": "���������������������������������กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู����฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛����"
  }
}

/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/iconv-lite/encodings/sbcs-data.js":
/*!************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/iconv-lite/encodings/sbcs-data.js ***!
  \************************************************************************************/
/***/ ((module) => {

"use strict";


// Manually added data to be used by sbcs codec in addition to generated one.

module.exports = {
    // Not supported by iconv, not sure why.
    "10029": "maccenteuro",
    "maccenteuro": {
        "type": "_sbcs",
        "chars": "ÄĀāÉĄÖÜáąČäčĆćéŹźĎíďĒēĖóėôöõúĚěü†°Ę£§•¶ß®©™ę¨≠ģĮįĪ≤≥īĶ∂∑łĻļĽľĹĺŅņŃ¬√ńŇ∆«»… ňŐÕőŌ–—“”‘’÷◊ōŔŕŘ‹›řŖŗŠ‚„šŚśÁŤťÍŽžŪÓÔūŮÚůŰűŲųÝýķŻŁżĢˇ"
    },

    "808": "cp808",
    "ibm808": "cp808",
    "cp808": {
        "type": "_sbcs",
        "chars": "АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмноп░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀рстуфхцчшщъыьэюяЁёЄєЇїЎў°∙·√№€■ "
    },

    "mik": {
        "type": "_sbcs",
        "chars": "АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя└┴┬├─┼╣║╚╔╩╦╠═╬┐░▒▓│┤№§╗╝┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "
    },

    "cp720": {
        "type": "_sbcs",
        "chars": "\x80\x81éâ\x84à\x86çêëèïî\x8d\x8e\x8f\x90\u0651\u0652ô¤ـûùءآأؤ£إئابةتثجحخدذرزسشص«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀ضطظعغفµقكلمنهوىي≡\u064b\u064c\u064d\u064e\u064f\u0650≈°∙·√ⁿ²■\u00a0"
    },

    // Aliases of generated encodings.
    "ascii8bit": "ascii",
    "usascii": "ascii",
    "ansix34": "ascii",
    "ansix341968": "ascii",
    "ansix341986": "ascii",
    "csascii": "ascii",
    "cp367": "ascii",
    "ibm367": "ascii",
    "isoir6": "ascii",
    "iso646us": "ascii",
    "iso646irv": "ascii",
    "us": "ascii",

    "latin1": "iso88591",
    "latin2": "iso88592",
    "latin3": "iso88593",
    "latin4": "iso88594",
    "latin5": "iso88599",
    "latin6": "iso885910",
    "latin7": "iso885913",
    "latin8": "iso885914",
    "latin9": "iso885915",
    "latin10": "iso885916",

    "csisolatin1": "iso88591",
    "csisolatin2": "iso88592",
    "csisolatin3": "iso88593",
    "csisolatin4": "iso88594",
    "csisolatincyrillic": "iso88595",
    "csisolatinarabic": "iso88596",
    "csisolatingreek" : "iso88597",
    "csisolatinhebrew": "iso88598",
    "csisolatin5": "iso88599",
    "csisolatin6": "iso885910",

    "l1": "iso88591",
    "l2": "iso88592",
    "l3": "iso88593",
    "l4": "iso88594",
    "l5": "iso88599",
    "l6": "iso885910",
    "l7": "iso885913",
    "l8": "iso885914",
    "l9": "iso885915",
    "l10": "iso885916",

    "isoir14": "iso646jp",
    "isoir57": "iso646cn",
    "isoir100": "iso88591",
    "isoir101": "iso88592",
    "isoir109": "iso88593",
    "isoir110": "iso88594",
    "isoir144": "iso88595",
    "isoir127": "iso88596",
    "isoir126": "iso88597",
    "isoir138": "iso88598",
    "isoir148": "iso88599",
    "isoir157": "iso885910",
    "isoir166": "tis620",
    "isoir179": "iso885913",
    "isoir199": "iso885914",
    "isoir203": "iso885915",
    "isoir226": "iso885916",

    "cp819": "iso88591",
    "ibm819": "iso88591",

    "cyrillic": "iso88595",

    "arabic": "iso88596",
    "arabic8": "iso88596",
    "ecma114": "iso88596",
    "asmo708": "iso88596",

    "greek" : "iso88597",
    "greek8" : "iso88597",
    "ecma118" : "iso88597",
    "elot928" : "iso88597",

    "hebrew": "iso88598",
    "hebrew8": "iso88598",

    "turkish": "iso88599",
    "turkish8": "iso88599",

    "thai": "iso885911",
    "thai8": "iso885911",

    "celtic": "iso885914",
    "celtic8": "iso885914",
    "isoceltic": "iso885914",

    "tis6200": "tis620",
    "tis62025291": "tis620",
    "tis62025330": "tis620",

    "10000": "macroman",
    "10006": "macgreek",
    "10007": "maccyrillic",
    "10079": "maciceland",
    "10081": "macturkish",

    "cspc8codepage437": "cp437",
    "cspc775baltic": "cp775",
    "cspc850multilingual": "cp850",
    "cspcp852": "cp852",
    "cspc862latinhebrew": "cp862",
    "cpgr": "cp869",

    "msee": "cp1250",
    "mscyrl": "cp1251",
    "msansi": "cp1252",
    "msgreek": "cp1253",
    "msturk": "cp1254",
    "mshebr": "cp1255",
    "msarab": "cp1256",
    "winbaltrim": "cp1257",

    "cp20866": "koi8r",
    "20866": "koi8r",
    "ibm878": "koi8r",
    "cskoi8r": "koi8r",

    "cp21866": "koi8u",
    "21866": "koi8u",
    "ibm1168": "koi8u",

    "strk10482002": "rk1048",

    "tcvn5712": "tcvn",
    "tcvn57121": "tcvn",

    "gb198880": "iso646cn",
    "cn": "iso646cn",

    "csiso14jisc6220ro": "iso646jp",
    "jisc62201969ro": "iso646jp",
    "jp": "iso646jp",

    "cshproman8": "hproman8",
    "r8": "hproman8",
    "roman8": "hproman8",
    "xroman8": "hproman8",
    "ibm1051": "hproman8",

    "mac": "macintosh",
    "csmacintosh": "macintosh",
};



/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/iconv-lite/encodings/utf16.js":
/*!********************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/iconv-lite/encodings/utf16.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var Buffer = (__webpack_require__(/*! safer-buffer */ "../node_modules/safer-buffer/safer.js").Buffer);

// Note: UTF16-LE (or UCS2) codec is Node.js native. See encodings/internal.js

// == UTF16-BE codec. ==========================================================

exports.utf16be = Utf16BECodec;
function Utf16BECodec() {
}

Utf16BECodec.prototype.encoder = Utf16BEEncoder;
Utf16BECodec.prototype.decoder = Utf16BEDecoder;
Utf16BECodec.prototype.bomAware = true;


// -- Encoding

function Utf16BEEncoder() {
}

Utf16BEEncoder.prototype.write = function(str) {
    var buf = Buffer.from(str, 'ucs2');
    for (var i = 0; i < buf.length; i += 2) {
        var tmp = buf[i]; buf[i] = buf[i+1]; buf[i+1] = tmp;
    }
    return buf;
}

Utf16BEEncoder.prototype.end = function() {
}


// -- Decoding

function Utf16BEDecoder() {
    this.overflowByte = -1;
}

Utf16BEDecoder.prototype.write = function(buf) {
    if (buf.length == 0)
        return '';

    var buf2 = Buffer.alloc(buf.length + 1),
        i = 0, j = 0;

    if (this.overflowByte !== -1) {
        buf2[0] = buf[0];
        buf2[1] = this.overflowByte;
        i = 1; j = 2;
    }

    for (; i < buf.length-1; i += 2, j+= 2) {
        buf2[j] = buf[i+1];
        buf2[j+1] = buf[i];
    }

    this.overflowByte = (i == buf.length-1) ? buf[buf.length-1] : -1;

    return buf2.slice(0, j).toString('ucs2');
}

Utf16BEDecoder.prototype.end = function() {
    this.overflowByte = -1;
}


// == UTF-16 codec =============================================================
// Decoder chooses automatically from UTF-16LE and UTF-16BE using BOM and space-based heuristic.
// Defaults to UTF-16LE, as it's prevalent and default in Node.
// http://en.wikipedia.org/wiki/UTF-16 and http://encoding.spec.whatwg.org/#utf-16le
// Decoder default can be changed: iconv.decode(buf, 'utf16', {defaultEncoding: 'utf-16be'});

// Encoder uses UTF-16LE and prepends BOM (which can be overridden with addBOM: false).

exports.utf16 = Utf16Codec;
function Utf16Codec(codecOptions, iconv) {
    this.iconv = iconv;
}

Utf16Codec.prototype.encoder = Utf16Encoder;
Utf16Codec.prototype.decoder = Utf16Decoder;


// -- Encoding (pass-through)

function Utf16Encoder(options, codec) {
    options = options || {};
    if (options.addBOM === undefined)
        options.addBOM = true;
    this.encoder = codec.iconv.getEncoder('utf-16le', options);
}

Utf16Encoder.prototype.write = function(str) {
    return this.encoder.write(str);
}

Utf16Encoder.prototype.end = function() {
    return this.encoder.end();
}


// -- Decoding

function Utf16Decoder(options, codec) {
    this.decoder = null;
    this.initialBufs = [];
    this.initialBufsLen = 0;

    this.options = options || {};
    this.iconv = codec.iconv;
}

Utf16Decoder.prototype.write = function(buf) {
    if (!this.decoder) {
        // Codec is not chosen yet. Accumulate initial bytes.
        this.initialBufs.push(buf);
        this.initialBufsLen += buf.length;
        
        if (this.initialBufsLen < 16) // We need more bytes to use space heuristic (see below)
            return '';

        // We have enough bytes -> detect endianness.
        var encoding = detectEncoding(this.initialBufs, this.options.defaultEncoding);
        this.decoder = this.iconv.getDecoder(encoding, this.options);

        var resStr = '';
        for (var i = 0; i < this.initialBufs.length; i++)
            resStr += this.decoder.write(this.initialBufs[i]);

        this.initialBufs.length = this.initialBufsLen = 0;
        return resStr;
    }

    return this.decoder.write(buf);
}

Utf16Decoder.prototype.end = function() {
    if (!this.decoder) {
        var encoding = detectEncoding(this.initialBufs, this.options.defaultEncoding);
        this.decoder = this.iconv.getDecoder(encoding, this.options);

        var resStr = '';
        for (var i = 0; i < this.initialBufs.length; i++)
            resStr += this.decoder.write(this.initialBufs[i]);

        var trail = this.decoder.end();
        if (trail)
            resStr += trail;

        this.initialBufs.length = this.initialBufsLen = 0;
        return resStr;
    }
    return this.decoder.end();
}

function detectEncoding(bufs, defaultEncoding) {
    var b = [];
    var charsProcessed = 0;
    var asciiCharsLE = 0, asciiCharsBE = 0; // Number of ASCII chars when decoded as LE or BE.

    outer_loop:
    for (var i = 0; i < bufs.length; i++) {
        var buf = bufs[i];
        for (var j = 0; j < buf.length; j++) {
            b.push(buf[j]);
            if (b.length === 2) {
                if (charsProcessed === 0) {
                    // Check BOM first.
                    if (b[0] === 0xFF && b[1] === 0xFE) return 'utf-16le';
                    if (b[0] === 0xFE && b[1] === 0xFF) return 'utf-16be';
                }

                if (b[0] === 0 && b[1] !== 0) asciiCharsBE++;
                if (b[0] !== 0 && b[1] === 0) asciiCharsLE++;

                b.length = 0;
                charsProcessed++;

                if (charsProcessed >= 100) {
                    break outer_loop;
                }
            }
        }
    }

    // Make decisions.
    // Most of the time, the content has ASCII chars (U+00**), but the opposite (U+**00) is uncommon.
    // So, we count ASCII as if it was LE or BE, and decide from that.
    if (asciiCharsBE > asciiCharsLE) return 'utf-16be';
    if (asciiCharsBE < asciiCharsLE) return 'utf-16le';

    // Couldn't decide (likely all zeros or not enough data).
    return defaultEncoding || 'utf-16le';
}




/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/iconv-lite/encodings/utf32.js":
/*!********************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/iconv-lite/encodings/utf32.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var Buffer = (__webpack_require__(/*! safer-buffer */ "../node_modules/safer-buffer/safer.js").Buffer);

// == UTF32-LE/BE codec. ==========================================================

exports._utf32 = Utf32Codec;

function Utf32Codec(codecOptions, iconv) {
    this.iconv = iconv;
    this.bomAware = true;
    this.isLE = codecOptions.isLE;
}

exports.utf32le = { type: '_utf32', isLE: true };
exports.utf32be = { type: '_utf32', isLE: false };

// Aliases
exports.ucs4le = 'utf32le';
exports.ucs4be = 'utf32be';

Utf32Codec.prototype.encoder = Utf32Encoder;
Utf32Codec.prototype.decoder = Utf32Decoder;

// -- Encoding

function Utf32Encoder(options, codec) {
    this.isLE = codec.isLE;
    this.highSurrogate = 0;
}

Utf32Encoder.prototype.write = function(str) {
    var src = Buffer.from(str, 'ucs2');
    var dst = Buffer.alloc(src.length * 2);
    var write32 = this.isLE ? dst.writeUInt32LE : dst.writeUInt32BE;
    var offset = 0;

    for (var i = 0; i < src.length; i += 2) {
        var code = src.readUInt16LE(i);
        var isHighSurrogate = (0xD800 <= code && code < 0xDC00);
        var isLowSurrogate = (0xDC00 <= code && code < 0xE000);

        if (this.highSurrogate) {
            if (isHighSurrogate || !isLowSurrogate) {
                // There shouldn't be two high surrogates in a row, nor a high surrogate which isn't followed by a low
                // surrogate. If this happens, keep the pending high surrogate as a stand-alone semi-invalid character
                // (technically wrong, but expected by some applications, like Windows file names).
                write32.call(dst, this.highSurrogate, offset);
                offset += 4;
            }
            else {
                // Create 32-bit value from high and low surrogates;
                var codepoint = (((this.highSurrogate - 0xD800) << 10) | (code - 0xDC00)) + 0x10000;

                write32.call(dst, codepoint, offset);
                offset += 4;
                this.highSurrogate = 0;

                continue;
            }
        }

        if (isHighSurrogate)
            this.highSurrogate = code;
        else {
            // Even if the current character is a low surrogate, with no previous high surrogate, we'll
            // encode it as a semi-invalid stand-alone character for the same reasons expressed above for
            // unpaired high surrogates.
            write32.call(dst, code, offset);
            offset += 4;
            this.highSurrogate = 0;
        }
    }

    if (offset < dst.length)
        dst = dst.slice(0, offset);

    return dst;
};

Utf32Encoder.prototype.end = function() {
    // Treat any leftover high surrogate as a semi-valid independent character.
    if (!this.highSurrogate)
        return;

    var buf = Buffer.alloc(4);

    if (this.isLE)
        buf.writeUInt32LE(this.highSurrogate, 0);
    else
        buf.writeUInt32BE(this.highSurrogate, 0);

    this.highSurrogate = 0;

    return buf;
};

// -- Decoding

function Utf32Decoder(options, codec) {
    this.isLE = codec.isLE;
    this.badChar = codec.iconv.defaultCharUnicode.charCodeAt(0);
    this.overflow = [];
}

Utf32Decoder.prototype.write = function(src) {
    if (src.length === 0)
        return '';

    var i = 0;
    var codepoint = 0;
    var dst = Buffer.alloc(src.length + 4);
    var offset = 0;
    var isLE = this.isLE;
    var overflow = this.overflow;
    var badChar = this.badChar;

    if (overflow.length > 0) {
        for (; i < src.length && overflow.length < 4; i++)
            overflow.push(src[i]);
        
        if (overflow.length === 4) {
            // NOTE: codepoint is a signed int32 and can be negative.
            // NOTE: We copied this block from below to help V8 optimize it (it works with array, not buffer).
            if (isLE) {
                codepoint = overflow[i] | (overflow[i+1] << 8) | (overflow[i+2] << 16) | (overflow[i+3] << 24);
            } else {
                codepoint = overflow[i+3] | (overflow[i+2] << 8) | (overflow[i+1] << 16) | (overflow[i] << 24);
            }
            overflow.length = 0;

            offset = _writeCodepoint(dst, offset, codepoint, badChar);
        }
    }

    // Main loop. Should be as optimized as possible.
    for (; i < src.length - 3; i += 4) {
        // NOTE: codepoint is a signed int32 and can be negative.
        if (isLE) {
            codepoint = src[i] | (src[i+1] << 8) | (src[i+2] << 16) | (src[i+3] << 24);
        } else {
            codepoint = src[i+3] | (src[i+2] << 8) | (src[i+1] << 16) | (src[i] << 24);
        }
        offset = _writeCodepoint(dst, offset, codepoint, badChar);
    }

    // Keep overflowing bytes.
    for (; i < src.length; i++) {
        overflow.push(src[i]);
    }

    return dst.slice(0, offset).toString('ucs2');
};

function _writeCodepoint(dst, offset, codepoint, badChar) {
    // NOTE: codepoint is signed int32 and can be negative. We keep it that way to help V8 with optimizations.
    if (codepoint < 0 || codepoint > 0x10FFFF) {
        // Not a valid Unicode codepoint
        codepoint = badChar;
    } 

    // Ephemeral Planes: Write high surrogate.
    if (codepoint >= 0x10000) {
        codepoint -= 0x10000;

        var high = 0xD800 | (codepoint >> 10);
        dst[offset++] = high & 0xff;
        dst[offset++] = high >> 8;

        // Low surrogate is written below.
        var codepoint = 0xDC00 | (codepoint & 0x3FF);
    }

    // Write BMP char or low surrogate.
    dst[offset++] = codepoint & 0xff;
    dst[offset++] = codepoint >> 8;

    return offset;
};

Utf32Decoder.prototype.end = function() {
    this.overflow.length = 0;
};

// == UTF-32 Auto codec =============================================================
// Decoder chooses automatically from UTF-32LE and UTF-32BE using BOM and space-based heuristic.
// Defaults to UTF-32LE. http://en.wikipedia.org/wiki/UTF-32
// Encoder/decoder default can be changed: iconv.decode(buf, 'utf32', {defaultEncoding: 'utf-32be'});

// Encoder prepends BOM (which can be overridden with (addBOM: false}).

exports.utf32 = Utf32AutoCodec;
exports.ucs4 = 'utf32';

function Utf32AutoCodec(options, iconv) {
    this.iconv = iconv;
}

Utf32AutoCodec.prototype.encoder = Utf32AutoEncoder;
Utf32AutoCodec.prototype.decoder = Utf32AutoDecoder;

// -- Encoding

function Utf32AutoEncoder(options, codec) {
    options = options || {};

    if (options.addBOM === undefined)
        options.addBOM = true;

    this.encoder = codec.iconv.getEncoder(options.defaultEncoding || 'utf-32le', options);
}

Utf32AutoEncoder.prototype.write = function(str) {
    return this.encoder.write(str);
};

Utf32AutoEncoder.prototype.end = function() {
    return this.encoder.end();
};

// -- Decoding

function Utf32AutoDecoder(options, codec) {
    this.decoder = null;
    this.initialBufs = [];
    this.initialBufsLen = 0;
    this.options = options || {};
    this.iconv = codec.iconv;
}

Utf32AutoDecoder.prototype.write = function(buf) {
    if (!this.decoder) { 
        // Codec is not chosen yet. Accumulate initial bytes.
        this.initialBufs.push(buf);
        this.initialBufsLen += buf.length;

        if (this.initialBufsLen < 32) // We need more bytes to use space heuristic (see below)
            return '';

        // We have enough bytes -> detect endianness.
        var encoding = detectEncoding(this.initialBufs, this.options.defaultEncoding);
        this.decoder = this.iconv.getDecoder(encoding, this.options);

        var resStr = '';
        for (var i = 0; i < this.initialBufs.length; i++)
            resStr += this.decoder.write(this.initialBufs[i]);

        this.initialBufs.length = this.initialBufsLen = 0;
        return resStr;
    }

    return this.decoder.write(buf);
};

Utf32AutoDecoder.prototype.end = function() {
    if (!this.decoder) {
        var encoding = detectEncoding(this.initialBufs, this.options.defaultEncoding);
        this.decoder = this.iconv.getDecoder(encoding, this.options);

        var resStr = '';
        for (var i = 0; i < this.initialBufs.length; i++)
            resStr += this.decoder.write(this.initialBufs[i]);

        var trail = this.decoder.end();
        if (trail)
            resStr += trail;

        this.initialBufs.length = this.initialBufsLen = 0;
        return resStr;
    }

    return this.decoder.end();
};

function detectEncoding(bufs, defaultEncoding) {
    var b = [];
    var charsProcessed = 0;
    var invalidLE = 0, invalidBE = 0;   // Number of invalid chars when decoded as LE or BE.
    var bmpCharsLE = 0, bmpCharsBE = 0; // Number of BMP chars when decoded as LE or BE.

    outer_loop:
    for (var i = 0; i < bufs.length; i++) {
        var buf = bufs[i];
        for (var j = 0; j < buf.length; j++) {
            b.push(buf[j]);
            if (b.length === 4) {
                if (charsProcessed === 0) {
                    // Check BOM first.
                    if (b[0] === 0xFF && b[1] === 0xFE && b[2] === 0 && b[3] === 0) {
                        return 'utf-32le';
                    }
                    if (b[0] === 0 && b[1] === 0 && b[2] === 0xFE && b[3] === 0xFF) {
                        return 'utf-32be';
                    }
                }

                if (b[0] !== 0 || b[1] > 0x10) invalidBE++;
                if (b[3] !== 0 || b[2] > 0x10) invalidLE++;

                if (b[0] === 0 && b[1] === 0 && (b[2] !== 0 || b[3] !== 0)) bmpCharsBE++;
                if ((b[0] !== 0 || b[1] !== 0) && b[2] === 0 && b[3] === 0) bmpCharsLE++;

                b.length = 0;
                charsProcessed++;

                if (charsProcessed >= 100) {
                    break outer_loop;
                }
            }
        }
    }

    // Make decisions.
    if (bmpCharsBE - invalidBE > bmpCharsLE - invalidLE)  return 'utf-32be';
    if (bmpCharsBE - invalidBE < bmpCharsLE - invalidLE)  return 'utf-32le';

    // Couldn't decide (likely all zeros or not enough data).
    return defaultEncoding || 'utf-32le';
}


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/iconv-lite/encodings/utf7.js":
/*!*******************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/iconv-lite/encodings/utf7.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var Buffer = (__webpack_require__(/*! safer-buffer */ "../node_modules/safer-buffer/safer.js").Buffer);

// UTF-7 codec, according to https://tools.ietf.org/html/rfc2152
// See also below a UTF-7-IMAP codec, according to http://tools.ietf.org/html/rfc3501#section-5.1.3

exports.utf7 = Utf7Codec;
exports.unicode11utf7 = 'utf7'; // Alias UNICODE-1-1-UTF-7
function Utf7Codec(codecOptions, iconv) {
    this.iconv = iconv;
};

Utf7Codec.prototype.encoder = Utf7Encoder;
Utf7Codec.prototype.decoder = Utf7Decoder;
Utf7Codec.prototype.bomAware = true;


// -- Encoding

var nonDirectChars = /[^A-Za-z0-9'\(\),-\.\/:\? \n\r\t]+/g;

function Utf7Encoder(options, codec) {
    this.iconv = codec.iconv;
}

Utf7Encoder.prototype.write = function(str) {
    // Naive implementation.
    // Non-direct chars are encoded as "+<base64>-"; single "+" char is encoded as "+-".
    return Buffer.from(str.replace(nonDirectChars, function(chunk) {
        return "+" + (chunk === '+' ? '' : 
            this.iconv.encode(chunk, 'utf16-be').toString('base64').replace(/=+$/, '')) 
            + "-";
    }.bind(this)));
}

Utf7Encoder.prototype.end = function() {
}


// -- Decoding

function Utf7Decoder(options, codec) {
    this.iconv = codec.iconv;
    this.inBase64 = false;
    this.base64Accum = '';
}

var base64Regex = /[A-Za-z0-9\/+]/;
var base64Chars = [];
for (var i = 0; i < 256; i++)
    base64Chars[i] = base64Regex.test(String.fromCharCode(i));

var plusChar = '+'.charCodeAt(0), 
    minusChar = '-'.charCodeAt(0),
    andChar = '&'.charCodeAt(0);

Utf7Decoder.prototype.write = function(buf) {
    var res = "", lastI = 0,
        inBase64 = this.inBase64,
        base64Accum = this.base64Accum;

    // The decoder is more involved as we must handle chunks in stream.

    for (var i = 0; i < buf.length; i++) {
        if (!inBase64) { // We're in direct mode.
            // Write direct chars until '+'
            if (buf[i] == plusChar) {
                res += this.iconv.decode(buf.slice(lastI, i), "ascii"); // Write direct chars.
                lastI = i+1;
                inBase64 = true;
            }
        } else { // We decode base64.
            if (!base64Chars[buf[i]]) { // Base64 ended.
                if (i == lastI && buf[i] == minusChar) {// "+-" -> "+"
                    res += "+";
                } else {
                    var b64str = base64Accum + this.iconv.decode(buf.slice(lastI, i), "ascii");
                    res += this.iconv.decode(Buffer.from(b64str, 'base64'), "utf16-be");
                }

                if (buf[i] != minusChar) // Minus is absorbed after base64.
                    i--;

                lastI = i+1;
                inBase64 = false;
                base64Accum = '';
            }
        }
    }

    if (!inBase64) {
        res += this.iconv.decode(buf.slice(lastI), "ascii"); // Write direct chars.
    } else {
        var b64str = base64Accum + this.iconv.decode(buf.slice(lastI), "ascii");

        var canBeDecoded = b64str.length - (b64str.length % 8); // Minimal chunk: 2 quads -> 2x3 bytes -> 3 chars.
        base64Accum = b64str.slice(canBeDecoded); // The rest will be decoded in future.
        b64str = b64str.slice(0, canBeDecoded);

        res += this.iconv.decode(Buffer.from(b64str, 'base64'), "utf16-be");
    }

    this.inBase64 = inBase64;
    this.base64Accum = base64Accum;

    return res;
}

Utf7Decoder.prototype.end = function() {
    var res = "";
    if (this.inBase64 && this.base64Accum.length > 0)
        res = this.iconv.decode(Buffer.from(this.base64Accum, 'base64'), "utf16-be");

    this.inBase64 = false;
    this.base64Accum = '';
    return res;
}


// UTF-7-IMAP codec.
// RFC3501 Sec. 5.1.3 Modified UTF-7 (http://tools.ietf.org/html/rfc3501#section-5.1.3)
// Differences:
//  * Base64 part is started by "&" instead of "+"
//  * Direct characters are 0x20-0x7E, except "&" (0x26)
//  * In Base64, "," is used instead of "/"
//  * Base64 must not be used to represent direct characters.
//  * No implicit shift back from Base64 (should always end with '-')
//  * String must end in non-shifted position.
//  * "-&" while in base64 is not allowed.


exports.utf7imap = Utf7IMAPCodec;
function Utf7IMAPCodec(codecOptions, iconv) {
    this.iconv = iconv;
};

Utf7IMAPCodec.prototype.encoder = Utf7IMAPEncoder;
Utf7IMAPCodec.prototype.decoder = Utf7IMAPDecoder;
Utf7IMAPCodec.prototype.bomAware = true;


// -- Encoding

function Utf7IMAPEncoder(options, codec) {
    this.iconv = codec.iconv;
    this.inBase64 = false;
    this.base64Accum = Buffer.alloc(6);
    this.base64AccumIdx = 0;
}

Utf7IMAPEncoder.prototype.write = function(str) {
    var inBase64 = this.inBase64,
        base64Accum = this.base64Accum,
        base64AccumIdx = this.base64AccumIdx,
        buf = Buffer.alloc(str.length*5 + 10), bufIdx = 0;

    for (var i = 0; i < str.length; i++) {
        var uChar = str.charCodeAt(i);
        if (0x20 <= uChar && uChar <= 0x7E) { // Direct character or '&'.
            if (inBase64) {
                if (base64AccumIdx > 0) {
                    bufIdx += buf.write(base64Accum.slice(0, base64AccumIdx).toString('base64').replace(/\//g, ',').replace(/=+$/, ''), bufIdx);
                    base64AccumIdx = 0;
                }

                buf[bufIdx++] = minusChar; // Write '-', then go to direct mode.
                inBase64 = false;
            }

            if (!inBase64) {
                buf[bufIdx++] = uChar; // Write direct character

                if (uChar === andChar)  // Ampersand -> '&-'
                    buf[bufIdx++] = minusChar;
            }

        } else { // Non-direct character
            if (!inBase64) {
                buf[bufIdx++] = andChar; // Write '&', then go to base64 mode.
                inBase64 = true;
            }
            if (inBase64) {
                base64Accum[base64AccumIdx++] = uChar >> 8;
                base64Accum[base64AccumIdx++] = uChar & 0xFF;

                if (base64AccumIdx == base64Accum.length) {
                    bufIdx += buf.write(base64Accum.toString('base64').replace(/\//g, ','), bufIdx);
                    base64AccumIdx = 0;
                }
            }
        }
    }

    this.inBase64 = inBase64;
    this.base64AccumIdx = base64AccumIdx;

    return buf.slice(0, bufIdx);
}

Utf7IMAPEncoder.prototype.end = function() {
    var buf = Buffer.alloc(10), bufIdx = 0;
    if (this.inBase64) {
        if (this.base64AccumIdx > 0) {
            bufIdx += buf.write(this.base64Accum.slice(0, this.base64AccumIdx).toString('base64').replace(/\//g, ',').replace(/=+$/, ''), bufIdx);
            this.base64AccumIdx = 0;
        }

        buf[bufIdx++] = minusChar; // Write '-', then go to direct mode.
        this.inBase64 = false;
    }

    return buf.slice(0, bufIdx);
}


// -- Decoding

function Utf7IMAPDecoder(options, codec) {
    this.iconv = codec.iconv;
    this.inBase64 = false;
    this.base64Accum = '';
}

var base64IMAPChars = base64Chars.slice();
base64IMAPChars[','.charCodeAt(0)] = true;

Utf7IMAPDecoder.prototype.write = function(buf) {
    var res = "", lastI = 0,
        inBase64 = this.inBase64,
        base64Accum = this.base64Accum;

    // The decoder is more involved as we must handle chunks in stream.
    // It is forgiving, closer to standard UTF-7 (for example, '-' is optional at the end).

    for (var i = 0; i < buf.length; i++) {
        if (!inBase64) { // We're in direct mode.
            // Write direct chars until '&'
            if (buf[i] == andChar) {
                res += this.iconv.decode(buf.slice(lastI, i), "ascii"); // Write direct chars.
                lastI = i+1;
                inBase64 = true;
            }
        } else { // We decode base64.
            if (!base64IMAPChars[buf[i]]) { // Base64 ended.
                if (i == lastI && buf[i] == minusChar) { // "&-" -> "&"
                    res += "&";
                } else {
                    var b64str = base64Accum + this.iconv.decode(buf.slice(lastI, i), "ascii").replace(/,/g, '/');
                    res += this.iconv.decode(Buffer.from(b64str, 'base64'), "utf16-be");
                }

                if (buf[i] != minusChar) // Minus may be absorbed after base64.
                    i--;

                lastI = i+1;
                inBase64 = false;
                base64Accum = '';
            }
        }
    }

    if (!inBase64) {
        res += this.iconv.decode(buf.slice(lastI), "ascii"); // Write direct chars.
    } else {
        var b64str = base64Accum + this.iconv.decode(buf.slice(lastI), "ascii").replace(/,/g, '/');

        var canBeDecoded = b64str.length - (b64str.length % 8); // Minimal chunk: 2 quads -> 2x3 bytes -> 3 chars.
        base64Accum = b64str.slice(canBeDecoded); // The rest will be decoded in future.
        b64str = b64str.slice(0, canBeDecoded);

        res += this.iconv.decode(Buffer.from(b64str, 'base64'), "utf16-be");
    }

    this.inBase64 = inBase64;
    this.base64Accum = base64Accum;

    return res;
}

Utf7IMAPDecoder.prototype.end = function() {
    var res = "";
    if (this.inBase64 && this.base64Accum.length > 0)
        res = this.iconv.decode(Buffer.from(this.base64Accum, 'base64'), "utf16-be");

    this.inBase64 = false;
    this.base64Accum = '';
    return res;
}




/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/iconv-lite/lib/bom-handling.js":
/*!*********************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/iconv-lite/lib/bom-handling.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


var BOMChar = '\uFEFF';

exports.PrependBOM = PrependBOMWrapper
function PrependBOMWrapper(encoder, options) {
    this.encoder = encoder;
    this.addBOM = true;
}

PrependBOMWrapper.prototype.write = function(str) {
    if (this.addBOM) {
        str = BOMChar + str;
        this.addBOM = false;
    }

    return this.encoder.write(str);
}

PrependBOMWrapper.prototype.end = function() {
    return this.encoder.end();
}


//------------------------------------------------------------------------------

exports.StripBOM = StripBOMWrapper;
function StripBOMWrapper(decoder, options) {
    this.decoder = decoder;
    this.pass = false;
    this.options = options || {};
}

StripBOMWrapper.prototype.write = function(buf) {
    var res = this.decoder.write(buf);
    if (this.pass || !res)
        return res;

    if (res[0] === BOMChar) {
        res = res.slice(1);
        if (typeof this.options.stripBOM === 'function')
            this.options.stripBOM();
    }

    this.pass = true;
    return res;
}

StripBOMWrapper.prototype.end = function() {
    return this.decoder.end();
}



/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/iconv-lite/lib/index.js":
/*!**************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/iconv-lite/lib/index.js ***!
  \**************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var Buffer = (__webpack_require__(/*! safer-buffer */ "../node_modules/safer-buffer/safer.js").Buffer);

var bomHandling = __webpack_require__(/*! ./bom-handling */ "../node_modules/@theia/editor/node_modules/iconv-lite/lib/bom-handling.js"),
    iconv = module.exports;

// All codecs and aliases are kept here, keyed by encoding name/alias.
// They are lazy loaded in `iconv.getCodec` from `encodings/index.js`.
iconv.encodings = null;

// Characters emitted in case of error.
iconv.defaultCharUnicode = '�';
iconv.defaultCharSingleByte = '?';

// Public API.
iconv.encode = function encode(str, encoding, options) {
    str = "" + (str || ""); // Ensure string.

    var encoder = iconv.getEncoder(encoding, options);

    var res = encoder.write(str);
    var trail = encoder.end();
    
    return (trail && trail.length > 0) ? Buffer.concat([res, trail]) : res;
}

iconv.decode = function decode(buf, encoding, options) {
    if (typeof buf === 'string') {
        if (!iconv.skipDecodeWarning) {
            console.error('Iconv-lite warning: decode()-ing strings is deprecated. Refer to https://github.com/ashtuchkin/iconv-lite/wiki/Use-Buffers-when-decoding');
            iconv.skipDecodeWarning = true;
        }

        buf = Buffer.from("" + (buf || ""), "binary"); // Ensure buffer.
    }

    var decoder = iconv.getDecoder(encoding, options);

    var res = decoder.write(buf);
    var trail = decoder.end();

    return trail ? (res + trail) : res;
}

iconv.encodingExists = function encodingExists(enc) {
    try {
        iconv.getCodec(enc);
        return true;
    } catch (e) {
        return false;
    }
}

// Legacy aliases to convert functions
iconv.toEncoding = iconv.encode;
iconv.fromEncoding = iconv.decode;

// Search for a codec in iconv.encodings. Cache codec data in iconv._codecDataCache.
iconv._codecDataCache = {};
iconv.getCodec = function getCodec(encoding) {
    if (!iconv.encodings)
        iconv.encodings = __webpack_require__(/*! ../encodings */ "../node_modules/@theia/editor/node_modules/iconv-lite/encodings/index.js"); // Lazy load all encoding definitions.
    
    // Canonicalize encoding name: strip all non-alphanumeric chars and appended year.
    var enc = iconv._canonicalizeEncoding(encoding);

    // Traverse iconv.encodings to find actual codec.
    var codecOptions = {};
    while (true) {
        var codec = iconv._codecDataCache[enc];
        if (codec)
            return codec;

        var codecDef = iconv.encodings[enc];

        switch (typeof codecDef) {
            case "string": // Direct alias to other encoding.
                enc = codecDef;
                break;

            case "object": // Alias with options. Can be layered.
                for (var key in codecDef)
                    codecOptions[key] = codecDef[key];

                if (!codecOptions.encodingName)
                    codecOptions.encodingName = enc;
                
                enc = codecDef.type;
                break;

            case "function": // Codec itself.
                if (!codecOptions.encodingName)
                    codecOptions.encodingName = enc;

                // The codec function must load all tables and return object with .encoder and .decoder methods.
                // It'll be called only once (for each different options object).
                codec = new codecDef(codecOptions, iconv);

                iconv._codecDataCache[codecOptions.encodingName] = codec; // Save it to be reused later.
                return codec;

            default:
                throw new Error("Encoding not recognized: '" + encoding + "' (searched as: '"+enc+"')");
        }
    }
}

iconv._canonicalizeEncoding = function(encoding) {
    // Canonicalize encoding name: strip all non-alphanumeric chars and appended year.
    return (''+encoding).toLowerCase().replace(/:\d{4}$|[^0-9a-z]/g, "");
}

iconv.getEncoder = function getEncoder(encoding, options) {
    var codec = iconv.getCodec(encoding),
        encoder = new codec.encoder(options, codec);

    if (codec.bomAware && options && options.addBOM)
        encoder = new bomHandling.PrependBOM(encoder, options);

    return encoder;
}

iconv.getDecoder = function getDecoder(encoding, options) {
    var codec = iconv.getCodec(encoding),
        decoder = new codec.decoder(options, codec);

    if (codec.bomAware && !(options && options.stripBOM === false))
        decoder = new bomHandling.StripBOM(decoder, options);

    return decoder;
}

// Streaming API
// NOTE: Streaming API naturally depends on 'stream' module from Node.js. Unfortunately in browser environments this module can add
// up to 100Kb to the output bundle. To avoid unnecessary code bloat, we don't enable Streaming API in browser by default.
// If you would like to enable it explicitly, please add the following code to your app:
// > iconv.enableStreamingAPI(require('stream'));
iconv.enableStreamingAPI = function enableStreamingAPI(stream_module) {
    if (iconv.supportsStreams)
        return;

    // Dependency-inject stream module to create IconvLite stream classes.
    var streams = __webpack_require__(/*! ./streams */ "../node_modules/@theia/editor/node_modules/iconv-lite/lib/streams.js")(stream_module);

    // Not public API yet, but expose the stream classes.
    iconv.IconvLiteEncoderStream = streams.IconvLiteEncoderStream;
    iconv.IconvLiteDecoderStream = streams.IconvLiteDecoderStream;

    // Streaming API.
    iconv.encodeStream = function encodeStream(encoding, options) {
        return new iconv.IconvLiteEncoderStream(iconv.getEncoder(encoding, options), options);
    }

    iconv.decodeStream = function decodeStream(encoding, options) {
        return new iconv.IconvLiteDecoderStream(iconv.getDecoder(encoding, options), options);
    }

    iconv.supportsStreams = true;
}

// Enable Streaming API automatically if 'stream' module is available and non-empty (the majority of environments).
var stream_module;
try {
    stream_module = __webpack_require__(/*! stream */ "?cd4a");
} catch (e) {}

if (stream_module && stream_module.Transform) {
    iconv.enableStreamingAPI(stream_module);

} else {
    // In rare cases where 'stream' module is not available by default, throw a helpful exception.
    iconv.encodeStream = iconv.decodeStream = function() {
        throw new Error("iconv-lite Streaming API is not enabled. Use iconv.enableStreamingAPI(require('stream')); to enable it.");
    };
}

if (false) {}


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/iconv-lite/lib/streams.js":
/*!****************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/iconv-lite/lib/streams.js ***!
  \****************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var Buffer = (__webpack_require__(/*! safer-buffer */ "../node_modules/safer-buffer/safer.js").Buffer);

// NOTE: Due to 'stream' module being pretty large (~100Kb, significant in browser environments), 
// we opt to dependency-inject it instead of creating a hard dependency.
module.exports = function(stream_module) {
    var Transform = stream_module.Transform;

    // == Encoder stream =======================================================

    function IconvLiteEncoderStream(conv, options) {
        this.conv = conv;
        options = options || {};
        options.decodeStrings = false; // We accept only strings, so we don't need to decode them.
        Transform.call(this, options);
    }

    IconvLiteEncoderStream.prototype = Object.create(Transform.prototype, {
        constructor: { value: IconvLiteEncoderStream }
    });

    IconvLiteEncoderStream.prototype._transform = function(chunk, encoding, done) {
        if (typeof chunk != 'string')
            return done(new Error("Iconv encoding stream needs strings as its input."));
        try {
            var res = this.conv.write(chunk);
            if (res && res.length) this.push(res);
            done();
        }
        catch (e) {
            done(e);
        }
    }

    IconvLiteEncoderStream.prototype._flush = function(done) {
        try {
            var res = this.conv.end();
            if (res && res.length) this.push(res);
            done();
        }
        catch (e) {
            done(e);
        }
    }

    IconvLiteEncoderStream.prototype.collect = function(cb) {
        var chunks = [];
        this.on('error', cb);
        this.on('data', function(chunk) { chunks.push(chunk); });
        this.on('end', function() {
            cb(null, Buffer.concat(chunks));
        });
        return this;
    }


    // == Decoder stream =======================================================

    function IconvLiteDecoderStream(conv, options) {
        this.conv = conv;
        options = options || {};
        options.encoding = this.encoding = 'utf8'; // We output strings.
        Transform.call(this, options);
    }

    IconvLiteDecoderStream.prototype = Object.create(Transform.prototype, {
        constructor: { value: IconvLiteDecoderStream }
    });

    IconvLiteDecoderStream.prototype._transform = function(chunk, encoding, done) {
        if (!Buffer.isBuffer(chunk) && !(chunk instanceof Uint8Array))
            return done(new Error("Iconv decoding stream needs buffers as its input."));
        try {
            var res = this.conv.write(chunk);
            if (res && res.length) this.push(res, this.encoding);
            done();
        }
        catch (e) {
            done(e);
        }
    }

    IconvLiteDecoderStream.prototype._flush = function(done) {
        try {
            var res = this.conv.end();
            if (res && res.length) this.push(res, this.encoding);                
            done();
        }
        catch (e) {
            done(e);
        }
    }

    IconvLiteDecoderStream.prototype.collect = function(cb) {
        var res = '';
        this.on('error', cb);
        this.on('data', function(chunk) { res += chunk; });
        this.on('end', function() {
            cb(null, res);
        });
        return this;
    }

    return {
        IconvLiteEncoderStream: IconvLiteEncoderStream,
        IconvLiteDecoderStream: IconvLiteDecoderStream,
    };
};


/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/uuid/dist/commonjs-browser/index.js":
/*!**************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/uuid/dist/commonjs-browser/index.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
Object.defineProperty(exports, "NIL", ({
  enumerable: true,
  get: function get() {
    return _nil.default;
  }
}));
Object.defineProperty(exports, "parse", ({
  enumerable: true,
  get: function get() {
    return _parse.default;
  }
}));
Object.defineProperty(exports, "stringify", ({
  enumerable: true,
  get: function get() {
    return _stringify.default;
  }
}));
Object.defineProperty(exports, "v1", ({
  enumerable: true,
  get: function get() {
    return _v.default;
  }
}));
Object.defineProperty(exports, "v3", ({
  enumerable: true,
  get: function get() {
    return _v2.default;
  }
}));
Object.defineProperty(exports, "v4", ({
  enumerable: true,
  get: function get() {
    return _v3.default;
  }
}));
Object.defineProperty(exports, "v5", ({
  enumerable: true,
  get: function get() {
    return _v4.default;
  }
}));
Object.defineProperty(exports, "validate", ({
  enumerable: true,
  get: function get() {
    return _validate.default;
  }
}));
Object.defineProperty(exports, "version", ({
  enumerable: true,
  get: function get() {
    return _version.default;
  }
}));

var _v = _interopRequireDefault(__webpack_require__(/*! ./v1.js */ "../node_modules/@theia/editor/node_modules/uuid/dist/commonjs-browser/v1.js"));

var _v2 = _interopRequireDefault(__webpack_require__(/*! ./v3.js */ "../node_modules/@theia/editor/node_modules/uuid/dist/commonjs-browser/v3.js"));

var _v3 = _interopRequireDefault(__webpack_require__(/*! ./v4.js */ "../node_modules/@theia/editor/node_modules/uuid/dist/commonjs-browser/v4.js"));

var _v4 = _interopRequireDefault(__webpack_require__(/*! ./v5.js */ "../node_modules/@theia/editor/node_modules/uuid/dist/commonjs-browser/v5.js"));

var _nil = _interopRequireDefault(__webpack_require__(/*! ./nil.js */ "../node_modules/@theia/editor/node_modules/uuid/dist/commonjs-browser/nil.js"));

var _version = _interopRequireDefault(__webpack_require__(/*! ./version.js */ "../node_modules/@theia/editor/node_modules/uuid/dist/commonjs-browser/version.js"));

var _validate = _interopRequireDefault(__webpack_require__(/*! ./validate.js */ "../node_modules/@theia/editor/node_modules/uuid/dist/commonjs-browser/validate.js"));

var _stringify = _interopRequireDefault(__webpack_require__(/*! ./stringify.js */ "../node_modules/@theia/editor/node_modules/uuid/dist/commonjs-browser/stringify.js"));

var _parse = _interopRequireDefault(__webpack_require__(/*! ./parse.js */ "../node_modules/@theia/editor/node_modules/uuid/dist/commonjs-browser/parse.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/uuid/dist/commonjs-browser/md5.js":
/*!************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/uuid/dist/commonjs-browser/md5.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

/*
 * Browser-compatible JavaScript MD5
 *
 * Modification of JavaScript MD5
 * https://github.com/blueimp/JavaScript-MD5
 *
 * Copyright 2011, Sebastian Tschan
 * https://blueimp.net
 *
 * Licensed under the MIT license:
 * https://opensource.org/licenses/MIT
 *
 * Based on
 * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message
 * Digest Algorithm, as defined in RFC 1321.
 * Version 2.2 Copyright (C) Paul Johnston 1999 - 2009
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for more info.
 */
function md5(bytes) {
  if (typeof bytes === 'string') {
    const msg = unescape(encodeURIComponent(bytes)); // UTF8 escape

    bytes = new Uint8Array(msg.length);

    for (let i = 0; i < msg.length; ++i) {
      bytes[i] = msg.charCodeAt(i);
    }
  }

  return md5ToHexEncodedArray(wordsToMd5(bytesToWords(bytes), bytes.length * 8));
}
/*
 * Convert an array of little-endian words to an array of bytes
 */


function md5ToHexEncodedArray(input) {
  const output = [];
  const length32 = input.length * 32;
  const hexTab = '0123456789abcdef';

  for (let i = 0; i < length32; i += 8) {
    const x = input[i >> 5] >>> i % 32 & 0xff;
    const hex = parseInt(hexTab.charAt(x >>> 4 & 0x0f) + hexTab.charAt(x & 0x0f), 16);
    output.push(hex);
  }

  return output;
}
/**
 * Calculate output length with padding and bit length
 */


function getOutputLength(inputLength8) {
  return (inputLength8 + 64 >>> 9 << 4) + 14 + 1;
}
/*
 * Calculate the MD5 of an array of little-endian words, and a bit length.
 */


function wordsToMd5(x, len) {
  /* append padding */
  x[len >> 5] |= 0x80 << len % 32;
  x[getOutputLength(len) - 1] = len;
  let a = 1732584193;
  let b = -271733879;
  let c = -1732584194;
  let d = 271733878;

  for (let i = 0; i < x.length; i += 16) {
    const olda = a;
    const oldb = b;
    const oldc = c;
    const oldd = d;
    a = md5ff(a, b, c, d, x[i], 7, -680876936);
    d = md5ff(d, a, b, c, x[i + 1], 12, -389564586);
    c = md5ff(c, d, a, b, x[i + 2], 17, 606105819);
    b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330);
    a = md5ff(a, b, c, d, x[i + 4], 7, -176418897);
    d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426);
    c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341);
    b = md5ff(b, c, d, a, x[i + 7], 22, -45705983);
    a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416);
    d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417);
    c = md5ff(c, d, a, b, x[i + 10], 17, -42063);
    b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162);
    a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682);
    d = md5ff(d, a, b, c, x[i + 13], 12, -40341101);
    c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290);
    b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329);
    a = md5gg(a, b, c, d, x[i + 1], 5, -165796510);
    d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632);
    c = md5gg(c, d, a, b, x[i + 11], 14, 643717713);
    b = md5gg(b, c, d, a, x[i], 20, -373897302);
    a = md5gg(a, b, c, d, x[i + 5], 5, -701558691);
    d = md5gg(d, a, b, c, x[i + 10], 9, 38016083);
    c = md5gg(c, d, a, b, x[i + 15], 14, -660478335);
    b = md5gg(b, c, d, a, x[i + 4], 20, -405537848);
    a = md5gg(a, b, c, d, x[i + 9], 5, 568446438);
    d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690);
    c = md5gg(c, d, a, b, x[i + 3], 14, -187363961);
    b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501);
    a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467);
    d = md5gg(d, a, b, c, x[i + 2], 9, -51403784);
    c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473);
    b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734);
    a = md5hh(a, b, c, d, x[i + 5], 4, -378558);
    d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463);
    c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562);
    b = md5hh(b, c, d, a, x[i + 14], 23, -35309556);
    a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060);
    d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353);
    c = md5hh(c, d, a, b, x[i + 7], 16, -155497632);
    b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640);
    a = md5hh(a, b, c, d, x[i + 13], 4, 681279174);
    d = md5hh(d, a, b, c, x[i], 11, -358537222);
    c = md5hh(c, d, a, b, x[i + 3], 16, -722521979);
    b = md5hh(b, c, d, a, x[i + 6], 23, 76029189);
    a = md5hh(a, b, c, d, x[i + 9], 4, -640364487);
    d = md5hh(d, a, b, c, x[i + 12], 11, -421815835);
    c = md5hh(c, d, a, b, x[i + 15], 16, 530742520);
    b = md5hh(b, c, d, a, x[i + 2], 23, -995338651);
    a = md5ii(a, b, c, d, x[i], 6, -198630844);
    d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415);
    c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905);
    b = md5ii(b, c, d, a, x[i + 5], 21, -57434055);
    a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571);
    d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606);
    c = md5ii(c, d, a, b, x[i + 10], 15, -1051523);
    b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799);
    a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359);
    d = md5ii(d, a, b, c, x[i + 15], 10, -30611744);
    c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380);
    b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649);
    a = md5ii(a, b, c, d, x[i + 4], 6, -145523070);
    d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379);
    c = md5ii(c, d, a, b, x[i + 2], 15, 718787259);
    b = md5ii(b, c, d, a, x[i + 9], 21, -343485551);
    a = safeAdd(a, olda);
    b = safeAdd(b, oldb);
    c = safeAdd(c, oldc);
    d = safeAdd(d, oldd);
  }

  return [a, b, c, d];
}
/*
 * Convert an array bytes to an array of little-endian words
 * Characters >255 have their high-byte silently ignored.
 */


function bytesToWords(input) {
  if (input.length === 0) {
    return [];
  }

  const length8 = input.length * 8;
  const output = new Uint32Array(getOutputLength(length8));

  for (let i = 0; i < length8; i += 8) {
    output[i >> 5] |= (input[i / 8] & 0xff) << i % 32;
  }

  return output;
}
/*
 * Add integers, wrapping at 2^32. This uses 16-bit operations internally
 * to work around bugs in some JS interpreters.
 */


function safeAdd(x, y) {
  const lsw = (x & 0xffff) + (y & 0xffff);
  const msw = (x >> 16) + (y >> 16) + (lsw >> 16);
  return msw << 16 | lsw & 0xffff;
}
/*
 * Bitwise rotate a 32-bit number to the left.
 */


function bitRotateLeft(num, cnt) {
  return num << cnt | num >>> 32 - cnt;
}
/*
 * These functions implement the four basic operations the algorithm uses.
 */


function md5cmn(q, a, b, x, s, t) {
  return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b);
}

function md5ff(a, b, c, d, x, s, t) {
  return md5cmn(b & c | ~b & d, a, b, x, s, t);
}

function md5gg(a, b, c, d, x, s, t) {
  return md5cmn(b & d | c & ~d, a, b, x, s, t);
}

function md5hh(a, b, c, d, x, s, t) {
  return md5cmn(b ^ c ^ d, a, b, x, s, t);
}

function md5ii(a, b, c, d, x, s, t) {
  return md5cmn(c ^ (b | ~d), a, b, x, s, t);
}

var _default = md5;
exports["default"] = _default;

/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/uuid/dist/commonjs-browser/native.js":
/*!***************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/uuid/dist/commonjs-browser/native.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
const randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);
var _default = {
  randomUUID
};
exports["default"] = _default;

/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/uuid/dist/commonjs-browser/nil.js":
/*!************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/uuid/dist/commonjs-browser/nil.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
var _default = '00000000-0000-0000-0000-000000000000';
exports["default"] = _default;

/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/uuid/dist/commonjs-browser/parse.js":
/*!**************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/uuid/dist/commonjs-browser/parse.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _validate = _interopRequireDefault(__webpack_require__(/*! ./validate.js */ "../node_modules/@theia/editor/node_modules/uuid/dist/commonjs-browser/validate.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function parse(uuid) {
  if (!(0, _validate.default)(uuid)) {
    throw TypeError('Invalid UUID');
  }

  let v;
  const arr = new Uint8Array(16); // Parse ########-....-....-....-............

  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;
  arr[1] = v >>> 16 & 0xff;
  arr[2] = v >>> 8 & 0xff;
  arr[3] = v & 0xff; // Parse ........-####-....-....-............

  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;
  arr[5] = v & 0xff; // Parse ........-....-####-....-............

  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;
  arr[7] = v & 0xff; // Parse ........-....-....-####-............

  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;
  arr[9] = v & 0xff; // Parse ........-....-....-....-############
  // (Use "/" to avoid 32-bit truncation when bit-shifting high-order bytes)

  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 0x10000000000 & 0xff;
  arr[11] = v / 0x100000000 & 0xff;
  arr[12] = v >>> 24 & 0xff;
  arr[13] = v >>> 16 & 0xff;
  arr[14] = v >>> 8 & 0xff;
  arr[15] = v & 0xff;
  return arr;
}

var _default = parse;
exports["default"] = _default;

/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/uuid/dist/commonjs-browser/regex.js":
/*!**************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/uuid/dist/commonjs-browser/regex.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
var _default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
exports["default"] = _default;

/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/uuid/dist/commonjs-browser/rng.js":
/*!************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/uuid/dist/commonjs-browser/rng.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = rng;
// Unique ID creation requires a high quality random # generator. In the browser we therefore
// require the crypto API and do not support built-in fallback to lower quality random number
// generators (like Math.random()).
let getRandomValues;
const rnds8 = new Uint8Array(16);

function rng() {
  // lazy load so that environments that need to polyfill have a chance to do so
  if (!getRandomValues) {
    // getRandomValues needs to be invoked in a context where "this" is a Crypto implementation.
    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);

    if (!getRandomValues) {
      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');
    }
  }

  return getRandomValues(rnds8);
}

/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/uuid/dist/commonjs-browser/sha1.js":
/*!*************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/uuid/dist/commonjs-browser/sha1.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

// Adapted from Chris Veness' SHA1 code at
// http://www.movable-type.co.uk/scripts/sha1.html
function f(s, x, y, z) {
  switch (s) {
    case 0:
      return x & y ^ ~x & z;

    case 1:
      return x ^ y ^ z;

    case 2:
      return x & y ^ x & z ^ y & z;

    case 3:
      return x ^ y ^ z;
  }
}

function ROTL(x, n) {
  return x << n | x >>> 32 - n;
}

function sha1(bytes) {
  const K = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6];
  const H = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];

  if (typeof bytes === 'string') {
    const msg = unescape(encodeURIComponent(bytes)); // UTF8 escape

    bytes = [];

    for (let i = 0; i < msg.length; ++i) {
      bytes.push(msg.charCodeAt(i));
    }
  } else if (!Array.isArray(bytes)) {
    // Convert Array-like to Array
    bytes = Array.prototype.slice.call(bytes);
  }

  bytes.push(0x80);
  const l = bytes.length / 4 + 2;
  const N = Math.ceil(l / 16);
  const M = new Array(N);

  for (let i = 0; i < N; ++i) {
    const arr = new Uint32Array(16);

    for (let j = 0; j < 16; ++j) {
      arr[j] = bytes[i * 64 + j * 4] << 24 | bytes[i * 64 + j * 4 + 1] << 16 | bytes[i * 64 + j * 4 + 2] << 8 | bytes[i * 64 + j * 4 + 3];
    }

    M[i] = arr;
  }

  M[N - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);
  M[N - 1][14] = Math.floor(M[N - 1][14]);
  M[N - 1][15] = (bytes.length - 1) * 8 & 0xffffffff;

  for (let i = 0; i < N; ++i) {
    const W = new Uint32Array(80);

    for (let t = 0; t < 16; ++t) {
      W[t] = M[i][t];
    }

    for (let t = 16; t < 80; ++t) {
      W[t] = ROTL(W[t - 3] ^ W[t - 8] ^ W[t - 14] ^ W[t - 16], 1);
    }

    let a = H[0];
    let b = H[1];
    let c = H[2];
    let d = H[3];
    let e = H[4];

    for (let t = 0; t < 80; ++t) {
      const s = Math.floor(t / 20);
      const T = ROTL(a, 5) + f(s, b, c, d) + e + K[s] + W[t] >>> 0;
      e = d;
      d = c;
      c = ROTL(b, 30) >>> 0;
      b = a;
      a = T;
    }

    H[0] = H[0] + a >>> 0;
    H[1] = H[1] + b >>> 0;
    H[2] = H[2] + c >>> 0;
    H[3] = H[3] + d >>> 0;
    H[4] = H[4] + e >>> 0;
  }

  return [H[0] >> 24 & 0xff, H[0] >> 16 & 0xff, H[0] >> 8 & 0xff, H[0] & 0xff, H[1] >> 24 & 0xff, H[1] >> 16 & 0xff, H[1] >> 8 & 0xff, H[1] & 0xff, H[2] >> 24 & 0xff, H[2] >> 16 & 0xff, H[2] >> 8 & 0xff, H[2] & 0xff, H[3] >> 24 & 0xff, H[3] >> 16 & 0xff, H[3] >> 8 & 0xff, H[3] & 0xff, H[4] >> 24 & 0xff, H[4] >> 16 & 0xff, H[4] >> 8 & 0xff, H[4] & 0xff];
}

var _default = sha1;
exports["default"] = _default;

/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/uuid/dist/commonjs-browser/stringify.js":
/*!******************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/uuid/dist/commonjs-browser/stringify.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
exports.unsafeStringify = unsafeStringify;

var _validate = _interopRequireDefault(__webpack_require__(/*! ./validate.js */ "../node_modules/@theia/editor/node_modules/uuid/dist/commonjs-browser/validate.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */
const byteToHex = [];

for (let i = 0; i < 256; ++i) {
  byteToHex.push((i + 0x100).toString(16).slice(1));
}

function unsafeStringify(arr, offset = 0) {
  // Note: Be careful editing this code!  It's been tuned for performance
  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434
  return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];
}

function stringify(arr, offset = 0) {
  const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one
  // of the following:
  // - One or more input array values don't map to a hex octet (leading to
  // "undefined" in the uuid)
  // - Invalid input values for the RFC `version` or `variant` fields

  if (!(0, _validate.default)(uuid)) {
    throw TypeError('Stringified UUID is invalid');
  }

  return uuid;
}

var _default = stringify;
exports["default"] = _default;

/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/uuid/dist/commonjs-browser/v1.js":
/*!***********************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/uuid/dist/commonjs-browser/v1.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _rng = _interopRequireDefault(__webpack_require__(/*! ./rng.js */ "../node_modules/@theia/editor/node_modules/uuid/dist/commonjs-browser/rng.js"));

var _stringify = __webpack_require__(/*! ./stringify.js */ "../node_modules/@theia/editor/node_modules/uuid/dist/commonjs-browser/stringify.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// **`v1()` - Generate time-based UUID**
//
// Inspired by https://github.com/LiosK/UUID.js
// and http://docs.python.org/library/uuid.html
let _nodeId;

let _clockseq; // Previous uuid creation time


let _lastMSecs = 0;
let _lastNSecs = 0; // See https://github.com/uuidjs/uuid for API details

function v1(options, buf, offset) {
  let i = buf && offset || 0;
  const b = buf || new Array(16);
  options = options || {};
  let node = options.node || _nodeId;
  let clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq; // node and clockseq need to be initialized to random values if they're not
  // specified.  We do this lazily to minimize issues related to insufficient
  // system entropy.  See #189

  if (node == null || clockseq == null) {
    const seedBytes = options.random || (options.rng || _rng.default)();

    if (node == null) {
      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)
      node = _nodeId = [seedBytes[0] | 0x01, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];
    }

    if (clockseq == null) {
      // Per 4.2.2, randomize (14 bit) clockseq
      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;
    }
  } // UUID timestamps are 100 nano-second units since the Gregorian epoch,
  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so
  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'
  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.


  let msecs = options.msecs !== undefined ? options.msecs : Date.now(); // Per 4.2.1.2, use count of uuid's generated during the current clock
  // cycle to simulate higher resolution clock

  let nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1; // Time since last uuid creation (in msecs)

  const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000; // Per 4.2.1.2, Bump clockseq on clock regression

  if (dt < 0 && options.clockseq === undefined) {
    clockseq = clockseq + 1 & 0x3fff;
  } // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new
  // time interval


  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {
    nsecs = 0;
  } // Per 4.2.1.2 Throw error if too many uuids are requested


  if (nsecs >= 10000) {
    throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
  }

  _lastMSecs = msecs;
  _lastNSecs = nsecs;
  _clockseq = clockseq; // Per 4.1.4 - Convert from unix epoch to Gregorian epoch

  msecs += 12219292800000; // `time_low`

  const tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
  b[i++] = tl >>> 24 & 0xff;
  b[i++] = tl >>> 16 & 0xff;
  b[i++] = tl >>> 8 & 0xff;
  b[i++] = tl & 0xff; // `time_mid`

  const tmh = msecs / 0x100000000 * 10000 & 0xfffffff;
  b[i++] = tmh >>> 8 & 0xff;
  b[i++] = tmh & 0xff; // `time_high_and_version`

  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version

  b[i++] = tmh >>> 16 & 0xff; // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)

  b[i++] = clockseq >>> 8 | 0x80; // `clock_seq_low`

  b[i++] = clockseq & 0xff; // `node`

  for (let n = 0; n < 6; ++n) {
    b[i + n] = node[n];
  }

  return buf || (0, _stringify.unsafeStringify)(b);
}

var _default = v1;
exports["default"] = _default;

/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/uuid/dist/commonjs-browser/v3.js":
/*!***********************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/uuid/dist/commonjs-browser/v3.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _v = _interopRequireDefault(__webpack_require__(/*! ./v35.js */ "../node_modules/@theia/editor/node_modules/uuid/dist/commonjs-browser/v35.js"));

var _md = _interopRequireDefault(__webpack_require__(/*! ./md5.js */ "../node_modules/@theia/editor/node_modules/uuid/dist/commonjs-browser/md5.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const v3 = (0, _v.default)('v3', 0x30, _md.default);
var _default = v3;
exports["default"] = _default;

/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/uuid/dist/commonjs-browser/v35.js":
/*!************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/uuid/dist/commonjs-browser/v35.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.URL = exports.DNS = void 0;
exports["default"] = v35;

var _stringify = __webpack_require__(/*! ./stringify.js */ "../node_modules/@theia/editor/node_modules/uuid/dist/commonjs-browser/stringify.js");

var _parse = _interopRequireDefault(__webpack_require__(/*! ./parse.js */ "../node_modules/@theia/editor/node_modules/uuid/dist/commonjs-browser/parse.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function stringToBytes(str) {
  str = unescape(encodeURIComponent(str)); // UTF8 escape

  const bytes = [];

  for (let i = 0; i < str.length; ++i) {
    bytes.push(str.charCodeAt(i));
  }

  return bytes;
}

const DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';
exports.DNS = DNS;
const URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';
exports.URL = URL;

function v35(name, version, hashfunc) {
  function generateUUID(value, namespace, buf, offset) {
    var _namespace;

    if (typeof value === 'string') {
      value = stringToBytes(value);
    }

    if (typeof namespace === 'string') {
      namespace = (0, _parse.default)(namespace);
    }

    if (((_namespace = namespace) === null || _namespace === void 0 ? void 0 : _namespace.length) !== 16) {
      throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');
    } // Compute hash of namespace and value, Per 4.3
    // Future: Use spread syntax when supported on all platforms, e.g. `bytes =
    // hashfunc([...namespace, ... value])`


    let bytes = new Uint8Array(16 + value.length);
    bytes.set(namespace);
    bytes.set(value, namespace.length);
    bytes = hashfunc(bytes);
    bytes[6] = bytes[6] & 0x0f | version;
    bytes[8] = bytes[8] & 0x3f | 0x80;

    if (buf) {
      offset = offset || 0;

      for (let i = 0; i < 16; ++i) {
        buf[offset + i] = bytes[i];
      }

      return buf;
    }

    return (0, _stringify.unsafeStringify)(bytes);
  } // Function#name is not settable on some platforms (#270)


  try {
    generateUUID.name = name; // eslint-disable-next-line no-empty
  } catch (err) {} // For CommonJS default export support


  generateUUID.DNS = DNS;
  generateUUID.URL = URL;
  return generateUUID;
}

/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/uuid/dist/commonjs-browser/v4.js":
/*!***********************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/uuid/dist/commonjs-browser/v4.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _native = _interopRequireDefault(__webpack_require__(/*! ./native.js */ "../node_modules/@theia/editor/node_modules/uuid/dist/commonjs-browser/native.js"));

var _rng = _interopRequireDefault(__webpack_require__(/*! ./rng.js */ "../node_modules/@theia/editor/node_modules/uuid/dist/commonjs-browser/rng.js"));

var _stringify = __webpack_require__(/*! ./stringify.js */ "../node_modules/@theia/editor/node_modules/uuid/dist/commonjs-browser/stringify.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function v4(options, buf, offset) {
  if (_native.default.randomUUID && !buf && !options) {
    return _native.default.randomUUID();
  }

  options = options || {};

  const rnds = options.random || (options.rng || _rng.default)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`


  rnds[6] = rnds[6] & 0x0f | 0x40;
  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided

  if (buf) {
    offset = offset || 0;

    for (let i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }

    return buf;
  }

  return (0, _stringify.unsafeStringify)(rnds);
}

var _default = v4;
exports["default"] = _default;

/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/uuid/dist/commonjs-browser/v5.js":
/*!***********************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/uuid/dist/commonjs-browser/v5.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _v = _interopRequireDefault(__webpack_require__(/*! ./v35.js */ "../node_modules/@theia/editor/node_modules/uuid/dist/commonjs-browser/v35.js"));

var _sha = _interopRequireDefault(__webpack_require__(/*! ./sha1.js */ "../node_modules/@theia/editor/node_modules/uuid/dist/commonjs-browser/sha1.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const v5 = (0, _v.default)('v5', 0x50, _sha.default);
var _default = v5;
exports["default"] = _default;

/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/uuid/dist/commonjs-browser/validate.js":
/*!*****************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/uuid/dist/commonjs-browser/validate.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _regex = _interopRequireDefault(__webpack_require__(/*! ./regex.js */ "../node_modules/@theia/editor/node_modules/uuid/dist/commonjs-browser/regex.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function validate(uuid) {
  return typeof uuid === 'string' && _regex.default.test(uuid);
}

var _default = validate;
exports["default"] = _default;

/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/uuid/dist/commonjs-browser/version.js":
/*!****************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/uuid/dist/commonjs-browser/version.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _validate = _interopRequireDefault(__webpack_require__(/*! ./validate.js */ "../node_modules/@theia/editor/node_modules/uuid/dist/commonjs-browser/validate.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function version(uuid) {
  if (!(0, _validate.default)(uuid)) {
    throw TypeError('Invalid UUID');
  }

  return parseInt(uuid.slice(14, 15), 16);
}

var _default = version;
exports["default"] = _default;

/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/src/browser/style/hover-service.css":
/*!**************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/src/browser/style/hover-service.css ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../../../../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _css_loader_dist_cjs_js_hover_service_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !!../../../../../../../../css-loader/dist/cjs.js!./hover-service.css */ "../node_modules/css-loader/dist/cjs.js!../node_modules/@theia/editor/node_modules/@theia/core/src/browser/style/hover-service.css");

            

var options = {};

options.insert = "head";
options.singleton = false;

var update = _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_css_loader_dist_cjs_js_hover_service_css__WEBPACK_IMPORTED_MODULE_1__["default"], options);



/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_css_loader_dist_cjs_js_hover_service_css__WEBPACK_IMPORTED_MODULE_1__["default"].locals || {});

/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/src/browser/style/select-component.css":
/*!*****************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/src/browser/style/select-component.css ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../../../../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _css_loader_dist_cjs_js_select_component_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !!../../../../../../../../css-loader/dist/cjs.js!./select-component.css */ "../node_modules/css-loader/dist/cjs.js!../node_modules/@theia/editor/node_modules/@theia/core/src/browser/style/select-component.css");

            

var options = {};

options.insert = "head";
options.singleton = false;

var update = _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_css_loader_dist_cjs_js_select_component_css__WEBPACK_IMPORTED_MODULE_1__["default"], options);



/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_css_loader_dist_cjs_js_select_component_css__WEBPACK_IMPORTED_MODULE_1__["default"].locals || {});

/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/src/browser/tree/tree-compression/tree-compression.css":
/*!*********************************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/src/browser/tree/tree-compression/tree-compression.css ***!
  \*********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../../../../../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _css_loader_dist_cjs_js_tree_compression_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !!../../../../../../../../../css-loader/dist/cjs.js!./tree-compression.css */ "../node_modules/css-loader/dist/cjs.js!../node_modules/@theia/editor/node_modules/@theia/core/src/browser/tree/tree-compression/tree-compression.css");

            

var options = {};

options.insert = "head";
options.singleton = false;

var update = _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_css_loader_dist_cjs_js_tree_compression_css__WEBPACK_IMPORTED_MODULE_1__["default"], options);



/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_css_loader_dist_cjs_js_tree_compression_css__WEBPACK_IMPORTED_MODULE_1__["default"].locals || {});

/***/ }),

/***/ "../node_modules/@theia/editor/src/browser/language-status/editor-language-status.css":
/*!********************************************************************************************!*\
  !*** ../node_modules/@theia/editor/src/browser/language-status/editor-language-status.css ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _css_loader_dist_cjs_js_editor_language_status_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !!../../../../../css-loader/dist/cjs.js!./editor-language-status.css */ "../node_modules/css-loader/dist/cjs.js!../node_modules/@theia/editor/src/browser/language-status/editor-language-status.css");

            

var options = {};

options.insert = "head";
options.singleton = false;

var update = _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_css_loader_dist_cjs_js_editor_language_status_css__WEBPACK_IMPORTED_MODULE_1__["default"], options);



/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_css_loader_dist_cjs_js_editor_language_status_css__WEBPACK_IMPORTED_MODULE_1__["default"].locals || {});

/***/ }),

/***/ "../node_modules/@theia/editor/src/browser/style/index.css":
/*!*****************************************************************!*\
  !*** ../node_modules/@theia/editor/src/browser/style/index.css ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _css_loader_dist_cjs_js_index_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !!../../../../../css-loader/dist/cjs.js!./index.css */ "../node_modules/css-loader/dist/cjs.js!../node_modules/@theia/editor/src/browser/style/index.css");

            

var options = {};

options.insert = "head";
options.singleton = false;

var update = _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_css_loader_dist_cjs_js_index_css__WEBPACK_IMPORTED_MODULE_1__["default"], options);



/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_css_loader_dist_cjs_js_index_css__WEBPACK_IMPORTED_MODULE_1__["default"].locals || {});

/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/package.json":
/*!***************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/package.json ***!
  \***************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"name":"@theia/core","version":"1.48.3","description":"Theia is a cloud & desktop IDE framework implemented in TypeScript.","main":"lib/common/index.js","typings":"lib/common/index.d.ts","dependencies":{"@babel/runtime":"^7.10.0","@phosphor/algorithm":"1","@phosphor/commands":"1","@phosphor/coreutils":"1","@phosphor/domutils":"1","@phosphor/dragdrop":"1","@phosphor/messaging":"1","@phosphor/properties":"1","@phosphor/signaling":"1","@phosphor/virtualdom":"1","@phosphor/widgets":"1","@theia/application-package":"1.48.3","@theia/request":"1.48.3","@types/body-parser":"^1.16.4","@types/cookie":"^0.3.3","@types/dompurify":"^2.2.2","@types/express":"^4.16.0","@types/fs-extra":"^4.0.2","@types/lodash.debounce":"4.0.3","@types/lodash.throttle":"^4.1.3","@types/markdown-it":"^12.2.3","@types/react":"^18.0.15","@types/react-dom":"^18.0.6","@types/route-parser":"^0.1.1","@types/safer-buffer":"^2.1.0","@types/uuid":"^9.0.8","@types/ws":"^8.5.5","@types/yargs":"^15","@vscode/codicons":"*","ajv":"^6.5.3","async-mutex":"^0.4.0","body-parser":"^1.17.2","cookie":"^0.4.0","dompurify":"^2.2.9","drivelist":"^9.0.2","es6-promise":"^4.2.4","express":"^4.16.3","fast-json-stable-stringify":"^2.1.0","file-icons-js":"~1.0.3","font-awesome":"^4.7.0","fs-extra":"^4.0.2","fuzzy":"^0.1.3","http-proxy-agent":"^5.0.0","https-proxy-agent":"^5.0.0","iconv-lite":"^0.6.0","inversify":"^6.0.1","jschardet":"^2.1.1","keytar":"7.2.0","lodash.debounce":"^4.0.8","lodash.throttle":"^4.1.1","markdown-it":"^12.3.2","msgpackr":"^1.10.1","nsfw":"^2.2.4","p-debounce":"^2.1.0","perfect-scrollbar":"^1.3.0","react":"^18.2.0","react-dom":"^18.2.0","react-tooltip":"^4.2.21","react-virtuoso":"^2.17.0","reflect-metadata":"^0.1.10","route-parser":"^0.0.5","safer-buffer":"^2.1.2","socket.io":"^4.5.3","socket.io-client":"^4.5.3","tslib":"^2.6.2","uuid":"^9.0.1","vscode-languageserver-protocol":"^3.17.2","vscode-uri":"^2.1.1","ws":"^8.14.1","yargs":"^15.3.1"},"peerDependencies":{"@theia/electron":"*"},"peerDependenciesMeta":{"@theia/electron":{"optional":true}},"publishConfig":{"access":"public"},"theiaReExports":{"electron-shared":{"copy":"@theia/electron#shared"},"shared":{"export *":["@phosphor/algorithm","@phosphor/commands","@phosphor/coreutils","@phosphor/domutils","@phosphor/dragdrop","@phosphor/messaging","@phosphor/properties","@phosphor/signaling","@phosphor/virtualdom","@phosphor/widgets","@theia/application-package","@theia/application-package/lib/api","@theia/application-package/lib/environment","@theia/request","@theia/request/lib/proxy","@theia/request/lib/node-request-service","fs-extra","fuzzy","inversify","react-dom","react-dom/client","react-virtuoso","vscode-languageserver-protocol","vscode-uri"],"export =":["dompurify as DOMPurify","express","lodash.debounce as debounce","lodash.throttle as throttle","nsfw","markdown-it as markdownit","react as React","ws as WebSocket","yargs"]}},"theiaExtensions":[{"frontendPreload":"lib/browser/preload/preload-module","preload":"lib/electron-browser/preload"},{"frontendOnlyPreload":"lib/browser-only/preload/frontend-only-preload-module"},{"frontend":"lib/browser/i18n/i18n-frontend-module","frontendOnly":"lib/browser-only/i18n/i18n-frontend-only-module","backend":"lib/node/i18n/i18n-backend-module"},{"frontend":"lib/browser/menu/browser-menu-module","frontendElectron":"lib/electron-browser/menu/electron-menu-module"},{"frontend":"lib/browser/window/browser-window-module","frontendElectron":"lib/electron-browser/window/electron-window-module"},{"frontend":"lib/browser/keyboard/browser-keyboard-module","frontendElectron":"lib/electron-browser/keyboard/electron-keyboard-module","backendElectron":"lib/electron-node/keyboard/electron-backend-keyboard-module"},{"frontendElectron":"lib/electron-browser/token/electron-token-frontend-module","backendElectron":"lib/electron-node/token/electron-token-backend-module"},{"backend":"lib/node/hosting/backend-hosting-module","backendElectron":"lib/electron-node/hosting/electron-backend-hosting-module"},{"frontend":"lib/browser/request/browser-request-module","frontendElectron":"lib/electron-browser/request/electron-browser-request-module"},{"backend":"lib/node/request/backend-request-module","backendElectron":"lib/electron-node/request/electron-backend-request-module"}],"keywords":["theia-extension"],"license":"EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0","repository":{"type":"git","url":"https://github.com/eclipse-theia/theia.git"},"bugs":{"url":"https://github.com/eclipse-theia/theia/issues"},"homepage":"https://github.com/eclipse-theia/theia","files":["electron-shared","i18n","lib","shared","src"],"scripts":{"build":"theiaext build","clean":"theiaext clean","compile":"theiaext compile","generate-layout":"electron ./scripts/generate-layout","generate-theia-re-exports":"theia-re-exports generate && theia-re-exports template README_TEMPLATE.md > README.md","lint":"theiaext lint","prepare":"yarn -s generate-theia-re-exports","test":"theiaext test","version":"yarn -s generate-theia-re-exports","watch":"theiaext watch"},"devDependencies":{"@theia/ext-scripts":"1.48.3","@theia/re-exports":"1.48.3","minimist":"^1.2.0"},"nyc":{"extends":"../../configs/nyc.json"},"gitHead":"49e167c6d7deaa68060e12e8f33d35b31b1230a0"}');

/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/src/common/i18n/nls.metadata.json":
/*!************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/src/common/i18n/nls.metadata.json ***!
  \************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"keys":{"vs/platform/terminal/node/ptyHostMain":["ptyHost"],"vs/code/node/cliProcessMain":["cli"],"vs/code/electron-main/main":["mainLog","secondInstanceAdmin","secondInstanceAdminDetail","secondInstanceNoResponse","secondInstanceNoResponseDetail","statusWarning","startupDataDirError","startupUserDataAndExtensionsDirErrorDetail",{"key":"close","comment":["&& denotes a mnemonic"]}],"vs/code/node/sharedProcess/sharedProcessMain":["sharedLog"],"vs/code/electron-sandbox/processExplorer/processExplorerMain":["name","cpu","pid","memory","killProcess","forceKillProcess","copy","copyAll","debug"],"vs/workbench/electron-sandbox/desktop.main":["join.closeStorage"],"vs/workbench/electron-sandbox/desktop.contribution":["newTab","showPreviousTab","showNextWindowTab","moveWindowTabToNewWindow","mergeAllWindowTabs","toggleWindowTabsBar",{"key":"miExit","comment":["&& denotes a mnemonic"]},"application.shellEnvironmentResolutionTimeout","windowConfigurationTitle","window.openWithoutArgumentsInNewWindow.on","window.openWithoutArgumentsInNewWindow.off","openWithoutArgumentsInNewWindow","window.reopenFolders.preserve","window.reopenFolders.all","window.reopenFolders.folders","window.reopenFolders.one","window.reopenFolders.none","restoreWindows","restoreFullscreen","zoomLevel","window.newWindowDimensions.default","window.newWindowDimensions.inherit","window.newWindowDimensions.offset","window.newWindowDimensions.maximized","window.newWindowDimensions.fullscreen","newWindowDimensions","closeWhenEmpty","window.doubleClickIconToClose","titleBarStyle","dialogStyle","window.nativeTabs","window.nativeFullScreen","window.clickThroughInactive","telemetryConfigurationTitle","telemetry.enableCrashReporting","enableCrashReporterDeprecated","keyboardConfigurationTitle","touchbar.enabled","touchbar.ignored","security.promptForLocalFileProtocolHandling","security.promptForRemoteFileProtocolHandling","argv.locale","argv.disableHardwareAcceleration","argv.forceColorProfile","argv.enableCrashReporter","argv.crashReporterId","argv.enebleProposedApi","argv.logLevel","argv.disableChromiumSandbox","argv.useInMemorySecretStorage","argv.force-renderer-accessibility","argv.passwordStore"],"vs/workbench/services/textfile/electron-sandbox/nativeTextFileService":["join.textFiles"],"vs/workbench/services/workspaces/electron-sandbox/workspaceEditingService":["saveWorkspaceMessage","saveWorkspaceDetail",{"key":"save","comment":["&& denotes a mnemonic"]},{"key":"doNotSave","comment":["&& denotes a mnemonic"]},"workspaceOpenedMessage","workspaceOpenedDetail","restartExtensionHost.reason"],"vs/workbench/services/secrets/electron-sandbox/secretStorageService":["troubleshootingButton","encryptionNotAvailableJustTroubleshootingGuide","usePlainTextExtraSentence","usePlainText","isGnome","isKwallet"],"vs/workbench/services/localization/electron-sandbox/localeService":["argvInvalid","openArgv","installing","restartDisplayLanguageMessage1","restartDisplayLanguageDetail1",{"key":"restart","comment":["&& denotes a mnemonic character"]}],"vs/workbench/services/extensionManagement/electron-sandbox/extensionManagementServerService":["local","remote"],"vs/workbench/services/integrity/electron-sandbox/integrityService":["integrity.prompt","integrity.moreInformation","integrity.dontShowAgain"],"vs/workbench/services/workingCopy/electron-sandbox/workingCopyBackupService":["join.workingCopyBackups"],"vs/workbench/services/extensions/electron-sandbox/nativeExtensionService":["extensionService.versionMismatchCrash","relaunch","extensionService.autoRestart","startBisect","devTools","restart","learnMore","extensionService.crash","getEnvironmentFailure","enableResolver","enable","installResolver","install","resolverExtensionNotFound","restartExtensionHost","restartExtensionHost.reason"],"vs/workbench/contrib/files/electron-sandbox/fileActions.contribution":["revealInWindows","revealInMac","openContainer","miShare","filesCategory"],"vs/workbench/contrib/localization/electron-sandbox/localization.contribution":["updateLocale","changeAndRestart","neverAgain"],"vs/workbench/contrib/issue/electron-sandbox/issue.contribution":[{"key":"reportPerformanceIssue","comment":["Here, \'issue\' means problem or bug"]},"openProcessExplorer",{"key":"miOpenProcessExplorerer","comment":["&& denotes a mnemonic"]},"stopTracing","stopTracing.message",{"key":"stopTracing.button","comment":["&& denotes a mnemonic"]},"stopTracing.title","stopTracing.detail"],"vs/workbench/contrib/extensions/electron-sandbox/extensions.contribution":["runtimeExtension"],"vs/workbench/contrib/remote/electron-sandbox/remote.contribution":["wslFeatureInstalled","remote","remote.downloadExtensionsLocally"],"vs/workbench/contrib/userDataSync/electron-sandbox/userDataSync.contribution":["no backups","download sync activity complete","open","Open Backup folder"],"vs/workbench/contrib/performance/electron-sandbox/performance.contribution":["experimental.rendererProfiling"],"vs/workbench/contrib/tasks/electron-sandbox/taskService":["TaskSystem.runningTask",{"key":"TaskSystem.terminateTask","comment":["&& denotes a mnemonic"]},"TaskSystem.noProcess",{"key":"TaskSystem.exitAnyways","comment":["&& denotes a mnemonic"]}],"vs/workbench/contrib/externalTerminal/electron-sandbox/externalTerminal.contribution":["globalConsoleAction","terminalConfigurationTitle","terminal.explorerKind.integrated","terminal.explorerKind.external","terminal.explorerKind.both","explorer.openInTerminalKind","terminal.sourceControlRepositoriesKind.integrated","terminal.sourceControlRepositoriesKind.external","terminal.sourceControlRepositoriesKind.both","sourceControlRepositories.openInTerminalKind","terminal.external.windowsExec","terminal.external.osxExec","terminal.external.linuxExec"],"vs/workbench/contrib/remoteTunnel/electron-sandbox/remoteTunnel.contribution":["remoteTunnel.category","remoteTunnel.actions.turnOn","remoteTunnel.actions.turnOff","remoteTunnel.actions.showLog","remoteTunnel.actions.configure","remoteTunnel.actions.copyToClipboard","remoteTunnel.actions.learnMore",{"key":"recommend.remoteExtension","comment":["{0} will be a tunnel name, {1} will the link address to the web UI, {6} an extension name. [label](command:commandId) is a markdown link. Only translate the label, do not modify the format"]},"action.showExtension","action.doNotShowAgain",{"key":"initialize.progress.title","comment":["Only translate \'Looking for remote tunnel\', do not change the format of the rest (markdown link format)"]},{"key":"startTunnel.progress.title","comment":["Only translate \'Starting remote tunnel\', do not change the format of the rest (markdown link format)"]},{"key":"remoteTunnel.serviceInstallFailed","comment":["{Locked=\\"](command:{0})\\"}"]},"accountPreference.placeholder","signed in","others",{"key":"sign in using account","comment":["{0} will be a auth provider (e.g. Github)"]},"tunnel.preview",{"key":"enable","comment":["&& denotes a mnemonic"]},"tunnel.enable.placeholder","tunnel.enable.session","tunnel.enable.session.description","tunnel.enable.service","tunnel.enable.service.description",{"key":"progress.turnOn.final","comment":["{0} will be the tunnel name, {1} will the link address to the web UI, {6} an extension name, {7} a link to the extension documentation. [label](command:commandId) is a markdown link. Only translate the label, do not modify the format"]},"action.copyToClipboard","action.showExtension","progress.turnOn.failed","remoteTunnel.actions.manage.on.v2","remoteTunnel.actions.manage.connecting","remoteTunnel.turnOffAttached.confirm","remoteTunnel.turnOff.confirm","manage.placeholder",{"key":"manage.title.attached","comment":["{0} is the tunnel name"]},{"key":"manage.title.orunning","comment":["{0} is the tunnel name"]},"manage.title.off","manage.showLog","manage.tunnelName","remoteTunnelAccess.machineName","remoteTunnelAccess.machineNameRegex","remoteTunnelAccess.preventSleep"],"vs/base/common/platform":[{"key":"ensureLoaderPluginIsLoaded","comment":["{Locked}"]}],"vs/platform/environment/node/argv":["optionsUpperCase","extensionsManagement","troubleshooting","cliDataDir","cliDataDir","diff","merge","add","goto","newWindow","reuseWindow","wait","locale","userDataDir","profileName","help","extensionHomePath","listExtensions","showVersions","category","installExtension","install prerelease","uninstallExtension","experimentalApis","version","verbose","log","status","prof-startup","disableExtensions","disableExtension","turn sync","inspect-extensions","inspect-brk-extensions","disableGPU","disableChromiumSandbox","telemetry","deprecated.useInstead","paths","usage","options","stdinWindows","stdinUnix","subcommands","unknownVersion","unknownCommit"],"vs/platform/terminal/node/ptyService":["terminal-history-restored"],"vs/editor/common/config/editorOptions":["accessibilitySupport.auto","accessibilitySupport.on","accessibilitySupport.off","accessibilitySupport","comments.insertSpace","comments.ignoreEmptyLines","emptySelectionClipboard","find.cursorMoveOnType","editor.find.seedSearchStringFromSelection.never","editor.find.seedSearchStringFromSelection.always","editor.find.seedSearchStringFromSelection.selection","find.seedSearchStringFromSelection","editor.find.autoFindInSelection.never","editor.find.autoFindInSelection.always","editor.find.autoFindInSelection.multiline","find.autoFindInSelection","find.globalFindClipboard","find.addExtraSpaceOnTop","find.loop","fontLigatures","fontFeatureSettings","fontLigaturesGeneral","fontVariations","fontVariationSettings","fontVariationsGeneral","fontSize","fontWeightErrorMessage","fontWeight","editor.gotoLocation.multiple.peek","editor.gotoLocation.multiple.gotoAndPeek","editor.gotoLocation.multiple.goto","editor.gotoLocation.multiple.deprecated","editor.editor.gotoLocation.multipleDefinitions","editor.editor.gotoLocation.multipleTypeDefinitions","editor.editor.gotoLocation.multipleDeclarations","editor.editor.gotoLocation.multipleImplemenattions","editor.editor.gotoLocation.multipleReferences","alternativeDefinitionCommand","alternativeTypeDefinitionCommand","alternativeDeclarationCommand","alternativeImplementationCommand","alternativeReferenceCommand","hover.enabled","hover.delay","hover.sticky","hover.hidingDelay","hover.above","wrappingStrategy.simple","wrappingStrategy.advanced","wrappingStrategy","codeActions","editor.stickyScroll.enabled","editor.stickyScroll.maxLineCount","editor.stickyScroll.defaultModel","editor.stickyScroll.scrollWithEditor","inlayHints.enable","editor.inlayHints.on","editor.inlayHints.onUnlessPressed","editor.inlayHints.offUnlessPressed","editor.inlayHints.off","inlayHints.fontSize","inlayHints.fontFamily","inlayHints.padding","lineHeight","minimap.enabled","minimap.autohide","minimap.size.proportional","minimap.size.fill","minimap.size.fit","minimap.size","minimap.side","minimap.showSlider","minimap.scale","minimap.renderCharacters","minimap.maxColumn","padding.top","padding.bottom","parameterHints.enabled","parameterHints.cycle","on","inline","off","quickSuggestions.strings","quickSuggestions.comments","quickSuggestions.other","quickSuggestions","lineNumbers.off","lineNumbers.on","lineNumbers.relative","lineNumbers.interval","lineNumbers","rulers.size","rulers.color","rulers","scrollbar.vertical.auto","scrollbar.vertical.visible","scrollbar.vertical.fit","scrollbar.vertical","scrollbar.horizontal.auto","scrollbar.horizontal.visible","scrollbar.horizontal.fit","scrollbar.horizontal","scrollbar.verticalScrollbarSize","scrollbar.horizontalScrollbarSize","scrollbar.scrollByPage","scrollbar.ignoreHorizontalScrollbarInContentHeight","unicodeHighlight.nonBasicASCII","unicodeHighlight.invisibleCharacters","unicodeHighlight.ambiguousCharacters","unicodeHighlight.includeComments","unicodeHighlight.includeStrings","unicodeHighlight.allowedCharacters","unicodeHighlight.allowedLocales","inlineSuggest.enabled","inlineSuggest.showToolbar.always","inlineSuggest.showToolbar.onHover","inlineSuggest.showToolbar","inlineSuggest.suppressSuggestions","bracketPairColorization.enabled","bracketPairColorization.independentColorPoolPerBracketType","editor.guides.bracketPairs.true","editor.guides.bracketPairs.active","editor.guides.bracketPairs.false","editor.guides.bracketPairs","editor.guides.bracketPairsHorizontal.true","editor.guides.bracketPairsHorizontal.active","editor.guides.bracketPairsHorizontal.false","editor.guides.bracketPairsHorizontal","editor.guides.highlightActiveBracketPair","editor.guides.indentation","editor.guides.highlightActiveIndentation.true","editor.guides.highlightActiveIndentation.always","editor.guides.highlightActiveIndentation.false","editor.guides.highlightActiveIndentation","suggest.insertMode.insert","suggest.insertMode.replace","suggest.insertMode","suggest.filterGraceful","suggest.localityBonus","suggest.shareSuggestSelections","suggest.insertMode.always","suggest.insertMode.never","suggest.insertMode.whenTriggerCharacter","suggest.insertMode.whenQuickSuggestion","suggest.selectionMode","suggest.snippetsPreventQuickSuggestions","suggest.showIcons","suggest.showStatusBar","suggest.preview","suggest.showInlineDetails","suggest.maxVisibleSuggestions.dep","deprecated","editor.suggest.showMethods","editor.suggest.showFunctions","editor.suggest.showConstructors","editor.suggest.showDeprecated","editor.suggest.matchOnWordStartOnly","editor.suggest.showFields","editor.suggest.showVariables","editor.suggest.showClasss","editor.suggest.showStructs","editor.suggest.showInterfaces","editor.suggest.showModules","editor.suggest.showPropertys","editor.suggest.showEvents","editor.suggest.showOperators","editor.suggest.showUnits","editor.suggest.showValues","editor.suggest.showConstants","editor.suggest.showEnums","editor.suggest.showEnumMembers","editor.suggest.showKeywords","editor.suggest.showTexts","editor.suggest.showColors","editor.suggest.showFiles","editor.suggest.showReferences","editor.suggest.showCustomcolors","editor.suggest.showFolders","editor.suggest.showTypeParameters","editor.suggest.showSnippets","editor.suggest.showUsers","editor.suggest.showIssues","selectLeadingAndTrailingWhitespace","selectSubwords","wrappingIndent.none","wrappingIndent.same","wrappingIndent.indent","wrappingIndent.deepIndent","wrappingIndent","dropIntoEditor.enabled","dropIntoEditor.showDropSelector","dropIntoEditor.showDropSelector.afterDrop","dropIntoEditor.showDropSelector.never","pasteAs.enabled","pasteAs.showPasteSelector","pasteAs.showPasteSelector.afterPaste","pasteAs.showPasteSelector.never","acceptSuggestionOnCommitCharacter","acceptSuggestionOnEnterSmart","acceptSuggestionOnEnter","accessibilityPageSize","editorViewAccessibleLabel","screenReaderAnnounceInlineSuggestion","editor.autoClosingBrackets.languageDefined","editor.autoClosingBrackets.beforeWhitespace","autoClosingBrackets","editor.autoClosingComments.languageDefined","editor.autoClosingComments.beforeWhitespace","autoClosingComments","editor.autoClosingDelete.auto","autoClosingDelete","editor.autoClosingOvertype.auto","autoClosingOvertype","editor.autoClosingQuotes.languageDefined","editor.autoClosingQuotes.beforeWhitespace","autoClosingQuotes","editor.autoIndent.none","editor.autoIndent.keep","editor.autoIndent.brackets","editor.autoIndent.advanced","editor.autoIndent.full","autoIndent","editor.autoSurround.languageDefined","editor.autoSurround.quotes","editor.autoSurround.brackets","autoSurround","stickyTabStops","codeLens","codeLensFontFamily","codeLensFontSize","colorDecorators","editor.colorDecoratorActivatedOn.clickAndHover","editor.colorDecoratorActivatedOn.hover","editor.colorDecoratorActivatedOn.click","colorDecoratorActivatedOn","colorDecoratorsLimit","columnSelection","copyWithSyntaxHighlighting","cursorBlinking","cursorSmoothCaretAnimation.off","cursorSmoothCaretAnimation.explicit","cursorSmoothCaretAnimation.on","cursorSmoothCaretAnimation","cursorStyle","cursorSurroundingLines","cursorSurroundingLinesStyle.default","cursorSurroundingLinesStyle.all","cursorSurroundingLinesStyle","cursorWidth","dragAndDrop","experimentalWhitespaceRendering.svg","experimentalWhitespaceRendering.font","experimentalWhitespaceRendering.off","experimentalWhitespaceRendering","fastScrollSensitivity","folding","foldingStrategy.auto","foldingStrategy.indentation","foldingStrategy","foldingHighlight","foldingImportsByDefault","foldingMaximumRegions","unfoldOnClickAfterEndOfLine","fontFamily","formatOnPaste","formatOnType","glyphMargin","hideCursorInOverviewRuler","letterSpacing","linkedEditing","links","matchBrackets","mouseWheelScrollSensitivity","mouseWheelZoom","multiCursorMergeOverlapping","multiCursorModifier.ctrlCmd","multiCursorModifier.alt",{"key":"multiCursorModifier","comment":["- `ctrlCmd` refers to a value the setting can take and should not be localized.","- `Control` and `Command` refer to the modifier keys Ctrl or Cmd on the keyboard and can be localized."]},"multiCursorPaste.spread","multiCursorPaste.full","multiCursorPaste","multiCursorLimit","occurrencesHighlight","multiDocumentOccurrencesHighlight","overviewRulerBorder","peekWidgetDefaultFocus.tree","peekWidgetDefaultFocus.editor","peekWidgetDefaultFocus","definitionLinkOpensInPeek","quickSuggestionsDelay","renameOnType","renameOnTypeDeprecate","renderControlCharacters","renderFinalNewline","renderLineHighlight.all","renderLineHighlight","renderLineHighlightOnlyWhenFocus","renderWhitespace.boundary","renderWhitespace.selection","renderWhitespace.trailing","renderWhitespace","roundedSelection","scrollBeyondLastColumn","scrollBeyondLastLine","scrollPredominantAxis","selectionClipboard","selectionHighlight","showFoldingControls.always","showFoldingControls.never","showFoldingControls.mouseover","showFoldingControls","showUnused","showDeprecated","snippetSuggestions.top","snippetSuggestions.bottom","snippetSuggestions.inline","snippetSuggestions.none","snippetSuggestions","smoothScrolling","inlineCompletionsAccessibilityVerbose","suggestFontSize","suggestLineHeight","suggestOnTriggerCharacters","suggestSelection.first","suggestSelection.recentlyUsed","suggestSelection.recentlyUsedByPrefix","suggestSelection","tabCompletion.on","tabCompletion.off","tabCompletion.onlySnippets","tabCompletion","unusualLineTerminators.auto","unusualLineTerminators.off","unusualLineTerminators.prompt","unusualLineTerminators","useTabStops","wordBreak.normal","wordBreak.keepAll","wordBreak","wordSeparators","wordWrap.off","wordWrap.on",{"key":"wordWrap.wordWrapColumn","comment":["- `editor.wordWrapColumn` refers to a different setting and should not be localized."]},{"key":"wordWrap.bounded","comment":["- viewport means the edge of the visible window size.","- `editor.wordWrapColumn` refers to a different setting and should not be localized."]},{"key":"wordWrap","comment":["- \'off\', \'on\', \'wordWrapColumn\' and \'bounded\' refer to values the setting can take and should not be localized.","- `editor.wordWrapColumn` refers to a different setting and should not be localized."]},{"key":"wordWrapColumn","comment":["- `editor.wordWrap` refers to a different setting and should not be localized.","- \'wordWrapColumn\' and \'bounded\' refer to values the different setting can take and should not be localized."]},"defaultColorDecorators","tabFocusMode"],"vs/base/common/errorMessage":["stackTrace.format","nodeExceptionMessage","error.defaultMessage","error.defaultMessage","error.moreErrors","error.defaultMessage"],"vs/platform/extensionManagement/common/extensionManagement":["extensions","preferences"],"vs/platform/extensionManagement/common/extensionManagementCLI":["notFound","useId","listFromLocation","installingExtensionsOnLocation","installingExtensions","alreadyInstalled-checkAndUpdate","alreadyInstalled","error while installing extensions","installation failed","successVsixInstall","cancelVsixInstall","alreadyInstalled","updateMessage","installing builtin with version","installing builtin ","installing with version","installing","successInstall","cancelInstall","forceDowngrade","builtin","forceUninstall","uninstalling","successUninstallFromLocation","successUninstall","notInstalleddOnLocation","notInstalled"],"vs/platform/extensionManagement/common/extensionsScannerService":["fileReadFail","jsonParseFail","jsonParseInvalidType","jsonsParseReportErrors","jsonInvalidFormat","jsonsParseReportErrors","jsonInvalidFormat"],"vs/platform/files/common/files":["unknownError","sizeB","sizeKB","sizeMB","sizeGB","sizeTB"],"vs/platform/extensionManagement/node/extensionManagementService":["incompatible","MarketPlaceDisabled","Not a Marketplace extension","removeError","errorDeleting","renameError","cannot read","restartCode","restartCode"],"vs/platform/files/common/fileService":["invalidPath","noProviderFound","fileNotFoundError","fileExists","err.write","writeFailedUnlockUnsupported","writeFailedAtomicUnsupported1","writeFailedAtomicUnsupported2","writeFailedAtomicUnlock","fileIsDirectoryWriteError","fileModifiedError","err.read","fileIsDirectoryReadError","fileNotModifiedError","fileTooLargeError","unableToMoveCopyError1","unableToMoveCopyError2","unableToMoveCopyError3","unableToMoveCopyError4","mkdirExistsError","deleteFailedTrashUnsupported","deleteFailedAtomicUnsupported","deleteFailedTrashAndAtomicUnsupported","deleteFailedNotFound","deleteFailedNonEmptyFolder","err.readonly","err.readonly"],"vs/platform/files/node/diskFileSystemProvider":["fileExists","fileNotExists","moveError","copyError","fileCopyErrorPathCase","fileMoveCopyErrorNotFound","fileMoveCopyErrorExists"],"vs/platform/languagePacks/common/languagePacks":["currentDisplayLanguage"],"vs/platform/request/common/request":["request","httpConfigurationTitle","proxy","strictSSL","proxyKerberosServicePrincipal","proxyAuthorization","proxySupportOff","proxySupportOn","proxySupportFallback","proxySupportOverride","proxySupport","systemCertificates","systemCertificatesV2"],"vs/platform/telemetry/common/telemetryService":["telemetry.telemetryLevelMd","telemetry.docsStatement","telemetry.docsAndPrivacyStatement","telemetry.restart","telemetry.crashReports","telemetry.errors","telemetry.usage","telemetry.telemetryLevel.tableDescription","telemetry.telemetryLevel.deprecated","telemetryConfigurationTitle","telemetry.telemetryLevel.default","telemetry.telemetryLevel.error","telemetry.telemetryLevel.crash","telemetry.telemetryLevel.off","telemetryConfigurationTitle","telemetry.enableTelemetry","telemetry.enableTelemetryMd","enableTelemetryDeprecated"],"vs/platform/userDataProfile/common/userDataProfile":["defaultProfile"],"vs/code/electron-main/app":[{"key":"open","comment":["&& denotes a mnemonic"]},{"key":"cancel","comment":["&& denotes a mnemonic"]},"confirmOpenMessage","confirmOpenDetail","doNotAskAgainLocal","doNotAskAgainRemote"],"vs/platform/environment/node/argvHelper":["multipleValues","emptyValue","deprecatedArgument","unknownSubCommandOption","unknownOption","gotoValidation"],"vs/platform/dialogs/common/dialogs":[{"key":"yesButton","comment":["&& denotes a mnemonic"]},"cancelButton","cancelButton","cancelButton",{"key":"okButton","comment":["&& denotes a mnemonic"]},{"key":"okButton","comment":["&& denotes a mnemonic"]},"cancelButton","moreFile","moreFiles"],"vs/platform/update/common/update.config.contribution":["updateConfigurationTitle","updateMode","none","manual","start","default","updateMode","deprecated","enableWindowsBackgroundUpdatesTitle","enableWindowsBackgroundUpdates","showReleaseNotes"],"vs/code/electron-sandbox/issue/issueReporterPage":["sendSystemInfo","sendProcessInfo","sendWorkspaceInfo","sendExtensions","sendExperiments","sendExtensionData",{"key":"reviewGuidanceLabel","comment":["{Locked=\\"<a href=\\"https://github.com/microsoft/vscode/wiki/Submitting-Bugs-and-Suggestions\\" target=\\"_blank\\">\\"}","{Locked=\\"</a>\\"}"]},"completeInEnglish","issueTypeLabel","issueSourceLabel","issueSourceEmptyValidation","disableExtensionsLabelText","disableExtensions","chooseExtension","extensionWithNonstandardBugsUrl","extensionWithNoBugsUrl","issueTitleLabel","issueTitleRequired","titleEmptyValidation","titleLengthValidation","details","descriptionEmptyValidation","show","extensionData","show","show","show","show","show"],"vs/code/electron-sandbox/issue/issueReporterService":["hide","show","createOnGitHub","previewOnGitHub","loadingData","rateLimited","similarIssues","open","closed","open","closed","noSimilarIssues","bugReporter","featureRequest","performanceIssue","selectSource","vscode","extension","marketplace","unknown","handlesIssuesElsewhere","elsewhereDescription","openIssueReporter","stepsToReproduce","bugDescription","stepsToReproduce","performanceIssueDesciption","description","featureRequestDescription","pasteData","selectExtension","disabledExtensions","noCurrentExperiments"],"vs/platform/telemetry/common/telemetryLogAppender":["telemetryLog"],"vs/platform/userDataSync/common/userDataSync":["settings sync","settingsSync.keybindingsPerPlatform","settingsSync.ignoredExtensions","app.extension.identifier.errorMessage","settingsSync.ignoredSettings"],"vs/platform/userDataSync/common/userDataSyncLog":["userDataSyncLog"],"vs/platform/userDataSync/common/userDataSyncMachines":["error incompatible"],"vs/platform/remoteTunnel/common/remoteTunnel":["remoteTunnelLog"],"vs/platform/userDataSync/common/userDataSyncResourceProvider":["incompatible sync data"],"vs/platform/remoteTunnel/node/remoteTunnelService":["remoteTunnelService.building",{"key":"remoteTunnelService.authorizing","comment":["{0} is a user account name, {1} a provider name (e.g. Github)"]},{"key":"remoteTunnelService.openTunnelWithName","comment":["{0} is a tunnel name"]},"remoteTunnelService.openTunnel","remoteTunnelService.serviceInstallFailed"],"vs/platform/list/browser/listService":["workbenchConfigurationTitle","multiSelectModifier.ctrlCmd","multiSelectModifier.alt",{"key":"multiSelectModifier","comment":["- `ctrlCmd` refers to a value the setting can take and should not be localized.","- `Control` and `Command` refer to the modifier keys Ctrl or Cmd on the keyboard and can be localized."]},{"key":"openModeModifier","comment":["`singleClick` and `doubleClick` refers to a value the setting can take and should not be localized."]},"horizontalScrolling setting","list.scrollByPage","tree indent setting","render tree indent guides","list smoothScrolling setting","Mouse Wheel Scroll Sensitivity","Fast Scroll Sensitivity","defaultFindModeSettingKey.highlight","defaultFindModeSettingKey.filter","defaultFindModeSettingKey","keyboardNavigationSettingKey.simple","keyboardNavigationSettingKey.highlight","keyboardNavigationSettingKey.filter","keyboardNavigationSettingKey","keyboardNavigationSettingKeyDeprecated","defaultFindMatchTypeSettingKey.fuzzy","defaultFindMatchTypeSettingKey.contiguous","defaultFindMatchTypeSettingKey","expand mode","typeNavigationMode2"],"vs/platform/contextkey/common/contextkey":["contextkey.parser.error.emptyString","contextkey.parser.error.emptyString.hint","contextkey.parser.error.noInAfterNot","contextkey.parser.error.closingParenthesis","contextkey.parser.error.unexpectedToken","contextkey.parser.error.unexpectedToken.hint","contextkey.parser.error.unexpectedEOF","contextkey.parser.error.unexpectedEOF.hint","contextkey.parser.error.expectedButGot","contextkey.scanner.errorForLinterWithHint","contextkey.scanner.errorForLinter"],"vs/platform/contextkey/browser/contextKeyService":["getContextKeyInfo"],"vs/platform/markers/common/markers":["sev.error","sev.warning","sev.info"],"vs/workbench/browser/actions/textInputActions":["undo","redo","cut","copy","paste","selectAll"],"vs/workbench/browser/workbench.contribution":["workbench.editor.titleScrollbarSizing.default","workbench.editor.titleScrollbarSizing.large","tabScrollbarHeight","workbench.editor.showTabs.multiple","workbench.editor.showTabs.single","workbench.editor.showTabs.none","showEditorTabs","wrapTabs",{"comment":["This is the description for a setting. Values surrounded by single quotes are not to be translated."],"key":"scrollToSwitchTabs"},"highlightModifiedTabs","decorations.badges","decorations.colors","workbench.editor.labelFormat.default","workbench.editor.labelFormat.short","workbench.editor.labelFormat.medium","workbench.editor.labelFormat.long",{"comment":["This is the description for a setting. Values surrounded by parenthesis are not to be translated."],"key":"tabDescription"},"workbench.editor.untitled.labelFormat.content","workbench.editor.untitled.labelFormat.name",{"comment":["This is the description for a setting. Values surrounded by parenthesis are not to be translated."],"key":"untitledLabelFormat"},{"comment":["This is the description for a setting. Values surrounded by single quotes are not to be translated."],"key":"emptyEditorHint"},"workbench.editor.languageDetection","workbench.editor.historyBasedLanguageDetection","workbench.editor.preferBasedLanguageDetection","workbench.editor.showLanguageDetectionHints","workbench.editor.showLanguageDetectionHints.editors","workbench.editor.showLanguageDetectionHints.notebook",{"comment":["This is the description for a setting. Values surrounded by single quotes are not to be translated."],"key":"editorTabCloseButton"},"workbench.editor.tabSizing.fit","workbench.editor.tabSizing.shrink","workbench.editor.tabSizing.fixed",{"comment":["This is the description for a setting. Values surrounded by single quotes are not to be translated."],"key":"tabSizing"},{"comment":["This is the description for a setting. Values surrounded by single quotes are not to be translated."],"key":"workbench.editor.tabSizingFixedMinWidth"},{"comment":["This is the description for a setting. Values surrounded by single quotes are not to be translated."],"key":"workbench.editor.tabSizingFixedMaxWidth"},{"comment":["This is the description for a setting. Values surrounded by single quotes are not to be translated."],"key":"workbench.editor.tabHeight"},"workbench.editor.pinnedTabSizing.normal","workbench.editor.pinnedTabSizing.compact","workbench.editor.pinnedTabSizing.shrink",{"comment":["This is the description for a setting. Values surrounded by single quotes are not to be translated."],"key":"pinnedTabSizing"},"workbench.editor.pinnedTabsOnSeparateRow","workbench.editor.preventPinnedEditorClose.always","workbench.editor.preventPinnedEditorClose.onlyKeyboard","workbench.editor.preventPinnedEditorClose.onlyMouse","workbench.editor.preventPinnedEditorClose.never","workbench.editor.preventPinnedEditorClose","workbench.editor.splitSizingAuto","workbench.editor.splitSizingDistribute","workbench.editor.splitSizingSplit",{"comment":["This is the description for a setting. Values surrounded by single quotes are not to be translated."],"key":"splitSizing"},"splitOnDragAndDrop","focusRecentEditorAfterClose","showIcons","enablePreview","enablePreviewFromQuickOpen","enablePreviewFromCodeNavigation","closeOnFileDelete",{"comment":["This is the description for a setting. Values surrounded by single quotes are not to be translated."],"key":"editorOpenPositioning"},"sideBySideDirection","closeEmptyGroups","revealIfOpen","mouseBackForwardToNavigate","navigationScope","workbench.editor.navigationScopeDefault","workbench.editor.navigationScopeEditorGroup","workbench.editor.navigationScopeEditor","restoreViewState","sharedViewState","splitInGroupLayout","workbench.editor.splitInGroupLayoutVertical","workbench.editor.splitInGroupLayoutHorizontal","centeredLayoutAutoResize","centeredLayoutDynamicWidth",{"comment":["This is the description for a setting. Values surrounded by single quotes are not to be translated."],"key":"doubleClickTabToToggleEditorGroupSizes"},"workbench.editor.doubleClickTabToToggleEditorGroupSizes.maximize","workbench.editor.doubleClickTabToToggleEditorGroupSizes.expand","workbench.editor.doubleClickTabToToggleEditorGroupSizes.off","limitEditorsEnablement","limitEditorsMaximum","limitEditorsExcludeDirty","perEditorGroup","localHistoryEnabled","localHistoryMaxFileSize","localHistoryMaxFileEntries","exclude","mergeWindow","commandHistory","preserveInput","suggestCommands","askChatLocation","askChatLocation.chatView","askChatLocation.quickChat","enableNaturalLanguageSearch","closeOnFocusLost","workbench.quickOpen.preserveInput","openDefaultSettings","useSplitJSON","openDefaultKeybindings","sideBarLocation","panelDefaultLocation","panelOpensMaximized","workbench.panel.opensMaximized.always","workbench.panel.opensMaximized.never","workbench.panel.opensMaximized.preserve","statusBarVisibility",{"comment":["This is the description for a setting"],"key":"activityBarLocation"},"workbench.activityBar.location.side","workbench.activityBar.location.top","workbench.activityBar.location.hide","activityBarIconClickBehavior","workbench.activityBar.iconClickBehavior.toggle","workbench.activityBar.iconClickBehavior.focus","viewVisibility","fontAliasing","workbench.fontAliasing.default","workbench.fontAliasing.antialiased","workbench.fontAliasing.none","workbench.fontAliasing.auto","settings.editor.ui","settings.editor.json","settings.editor.desc","workbench.hover.delay","workbench.reduceMotion","workbench.reduceMotion.on","workbench.reduceMotion.off","workbench.reduceMotion.auto","layoutControlEnabledWeb",{"key":"layoutControlEnabled","comment":["{0} is a placeholder for a setting identifier."]},"layoutcontrol.type.menu","layoutcontrol.type.toggles","layoutcontrol.type.both","layoutControlType","tips.enabled","windowTitle","activeEditorShort","activeEditorMedium","activeEditorLong","activeFolderShort","activeFolderMedium","activeFolderLong","folderName","folderPath","rootName","rootNameShort","rootPath","profileName","appName","remoteName","dirty","focusedView","separator","windowConfigurationTitle","window.titleSeparator","window.commandCenterWeb",{"key":"window.commandCenter","comment":["{0} is a placeholder for a setting identifier."]},"window.menuBarVisibility.classic","window.menuBarVisibility.visible","window.menuBarVisibility.toggle.mac","window.menuBarVisibility.toggle","window.menuBarVisibility.hidden","window.menuBarVisibility.compact.web",{"key":"window.menuBarVisibility.compact","comment":["{0} is a placeholder for a setting identifier."]},"menuBarVisibility.mac","menuBarVisibility","enableMenuBarMnemonics","customMenuBarAltFocus","window.openFilesInNewWindow.on","window.openFilesInNewWindow.off","window.openFilesInNewWindow.defaultMac","window.openFilesInNewWindow.default","openFilesInNewWindowMac","openFilesInNewWindow","window.openFoldersInNewWindow.on","window.openFoldersInNewWindow.off","window.openFoldersInNewWindow.default","openFoldersInNewWindow","window.confirmBeforeClose.always.web","window.confirmBeforeClose.always","window.confirmBeforeClose.keyboardOnly.web","window.confirmBeforeClose.keyboardOnly","window.confirmBeforeClose.never.web","window.confirmBeforeClose.never","confirmBeforeCloseWeb","confirmBeforeClose","zenModeConfigurationTitle","zenMode.fullScreen","zenMode.centerLayout","zenMode.showTabs","zenMode.showTabs.multiple","zenMode.showTabs.single","zenMode.showTabs.none","zenMode.hideStatusBar","zenMode.hideActivityBar","zenMode.hideLineNumbers","zenMode.restore","zenMode.silentNotifications"],"vs/workbench/browser/actions/helpActions":["keybindingsReference",{"key":"miKeyboardShortcuts","comment":["&& denotes a mnemonic"]},"openVideoTutorialsUrl",{"key":"miVideoTutorials","comment":["&& denotes a mnemonic"]},"openTipsAndTricksUrl",{"key":"miTipsAndTricks","comment":["&& denotes a mnemonic"]},"openDocumentationUrl",{"key":"miDocumentation","comment":["&& denotes a mnemonic"]},"newsletterSignup","openYouTubeUrl",{"key":"miYouTube","comment":["&& denotes a mnemonic"]},"openUserVoiceUrl",{"key":"miUserVoice","comment":["&& denotes a mnemonic"]},"openLicenseUrl",{"key":"miLicense","comment":["&& denotes a mnemonic"]},"openPrivacyStatement",{"key":"miPrivacyStatement","comment":["&& denotes a mnemonic"]}],"vs/workbench/browser/actions/developerActions":["inspect context keys","toggle screencast mode",{"key":"logStorage","comment":["A developer only action to log the contents of the storage for the current window."]},"storageLogDialogMessage","storageLogDialogDetails",{"key":"logWorkingCopies","comment":["A developer only action to log the working copies that exist."]},"removeLargeStorageDatabaseEntries","largeStorageItemDetail","global","profile","workspace","machine","user","removeLargeStorageEntriesPickerButton","removeLargeStorageEntriesPickerPlaceholder","removeLargeStorageEntriesPickerDescriptionNoEntries","removeLargeStorageEntriesConfirmRemove","removeLargeStorageEntriesConfirmRemoveDetail",{"key":"removeLargeStorageEntriesButtonLabel","comment":["&& denotes a mnemonic"]},"startTrackDisposables","snapshotTrackedDisposables","stopTrackDisposables","screencastModeConfigurationTitle","screencastMode.location.verticalPosition","screencastMode.fontSize","screencastMode.keyboardOptions.description","screencastMode.keyboardOptions.showKeys","screencastMode.keyboardOptions.showKeybindings","screencastMode.keyboardOptions.showCommands","screencastMode.keyboardOptions.showCommandGroups","screencastMode.keyboardOptions.showSingleEditorCursorMoves","screencastMode.keyboardOverlayTimeout","screencastMode.mouseIndicatorColor","screencastMode.mouseIndicatorSize"],"vs/workbench/browser/actions/layoutActions":["menuBarIcon","activityBarLeft","activityBarRight","panelLeft","panelLeftOff","panelRight","panelRightOff","panelBottom","statusBarIcon","panelBottomLeft","panelBottomRight","panelBottomCenter","panelBottomJustify","fullScreenIcon","centerLayoutIcon","zenModeIcon","closeSidebar","toggleActivityBar","toggleCenteredLayout",{"key":"miToggleCenteredLayout","comment":["&& denotes a mnemonic"]},"moveSidebarRight","moveSidebarLeft","toggleSidebarPosition","moveSidebarRight","moveSidebarLeft","toggleSidebarPosition","cofigureLayoutIcon","configureLayout","move side bar right","move sidebar right","move sidebar left","move sidebar left","move second sidebar left","move second sidebar right",{"key":"miMoveSidebarRight","comment":["&& denotes a mnemonic"]},{"key":"miMoveSidebarLeft","comment":["&& denotes a mnemonic"]},"toggleEditor",{"key":"miShowEditorArea","comment":["&& denotes a mnemonic"]},{"key":"miAppearance","comment":["&& denotes a mnemonic"]},"toggleSidebar","primary sidebar",{"key":"primary sidebar mnemonic","comment":["&& denotes a mnemonic"]},"compositePart.hideSideBarLabel","compositePart.hideSideBarLabel","toggleSideBar","toggleSideBar","toggleStatusbar",{"key":"miStatusbar","comment":["&& denotes a mnemonic"]},"hideEditorTabs","showMultipleEditorTabs","showSingleEditorTab","tabBar","toggleSeparatePinnedEditorTabs","toggleZenMode",{"key":"miToggleZenMode","comment":["&& denotes a mnemonic"]},"toggleMenuBar",{"key":"miMenuBar","comment":["&& denotes a mnemonic"]},"miMenuBarNoMnemonic","resetViewLocations","moveView","sidebarContainer","panelContainer","secondarySideBarContainer","moveFocusedView.selectView","moveFocusedView","moveFocusedView.error.noFocusedView","moveFocusedView.error.nonMovableView","moveFocusedView.selectDestination",{"key":"moveFocusedView.title","comment":["{0} indicates the title of the view the user has selected to move."]},{"key":"moveFocusedView.newContainerInPanel","comment":["Creates a new top-level tab in the panel."]},"moveFocusedView.newContainerInSidebar","moveFocusedView.newContainerInSidePanel","sidebar","panel","secondarySideBar","resetFocusedViewLocation","resetFocusedView.error.noFocusedView","increaseViewSize","increaseEditorWidth","increaseEditorHeight","decreaseViewSize","decreaseEditorWidth","decreaseEditorHeight","selectToHide","selectToShow","active","menuBar","activityBar","sideBar","secondarySideBar","panel","statusBar","leftSideBar","rightSideBar","leftPanel","rightPanel","centerPanel","justifyPanel","fullscreen","zenMode","centeredLayout","customizeLayout","toggleVisibility","sideBarPosition","panelAlignment","layoutModes","customizeLayoutQuickPickTitle","close","restore defaults"],"vs/workbench/browser/actions/navigationActions":["navigateLeft","navigateRight","navigateUp","navigateDown","focusNextPart","focusPreviousPart"],"vs/workbench/browser/actions/windowActions":["remove","dirtyRecentlyOpenedFolder","dirtyRecentlyOpenedWorkspace","workspacesAndFolders","folders","files","openRecentPlaceholderMac","openRecentPlaceholder","dirtyWorkspace","dirtyFolder","dirtyWorkspaceConfirm","dirtyFolderConfirm","dirtyWorkspaceConfirmDetail","dirtyFolderConfirmDetail","recentDirtyWorkspaceAriaLabel","recentDirtyFolderAriaLabel","openRecent",{"key":"miMore","comment":["&& denotes a mnemonic"]},"quickOpenRecent","toggleFullScreen",{"key":"miToggleFullScreen","comment":["&& denotes a mnemonic"]},"reloadWindow","about",{"key":"miAbout","comment":["&& denotes a mnemonic"]},"newWindow",{"key":"miNewWindow","comment":["&& denotes a mnemonic"]},"blur","miConfirmClose",{"key":"miOpenRecent","comment":["&& denotes a mnemonic"]}],"vs/workbench/browser/actions/workspaceActions":["workspaces","openFile","openFolder","openFolder","openFileFolder","openWorkspaceAction","closeWorkspace","openWorkspaceConfigFile","globalRemoveFolderFromWorkspace","saveWorkspaceAsAction","duplicateWorkspaceInNewWindow",{"key":"miOpenFile","comment":["&& denotes a mnemonic"]},{"key":"miOpenFolder","comment":["&& denotes a mnemonic"]},{"key":"miOpenFolder","comment":["&& denotes a mnemonic"]},{"key":"miOpen","comment":["&& denotes a mnemonic"]},{"key":"miOpenWorkspace","comment":["&& denotes a mnemonic"]},{"key":"miAddFolderToWorkspace","comment":["&& denotes a mnemonic"]},"miSaveWorkspaceAs","duplicateWorkspace",{"key":"miCloseFolder","comment":["&& denotes a mnemonic"]},{"key":"miCloseWorkspace","comment":["&& denotes a mnemonic"]}],"vs/workbench/browser/actions/workspaceCommands":["addFolderToWorkspace",{"key":"add","comment":["&& denotes a mnemonic"]},"addFolderToWorkspaceTitle","workspaceFolderPickerPlaceholder"],"vs/workbench/browser/actions/quickAccessActions":["quickOpen","quickOpenWithModes","quickNavigateNext","quickNavigatePrevious","quickSelectNext","quickSelectPrevious"],"vs/workbench/services/actions/common/menusExtensionPoint":["menus.commandPalette","menus.touchBar","menus.editorTitle","menus.editorTitleRun","menus.editorContext","menus.editorContextCopyAs","menus.editorContextShare","menus.explorerContext","menus.explorerContextShare","menus.editorTabContext","menus.editorTitleContextShare","menus.debugCallstackContext","menus.debugVariablesContext","menus.debugToolBar","menus.home","menus.opy","menus.scmTitle","menus.scmSourceControl","menus.resourceStateContext","menus.resourceFolderContext","menus.resourceGroupContext","menus.changeTitle","menus.statusBarRemoteIndicator","menus.terminalContext","menus.terminalTabContext","view.viewTitle","view.itemContext","commentThread.editorActions","commentThread.title","commentThread.actions","commentThread.actions","commentThread.titleContext","comment.title","comment.actions","comment.commentContext","notebook.toolbar","notebook.kernelSource","notebook.cell.title","notebook.cell.execute","interactive.toolbar","interactive.cell.title","testing.item.context","testing.item.gutter.title","testing.message.context.title","testing.message.content.title","menus.extensionContext","view.timelineTitle","view.timelineContext","view.tunnelContext","view.tunnelOriginInline","view.tunnelPortInline","file.newFile","webview.context","menus.share","inlineCompletions.actions","merge.toolbar","editorLineNumberContext","menus.mergeEditorResult","requirestring","optstring","optstring","optstring","requirestring","optstring","optstring","requirearray","require","requirestring","requirestring","vscode.extension.contributes.menuItem.command","vscode.extension.contributes.menuItem.alt","vscode.extension.contributes.menuItem.when","vscode.extension.contributes.menuItem.group","vscode.extension.contributes.menuItem.submenu","vscode.extension.contributes.menuItem.when","vscode.extension.contributes.menuItem.group","vscode.extension.contributes.submenu.id","vscode.extension.contributes.submenu.label",{"key":"vscode.extension.contributes.submenu.icon","comment":["do not translate or change `\\\\$(zap)`, \\\\ in front of $ is important."]},"vscode.extension.contributes.submenu.icon.light","vscode.extension.contributes.submenu.icon.dark","vscode.extension.contributes.menus","proposed","vscode.extension.contributes.submenus","nonempty","requirestring","optstring","opticon","requireStringOrObject","requirestring","requirestrings","vscode.extension.contributes.commandType.command","vscode.extension.contributes.commandType.title","vscode.extension.contributes.commandType.shortTitle","vscode.extension.contributes.commandType.category","vscode.extension.contributes.commandType.precondition",{"key":"vscode.extension.contributes.commandType.icon","comment":["do not translate or change `\\\\$(zap)`, \\\\ in front of $ is important."]},"vscode.extension.contributes.commandType.icon.light","vscode.extension.contributes.commandType.icon.dark","vscode.extension.contributes.commands","dup1","dup0","submenuId.invalid.id","submenuId.duplicate.id","submenuId.invalid.label","proposedAPI.invalid","missing.command","missing.altCommand","dupe.command","unsupported.submenureference","missing.submenu","submenuItem.duplicate"],"vs/workbench/api/common/configurationExtensionPoint":["vscode.extension.contributes.configuration.title","vscode.extension.contributes.configuration.order","vscode.extension.contributes.configuration.properties","vscode.extension.contributes.configuration.property.empty","vscode.extension.contributes.configuration.properties.schema","scope.application.description","scope.machine.description","scope.window.description","scope.resource.description","scope.language-overridable.description","scope.machine-overridable.description","scope.description","scope.enumDescriptions","scope.markdownEnumDescriptions","scope.enumItemLabels","scope.markdownDescription","scope.deprecationMessage","scope.markdownDeprecationMessage","scope.singlelineText.description","scope.multilineText.description","scope.editPresentation","scope.order","scope.ignoreSync","config.property.defaultConfiguration.warning","vscode.extension.contributes.configuration","invalid.title","invalid.properties","config.property.duplicate","invalid.property","invalid.allOf","workspaceConfig.folders.description","workspaceConfig.path.description","workspaceConfig.name.description","workspaceConfig.uri.description","workspaceConfig.name.description","workspaceConfig.settings.description","workspaceConfig.launch.description","workspaceConfig.tasks.description","workspaceConfig.extensions.description","workspaceConfig.remoteAuthority","workspaceConfig.transient","unknownWorkspaceProperty"],"vs/workbench/browser/parts/editor/editorParts":["groupLabel"],"vs/workbench/api/browser/viewsExtensionPoint":[{"key":"vscode.extension.contributes.views.containers.id","comment":["Contribution refers to those that an extension contributes to VS Code through an extension/contribution point. "]},"vscode.extension.contributes.views.containers.title","vscode.extension.contributes.views.containers.icon","vscode.extension.contributes.viewsContainers","views.container.activitybar","views.container.panel","vscode.extension.contributes.view.type","vscode.extension.contributes.view.tree","vscode.extension.contributes.view.webview","vscode.extension.contributes.view.id","vscode.extension.contributes.view.name","vscode.extension.contributes.view.when","vscode.extension.contributes.view.icon","vscode.extension.contributes.view.contextualTitle","vscode.extension.contributes.view.initialState","vscode.extension.contributes.view.initialState.visible","vscode.extension.contributes.view.initialState.hidden","vscode.extension.contributes.view.initialState.collapsed","vscode.extension.contributs.view.size","vscode.extension.contributes.view.id","vscode.extension.contributes.view.name","vscode.extension.contributes.view.when","vscode.extension.contributes.view.group","vscode.extension.contributes.view.remoteName","vscode.extension.contributes.views","views.explorer","views.debug","views.scm","views.test","views.remote","views.contributed","viewcontainer requirearray","requireidstring","requireidstring","requirestring","requirestring","requirenonemptystring","ViewContainerRequiresProposedAPI","ViewContainerDoesnotExist","duplicateView1","duplicateView2","unknownViewType","requirearray","requirestring","requirestring","optstring","optstring","optstring","optenum"],"vs/workbench/browser/parts/editor/editor.contribution":["textEditor","textDiffEditor","binaryDiffEditor","sideBySideEditor","editorQuickAccessPlaceholder","activeGroupEditorsByMostRecentlyUsedQuickAccess","editorQuickAccessPlaceholder","allEditorsByAppearanceQuickAccess","editorQuickAccessPlaceholder","allEditorsByMostRecentlyUsedQuickAccess","unlockGroupAction","closeGroupAction","splitUp","splitDown","splitLeft","splitRight","toggleLockGroup","close","splitUp","splitDown","splitLeft","splitRight","tabBar","multipleTabs","singleTab","hideTabBar","close","closeOthers","closeRight","closeAllSaved","closeAll","reopenWith","keepOpen","pin","unpin","splitUp","splitDown","splitLeft","splitRight","splitInGroup","joinInGroup","inlineView","showOpenedEditors","closeAll","closeAllSaved","togglePreviewMode","maximizeGroup","unmaximizeGroup","lockGroup","splitEditorRight","splitEditorDown","splitEditorDown","splitEditorRight","toggleSplitEditorInGroupLayout","close","closeAll","close","closeAll","unpin","close","unpin","close","unlockEditorGroup","previousChangeIcon","nextChangeIcon","toggleWhitespace","navigate.prev.label","navigate.next.label","ignoreTrimWhitespace.label","keepEditor","pinEditor","unpinEditor","closeEditor","closePinnedEditor","closeEditorsInGroup","closeSavedEditors","closeOtherEditors","closeRightEditors","closeEditorGroup","reopenWith",{"key":"miReopenClosedEditor","comment":["&& denotes a mnemonic"]},{"key":"miClearRecentOpen","comment":["&& denotes a mnemonic"]},"miShare",{"key":"miEditorLayout","comment":["&& denotes a mnemonic"]},"miSplitEditorUpWithoutMnemonic",{"key":"miSplitEditorUp","comment":["&& denotes a mnemonic"]},"miSplitEditorDownWithoutMnemonic",{"key":"miSplitEditorDown","comment":["&& denotes a mnemonic"]},"miSplitEditorLeftWithoutMnemonic",{"key":"miSplitEditorLeft","comment":["&& denotes a mnemonic"]},"miSplitEditorRightWithoutMnemonic",{"key":"miSplitEditorRight","comment":["&& denotes a mnemonic"]},"miSplitEditorInGroupWithoutMnemonic",{"key":"miSplitEditorInGroup","comment":["&& denotes a mnemonic"]},"miJoinEditorInGroupWithoutMnemonic",{"key":"miJoinEditorInGroup","comment":["&& denotes a mnemonic"]},"miSingleColumnEditorLayoutWithoutMnemonic",{"key":"miSingleColumnEditorLayout","comment":["&& denotes a mnemonic"]},"miTwoColumnsEditorLayoutWithoutMnemonic",{"key":"miTwoColumnsEditorLayout","comment":["&& denotes a mnemonic"]},"miThreeColumnsEditorLayoutWithoutMnemonic",{"key":"miThreeColumnsEditorLayout","comment":["&& denotes a mnemonic"]},"miTwoRowsEditorLayoutWithoutMnemonic",{"key":"miTwoRowsEditorLayout","comment":["&& denotes a mnemonic"]},"miThreeRowsEditorLayoutWithoutMnemonic",{"key":"miThreeRowsEditorLayout","comment":["&& denotes a mnemonic"]},"miTwoByTwoGridEditorLayoutWithoutMnemonic",{"key":"miTwoByTwoGridEditorLayout","comment":["&& denotes a mnemonic"]},"miTwoRowsRightEditorLayoutWithoutMnemonic",{"key":"miTwoRowsRightEditorLayout","comment":["&& denotes a mnemonic"]},"miTwoColumnsBottomEditorLayoutWithoutMnemonic",{"key":"miTwoColumnsBottomEditorLayout","comment":["&& denotes a mnemonic"]},{"key":"miLastEditLocation","comment":["&& denotes a mnemonic"]},{"key":"miFirstSideEditor","comment":["&& denotes a mnemonic"]},{"key":"miSecondSideEditor","comment":["&& denotes a mnemonic"]},{"key":"miNextEditor","comment":["&& denotes a mnemonic"]},{"key":"miPreviousEditor","comment":["&& denotes a mnemonic"]},{"key":"miNextRecentlyUsedEditor","comment":["&& denotes a mnemonic"]},{"key":"miPreviousRecentlyUsedEditor","comment":["&& denotes a mnemonic"]},{"key":"miNextEditorInGroup","comment":["&& denotes a mnemonic"]},{"key":"miPreviousEditorInGroup","comment":["&& denotes a mnemonic"]},{"key":"miNextUsedEditorInGroup","comment":["&& denotes a mnemonic"]},{"key":"miPreviousUsedEditorInGroup","comment":["&& denotes a mnemonic"]},{"key":"miSwitchEditor","comment":["&& denotes a mnemonic"]},{"key":"miFocusFirstGroup","comment":["&& denotes a mnemonic"]},{"key":"miFocusSecondGroup","comment":["&& denotes a mnemonic"]},{"key":"miFocusThirdGroup","comment":["&& denotes a mnemonic"]},{"key":"miFocusFourthGroup","comment":["&& denotes a mnemonic"]},{"key":"miFocusFifthGroup","comment":["&& denotes a mnemonic"]},{"key":"miNextGroup","comment":["&& denotes a mnemonic"]},{"key":"miPreviousGroup","comment":["&& denotes a mnemonic"]},{"key":"miFocusLeftGroup","comment":["&& denotes a mnemonic"]},{"key":"miFocusRightGroup","comment":["&& denotes a mnemonic"]},{"key":"miFocusAboveGroup","comment":["&& denotes a mnemonic"]},{"key":"miFocusBelowGroup","comment":["&& denotes a mnemonic"]},{"key":"miSwitchGroup","comment":["&& denotes a mnemonic"]}],"vs/workbench/browser/parts/banner/bannerPart":["focusBanner"],"vs/workbench/browser/parts/statusbar/statusbarPart":["hideStatusBar"],"vs/workbench/browser/parts/views/viewsService":["editor","show view","toggle view","show view","toggle view",{"key":"focus view","comment":["{0} indicates the name of the view to be focused."]},"resetViewLocation"],"vs/platform/undoRedo/common/undoRedoService":[{"key":"externalRemoval","comment":["{0} is a list of filenames"]},{"key":"noParallelUniverses","comment":["{0} is a list of filenames"]},{"key":"cannotWorkspaceUndo","comment":["{0} is a label for an operation. {1} is another message."]},{"key":"cannotWorkspaceUndo","comment":["{0} is a label for an operation. {1} is another message."]},{"key":"cannotWorkspaceUndoDueToChanges","comment":["{0} is a label for an operation. {1} is a list of filenames."]},{"key":"cannotWorkspaceUndoDueToInProgressUndoRedo","comment":["{0} is a label for an operation. {1} is a list of filenames."]},{"key":"cannotWorkspaceUndoDueToInMeantimeUndoRedo","comment":["{0} is a label for an operation. {1} is a list of filenames."]},"confirmWorkspace",{"key":"ok","comment":["{0} denotes a number that is > 1, && denotes a mnemonic"]},{"key":"nok","comment":["&& denotes a mnemonic"]},{"key":"cannotResourceUndoDueToInProgressUndoRedo","comment":["{0} is a label for an operation."]},"confirmDifferentSource",{"key":"confirmDifferentSource.yes","comment":["&& denotes a mnemonic"]},"confirmDifferentSource.no",{"key":"cannotWorkspaceRedo","comment":["{0} is a label for an operation. {1} is another message."]},{"key":"cannotWorkspaceRedo","comment":["{0} is a label for an operation. {1} is another message."]},{"key":"cannotWorkspaceRedoDueToChanges","comment":["{0} is a label for an operation. {1} is a list of filenames."]},{"key":"cannotWorkspaceRedoDueToInProgressUndoRedo","comment":["{0} is a label for an operation. {1} is a list of filenames."]},{"key":"cannotWorkspaceRedoDueToInMeantimeUndoRedo","comment":["{0} is a label for an operation. {1} is a list of filenames."]},{"key":"cannotResourceRedoDueToInProgressUndoRedo","comment":["{0} is a label for an operation."]}],"vs/workbench/services/extensions/browser/extensionUrlHandler":["confirmUrl","rememberConfirmUrl",{"key":"open","comment":["&& denotes a mnemonic"]},"installAndHandle","installDetail",{"key":"install and open","comment":["&& denotes a mnemonic"]},"Installing","enableAndHandle",{"key":"enableAndReload","comment":["&& denotes a mnemonic"]},"reloadAndHandle",{"key":"reloadAndOpen","comment":["&& denotes a mnemonic"]},"manage","extensions","no"],"vs/workbench/services/keybinding/common/keybindingEditing":["errorKeybindingsFileDirty","parseErrors","errorInvalidConfiguration","emptyKeybindingsHeader"],"vs/workbench/services/decorations/browser/decorationsService":["bubbleTitle"],"vs/workbench/services/progress/browser/progressService":["progress.text2","progress.title3","progress.title2","progress.title2","status.progress","cancel","cancel","dismiss"],"vs/workbench/services/preferences/browser/preferencesService":["openFolderFirst","emptyKeybindingsHeader","defaultKeybindings","defaultKeybindings","fail.createSettings"],"vs/workbench/services/configuration/common/jsonEditingService":["errorInvalidFile"],"vs/workbench/services/editor/browser/editorResolverService":["editorResolver.conflictingDefaults","editorResolver.configureDefault","editorResolver.keepDefault","promptOpenWith.currentlyActive","promptOpenWith.currentDefault","promptOpenWith.currentDefaultAndActive","promptOpenWith.configureDefault","promptOpenWith.updateDefaultPlaceHolder","promptOpenWith.placeHolder"],"vs/workbench/services/history/browser/historyService":["canNavigateBack","canNavigateForward","canNavigateBackInNavigationLocations","canNavigateForwardInNavigationLocations","canNavigateToLastNavigationLocation","canNavigateBackInEditLocations","canNavigateForwardInEditLocations","canNavigateToLastEditLocation","canReopenClosedEditor"],"vs/workbench/services/keybinding/browser/keybindingService":["nonempty","requirestring","optstring","optstring","optstring","optstring","optstring","vscode.extension.contributes.keybindings.command","vscode.extension.contributes.keybindings.args","vscode.extension.contributes.keybindings.key","vscode.extension.contributes.keybindings.mac","vscode.extension.contributes.keybindings.linux","vscode.extension.contributes.keybindings.win","vscode.extension.contributes.keybindings.when","vscode.extension.contributes.keybindings","invalid.keybindings","unboundCommands","keybindings.json.title","keybindings.json.command","keybindings.json.removalCommand","keybindings.json.key","keybindings.commandsIsArray","keybindings.json.when","keybindings.json.args"],"vs/workbench/services/language/common/languageService":["vscode.extension.contributes.languages","vscode.extension.contributes.languages.id","vscode.extension.contributes.languages.aliases","vscode.extension.contributes.languages.extensions","vscode.extension.contributes.languages.filenames","vscode.extension.contributes.languages.filenamePatterns","vscode.extension.contributes.languages.mimetypes","vscode.extension.contributes.languages.firstLine","vscode.extension.contributes.languages.configuration","vscode.extension.contributes.languages.icon","vscode.extension.contributes.languages.icon.light","vscode.extension.contributes.languages.icon.dark","invalid","invalid.empty","require.id","opt.extensions","opt.filenames","opt.firstLine","opt.configuration","opt.aliases","opt.mimetypes","opt.icon"],"vs/workbench/services/themes/browser/workbenchThemeService":["error.cannotloadtheme"],"vs/workbench/services/label/common/labelService":["vscode.extension.contributes.resourceLabelFormatters","vscode.extension.contributes.resourceLabelFormatters.scheme","vscode.extension.contributes.resourceLabelFormatters.authority","vscode.extension.contributes.resourceLabelFormatters.formatting","vscode.extension.contributes.resourceLabelFormatters.label","vscode.extension.contributes.resourceLabelFormatters.separator","vscode.extension.contributes.resourceLabelFormatters.stripPathStartingSeparator","vscode.extension.contributes.resourceLabelFormatters.tildify","vscode.extension.contributes.resourceLabelFormatters.formatting.workspaceSuffix","untitledWorkspace","temporaryWorkspace","workspaceNameVerbose","workspaceName"],"vs/workbench/services/extensionManagement/browser/extensionEnablementService":["extensionsDisabled","Reload","cannot disable language pack extension","cannot disable auth extension","cannot change enablement environment","cannot change disablement environment","cannot change enablement virtual workspace","cannot change enablement extension kind","cannot change enablement dependency","noWorkspace","cannot disable auth extension in workspace"],"vs/workbench/services/extensionRecommendations/common/workspaceExtensionsConfig":["select for remove","select for add","select for remove","select for add","workspace folder","workspace"],"vs/workbench/services/notification/common/notificationService":["neverShowAgain","neverShowAgain"],"vs/workbench/services/userDataProfile/browser/userDataProfileManagement":["reload message when updated","reload message when removed","reload message when removed","cannotRenameDefaultProfile","cannotDeleteDefaultProfile","switch profile","reload message","reload button"],"vs/workbench/services/userDataProfile/browser/userDataProfileImportExportService":["profile import error","resolving uri","preview profile","import profile","create profile","save profile","create new profle","settings","keybindings","snippets","tasks","extensions","name placeholder","save","create","customise the profile","profileExists","invalid configurations","use default profile","name required","icon","select icon","select icon","create from","empty profile","from templates","from existing profiles","copy profile from","create profile","export","close","create from profile","progress extensions","switching profile","troubleshoot issue","troubleshoot profile progress","progress extensions","switching profile","profiles.exporting","export success",{"key":"copy","comment":["&& denotes a mnemonic"]},{"key":"open","comment":["&& denotes a mnemonic"]},{"key":"open in","comment":["&& denotes a mnemonic"]},"close","preview profile","import in desktop","close","preview profile message","learn more","install extensions title","create profile","cancel","import","switching profile","progress settings","progress keybindings","progress tasks","progress snippets","progress global state","progress extensions","select profile content handler","profile already exists",{"key":"overwrite","comment":["&& denotes a mnemonic"]},{"key":"create new","comment":["&& denotes a mnemonic"]},"name","create new title","profileExists","profiles.applying","applied profile","local","file","export profile dialog","select profile","select","select","from default","export profile name","export profile title","profile name required"],"vs/workbench/services/remote/common/remoteExplorerService":["getStartedWalkthrough.id","RemoteHelpInformationExtPoint","RemoteHelpInformationExtPoint.getStarted","RemoteHelpInformationExtPoint.documentation","RemoteHelpInformationExtPoint.feedback","RemoteHelpInformationExtPoint.feedback.deprecated","RemoteHelpInformationExtPoint.reportIssue","RemoteHelpInformationExtPoint.issues"],"vs/workbench/services/filesConfiguration/common/filesConfigurationService":["providerReadonly",{"key":"sessionReadonly","comment":["Please do not translate the word \\"command\\", it is part of our internal syntax which must not change","{Locked=\\"](command:{0})\\"}"]},{"key":"configuredReadonly","comment":["Please do not translate the word \\"command\\", it is part of our internal syntax which must not change","{Locked=\\"](command:{0})\\"}"]},{"key":"fileLocked","comment":["Please do not translate the word \\"command\\", it is part of our internal syntax which must not change","{Locked=\\"](command:{0})\\"}"]},"fileReadonly"],"vs/workbench/services/views/browser/viewDescriptorService":["hideView","resetViewLocation"],"vs/workbench/services/userDataSync/browser/userDataSyncWorkbenchService":["no authentication providers","no account","sync in progress","settings sync",{"key":"yes","comment":["&& denotes a mnemonic"]},"no","sync turned on","turning on","resolving conflicts","syncing...","conflicts detected","resolve",{"key":"show conflicts","comment":["&& denotes a mnemonic"]},{"key":"replace local","comment":["&& denotes a mnemonic"]},{"key":"replace remote","comment":["&& denotes a mnemonic"]},"reset","reset title",{"key":"resetButton","comment":["&& denotes a mnemonic"]},"download sync activity dialog title","download sync activity dialog open label","choose account placeholder","signed in","last used","others","sign in using account"],"vs/workbench/services/authentication/browser/authenticationService":["authentication.id","authentication.label",{"key":"authenticationExtensionPoint","comment":["\'Contributes\' means adds here"]},"authentication.Placeholder","authentication.missingId","authentication.missingLabel","authentication.idConflict","loading","sign in","confirmAuthenticationAccess",{"key":"allow","comment":["&& denotes a mnemonic"]},{"key":"deny","comment":["&& denotes a mnemonic"]},"useOtherAccount",{"key":"selectAccount","comment":["The placeholder {0} is the name of an extension. {1} is the name of the type of account, such as Microsoft or GitHub."]},"getSessionPlateholder",{"key":"accessRequest","comment":["The placeholder {0} will be replaced with an authentication provider\'\'s label. {1} will be replaced with an extension name. (1) is to indicate that this menu item contributes to a badge count"]},{"key":"signInRequest","comment":["The placeholder {0} will be replaced with an authentication provider\'s label. {1} will be replaced with an extension name. (1) is to indicate that this menu item contributes to a badge count."]}],"vs/workbench/services/assignment/common/assignmentService":["workbench.enableExperiments"],"vs/workbench/services/issue/browser/issueTroubleshoot":["troubleshoot issue","detail.start",{"key":"msg","comment":["&& denotes a mnemonic"]},"profile.extensions.disabled","empty.profile","issue is with configuration","issue is in core","I cannot reproduce","This is Bad","Stop","troubleshoot issue","use insiders","troubleshoot issue","download insiders","report anyway","ask to download insiders","troubleshoot issue","good","bad","stop","ask to reproduce issue","troubleshootIssue","title.stop"],"vs/workbench/contrib/preferences/browser/keybindingsEditorContribution":["defineKeybinding.kbLayoutErrorMessage",{"key":"defineKeybinding.kbLayoutLocalAndUSMessage","comment":["Please translate maintaining the stars (*) around the placeholders such that they will be rendered in bold.","The placeholders will contain a keyboard combination e.g. Ctrl+Shift+/"]},{"key":"defineKeybinding.kbLayoutLocalMessage","comment":["Please translate maintaining the stars (*) around the placeholder such that it will be rendered in bold.","The placeholder will contain a keyboard combination e.g. Ctrl+Shift+/"]}],"vs/workbench/contrib/performance/browser/performance.contribution":["show.label","cycles","insta.trace","emitter"],"vs/workbench/contrib/preferences/browser/preferences.contribution":["settingsEditor2","keybindingsEditor","openSettings2","openUserSettingsJson","openApplicationSettingsJson","preferences","settings",{"key":"miOpenSettings","comment":["&& denotes a mnemonic"]},"openSettings2","openGlobalSettings","openRawDefaultSettings","openWorkspaceSettings","openAccessibilitySettings","openWorkspaceSettingsFile","openFolderSettings","openFolderSettingsFile","openFolderSettings",{"key":"miOpenOnlineSettings","comment":["&& denotes a mnemonic"]},"filterUntrusted",{"key":"miOpenTelemetrySettings","comment":["&& denotes a mnemonic"]},"openRemoteSettings","openRemoteSettingsJSON","settings.focusSearch","settings.clearResults","settings.focusFile","settings.focusFile","settings.focusSettingsList","settings.focusSettingsTOC","settings.focusSettingControl","settings.showContextMenu","settings.focusLevelUp","preferences","openGlobalKeybindings","keyboardShortcuts","keyboardShortcuts","openDefaultKeybindingsFile","openGlobalKeybindingsFile","showDefaultKeybindings","showExtensionKeybindings","showUserKeybindings","clear","clearHistory","defineKeybinding.start","openSettingsJson",{"key":"miPreferences","comment":["&& denotes a mnemonic"]}],"vs/workbench/contrib/chat/browser/chat.contribution":["interactiveSessionConfigurationTitle","interactiveSession.editor.fontSize","interactiveSession.editor.fontFamily","interactiveSession.editor.fontWeight","interactiveSession.editor.wordWrap","interactiveSession.editor.lineHeight","chat","chat","clear"],"vs/workbench/contrib/notebook/browser/notebook.contribution":["notebook.editorOptions.experimentalCustomization","notebookConfigurationTitle","notebook.displayOrder.description","notebook.cellToolbarLocation.description","notebook.cellToolbarLocation.viewType","notebook.showCellStatusbar.description","notebook.showCellStatusbar.hidden.description","notebook.showCellStatusbar.visible.description","notebook.showCellStatusbar.visibleAfterExecute.description","notebook.diff.enablePreview.description","notebook.diff.enableOverviewRuler.description","notebook.cellToolbarVisibility.description","notebook.undoRedoPerCell.description","notebook.compactView.description","notebook.focusIndicator.description","notebook.insertToolbarPosition.description","insertToolbarLocation.betweenCells","insertToolbarLocation.notebookToolbar","insertToolbarLocation.both","insertToolbarLocation.hidden","notebook.globalToolbar.description","notebook.stickyScroll.description","notebook.consolidatedOutputButton.description","notebook.showFoldingControls.description","showFoldingControls.always","showFoldingControls.never","showFoldingControls.mouseover","notebook.dragAndDrop.description","notebook.consolidatedRunButton.description","notebook.globalToolbarShowLabel","notebook.textOutputLineLimit","notebook.markup.fontSize","notebook.interactiveWindow.collapseCodeCells","notebook.outputLineHeight","notebook.outputFontSize","notebook.outputFontFamily","notebook.outputScrolling","notebook.outputWordWrap","notebook.formatOnSave","notebook.codeActionsOnSave","explicit","never","explicitBoolean","neverBoolean","notebook.formatOnCellExecution","notebook.confirmDeleteRunningCell","notebook.findScope","notebook.remoteSaving","notebook.scrolling.revealNextCellOnExecute.description","notebook.scrolling.revealNextCellOnExecute.fullCell.description","notebook.scrolling.revealNextCellOnExecute.firstLine.description","notebook.scrolling.revealNextCellOnExecute.none.description","notebook.scrolling.anchorToFocusedCell.description","notebook.scrolling.anchorToFocusedCell.auto.description","notebook.scrolling.anchorToFocusedCell.on.description","notebook.scrolling.anchorToFocusedCell.off.description"],"vs/workbench/contrib/testing/browser/testing.contribution":["test",{"key":"miViewTesting","comment":["&& denotes a mnemonic"]},"noTestProvidersRegistered","searchForAdditionalTestExtensions","testResultsPanelName","testResultsPanelName","testExplorer"],"vs/workbench/contrib/logs/common/logs.contribution":["setDefaultLogLevel","remote name","show window log"],"vs/workbench/contrib/interactive/browser/interactive.contribution":["interactiveWindow","interactive.open","interactive.open","interactive.execute","interactive.input.clear","interactive.history.previous","interactive.history.next","interactiveScrollToTop","interactiveScrollToBottom","interactive.input.focus","interactive.history.focus","interactive.activeCodeBorder","interactive.inactiveCodeBorder","interactiveWindow.alwaysScrollOnNewCell"],"vs/workbench/contrib/quickaccess/browser/quickAccess.contribution":["helpQuickAccessPlaceholder","helpQuickAccess","more","viewQuickAccessPlaceholder","viewQuickAccess","commandsQuickAccessPlaceholder","commandsQuickAccess",{"key":"miCommandPalette","comment":["&& denotes a mnemonic"]},{"key":"miShowAllCommands","comment":["&& denotes a mnemonic"]},{"key":"miOpenView","comment":["&& denotes a mnemonic"]},{"key":"miGotoLine","comment":["&& denotes a mnemonic"]},"commandPalette","commandPalette"],"vs/workbench/contrib/files/browser/fileActions.contribution":["copyPath","copyRelativePath","revealInSideBar","acceptLocalChanges","revertLocalChanges","copyPathOfActive","copyRelativePathOfActive","saveAllInGroup","saveFiles","revert","compareActiveWithSaved","openToSide","reopenWith","revert","saveAll","compareWithSaved","compareWithSelected","compareSource","compareSelected","close","closeOthers","closeSaved","closeAll","explorerOpenWith","cut","deleteFile","deleteFile","newFile","openFile",{"key":"miNewFile","comment":["&& denotes a mnemonic"]},{"key":"miSave","comment":["&& denotes a mnemonic"]},{"key":"miSaveAs","comment":["&& denotes a mnemonic"]},{"key":"miSaveAll","comment":["&& denotes a mnemonic"]},{"key":"miAutoSave","comment":["&& denotes a mnemonic"]},{"key":"miRevert","comment":["&& denotes a mnemonic"]},{"key":"miCloseEditor","comment":["&& denotes a mnemonic"]},{"key":"miGotoFile","comment":["&& denotes a mnemonic"]},"newFolderDescription"],"vs/workbench/contrib/files/browser/explorerViewlet":["explorerViewIcon","openEditorsIcon",{"key":"miViewExplorer","comment":["&& denotes a mnemonic"]},"openFolder","addAFolder","openRecent",{"key":"noWorkspaceHelp","comment":["Please do not translate the word \\"commmand\\", it is part of our internal syntax which must not change"]},{"key":"noFolderHelpWeb","comment":["Please do not translate the word \\"commmand\\", it is part of our internal syntax which must not change"]},{"key":"remoteNoFolderHelp","comment":["Please do not translate the word \\"commmand\\", it is part of our internal syntax which must not change"]},{"key":"noFolderButEditorsHelp","comment":["Please do not translate the word \\"commmand\\", it is part of our internal syntax which must not change"]},{"key":"noFolderHelp","comment":["Please do not translate the word \\"commmand\\", it is part of our internal syntax which must not change"]},"folders","explore","explore"],"vs/workbench/contrib/files/browser/files.contribution":["textFileEditor","binaryFileEditor","hotExit.off","hotExit.onExit","hotExit.onExitAndWindowClose","hotExit","hotExit.off","hotExit.onExitAndWindowCloseBrowser","hotExit","filesConfigurationTitle","exclude","trueDescription","falseDescription","files.exclude.boolean",{"key":"files.exclude.when","comment":["\\\\$(basename) should not be translated"]},"associations","encoding","autoGuessEncoding","eol.LF","eol.CRLF","eol.auto","eol","useTrash","trimTrailingWhitespace","insertFinalNewline","trimFinalNewlines",{"comment":["This is the description for a setting. Values surrounded by single quotes are not to be translated."],"key":"files.autoSave.off"},{"comment":["This is the description for a setting. Values surrounded by single quotes are not to be translated."],"key":"files.autoSave.afterDelay"},{"comment":["This is the description for a setting. Values surrounded by single quotes are not to be translated."],"key":"files.autoSave.onFocusChange"},{"comment":["This is the description for a setting. Values surrounded by single quotes are not to be translated."],"key":"files.autoSave.onWindowChange"},{"comment":["This is the description for a setting. Values surrounded by single quotes are not to be translated."],"key":"autoSave"},{"comment":["This is the description for a setting. Values surrounded by single quotes are not to be translated."],"key":"autoSaveDelay"},"watcherExclude","watcherInclude","defaultLanguage","filesReadonlyInclude","filesReadonlyExclude","filesReadonlyFromPermissions","files.restoreUndoStack","askUser","overwriteFileOnDisk","files.saveConflictResolution","defaultPathErrorMessage","fileDialogDefaultPath","files.simpleDialog.enable","files.participants.timeout","formatOnSave",{"key":"everything","comment":["This is the description of an option"]},{"key":"modification","comment":["This is the description of an option"]},{"key":"modificationIfAvailable","comment":["This is the description of an option"]},"formatOnSaveMode","explorerConfigurationTitle",{"key":"openEditorsVisible","comment":["Open is an adjective"]},{"key":"openEditorsVisibleMin","comment":["Open is an adjective"]},{"key":"openEditorsSortOrder","comment":["Open is an adjective"]},"sortOrder.editorOrder","sortOrder.alphabetical","sortOrder.fullPath","autoReveal.on","autoReveal.off","autoReveal.focusNoScroll","autoReveal","autoRevealExclude","explorer.autoRevealExclude.boolean","explorer.autoRevealExclude.when","enableDragAndDrop","confirmDragAndDrop","confirmDelete","enableUndo","confirmUndo","enableUndo.verbose","enableUndo.default","enableUndo.light","expandSingleFolderWorkspaces","sortOrder.default","sortOrder.mixed","sortOrder.filesFirst","sortOrder.type","sortOrder.modified","sortOrder.foldersNestsFiles","sortOrder","sortOrderLexicographicOptions.default","sortOrderLexicographicOptions.upper","sortOrderLexicographicOptions.lower","sortOrderLexicographicOptions.unicode","sortOrderLexicographicOptions","explorer.decorations.colors","explorer.decorations.badges","simple","smart","disabled","explorer.incrementalNaming","compressSingleChildFolders","copyRelativePathSeparator.slash","copyRelativePathSeparator.backslash","copyRelativePathSeparator.auto","copyRelativePathSeparator","excludeGitignore","fileNestingEnabled","fileNestingExpand","fileNestingPatterns","fileNesting.description"],"vs/workbench/contrib/bulkEdit/browser/bulkEditService":["summary.0","summary.nm","summary.n0","summary.textFiles","workspaceEdit","workspaceEdit","nothing","closeTheWindow.message",{"key":"closeTheWindow","comment":["&& denotes a mnemonic"]},"changeWorkspace.message",{"key":"changeWorkspace","comment":["&& denotes a mnemonic"]},"reloadTheWindow.message",{"key":"reloadTheWindow","comment":["&& denotes a mnemonic"]},"quit.message",{"key":"quit","comment":["&& denotes a mnemonic"]},"areYouSureQuiteBulkEdit.detail","fileOperation","refactoring.autoSave"],"vs/workbench/contrib/bulkEdit/browser/preview/bulkEdit.contribution":["overlap","detail",{"key":"continue","comment":["&& denotes a mnemonic"]},"refactorPreviewViewIcon","apply","cat","Discard","cat","toogleSelection","cat","groupByFile","cat","groupByType","cat","groupByType","cat","panel","panel"],"vs/workbench/contrib/search/browser/search.contribution":[{"key":"miViewSearch","comment":["&& denotes a mnemonic"]},"anythingQuickAccessPlaceholder","anythingQuickAccess","symbolsQuickAccessPlaceholder","symbolsQuickAccess","textSearchPickerPlaceholder","textSearchPickerHelp","searchConfigurationTitle","exclude","exclude.boolean",{"key":"exclude.when","comment":["\\\\$(basename) should not be translated"]},"search.mode","search.mode.view","search.mode.reuseEditor","search.mode.newEditor","useRipgrep","useRipgrepDeprecated","maintainFileSearchCacheDeprecated","search.maintainFileSearchCache","useIgnoreFiles","useGlobalIgnoreFiles","useParentIgnoreFiles","search.quickOpen.includeSymbols","search.quickOpen.includeHistory","filterSortOrder.default","filterSortOrder.recency","filterSortOrder","search.followSymlinks","search.smartCase","search.globalFindClipboard","search.location","search.location.deprecationMessage","search.maxResults","search.collapseResults.auto","search.collapseAllResults","search.useReplacePreview","search.showLineNumbers","search.usePCRE2","usePCRE2Deprecated","search.actionsPositionAuto","search.actionsPositionRight","search.actionsPosition","search.searchOnType","search.seedWithNearestWord","search.seedOnFocus","search.searchOnTypeDebouncePeriod","search.searchEditor.doubleClickBehaviour.selectWord","search.searchEditor.doubleClickBehaviour.goToLocation","search.searchEditor.doubleClickBehaviour.openLocationToSide","search.searchEditor.doubleClickBehaviour",{"key":"search.searchEditor.reusePriorSearchConfiguration","comment":["\\"Search Editor\\" is a type of editor that can display search results. \\"includes, excludes, and flags\\" refers to the \\"files to include\\" and \\"files to exclude\\" input boxes, and the flags that control whether a query is case-sensitive or a regex."]},"search.searchEditor.defaultNumberOfContextLines","searchSortOrder.default","searchSortOrder.filesOnly","searchSortOrder.type","searchSortOrder.modified","searchSortOrder.countDescending","searchSortOrder.countAscending","search.sortOrder","search.decorations.colors","search.decorations.badges","scm.defaultViewMode.tree","scm.defaultViewMode.list","search.defaultViewMode","search.experimental.closedNotebookResults","search.experimental.quickAccess.preserveInput","search","search"],"vs/workbench/contrib/searchEditor/browser/searchEditor.contribution":["searchEditor","promptOpenWith.searchEditor.displayName","search","searchEditor.deleteResultBlock","search.openNewSearchEditor","search.openSearchEditor","search.openNewEditorToSide","search.openResultsInEditor","search.rerunSearchInEditor","search.action.focusQueryEditorWidget","search.action.focusFilesToInclude","search.action.focusFilesToExclude","searchEditor.action.toggleSearchEditorCaseSensitive","searchEditor.action.toggleSearchEditorWholeWord","searchEditor.action.toggleSearchEditorRegex","searchEditor.action.toggleSearchEditorContextLines","searchEditor.action.increaseSearchEditorContextLines","searchEditor.action.decreaseSearchEditorContextLines","searchEditor.action.selectAllSearchEditorMatches","search.openNewEditor"],"vs/workbench/contrib/sash/browser/sash.contribution":["sashSize","sashHoverDelay"],"vs/workbench/contrib/scm/browser/scm.contribution":["sourceControlViewIcon","source control","no open repo","no open repo in an untrusted workspace","manageWorkspaceTrustAction",{"key":"miViewSCM","comment":["&& denotes a mnemonic"]},"scmConfigurationTitle","scm.diffDecorations.all","scm.diffDecorations.gutter","scm.diffDecorations.overviewRuler","scm.diffDecorations.minimap","scm.diffDecorations.none","diffDecorations","diffGutterWidth","scm.diffDecorationsGutterVisibility.always","scm.diffDecorationsGutterVisibility.hover","scm.diffDecorationsGutterVisibility","scm.diffDecorationsGutterAction.diff","scm.diffDecorationsGutterAction.none","scm.diffDecorationsGutterAction","diffGutterPattern","diffGutterPatternAdded","diffGutterPatternModifed","scm.diffDecorationsIgnoreTrimWhitespace.true","scm.diffDecorationsIgnoreTrimWhitespace.false","scm.diffDecorationsIgnoreTrimWhitespace.inherit","diffDecorationsIgnoreTrimWhitespace","alwaysShowActions","scm.countBadge.all","scm.countBadge.focused","scm.countBadge.off","scm.countBadge","scm.providerCountBadge.hidden","scm.providerCountBadge.auto","scm.providerCountBadge.visible","scm.providerCountBadge","scm.defaultViewMode.tree","scm.defaultViewMode.list","scm.defaultViewMode","scm.defaultViewSortKey.name","scm.defaultViewSortKey.path","scm.defaultViewSortKey.status","scm.defaultViewSortKey","autoReveal","inputFontFamily","inputFontSize","alwaysShowRepository","scm.repositoriesSortOrder.discoveryTime","scm.repositoriesSortOrder.name","scm.repositoriesSortOrder.path","repositoriesSortOrder","providersVisible","showActionButton","showSyncView","scm accept","scm view next commit","scm view previous commit","open in external terminal","open in integrated terminal","source control","source control repositories","source control sync"],"vs/workbench/contrib/search/browser/searchView":["searchCanceled","moreSearch","searchScope.includes","placeholder.includes","searchScope.excludes","placeholder.excludes","replaceAll.confirmation.title",{"key":"replaceAll.confirm.button","comment":["&& denotes a mnemonic"]},"replaceAll.occurrence.file.message","removeAll.occurrence.file.message","replaceAll.occurrence.files.message","removeAll.occurrence.files.message","replaceAll.occurrences.file.message","removeAll.occurrences.file.message","replaceAll.occurrences.files.message","removeAll.occurrences.files.message","removeAll.occurrence.file.confirmation.message","replaceAll.occurrence.file.confirmation.message","removeAll.occurrence.files.confirmation.message","replaceAll.occurrence.files.confirmation.message","removeAll.occurrences.file.confirmation.message","replaceAll.occurrences.file.confirmation.message","removeAll.occurrences.files.confirmation.message","replaceAll.occurrences.files.confirmation.message","emptySearch","searchPathNotFoundError","noOpenEditorResultsIncludesExcludes","noOpenEditorResultsIncludes","noOpenEditorResultsExcludes","noOpenEditorResultsFound","noResultsIncludesExcludes","noResultsIncludes","noResultsExcludes","noResultsFound","rerunSearch.message","rerunSearchInAll.message","openSettings.message","openSettings.learnMore","ariaSearchResultsStatus","searchMaxResultsWarning","forTerm","useIgnoresAndExcludesDisabled","excludes.enable","useExcludesAndIgnoreFilesDescription","onlyOpenEditors","openEditors.disable","disableOpenEditors","openInEditor.tooltip","openInEditor.message","search.file.result","search.files.result","search.file.results","search.files.results","searchWithoutFolder","openFolder"],"vs/workbench/contrib/debug/browser/debugEditorContribution":["editor.inlineValuesForeground","editor.inlineValuesBackground"],"vs/workbench/contrib/debug/browser/debug.contribution":["debugCategory","startDebugPlaceholder","startDebuggingHelp","tasksQuickAccessPlaceholder","tasksQuickAccessHelp","terminateThread","restartFrame","copyStackTrace","viewMemory","setValue","copyValue","copyAsExpression","addToWatchExpressions","breakWhenValueIsRead","breakWhenValueChanges","breakWhenValueIsAccessed","editWatchExpression","setValue","copyValue","viewMemory","removeWatchExpression",{"key":"mRun","comment":["&& denotes a mnemonic"]},{"key":"miStartDebugging","comment":["&& denotes a mnemonic"]},{"key":"miRun","comment":["&& denotes a mnemonic"]},{"key":"miStopDebugging","comment":["&& denotes a mnemonic"]},{"key":"miRestart Debugging","comment":["&& denotes a mnemonic"]},{"key":"miAddConfiguration","comment":["&& denotes a mnemonic"]},{"key":"miStepOver","comment":["&& denotes a mnemonic"]},{"key":"miStepInto","comment":["&& denotes a mnemonic"]},{"key":"miStepOut","comment":["&& denotes a mnemonic"]},{"key":"miContinue","comment":["&& denotes a mnemonic"]},{"key":"miInlineBreakpoint","comment":["&& denotes a mnemonic"]},{"key":"miNewBreakpoint","comment":["&& denotes a mnemonic"]},{"key":"miInstallAdditionalDebuggers","comment":["&& denotes a mnemonic"]},{"key":"miToggleDebugConsole","comment":["&& denotes a mnemonic"]},{"key":"miViewRun","comment":["&& denotes a mnemonic"]},"disassembly","debugConfigurationTitle",{"comment":["This is the description for a setting"],"key":"allowBreakpointsEverywhere"},{"comment":["This is the description for a setting"],"key":"openExplorerOnEnd"},{"comment":["This is the description for a setting"],"key":"inlineValues"},"inlineValues.on","inlineValues.off","inlineValues.focusNoScroll",{"comment":["This is the description for a setting"],"key":"toolBarLocation"},"debugToolBar.floating","debugToolBar.docked","debugToolBar.commandCenter","debugToolBar.hidden","never","always","onFirstSessionStart",{"comment":["This is the description for a setting"],"key":"showInStatusBar"},"debug.console.closeOnEnd",{"comment":["This is the description for a setting"],"key":"debug.terminal.clearBeforeReusing"},"openDebug",{"comment":["This is the description for a setting"],"key":"showSubSessionsInToolBar"},"debug.console.fontSize","debug.console.fontFamily","debug.console.lineHeight","debug.console.wordWrap","debug.console.historySuggestions","debug.console.collapseIdenticalLines","debug.console.acceptSuggestionOnEnter",{"comment":["This is the description for a setting"],"key":"launch"},"debug.focusWindowOnBreak","debug.focusEditorOnBreak","debugAnyway","showErrors","prompt","cancel","debug.onTaskErrors",{"comment":["This is the description for a setting"],"key":"showBreakpointsInOverviewRuler"},{"comment":["This is the description for a setting"],"key":"showInlineBreakpointCandidates"},"debug.saveBeforeStart","debug.saveBeforeStart.allEditorsInActiveGroup","debug.saveBeforeStart.nonUntitledEditorsInActiveGroup","debug.saveBeforeStart.none","debug.confirmOnExit","debug.confirmOnExit.never","debug.confirmOnExit.always","debug.disassemblyView.showSourceCode","debug.autoExpandLazyVariables","debug.enableStatusBarColor",{"comment":["This is the description for a setting"],"key":"debug.hideLauncherWhileDebugging"},"terminateThread",{"comment":["Debug is a noun in this context, not a verb."],"key":"debugFocusConsole"},"jumpToCursor","SetNextStatement","inlineBreakpoint","run",{"comment":["Debug is a noun in this context, not a verb."],"key":"debugPanel"},{"comment":["Debug is a noun in this context, not a verb."],"key":"debugPanel"},"run and debug","variables","watch","callStack","breakpoints","loadedScripts"],"vs/workbench/contrib/debug/browser/callStackEditorContribution":["topStackFrameLineHighlight","focusedStackFrameLineHighlight"],"vs/workbench/contrib/debug/browser/breakpointEditorContribution":["logPoint","breakpoint","breakpointHasConditionDisabled","message","condition","breakpointHasConditionEnabled","message","condition",{"key":"removeLogPoint","comment":["&& denotes a mnemonic"]},"disableLogPoint",{"key":"disable","comment":["&& denotes a mnemonic"]},{"key":"enable","comment":["&& denotes a mnemonic"]},"logPoint","breakpoint","removeBreakpoint","editBreakpoint","disableBreakpoint","enableBreakpoint","removeBreakpoints","removeInlineBreakpointOnColumn","removeLineBreakpoint","editBreakpoints","editInlineBreakpointOnColumn","editLineBreakpoint","enableDisableBreakpoints","disableInlineColumnBreakpoint","disableBreakpointOnLine","enableBreakpoints","enableBreakpointOnLine","addBreakpoint","addConditionalBreakpoint","addLogPoint","runToLine","debugIcon.breakpointForeground","debugIcon.breakpointDisabledForeground","debugIcon.breakpointUnverifiedForeground","debugIcon.breakpointCurrentStackframeForeground","debugIcon.breakpointStackframeForeground"],"vs/workbench/contrib/debug/browser/debugViewlet":[{"key":"miOpenConfigurations","comment":["&& denotes a mnemonic"]},{"key":"selectWorkspaceFolder","comment":["User picks a workspace folder or a workspace configuration file here. Workspace configuration files can contain settings and thus a launch.json configuration can be written into one."]},"debugPanel","startAdditionalSession"],"vs/workbench/contrib/mergeEditor/browser/mergeEditor.contribution":["name","diffAlgorithm.legacy","diffAlgorithm.advanced"],"vs/workbench/contrib/debug/browser/repl":[{"key":"workbench.debug.filter.placeholder","comment":["Text in the brackets after e.g. is not localizable"]},"showing filtered repl lines","debugConsole","startDebugFirst",{"key":"actions.repl.acceptInput","comment":["Apply input from the debug console input box"]},"repl.action.filter","actions.repl.copyAll","selectRepl","clearRepl","collapse","paste","copyAll","copy"],"vs/workbench/contrib/markers/browser/markers.contribution":["markersViewIcon",{"key":"miMarker","comment":["&& denotes a mnemonic"]},"viewAsTree","viewAsTable","toggle errors","problems","errors","toggle warnings","problems","warnings","toggle infos","problems","Infos","toggle active file","problems","Active File","toggle Excluded Files","problems","Excluded Files","copyMarker","copyMessage","copyMessage","focusProblemsList","focusProblemsFilter","show multiline","problems","show singleline","problems","clearFiltersText","problems","collapseAll","status.problems","totalErrors","totalWarnings","totalInfos","noProblems","manyProblems","totalProblems"],"vs/workbench/contrib/commands/common/commands.contribution":["runCommands","runCommands.description","runCommands.commands","runCommands.invalidArgs","runCommands.noCommandsToRun"],"vs/workbench/contrib/url/browser/url.contribution":["openUrl","urlToOpen","workbench.trustedDomains.promptInTrustedWorkspace"],"vs/workbench/contrib/comments/browser/comments.contribution":["commentsConfigurationTitle","openComments","comments.openPanel.deprecated","comments.openView.never","comments.openView.file","comments.openView.firstFile","comments.openView.firstFileUnresolved","comments.openView","useRelativeTime","comments.visible","comments.maxHeight","collapseOnResolve","intro","introWidget","introWidgetNoKb","commentCommands","escape","next","nextNoKb","previous","previousNoKb","nextCommentThreadKb","nextCommentThreadNoKb","previousCommentThreadKb","previousCommentThreadNoKb","addComment","addCommentNoKb","submitComment","submitCommentNoKb"],"vs/workbench/contrib/webviewPanel/browser/webviewPanel.contribution":["webview.editor.label"],"vs/workbench/contrib/webview/browser/webview.contribution":["cut","copy","paste"],"vs/workbench/contrib/extensions/browser/extensionsViewlet":[{"key":"remote","comment":["Remote as in remote machine"]},"installed","select and install local extensions","install remote in local","searchExtensions","extensionFoundInSection","extensionFound","extensionsFoundInSection","extensionsFound","suggestProxyError","open user settings","extensionToUpdate","extensionsToUpdate","extensionToReload","extensionsToReload","malicious warning","reloadNow","popularExtensions","recommendedExtensions","enabledExtensions","disabledExtensions","marketPlace","installed","recently updated","enabled","disabled","availableUpdates","builtin","workspaceUnsupported","workspaceRecommendedExtensions","otherRecommendedExtensions","builtinFeatureExtensions","builtInThemesExtensions","builtinProgrammingLanguageExtensions","untrustedUnsupportedExtensions","untrustedPartiallySupportedExtensions","virtualUnsupportedExtensions","virtualPartiallySupportedExtensions","deprecated"],"vs/workbench/contrib/output/browser/outputView":["output model title","channel","output","outputViewAriaLabel"],"vs/workbench/contrib/output/browser/output.contribution":["outputViewIcon",{"key":"miToggleOutput","comment":["&& denotes a mnemonic"]},"switchBetweenOutputs.label","switchToOutput.label","selectOutput","outputScrollOff","outputScrollOn","extensionLogs","selectlog","logFile","selectlogFile","output","output.smartScroll.enabled","output","output","showOutputChannels","output","clearOutput.label","toggleAutoScroll","openActiveLogOutputFile","showLogs","openLogFile"],"vs/workbench/contrib/externalTerminal/browser/externalTerminal.contribution":["scopedConsoleAction.Integrated","scopedConsoleAction.external","scopedConsoleAction.wt"],"vs/workbench/contrib/relauncher/browser/relauncher.contribution":["relaunchSettingMessage","relaunchSettingMessageWeb","relaunchSettingDetail","relaunchSettingDetailWeb",{"key":"restart","comment":["&& denotes a mnemonic"]},{"key":"restartWeb","comment":["&& denotes a mnemonic"]},"restartExtensionHost.reason"],"vs/workbench/contrib/extensions/browser/extensions.contribution":["manageExtensionsQuickAccessPlaceholder","manageExtensionsHelp","extension","extensions",{"key":"miViewExtensions","comment":["&& denotes a mnemonic"]},"extensionsConfigurationTitle","all","enabled","none","extensions.autoUpdate.true","extensions.autoUpdate.enabled","extensions.autoUpdate.false","extensions.autoUpdate","extensionsCheckUpdates","extensionsIgnoreRecommendations","extensionsShowRecommendationsOnlyOnDemand_Deprecated","extensionsCloseExtensionDetailsOnViewChange","handleUriConfirmedExtensions","extensionsWebWorker.true","extensionsWebWorker.false","extensionsWebWorker.auto","extensionsWebWorker","extensions.supportVirtualWorkspaces","extensions.affinity","extensions.supportUntrustedWorkspaces","extensions.supportUntrustedWorkspaces.true","extensions.supportUntrustedWorkspaces.false","extensions.supportUntrustedWorkspaces.limited","extensions.supportUntrustedWorkspaces.supported","extensions.supportUntrustedWorkspaces.version","extensionsDeferredStartupFinishedActivation","notFound","workbench.extensions.installExtension.description","workbench.extensions.installExtension.arg.decription","workbench.extensions.installExtension.option.installOnlyNewlyAddedFromExtensionPackVSIX","workbench.extensions.installExtension.option.installPreReleaseVersion","workbench.extensions.installExtension.option.donotSync","workbench.extensions.installExtension.option.context","notFound","workbench.extensions.uninstallExtension.description","workbench.extensions.uninstallExtension.arg.name","id required","notInstalled","builtin","workbench.extensions.search.description","workbench.extensions.search.arg.name","installExtensionQuickAccessPlaceholder","installExtensionQuickAccessHelp",{"key":"miPreferencesExtensions","comment":["&& denotes a mnemonic"]},"showExtensions","focusExtensions","installExtensions","showRecommendedKeymapExtensionsShort","importKeyboardShortcutsFroms","showLanguageExtensionsShort","checkForUpdates","noUpdatesAvailable","configure auto updating extensions","configureExtensionsAutoUpdate.all","configureExtensionsAutoUpdate.enabled","configureExtensionsAutoUpdate.none","updateAll","disableAutoUpdate","enableAutoUpdate","enableAll","enableAllWorkspace","disableAll","disableAllWorkspace","InstallFromVSIX","installFromVSIX",{"key":"installButton","comment":["&& denotes a mnemonic"]},"installVSIX","InstallVSIXAction.successReload","InstallVSIXAction.success","InstallVSIXAction.reloadNow","installExtensionFromLocation","installFromLocation","install button","installFromLocationPlaceHolder","installFromLocation","filterExtensions","showFeaturedExtensions","featured filter","showPopularExtensions","most popular filter","showRecommendedExtensions","most popular recommended","recentlyPublishedExtensions","recently published filter","filter by category","showBuiltInExtensions","builtin filter","extensionUpdates","extension updates filter","showWorkspaceUnsupportedExtensions","workspace unsupported filter","showEnabledExtensions","enabled filter","showDisabledExtensions","disabled filter","sorty by","sort by installs","sort by rating","sort by name","sort by published date","sort by update date","clearExtensionsSearchResults","refreshExtension","installWorkspaceRecommendedExtensions","show pre-release version","show released version","workbench.extensions.action.copyExtension","extensionInfoName","extensionInfoId","extensionInfoDescription","extensionInfoVersion","extensionInfoPublisher","extensionInfoVSMarketplaceLink","workbench.extensions.action.copyExtensionId","workbench.extensions.action.configure","workbench.extensions.action.configureKeybindings","workbench.extensions.action.toggleApplyToAllProfiles","workbench.extensions.action.toggleIgnoreExtension","workbench.extensions.action.ignoreRecommendation","workbench.extensions.action.undoIgnoredRecommendation","workbench.extensions.action.addExtensionToWorkspaceRecommendations","workbench.extensions.action.removeExtensionFromWorkspaceRecommendations","workbench.extensions.action.addToWorkspaceRecommendations","extensions","workbench.extensions.action.addToWorkspaceFolderRecommendations","extensions","workbench.extensions.action.addToWorkspaceIgnoredRecommendations","extensions","workbench.extensions.action.addToWorkspaceFolderIgnoredRecommendations","extensions","extensions"],"vs/workbench/contrib/tasks/browser/task.contribution":["building","status.runningTasks","numberOfRunningTasks","runningTasks",{"key":"miRunTask","comment":["&& denotes a mnemonic"]},{"key":"miBuildTask","comment":["&& denotes a mnemonic"]},{"key":"miRunningTask","comment":["&& denotes a mnemonic"]},{"key":"miRestartTask","comment":["&& denotes a mnemonic"]},{"key":"miTerminateTask","comment":["&& denotes a mnemonic"]},{"key":"miConfigureTask","comment":["&& denotes a mnemonic"]},{"key":"miConfigureBuildTask","comment":["&& denotes a mnemonic"]},"workbench.action.tasks.openWorkspaceFileTasks","ShowLogAction.label","RunTaskAction.label","ReRunTaskAction.label","RestartTaskAction.label","ShowTasksAction.label","TerminateAction.label","BuildAction.label","TestAction.label","ConfigureDefaultBuildTask.label","ConfigureDefaultTestTask.label","workbench.action.tasks.openUserTasks","userTasks","tasksQuickAccessPlaceholder","tasksQuickAccessHelp","tasksConfigurationTitle","task.problemMatchers.neverPrompt","task.problemMatchers.neverPrompt.boolean","task.problemMatchers.neverPrompt.array","task.autoDetect","task.slowProviderWarning","task.slowProviderWarning.boolean","task.slowProviderWarning.array","task.quickOpen.history","task.quickOpen.detail","task.quickOpen.skip","task.quickOpen.showAll","task.allowAutomaticTasks.on","task.allowAutomaticTasks.off","task.allowAutomaticTasks","task.reconnection","task.saveBeforeRun","task.saveBeforeRun.always","task.saveBeforeRun.never","task.SaveBeforeRun.prompt"],"vs/workbench/contrib/remote/common/remote.contribution":["invalidWorkspaceMessage","invalidWorkspaceDetail",{"key":"invalidWorkspacePrimary","comment":["&& denotes a mnemonic"]},"triggerReconnect","pauseSocketWriting","ui","workspace","remote","remote.extensionKind","remote.restoreForwardedPorts","remote.autoForwardPorts","remote.autoForwardPortsSource","remote.autoForwardPortsSource.process","remote.autoForwardPortsSource.output","remote.autoForwardPortsSource.hybrid","remote.forwardOnClick","remote.portsAttributes.port","remote.portsAttributes.notify","remote.portsAttributes.openBrowser","remote.portsAttributes.openBrowserOnce","remote.portsAttributes.openPreview","remote.portsAttributes.silent","remote.portsAttributes.ignore","remote.portsAttributes.onForward","remote.portsAttributes.elevateIfNeeded","remote.portsAttributes.label","remote.portsAttributes.labelDefault","remote.portsAttributes.requireLocalPort","remote.portsAttributes.protocol","remote.portsAttributes.labelDefault","remote.portsAttributes","remote.portsAttributes.patternError","remote.portsAttributes.notify","remote.portsAttributes.openBrowser","remote.portsAttributes.openPreview","remote.portsAttributes.silent","remote.portsAttributes.ignore","remote.portsAttributes.onForward","remote.portsAttributes.elevateIfNeeded","remote.portsAttributes.label","remote.portsAttributes.labelDefault","remote.portsAttributes.requireLocalPort","remote.portsAttributes.protocol","remote.portsAttributes.defaults","remote.localPortHost"],"vs/workbench/contrib/snippets/browser/snippets.contribution":["editor.snippets.codeActions.enabled","snippetSchema.json.prefix","snippetSchema.json.isFileTemplate","snippetSchema.json.body","snippetSchema.json.description","snippetSchema.json.default","snippetSchema.json","snippetSchema.json.default","snippetSchema.json","snippetSchema.json.scope"],"vs/workbench/contrib/keybindings/browser/keybindings.contribution":["toggleKeybindingsLog"],"vs/workbench/contrib/folding/browser/folding.contribution":["null","nullFormatterDescription","formatter.default"],"vs/workbench/contrib/limitIndicator/browser/limitIndicator.contribution":["status.button.configure","colorDecoratorsStatusItem.name","status.limitedColorDecorators.short","colorDecoratorsStatusItem.source","foldingRangesStatusItem.name","status.limitedFoldingRanges.short","foldingRangesStatusItem.source","status.limited.details"],"vs/workbench/contrib/inlayHints/browser/inlayHintsAccessibilty":["isReadingLineWithInlayHints","description","read.title","stop.title"],"vs/workbench/contrib/update/browser/update.contribution":["showReleaseNotes",{"key":"mshowReleaseNotes","comment":["&& denotes a mnemonic"]},"update.noReleaseNotesOnline","checkForUpdates","downloadUpdate","installUpdate","restartToUpdate","openDownloadPage","applyUpdate","pickUpdate",{"key":"updateButton","comment":["&& denotes a mnemonic"]}],"vs/workbench/contrib/surveys/browser/nps.contribution":["surveyQuestion","takeSurvey","remindLater","neverAgain"],"vs/workbench/contrib/surveys/browser/ces.contribution":["cesSurveyQuestion","giveFeedback","remindLater"],"vs/workbench/contrib/themes/browser/themes.contribution":["manageExtensionIcon","themes.selectMarketplaceTheme","search.error","installExtension.confirm","installExtension.button.ok","installing extensions","selectTheme.label","installColorThemes","browseColorThemes","themes.selectTheme","themes.category.light","themes.category.dark","themes.category.hc","selectIconTheme.label","installIconThemes","themes.selectIconTheme","fileIconThemeCategory","noIconThemeLabel","noIconThemeDesc","selectProductIconTheme.label","installProductIconThemes","browseProductIconThemes","themes.selectProductIconTheme","productIconThemeCategory","defaultProductIconThemeLabel","manage extension","generateColorTheme.label","toggleLightDarkThemes.label","browseColorThemeInMarketPlace.label","themes",{"key":"miSelectTheme","comment":["&& denotes a mnemonic"]},"selectTheme.label","themes.selectIconTheme.label","themes.selectProductIconTheme.label","button.keep","button.browse","button.revert",{"key":"themeUpdatedNotification","comment":["{0} is the name of the new default theme"]},"button.tryTheme","button.cancel",{"key":"newThemeNotification","comment":["{0} is the name of the new default theme"]}],"vs/workbench/contrib/surveys/browser/languageSurveys.contribution":["helpUs","takeShortSurvey","remindLater","neverAgain"],"vs/workbench/contrib/welcomeGettingStarted/browser/gettingStarted.contribution":["miWelcome","welcome","welcome","welcome.goBack","welcome.markStepComplete","welcome.markStepInomplete","welcome.showAllWalkthroughs","pickWalkthroughs","workspacePlatform","workbench.welcomePage.walkthroughs.openOnInstall",{"comment":["This is the description for a setting. Values surrounded by single quotes are not to be translated."],"key":"workbench.startupEditor.none"},{"comment":["This is the description for a setting. Values surrounded by single quotes are not to be translated."],"key":"workbench.startupEditor.welcomePage"},{"comment":["This is the description for a setting. Values surrounded by single quotes are not to be translated."],"key":"workbench.startupEditor.readme"},{"comment":["This is the description for a setting. Values surrounded by single quotes are not to be translated."],"key":"workbench.startupEditor.newUntitledFile"},{"comment":["This is the description for a setting. Values surrounded by single quotes are not to be translated."],"key":"workbench.startupEditor.welcomePageInEmptyWorkbench"},"workbench.startupEditor","deprecationMessage","workbench.welcomePage.preferReducedMotion"],"vs/workbench/contrib/welcomeWalkthrough/browser/walkThrough.contribution":["walkThrough.editor.label",{"key":"miPlayground","comment":["&& denotes a mnemonic"]}],"vs/workbench/contrib/welcomeViews/common/newFile.contribution":["Built-In","Create","welcome.newFile","newFileTitle","newFilePlaceholder","file","notebook","change keybinding","miNewFileWithName","miNewFile2"],"vs/workbench/contrib/callHierarchy/browser/callHierarchy.contribution":["editorHasCallHierarchyProvider","callHierarchyVisible","callHierarchyDirection","no.item","error","title","title.incoming","showIncomingCallsIcons","title.outgoing","showOutgoingCallsIcon","title.refocus","close"],"vs/workbench/contrib/typeHierarchy/browser/typeHierarchy.contribution":["editorHasTypeHierarchyProvider","typeHierarchyVisible","typeHierarchyDirection","no.item","error","title","title.supertypes","title.subtypes","title.refocusTypeHierarchy","close"],"vs/workbench/contrib/codeEditor/browser/outline/documentSymbolsOutline":["document"],"vs/workbench/contrib/outline/browser/outline.contribution":["outlineViewIcon","outlineConfigurationTitle","outline.showIcons","outline.initialState","outline.initialState.collapsed","outline.initialState.expanded","outline.showProblem","outline.problem.colors","outline.problems.badges","filteredTypes.file","filteredTypes.module","filteredTypes.namespace","filteredTypes.package","filteredTypes.class","filteredTypes.method","filteredTypes.property","filteredTypes.field","filteredTypes.constructor","filteredTypes.enum","filteredTypes.interface","filteredTypes.function","filteredTypes.variable","filteredTypes.constant","filteredTypes.string","filteredTypes.number","filteredTypes.boolean","filteredTypes.array","filteredTypes.object","filteredTypes.key","filteredTypes.null","filteredTypes.enumMember","filteredTypes.struct","filteredTypes.event","filteredTypes.operator","filteredTypes.typeParameter","name"],"vs/workbench/contrib/languageDetection/browser/languageDetection.contribution":["status.autoDetectLanguage","langDetection.name","langDetection.aria","detectlang","noDetection"],"vs/workbench/contrib/languageStatus/browser/languageStatus.contribution":["langStatus.name","langStatus.aria","pin","unpin","aria.1","aria.2","name.pattern","reset"],"vs/workbench/contrib/userDataSync/browser/userDataSync.contribution":[{"key":"local too many requests - reload","comment":["Settings Sync is the name of the feature"]},{"key":"local too many requests - restart","comment":["Settings Sync is the name of the feature"]},"show sync logs","reload","restart","operationId",{"key":"server too many requests","comment":["Settings Sync is the name of the feature"]},"settings sync","show sync logs"],"vs/workbench/contrib/timeline/browser/timeline.contribution":["timelineViewIcon","timelineOpenIcon","timelineConfigurationTitle","timeline.pageSize","timeline.pageOnScroll","files.openTimeline","timelineFilter","filterTimeline"],"vs/workbench/contrib/editSessions/browser/editSessions.contribution":["continue working on","continue edit session in local folder","show log","continueOn.installAdditional","resuming working changes window","autoStoreWorkingChanges","check for pending cloud changes","store working changes","show cloud changes","store your working changes","resume latest cloud changes","resume cloud changes","store working changes in cloud","storing working changes","checkingForWorkingChanges","no cloud changes","no cloud changes for ref","client too old","resume edit session warning many","resume edit session warning 1","resume failed","editSessionPartialMatch","resume","payload too large","no working changes to store","payload too large","payload failed","continue with cloud changes","with cloud changes","without cloud changes","continueEditSession.openLocalFolder.title.v2","continueWorkingOn.existingLocalFolder","continueEditSessionPick.title.v2","continueEditSessionItem.openInLocalFolder.v2","continueEditSessionItem.builtin","learnMoreTooltip","continueEditSessionExtPoint","continueEditSessionExtPoint.command","continueEditSessionExtPoint.group","continueEditSessionExtPoint.qualifiedName","continueEditSessionExtPoint.description","continueEditSessionExtPoint.remoteGroup","continueEditSessionExtPoint.when","autoStoreWorkingChanges.onShutdown","autoStoreWorkingChanges.off","autoStoreWorkingChangesDescription","autoResumeWorkingChanges.onReload","autoResumeWorkingChanges.off","autoResumeWorkingChanges","continueOnCloudChanges.promptForAuth","continueOnCloudChanges.off","continueOnCloudChanges","cloudChangesPartialMatchesEnabled"],"vs/workbench/contrib/workspaces/browser/workspaces.contribution":["workspaceFound","openWorkspace","workspacesFound","selectWorkspace","selectToOpen","openWorkspace","alreadyOpen"],"vs/workbench/contrib/workspace/browser/workspace.contribution":["openLooseFileWorkspaceDetails","openLooseFileWindowDetails","openLooseFileLearnMore","openLooseFileWorkspaceMesssage","openLooseFileWindowMesssage",{"key":"open","comment":["&& denotes a mnemonic"]},{"key":"newWindow","comment":["&& denotes a mnemonic"]},"openLooseFileWorkspaceCheckbox","workspaceTrust","folderTrust","immediateTrustRequestMessage",{"key":"grantWorkspaceTrustButton","comment":["&& denotes a mnemonic"]},{"key":"grantFolderTrustButton","comment":["&& denotes a mnemonic"]},{"key":"manageWorkspaceTrustButton","comment":["&& denotes a mnemonic"]},"cancelWorkspaceTrustButton","immediateTrustRequestLearnMore","addWorkspaceFolderMessage","addWorkspaceFolderDetail","no","workspaceTrust","folderTrust","checkboxString",{"key":"trustOption","comment":["&& denotes a mnemonic"]},"trustFolderOptionDescription","trustWorkspaceOptionDescription",{"key":"dontTrustOption","comment":["&& denotes a mnemonic"]},"dontTrustFolderOptionDescription","dontTrustWorkspaceOptionDescription","workspaceStartupTrustDetails","folderStartupTrustDetails","startupTrustRequestLearnMore","restrictedModeBannerManage","restrictedModeBannerLearnMore","restrictedModeBannerAriaLabelWindow","restrictedModeBannerAriaLabelFolder","restrictedModeBannerAriaLabelWorkspace","restrictedModeBannerMessageWindow","restrictedModeBannerMessageFolder","restrictedModeBannerMessageWorkspace","status.ariaTrustedWindow","status.ariaUntrustedWindow",{"key":"status.tooltipUntrustedWindow2","comment":["[abc]({n}) are links.  Only translate `features are disabled` and `window is not trusted`. Do not change brackets and parentheses or {n}"]},"status.ariaTrustedFolder","status.ariaUntrustedFolder",{"key":"status.tooltipUntrustedFolder2","comment":["[abc]({n}) are links.  Only translate `features are disabled` and `folder is not trusted`. Do not change brackets and parentheses or {n}"]},"status.ariaTrustedWorkspace","status.ariaUntrustedWorkspace",{"key":"status.tooltipUntrustedWorkspace2","comment":["[abc]({n}) are links. Only translate `features are disabled` and `workspace is not trusted`. Do not change brackets and parentheses or {n}"]},"status.WorkspaceTrust","workspaceTrustEditor","workspacesCategory","configureWorkspaceTrustSettings","manageWorkspaceTrust","workspace.trust.description","workspace.trust.startupPrompt.description","workspace.trust.startupPrompt.always","workspace.trust.startupPrompt.once","workspace.trust.startupPrompt.never","workspace.trust.banner.description","workspace.trust.banner.always","workspace.trust.banner.untilDismissed","workspace.trust.banner.never","workspace.trust.untrustedFiles.description","workspace.trust.untrustedFiles.prompt","workspace.trust.untrustedFiles.open","workspace.trust.untrustedFiles.newWindow","workspace.trust.emptyWindow.description"],"vs/workbench/contrib/share/browser/share.contribution":["share","generating link","shareTextSuccess","shareSuccess","close","open link","experimental.share.enabled"],"vs/workbench/contrib/audioCues/browser/audioCues.contribution":["audioCues.enabled.auto","audioCues.enabled.on","audioCues.enabled.off","audioCues.volume","audioCues.debouncePositionChanges","audioCues.lineHasBreakpoint","audioCues.lineHasInlineSuggestion","audioCues.lineHasError","audioCues.lineHasFoldedArea","audioCues.lineHasWarning","audioCues.onDebugBreak","audioCues.noInlayHints","audioCues.taskCompleted","audioCues.taskFailed","audioCues.terminalCommandFailed","audioCues.terminalQuickFix","audioCues.diffLineInserted","audioCues.diffLineDeleted","audioCues.diffLineModified","audioCues.notebookCellCompleted","audioCues.notebookCellFailed","audioCues.chatRequestSent","audioCues.chatResponsePending","audioCues.chatResponseReceived","audioCues.clear","audioCues.save","audioCues.save.userGesture","audioCues.save.always","audioCues.save.never","audioCues.format","audioCues.format.userGesture","audioCues.format.always","audioCues.format.never"],"vs/workbench/contrib/accountEntitlements/browser/accountsEntitlements.contribution":["workbench.accounts.showEntitlements"],"vs/workbench/browser/workbench":["loaderErrorNative"],"vs/workbench/contrib/deprecatedExtensionMigrator/browser/deprecatedExtensionMigrator.contribution":["bracketPairColorizer.notification","bracketPairColorizer.notification.action.uninstall","bracketPairColorizer.notification.action.enableNative","bracketPairColorizer.notification.action.showMoreInfo"],"vs/workbench/electron-sandbox/window":["restart","configure","learnMore","keychainWriteError","troubleshooting","runningTranslated","downloadArmBuild","proxyAuthRequired",{"key":"loginButton","comment":["&& denotes a mnemonic"]},"username","password","proxyDetail","rememberCredentials","quitMessageMac","quitMessage","closeWindowMessage",{"key":"quitButtonLabel","comment":["&& denotes a mnemonic"]},{"key":"exitButtonLabel","comment":["&& denotes a mnemonic"]},{"key":"closeWindowButtonLabel","comment":["&& denotes a mnemonic"]},"doNotAskAgain","shutdownErrorDetail","willShutdownDetail","shutdownErrorClose","shutdownErrorQuit","shutdownErrorReload","shutdownErrorLoad","shutdownTitleClose","shutdownTitleQuit","shutdownTitleReload","shutdownTitleLoad","shutdownForceClose","shutdownForceQuit","shutdownForceReload","shutdownForceLoad","loaderCycle","runningAsRoot","appRootWarning.banner","macoseolmessage","learnMore","resolveShellEnvironment","learnMore"],"vs/platform/workspace/common/workspace":["codeWorkspace"],"vs/workbench/services/configuration/browser/configurationService":["configurationDefaults.description","experimental","setting description"],"vs/workbench/services/log/electron-sandbox/logService":["rendererLog"],"vs/platform/workspace/common/workspaceTrust":["trusted","untrusted"],"vs/workbench/services/userDataProfile/common/userDataProfile":["defaultProfileIcon","profiles","profile"],"vs/workbench/services/remote/electron-sandbox/remoteAgentService":["devTools","directUrl","connectionError"],"vs/workbench/electron-sandbox/actions/developerActions":["toggleDevTools","configureRuntimeArguments","reloadWindowWithExtensionsDisabled","openUserDataFolder"],"vs/platform/configuration/common/configurationRegistry":["defaultLanguageConfigurationOverrides.title","defaultLanguageConfiguration.description","overrideSettings.defaultDescription","overrideSettings.errorMessage","overrideSettings.defaultDescription","overrideSettings.errorMessage","config.property.empty","config.property.languageDefault","config.property.duplicate","config.policy.duplicate"],"vs/workbench/electron-sandbox/actions/windowActions":["closeWindow",{"key":"miCloseWindow","comment":["&& denotes a mnemonic"]},"zoomIn",{"key":"miZoomIn","comment":["&& denotes a mnemonic"]},"zoomOut",{"key":"miZoomOut","comment":["&& denotes a mnemonic"]},"zoomReset",{"key":"miZoomReset","comment":["&& denotes a mnemonic"]},"close","close","switchWindowPlaceHolder","windowDirtyAriaLabel","current","switchWindow","quickSwitchWindow","splitWindow",{"key":"miSplitWindow","comment":["&& denotes a mnemonic"]}],"vs/platform/contextkey/common/contextkeys":["isMac","isLinux","isWindows","isWeb","isMacNative","isIOS","isMobile","productQualityType","inputFocus"],"vs/workbench/electron-sandbox/actions/installActions":["shellCommand","install","successIn","uninstall","successFrom"],"vs/workbench/common/contextkeys":["workbenchState","workspaceFolderCount","dirtyWorkingCopies","remoteName","virtualWorkspace","temporaryWorkspace","isFullscreen","embedderIdentifier","activeEditorIsDirty","activeEditorIsNotPreview","activeEditorIsFirstInGroup","activeEditorIsLastInGroup","activeEditorIsPinned","activeEditorIsReadonly","activeEditorCanToggleReadonly","activeEditorCanRevert","activeEditor","activeEditorAvailableEditorIds","textCompareEditorVisible","textCompareEditorActive","sideBySideEditorActive","groupEditorsCount","activeEditorGroupEmpty","activeEditorGroupIndex","activeEditorGroupLast","activeEditorGroupLocked","multipleEditorGroups","editorIsOpen","inZenMode","isCenteredLayout","splitEditorsVertically","editorAreaVisible","editorTabsVisible","editorGroupMaximized","sideBarVisible","sideBarFocus","activeViewlet","statusBarFocused","titleBarStyle","titleBarVisible","bannerFocused","notificationFocus","notificationCenterVisible","notificationToastsVisible","activeAuxiliary","auxiliaryBarFocus","auxiliaryBarVisible","activePanel","panelFocus","panelPosition","panelAlignment","panelVisible","panelMaximized","focusedView","resourceScheme","resourceFilename","resourceDirname","resourcePath","resourceLangId","resource","resourceExtname","resourceSet","isFileSystemResource"],"vs/workbench/common/configuration":["applicationConfigurationTitle","workbenchConfigurationTitle","securityConfigurationTitle","security.allowedUNCHosts.patternErrorMessage","security.allowedUNCHosts","security.restrictUNCAccess"],"vs/workbench/browser/parts/dialogs/dialogHandler":["aboutDetail",{"key":"copy","comment":["&& denotes a mnemonic"]},"ok"],"vs/workbench/electron-sandbox/parts/dialogs/dialogHandler":[{"key":"aboutDetail","comment":["Electron, Chromium, Node.js and V8 are product names that need no translation"]},{"key":"copy","comment":["&& denotes a mnemonic"]},"okButton"],"vs/workbench/services/dialogs/browser/abstractFileDialogService":["saveChangesDetail","saveChangesMessage","saveChangesMessages",{"key":"saveAll","comment":["&& denotes a mnemonic"]},{"key":"save","comment":["&& denotes a mnemonic"]},{"key":"dontSave","comment":["&& denotes a mnemonic"]},"openFileOrFolder.title","openFile.title","openFolder.title","openWorkspace.title","filterName.workspace","saveFileAs.title","saveAsTitle","allFiles","noExt"],"vs/workbench/services/textfile/browser/textFileService":["textFileCreate.source","textFileOverwrite.source","textFileModelDecorations","readonlyAndDeleted","readonly","deleted","fileBinaryError","confirmOverwrite","overwriteIrreversible",{"key":"replaceButtonLabel","comment":["&& denotes a mnemonic"]},"confirmMakeWriteable","confirmMakeWriteableDetail",{"key":"makeWriteableButtonLabel","comment":["&& denotes a mnemonic"]}],"vs/workbench/common/theme":["tabActiveBackground","tabUnfocusedActiveBackground","tabInactiveBackground","tabUnfocusedInactiveBackground","tabActiveForeground","tabInactiveForeground","tabUnfocusedActiveForeground","tabUnfocusedInactiveForeground","tabHoverBackground","tabUnfocusedHoverBackground","tabHoverForeground","tabUnfocusedHoverForeground","tabBorder","lastPinnedTabBorder","tabActiveBorder","tabActiveUnfocusedBorder","tabActiveBorderTop","tabActiveUnfocusedBorderTop","tabHoverBorder","tabUnfocusedHoverBorder","tabActiveModifiedBorder","tabInactiveModifiedBorder","unfocusedActiveModifiedBorder","unfocusedINactiveModifiedBorder","editorPaneBackground","editorGroupEmptyBackground","editorGroupFocusedEmptyBorder","tabsContainerBackground","tabsContainerBorder","editorGroupHeaderBackground","editorTitleContainerBorder","editorGroupBorder","editorDragAndDropBackground","editorDropIntoPromptForeground","editorDropIntoPromptBackground","editorDropIntoPromptBorder","sideBySideEditor.horizontalBorder","sideBySideEditor.verticalBorder","panelBackground","panelBorder","panelActiveTitleForeground","panelInactiveTitleForeground","panelActiveTitleBorder","panelInputBorder","panelDragAndDropBorder","panelSectionDragAndDropBackground","panelSectionHeaderBackground","panelSectionHeaderForeground","panelSectionHeaderBorder","panelSectionBorder","banner.background","banner.foreground","banner.iconForeground","statusBarForeground","statusBarNoFolderForeground","statusBarBackground","statusBarNoFolderBackground","statusBarBorder","statusBarFocusBorder","statusBarNoFolderBorder","statusBarItemActiveBackground","statusBarItemFocusBorder","statusBarItemHoverBackground","statusBarItemHoverForeground","statusBarItemCompactHoverBackground","statusBarProminentItemForeground","statusBarProminentItemBackground","statusBarProminentItemHoverForeground","statusBarProminentItemHoverBackground","statusBarErrorItemBackground","statusBarErrorItemForeground","statusBarErrorItemHoverForeground","statusBarErrorItemHoverBackground","statusBarWarningItemBackground","statusBarWarningItemForeground","statusBarWarningItemHoverForeground","statusBarWarningItemHoverBackground","activityBarBackground","activityBarForeground","activityBarInActiveForeground","activityBarBorder","activityBarActiveBorder","activityBarActiveFocusBorder","activityBarActiveBackground","activityBarDragAndDropBorder","activityBarBadgeBackground","activityBarBadgeForeground","profileBadgeBackground","profileBadgeForeground","statusBarItemHostBackground","statusBarItemHostForeground","statusBarRemoteItemHoverForeground","statusBarRemoteItemHoverBackground","statusBarItemOfflineBackground","statusBarItemOfflineForeground","statusBarOfflineItemHoverForeground","statusBarOfflineItemHoverBackground","extensionBadge.remoteBackground","extensionBadge.remoteForeground","sideBarBackground","sideBarForeground","sideBarBorder","sideBarTitleForeground","sideBarDragAndDropBackground","sideBarSectionHeaderBackground","sideBarSectionHeaderForeground","sideBarSectionHeaderBorder","titleBarActiveForeground","titleBarInactiveForeground","titleBarActiveBackground","titleBarInactiveBackground","titleBarBorder","menubarSelectionForeground","menubarSelectionBackground","menubarSelectionBorder","commandCenter-foreground","commandCenter-activeForeground","commandCenter-inactiveForeground","commandCenter-background","commandCenter-activeBackground","commandCenter-border","commandCenter-activeBorder","commandCenter-inactiveBorder","notificationCenterBorder","notificationToastBorder","notificationsForeground","notificationsBackground","notificationsLink","notificationCenterHeaderForeground","notificationCenterHeaderBackground","notificationsBorder","notificationsErrorIconForeground","notificationsWarningIconForeground","notificationsInfoIconForeground","windowActiveBorder","windowInactiveBorder"],"vs/platform/theme/common/colorRegistry":["foreground","disabledForeground","errorForeground","descriptionForeground","iconForeground","focusBorder","contrastBorder","activeContrastBorder","selectionBackground","textSeparatorForeground","textLinkForeground","textLinkActiveForeground","textPreformatForeground","textPreformatBackground","textBlockQuoteBackground","textBlockQuoteBorder","textCodeBlockBackground","widgetShadow","widgetBorder","inputBoxBackground","inputBoxForeground","inputBoxBorder","inputBoxActiveOptionBorder","inputOption.hoverBackground","inputOption.activeBackground","inputOption.activeForeground","inputPlaceholderForeground","inputValidationInfoBackground","inputValidationInfoForeground","inputValidationInfoBorder","inputValidationWarningBackground","inputValidationWarningForeground","inputValidationWarningBorder","inputValidationErrorBackground","inputValidationErrorForeground","inputValidationErrorBorder","dropdownBackground","dropdownListBackground","dropdownForeground","dropdownBorder","buttonForeground","buttonSeparator","buttonBackground","buttonHoverBackground","buttonBorder","buttonSecondaryForeground","buttonSecondaryBackground","buttonSecondaryHoverBackground","badgeBackground","badgeForeground","scrollbarShadow","scrollbarSliderBackground","scrollbarSliderHoverBackground","scrollbarSliderActiveBackground","progressBarBackground","editorError.background","editorError.foreground","errorBorder","editorWarning.background","editorWarning.foreground","warningBorder","editorInfo.background","editorInfo.foreground","infoBorder","editorHint.foreground","hintBorder","sashActiveBorder","editorBackground","editorForeground","editorStickyScrollBackground","editorStickyScrollHoverBackground","editorWidgetBackground","editorWidgetForeground","editorWidgetBorder","editorWidgetResizeBorder","pickerBackground","pickerForeground","pickerTitleBackground","pickerGroupForeground","pickerGroupBorder","keybindingLabelBackground","keybindingLabelForeground","keybindingLabelBorder","keybindingLabelBottomBorder","editorSelectionBackground","editorSelectionForeground","editorInactiveSelection","editorSelectionHighlight","editorSelectionHighlightBorder","editorFindMatch","findMatchHighlight","findRangeHighlight","editorFindMatchBorder","findMatchHighlightBorder","findRangeHighlightBorder","searchEditor.queryMatch","searchEditor.editorFindMatchBorder","search.resultsInfoForeground","hoverHighlight","hoverBackground","hoverForeground","hoverBorder","statusBarBackground","activeLinkForeground","editorInlayHintForeground","editorInlayHintBackground","editorInlayHintForegroundTypes","editorInlayHintBackgroundTypes","editorInlayHintForegroundParameter","editorInlayHintBackgroundParameter","editorLightBulbForeground","editorLightBulbAutoFixForeground","diffEditorInserted","diffEditorRemoved","diffEditorInsertedLines","diffEditorRemovedLines","diffEditorInsertedLineGutter","diffEditorRemovedLineGutter","diffEditorOverviewInserted","diffEditorOverviewRemoved","diffEditorInsertedOutline","diffEditorRemovedOutline","diffEditorBorder","diffDiagonalFill","diffEditor.unchangedRegionBackground","diffEditor.unchangedRegionForeground","diffEditor.unchangedCodeBackground","listFocusBackground","listFocusForeground","listFocusOutline","listFocusAndSelectionOutline","listActiveSelectionBackground","listActiveSelectionForeground","listActiveSelectionIconForeground","listInactiveSelectionBackground","listInactiveSelectionForeground","listInactiveSelectionIconForeground","listInactiveFocusBackground","listInactiveFocusOutline","listHoverBackground","listHoverForeground","listDropBackground","highlight","listFocusHighlightForeground","invalidItemForeground","listErrorForeground","listWarningForeground","listFilterWidgetBackground","listFilterWidgetOutline","listFilterWidgetNoMatchesOutline","listFilterWidgetShadow","listFilterMatchHighlight","listFilterMatchHighlightBorder","treeIndentGuidesStroke","treeInactiveIndentGuidesStroke","tableColumnsBorder","tableOddRowsBackgroundColor","listDeemphasizedForeground","checkbox.background","checkbox.select.background","checkbox.foreground","checkbox.border","checkbox.select.border","quickInput.list.focusBackground deprecation","quickInput.listFocusForeground","quickInput.listFocusIconForeground","quickInput.listFocusBackground","menuBorder","menuForeground","menuBackground","menuSelectionForeground","menuSelectionBackground","menuSelectionBorder","menuSeparatorBackground","toolbarHoverBackground","toolbarHoverOutline","toolbarActiveBackground","snippetTabstopHighlightBackground","snippetTabstopHighlightBorder","snippetFinalTabstopHighlightBackground","snippetFinalTabstopHighlightBorder","breadcrumbsFocusForeground","breadcrumbsBackground","breadcrumbsFocusForeground","breadcrumbsSelectedForeground","breadcrumbsSelectedBackground","mergeCurrentHeaderBackground","mergeCurrentContentBackground","mergeIncomingHeaderBackground","mergeIncomingContentBackground","mergeCommonHeaderBackground","mergeCommonContentBackground","mergeBorder","overviewRulerCurrentContentForeground","overviewRulerIncomingContentForeground","overviewRulerCommonContentForeground","overviewRulerFindMatchForeground","overviewRulerSelectionHighlightForeground","minimapFindMatchHighlight","minimapSelectionOccurrenceHighlight","minimapSelectionHighlight","minimapInfo","overviewRuleWarning","minimapError","minimapBackground","minimapForegroundOpacity","minimapSliderBackground","minimapSliderHoverBackground","minimapSliderActiveBackground","problemsErrorIconForeground","problemsWarningIconForeground","problemsInfoIconForeground","chartsForeground","chartsLines","chartsRed","chartsBlue","chartsYellow","chartsOrange","chartsGreen","chartsPurple"],"vs/base/common/actions":["submenu.empty"],"vs/workbench/services/workspaces/browser/abstractWorkspaceEditingService":["save","saveWorkspace","errorInvalidTaskConfiguration","openWorkspaceConfigurationFile"],"vs/workbench/services/configurationResolver/browser/baseConfigurationResolverService":["commandVariable.noStringType","inputVariable.noInputSection","inputVariable.missingAttribute","inputVariable.defaultInputValue","inputVariable.command.noStringType","inputVariable.unknownType","inputVariable.undefinedVariable"],"vs/platform/keyboardLayout/common/keyboardConfig":["keyboardConfigurationTitle","dispatch","mapAltGrToCtrlAlt"],"vs/workbench/services/extensionManagement/common/extensionManagementService":["singleDependentError","twoDependentsError","multipleDependentsError","Manifest is not found","cannot be installed","install extension","install extensions","install single extension","install multiple extensions",{"key":"install","comment":["&& denotes a mnemonic"]},{"key":"install and do no sync","comment":["&& denotes a mnemonic"]},"extensionInstallWorkspaceTrustMessage","extensionInstallWorkspaceTrustButton","extensionInstallWorkspaceTrustContinueButton","extensionInstallWorkspaceTrustManageButton","VS Code for Web","limited support",{"key":"install anyways","comment":["&& denotes a mnemonic"]},{"key":"showExtensions","comment":["&& denotes a mnemonic"]},"non web extensions detail","non web extensions"],"vs/workbench/services/extensionManagement/electron-sandbox/remoteExtensionManagementService":["notFoundReleaseExtension","notFoundCompatibleDependency"],"vs/workbench/services/workingCopy/electron-sandbox/workingCopyBackupTracker":["backupTrackerBackupFailed","backupTrackerConfirmFailed","backupErrorDetails","backupBeforeShutdownMessage","backupBeforeShutdownDetail","saveBeforeShutdown","revertBeforeShutdown","discardBackupsBeforeShutdown"],"vs/workbench/services/workingCopy/common/workingCopyHistoryService":["default.source","moved.source","renamed.source","join.workingCopyHistory"],"vs/platform/action/common/actionCommonCategories":["view","help","test","file","preferences",{"key":"developer","comment":["A developer on Code itself or someone diagnosing issues in Code"]}],"vs/workbench/services/extensions/common/abstractExtensionService":["looping","looping","extensionTestError","extensionStopVetoError","extensionStopVetoMessage","extensionStopVetoDetailsOne","extensionStopVetoDetailsMany","extensionService.autoRestart","extensionService.crash","restart"],"vs/workbench/services/extensions/electron-sandbox/cachedExtensionScanner":["extensionCache.invalid","reloadWindow"],"vs/workbench/services/auxiliaryWindow/browser/auxiliaryWindowService":["unableToOpenWindowError","unableToOpenWindow","unableToOpenWindowDetail",{"key":"retry","comment":["&& denotes a mnemonic"]}],"vs/workbench/contrib/logs/electron-sandbox/logsActions":["openLogsFolder","openExtensionLogsFolder"],"vs/editor/common/editorContextKeys":["editorTextFocus","editorFocus","textInputFocus","editorReadonly","inDiffEditor","isEmbeddedDiffEditor","comparingMovedCode","accessibleDiffViewerVisible","diffEditorRenderSideBySideInlineBreakpointReached","editorColumnSelection","editorHasSelection","editorHasMultipleSelections","editorTabMovesFocus","editorHoverVisible","editorHoverFocused","stickyScrollFocused","stickyScrollVisible","standaloneColorPickerVisible","standaloneColorPickerFocused","inCompositeEditor","editorLangId","editorHasCompletionItemProvider","editorHasCodeActionsProvider","editorHasCodeLensProvider","editorHasDefinitionProvider","editorHasDeclarationProvider","editorHasImplementationProvider","editorHasTypeDefinitionProvider","editorHasHoverProvider","editorHasDocumentHighlightProvider","editorHasDocumentSymbolProvider","editorHasReferenceProvider","editorHasRenameProvider","editorHasSignatureHelpProvider","editorHasInlayHintsProvider","editorHasDocumentFormattingProvider","editorHasDocumentSelectionFormattingProvider","editorHasMultipleDocumentFormattingProvider","editorHasMultipleDocumentSelectionFormattingProvider"],"vs/workbench/services/extensions/electron-sandbox/localProcessExtensionHost":["extensionHost.startupFailDebug","extensionHost.startupFail","reloadWindow","join.extensionDevelopment"],"vs/workbench/common/editor":["promptOpenWith.defaultEditor.displayName","builtinProviderDisplayName","openLargeFile","configureEditorLargeFileConfirmation"],"vs/workbench/contrib/localization/electron-sandbox/minimalTranslations":["showLanguagePackExtensions","searchMarketplace","installAndRestartMessage","installAndRestart"],"vs/workbench/contrib/localization/common/localization.contribution":["vscode.extension.contributes.localizations","vscode.extension.contributes.localizations.languageId","vscode.extension.contributes.localizations.languageName","vscode.extension.contributes.localizations.languageNameLocalized","vscode.extension.contributes.localizations.translations","vscode.extension.contributes.localizations.translations.id","vscode.extension.contributes.localizations.translations.id.pattern","vscode.extension.contributes.localizations.translations.path"],"vs/workbench/contrib/codeEditor/electron-sandbox/selectionClipboard":["actions.pasteSelectionClipboard"],"vs/workbench/contrib/codeEditor/electron-sandbox/startDebugTextMate":["startDebugTextMate"],"vs/workbench/contrib/issue/common/issue.contribution":[{"key":"reportIssueInEnglish","comment":["Translate this to \\"Report Issue in English\\" in all languages please!"]},{"key":"miReportIssue","comment":["&& denotes a mnemonic","Translate this to \\"Report Issue in English\\" in all languages please!"]}],"vs/workbench/contrib/extensions/electron-sandbox/runtimeExtensionsEditor":["extensionHostProfileStart","stopExtensionHostProfileStart","saveExtensionHostProfile","saveprofile.dialogTitle","saveprofile.saveButton"],"vs/workbench/browser/editor":["preview","pinned"],"vs/workbench/contrib/extensions/electron-sandbox/debugExtensionHostAction":["debugExtensionHost","restart1","restart2",{"key":"restart3","comment":["&& denotes a mnemonic"]},"debugExtensionHost.launch.name"],"vs/workbench/contrib/extensions/electron-sandbox/extensionsActions":["openExtensionsFolder","cleanUpExtensionsFolder"],"vs/workbench/contrib/extensions/common/runtimeExtensionsInput":["extensionsInputName"],"vs/workbench/contrib/extensions/electron-sandbox/extensionProfileService":["status.profiler","profilingExtensionHost","profilingExtensionHost","selectAndStartDebug","profilingExtensionHostTime","restart1","restart2",{"key":"restart3","comment":["&& denotes a mnemonic"]}],"vs/workbench/contrib/extensions/electron-sandbox/extensionsAutoProfiler":["unresponsive-exthost","show"],"vs/workbench/contrib/terminal/common/terminal":["vscode.extension.contributes.terminal","vscode.extension.contributes.terminal.profiles","vscode.extension.contributes.terminal.profiles.id","vscode.extension.contributes.terminal.profiles.title","vscode.extension.contributes.terminal.types.icon","vscode.extension.contributes.terminal.types.icon.light","vscode.extension.contributes.terminal.types.icon.dark"],"vs/workbench/services/dialogs/browser/simpleFileDialog":["openLocalFile","saveLocalFile","openLocalFolder","openLocalFileFolder","remoteFileDialog.notConnectedToRemote","remoteFileDialog.local","remoteFileDialog.badPath","remoteFileDialog.cancel","remoteFileDialog.invalidPath","remoteFileDialog.validateFolder","remoteFileDialog.validateExisting","remoteFileDialog.validateBadFilename","remoteFileDialog.validateCreateDirectory","remoteFileDialog.validateNonexistentDir","remoteFileDialog.validateReadonlyFolder","remoteFileDialog.validateNonexistentDir","remoteFileDialog.windowsDriveLetter","remoteFileDialog.validateFileOnly","remoteFileDialog.validateFolderOnly"],"vs/editor/common/languages":["Array","Boolean","Class","Constant","Constructor","Enum","EnumMember","Event","Field","File","Function","Interface","Key","Method","Module","Namespace","Null","Number","Object","Operator","Package","Property","String","Struct","TypeParameter","Variable","symbolAriaLabel"],"vs/workbench/services/userDataSync/common/userDataSync":["settings","keybindings","snippets","tasks","extensions","ui state label","profiles","workspace state label","syncViewIcon","download sync activity title","sync category"],"vs/workbench/contrib/tasks/common/tasks":["tasks.taskRunningContext","tasksCategory","TaskDefinition.missingRequiredProperty"],"vs/workbench/contrib/tasks/common/taskService":["tasks.customExecutionSupported","tasks.shellExecutionSupported","tasks.taskCommandsRegistered","tasks.processExecutionSupported","tasks.serverlessWebContext"],"vs/workbench/contrib/performance/electron-sandbox/startupProfiler":["prof.message","prof.detail",{"key":"prof.restartAndFileIssue","comment":["&& denotes a mnemonic"]},"prof.restart","prof.thanks","prof.detail.restart",{"key":"prof.restart.button","comment":["&& denotes a mnemonic"]}],"vs/workbench/common/views":["views log","defaultViewIcon","duplicateId","treeView.notRegistered"],"vs/workbench/contrib/terminal/common/terminalContextKey":["terminalFocusContextKey","terminalFocusInAnyContextKey","terminalEditorFocusContextKey","terminalCountContextKey","terminalTabsFocusContextKey","terminalShellTypeContextKey","terminalAltBufferActive","terminalSuggestWidgetVisible","terminalViewShowing","terminalTextSelectedContextKey","terminalTextSelectedInFocusedContextKey","terminalProcessSupportedContextKey","terminalTabsSingularSelectedContextKey","isSplitTerminalContextKey","inTerminalRunCommandPickerContextKey","terminalShellIntegrationEnabled"],"vs/platform/audioCues/browser/audioCueService":["audioCues.lineHasError.name","audioCues.lineHasWarning.name","audioCues.lineHasFoldedArea.name","audioCues.lineHasBreakpoint.name","audioCues.lineHasInlineSuggestion.name","audioCues.terminalQuickFix.name","audioCues.onDebugBreak.name","audioCues.noInlayHints","audioCues.taskCompleted","audioCues.taskFailed","audioCues.terminalCommandFailed","audioCues.terminalBell","audioCues.notebookCellCompleted","audioCues.notebookCellFailed","audioCues.diffLineInserted","audioCues.diffLineDeleted","audioCues.diffLineModified","audioCues.chatRequestSent","audioCues.chatResponseReceived","audioCues.chatResponsePending","audioCues.clear","audioCues.save","audioCues.format"],"vs/workbench/contrib/webview/electron-sandbox/webviewCommands":["openToolsLabel","iframeWebviewAlert"],"vs/workbench/contrib/localHistory/electron-sandbox/localHistoryCommands":["revealInWindows","revealInMac","openContainer"],"vs/workbench/contrib/mergeEditor/electron-sandbox/devCommands":["mergeEditor","merge.dev.openState","mergeEditor.enterJSON","merge.dev.openSelectionInTemporaryMergeEditor"],"vs/workbench/contrib/tasks/browser/terminalTaskSystem":["TerminalTaskSystem.unknownError","TerminalTaskSystem.taskLoadReporting","dependencyCycle","dependencyFailed","TerminalTaskSystem.nonWatchingMatcher",{"key":"task.executingInFolder","comment":["The workspace folder the task is running in","The task command line or label"]},{"key":"task.executing.shellIntegration","comment":["The task command line or label"]},{"key":"task.executingInFolder","comment":["The workspace folder the task is running in","The task command line or label"]},{"key":"task.executing.shell-integration","comment":["The task command line or label"]},{"key":"task.executing","comment":["The task command line or label"]},"TerminalTaskSystem","unknownProblemMatcher","closeTerminal","reuseTerminal"],"vs/workbench/contrib/tasks/browser/abstractTaskService":["ConfigureTaskRunnerAction.label","tasks","TaskService.pickBuildTaskForLabel","runTask.arg","runTask.label","runTask.type","runTask.task","taskServiceOutputPrompt","showOutput","TaskServer.folderIgnored","TaskService.providerUnavailable","TaskService.noTestTask1","TaskService.noTestTask2","TaskService.noBuildTask1","TaskService.noBuildTask2","TaskServer.noTask","TaskService.associate","TaskService.attachProblemMatcher.continueWithout","TaskService.attachProblemMatcher.never","TaskService.attachProblemMatcher.neverType","TaskService.attachProblemMatcher.learnMoreAbout","selectProblemMatcher","customizeParseErrors","tasksJsonComment","moreThanOneBuildTask","TaskSystem.saveBeforeRun.prompt.title","detail",{"key":"saveBeforeRun.save","comment":["&& denotes a mnemonic"]},"saveBeforeRun.dontSave","TaskSystem.activeSame.noBackground","terminateTask","restartTask","TaskSystem.active","TaskSystem.restartFailed","unexpectedTaskType","TaskService.providerUnavailable","TaskService.noConfiguration","TaskSystem.configurationErrors",{"key":"TaskSystem.invalidTaskJsonOther","comment":["Message notifies of an error in one of several places there is tasks related json, not necessarily in a file named tasks.json"]},"TasksSystem.locationWorkspaceConfig","TaskSystem.versionWorkspaceFile","TasksSystem.locationUserConfig","TaskSystem.versionSettings","TaskSystem.workspaceFolderError","TaskSystem.configurationErrors","taskService.ignoreingFolder","TaskSystem.invalidTaskJson","TerminateAction.label","TaskSystem.unknownError","configureTask","recentlyUsed","configured","detected","TaskService.ignoredFolder","TaskService.notAgain","TaskService.requestTrust","TaskService.pickRunTask","TaskService.noEntryToRun","TaskService.noEntryToRun","TaskService.fetchingBuildTasks","TaskService.pickBuildTask","TaskService.noBuildTask","TaskService.fetchingTestTasks","TaskService.pickTestTask","TaskService.noTestTaskTerminal","TaskService.taskToTerminate","TaskService.noTaskRunning","TaskService.terminateAllRunningTasks","TerminateAction.noProcess","TerminateAction.failed","TaskService.taskToRestart","TaskService.noTaskToRestart","TaskService.template","taskQuickPick.userSettings","TaskService.createJsonFile","TaskService.openJsonFile","TaskService.pickTask","TaskService.defaultBuildTaskExists","TaskService.pickTask","TaskService.pickDefaultBuildTask","TaskService.defaultTestTaskExists","TaskService.pickDefaultTestTask","TaskService.pickShowTask","TaskService.noTaskIsRunning","taskService.upgradeVersion","taskService.upgradeVersionPlural","taskService.openDiff","taskService.openDiffs"],"vs/workbench/contrib/chat/electron-sandbox/actions/voiceChatActions":["voiceChatGettingReady","voiceChatInProgress","quickVoiceChatInProgress","inlineVoiceChatInProgress","voiceChatInViewInProgress","voiceChatInEditorInProgress","listening","workbench.action.chat.voiceChatInView.label","workbench.action.chat.inlineVoiceChat","workbench.action.chat.quickVoiceChat.label","workbench.action.chat.startVoiceChat.label","workbench.action.chat.stopListening.label","workbench.action.chat.stopListeningInChatView.label","workbench.action.chat.stopListeningInChatEditor.label","workbench.action.chat.stopListeningInQuickChat.label","workbench.action.chat.stopListeningInInlineChat.label","workbench.action.chat.stopListeningAndSubmit.label"],"vs/workbench/api/common/extHostTelemetry":["extensionTelemetryLog"],"vs/workbench/api/common/extHostExtensionService":["extensionTestError1","extensionTestError"],"vs/workbench/api/common/extHostWorkspace":["updateerror"],"vs/workbench/api/common/extHostTerminalService":["launchFail.idMissingOnExtHost"],"vs/workbench/api/common/extHostTunnelService":["tunnelPrivacy.private","tunnelPrivacy.public"],"vs/workbench/api/common/extHostLogService":["remote","worker","local"],"vs/platform/terminal/node/terminalProcess":["launchFail.cwdNotDirectory","launchFail.cwdDoesNotExist","launchFail.executableDoesNotExist","launchFail.executableIsNotFileOrSymlink"],"vs/workbench/api/node/extHostDebugService":["debug.terminal.title"],"vs/platform/extensions/common/extensionValidator":["extensionDescription.publisher","extensionDescription.name","extensionDescription.version","extensionDescription.engines","extensionDescription.engines.vscode","extensionDescription.extensionDependencies","extensionDescription.activationEvents1","extensionDescription.activationEvents2","extensionDescription.extensionKind","extensionDescription.main1","extensionDescription.main2","extensionDescription.browser1","extensionDescription.browser2","notSemver","versionSyntax","versionSpecificity1","versionSpecificity2","versionMismatch"],"vs/platform/extensionManagement/common/extensionNls":["missingNLSKey"],"vs/base/common/jsonErrorMessages":["error.invalidSymbol","error.invalidNumberFormat","error.propertyNameExpected","error.valueExpected","error.colonExpected","error.commaExpected","error.closeBraceExpected","error.closeBracketExpected","error.endOfFileExpected"],"vs/base/node/zip":["invalid file","incompleteExtract","notFound"],"vs/platform/extensionManagement/common/abstractExtensionManagementService":["MarketPlaceDisabled","malicious extension","notFoundDeprecatedReplacementExtension","incompatible platform","notFoundReleaseExtension","notFoundCompatibleDependency","singleDependentError","twoDependentsError","multipleDependentsError","singleIndirectDependentError","twoIndirectDependentsError","multipleIndirectDependentsError"],"vs/platform/extensionManagement/node/extensionManagementUtil":["invalidManifest"],"vs/platform/files/common/io":["fileTooLargeError"],"vs/platform/shell/node/shellEnv":["resolveShellEnvTimeout","resolveShellEnvError","resolveShellEnvExitError"],"vs/platform/dialogs/electron-main/dialogMainService":["open","openFolder","openFile","openWorkspaceTitle",{"key":"openWorkspace","comment":["&& denotes a mnemonic"]}],"vs/platform/files/electron-main/diskFileSystemProviderServer":["binFailed","trashFailed"],"vs/platform/externalTerminal/node/externalTerminalService":["console.title","mac.terminal.script.failed","mac.terminal.type.not.supported","press.any.key","linux.term.failed","ext.term.app.not.found"],"vs/platform/issue/electron-main/issueMainService":["local","issueReporter","processExplorer","trace.message","trace.detail",{"key":"trace.ok","comment":["&& denotes a mnemonic"]},"confirmCloseIssueReporter",{"key":"yes","comment":["&& denotes a mnemonic"]},"cancel","issueReporterWriteToClipboard",{"key":"ok","comment":["&& denotes a mnemonic"]},"cancel"],"vs/platform/native/electron-main/nativeHostMainService":["warnEscalation",{"key":"ok","comment":["&& denotes a mnemonic"]},"cancel","cantCreateBinFolder","warnEscalationUninstall",{"key":"ok","comment":["&& denotes a mnemonic"]},"cancel","cantUninstall","sourceMissing"],"vs/platform/workspaces/electron-main/workspacesHistoryMainService":["newWindow","newWindowDesc","recentFoldersAndWorkspaces","recentFolders","untitledWorkspace","workspaceName"],"vs/platform/workspaces/electron-main/workspacesManagementMainService":[{"key":"ok","comment":["&& denotes a mnemonic"]},"workspaceOpenedMessage","workspaceOpenedDetail"],"vs/platform/windows/electron-main/windowsMainService":[{"key":"ok","comment":["&& denotes a mnemonic"]},"pathNotExistTitle","uriInvalidTitle","pathNotExistDetail","uriInvalidDetail",{"key":"allow","comment":["&& denotes a mnemonic"]},{"key":"cancel","comment":["&& denotes a mnemonic"]},{"key":"learnMore","comment":["&& denotes a mnemonic"]},"confirmOpenMessage","confirmOpenDetail","doNotAskAgain"],"vs/base/browser/ui/button/button":["button dropdown more actions"],"vs/base/common/date":["date.fromNow.in","date.fromNow.now","date.fromNow.seconds.singular.ago.fullWord","date.fromNow.seconds.singular.ago","date.fromNow.seconds.plural.ago.fullWord","date.fromNow.seconds.plural.ago","date.fromNow.seconds.singular.fullWord","date.fromNow.seconds.singular","date.fromNow.seconds.plural.fullWord","date.fromNow.seconds.plural","date.fromNow.minutes.singular.ago.fullWord","date.fromNow.minutes.singular.ago","date.fromNow.minutes.plural.ago.fullWord","date.fromNow.minutes.plural.ago","date.fromNow.minutes.singular.fullWord","date.fromNow.minutes.singular","date.fromNow.minutes.plural.fullWord","date.fromNow.minutes.plural","date.fromNow.hours.singular.ago.fullWord","date.fromNow.hours.singular.ago","date.fromNow.hours.plural.ago.fullWord","date.fromNow.hours.plural.ago","date.fromNow.hours.singular.fullWord","date.fromNow.hours.singular","date.fromNow.hours.plural.fullWord","date.fromNow.hours.plural","date.fromNow.days.singular.ago","date.fromNow.days.plural.ago","date.fromNow.days.singular","date.fromNow.days.plural","date.fromNow.weeks.singular.ago.fullWord","date.fromNow.weeks.singular.ago","date.fromNow.weeks.plural.ago.fullWord","date.fromNow.weeks.plural.ago","date.fromNow.weeks.singular.fullWord","date.fromNow.weeks.singular","date.fromNow.weeks.plural.fullWord","date.fromNow.weeks.plural","date.fromNow.months.singular.ago.fullWord","date.fromNow.months.singular.ago","date.fromNow.months.plural.ago.fullWord","date.fromNow.months.plural.ago","date.fromNow.months.singular.fullWord","date.fromNow.months.singular","date.fromNow.months.plural.fullWord","date.fromNow.months.plural","date.fromNow.years.singular.ago.fullWord","date.fromNow.years.singular.ago","date.fromNow.years.plural.ago.fullWord","date.fromNow.years.plural.ago","date.fromNow.years.singular.fullWord","date.fromNow.years.singular","date.fromNow.years.plural.fullWord","date.fromNow.years.plural"],"vs/platform/userDataSync/common/keybindingsSync":["errorInvalidSettings","errorInvalidSettings"],"vs/platform/userDataSync/common/settingsSync":["errorInvalidSettings"],"vs/platform/userDataSync/common/abstractSynchronizer":[{"key":"incompatible","comment":["This is an error while syncing a resource that its local version is not compatible with its remote version."]},"incompatible sync data"],"vs/platform/userDataSync/common/userDataAutoSyncService":["default service changed","service changed","turned off","default service changed","service changed","session expired","turned off machine"],"vs/base/browser/ui/tree/abstractTree":["filter","fuzzySearch","type to filter","type to search","type to search","close","not found"],"vs/platform/theme/common/iconRegistry":["iconDefinition.fontId","iconDefinition.fontCharacter","widgetClose","previousChangeIcon","nextChangeIcon"],"vs/editor/common/core/editorColorRegistry":["lineHighlight","lineHighlightBorderBox","rangeHighlight","rangeHighlightBorder","symbolHighlight","symbolHighlightBorder","caret","editorCursorBackground","editorWhitespaces","editorLineNumbers","editorIndentGuides","deprecatedEditorIndentGuides","editorActiveIndentGuide","deprecatedEditorActiveIndentGuide","editorIndentGuides1","editorIndentGuides2","editorIndentGuides3","editorIndentGuides4","editorIndentGuides5","editorIndentGuides6","editorActiveIndentGuide1","editorActiveIndentGuide2","editorActiveIndentGuide3","editorActiveIndentGuide4","editorActiveIndentGuide5","editorActiveIndentGuide6","editorActiveLineNumber","deprecatedEditorActiveLineNumber","editorActiveLineNumber","editorDimmedLineNumber","editorRuler","editorCodeLensForeground","editorBracketMatchBackground","editorBracketMatchBorder","editorOverviewRulerBorder","editorOverviewRulerBackground","editorGutter","unnecessaryCodeBorder","unnecessaryCodeOpacity","editorGhostTextBorder","editorGhostTextForeground","editorGhostTextBackground","overviewRulerRangeHighlight","overviewRuleError","overviewRuleWarning","overviewRuleInfo","editorBracketHighlightForeground1","editorBracketHighlightForeground2","editorBracketHighlightForeground3","editorBracketHighlightForeground4","editorBracketHighlightForeground5","editorBracketHighlightForeground6","editorBracketHighlightUnexpectedBracketForeground","editorBracketPairGuide.background1","editorBracketPairGuide.background2","editorBracketPairGuide.background3","editorBracketPairGuide.background4","editorBracketPairGuide.background5","editorBracketPairGuide.background6","editorBracketPairGuide.activeBackground1","editorBracketPairGuide.activeBackground2","editorBracketPairGuide.activeBackground3","editorBracketPairGuide.activeBackground4","editorBracketPairGuide.activeBackground5","editorBracketPairGuide.activeBackground6","editorUnicodeHighlight.border","editorUnicodeHighlight.background"],"vs/editor/browser/coreCommands":["stickydesc","stickydesc","removedCursor"],"vs/editor/browser/widget/diffEditor/diffEditor.contribution":["toggleCollapseUnchangedRegions","toggleShowMovedCodeBlocks","toggleUseInlineViewWhenSpaceIsLimited","useInlineViewWhenSpaceIsLimited","showMoves","diffEditor","switchSide","exitCompareMove","collapseAllUnchangedRegions","showAllUnchangedRegions","accessibleDiffViewer","editor.action.accessibleDiffViewer.next","Open Accessible Diff Viewer","editor.action.accessibleDiffViewer.prev"],"vs/editor/browser/widget/codeEditorWidget":["cursors.maximum","goToSetting"],"vs/platform/contextkey/common/scanner":["contextkey.scanner.hint.didYouMean1","contextkey.scanner.hint.didYouMean2","contextkey.scanner.hint.didYouMean3","contextkey.scanner.hint.didYouForgetToOpenOrCloseQuote","contextkey.scanner.hint.didYouForgetToEscapeSlash"],"vs/editor/contrib/anchorSelect/browser/anchorSelect":["selectionAnchor","anchorSet","setSelectionAnchor","goToSelectionAnchor","selectFromAnchorToCursor","cancelSelectionAnchor"],"vs/editor/contrib/bracketMatching/browser/bracketMatching":["overviewRulerBracketMatchForeground","smartSelect.jumpBracket","smartSelect.selectToBracket","smartSelect.removeBrackets",{"key":"miGoToBracket","comment":["&& denotes a mnemonic"]}],"vs/editor/contrib/caretOperations/browser/caretOperations":["caret.moveLeft","caret.moveRight"],"vs/editor/contrib/caretOperations/browser/transpose":["transposeLetters.label"],"vs/editor/contrib/clipboard/browser/clipboard":[{"key":"miCut","comment":["&& denotes a mnemonic"]},"actions.clipboard.cutLabel","actions.clipboard.cutLabel","actions.clipboard.cutLabel",{"key":"miCopy","comment":["&& denotes a mnemonic"]},"actions.clipboard.copyLabel","actions.clipboard.copyLabel","actions.clipboard.copyLabel","copy as","copy as","share","share","share",{"key":"miPaste","comment":["&& denotes a mnemonic"]},"actions.clipboard.pasteLabel","actions.clipboard.pasteLabel","actions.clipboard.pasteLabel","actions.clipboard.copyWithSyntaxHighlightingLabel"],"vs/editor/contrib/codeAction/browser/codeActionContributions":["showCodeActionHeaders","includeNearbyQuickFixes"],"vs/editor/contrib/codelens/browser/codelensController":["showLensOnLine","placeHolder"],"vs/editor/contrib/colorPicker/browser/standaloneColorPickerActions":["showOrFocusStandaloneColorPicker",{"key":"mishowOrFocusStandaloneColorPicker","comment":["&& denotes a mnemonic"]},{"key":"hideColorPicker","comment":["Action that hides the color picker"]},{"key":"insertColorWithStandaloneColorPicker","comment":["Action that inserts color with standalone color picker"]}],"vs/editor/contrib/comment/browser/comment":["comment.line",{"key":"miToggleLineComment","comment":["&& denotes a mnemonic"]},"comment.line.add","comment.line.remove","comment.block",{"key":"miToggleBlockComment","comment":["&& denotes a mnemonic"]}],"vs/editor/contrib/contextmenu/browser/contextmenu":["context.minimap.minimap","context.minimap.renderCharacters","context.minimap.size","context.minimap.size.proportional","context.minimap.size.fill","context.minimap.size.fit","context.minimap.slider","context.minimap.slider.mouseover","context.minimap.slider.always","action.showContextMenu.label"],"vs/editor/contrib/cursorUndo/browser/cursorUndo":["cursor.undo","cursor.redo"],"vs/editor/contrib/dropOrPasteInto/browser/copyPasteContribution":["pasteAs","pasteAs.id"],"vs/editor/contrib/dropOrPasteInto/browser/dropIntoEditorContribution":["defaultProviderDescription"],"vs/editor/contrib/folding/browser/folding":["unfoldAction.label","unFoldRecursivelyAction.label","foldAction.label","toggleFoldAction.label","foldRecursivelyAction.label","foldAllBlockComments.label","foldAllMarkerRegions.label","unfoldAllMarkerRegions.label","foldAllExcept.label","unfoldAllExcept.label","foldAllAction.label","unfoldAllAction.label","gotoParentFold.label","gotoPreviousFold.label","gotoNextFold.label","createManualFoldRange.label","removeManualFoldingRanges.label","foldLevelAction.label"],"vs/editor/contrib/find/browser/findController":["too.large.for.replaceall","startFindAction",{"key":"miFind","comment":["&& denotes a mnemonic"]},"actions.find.isRegexOverride","actions.find.wholeWordOverride","actions.find.matchCaseOverride","actions.find.preserveCaseOverride","startFindWithArgsAction","startFindWithSelectionAction","findNextMatchAction","findPreviousMatchAction","findMatchAction.goToMatch","findMatchAction.noResults","findMatchAction.inputPlaceHolder","findMatchAction.inputValidationMessage","findMatchAction.inputValidationMessage","nextSelectionMatchFindAction","previousSelectionMatchFindAction","startReplace",{"key":"miReplace","comment":["&& denotes a mnemonic"]}],"vs/editor/contrib/fontZoom/browser/fontZoom":["EditorFontZoomIn.label","EditorFontZoomOut.label","EditorFontZoomReset.label"],"vs/editor/contrib/format/browser/formatActions":["formatDocument.label","formatSelection.label"],"vs/editor/contrib/gotoSymbol/browser/goToCommands":["peek.submenu","def.title","noResultWord","generic.noResults","actions.goToDecl.label",{"key":"miGotoDefinition","comment":["&& denotes a mnemonic"]},"actions.goToDeclToSide.label","actions.previewDecl.label","decl.title","decl.noResultWord","decl.generic.noResults","actions.goToDeclaration.label",{"key":"miGotoDeclaration","comment":["&& denotes a mnemonic"]},"decl.noResultWord","decl.generic.noResults","actions.peekDecl.label","typedef.title","goToTypeDefinition.noResultWord","goToTypeDefinition.generic.noResults","actions.goToTypeDefinition.label",{"key":"miGotoTypeDefinition","comment":["&& denotes a mnemonic"]},"actions.peekTypeDefinition.label","impl.title","goToImplementation.noResultWord","goToImplementation.generic.noResults","actions.goToImplementation.label",{"key":"miGotoImplementation","comment":["&& denotes a mnemonic"]},"actions.peekImplementation.label","references.no","references.noGeneric","goToReferences.label",{"key":"miGotoReference","comment":["&& denotes a mnemonic"]},"ref.title","references.action.label","ref.title","label.generic","generic.title","generic.noResult","ref.title"],"vs/editor/contrib/gotoSymbol/browser/link/goToDefinitionAtPosition":["multipleResults"],"vs/editor/contrib/gotoError/browser/gotoError":["markerAction.next.label","nextMarkerIcon","markerAction.previous.label","previousMarkerIcon","markerAction.nextInFiles.label",{"key":"miGotoNextProblem","comment":["&& denotes a mnemonic"]},"markerAction.previousInFiles.label",{"key":"miGotoPreviousProblem","comment":["&& denotes a mnemonic"]}],"vs/editor/contrib/hover/browser/hover":[{"key":"showOrFocusHover","comment":["Label for action that will trigger the showing/focusing of a hover in the editor.","If the hover is not visible, it will show the hover.","This allows for users to show the hover without using the mouse.","If the hover is already visible, it will take focus."]},{"key":"showDefinitionPreviewHover","comment":["Label for action that will trigger the showing of definition preview hover in the editor.","This allows for users to show the definition preview hover without using the mouse."]},{"key":"scrollUpHover","comment":["Action that allows to scroll up in the hover widget with the up arrow when the hover widget is focused."]},{"key":"scrollDownHover","comment":["Action that allows to scroll down in the hover widget with the up arrow when the hover widget is focused."]},{"key":"scrollLeftHover","comment":["Action that allows to scroll left in the hover widget with the left arrow when the hover widget is focused."]},{"key":"scrollRightHover","comment":["Action that allows to scroll right in the hover widget with the right arrow when the hover widget is focused."]},{"key":"pageUpHover","comment":["Action that allows to page up in the hover widget with the page up command when the hover widget is focused."]},{"key":"pageDownHover","comment":["Action that allows to page down in the hover widget with the page down command when the hover widget is focused."]},{"key":"goToTopHover","comment":["Action that allows to go to the top of the hover widget with the home command when the hover widget is focused."]},{"key":"goToBottomHover","comment":["Action that allows to go to the bottom in the hover widget with the end command when the hover widget is focused."]}],"vs/editor/contrib/indentation/browser/indentation":["indentationToSpaces","indentationToTabs","configuredTabSize","defaultTabSize","currentTabSize",{"key":"selectTabWidth","comment":["Tab corresponds to the tab key"]},"indentUsingTabs","indentUsingSpaces","changeTabDisplaySize","detectIndentation","editor.reindentlines","editor.reindentselectedlines"],"vs/editor/contrib/inPlaceReplace/browser/inPlaceReplace":["InPlaceReplaceAction.previous.label","InPlaceReplaceAction.next.label"],"vs/editor/contrib/lineSelection/browser/lineSelection":["expandLineSelection"],"vs/editor/contrib/linesOperations/browser/linesOperations":["lines.copyUp",{"key":"miCopyLinesUp","comment":["&& denotes a mnemonic"]},"lines.copyDown",{"key":"miCopyLinesDown","comment":["&& denotes a mnemonic"]},"duplicateSelection",{"key":"miDuplicateSelection","comment":["&& denotes a mnemonic"]},"lines.moveUp",{"key":"miMoveLinesUp","comment":["&& denotes a mnemonic"]},"lines.moveDown",{"key":"miMoveLinesDown","comment":["&& denotes a mnemonic"]},"lines.sortAscending","lines.sortDescending","lines.deleteDuplicates","lines.trimTrailingWhitespace","lines.delete","lines.indent","lines.outdent","lines.insertBefore","lines.insertAfter","lines.deleteAllLeft","lines.deleteAllRight","lines.joinLines","editor.transpose","editor.transformToUppercase","editor.transformToLowercase","editor.transformToTitlecase","editor.transformToSnakecase","editor.transformToCamelcase","editor.transformToKebabcase"],"vs/editor/contrib/linkedEditing/browser/linkedEditing":["linkedEditing.label","editorLinkedEditingBackground"],"vs/editor/contrib/links/browser/links":["invalid.url","missing.url","links.navigate.executeCmd","links.navigate.follow","links.navigate.kb.meta.mac","links.navigate.kb.meta","links.navigate.kb.alt.mac","links.navigate.kb.alt","tooltip.explanation","label"],"vs/editor/contrib/multicursor/browser/multicursor":["cursorAdded","cursorsAdded","mutlicursor.insertAbove",{"key":"miInsertCursorAbove","comment":["&& denotes a mnemonic"]},"mutlicursor.insertBelow",{"key":"miInsertCursorBelow","comment":["&& denotes a mnemonic"]},"mutlicursor.insertAtEndOfEachLineSelected",{"key":"miInsertCursorAtEndOfEachLineSelected","comment":["&& denotes a mnemonic"]},"mutlicursor.addCursorsToBottom","mutlicursor.addCursorsToTop","addSelectionToNextFindMatch",{"key":"miAddSelectionToNextFindMatch","comment":["&& denotes a mnemonic"]},"addSelectionToPreviousFindMatch",{"key":"miAddSelectionToPreviousFindMatch","comment":["&& denotes a mnemonic"]},"moveSelectionToNextFindMatch","moveSelectionToPreviousFindMatch","selectAllOccurrencesOfFindMatch",{"key":"miSelectHighlights","comment":["&& denotes a mnemonic"]},"changeAll.label","mutlicursor.focusNextCursor","mutlicursor.focusNextCursor.description","mutlicursor.focusPreviousCursor","mutlicursor.focusPreviousCursor.description"],"vs/editor/contrib/parameterHints/browser/parameterHints":["parameterHints.trigger.label"],"vs/editor/contrib/rename/browser/rename":["no result","resolveRenameLocationFailed","label","quotableLabel","aria","rename.failedApply","rename.failed","rename.label","enablePreview"],"vs/editor/contrib/smartSelect/browser/smartSelect":["smartSelect.expand",{"key":"miSmartSelectGrow","comment":["&& denotes a mnemonic"]},"smartSelect.shrink",{"key":"miSmartSelectShrink","comment":["&& denotes a mnemonic"]}],"vs/editor/contrib/snippet/browser/snippetController2":["inSnippetMode","hasNextTabstop","hasPrevTabstop","next"],"vs/editor/contrib/tokenization/browser/tokenization":["forceRetokenize"],"vs/editor/contrib/suggest/browser/suggestController":["aria.alert.snippet","suggest.trigger.label","accept.insert","accept.insert","accept.replace","accept.replace","accept.insert","detail.more","detail.less","suggest.reset.label"],"vs/editor/contrib/toggleTabFocusMode/browser/toggleTabFocusMode":[{"key":"toggle.tabMovesFocus","comment":["Turn on/off use of tab key for moving focus around VS Code"]},"toggle.tabMovesFocus.on","toggle.tabMovesFocus.off"],"vs/editor/contrib/unicodeHighlighter/browser/unicodeHighlighter":["warningIcon","unicodeHighlighting.thisDocumentHasManyNonBasicAsciiUnicodeCharacters","unicodeHighlighting.thisDocumentHasManyAmbiguousUnicodeCharacters","unicodeHighlighting.thisDocumentHasManyInvisibleUnicodeCharacters","unicodeHighlight.characterIsAmbiguousASCII","unicodeHighlight.characterIsAmbiguous","unicodeHighlight.characterIsInvisible","unicodeHighlight.characterIsNonBasicAscii","unicodeHighlight.adjustSettings","unicodeHighlight.disableHighlightingInComments.shortLabel","action.unicodeHighlight.disableHighlightingInComments","unicodeHighlight.disableHighlightingInStrings.shortLabel","action.unicodeHighlight.disableHighlightingInStrings","unicodeHighlight.disableHighlightingOfAmbiguousCharacters.shortLabel","action.unicodeHighlight.disableHighlightingOfAmbiguousCharacters","unicodeHighlight.disableHighlightingOfInvisibleCharacters.shortLabel","action.unicodeHighlight.disableHighlightingOfInvisibleCharacters","unicodeHighlight.disableHighlightingOfNonBasicAsciiCharacters.shortLabel","action.unicodeHighlight.disableHighlightingOfNonBasicAsciiCharacters","action.unicodeHighlight.showExcludeOptions","unicodeHighlight.excludeInvisibleCharFromBeingHighlighted","unicodeHighlight.excludeCharFromBeingHighlighted","unicodeHighlight.allowCommonCharactersInLanguage","unicodeHighlight.configureUnicodeHighlightOptions"],"vs/editor/contrib/unusualLineTerminators/browser/unusualLineTerminators":["unusualLineTerminators.title","unusualLineTerminators.message","unusualLineTerminators.detail",{"key":"unusualLineTerminators.fix","comment":["&& denotes a mnemonic"]},"unusualLineTerminators.ignore"],"vs/editor/contrib/wordHighlighter/browser/wordHighlighter":["wordHighlight.next.label","wordHighlight.previous.label","wordHighlight.trigger.label"],"vs/editor/contrib/wordOperations/browser/wordOperations":["deleteInsideWord"],"vs/editor/contrib/readOnlyMessage/browser/contribution":["editor.simple.readonly","editor.readonly"],"vs/editor/common/standaloneStrings":["accessibilityHelpTitle","openingDocs","readonlyDiffEditor","editableDiffEditor","readonlyEditor","editableEditor","changeConfigToOnMac","changeConfigToOnWinLinux","auto_on","auto_off","screenReaderModeEnabled","screenReaderModeDisabled","tabFocusModeOnMsg","tabFocusModeOnMsgNoKb","stickScrollKb","stickScrollNoKb","tabFocusModeOffMsg","tabFocusModeOffMsgNoKb","showAccessibilityHelpAction","saveAudioCueDisabled","saveAudioCueAlways","saveAudioCueUserGesture","formatAudioCueDisabled","formatAudioCueAlways","formatAudioCueUserGesture","inspectTokens","gotoLineActionLabel","helpQuickAccess","quickCommandActionLabel","quickCommandActionHelp","quickOutlineActionLabel","quickOutlineByCategoryActionLabel","editorViewAccessibleLabel","accessibilityHelpMessage","toggleHighContrast","bulkEditServiceSummary"],"vs/workbench/browser/parts/auxiliarybar/auxiliaryBarActions":["toggleAuxiliaryIconRight","toggleAuxiliaryIconRightOn","toggleAuxiliaryIconLeft","toggleAuxiliaryIconLeftOn","toggleAuxiliaryBar","secondary sidebar",{"key":"secondary sidebar mnemonic","comment":["&& denotes a mnemonic"]},"focusAuxiliaryBar","toggleSecondarySideBar","toggleSecondarySideBar","hideAuxiliaryBar"],"vs/workbench/browser/parts/panel/panelActions":["maximizeIcon","restoreIcon","closeIcon","togglePanelOffIcon","togglePanelOnIcon","togglePanelVisibility","toggle panel",{"key":"toggle panel mnemonic","comment":["&& denotes a mnemonic"]},"focusPanel","focusPanel","positionPanelLeft","positionPanelLeftShort","positionPanelRight","positionPanelRightShort","positionPanelBottom","positionPanelBottomShort","alignPanelLeft","alignPanelLeftShort","alignPanelRight","alignPanelRightShort","alignPanelCenter","alignPanelCenterShort","alignPanelJustify","alignPanelJustifyShort","positionPanel","alignPanel","previousPanelView","nextPanelView","toggleMaximizedPanel","maximizePanel","minimizePanel","panelMaxNotSupported","closePanel","closeSecondarySideBar","togglePanel","hidePanel","movePanelToSecondarySideBar","movePanelToSecondarySideBar","moveSidePanelToPanel","moveSidePanelToPanel"],"vs/workbench/browser/quickaccess":["inQuickOpen"],"vs/workbench/api/common/jsonValidationExtensionPoint":["contributes.jsonValidation","contributes.jsonValidation.fileMatch","contributes.jsonValidation.url","invalid.jsonValidation","invalid.fileMatch","invalid.url","invalid.path.1","invalid.url.fileschema","invalid.url.schema"],"vs/workbench/services/themes/common/iconExtensionPoint":["contributes.icons","contributes.icon.id","contributes.icon.id.format","contributes.icon.description","contributes.icon.default.fontPath","contributes.icon.default.fontCharacter","contributes.icon.default","invalid.icons.configuration","invalid.icons.id.format","invalid.icons.description","invalid.icons.default.fontPath.extension","invalid.icons.default.fontPath.path","invalid.icons.default"],"vs/workbench/services/themes/common/colorExtensionPoint":["contributes.color","contributes.color.id","contributes.color.id.format","contributes.color.description","contributes.defaults.light","contributes.defaults.dark","contributes.defaults.highContrast","contributes.defaults.highContrastLight","invalid.colorConfiguration","invalid.default.colorType","invalid.id","invalid.id.format","invalid.description","invalid.defaults","invalid.defaults.highContrast","invalid.defaults.highContrastLight"],"vs/workbench/services/themes/common/tokenClassificationExtensionPoint":["contributes.semanticTokenTypes","contributes.semanticTokenTypes.id","contributes.semanticTokenTypes.id.format","contributes.semanticTokenTypes.superType","contributes.semanticTokenTypes.superType.format","contributes.color.description","contributes.semanticTokenModifiers","contributes.semanticTokenModifiers.id","contributes.semanticTokenModifiers.id.format","contributes.semanticTokenModifiers.description","contributes.semanticTokenScopes","contributes.semanticTokenScopes.languages","contributes.semanticTokenScopes.scopes","invalid.id","invalid.id.format","invalid.superType.format","invalid.description","invalid.semanticTokenTypeConfiguration","invalid.semanticTokenModifierConfiguration","invalid.semanticTokenScopes.configuration","invalid.semanticTokenScopes.language","invalid.semanticTokenScopes.scopes","invalid.semanticTokenScopes.scopes.value","invalid.semanticTokenScopes.scopes.selector"],"vs/workbench/contrib/codeEditor/browser/languageConfigurationExtensionPoint":["parseErrors","formatError","schema.openBracket","schema.closeBracket","schema.comments","schema.blockComments","schema.blockComment.begin","schema.blockComment.end","schema.lineComment","schema.brackets","schema.colorizedBracketPairs","schema.autoClosingPairs","schema.autoClosingPairs.notIn","schema.autoCloseBefore","schema.surroundingPairs","schema.wordPattern","schema.wordPattern.pattern","schema.wordPattern.flags","schema.wordPattern.flags.errorMessage","schema.indentationRules","schema.indentationRules.increaseIndentPattern","schema.indentationRules.increaseIndentPattern.pattern","schema.indentationRules.increaseIndentPattern.flags","schema.indentationRules.increaseIndentPattern.errorMessage","schema.indentationRules.decreaseIndentPattern","schema.indentationRules.decreaseIndentPattern.pattern","schema.indentationRules.decreaseIndentPattern.flags","schema.indentationRules.decreaseIndentPattern.errorMessage","schema.indentationRules.indentNextLinePattern","schema.indentationRules.indentNextLinePattern.pattern","schema.indentationRules.indentNextLinePattern.flags","schema.indentationRules.indentNextLinePattern.errorMessage","schema.indentationRules.unIndentedLinePattern","schema.indentationRules.unIndentedLinePattern.pattern","schema.indentationRules.unIndentedLinePattern.flags","schema.indentationRules.unIndentedLinePattern.errorMessage","schema.folding","schema.folding.offSide","schema.folding.markers","schema.folding.markers.start","schema.folding.markers.end","schema.onEnterRules","schema.onEnterRules","schema.onEnterRules.beforeText","schema.onEnterRules.beforeText.pattern","schema.onEnterRules.beforeText.flags","schema.onEnterRules.beforeText.errorMessage","schema.onEnterRules.afterText","schema.onEnterRules.afterText.pattern","schema.onEnterRules.afterText.flags","schema.onEnterRules.afterText.errorMessage","schema.onEnterRules.previousLineText","schema.onEnterRules.previousLineText.pattern","schema.onEnterRules.previousLineText.flags","schema.onEnterRules.previousLineText.errorMessage","schema.onEnterRules.action","schema.onEnterRules.action.indent","schema.onEnterRules.action.indent.none","schema.onEnterRules.action.indent.indent","schema.onEnterRules.action.indent.indentOutdent","schema.onEnterRules.action.indent.outdent","schema.onEnterRules.action.appendText","schema.onEnterRules.action.removeText"],"vs/workbench/api/browser/statusBarExtensionPoint":["id","name","text","tooltip","command","alignment","priority","accessibilityInformation","accessibilityInformation.role","accessibilityInformation.label","vscode.extension.contributes.statusBarItems","invalid"],"vs/workbench/api/browser/mainThreadCLICommands":["cannot be installed"],"vs/workbench/api/browser/mainThreadExtensionService":["reload window","reload","notSupportedInWorkspace","restrictedMode","manageWorkspaceTrust","disabledDep","enable dep","disabledDepNoAction","uninstalledDep","install missing dep","unknownDep"],"vs/workbench/api/browser/mainThreadFileSystemEventService":["ask.1.create","ask.1.copy","ask.1.move","ask.1.delete",{"key":"ask.N.create","comment":["{0} is a number, e.g \\"3 extensions want...\\""]},{"key":"ask.N.copy","comment":["{0} is a number, e.g \\"3 extensions want...\\""]},{"key":"ask.N.move","comment":["{0} is a number, e.g \\"3 extensions want...\\""]},{"key":"ask.N.delete","comment":["{0} is a number, e.g \\"3 extensions want...\\""]},"preview","cancel",{"key":"ok","comment":["&& denotes a mnemonic"]},{"key":"preview","comment":["&& denotes a mnemonic"]},"cancel","again","msg-create","msg-rename","msg-copy","msg-delete","msg-write","label"],"vs/workbench/api/browser/mainThreadMessageService":["extensionSource","defaultSource","manageExtension","cancel",{"key":"ok","comment":["&& denotes a mnemonic"]}],"vs/workbench/api/browser/mainThreadProgress":["manageExtension"],"vs/workbench/api/browser/mainThreadSaveParticipant":["timeout.onWillSave"],"vs/workbench/api/browser/mainThreadEditSessionIdentityParticipant":["timeout.onWillCreateEditSessionIdentity"],"vs/workbench/api/browser/mainThreadUriOpeners":["openerFailedUseDefault",{"key":"openerFailedMessage","comment":["{0} is the id of the opener. {1} is the url being opened."]}],"vs/workbench/api/browser/mainThreadWorkspace":["folderStatusMessageAddSingleFolder","folderStatusMessageAddMultipleFolders","folderStatusMessageRemoveSingleFolder","folderStatusMessageRemoveMultipleFolders","folderStatusChangeFolder"],"vs/workbench/api/browser/mainThreadComments":["commentsViewIcon"],"vs/workbench/api/browser/mainThreadNotebookSaveParticipant":["timeout.onWillSave"],"vs/workbench/api/browser/mainThreadTask":["task.label"],"vs/workbench/api/browser/mainThreadTunnelService":["remote.tunnel.openTunnel","remote.tunnelsView.elevationButton"],"vs/workbench/api/browser/mainThreadAuthentication":["noTrustedExtensions","manageTrustedExtensions.cancel",{"key":"accountLastUsedDate","comment":["The placeholder {0} is a string with time information, such as \\"3 days ago\\""]},"notUsed","manageTrustedExtensions","manageExtensions","signOutMessage","signOutMessageSimple",{"key":"signOut","comment":["&& denotes a mnemonic"]},"signedOut","confirmRelogin","confirmLogin",{"key":"allow","comment":["&& denotes a mnemonic"]}],"vs/workbench/services/extensions/common/extensionsRegistry":["ui","workspace","vscode.extension.engines","vscode.extension.engines.vscode","vscode.extension.publisher","vscode.extension.displayName","vscode.extension.categories","vscode.extension.category.languages.deprecated","vscode.extension.galleryBanner","vscode.extension.galleryBanner.color","vscode.extension.galleryBanner.theme","vscode.extension.contributes","vscode.extension.preview","vscode.extension.enableProposedApi.deprecated","vscode.extension.enabledApiProposals","vscode.extension.api","vscode.extension.api.none","vscode.extension.activationEvents","vscode.extension.activationEvents.onWebviewPanel","vscode.extension.activationEvents.onLanguage","vscode.extension.activationEvents.onCommand","vscode.extension.activationEvents.onDebug","vscode.extension.activationEvents.onDebugInitialConfigurations","vscode.extension.activationEvents.onDebugDynamicConfigurations","vscode.extension.activationEvents.onDebugResolve","vscode.extension.activationEvents.onDebugAdapterProtocolTracker","vscode.extension.activationEvents.workspaceContains","vscode.extension.activationEvents.onStartupFinished","vscode.extension.activationEvents.onTaskType","vscode.extension.activationEvents.onFileSystem","vscode.extension.activationEvents.onEditSession","vscode.extension.activationEvents.onSearch","vscode.extension.activationEvents.onView","vscode.extension.activationEvents.onUri","vscode.extension.activationEvents.onOpenExternalUri","vscode.extension.activationEvents.onCustomEditor","vscode.extension.activationEvents.onNotebook","vscode.extension.activationEvents.onAuthenticationRequest","vscode.extension.activationEvents.onRenderer","vscode.extension.activationEvents.onTerminalProfile","vscode.extension.activationEvents.onTerminalQuickFixRequest","vscode.extension.activationEvents.onWalkthrough","vscode.extension.activationEvents.star","vscode.extension.badges","vscode.extension.badges.url","vscode.extension.badges.href","vscode.extension.badges.description","vscode.extension.markdown","vscode.extension.qna","vscode.extension.extensionDependencies","vscode.extension.contributes.extensionPack","extensionKind","extensionKind.ui","extensionKind.workspace","extensionKind.ui-workspace","extensionKind.workspace-ui","extensionKind.empty","vscode.extension.capabilities","vscode.extension.capabilities.virtualWorkspaces","vscode.extension.capabilities.virtualWorkspaces.supported","vscode.extension.capabilities.virtualWorkspaces.supported.limited","vscode.extension.capabilities.virtualWorkspaces.supported.true","vscode.extension.capabilities.virtualWorkspaces.supported.false","vscode.extension.capabilities.virtualWorkspaces.description","vscode.extension.capabilities.untrustedWorkspaces","vscode.extension.capabilities.untrustedWorkspaces.supported","vscode.extension.capabilities.untrustedWorkspaces.supported.limited","vscode.extension.capabilities.untrustedWorkspaces.supported.true","vscode.extension.capabilities.untrustedWorkspaces.supported.false","vscode.extension.capabilities.untrustedWorkspaces.restrictedConfigurations","vscode.extension.capabilities.untrustedWorkspaces.description","vscode.extension.contributes.sponsor","vscode.extension.contributes.sponsor.url","vscode.extension.scripts.prepublish","vscode.extension.scripts.uninstall","vscode.extension.icon",{"key":"vscode.extension.l10n","comment":["{Locked=\\"bundle.l10n._locale_.json\\"}","{Locked=\\"vscode.l10n API\\"}"]},"vscode.extension.pricing","product.extensionEnabledApiProposals"],"vs/workbench/browser/parts/titlebar/windowTitle":["userIsAdmin","userIsSudo","devExtensionWindowTitlePrefix"],"vs/workbench/browser/parts/views/treeView":["no-dataprovider","treeView.enableCollapseAll","treeView.enableRefresh","refresh","collapseAll","treeView.toggleCollapseAll","command-error"],"vs/workbench/contrib/debug/common/debug":["debugType","debugConfigurationType","debugState","debugUX","hasDebugged","inDebugMode","inDebugRepl","breakpointWidgetVisibile","inBreakpointWidget","breakpointsFocused","watchExpressionsFocused","watchExpressionsExist","variablesFocused","expressionSelected","breakpointInputFocused","callStackItemType","callStackSessionIsAttach","callStackItemStopped","callStackSessionHasOneThread","watchItemType","canViewMemory","breakpointItemType","breakpointSupportsCondition","loadedScriptsSupported","loadedScriptsItemType","focusedSessionIsAttach","stepBackSupported","restartFrameSupported","stackFrameSupportsRestart","jumpToCursorSupported","stepIntoTargetsSupported","breakpointsExist","debuggersAvailable","debugExtensionsAvailable","debugProtocolVariableMenuContext","debugSetVariableSupported","debugSetExpressionSupported","breakWhenValueChangesSupported","breakWhenValueIsAccessedSupported","breakWhenValueIsReadSupported","terminateDebuggeeSupported","suspendDebuggeeSupported","variableEvaluateNamePresent","variableIsReadonly","exceptionWidgetVisible","multiSessionRepl","multiSessionDebug","disassembleRequestSupported","disassemblyViewFocus","languageSupportsDisassembleRequest","focusedStackFrameHasInstructionReference","debuggerDisabled","internalConsoleOptions"],"vs/workbench/browser/parts/views/viewPaneContainer":["views","viewMoveUp","viewMoveLeft","viewMoveDown","viewMoveRight","viewsMove"],"vs/workbench/contrib/files/common/files":["explorerViewletVisible","foldersViewVisible","explorerResourceIsFolder","explorerResourceReadonly","explorerResourceIsRoot","explorerResourceCut","explorerResourceMoveableToTrash","filesExplorerFocus","openEditorsFocus","explorerViewletFocus","explorerViewletCompressedFocus","explorerViewletCompressedFirstFocus","explorerViewletCompressedLastFocus","viewHasSomeCollapsibleItem"],"vs/workbench/contrib/remote/browser/remoteExplorer":["remoteNoPorts","noRemoteNoPorts","ports","1forwardedPort","nForwardedPorts","remote.forwardedPorts.statusbarTextNone","remote.forwardedPorts.statusbarTooltip","status.forwardedPorts","remote.tunnelsView.automaticForward",{"key":"remote.tunnelsView.notificationLink2","comment":["[See all forwarded ports]({0}) is a link. Only translate `See all forwarded ports`. Do not change brackets and parentheses or {0}"]},"remote.tunnelsView.elevationMessage","remote.tunnelsView.makePublic","remote.tunnelsView.elevationButton"],"vs/workbench/common/editor/sideBySideEditorInput":["sideBySideLabels"],"vs/workbench/browser/parts/editor/sideBySideEditor":["sideBySideEditor"],"vs/workbench/common/editor/diffEditorInput":["sideBySideLabels"],"vs/workbench/browser/parts/editor/textDiffEditor":["textDiffEditor","fileTooLargeForHeapErrorWithSize","fileTooLargeForHeapErrorWithoutSize"],"vs/workbench/browser/parts/editor/binaryDiffEditor":["metadataDiff"],"vs/workbench/browser/parts/editor/editorStatus":["singleSelectionRange","singleSelection","multiSelectionRange","multiSelection","endOfLineLineFeed","endOfLineCarriageReturnLineFeed","noEditor","noWritableCodeEditor","indentConvert","indentView","pickAction","tabFocusModeEnabled","status.editor.tabFocusMode","disableTabMode","columnSelectionModeEnabled","status.editor.columnSelectionMode","disableColumnSelectionMode","status.editor.selection","gotoLine","status.editor.indentation","selectIndentation","status.editor.encoding","selectEncoding","status.editor.eol","selectEOL","status.editor.mode","selectLanguageMode","status.editor.info","fileInfo","spacesSize","spacesAndTabsSize",{"key":"tabSize","comment":["Tab corresponds to the tab key"]},"currentProblem","currentProblem","showLanguageExtensions","changeMode","noEditor","languageDescription","languageDescriptionConfigured","languagesPicks","configureModeSettings","configureAssociationsExt","autoDetect","pickLanguage","currentAssociation","pickLanguageToConfigure","changeEndOfLine","noEditor","noWritableCodeEditor","pickEndOfLine","changeEncoding","noEditor","noEditor","noFileEditor","saveWithEncoding","reopenWithEncoding","pickAction","guessedEncoding","pickEncodingForReopen","pickEncodingForSave"],"vs/workbench/browser/parts/editor/editorCommands":["editorCommand.activeEditorMove.description","editorCommand.activeEditorMove.arg.name","editorCommand.activeEditorMove.arg.description","editorCommand.activeEditorCopy.description","editorCommand.activeEditorCopy.arg.name","editorCommand.activeEditorCopy.arg.description","compare.nextChange","compare.previousChange","toggleInlineView","compare","splitEditorInGroup","joinEditorInGroup","toggleJoinEditorInGroup","toggleSplitEditorInGroupLayout","focusLeftSideEditor","focusRightSideEditor","focusOtherSideEditor","toggleEditorGroupLock","lockEditorGroup","unlockEditorGroup"],"vs/workbench/browser/parts/editor/editorActions":["splitEditor","splitEditorOrthogonal","splitEditorGroupLeft","splitEditorGroupRight","splitEditorGroupUp","splitEditorGroupUp","splitEditorGroupDown","splitEditorGroupDown","joinTwoGroups","joinAllGroups","navigateEditorGroups","focusActiveEditorGroup","focusFirstEditorGroup","focusLastEditorGroup","focusNextGroup","focusPreviousGroup","focusLeftGroup","focusRightGroup","focusAboveGroup","focusBelowGroup","closeEditor","unpinEditor","closeOneEditor","revertAndCloseActiveEditor","closeEditorsToTheLeft","closeAllEditors","closeAllGroups","closeEditorsInOtherGroups","closeEditorInAllGroups","moveActiveGroupLeft","moveActiveGroupRight","moveActiveGroupUp","moveActiveGroupDown","duplicateActiveGroupLeft","duplicateActiveGroupRight","duplicateActiveGroupUp","duplicateActiveGroupDown","minimizeOtherEditorGroups","evenEditorGroups","toggleEditorWidths","maximizeEditorHideSidebar","toggleMaximizeEditorGroup","openNextEditor","openPreviousEditor","nextEditorInGroup","openPreviousEditorInGroup","firstEditorInGroup","lastEditorInGroup","navigateForward","navigateForward",{"key":"miForward","comment":["&& denotes a mnemonic"]},"navigateBack","navigateBack",{"key":"miBack","comment":["&& denotes a mnemonic"]},"navigatePrevious","navigateForwardInEdits","navigateBackInEdits","navigatePreviousInEdits","navigateToLastEditLocation","navigateForwardInNavigations","navigateBackInNavigations","navigatePreviousInNavigationLocations","navigateToLastNavigationLocation","reopenClosedEditor","clearRecentFiles","confirmClearRecentsMessage","confirmClearDetail",{"key":"clearButtonLabel","comment":["&& denotes a mnemonic"]},"showEditorsInActiveGroup","showAllEditors","showAllEditorsByMostRecentlyUsed","quickOpenPreviousRecentlyUsedEditor","quickOpenLeastRecentlyUsedEditor","quickOpenPreviousRecentlyUsedEditorInGroup","quickOpenLeastRecentlyUsedEditorInGroup","navigateEditorHistoryByInput","openNextRecentlyUsedEditor","openPreviousRecentlyUsedEditor","openNextRecentlyUsedEditorInGroup","openPreviousRecentlyUsedEditorInGroup","clearEditorHistory","confirmClearEditorHistoryMessage","confirmClearDetail",{"key":"clearButtonLabel","comment":["&& denotes a mnemonic"]},"moveEditorLeft","moveEditorRight","moveEditorToPreviousGroup","moveEditorToNextGroup","moveEditorToAboveGroup","moveEditorToBelowGroup","moveEditorToLeftGroup","moveEditorToRightGroup","moveEditorToFirstGroup","moveEditorToLastGroup","splitEditorToPreviousGroup","splitEditorToNextGroup","splitEditorToAboveGroup","splitEditorToBelowGroup","splitEditorToLeftGroup","splitEditorToLeftGroup","splitEditorToRightGroup","splitEditorToFirstGroup","splitEditorToLastGroup","editorLayoutSingle","editorLayoutTwoColumns","editorLayoutThreeColumns","editorLayoutTwoRows","editorLayoutThreeRows","editorLayoutTwoByTwoGrid","editorLayoutTwoColumnsBottom","editorLayoutTwoRowsRight","newGroupLeft","newGroupRight","newGroupAbove","newGroupBelow","toggleEditorType","reopenTextEditor","popEditorOut",{"key":"miPopEditorOut","comment":["&& denotes a mnemonic"]}],"vs/editor/browser/editorExtensions":[{"key":"miUndo","comment":["&& denotes a mnemonic"]},"undo",{"key":"miRedo","comment":["&& denotes a mnemonic"]},"redo",{"key":"miSelectAll","comment":["&& denotes a mnemonic"]},"selectAll"],"vs/workbench/browser/parts/editor/editorQuickAccess":["noViewResults","entryAriaLabelWithGroupDirty","entryAriaLabelWithGroup","entryAriaLabelDirty","closeEditor"],"vs/workbench/browser/parts/editor/editorConfiguration":["interactiveWindow","markdownPreview","workbench.editor.autoLockGroups","workbench.editor.defaultBinaryEditor","editor.editorAssociations","editorLargeFileSizeConfirmation"],"vs/workbench/browser/parts/panel/panelPart":["panel position","align panel","hidePanel"],"vs/workbench/browser/parts/sidebar/sidebarPart":["manage","accounts"],"vs/workbench/browser/parts/auxiliarybar/auxiliaryBarPart":["move second side bar left","move second side bar right","hide second side bar"],"vs/workbench/browser/parts/statusbar/statusbarActions":["hide","focusStatusBar"],"vs/platform/actions/common/menuResetAction":["title"],"vs/platform/actions/common/menuService":["hide.label"],"vs/base/browser/ui/icons/iconSelectBox":["iconSelect.placeholder","iconSelect.noResults"],"vs/base/browser/ui/dialog/dialog":["ok","dialogInfoMessage","dialogErrorMessage","dialogWarningMessage","dialogPendingMessage","dialogClose"],"vs/workbench/services/preferences/common/preferencesEditorInput":["settingsEditor2InputName"],"vs/workbench/services/preferences/browser/keybindingsEditorInput":["keybindingsInputName"],"vs/workbench/services/preferences/common/preferencesModels":["commonlyUsed","defaultKeybindingsHeader"],"vs/workbench/services/textfile/common/textFileEditorModel":["textFileCreate.source"],"vs/base/common/keybindingLabels":[{"key":"ctrlKey","comment":["This is the short form for the Control key on the keyboard"]},{"key":"shiftKey","comment":["This is the short form for the Shift key on the keyboard"]},{"key":"altKey","comment":["This is the short form for the Alt key on the keyboard"]},{"key":"windowsKey","comment":["This is the short form for the Windows key on the keyboard"]},{"key":"ctrlKey","comment":["This is the short form for the Control key on the keyboard"]},{"key":"shiftKey","comment":["This is the short form for the Shift key on the keyboard"]},{"key":"altKey","comment":["This is the short form for the Alt key on the keyboard"]},{"key":"superKey","comment":["This is the short form for the Super key on the keyboard"]},{"key":"ctrlKey.long","comment":["This is the long form for the Control key on the keyboard"]},{"key":"shiftKey.long","comment":["This is the long form for the Shift key on the keyboard"]},{"key":"optKey.long","comment":["This is the long form for the Alt/Option key on the keyboard"]},{"key":"cmdKey.long","comment":["This is the long form for the Command key on the keyboard"]},{"key":"ctrlKey.long","comment":["This is the long form for the Control key on the keyboard"]},{"key":"shiftKey.long","comment":["This is the long form for the Shift key on the keyboard"]},{"key":"altKey.long","comment":["This is the long form for the Alt key on the keyboard"]},{"key":"windowsKey.long","comment":["This is the long form for the Windows key on the keyboard"]},{"key":"ctrlKey.long","comment":["This is the long form for the Control key on the keyboard"]},{"key":"shiftKey.long","comment":["This is the long form for the Shift key on the keyboard"]},{"key":"altKey.long","comment":["This is the long form for the Alt key on the keyboard"]},{"key":"superKey.long","comment":["This is the long form for the Super key on the keyboard"]}],"vs/platform/keybinding/common/abstractKeybindingService":["first.chord","next.chord","missing.chord","missing.chord"],"vs/workbench/services/editor/common/editorResolverService":["editor.editorAssociations"],"vs/workbench/services/themes/common/colorThemeData":["error.cannotparsejson","error.invalidformat",{"key":"error.invalidformat.colors","comment":["{0} will be replaced by a path. Values in quotes should not be translated."]},{"key":"error.invalidformat.tokenColors","comment":["{0} will be replaced by a path. Values in quotes should not be translated."]},{"key":"error.invalidformat.semanticTokenColors","comment":["{0} will be replaced by a path. Values in quotes should not be translated."]},"error.plist.invalidformat","error.cannotparse","error.cannotload"],"vs/workbench/services/themes/common/fileIconThemeSchema":["schema.folderExpanded","schema.folder","schema.file","schema.rootFolder","schema.rootFolderExpanded","schema.rootFolderNames","schema.folderName","schema.rootFolderNamesExpanded","schema.rootFolderNameExpanded","schema.folderNames","schema.folderName","schema.folderNamesExpanded","schema.folderNameExpanded","schema.fileExtensions","schema.fileExtension","schema.fileNames","schema.fileName","schema.languageIds","schema.languageId","schema.fonts","schema.id","schema.id.formatError","schema.src","schema.font-path","schema.font-format","schema.font-weight","schema.font-style","schema.font-size","schema.iconDefinitions","schema.iconDefinition","schema.iconPath","schema.fontCharacter","schema.fontColor","schema.fontSize","schema.fontId","schema.light","schema.highContrast","schema.hidesExplorerArrows","schema.showLanguageModeIcons"],"vs/workbench/services/themes/browser/fileIconThemeData":["error.cannotparseicontheme","error.invalidformat"],"vs/workbench/services/themes/common/colorThemeSchema":["schema.token.settings","schema.token.foreground","schema.token.background.warning","schema.token.fontStyle","schema.fontStyle.error","schema.token.fontStyle.none","schema.properties.name","schema.properties.scope","schema.workbenchColors","schema.tokenColors.path","schema.colors","schema.supportsSemanticHighlighting","schema.semanticTokenColors"],"vs/workbench/services/themes/common/themeExtensionPoints":["vscode.extension.contributes.themes","vscode.extension.contributes.themes.id","vscode.extension.contributes.themes.label","vscode.extension.contributes.themes.uiTheme","vscode.extension.contributes.themes.path","vscode.extension.contributes.iconThemes","vscode.extension.contributes.iconThemes.id","vscode.extension.contributes.iconThemes.label","vscode.extension.contributes.iconThemes.path","vscode.extension.contributes.productIconThemes","vscode.extension.contributes.productIconThemes.id","vscode.extension.contributes.productIconThemes.label","vscode.extension.contributes.productIconThemes.path","reqarray","reqpath","reqid","invalid.path.1"],"vs/workbench/services/themes/browser/productIconThemeData":["error.parseicondefs","defaultTheme","error.cannotparseicontheme","error.invalidformat","error.missingProperties","error.fontWeight","error.fontStyle","error.fontSrc","error.noFontSrc","error.fontId","error.icon.font","error.icon.fontCharacter"],"vs/workbench/services/themes/common/themeConfiguration":["colorTheme","colorThemeError",{"key":"preferredDarkColorTheme","comment":["{0} will become a link to another setting."]},"colorThemeError",{"key":"preferredLightColorTheme","comment":["{0} will become a link to another setting."]},"colorThemeError",{"key":"preferredHCDarkColorTheme","comment":["{0} will become a link to another setting."]},"colorThemeError",{"key":"preferredHCLightColorTheme","comment":["{0} will become a link to another setting."]},"colorThemeError",{"key":"detectColorScheme","comment":["{0} and {1} will become links to other settings."]},"workbenchColors","iconTheme","noIconThemeLabel","noIconThemeDesc","iconThemeError","productIconTheme","defaultProductIconThemeLabel","defaultProductIconThemeDesc","productIconThemeError",{"key":"autoDetectHighContrast","comment":["{0} and {1} will become links to other settings."]},"editorColors.comments","editorColors.strings","editorColors.keywords","editorColors.numbers","editorColors.types","editorColors.functions","editorColors.variables","editorColors.textMateRules","editorColors.semanticHighlighting","editorColors.semanticHighlighting.deprecationMessage",{"key":"editorColors.semanticHighlighting.deprecationMessageMarkdown","comment":["{0} will become a link to another setting."]},"editorColors","editorColors.semanticHighlighting.enabled","editorColors.semanticHighlighting.rules","semanticTokenColors"],"vs/workbench/services/themes/common/productIconThemeSchema":["schema.id","schema.id.formatError","schema.src","schema.font-path","schema.font-format","schema.font-weight","schema.font-style","schema.iconDefinitions"],"vs/workbench/services/extensionManagement/browser/extensionBisect":["I cannot reproduce","This is Bad","bisect.singular","bisect.plural","title.start","msg.start","detail.start",{"key":"msg2","comment":["&& denotes a mnemonic"]},"title.isBad","done.msg","done.detail2","done.msg",{"key":"report","comment":["&& denotes a mnemonic"]},"continue","done.detail","done.disbale","msg.next","bisect",{"key":"next.good","comment":["&& denotes a mnemonic"]},{"key":"next.bad","comment":["&& denotes a mnemonic"]},{"key":"next.stop","comment":["&& denotes a mnemonic"]},{"key":"next.cancel","comment":["&& denotes a mnemonic"]},"title.stop"],"vs/workbench/services/userDataProfile/browser/settingsResource":["settings"],"vs/workbench/services/userDataProfile/browser/keybindingsResource":["keybindings"],"vs/workbench/services/userDataProfile/browser/snippetsResource":["snippets","exclude"],"vs/workbench/services/userDataProfile/browser/tasksResource":["tasks"],"vs/workbench/services/userDataProfile/browser/extensionsResource":["extensions","disabled","exclude","exclude"],"vs/workbench/services/userDataProfile/browser/globalStateResource":["globalState"],"vs/workbench/services/userDataProfile/common/userDataProfileIcons":["settingsViewBarIcon"],"vs/workbench/services/workingCopy/common/storedFileWorkingCopySaveParticipant":["saveParticipants"],"vs/workbench/services/remote/common/tunnelModel":["tunnel.forwardedPortsViewEnabled","tunnel.source.user","tunnel.source.auto","remote.localPortMismatch.single","tunnel.staticallyForwarded"],"vs/workbench/services/hover/browser/hoverWidget":["hoverhint"],"vs/workbench/services/textMate/browser/textMateTokenizationFeatureImpl":["alreadyDebugging","stop","progress1","progress2","invalid.language","invalid.scopeName","invalid.path.0","invalid.injectTo","invalid.embeddedLanguages","invalid.tokenTypes","invalid.path.1"],"vs/workbench/contrib/preferences/browser/keybindingWidgets":["defineKeybinding.initial","defineKeybinding.oneExists","defineKeybinding.existing","defineKeybinding.chordsTo"],"vs/workbench/contrib/performance/browser/perfviewEditor":["name"],"vs/workbench/contrib/speech/common/speechService":["hasSpeechProvider"],"vs/editor/contrib/suggest/browser/suggest":["suggestWidgetHasSelection","suggestWidgetDetailsVisible","suggestWidgetMultipleSuggestions","suggestionMakesTextEdit","acceptSuggestionOnEnter","suggestionHasInsertAndReplaceRange","suggestionInsertMode","suggestionCanResolve"],"vs/workbench/contrib/preferences/browser/keybindingsEditor":["recordKeysLabel","sortByPrecedeneLabel","SearchKeybindings.FullTextSearchPlaceholder","SearchKeybindings.KeybindingsSearchPlaceholder","clearInput","recording","command","keybinding","when","source","show sorted keybindings","show keybindings","changeLabel","addLabel","addLabel","editWhen","removeLabel","resetLabel","showSameKeybindings","copyLabel","copyCommandLabel","copyCommandTitleLabel","error","editKeybindingLabelWithKey","editKeybindingLabel","addKeybindingLabelWithKey","addKeybindingLabel","title","extension label","keybindingsLabel","noKeybinding","noWhen","keyboard shortcuts aria label"],"vs/workbench/contrib/preferences/browser/preferencesIcons":["settingsScopeDropDownIcon","settingsMoreActionIcon","keybindingsRecordKeysIcon","keybindingsSortIcon","keybindingsEditIcon","keybindingsAddIcon","settingsEditIcon","settingsRemoveIcon","preferencesDiscardIcon","preferencesClearInput","settingsFilter","preferencesOpenSettings"],"vs/workbench/contrib/preferences/browser/preferencesActions":["configureLanguageBasedSettings","languageDescriptionConfigured","pickLanguage"],"vs/workbench/contrib/preferences/common/preferencesContribution":["splitSettingsEditorLabel","enableNaturalLanguageSettingsSearch","settingsSearchTocBehavior.hide","settingsSearchTocBehavior.filter","settingsSearchTocBehavior"],"vs/workbench/contrib/preferences/browser/settingsEditor2":["SearchSettings.AriaLabel","clearInput","filterInput","noResults","clearSearchFilters","settings","settings require trust","noResults","oneResult","moreThanOneResult","turnOnSyncButton","lastSyncedLabel"],"vs/workbench/contrib/chat/browser/actions/chatActions":["chat.category","quickChat",{"key":"actions.chat.acceptInput","comment":["Apply input from the chat input box"]},{"key":"actions.chat.submitSecondaryAgent","comment":["Send input from the chat input box to the secondary agent"]},"interactiveSession.clearHistory.label","actions.interactiveSession.focus","interactiveSession.focusInput.label","interactiveSession.open","interactiveSession.history.label","interactiveSession.history.delete","interactiveSession.history.pick"],"vs/workbench/contrib/chat/browser/actions/chatCodeblockActions":["interactive.copyCodeBlock.label","interactive.insertCodeBlock.label","interactive.insertIntoNewFile.label","interactive.runInTerminal.label","interactive.nextCodeBlock.label","interactive.previousCodeBlock.label"],"vs/workbench/contrib/chat/browser/actions/chatCopyActions":["interactive.copyAll.label","interactive.copyItem.label"],"vs/workbench/contrib/chat/browser/actions/chatExecuteActions":["interactive.submit.label","interactive.cancel.label"],"vs/workbench/contrib/chat/browser/actions/chatQuickInputActions":["chat.openInChatView.label","chat.closeQuickChat.label","quickChat","toggle.desc","toggle.query","toggle.isPartialQuery","toggle.query","interactiveSession.open"],"vs/workbench/contrib/chat/browser/actions/chatTitleActions":["interactive.helpful.label","interactive.unhelpful.label","interactive.insertIntoNotebook.label","chat.remove.label"],"vs/workbench/contrib/chat/browser/chatContributionServiceImpl":["vscode.extension.contributes.interactiveSession","vscode.extension.contributes.interactiveSession.id","vscode.extension.contributes.interactiveSession.label","vscode.extension.contributes.interactiveSession.icon","vscode.extension.contributes.interactiveSession.when","chat.viewContainer.label"],"vs/workbench/contrib/chat/browser/actions/chatImportExport":["chat.file.label","chat.export.label","chat.import.label"],"vs/workbench/contrib/chat/browser/chatEditorInput":["chatEditorName"],"vs/workbench/contrib/chat/common/chatServiceImpl":["emptyResponse"],"vs/workbench/contrib/chat/browser/actions/chatMoveActions":["chat.openInEditor.label","interactiveSession.openInEditor.label","interactiveSession.openInSidebar.label"],"vs/workbench/contrib/chat/browser/actions/chatClearActions":["interactiveSession.clear.label","interactiveSession.clear.label","interactiveSession.clear.label"],"vs/workbench/contrib/accessibility/browser/accessibleView":["symbolLabel","symbolLabelAria","disableAccessibilityHelp","openDoc","exit","ariaAccessibleViewActionsBottom","ariaAccessibleViewActions","accessibility-help","accessible-view","accessible-view-hint","accessibility-help-hint","accessibleHelpToolbar","accessibleViewToolbar","toolbar","intro","accessibleViewNextPreviousHint","chatAccessibleViewNextPreviousHintNoKb","acessibleViewDisableHint","accessibleViewDisableHintNoKb","goToSymbolHint","goToSymbolHintNoKb","acessibleViewHint","acessibleViewHintNoKbEither","accessibleViewSymbolQuickPickPlaceholder","accessibleViewSymbolQuickPickTitle"],"vs/workbench/contrib/accessibility/browser/accessibilityContributions":["notification.accessibleViewSrc","notification.accessibleView","clearNotification","clearNotification"],"vs/workbench/contrib/accessibility/browser/accessibleViewActions":["editor.action.accessibleViewNext","editor.action.accessibleViewPrevious","editor.action.accessibleViewGoToSymbol","editor.action.accessibilityHelp","editor.action.accessibleView","editor.action.accessibleViewDisableHint","editor.action.accessibleViewAcceptInlineCompletionAction"],"vs/workbench/contrib/chat/browser/actions/chatFileTreeActions":["interactive.nextFileTree.label","interactive.previousFileTree.label"],"vs/workbench/contrib/chat/common/chatContextKeys":["interactiveSessionResponseHasProviderId","interactiveSessionResponseVote","chatResponseFiltered","interactiveSessionRequestInProgress","chatResponse","chatRequest","interactiveInputHasText","inInteractiveInput","inChat","hasChatProvider"],"vs/workbench/contrib/chat/browser/contrib/chatInputEditorContrib":["pickFileLabel"],"vs/workbench/contrib/chat/common/chatColors":["chat.requestBorder","chat.slashCommandBackground","chat.slashCommandForeground","chat.avatarBackground","chat.avatarForeground"],"vs/workbench/contrib/notebook/common/notebookEditorInput":["vetoExtHostRestart"],"vs/workbench/contrib/notebook/browser/notebookEditor":["fail.noEditor","fail.noEditor.extensionMissing","notebookOpenEnableMissingViewType","notebookOpenInstallMissingViewType","notebookOpenAsText","notebookOpenInTextEditor"],"vs/workbench/contrib/notebook/browser/services/notebookServiceImpl":["notebookOpenInstallMissingViewType"],"vs/workbench/contrib/notebook/browser/diff/notebookDiffEditor":["notebookTreeAriaLabel"],"vs/workbench/contrib/notebook/browser/services/notebookExecutionServiceImpl":["notebookRunTrust"],"vs/workbench/contrib/notebook/browser/services/notebookKeymapServiceImpl":["disableOtherKeymapsConfirmation","yes","no"],"vs/editor/common/languages/modesRegistry":["plainText.alias"],"vs/workbench/contrib/comments/browser/commentReply":["reply","newComment","reply","reply"],"vs/workbench/contrib/notebook/browser/services/notebookKernelHistoryServiceImpl":["workbench.notebook.clearNotebookKernelsMRUCache"],"vs/workbench/contrib/notebook/browser/services/notebookLoggingServiceImpl":["renderChannelName"],"vs/workbench/contrib/notebook/browser/notebookAccessibility":["notebook.overview","notebook.cell.edit","notebook.cell.editNoKb","notebook.cell.quitEdit","notebook.cell.quitEditNoKb","notebook.cell.focusInOutput","notebook.cell.focusInOutputNoKb","notebook.focusNextEditor","notebook.focusNextEditorNoKb","notebook.focusPreviousEditor","notebook.focusPreviousEditorNoKb","notebook.cellNavigation","notebook.cell.executeAndFocusContainer","notebook.cell.executeAndFocusContainerNoKb","notebook.cell.insertCodeCellBelowAndFocusContainer","notebook.changeCellType"],"vs/workbench/contrib/notebook/browser/controller/coreActions":["notebookActions.category","notebookMenu.insertCell","notebookMenu.cellTitle","miShare"],"vs/workbench/contrib/notebook/browser/controller/executeActions":["notebookActions.renderMarkdown","notebookActions.executeNotebook","notebookActions.executeNotebook","notebookActions.execute","notebookActions.execute","notebookActions.executeAbove","notebookActions.executeBelow","notebookActions.executeAndFocusContainer","notebookActions.executeAndFocusContainer","notebookActions.cancel","notebookActions.cancel","notebookActions.executeAndSelectBelow","notebookActions.executeAndInsertBelow","notebookActions.cancelNotebook","notebookActions.interruptNotebook","revealRunningCell","revealRunningCell","revealRunningCellShort","revealLastFailedCell","revealLastFailedCell","revealLastFailedCellShort"],"vs/workbench/contrib/notebook/browser/controller/insertCellActions":["notebookActions.insertCodeCellAbove","notebookActions.insertCodeCellAboveAndFocusContainer","notebookActions.insertCodeCellBelow","notebookActions.insertCodeCellBelowAndFocusContainer","notebookActions.insertMarkdownCellAbove","notebookActions.insertMarkdownCellBelow","notebookActions.insertCodeCellAtTop","notebookActions.insertMarkdownCellAtTop","notebookActions.menu.insertCode","notebookActions.menu.insertCode.tooltip","notebookActions.menu.insertCode.minimalToolbar","notebookActions.menu.insertCode.tooltip","notebookActions.menu.insertCode.ontoolbar","notebookActions.menu.insertCode.tooltip","notebookActions.menu.insertCode","notebookActions.menu.insertCode.tooltip","notebookActions.menu.insertCode.minimaltoolbar","notebookActions.menu.insertCode.tooltip","notebookActions.menu.insertMarkdown","notebookActions.menu.insertMarkdown.tooltip","notebookActions.menu.insertMarkdown.ontoolbar","notebookActions.menu.insertMarkdown.tooltip","notebookActions.menu.insertMarkdown","notebookActions.menu.insertMarkdown.tooltip"],"vs/workbench/contrib/notebook/browser/controller/layoutActions":["workbench.notebook.layout.select.label","workbench.notebook.layout.configure.label","workbench.notebook.layout.configure.label","customizeNotebook","notebook.toggleLineNumbers","notebook.showLineNumbers","notebook.toggleCellToolbarPosition","notebook.toggleBreadcrumb","notebook.saveMimeTypeOrder","notebook.placeholder","saveTarget.machine","saveTarget.workspace","workbench.notebook.layout.webview.reset.label"],"vs/workbench/contrib/notebook/browser/controller/editActions":["notebookActions.editCell","notebookActions.quitEdit","notebookActions.deleteCell","confirmDeleteButton","confirmDeleteButtonMessage","doNotAskAgain","clearCellOutputs","clearAllCellsOutputs","changeLanguage","changeLanguage","languageDescription","languageDescriptionConfigured","autoDetect","languagesPicks","pickLanguageToConfigure","detectLanguage","noDetection"],"vs/workbench/contrib/notebook/browser/controller/cellOutputActions":["notebookActions.copyOutput"],"vs/workbench/contrib/notebook/browser/controller/foldingController":["fold.cell","unfold.cell","fold.cell"],"vs/workbench/contrib/notebook/browser/contrib/clipboard/notebookClipboard":["notebookActions.copy","notebookActions.cut","notebookActions.paste","notebookActions.pasteAbove","toggleNotebookClipboardLog"],"vs/workbench/contrib/notebook/browser/contrib/find/notebookFind":["notebookActions.hideFind","notebookActions.findInNotebook"],"vs/workbench/contrib/notebook/browser/contrib/format/formatting":["format.title","label","formatCell.label","formatCells.label"],"vs/workbench/contrib/notebook/browser/contrib/saveParticipants/saveParticipants":["notebookFormatSave.formatting","formatNotebook","trimNotebookWhitespace","trimNotebookNewlines","insertFinalNewLine","notebookSaveParticipants.notebookCodeActions","notebookSaveParticipants.cellCodeActions",{"key":"codeaction.get2","comment":["[configure]({1}) is a link. Only translate `configure`. Do not change brackets and parentheses or {1}"]},"codeAction.apply"],"vs/workbench/contrib/notebook/browser/contrib/gettingStarted/notebookGettingStarted":["workbench.notebook.layout.gettingStarted.label"],"vs/workbench/contrib/notebook/browser/contrib/layout/layoutActions":["notebook.toggleCellToolbarPosition"],"vs/workbench/contrib/notebook/browser/contrib/navigation/arrow":["cursorMoveDown","cursorMoveUp","focusFirstCell","focusLastCell","focusOutput","focusOutputOut","notebookActions.centerActiveCell","cursorPageUp","cursorPageUpSelect","cursorPageDown","cursorPageDownSelect","notebook.navigation.allowNavigateToSurroundingCells"],"vs/workbench/contrib/notebook/browser/contrib/outline/notebookOutline":["outline.showCodeCells","breadcrumbs.showCodeCells","notebook.gotoSymbols.showAllSymbols"],"vs/workbench/contrib/notebook/browser/contrib/profile/notebookProfile":["setProfileTitle"],"vs/workbench/contrib/notebook/browser/contrib/cellStatusBar/statusBarProviders":["notebook.cell.status.searchLanguageExtensions","notebook.cell.status.language","notebook.cell.status.autoDetectLanguage"],"vs/workbench/contrib/notebook/browser/contrib/cellStatusBar/executionStatusBarItemController":["notebook.cell.status.success","notebook.cell.status.failed","notebook.cell.status.pending","notebook.cell.status.executing","notebook.cell.statusBar.timerTooltip.reportIssueFootnote","notebook.cell.statusBar.timerTooltip"],"vs/workbench/contrib/notebook/browser/contrib/editorStatusBar/editorStatusBar":["notebook.info","tooltop","notebook.select","kernel.select.label","kernel.select.label","notebook.activeCellStatusName","notebook.multiActiveCellIndicator","notebook.singleActiveCellIndicator"],"vs/workbench/contrib/notebook/browser/contrib/cellCommands/cellCommands":["notebookActions.moveCellUp","notebookActions.moveCellDown","notebookActions.copyCellUp","notebookActions.copyCellDown","notebookActions.splitCell","notebookActions.joinCellAbove","notebookActions.joinCellBelow","notebookActions.joinSelectedCells","notebookActions.changeCellToCode","notebookActions.changeCellToMarkdown","notebookActions.collapseCellInput","notebookActions.expandCellInput","notebookActions.collapseCellOutput","notebookActions.expandCellOutput","notebookActions.toggleOutputs","notebookActions.toggleOutputs","notebookActions.collapseAllCellInput","notebookActions.expandAllCellInput","notebookActions.collapseAllCellOutput","notebookActions.expandAllCellOutput","notebookActions.toggleScrolling"],"vs/workbench/contrib/notebook/browser/diff/notebookDiffActions":["notebook.diff.switchToText","notebook.diff.cell.revertMetadata","notebook.diff.cell.switchOutputRenderingStyleToText","notebook.diff.cell.revertOutputs","notebook.diff.cell.revertInput","notebook.diff.showOutputs","notebook.diff.showMetadata","notebook.diff.action.previous.title","notebook.diff.action.next.title","notebook.diff.ignoreMetadata","notebook.diff.ignoreOutputs"],"vs/workbench/contrib/notebook/browser/contrib/troubleshoot/layout":["workbench.notebook.toggleLayoutTroubleshoot","workbench.notebook.inspectLayout","workbench.notebook.clearNotebookEdtitorTypeCache"],"vs/workbench/contrib/inlineChat/browser/inlineChatController":["welcome.1","welcome.2","create.fail","create.fail.detail","welcome.1","default.placeholder","default.placeholder.history","thinking","editResponseMessage","empty","empty","err.apply","err.discard"],"vs/workbench/contrib/inlineChat/common/inlineChat":["inlineChatHasProvider","inlineChatVisible","inlineChatFocused","inlineChatResponseFocused","inlineChatEmpty","inlineChatInnerCursorFirst","inlineChatInnerCursorLast","inlineChatInnerCursorStart","inlineChatInnerCursorEnd","inlineChatMarkdownMessageCropState","inlineChatOuterCursorPosition","inlineChatHasActiveRequest","inlineChatHasStashedSession","inlineChatResponseType","inlineChatResponseTypes","inlineChatDidEdit","inlineChatUserDidEdit","inlineChatLastFeedbackKind","inlineChatDocumentChanged","inlineChat.background","inlineChat.border","inlineChat.shadow","inlineChat.regionHighlight","inlineChatInput.border","inlineChatInput.focusBorder","inlineChatInput.placeholderForeground","inlineChatInput.background","inlineChatDiff.inserted","inlineChatDiff.removed","mode","mode.livePreview","mode.preview","mode.live","showDiff","showGutterIcon"],"vs/workbench/contrib/inlineChat/browser/inlineChatActions":["run","unstash","cat","accept","rerun","rerunShort","stop","arrowUp","arrowDown","focus","previousFromHistory","nextFromHistory","discardMenu","discard","undo.clipboard","undo.newfile","feedback.helpful","feedback.unhelpful","showDiff",{"key":"miShowDiff","comment":["&& denotes a mnemonic"]},"showDiff2",{"key":"miShowDiff2","comment":["&& denotes a mnemonic"]},"apply1","apply2","cancel","copyRecordings","label","viewInChat","expandMessage","contractMessage"],"vs/workbench/contrib/inlineChat/browser/inlineChatDecorations":["startInlineChatIcon","toggleShowGutterIcon"],"vs/workbench/contrib/files/browser/fileConstants":["saveAs","save","saveWithoutFormatting","saveAll","removeFolderFromWorkspace","newUntitledFile"],"vs/workbench/contrib/testing/browser/testingProgressUiService":["testProgress.runningInitial","testProgress.running","testProgressWithSkip.running","testProgress.completed","testProgressWithSkip.completed"],"vs/workbench/contrib/testing/browser/testingOutputPeek":["testing.markdownPeekError","testOutputTitle","testingOutputExpected","testingOutputActual","runNoOutputForPast","runNoOutput","close","testUnnamedTask","messageMoreLinesN","messageMoreLines1","testingPeekLabel","testing.showResultOutput","testing.showResultOutput","testing.reRunLastRun","testing.debugLastRun","testing.showResultOutput","testing.revealInExplorer","run test","debug test","testing.goToFile","testing.goToError","testing.goToNextMessage","testing.goToPreviousMessage","testing.openMessageInEditor","testing.toggleTestingPeekHistory"],"vs/workbench/contrib/testing/browser/testingViewPaneContainer":["testing"],"vs/workbench/contrib/testing/common/configuration":["testConfigurationTitle","testing.autoRun.delay","testing.automaticallyOpenPeekView","testing.automaticallyOpenPeekView.failureAnywhere","testing.automaticallyOpenPeekView.failureInVisibleDocument","testing.automaticallyOpenPeekView.never","testing.showAllMessages","testing.automaticallyOpenPeekViewDuringContinuousRun","testing.countBadge","testing.countBadge.failed","testing.countBadge.off","testing.countBadge.passed","testing.countBadge.skipped","testing.followRunningTest","testing.defaultGutterClickAction","testing.defaultGutterClickAction.run","testing.defaultGutterClickAction.debug","testing.defaultGutterClickAction.contextMenu","testing.gutterEnabled","testing.saveBeforeTest","testing.openTesting.neverOpen","testing.openTesting.openOnTestStart","testing.openTesting.openOnTestFailure","testing.openTesting.openExplorerOnTestStart","testing.openTesting","testing.alwaysRevealTestOnStateChange"],"vs/workbench/contrib/testing/browser/testingDecorations":["peekTestOutout","expected.title","actual.title","testing.gutterMsg.contextMenu","testing.gutterMsg.debug","testing.gutterMsg.run","run test","debug test","testing.runUsing","peek failure","reveal test","run all test","debug all test"],"vs/workbench/contrib/testing/common/testServiceImpl":["testTrust","testError","testTrust","testError"],"vs/workbench/contrib/testing/common/testingContentProvider":["runNoOutout"],"vs/workbench/contrib/testing/browser/icons":["testViewIcon","testingResultsIcon","testingRunIcon","testingRerunIcon","testingRunAllIcon","testingDebugAllIcon","testingDebugIcon","testingCancelIcon","filterIcon","hiddenIcon","testingShowAsList","testingShowAsTree","testingUpdateProfiles","testingRefreshTests","testingTurnContinuousRunOn","testingTurnContinuousRunOff","testingTurnContinuousRunIsOn","testingCancelRefreshTests","testingErrorIcon","testingFailedIcon","testingPassedIcon","testingQueuedIcon","testingSkippedIcon","testingUnsetIcon"],"vs/workbench/contrib/testing/common/testingContextKeys":["testing.canRefresh","testing.isRefreshing","testing.isContinuousModeOn","testing.hasDebuggableTests","testing.hasRunnableTests","testing.hasCoverableTests","testing.hasNonDefaultConfig","testing.hasConfigurableConfig","testing.supportsContinuousRun","testing.isParentRunningContinuously","testing.activeEditorHasTests","testing.peekItemType","testing.controllerId","testing.testId","testing.testItemHasUri","testing.testItemIsHidden","testing.testMessage","testing.testResultOutdated"],"vs/workbench/contrib/testing/browser/testingConfigurationUi":["testConfigurationUi.pick","updateTestConfiguration"],"vs/workbench/contrib/testing/browser/testExplorerActions":["hideTest","unhideTest","unhideAllTests","debug test","testing.runUsing","run test","testing.selectDefaultTestProfiles","testing.toggleContinuousRunOn","testing.toggleContinuousRunOff","testing.startContinuousRunUsing","testing.configureProfile","configureProfile","testing.stopContinuous","testing.noProfiles","testing.selectContinuousProfiles","testing.startContinuous","getSelectedProfiles","getExplorerSelection","runSelectedTests","debugSelectedTests","discoveringTests","runAllTests","noTestProvider","debugAllTests","noDebugTestProvider","testing.cancelRun","testing.viewAsList","testing.viewAsTree","testing.sortByStatus","testing.sortByLocation","testing.sortByDuration","testing.showMostRecentOutput","testing.collapseAll","testing.clearResults","testing.editFocusedTest","noTestsAtCursor","testing.runAtCursor","testing.debugAtCursor","noTestsInFile","testing.runCurrentFile","testing.debugCurrentFile","testing.reRunFailTests","testing.debugFailTests","testing.reRunLastRun","testing.debugLastRun","testing.searchForTestExtension","testing.openOutputPeek","testing.toggleInlineTestOutput","testing.refreshTests","testing.cancelTestRefresh"],"vs/workbench/contrib/logs/common/logsActions":["setLogLevel","all","extensionLogs","loggers","selectlog","selectLogLevelFor","selectLogLevel","resetLogLevel","trace","debug","info","warn","err","off","default","openSessionLogFile","current","sessions placeholder","log placeholder"],"vs/editor/contrib/peekView/browser/peekView":["inReferenceSearchEditor","label.close","peekViewTitleBackground","peekViewTitleForeground","peekViewTitleInfoForeground","peekViewBorder","peekViewResultsBackground","peekViewResultsMatchForeground","peekViewResultsFileForeground","peekViewResultsSelectionBackground","peekViewResultsSelectionForeground","peekViewEditorBackground","peekViewEditorGutterBackground","peekViewEditorStickScrollBackground","peekViewResultsMatchHighlight","peekViewEditorMatchHighlight","peekViewEditorMatchHighlightBorder"],"vs/workbench/contrib/testing/browser/testingExplorerView":["defaultTestProfile","selectDefaultConfigs","configureTestProfiles","noResults","testingContinuousBadge","testingCountBadgePassed","testingCountBadgeSkipped","testingCountBadgeFailed","testingNoTest","testingFindExtension",{"key":"testing.treeElementLabelDuration","comment":["{0} is the original label in testing.treeElementLabel, {1} is a duration"]},{"key":"testing.treeElementLabelOutdated","comment":["{0} is the original label in testing.treeElementLabel"]},"testExplorer"],"vs/workbench/contrib/interactive/browser/interactiveEditor":["interactiveInputPlaceHolder"],"vs/platform/quickinput/browser/helpQuickAccess":["helpPickAriaLabel"],"vs/workbench/contrib/quickaccess/browser/viewQuickAccess":["noViewResults","views","panels","secondary side bar","terminalTitle","terminals","debugConsoles","channels","openView","quickOpenView"],"vs/workbench/contrib/quickaccess/browser/commandsQuickAccess":["noCommandResults","configure keybinding","askXInChat","commandWithCategory","showTriggerActions","clearCommandHistory","confirmClearMessage","confirmClearDetail",{"key":"clearButtonLabel","comment":["&& denotes a mnemonic"]}],"vs/workbench/contrib/notebook/browser/notebookIcons":["selectKernelIcon","executeIcon","executeAboveIcon","executeBelowIcon","stopIcon","deleteCellIcon","executeAllIcon","editIcon","stopEditIcon","moveUpIcon","moveDownIcon","clearIcon","splitCellIcon","successStateIcon","errorStateIcon","pendingStateIcon","executingStateIcon","collapsedIcon","expandedIcon","openAsTextIcon","revertIcon","renderOutputIcon","mimetypeIcon","copyIcon","previousChangeIcon","nextChangeIcon"],"vs/workbench/contrib/files/browser/fileActions":["newFile","newFolder","rename","delete","copyFile","pasteFile","download","upload","deleteButtonLabelRecycleBin",{"key":"deleteButtonLabelTrash","comment":["&& denotes a mnemonic"]},{"key":"deleteButtonLabel","comment":["&& denotes a mnemonic"]},"dirtyMessageFilesDelete","dirtyMessageFolderOneDelete","dirtyMessageFolderDelete","dirtyMessageFileDelete","dirtyWarning","irreversible","restorePlural","restore","undoBinFiles","undoBin","undoTrashFiles","undoTrash","doNotAskAgain",{"key":"deleteBulkEdit","comment":["Placeholder will be replaced by the number of files deleted"]},{"key":"deleteFileBulkEdit","comment":["Placeholder will be replaced by the name of the file deleted"]},{"key":"deletingBulkEdit","comment":["Placeholder will be replaced by the number of files deleted"]},{"key":"deletingFileBulkEdit","comment":["Placeholder will be replaced by the name of the file deleted"]},"binFailed","trashFailed",{"key":"deletePermanentlyButtonLabel","comment":["&& denotes a mnemonic"]},{"key":"retryButtonLabel","comment":["&& denotes a mnemonic"]},"confirmMoveTrashMessageFilesAndDirectories","confirmMoveTrashMessageMultipleDirectories","confirmMoveTrashMessageMultiple","confirmMoveTrashMessageFolder","confirmMoveTrashMessageFile","confirmDeleteMessageFilesAndDirectories","confirmDeleteMessageMultipleDirectories","confirmDeleteMessageMultiple","confirmDeleteMessageFolder","confirmDeleteMessageFile","confirmOverwrite","replaceButtonLabel","globalCompareFile","saveAllInGroup","closeGroup","focusFilesExplorer","showInExplorer","openFileInNewWindow","openFileToShowInNewWindow.unsupportedschema","emptyFileNameError","fileNameStartsWithSlashError","fileNameExistsError","invalidFileNameError","fileNameWhitespaceWarning","compareNewUntitledTextFiles","compareWithClipboard","clipboardComparisonLabel","retry","createBulkEdit","creatingBulkEdit","renameBulkEdit","renamingBulkEdit","fileIsAncestor",{"key":"movingBulkEdit","comment":["Placeholder will be replaced by the number of files being moved"]},{"key":"movingFileBulkEdit","comment":["Placeholder will be replaced by the name of the file moved."]},{"key":"moveBulkEdit","comment":["Placeholder will be replaced by the number of files being moved"]},{"key":"moveFileBulkEdit","comment":["Placeholder will be replaced by the name of the file moved."]},{"key":"copyingBulkEdit","comment":["Placeholder will be replaced by the number of files being copied"]},{"key":"copyingFileBulkEdit","comment":["Placeholder will be replaced by the name of the file copied."]},{"key":"copyBulkEdit","comment":["Placeholder will be replaced by the number of files being copied"]},{"key":"copyFileBulkEdit","comment":["Placeholder will be replaced by the name of the file copied."]},"fileDeleted","setActiveEditorReadonlyInSession","setActiveEditorWriteableInSession","toggleActiveEditorReadonlyInSession","resetActiveEditorReadonlyInSession","toggleAutoSave","toggleAutoSaveDescription"],"vs/workbench/contrib/files/browser/editors/textFileSaveErrorHandler":["userGuide","staleSaveError","readonlySaveErrorAdmin","readonlySaveErrorSudo","readonlySaveError","permissionDeniedSaveError","permissionDeniedSaveErrorSudo",{"key":"genericSaveError","comment":["{0} is the resource that failed to save and {1} the error message"]},"learnMore","dontShowAgain","compareChanges","saveConflictDiffLabel","overwriteElevated","overwriteElevatedSudo","saveElevated","saveElevatedSudo","retry","discard","overwrite","overwrite","configure"],"vs/workbench/contrib/files/browser/fileCommands":["modifiedLabel",{"key":"genericSaveError","comment":["{0} is the resource that failed to save and {1} the error message"]},"retry","discard","genericRevertError","newFileCommand.saveLabel"],"vs/workbench/contrib/files/browser/views/explorerView":["explorerSection","createNewFile","createNewFolder","refreshExplorer","collapseExplorerFolders"],"vs/workbench/contrib/files/browser/views/openEditorsView":["dirtyCounter","openEditors","flipLayout","miToggleEditorLayoutWithoutMnemonic",{"key":"miToggleEditorLayout","comment":["&& denotes a mnemonic"]},"newUntitledFile",{"key":"openEditors","comment":["Open is an adjective"]}],"vs/workbench/contrib/files/browser/editors/binaryFileEditor":["binaryFileEditor"],"vs/workbench/contrib/files/browser/workspaceWatcher":["enospcError","learnMore","eshutdownError","reload"],"vs/editor/common/config/editorConfigurationSchema":["editorConfigurationTitle","tabSize","indentSize","insertSpaces","detectIndentation","trimAutoWhitespace","largeFileOptimizations","wordBasedSuggestions","wordBasedSuggestionsMode.currentDocument","wordBasedSuggestionsMode.matchingDocuments","wordBasedSuggestionsMode.allDocuments","wordBasedSuggestionsMode","semanticHighlighting.true","semanticHighlighting.false","semanticHighlighting.configuredByTheme","semanticHighlighting.enabled","stablePeek","maxTokenizationLineLength","editor.experimental.asyncTokenization","editor.experimental.asyncTokenizationLogging","editor.experimental.asyncTokenizationVerification","schema.brackets","schema.openBracket","schema.closeBracket","schema.colorizedBracketPairs","schema.openBracket","schema.closeBracket","maxComputationTime","maxFileSize","sideBySide","renderSideBySideInlineBreakpoint","useInlineViewWhenSpaceIsLimited","renderMarginRevertIcon","ignoreTrimWhitespace","renderIndicators","codeLens","wordWrap.off","wordWrap.on","wordWrap.inherit","diffAlgorithm.legacy","diffAlgorithm.advanced","hideUnchangedRegions.enabled","hideUnchangedRegions.revealLineCount","hideUnchangedRegions.minimumLineCount","hideUnchangedRegions.contextLineCount","showMoves","showEmptyDecorations"],"vs/workbench/contrib/files/common/dirtyFilesIndicator":["dirtyFile","dirtyFiles"],"vs/workbench/contrib/files/browser/editors/textFileEditor":["textFileEditor","openFolder","reveal","fileIsDirectory","fileTooLargeForHeapErrorWithSize","fileTooLargeForHeapErrorWithoutSize","unavailableResourceErrorEditorText","createFile"],"vs/workbench/contrib/bulkEdit/browser/preview/bulkEditPane":["ok","cancel","empty.msg","conflict.1","conflict.N","edt.title.del","rename","create","edt.title.2","edt.title.1"],"vs/workbench/contrib/bulkEdit/browser/preview/bulkEditPreview":["default"],"vs/editor/contrib/quickAccess/browser/gotoLineQuickAccess":["cannotRunGotoLine","gotoLineColumnLabel","gotoLineLabel","gotoLineLabelEmptyWithLimit","gotoLineLabelEmpty"],"vs/workbench/contrib/codeEditor/browser/quickaccess/gotoSymbolQuickAccess":["empty","gotoSymbol",{"key":"miGotoSymbolInEditor","comment":["&& denotes a mnemonic"]},"gotoSymbolQuickAccessPlaceholder","gotoSymbolQuickAccess","gotoSymbolByCategoryQuickAccess"],"vs/workbench/contrib/search/browser/anythingQuickAccess":["noAnythingResults","recentlyOpenedSeparator","fileAndSymbolResultsSeparator","fileResultsSeparator","helpPickAriaLabel","chat",{"key":"openToSide","comment":["Open this file in a split editor on the left/right side"]},{"key":"openToBottom","comment":["Open this file in a split editor on the bottom"]},"closeEditor","filePickAriaLabelDirty"],"vs/workbench/contrib/search/browser/searchIcons":["searchDetailsIcon","searchShowContextIcon","searchHideReplaceIcon","searchShowReplaceIcon","searchReplaceAllIcon","searchReplaceIcon","searchRemoveIcon","searchRefreshIcon","searchCollapseAllIcon","searchExpandAllIcon","searchShowAsTree","searchShowAsList","searchClearIcon","searchStopIcon","searchViewIcon","searchNewEditorIcon","searchOpenInFile"],"vs/workbench/contrib/search/browser/searchWidget":["search.action.replaceAll.disabled.label","search.action.replaceAll.enabled.label","search.replace.toggle.button.title","label.Search","search.placeHolder","showContext","label.Replace","search.replace.placeHolder"],"vs/workbench/contrib/search/browser/symbolsQuickAccess":["noSymbolResults","openToSide","openToBottom"],"vs/workbench/contrib/search/browser/quickTextSearch/textSearchQuickAccess":["QuickSearchSeeMoreFiles","QuickSearchOpenInFile","QuickSearchMore"],"vs/workbench/contrib/search/browser/searchActionsCopy":["copyMatchLabel","copyPathLabel","copyAllLabel"],"vs/workbench/contrib/search/browser/searchActionsFind":["restrictResultsToFolder","excludeFolderFromSearch","revealInSideBar","findInFiles",{"key":"miFindInFiles","comment":["&& denotes a mnemonic"]},"findInFiles.description","findInFiles.args","findInFolder","findInWorkspace"],"vs/workbench/contrib/search/browser/searchActionsNav":["ToggleQueryDetailsAction.label","CloseReplaceWidget.label","ToggleCaseSensitiveCommandId.label","ToggleWholeWordCommandId.label","ToggleRegexCommandId.label","TogglePreserveCaseId.label","OpenMatch.label","OpenMatchToSide.label","AddCursorsAtSearchResults.label","FocusNextInputAction.label","FocusPreviousInputAction.label","FocusSearchFromResults.label","toggleTabs","focusSearchListCommandLabel","FocusNextSearchResult.label","FocusPreviousSearchResult.label","replaceInFiles"],"vs/workbench/contrib/search/browser/searchActionsRemoveReplace":["RemoveAction.label","match.replace.label","file.replaceAll.label","file.replaceAll.label"],"vs/workbench/contrib/search/browser/searchActionsTopBar":["clearSearchHistoryLabel","CancelSearchAction.label","RefreshAction.label","CollapseDeepestExpandedLevelAction.label","ExpandAllAction.label","ClearSearchResultsAction.label","ViewAsTreeAction.label","ViewAsListAction.label"],"vs/workbench/contrib/search/browser/searchActionsSymbol":["showTriggerActions","showTriggerActions",{"key":"miGotoSymbolInWorkspace","comment":["&& denotes a mnemonic"]}],"vs/workbench/contrib/search/browser/searchActionsTextQuickAccess":["quickTextSearch"],"vs/workbench/contrib/search/browser/searchActionsBase":["search"],"vs/workbench/contrib/searchEditor/browser/searchEditor":["moreSearch","searchScope.includes","label.includes","searchScope.excludes","label.excludes","runSearch","searchResultItem","searchEditor","textInputBoxBorder"],"vs/workbench/contrib/searchEditor/browser/searchEditorInput":["searchTitle.withQuery","searchTitle.withQuery","searchTitle"],"vs/workbench/contrib/scm/browser/dirtydiffDecorator":["changes","change","multiChanges","multiChange","label.close","show previous change","show next change",{"key":"miGotoNextChange","comment":["&& denotes a mnemonic"]},{"key":"miGotoPreviousChange","comment":["&& denotes a mnemonic"]},"move to previous change","move to next change","editorGutterModifiedBackground","editorGutterAddedBackground","editorGutterDeletedBackground","minimapGutterModifiedBackground","minimapGutterAddedBackground","minimapGutterDeletedBackground","overviewRulerModifiedForeground","overviewRulerAddedForeground","overviewRulerDeletedForeground"],"vs/workbench/contrib/scm/browser/activity":["status.scm","scmPendingChangesBadge"],"vs/workbench/contrib/scm/browser/scmViewPaneContainer":["source control"],"vs/workbench/contrib/scm/browser/scmViewPane":["scm","input","sortAction","repositories","setListViewMode","setTreeViewMode","repositorySortByDiscoveryTime","repositorySortByName","repositorySortByPath","sortChangesByName","sortChangesByPath","sortChangesByStatus","collapse all","expand all","label.close"],"vs/workbench/contrib/scm/browser/scmRepositoriesViewPane":["scm"],"vs/workbench/contrib/workspace/common/workspace":["workspaceTrustEnabledCtx","workspaceTrustedCtx"],"vs/workbench/contrib/scm/browser/scmSyncViewPane":["scmSync","incoming","outgoing","refresh","setListViewMode","setTreeViewMode"],"vs/workbench/browser/parts/views/viewPane":["viewPaneContainerExpandedIcon","viewPaneContainerCollapsedIcon","viewToolbarAriaLabel"],"vs/workbench/contrib/search/browser/patternInputWidget":["defaultLabel","onlySearchInOpenEditors","useExcludesAndIgnoreFilesDescription"],"vs/workbench/contrib/search/browser/searchMessage":["unable to open trust","unable to open"],"vs/workbench/contrib/search/browser/searchResultsView":["searchFolderMatch.other.label","searchFolderMatch.other.label","searchFileMatches","searchFileMatch","searchMatches","searchMatch","lineNumStr","numLinesStr","search","folderMatchAriaLabel","otherFilesAriaLabel","fileMatchAriaLabel","replacePreviewResultAria","searchResultAria"],"vs/workbench/services/search/common/queryBuilder":["search.noWorkspaceWithName"],"vs/workbench/contrib/debug/browser/debugHover":[{"key":"quickTip","comment":["\\"switch to editor language hover\\" means to show the programming language hover widget instead of the debug hover"]},"treeAriaLabel",{"key":"variableAriaLabel","comment":["Do not translate placeholders. Placeholders are name and value of a variable."]}],"vs/workbench/contrib/debug/browser/exceptionWidget":["debugExceptionWidgetBorder","debugExceptionWidgetBackground","exceptionThrownWithId","exceptionThrown","close"],"vs/workbench/contrib/debug/common/debugModel":["invalidVariableAttributes","startDebugFirst","notAvailable",{"key":"pausedOn","comment":["indicates reason for program being paused"]},"paused",{"key":"running","comment":["indicates state"]},"breakpointDirtydHover"],"vs/workbench/contrib/debug/browser/breakpointsView":["unverifiedExceptionBreakpoint","expressionCondition","expressionAndHitCount","functionBreakpointsNotSupported","dataBreakpointsNotSupported","read","write","access","functionBreakpointPlaceholder","functionBreakPointInputAriaLabel","functionBreakpointExpressionPlaceholder","functionBreakPointExpresionAriaLabel","functionBreakpointHitCountPlaceholder","functionBreakPointHitCountAriaLabel","exceptionBreakpointAriaLabel","exceptionBreakpointPlaceholder","breakpoints","disabledLogpoint","disabledBreakpoint","unverifiedLogpoint","unverifiedBreakpoint","dataBreakpointUnsupported","dataBreakpoint","functionBreakpointUnsupported","functionBreakpoint","expression","hitCount","instructionBreakpointUnsupported","instructionBreakpointAtAddress","instructionBreakpoint","hitCount","breakpointUnsupported","logMessage","expression","hitCount","breakpoint","addFunctionBreakpoint",{"key":"miFunctionBreakpoint","comment":["&& denotes a mnemonic"]},"activateBreakpoints","removeBreakpoint","removeAllBreakpoints",{"key":"miRemoveAllBreakpoints","comment":["&& denotes a mnemonic"]},"enableAllBreakpoints",{"key":"miEnableAllBreakpoints","comment":["&& denotes a mnemonic"]},"disableAllBreakpoints",{"key":"miDisableAllBreakpoints","comment":["&& denotes a mnemonic"]},"reapplyAllBreakpoints","editCondition","editCondition","editHitCount","editBreakpoint","editHitCount"],"vs/workbench/contrib/debug/browser/callStackView":[{"key":"running","comment":["indicates state"]},"showMoreStackFrames2",{"key":"session","comment":["Session is a noun"]},{"key":"running","comment":["indicates state"]},"restartFrame","loadAllStackFrames","showMoreAndOrigin","showMoreStackFrames",{"key":"pausedOn","comment":["indicates reason for program being paused"]},"paused",{"comment":["Debug is a noun in this context, not a verb."],"key":"callStackAriaLabel"},{"key":"threadAriaLabel","comment":["Placeholders stand for the thread name and the thread state.For example \\"Thread 1\\" and \\"Stopped"]},"stackFrameAriaLabel",{"key":"running","comment":["indicates state"]},{"key":"sessionLabel","comment":["Placeholders stand for the session name and the session state. For example \\"Launch Program\\" and \\"Running\\""]},"showMoreStackFrames","collapse"],"vs/workbench/contrib/debug/browser/debugColors":["debugToolBarBackground","debugToolBarBorder","debugIcon.startForeground","debugIcon.pauseForeground","debugIcon.stopForeground","debugIcon.disconnectForeground","debugIcon.restartForeground","debugIcon.stepOverForeground","debugIcon.stepIntoForeground","debugIcon.stepOutForeground","debugIcon.continueForeground","debugIcon.stepBackForeground"],"vs/workbench/contrib/debug/browser/debugCommands":["debug","restartDebug","stepOverDebug","stepIntoDebug","stepIntoTargetDebug","stepOutDebug","pauseDebug","disconnect","disconnectSuspend","stop","continueDebug","focusSession","selectAndStartDebugging","openLaunchJson","startDebug","startWithoutDebugging","nextDebugConsole","prevDebugConsole","openLoadedScript","callStackTop","callStackBottom","callStackUp","callStackDown","selectDebugConsole","selectDebugSession","chooseLocation","noExecutableCode","jumpToCursor","editor.debug.action.stepIntoTargets.none","addConfiguration","addInlineBreakpoint"],"vs/workbench/contrib/debug/browser/debugConsoleQuickAccess":["workbench.action.debug.startDebug"],"vs/workbench/contrib/debug/browser/debugEditorActions":["toggleBreakpointAction",{"key":"miToggleBreakpoint","comment":["&& denotes a mnemonic"]},"conditionalBreakpointEditorAction",{"key":"miConditionalBreakpoint","comment":["&& denotes a mnemonic"]},"logPointEditorAction",{"key":"miLogPoint","comment":["&& denotes a mnemonic"]},"EditBreakpointEditorAction",{"key":"miEditBreakpoint","comment":["&& denotes a mnemonic"]},"openDisassemblyView",{"key":"miDisassemblyView","comment":["&& denotes a mnemonic"]},"toggleDisassemblyViewSourceCode",{"key":"mitogglesource","comment":["&& denotes a mnemonic"]},"showDebugHover","editor.debug.action.stepIntoTargets.notAvailable",{"key":"stepIntoTargets","comment":["Step Into Targets lets the user step into an exact function he or she is interested in."]},"goToNextBreakpoint","goToPreviousBreakpoint","closeExceptionWidget","runToCursor","evaluateInDebugConsole","addToWatch"],"vs/workbench/contrib/debug/browser/debugIcons":["debugConsoleViewIcon","runViewIcon","variablesViewIcon","watchViewIcon","callStackViewIcon","breakpointsViewIcon","loadedScriptsViewIcon","debugBreakpoint","debugBreakpointDisabled","debugBreakpointUnverified","debugBreakpointFunction","debugBreakpointFunctionDisabled","debugBreakpointFunctionUnverified","debugBreakpointConditional","debugBreakpointConditionalDisabled","debugBreakpointConditionalUnverified","debugBreakpointData","debugBreakpointDataDisabled","debugBreakpointDataUnverified","debugBreakpointLog","debugBreakpointLogDisabled","debugBreakpointLogUnverified","debugBreakpointHint","debugBreakpointUnsupported","debugStackframe","debugStackframeFocused","debugGripper","debugRestartFrame","debugStop","debugDisconnect","debugRestart","debugStepOver","debugStepInto","debugStepOut","debugStepBack","debugPause","debugContinue","debugReverseContinue","debugRun","debugStart","debugConfigure","debugConsole","debugRemoveConfig","debugCollapseAll","callstackViewSession","debugConsoleClearAll","watchExpressionsRemoveAll","watchExpressionRemove","watchExpressionsAdd","watchExpressionsAddFuncBreakpoint","breakpointsRemoveAll","breakpointsActivate","debugConsoleEvaluationInput","debugConsoleEvaluationPrompt","debugInspectMemory"],"vs/workbench/contrib/debug/browser/debugQuickAccess":["noDebugResults","customizeLaunchConfig",{"key":"contributed","comment":["contributed is lower case because it looks better like that in UI. Nothing preceeds it. It is a name of the grouping of debug configurations."]},"removeLaunchConfig",{"key":"providerAriaLabel","comment":["Placeholder stands for the provider label. For example \\"NodeJS\\"."]},"configure","addConfigTo","addConfiguration"],"vs/workbench/contrib/debug/browser/debugService":["1activeSession","nActiveSessions","runTrust","debugTrust",{"key":"compoundMustHaveConfigurations","comment":["compound indicates a \\"compounds\\" configuration item","\\"configurations\\" is an attribute and should not be localized"]},"noConfigurationNameInWorkspace","multipleConfigurationNamesInWorkspace","noFolderWithName","configMissing","launchJsonDoesNotExist","debugRequestNotSupported","debugRequesMissing","debugTypeNotSupported","debugTypeMissing",{"key":"installAdditionalDebuggers","comment":["Placeholder is the debug type, so for example \\"node\\", \\"python\\""]},"noFolderWorkspaceDebugError","multipleSession","debugAdapterCrash",{"key":"debuggingPaused","comment":["First placeholder is the file line content, second placeholder is the reason why debugging is stopped, for example \\"breakpoint\\", third is the stack frame name, and last is the line number."]},"breakpointAdded","breakpointRemoved"],"vs/workbench/contrib/debug/browser/debugStatus":["status.debug","debugTarget","selectAndStartDebug"],"vs/workbench/contrib/debug/browser/debugToolBar":["notebook.moreRunActionsLabel","stepBackDebug","reverseContinue"],"vs/workbench/contrib/debug/browser/disassemblyView":["instructionNotAvailable","disassemblyTableColumnLabel","editorOpenedFromDisassemblyDescription","disassemblyView","instructionAddress","instructionBytes","instructionText"],"vs/workbench/contrib/debug/browser/loadedScriptsView":["loadedScriptsSession",{"comment":["Debug is a noun in this context, not a verb."],"key":"loadedScriptsAriaLabel"},"loadedScriptsRootFolderAriaLabel","loadedScriptsSessionAriaLabel","loadedScriptsFolderAriaLabel","loadedScriptsSourceAriaLabel"],"vs/workbench/contrib/debug/browser/statusbarColorProvider":["statusBarDebuggingBackground","statusBarDebuggingForeground","statusBarDebuggingBorder","commandCenter-activeBackground"],"vs/workbench/contrib/debug/browser/variablesView":["variableValueAriaLabel","variablesAriaTreeLabel","variableScopeAriaLabel",{"key":"variableAriaLabel","comment":["Placeholders are variable name and variable value respectivly. They should not be translated."]},"viewMemory.prompt","cancel","install","viewMemory.install.progress","collapse"],"vs/workbench/contrib/debug/browser/watchExpressionsView":["typeNewValue","watchExpressionInputAriaLabel","watchExpressionPlaceholder",{"comment":["Debug is a noun in this context, not a verb."],"key":"watchAriaTreeLabel"},"watchExpressionAriaLabel","watchVariableAriaLabel","collapse","addWatchExpression","removeAllWatchExpressions"],"vs/workbench/contrib/debug/common/debugContentProvider":["unable","canNotResolveSourceWithError","canNotResolveSource"],"vs/workbench/contrib/debug/common/debugLifecycle":["debug.debugSessionCloseConfirmationSingular","debug.debugSessionCloseConfirmationPlural",{"key":"debug.stop","comment":["&& denotes a mnemonic"]}],"vs/workbench/contrib/debug/common/disassemblyViewInput":["disassemblyInputName"],"vs/workbench/contrib/debug/browser/welcomeView":[{"key":"openAFileWhichCanBeDebugged","comment":["Please do not translate the word \\"command\\", it is part of our internal syntax which must not change","{Locked=\\"](command:{0})\\"}"]},"runAndDebugAction","detectThenRunAndDebug",{"key":"customizeRunAndDebug","comment":["Please do not translate the word \\"command\\", it is part of our internal syntax which must not change","{Locked=\\"](command:{0})\\"}"]},{"key":"customizeRunAndDebugOpenFolder","comment":["Please do not translate the word \\"commmand\\", it is part of our internal syntax which must not change","{Locked=\\"](command:{0})\\"}"]},"allDebuggersDisabled","run"],"vs/workbench/contrib/debug/browser/breakpointWidget":["breakpointWidgetLogMessagePlaceholder","breakpointWidgetHitCountPlaceholder","breakpointWidgetExpressionPlaceholder","expression","hitCount","logMessage","breakpointType"],"vs/platform/actions/browser/menuEntryActionViewItem":["titleAndKb","titleAndKb","titleAndKbAndAlt"],"vs/workbench/contrib/debug/browser/debugActionViewItems":["debugLaunchConfigurations","noConfigurations","addConfigTo","addConfiguration","debugSession"],"vs/workbench/contrib/mergeEditor/browser/commands/devCommands":["mergeEditor","merge.dev.copyState","mergeEditor.name","mergeEditor.noActiveMergeEditor","mergeEditor.name","mergeEditor.successfullyCopiedMergeEditorContents","merge.dev.saveContentsToFolder","mergeEditor.name","mergeEditor.noActiveMergeEditor","mergeEditor.selectFolderToSaveTo","mergeEditor.name","mergeEditor.successfullySavedMergeEditorContentsToFolder","merge.dev.loadContentsFromFolder","mergeEditor.selectFolderToSaveTo"],"vs/workbench/contrib/mergeEditor/browser/commands/commands":["title","layout.mixed","layout.column","showNonConflictingChanges","layout.showBase","layout.showBaseTop","layout.showBaseCenter","mergeEditor","openfile","merge.goToNextUnhandledConflict","merge.goToPreviousUnhandledConflict","merge.toggleCurrentConflictFromLeft","merge.toggleCurrentConflictFromRight","mergeEditor.compareInput1WithBase","mergeEditor.compareWithBase","mergeEditor.compareInput2WithBase","mergeEditor.compareWithBase","merge.openBaseEditor","merge.acceptAllInput1","merge.acceptAllInput2","mergeEditor.resetResultToBaseAndAutoMerge","mergeEditor.resetResultToBaseAndAutoMerge.short","mergeEditor.resetChoice","mergeEditor.acceptMerge","mergeEditor.acceptMerge.unhandledConflicts.message","mergeEditor.acceptMerge.unhandledConflicts.detail",{"key":"mergeEditor.acceptMerge.unhandledConflicts.accept","comment":["&& denotes a mnemonic"]}],"vs/workbench/contrib/mergeEditor/browser/mergeEditorInput":["name"],"vs/workbench/contrib/mergeEditor/browser/view/mergeEditor":["mergeEditor"],"vs/platform/history/browser/contextScopedHistoryWidget":["suggestWidgetVisible"],"vs/workbench/contrib/debug/browser/linkDetector":["followForwardedLink","followLink","fileLinkWithPathMac","fileLinkWithPath","fileLinkMac","fileLink"],"vs/workbench/contrib/debug/browser/replViewer":["debugConsole","replVariableAriaLabel",{"key":"occurred","comment":["Front will the value of the debug console element. Placeholder will be replaced by a number which represents occurrance count."]},"replRawObjectAriaLabel","replGroup"],"vs/workbench/contrib/debug/common/replModel":["consoleCleared"],"vs/workbench/contrib/markers/browser/markersView":["showing filtered problems","No problems filtered","problems filtered","clearFilter"],"vs/workbench/contrib/markers/browser/messages":["problems.view.toggle.label","problems.view.focus.label","problems.panel.configuration.title","problems.panel.configuration.autoreveal","problems.panel.configuration.viewMode","problems.panel.configuration.showCurrentInStatus","problems.panel.configuration.compareOrder","problems.panel.configuration.compareOrder.severity","problems.panel.configuration.compareOrder.position","markers.panel.no.problems.build","markers.panel.no.problems.activeFile.build","markers.panel.no.problems.filters","markers.panel.action.moreFilters","markers.panel.filter.showErrors","markers.panel.filter.showWarnings","markers.panel.filter.showInfos","markers.panel.filter.useFilesExclude","markers.panel.filter.activeFile","markers.panel.action.filter","markers.panel.action.quickfix","markers.panel.filter.ariaLabel","markers.panel.filter.placeholder","markers.panel.filter.errors","markers.panel.filter.warnings","markers.panel.filter.infos","markers.panel.single.error.label","markers.panel.multiple.errors.label","markers.panel.single.warning.label","markers.panel.multiple.warnings.label","markers.panel.single.info.label","markers.panel.multiple.infos.label","markers.panel.single.unknown.label","markers.panel.multiple.unknowns.label","markers.panel.at.ln.col.number","problems.tree.aria.label.resource","problems.tree.aria.label.marker.relatedInformation","problems.tree.aria.label.error.marker","problems.tree.aria.label.error.marker.nosource","problems.tree.aria.label.warning.marker","problems.tree.aria.label.warning.marker.nosource","problems.tree.aria.label.info.marker","problems.tree.aria.label.info.marker.nosource","problems.tree.aria.label.marker","problems.tree.aria.label.marker.nosource","problems.tree.aria.label.relatedinfo.message","errors.warnings.show.label","markers.panel.title.problems"],"vs/workbench/browser/parts/views/viewFilter":["more filters"],"vs/workbench/contrib/markers/browser/markersFileDecorations":["label","tooltip.1","tooltip.N","markers.showOnFile"],"vs/workbench/contrib/url/browser/trustedDomains":["trustedDomain.manageTrustedDomain","trustedDomain.trustDomain","trustedDomain.trustAllPorts","trustedDomain.trustSubDomain","trustedDomain.trustAllDomains","trustedDomain.manageTrustedDomains"],"vs/workbench/contrib/url/browser/trustedDomainsValidator":["openExternalLinkAt",{"key":"open","comment":["&& denotes a mnemonic"]},{"key":"copy","comment":["&& denotes a mnemonic"]},{"key":"configureTrustedDomains","comment":["&& denotes a mnemonic"]}],"vs/workbench/contrib/comments/common/commentContextKeys":["hasCommentingRange","editorHasCommentingRange","hasCommentingProvider","commentThreadIsEmpty","commentIsEmpty","comment","commentThread","commentController","commentFocused"],"vs/workbench/contrib/comments/browser/commentsEditorContribution":["comments.nextCommentingRange","comments.previousCommentingRange","comments.toggleCommenting","comments.addCommand.error","comments.addCommand","comments.collapseAll","comments.expandAll","comments.expandUnresolved"],"vs/workbench/contrib/webviewPanel/browser/webviewCommands":["editor.action.webvieweditor.showFind","editor.action.webvieweditor.hideFind","editor.action.webvieweditor.findNext","editor.action.webvieweditor.findPrevious","refreshWebviewLabel"],"vs/workbench/contrib/webviewPanel/browser/webviewEditor":["context.activeWebviewId"],"vs/workbench/contrib/customEditor/common/customEditor":["context.customEditor"],"vs/workbench/contrib/externalUriOpener/common/configuration":["externalUriOpeners","externalUriOpeners.uri","externalUriOpeners.uri","externalUriOpeners.defaultId"],"vs/workbench/contrib/externalUriOpener/common/externalUriOpenerService":["selectOpenerDefaultLabel.web","selectOpenerDefaultLabel","selectOpenerConfigureTitle","selectOpenerPlaceHolder"],"vs/workbench/contrib/extensions/common/extensionsInput":["extensionsInputName"],"vs/workbench/contrib/extensions/browser/extensionsViews":["extensions","offline error","error","no extensions found","suggestProxyError","open user settings","no local extensions","extension.arialabel.verifiedPublisher","extension.arialabel.publisher","extension.arialabel.deprecated","extension.arialabel.rating"],"vs/workbench/contrib/extensions/browser/extensionsIcons":["extensionsViewIcon","manageExtensionIcon","clearSearchResultsIcon","refreshIcon","filterIcon","installLocalInRemoteIcon","installWorkspaceRecommendedIcon","configureRecommendedIcon","syncEnabledIcon","syncIgnoredIcon","remoteIcon","installCountIcon","ratingIcon","verifiedPublisher","preReleaseIcon","sponsorIcon","starFullIcon","starHalfIcon","starEmptyIcon","errorIcon","warningIcon","infoIcon","trustIcon","activationtimeIcon"],"vs/platform/dnd/browser/dnd":["fileTooLarge"],"vs/workbench/contrib/extensions/browser/extensionsActions":["VS Code for Web","cannot be installed",{"key":"more information","comment":["&& denotes a mnemonic"]},"close","signature verification failed","install anyway","cancel","update operation","install operation","check logs","download","install vsix","installVSIX","install","deprecated message","install anyway","deprecated with alternate extension message",{"key":"Show alternate extension","comment":["&& denotes a mnemonic"]},"deprecated with alternate settings message",{"key":"configure in settings","comment":["&& denotes a mnemonic"]},"install confirmation","installExtensionStart","installExtensionComplete","install pre-release","install pre-release version","install","install release version","install","installing","install","installing","installExtensionStart",{"key":"install in remote","comment":["This is the name of the action to install an extension in remote server. Placeholder is for the name of remote server."]},"install locally","install browser","uninstallAction","Uninstalling","uninstallExtensionStart","uninstallExtensionComplete","update","update to","update","updateExtensionStart","updateExtensionComplete","ignoreUpdates","ignoreExtensionUpdate","migrateExtension","migrate to","migrate","manage","manage","switch to pre-release version","switch to pre-release version tooltip","switch to release version","switch to release version tooltip","install another version","no versions","pre-release","current","selectVersion","enableForWorkspaceAction","enableForWorkspaceActionToolTip","enableGloballyAction","enableGloballyActionToolTip","disableForWorkspaceAction","disableForWorkspaceActionToolTip","disableGloballyAction","disableGloballyActionToolTip","enableAction","disableAction","reloadAction","reload required","current","workbench.extensions.action.setColorTheme","select color theme","workbench.extensions.action.setFileIconTheme","select file icon theme","workbench.extensions.action.setProductIconTheme","select product icon theme","workbench.extensions.action.setDisplayLanguage","workbench.extensions.action.clearLanguage","showRecommendedExtension","installRecommendedExtension","ignoreExtensionRecommendation","undo","search recommendations","OpenExtensionsFile.failed","configureWorkspaceRecommendedExtensions","configureWorkspaceFolderRecommendedExtensions","updated","installed","uninstalled","enabled","disabled","ignored","synced","sync","do not sync","malicious tooltip","deprecated with alternate extension tooltip","settings","deprecated with alternate settings tooltip","deprecated tooltip","incompatible platform","learn more","VS Code for Web","not web tooltip","learn why","disabled by environment","enabled by environment","disabled because of virtual workspace","extension limited because of virtual workspace","extension disabled because of trust requirement","extension limited because of trust requirement","Install in remote server to enable","learn more","Install in local server to enable","learn more","Defined to run in desktop","learn more","Cannot be enabled","learn more","Install language pack also in remote server","Install language pack also locally","enabled remotely","learn more","enabled locally","learn more","enabled in web worker","learn more","extension disabled because of dependency","workspace enabled","extension enabled on remote","globally enabled","globally disabled","workspace disabled","reinstall","selectExtensionToReinstall","ReinstallAction.successReload","ReinstallAction.success","InstallVSIXAction.reloadNow","install previous version","selectExtension","select extensions to install","no local extensions","installing extensions","finished installing","select and install local extensions","install local extensions title","select and install remote extensions","install remote extensions","extensionButtonBackground","extensionButtonForeground","extensionButtonHoverBackground","extensionButtonSeparator","extensionButtonProminentBackground","extensionButtonProminentForeground","extensionButtonProminentHoverBackground"],"vs/workbench/contrib/terminal/browser/terminal.contribution":["tasksQuickAccessPlaceholder","tasksQuickAccessHelp",{"key":"miToggleIntegratedTerminal","comment":["&& denotes a mnemonic"]},"terminal","terminal"],"vs/workbench/contrib/terminal/browser/terminalView":["terminal.useMonospace","terminal.monospaceOnly","terminals","terminalConnectingLabel"],"vs/workbench/contrib/terminalContrib/accessibility/browser/terminal.accessibility.contribution":["workbench.action.terminal.focusAccessibleBuffer","workbench.action.terminal.accessibleBufferGoToNextCommand","workbench.action.terminal.accessibleBufferGoToPreviousCommand"],"vs/workbench/contrib/terminalContrib/developer/browser/terminal.developer.contribution":["workbench.action.terminal.showTextureAtlas","workbench.action.terminal.writeDataToTerminal","workbench.action.terminal.writeDataToTerminal.prompt","workbench.action.terminal.restartPtyHost"],"vs/workbench/contrib/terminalContrib/environmentChanges/browser/terminal.environmentChanges.contribution":["workbench.action.terminal.showEnvironmentContributions","envChanges","extension","ScopedEnvironmentContributionInfo"],"vs/workbench/contrib/terminalContrib/find/browser/terminal.find.contribution":["workbench.action.terminal.focusFind","workbench.action.terminal.hideFind","workbench.action.terminal.toggleFindRegex","workbench.action.terminal.toggleFindWholeWord","workbench.action.terminal.toggleFindCaseSensitive","workbench.action.terminal.findNext","workbench.action.terminal.findPrevious","workbench.action.terminal.searchWorkspace"],"vs/workbench/contrib/terminalContrib/links/browser/terminal.links.contribution":["workbench.action.terminal.openDetectedLink","workbench.action.terminal.openLastUrlLink","workbench.action.terminal.openLastLocalFileLink"],"vs/workbench/contrib/terminalContrib/quickFix/browser/terminal.quickFix.contribution":["workbench.action.terminal.showQuickFixes"],"vs/workbench/contrib/extensions/common/extensionsFileTemplate":["app.extensions.json.title","app.extensions.json.recommendations","app.extension.identifier.errorMessage","app.extensions.json.unwantedRecommendations","app.extension.identifier.errorMessage"],"vs/workbench/contrib/extensions/browser/extensionEditor":["extension version","preRelease","name","preview","preview","builtin","publisher","install count","rating","details","detailstooltip","contributions","contributionstooltip","changelog","changelogtooltip","dependencies","dependenciestooltip","extensionpack","extensionpacktooltip","runtimeStatus","runtimeStatus description","noReadme","Readme title","extension pack","noReadme","Readme title","categories","Marketplace","repository","license","resources","Marketplace Info","published","last released","last updated","id","noChangelog","Changelog title","noContributions","noContributions","noDependencies","activation reason","startup","activation time","activatedBy","not yet activated","uncaught errors","messages","noStatus","settings","setting name","description","default","debuggers","debugger name","debugger type","viewContainers","view container id","view container title","view container location","views","view id","view name","view location","localizations","localizations language id","localizations language name","localizations localized language name","customEditors","customEditors view type","customEditors priority","customEditors filenamePattern","codeActions","codeActions.title","codeActions.kind","codeActions.description","codeActions.languages","authentication","authentication.label","authentication.id","colorThemes","iconThemes","productThemes","colors","colorId","description","defaultDark","defaultLight","defaultHC","JSON Validation","fileMatch","schema","commands","command name","command title","keyboard shortcuts","menuContexts","languages","language id","language name","file extensions","grammar","snippets","activation events","Notebooks","Notebook id","Notebook name","NotebookRenderers","Notebook renderer name","Notebook mimetypes","find","find next","find previous"],"vs/workbench/contrib/extensions/common/extensionsUtils":["disableOtherKeymapsConfirmation","yes","no"],"vs/workbench/contrib/extensions/browser/extensionsActivationProgress":["activation"],"vs/workbench/contrib/extensions/browser/extensionsDependencyChecker":["extensions","auto install missing deps","finished installing missing deps","reload","no missing deps"],"vs/workbench/contrib/extensions/browser/extensionsQuickAccess":["type","searchFor","install","manage"],"vs/workbench/contrib/extensions/browser/extensionRecommendationNotificationService":["neverShowAgain","ignoreExtensionRecommendations","ignoreAll","no",{"key":"this repository","comment":["this repository means the current repository that is opened"]},"extensionFromPublisher","extensionsFromMultiplePublishers","extensionsFromPublishers","extensionsFromPublisher","recommended",{"key":"exeRecommended","comment":["Placeholder string is the name of the software that is installed."]},"install","install and do no sync","show recommendations"],"vs/workbench/contrib/extensions/browser/extensionsWorkbenchService":["Manifest is not found","postUninstallTooltip","postUpdateTooltip","enable locally","enable remote","postEnableTooltip","postEnableTooltip","postDisableTooltip","postEnableTooltip","postEnableTooltip","malicious","incompatible","uninstallingExtension","not found","installing extension","installing named extension","disable all","singleDependentError","twoDependentsError","multipleDependentsError"],"vs/workbench/contrib/extensions/browser/extensionsCompletionItemsProvider":["exampleExtension"],"vs/workbench/contrib/extensions/browser/deprecatedExtensionsChecker":["deprecated extensions","showDeprecated","neverShowAgain"],"vs/workbench/contrib/extensions/browser/abstractRuntimeExtensionsEditor":[{"key":"starActivation","comment":["{0} will be an extension identifier"]},{"key":"workspaceContainsGlobActivation","comment":["{0} will be a glob pattern","{1} will be an extension identifier"]},{"key":"workspaceContainsFileActivation","comment":["{0} will be a file name","{1} will be an extension identifier"]},{"key":"workspaceContainsTimeout","comment":["{0} will be a glob pattern","{1} will be an extension identifier"]},{"key":"startupFinishedActivation","comment":["This refers to an extension. {0} will be an activation event."]},"languageActivation",{"key":"workspaceGenericActivation","comment":["{0} will be an activation event, like e.g. \'language:typescript\', \'debug\', etc.","{1} will be an extension identifier"]},"extensionActivating","unresponsive.title","errors","runtimeExtensions","copy id","disable workspace","disable","showRuntimeExtensions"],"vs/workbench/contrib/tasks/common/problemMatcher":["ProblemPatternParser.problemPattern.missingRegExp","ProblemPatternParser.loopProperty.notLast","ProblemPatternParser.problemPattern.kindProperty.notFirst","ProblemPatternParser.problemPattern.missingProperty","ProblemPatternParser.problemPattern.missingLocation","ProblemPatternParser.invalidRegexp","ProblemPatternSchema.regexp","ProblemPatternSchema.kind","ProblemPatternSchema.file","ProblemPatternSchema.location","ProblemPatternSchema.line","ProblemPatternSchema.column","ProblemPatternSchema.endLine","ProblemPatternSchema.endColumn","ProblemPatternSchema.severity","ProblemPatternSchema.code","ProblemPatternSchema.message","ProblemPatternSchema.loop","NamedProblemPatternSchema.name","NamedMultiLineProblemPatternSchema.name","NamedMultiLineProblemPatternSchema.patterns","ProblemPatternExtPoint","ProblemPatternRegistry.error","ProblemPatternRegistry.error","ProblemMatcherParser.noProblemMatcher","ProblemMatcherParser.noProblemPattern","ProblemMatcherParser.noOwner","ProblemMatcherParser.noFileLocation","ProblemMatcherParser.unknownSeverity","ProblemMatcherParser.noDefinedPatter","ProblemMatcherParser.noIdentifier","ProblemMatcherParser.noValidIdentifier","ProblemMatcherParser.problemPattern.watchingMatcher","ProblemMatcherParser.invalidRegexp","WatchingPatternSchema.regexp","WatchingPatternSchema.file","PatternTypeSchema.name","PatternTypeSchema.description","ProblemMatcherSchema.base","ProblemMatcherSchema.owner","ProblemMatcherSchema.source","ProblemMatcherSchema.severity","ProblemMatcherSchema.applyTo","ProblemMatcherSchema.fileLocation","ProblemMatcherSchema.background","ProblemMatcherSchema.background.activeOnStart","ProblemMatcherSchema.background.beginsPattern","ProblemMatcherSchema.background.endsPattern","ProblemMatcherSchema.watching.deprecated","ProblemMatcherSchema.watching","ProblemMatcherSchema.watching.activeOnStart","ProblemMatcherSchema.watching.beginsPattern","ProblemMatcherSchema.watching.endsPattern","LegacyProblemMatcherSchema.watchedBegin.deprecated","LegacyProblemMatcherSchema.watchedBegin","LegacyProblemMatcherSchema.watchedEnd.deprecated","LegacyProblemMatcherSchema.watchedEnd","NamedProblemMatcherSchema.name","NamedProblemMatcherSchema.label","ProblemMatcherExtPoint","msCompile","lessCompile","gulp-tsc","jshint","jshint-stylish","eslint-compact","eslint-stylish","go"],"vs/workbench/contrib/tasks/browser/runAutomaticTasks":["workbench.action.tasks.manageAutomaticRunning","workbench.action.tasks.allowAutomaticTasks","workbench.action.tasks.disallowAutomaticTasks"],"vs/workbench/contrib/tasks/common/jsonSchema_v2":["JsonSchema.shell","JsonSchema.tasks.isShellCommand.deprecated","JsonSchema.hide","JsonSchema.tasks.dependsOn.identifier","JsonSchema.tasks.dependsOn.string","JsonSchema.tasks.dependsOn.array","JsonSchema.tasks.dependsOn","JsonSchema.tasks.dependsOrder.parallel","JsonSchema.tasks.dependsOrder.sequence","JsonSchema.tasks.dependsOrder","JsonSchema.tasks.detail","JsonSchema.tasks.icon","JsonSchema.tasks.icon.id","JsonSchema.tasks.icon.color","JsonSchema.tasks.presentation","JsonSchema.tasks.presentation.echo","JsonSchema.tasks.presentation.focus","JsonSchema.tasks.presentation.revealProblems.always","JsonSchema.tasks.presentation.revealProblems.onProblem","JsonSchema.tasks.presentation.revealProblems.never","JsonSchema.tasks.presentation.revealProblems","JsonSchema.tasks.presentation.reveal.always","JsonSchema.tasks.presentation.reveal.silent","JsonSchema.tasks.presentation.reveal.never","JsonSchema.tasks.presentation.reveal","JsonSchema.tasks.presentation.instance","JsonSchema.tasks.presentation.showReuseMessage","JsonSchema.tasks.presentation.clear","JsonSchema.tasks.presentation.group","JsonSchema.tasks.presentation.close","JsonSchema.tasks.terminal","JsonSchema.tasks.group.build","JsonSchema.tasks.group.test","JsonSchema.tasks.group.none","JsonSchema.tasks.group.kind","JsonSchema.tasks.group.isDefault","JsonSchema.tasks.group.defaultBuild","JsonSchema.tasks.group.defaultTest","JsonSchema.tasks.group","JsonSchema.tasks.type","JsonSchema.commandArray","JsonSchema.commandArray","JsonSchema.command.quotedString.value","JsonSchema.tasks.quoting.escape","JsonSchema.tasks.quoting.strong","JsonSchema.tasks.quoting.weak","JsonSchema.command.quotesString.quote","JsonSchema.command","JsonSchema.args.quotedString.value","JsonSchema.tasks.quoting.escape","JsonSchema.tasks.quoting.strong","JsonSchema.tasks.quoting.weak","JsonSchema.args.quotesString.quote","JsonSchema.tasks.args","JsonSchema.tasks.label","JsonSchema.version","JsonSchema.tasks.identifier","JsonSchema.tasks.identifier.deprecated","JsonSchema.tasks.reevaluateOnRerun","JsonSchema.tasks.runOn","JsonSchema.tasks.instanceLimit","JsonSchema.tasks.runOptions","JsonSchema.tasks.taskLabel","JsonSchema.tasks.taskName","JsonSchema.tasks.taskName.deprecated","JsonSchema.tasks.background","JsonSchema.tasks.promptOnClose","JsonSchema.tasks.matchers","JsonSchema.customizations.customizes.type","JsonSchema.tasks.customize.deprecated","JsonSchema.tasks.taskName.deprecated","JsonSchema.tasks.showOutput.deprecated","JsonSchema.tasks.echoCommand.deprecated","JsonSchema.tasks.suppressTaskName.deprecated","JsonSchema.tasks.isBuildCommand.deprecated","JsonSchema.tasks.isTestCommand.deprecated","JsonSchema.tasks.type","JsonSchema.tasks.suppressTaskName.deprecated","JsonSchema.tasks.taskSelector.deprecated","JsonSchema.windows","JsonSchema.mac","JsonSchema.linux"],"vs/workbench/contrib/extensions/browser/extensionEnablementWorkspaceTrustTransitionParticipant":["restartExtensionHost.reason"],"vs/workbench/contrib/tasks/common/jsonSchema_v1":["JsonSchema.version.deprecated","JsonSchema.version","JsonSchema._runner","JsonSchema.runner","JsonSchema.windows","JsonSchema.mac","JsonSchema.linux","JsonSchema.shell"],"vs/workbench/contrib/tasks/browser/tasksQuickAccess":["noTaskResults","TaskService.pickRunTask"],"vs/workbench/contrib/tasks/common/taskDefinitionRegistry":["TaskDefinition.description","TaskDefinition.properties","TaskDefinition.when","TaskTypeConfiguration.noType","TaskDefinitionExtPoint"],"vs/workbench/contrib/remote/browser/tunnelFactory":["tunnelPrivacy.private","tunnelPrivacy.public"],"vs/workbench/contrib/remote/browser/remote":["remote.help.getStarted","remote.help.documentation","remote.help.issues","remote.help.report","pickRemoteExtension","remotehelp","remote.explorer","remote.explorer","reconnectionWaitOne","reconnectionWaitMany","reconnectNow","reloadWindow","connectionLost","reconnectionRunning","reconnectionPermanentFailure",{"key":"reloadWindow.dialog","comment":["&& denotes a mnemonic"]},"remote.help"],"vs/workbench/contrib/remote/browser/remoteIndicator":["remote.category","remote.showMenu","remote.close",{"key":"miCloseRemote","comment":["&& denotes a mnemonic"]},"remote.install","host.open","host.open","host.reconnecting","disconnectedFrom",{"key":"host.tooltip","comment":["{0} is a remote host name, e.g. Dev Container"]},{"key":"workspace.tooltip","comment":["{0} is a remote workspace name, e.g. GitHub"]},{"key":"workspace.tooltip2","comment":["[features are not available]({1}) is a link. Only translate `features are not available`. Do not change brackets and parentheses or {0}"]},"noHost.tooltip","remoteHost","networkStatusOfflineTooltip","networkStatusHighLatencyTooltip","remote.startActions.help","remote.startActions.install","closeRemoteConnection.title","reloadWindow","closeVirtualWorkspace.title","remoteActions","remote.startActions.installingExtension"],"vs/workbench/contrib/emmet/browser/actions/expandAbbreviation":["expandAbbreviationAction",{"key":"miEmmetExpandAbbreviation","comment":["&& denotes a mnemonic"]}],"vs/workbench/contrib/codeEditor/browser/accessibility/accessibility":["toggleScreenReaderMode"],"vs/workbench/contrib/codeEditor/browser/diffEditorHelper":["hintWhitespace","hintTimeout","removeTimeout","msg1","msg2","msg3"],"vs/workbench/contrib/codeEditor/browser/inspectKeybindings":["workbench.action.inspectKeyMap","workbench.action.inspectKeyMapJSON"],"vs/workbench/contrib/codeEditor/browser/largeFileOptimizations":[{"key":"largeFile","comment":["Variable 0 will be a file name."]},"removeOptimizations","reopenFilePrompt"],"vs/workbench/contrib/codeEditor/browser/inspectEditorTokens/inspectEditorTokens":["inspectEditorTokens","inspectTMScopesWidget.loading"],"vs/workbench/contrib/codeEditor/browser/saveParticipants":[{"key":"formatting2","comment":["[configure]({1}) is a link. Only translate `configure`. Do not change brackets and parentheses or {1}"]},"codeaction",{"key":"codeaction.get2","comment":["[configure]({1}) is a link. Only translate `configure`. Do not change brackets and parentheses or {1}"]},"codeAction.apply"],"vs/workbench/contrib/codeEditor/browser/toggleColumnSelection":["toggleColumnSelection",{"key":"miColumnSelection","comment":["&& denotes a mnemonic"]}],"vs/workbench/contrib/codeEditor/browser/toggleMinimap":["toggleMinimap",{"key":"miMinimap","comment":["&& denotes a mnemonic"]}],"vs/workbench/contrib/codeEditor/browser/quickaccess/gotoLineQuickAccess":["gotoLine","gotoLineQuickAccessPlaceholder","gotoLineQuickAccess"],"vs/workbench/contrib/codeEditor/browser/toggleMultiCursorModifier":["toggleLocation","miMultiCursorAlt","miMultiCursorCmd","miMultiCursorCtrl"],"vs/workbench/contrib/codeEditor/browser/toggleRenderControlCharacter":["toggleRenderControlCharacters",{"key":"miToggleRenderControlCharacters","comment":["&& denotes a mnemonic"]}],"vs/workbench/contrib/codeEditor/browser/toggleRenderWhitespace":["toggleRenderWhitespace",{"key":"miToggleRenderWhitespace","comment":["&& denotes a mnemonic"]}],"vs/workbench/contrib/codeEditor/browser/toggleWordWrap":["editorWordWrap","toggle.wordwrap","unwrapMinified","wrapMinified",{"key":"miToggleWordWrap","comment":["&& denotes a mnemonic"]}],"vs/workbench/contrib/codeEditor/browser/emptyTextEditorHint/emptyTextEditorHint":["emptyHintText","emptyHintTextDismiss",{"key":"inlineChatHint","comment":["Preserve double-square brackets and their order"]},{"key":"message","comment":["Preserve double-square brackets and their order","language refers to a programming language"]},"defaultHintAriaLabel","disableHint"],"vs/workbench/contrib/snippets/browser/commands/configureSnippets":["global.scope","global.1","detail.label","name","bad_name1","bad_name2","bad_name3","openSnippet.label","userSnippets",{"key":"miOpenSnippets","comment":["&& denotes a mnemonic"]},"new.global_scope","new.global","new.workspace_scope","new.folder","group.global","new.global.sep","new.global.sep","openSnippet.pickLanguage"],"vs/workbench/contrib/snippets/browser/commands/fileTemplateSnippets":["label","placeholder"],"vs/workbench/contrib/snippets/browser/commands/insertSnippet":["snippet.suggestions.label"],"vs/workbench/contrib/snippets/browser/commands/surroundWithSnippet":["label"],"vs/workbench/contrib/snippets/browser/snippetCodeActionProvider":["codeAction","overflow.start.title","title"],"vs/workbench/contrib/snippets/browser/snippetsService":["invalid.path.0","invalid.language.0","invalid.language","invalid.path.1","vscode.extension.contributes.snippets","vscode.extension.contributes.snippets-language","vscode.extension.contributes.snippets-path","badVariableUse","badFile"],"vs/workbench/contrib/format/browser/formatActionsNone":["formatDocument.label.multiple","too.large","no.provider",{"key":"install.formatter","comment":["&& denotes a mnemonic"]}],"vs/workbench/contrib/format/browser/formatActionsMultiple":["null","nullFormatterDescription","miss","config.needed","config.bad","miss.1",{"key":"do.config","comment":["&& denotes a mnemonic"]},"do.config.notification","select","do.config.command","summary","formatter","formatter.default","def","config","format.placeHolder","select","formatDocument.label.multiple","formatSelection.label.multiple"],"vs/workbench/contrib/format/browser/formatModified":["formatChanges"],"vs/workbench/contrib/update/browser/update":["update.noReleaseNotesOnline","read the release notes","releaseNotes","update service disabled","learn more","updateIsReady","checkingForUpdates","downloading","updating","update service","noUpdatesAvailable","thereIsUpdateAvailable","download update","later","releaseNotes","updateAvailable","installUpdate","later","releaseNotes","updateNow","later","releaseNotes","updateAvailableAfterRestart","checkForUpdates","checkingForUpdates","download update_1","DownloadingUpdate","installUpdate...","installingUpdate","showUpdateReleaseNotes","restartToUpdate","switchToInsiders","switchToStable","relaunchMessage","relaunchDetailInsiders","relaunchDetailStable",{"key":"reload","comment":["&& denotes a mnemonic"]},"selectSyncService.message","selectSyncService.detail",{"key":"use insiders","comment":["&& denotes a mnemonic"]},{"key":"use stable","comment":["&& denotes a mnemonic"]}],"vs/workbench/contrib/welcomeGettingStarted/browser/gettingStartedInput":["getStarted"],"vs/workbench/contrib/welcomeGettingStarted/browser/startupPage":["welcome.displayName","startupPage.markdownPreviewError"],"vs/workbench/contrib/welcomeGettingStarted/browser/gettingStarted":["welcomeAriaLabel","pickWalkthroughs","welcome","checkboxTitle","welcomePage.showOnStartup",{"key":"gettingStarted.editingEvolved","comment":["Shown as subtitle on the Welcome page."]},"welcomePage.openFolderWithPath","recent","noRecents","openFolder","toStart","show more recents","showAll","start","new",{"key":"newItems","comment":["Shown when a list of items has changed based on an update from a remote source"]},"close","closeAriaLabel","walkthroughs","showAll","close","closeAriaLabel","gettingStarted.allStepsComplete","gettingStarted.someStepsComplete","gettingStarted.keyboardTip","imageShowing","allDone","nextOne","privacy statement","optOut",{"key":"footer","comment":["fist substitution is \\"vs code\\", second is \\"privacy statement\\", third is \\"opt out\\"."]}],"vs/workbench/contrib/welcomeGettingStarted/browser/gettingStartedService":["builtin","developer","resetWelcomePageWalkthroughProgress"],"vs/workbench/contrib/welcomeGettingStarted/browser/gettingStartedIcons":["gettingStartedUnchecked","gettingStartedChecked"],"vs/workbench/contrib/welcomeWalkthrough/browser/walkThroughPart":["walkThrough.unboundCommand","walkThrough.gitNotFound"],"vs/workbench/contrib/welcomeWalkthrough/browser/editor/editorWalkThrough":["editorWalkThrough.title","editorWalkThrough"],"vs/workbench/contrib/welcomeViews/common/viewsWelcomeContribution":["ViewsWelcomeExtensionPoint.proposedAPI"],"vs/workbench/contrib/welcomeViews/common/viewsWelcomeExtensionPoint":["contributes.viewsWelcome","contributes.viewsWelcome.view","contributes.viewsWelcome.view.view","contributes.viewsWelcome.view.view","contributes.viewsWelcome.view.contents","contributes.viewsWelcome.view.when","contributes.viewsWelcome.view.group","contributes.viewsWelcome.view.enablement"],"vs/workbench/contrib/callHierarchy/browser/callHierarchyPeek":["callFrom","callsTo","title.loading","empt.callsFrom","empt.callsTo"],"vs/workbench/contrib/typeHierarchy/browser/typeHierarchyPeek":["supertypes","subtypes","title.loading","empt.supertypes","empt.subtypes"],"vs/workbench/contrib/codeEditor/browser/outline/documentSymbolsTree":["title.template","1.problem","N.problem","deep.problem"],"vs/workbench/contrib/outline/browser/outlinePane":["no-editor","loading","no-symbols"],"vs/workbench/contrib/outline/browser/outlineActions":["collapse","expand","followCur","filterOnType","sortByPosition","sortByName","sortByKind"],"vs/workbench/contrib/userDataSync/browser/userDataSync":["stop sync","configure sync","sync now","syncing","synced with time","sync settings","show synced data","conflicts detected","replace remote","replace local","show conflicts","accept failed","accept failed","session expired","turn on sync","turned off","turn on sync","too large","too many profiles","error upgrade required","operationId","method not found","operationId","show sync logs","report issue","error reset required","reset","show synced data action","service switched to insiders","service switched to stable","using separate service","service changed and turned off","turn on sync","operationId","open file","errorInvalidConfiguration","open file","has conflicts","turning on syncing","sign in to sync","no authentication providers","too large while starting sync","error upgrade required while starting sync","operationId","error reset required while starting sync","reset","show synced data action","auth failed","turn on failed with user data sync error",{"key":"turn on failed","comment":["Substitution is for error reason"]},"sign in and turn on","configure and turn on sync detail","configure sync title","configure sync placeholder","turn off sync confirmation","turn off sync detail",{"key":"turn off","comment":["&& denotes a mnemonic"]},"turn off sync everywhere","switchSyncService.title","switchSyncService.description","default","insiders","stable","global activity turn on sync","turnin on sync","cancel turning on sync","sign in global","sign in accounts","resolveConflicts_global","sync is on","turn off failed","configure","show sync log title","show sync log toolrip","complete merges title","download sync activity complete","workbench.actions.syncData.reset"],"vs/workbench/contrib/userDataProfile/browser/userDataProfile":["profiles","switchProfile","selectProfile","edit profile","show profile contents","export profile","export profile in share","import profile","import from url","import from file","templates","import profile quick pick title","import profile placeholder","profile import error","import profile dialog","import profile share","save profile as","create profile","delete profile","current","delete specific profile","pick profile to delete"],"vs/workbench/contrib/userDataProfile/browser/userDataProfileActions":["create temporary profile","rename profile","select profile to rename","profileExists","current","rename specific profile","pick profile to rename","mange","cleanup profile","reset workspaces"],"vs/workbench/contrib/codeActions/common/codeActionsExtensionPoint":["contributes.codeActions","contributes.codeActions.languages","contributes.codeActions.kind","contributes.codeActions.title","contributes.codeActions.description"],"vs/workbench/contrib/codeActions/common/documentationExtensionPoint":["contributes.documentation","contributes.documentation.refactorings","contributes.documentation.refactoring","contributes.documentation.refactoring.title","contributes.documentation.refactoring.when","contributes.documentation.refactoring.command"],"vs/workbench/contrib/codeActions/browser/codeActionsContribution":["alwaysSave","explicitSave","neverSave","explicitSaveBoolean","neverSaveBoolean","codeActionsOnSave.fixAll","editor.codeActionsOnSave","codeActionsOnSave.generic"],"vs/workbench/contrib/timeline/browser/timelinePane":["timeline.loadingMore","timeline.loadMore","timeline.editorCannotProvideTimeline","timeline.noTimelineSourcesEnabled","timeline.noLocalHistoryYet","timeline.noTimelineInfoFromEnabledSources","timeline.noTimelineInfo","timeline.noSCM","timeline.editorCannotProvideTimeline","timeline.aria.item","timeline","timeline.loading","timelineRefresh","timelinePin","timelineUnpin","refresh","timeline","timeline.toggleFollowActiveEditorCommand.follow","timeline","timeline.toggleFollowActiveEditorCommand.unfollow","timeline","timeline"],"vs/workbench/contrib/localHistory/browser/localHistoryTimeline":["localHistory"],"vs/workbench/contrib/localHistory/browser/localHistoryCommands":["localHistory.category","localHistory.compareWithFile","localHistory.compareWithPrevious","localHistory.selectForCompare","localHistory.compareWithSelected","localHistory.open","localHistory.restore","localHistoryRestore.source","confirmRestoreMessage","confirmRestoreDetail",{"key":"restoreButtonLabel","comment":["&& denotes a mnemonic"]},"unableToRestore","localHistory.restoreViaPicker","restoreViaPicker.filePlaceholder","restoreViaPicker.entryPlaceholder","localHistory.restoreViaPickerMenu","localHistory.rename","renameLocalHistoryEntryTitle","renameLocalHistoryPlaceholder","localHistory.delete","confirmDeleteMessage","confirmDeleteDetail",{"key":"deleteButtonLabel","comment":["&& denotes a mnemonic"]},"localHistory.deleteAll","confirmDeleteAllMessage","confirmDeleteAllDetail",{"key":"deleteAllButtonLabel","comment":["&& denotes a mnemonic"]},"localHistory.create","createLocalHistoryEntryTitle","createLocalHistoryPlaceholder","localHistoryEditorLabel","localHistoryCompareToFileEditorLabel","localHistoryCompareToPreviousEditorLabel"],"vs/workbench/contrib/editSessions/common/editSessions":["cloud changes","editSessionViewIcon","cloud changes"],"vs/workbench/contrib/editSessions/common/editSessionsLogService":["cloudChangesLog"],"vs/workbench/contrib/editSessions/browser/editSessionsStorageService":["choose account read placeholder","choose account placeholder","signed in","others","sign in using account","sign in","sign in badge","reset auth.v3","sign out of cloud changes clear data prompt","delete all cloud changes"],"vs/workbench/contrib/editSessions/browser/editSessionsViews":["noStoredChanges","storeWorkingChangesTitle","workbench.editSessions.actions.resume.v2","workbench.editSessions.actions.store.v2","workbench.editSessions.actions.delete.v2","confirm delete.v2","confirm delete detail.v2","workbench.editSessions.actions.deleteAll","confirm delete all","confirm delete all detail","compare changes","local copy","cloud changes","open file"],"vs/workbench/contrib/workspace/browser/workspaceTrustEditor":["shieldIcon","checkListIcon","xListIcon","folderPickerIcon","editIcon","removeIcon","hostColumnLabel","pathColumnLabel","trustedFolderAriaLabel","trustedFolderWithHostAriaLabel","trustedFoldersAndWorkspaces","addButton","addButton","trustUri","selectTrustedUri","trustedFoldersDescription","noTrustedFoldersDescriptions",{"key":"trustAll","comment":["The {0} will be a host name where repositories are hosted."]},{"key":"trustOrg","comment":["The {0} will be an organization or user name.","The {1} will be a host name where repositories are hosted."]},"invalidTrust","trustUri","selectTrustedUri","editTrustedUri","pickerTrustedUri","deleteTrustedUri","localAuthority","trustedUnsettableWindow","trustedHeaderWindow","trustedHeaderFolder","trustedHeaderWorkspace","untrustedHeader","trustedWindow","untrustedWorkspace","trustedWindowSubtitle","untrustedWindowSubtitle","trustedFolder","untrustedWorkspace","trustedFolderSubtitle","untrustedFolderSubtitle","trustedWorkspace","untrustedWorkspace","trustedWorkspaceSubtitle","untrustedWorkspaceSubtitle","trustedDescription","untrustedDescription",{"key":"workspaceTrustEditorHeaderActions","comment":["Please ensure the markdown link syntax is not broken up with whitespace [text block](link block)"]},"root element label","trustedFoldersAndWorkspaces","trustedTasks","trustedDebugging","trustedExtensions","trustedTasks","trustedDebugging","trustedSettings","trustedExtensions","untrustedTasks","untrustedDebugging",{"key":"untrustedExtensions","comment":["Please ensure the markdown link syntax is not broken up with whitespace [text block](link block)"]},"untrustedTasks","untrustedDebugging",{"key":"untrustedSettings","comment":["Please ensure the markdown link syntax is not broken up with whitespace [text block](link block)"]},"no untrustedSettings",{"key":"untrustedExtensions","comment":["Please ensure the markdown link syntax is not broken up with whitespace [text block](link block)"]},"keyboardShortcut","trustButton","trustMessage","trustParentButton","dontTrustButton","untrustedWorkspaceReason","untrustedFolderReason","trustedForcedReason"],"vs/workbench/services/workspaces/browser/workspaceTrustEditorInput":["workspaceTrustEditorInputName"],"vs/workbench/contrib/accessibility/browser/accessibilityConfiguration":["accessibilityConfigurationTitle","verbosity.terminal.description","verbosity.diffEditor.description","verbosity.chat.description","verbosity.interactiveEditor.description","verbosity.inlineCompletions.description","verbosity.keybindingsEditor.description","verbosity.notebook","verbosity.hover","verbosity.notification","verbosity.emptyEditorHint","verbosity.comments","alert.save","alert.save.userGesture","alert.save.always","alert.save.never","alert.format","alert.format.userGesture","alert.format.always","alert.format.never","dimUnfocusedEnabled","dimUnfocusedOpacity","accessibility.hideAccessibleView"],"vs/workbench/contrib/accessibility/browser/accessibleNotificationService":["cleared","saved","formatted"],"vs/workbench/contrib/accessibility/browser/accessibilityStatus":["screenReaderDetectedExplanation.question","screenReaderDetectedExplanation.answerYes","screenReaderDetectedExplanation.answerNo","screenReaderDetected","status.editor.screenReaderMode"],"vs/workbench/contrib/audioCues/browser/commands":["audioCues.help","disabled","audioCues.help.settings","audioCues.help.placeholder"],"vs/workbench/contrib/share/browser/shareService":["shareProviderCount","type to filter"],"vs/workbench/browser/parts/notifications/notificationsCenter":["notificationsEmpty","notifications","notificationsToolbar","notificationsCenterWidgetAriaLabel"],"vs/workbench/browser/parts/notifications/notificationsAlerts":["alertErrorMessage","alertWarningMessage","alertInfoMessage"],"vs/workbench/browser/parts/notifications/notificationsStatus":["status.notifications","status.notifications","status.doNotDisturb","status.doNotDisturbTooltip","hideNotifications","zeroNotifications","noNotifications","oneNotification",{"key":"notifications","comment":["{0} will be replaced by a number"]},{"key":"noNotificationsWithProgress","comment":["{0} will be replaced by a number"]},{"key":"oneNotificationWithProgress","comment":["{0} will be replaced by a number"]},{"key":"notificationsWithProgress","comment":["{0} and {1} will be replaced by a number"]},"status.message"],"vs/workbench/browser/parts/notifications/notificationsToasts":["notificationAriaLabel","notificationWithSourceAriaLabel"],"vs/workbench/browser/parts/notifications/notificationsCommands":["notifications","showNotifications","hideNotifications","clearAllNotifications","acceptNotificationPrimaryAction","toggleDoNotDisturbMode","focusNotificationToasts"],"vs/workbench/services/configuration/common/configurationEditing":["fsError","openTasksConfiguration","openLaunchConfiguration","open","openTasksConfiguration","openLaunchConfiguration","saveAndRetry","saveAndRetry","open","errorPolicyConfiguration","errorUnknownKey","errorInvalidWorkspaceConfigurationApplication","errorInvalidWorkspaceConfigurationMachine","errorInvalidFolderConfiguration","errorInvalidUserTarget","errorInvalidWorkspaceTarget","errorInvalidFolderTarget","errorInvalidResourceLanguageConfiguration","errorNoWorkspaceOpened","errorInvalidTaskConfiguration","errorInvalidLaunchConfiguration","errorInvalidConfiguration","errorInvalidRemoteConfiguration","errorInvalidConfigurationWorkspace","errorInvalidConfigurationFolder","errorTasksConfigurationFileDirty","errorLaunchConfigurationFileDirty","errorConfigurationFileDirty","errorRemoteConfigurationFileDirty","errorConfigurationFileDirtyWorkspace","errorConfigurationFileDirtyFolder","errorTasksConfigurationFileModifiedSince","errorLaunchConfigurationFileModifiedSince","errorConfigurationFileModifiedSince","errorRemoteConfigurationFileModifiedSince","errorConfigurationFileModifiedSinceWorkspace","errorConfigurationFileModifiedSinceFolder","errorUnknown","userTarget","remoteUserTarget","workspaceTarget","folderTarget"],"vs/workbench/services/textfile/common/textFileEditorModelManager":[{"key":"genericSaveError","comment":["{0} is the resource that failed to save and {1} the error message"]}],"vs/workbench/common/editor/textEditorModel":["languageAutoDetected"],"vs/workbench/browser/parts/titlebar/titlebarPart":["focusTitleBar","toggle.commandCenter","toggle.layout"],"vs/workbench/services/configurationResolver/common/variableResolver":["canNotResolveFile","canNotResolveFolderForFile","canNotFindFolder","canNotResolveWorkspaceFolderMultiRoot","canNotResolveWorkspaceFolder","missingEnvVarName","configNotFound","configNoString","missingConfigName","extensionNotInstalled","missingExtensionName","canNotResolveUserHome","canNotResolveLineNumber","canNotResolveSelectedText","noValueForCommand"],"vs/workbench/services/workingCopy/common/workingCopyHistoryTracker":["undoRedo.source"],"vs/workbench/services/extensions/common/extensionHostManager":["measureExtHostLatency"],"vs/workbench/services/extensions/common/extensionsUtil":["overwritingExtension","overwritingExtension","extensionUnderDevelopment"],"vs/workbench/contrib/localization/common/localizationsActions":["chooseLocale","installed","available","moreInfo","clearDisplayLanguage","configureLocale","configureLocaleDescription"],"vs/workbench/contrib/extensions/common/reportExtensionIssueAction":["reportExtensionIssue"],"vs/workbench/contrib/extensions/electron-sandbox/extensionsSlowActions":["cmd.reportOrShow","cmd.report","attach.title","attach.msg","cmd.show","attach.title","attach.msg2"],"vs/workbench/contrib/terminal/electron-sandbox/terminalRemote":["workbench.action.terminal.newLocal"],"vs/workbench/contrib/terminal/browser/baseTerminalBackend":["ptyHostStatus","ptyHostStatus.short","nonResponsivePtyHost","ptyHostStatus.ariaLabel"],"vs/workbench/contrib/localHistory/browser/localHistory":["localHistoryIcon","localHistoryRestore"],"vs/workbench/contrib/tasks/browser/taskTerminalStatus":["taskTerminalStatus.active","taskTerminalStatus.succeeded","taskTerminalStatus.succeededInactive","taskTerminalStatus.errors","taskTerminalStatus.errorsInactive","taskTerminalStatus.warnings","taskTerminalStatus.warningsInactive","taskTerminalStatus.infos","taskTerminalStatus.infosInactive","task.watchFirstError"],"vs/workbench/contrib/tasks/common/taskConfiguration":["ConfigurationParser.invalidCWD","ConfigurationParser.inValidArg","ConfigurationParser.noShell","ConfigurationParser.noName","ConfigurationParser.unknownMatcherKind","ConfigurationParser.invalidVariableReference","ConfigurationParser.noTaskType","ConfigurationParser.noTypeDefinition","ConfigurationParser.missingType","ConfigurationParser.incorrectType","ConfigurationParser.notCustom","ConfigurationParser.noTaskName","taskConfiguration.providerUnavailable","taskConfiguration.noCommandOrDependsOn","taskConfiguration.noCommand",{"key":"TaskParse.noOsSpecificGlobalTasks","comment":["\\"Task version 2.0.0\\" refers to the 2.0.0 version of the task system. The \\"version 2.0.0\\" is not localizable as it is a json key and value."]}],"vs/workbench/contrib/tasks/common/taskTemplates":["dotnetCore","msbuild","externalCommand","Maven"],"vs/workbench/contrib/tasks/browser/taskQuickPick":["taskQuickPick.showAll","configureTaskIcon","removeTaskIcon","configureTask","contributedTasks","taskType","removeRecent","recentlyUsed","configured","configured","TaskQuickPick.changeSettingDetails","TaskQuickPick.changeSettingNo","TaskService.pickRunTask","TaskQuickPick.changeSettingsOptions","TaskQuickPick.goBack","TaskQuickPick.noTasksForType","noProviderForTask"],"vs/workbench/contrib/debug/common/abstractDebugAdapter":["timeout"],"vs/workbench/contrib/debug/node/debugAdapter":["debugAdapterBinNotFound",{"key":"debugAdapterCannotDetermineExecutable","comment":["Adapter executable file not found"]},"unableToLaunchDebugAdapter","unableToLaunchDebugAdapterNoArgs"],"vs/platform/menubar/electron-main/menubar":[{"key":"miNewWindow","comment":["&& denotes a mnemonic"]},{"key":"mFile","comment":["&& denotes a mnemonic"]},{"key":"mEdit","comment":["&& denotes a mnemonic"]},{"key":"mSelection","comment":["&& denotes a mnemonic"]},{"key":"mView","comment":["&& denotes a mnemonic"]},{"key":"mGoto","comment":["&& denotes a mnemonic"]},{"key":"mRun","comment":["&& denotes a mnemonic"]},{"key":"mTerminal","comment":["&& denotes a mnemonic"]},"mWindow",{"key":"mHelp","comment":["&& denotes a mnemonic"]},"mAbout",{"key":"miPreferences","comment":["&& denotes a mnemonic"]},"mServices","mHide","mHideOthers","mShowAll","miQuit",{"key":"quit","comment":["&& denotes a mnemonic"]},"cancel","quitMessage","mMinimize","mZoom","mBringToFront",{"key":"miSwitchWindow","comment":["&& denotes a mnemonic"]},"mNewTab","mShowPreviousTab","mShowNextTab","mMoveTabToNewWindow","mMergeAllWindows","miCheckForUpdates","miCheckingForUpdates","miDownloadUpdate","miDownloadingUpdate","miInstallUpdate","miInstallingUpdate","miRestartToUpdate"],"vs/platform/windows/electron-main/windowImpl":[{"key":"reopen","comment":["&& denotes a mnemonic"]},{"key":"close","comment":["&& denotes a mnemonic"]},{"key":"wait","comment":["&& denotes a mnemonic"]},"appStalled","appStalledDetail","doNotRestoreEditors","appGone","appGoneDetails",{"key":"reopen","comment":["&& denotes a mnemonic"]},{"key":"newWindow","comment":["&& denotes a mnemonic"]},{"key":"close","comment":["&& denotes a mnemonic"]},"appGoneDetailWorkspace","appGoneDetailEmptyWindow","doNotRestoreEditors","hiddenMenuBar"],"vs/platform/terminal/common/terminalPlatformConfiguration":["terminalProfile.args","terminalProfile.overrideName","terminalProfile.icon","terminalProfile.color","terminalProfile.env","terminalProfile.path","terminalAutomationProfile.path",{"key":"terminal.integrated.profile","comment":["{0} is the platform, {1} is a code block, {2} and {3} are a link start and end"]},"terminalIntegratedConfigurationTitle","terminal.integrated.automationProfile.linux","terminal.integrated.automationProfile.osx","terminal.integrated.automationProfile.windows","terminalProfile.windowsSource","terminalProfile.windowsExtensionIdentifier","terminalProfile.windowsExtensionId","terminalProfile.windowsExtensionTitle","terminalProfile.osxExtensionIdentifier","terminalProfile.osxExtensionId","terminalProfile.osxExtensionTitle","terminalProfile.linuxExtensionIdentifier","terminalProfile.linuxExtensionId","terminalProfile.linuxExtensionTitle","terminal.integrated.useWslProfiles","terminal.integrated.inheritEnv","terminal.integrated.persistentSessionScrollback","terminal.integrated.showLinkHover","terminal.integrated.confirmIgnoreProcesses","terminalIntegratedConfigurationTitle","terminal.integrated.defaultProfile.linux","terminal.integrated.defaultProfile.osx","terminal.integrated.defaultProfile.windows"],"vs/base/browser/ui/findinput/findInput":["defaultLabel"],"vs/base/browser/ui/inputbox/inputBox":["alertErrorMessage","alertWarningMessage","alertInfoMessage",{"key":"history.inputbox.hint","comment":["Text will be prefixed with ⇅ plus a single space, then used as a hint where input field keeps history"]},"clearedInput"],"vs/editor/contrib/codeAction/browser/codeActionCommands":["args.schema.kind","args.schema.apply","args.schema.apply.first","args.schema.apply.ifSingle","args.schema.apply.never","args.schema.preferred","quickfix.trigger.label","editor.action.quickFix.noneMessage","editor.action.codeAction.noneMessage.preferred.kind","editor.action.codeAction.noneMessage.kind","editor.action.codeAction.noneMessage.preferred","editor.action.codeAction.noneMessage","refactor.label","editor.action.refactor.noneMessage.preferred.kind","editor.action.refactor.noneMessage.kind","editor.action.refactor.noneMessage.preferred","editor.action.refactor.noneMessage","source.label","editor.action.source.noneMessage.preferred.kind","editor.action.source.noneMessage.kind","editor.action.source.noneMessage.preferred","editor.action.source.noneMessage","organizeImports.label","editor.action.organize.noneMessage","fixAll.label","fixAll.noneMessage","autoFix.label","editor.action.autoFix.noneMessage"],"vs/editor/contrib/codeAction/browser/codeActionController":["editingNewSelection","hideMoreActions","showMoreActions"],"vs/editor/contrib/codeAction/browser/lightBulbWidget":["preferredcodeActionWithKb","codeActionWithKb","codeAction"],"vs/base/browser/ui/actionbar/actionViewItems":[{"key":"titleLabel","comment":["action title","action keybinding"]}],"vs/editor/contrib/dropOrPasteInto/browser/copyPasteController":["pasteWidgetVisible","postPasteWidgetTitle","pasteIntoEditorProgress","pasteAsPickerPlaceholder","pasteAsProgress"],"vs/editor/contrib/dropOrPasteInto/browser/defaultProviders":["builtIn","text.label","defaultDropProvider.uriList.uris","defaultDropProvider.uriList.uri","defaultDropProvider.uriList.paths","defaultDropProvider.uriList.path","defaultDropProvider.uriList.relativePaths","defaultDropProvider.uriList.relativePath"],"vs/editor/contrib/dropOrPasteInto/browser/dropIntoEditorController":["dropWidgetVisible","postDropWidgetTitle","dropIntoEditorProgress"],"vs/editor/contrib/folding/browser/foldingDecorations":["foldBackgroundBackground","editorGutter.foldingControlForeground","foldingExpandedIcon","foldingCollapsedIcon","foldingManualCollapedIcon","foldingManualExpandedIcon"],"vs/editor/contrib/find/browser/findWidget":["findSelectionIcon","findCollapsedIcon","findExpandedIcon","findReplaceIcon","findReplaceAllIcon","findPreviousMatchIcon","findNextMatchIcon","label.findDialog","label.find","placeholder.find","label.previousMatchButton","label.nextMatchButton","label.toggleSelectionFind","label.closeButton","label.replace","placeholder.replace","label.replaceButton","label.replaceAllButton","label.toggleReplaceButton","title.matchesCountLimit","label.matchesLocation","label.noResults","ariaSearchNoResultEmpty","ariaSearchNoResult","ariaSearchNoResultWithLineNum","ariaSearchNoResultWithLineNumNoCurrentMatch","ctrlEnter.keybindingChanged"],"vs/editor/contrib/inlineCompletions/browser/commands":["action.inlineSuggest.showNext","action.inlineSuggest.showPrevious","action.inlineSuggest.trigger","action.inlineSuggest.acceptNextWord","acceptWord","action.inlineSuggest.acceptNextLine","acceptLine","action.inlineSuggest.accept","accept","action.inlineSuggest.hide","action.inlineSuggest.alwaysShowToolbar"],"vs/editor/contrib/inlineCompletions/browser/hoverParticipant":["inlineSuggestionFollows"],"vs/editor/contrib/inlineCompletions/browser/inlineCompletionsController":["showAccessibleViewHint"],"vs/editor/contrib/gotoSymbol/browser/peek/referencesController":["referenceSearchVisible","labelLoading","metaTitle.N"],"vs/editor/contrib/gotoSymbol/browser/referencesModel":["aria.oneReference",{"key":"aria.oneReference.preview","comment":["Placeholders are: 0: filename, 1:line number, 2: column number, 3: preview snippet of source code"]},"aria.fileReferences.1","aria.fileReferences.N","aria.result.0","aria.result.1","aria.result.n1","aria.result.nm"],"vs/editor/contrib/gotoSymbol/browser/symbolNavigation":["hasSymbols","location.kb","location"],"vs/editor/contrib/message/browser/messageController":["messageVisible"],"vs/editor/contrib/gotoError/browser/gotoErrorWidget":["Error","Warning","Info","Hint","marker aria","problems","change","editorMarkerNavigationError","editorMarkerNavigationErrorHeaderBackground","editorMarkerNavigationWarning","editorMarkerNavigationWarningBackground","editorMarkerNavigationInfo","editorMarkerNavigationInfoHeaderBackground","editorMarkerNavigationBackground"],"vs/editor/contrib/hover/browser/markdownHoverParticipant":["modesContentHover.loading","stopped rendering","too many characters"],"vs/editor/contrib/hover/browser/markerHoverParticipant":["view problem","noQuickFixes","checkingForQuickFixes","noQuickFixes","quick fixes"],"vs/editor/contrib/inlineCompletions/browser/inlineCompletionsHintsWidget":["parameterHintsNextIcon","parameterHintsPreviousIcon",{"key":"content","comment":["A label","A keybinding"]},"previous","next"],"vs/editor/contrib/inlayHints/browser/inlayHintsHover":["hint.dbl","links.navigate.kb.meta.mac","links.navigate.kb.meta","links.navigate.kb.alt.mac","links.navigate.kb.alt","hint.defAndCommand","hint.def","hint.cmd"],"vs/editor/contrib/wordHighlighter/browser/highlightDecorations":["wordHighlight","wordHighlightStrong","wordHighlightText","wordHighlightBorder","wordHighlightStrongBorder","wordHighlightTextBorder","overviewRulerWordHighlightForeground","overviewRulerWordHighlightStrongForeground","overviewRulerWordHighlightTextForeground"],"vs/editor/contrib/parameterHints/browser/parameterHintsWidget":["parameterHintsNextIcon","parameterHintsPreviousIcon","hint","editorHoverWidgetHighlightForeground"],"vs/editor/contrib/rename/browser/renameInputField":["renameInputVisible","renameAriaLabel",{"key":"label","comment":["placeholders are keybindings, e.g \\"F2 to Rename, Shift+F2 to Preview\\""]}],"vs/editor/contrib/stickyScroll/browser/stickyScrollActions":["toggleStickyScroll",{"key":"mitoggleStickyScroll","comment":["&& denotes a mnemonic"]},"stickyScroll",{"key":"miStickyScroll","comment":["&& denotes a mnemonic"]},"focusStickyScroll",{"key":"mifocusStickyScroll","comment":["&& denotes a mnemonic"]},"selectNextStickyScrollLine.title","selectPreviousStickyScrollLine.title","goToFocusedStickyScrollLine.title","selectEditor.title"],"vs/editor/contrib/suggest/browser/suggestWidget":["editorSuggestWidgetBackground","editorSuggestWidgetBorder","editorSuggestWidgetForeground","editorSuggestWidgetSelectedForeground","editorSuggestWidgetSelectedIconForeground","editorSuggestWidgetSelectedBackground","editorSuggestWidgetHighlightForeground","editorSuggestWidgetFocusHighlightForeground","editorSuggestWidgetStatusForeground","suggestWidget.loading","suggestWidget.noSuggestions","suggest","label.full","label.detail","label.desc","ariaCurrenttSuggestionReadDetails"],"vs/platform/theme/common/tokenClassificationRegistry":["schema.token.settings","schema.token.foreground","schema.token.background.warning","schema.token.fontStyle","schema.fontStyle.error","schema.token.fontStyle.none","schema.token.bold","schema.token.italic","schema.token.underline","schema.token.strikethrough","comment","string","keyword","number","regexp","operator","namespace","type","struct","class","interface","enum","typeParameter","function","member","method","macro","variable","parameter","property","enumMember","event","decorator","labels","declaration","documentation","static","abstract","deprecated","modification","async","readonly"],"vs/workbench/api/browser/mainThreadWebviews":["errorMessage"],"vs/workbench/browser/parts/editor/textEditor":["editor"],"vs/workbench/contrib/terminal/browser/terminalEditorInput":["confirmDirtyTerminal.message",{"key":"confirmDirtyTerminal.button","comment":["&& denotes a mnemonic"]},"confirmDirtyTerminals.detail","confirmDirtyTerminal.detail"],"vs/workbench/api/browser/mainThreadCustomEditors":["vetoExtHostRestart","defaultEditLabel"],"vs/workbench/contrib/comments/browser/commentsView":["comments.filter.placeholder","comments.filter.ariaLabel","totalUnresolvedComments","showing filtered results","rootCommentsLabel","resourceWithCommentThreadsLabel","resourceWithCommentLabel","resourceWithCommentLabelFile","collapseAll","expandAll"],"vs/workbench/contrib/comments/browser/commentsTreeViewer":["commentsCount","commentCount","imageWithLabel","image","commentLine","commentRange","lastReplyFrom","comments.view.title"],"vs/workbench/contrib/testing/common/testResult":["runFinished"],"vs/workbench/browser/parts/editor/editorDropTarget":["dropIntoEditorPrompt"],"vs/workbench/browser/parts/editor/editorGroupView":["ariaLabelGroupActions","emptyEditorGroup","groupLabelLong","groupLabel","groupAriaLabelLong","groupAriaLabel"],"vs/base/browser/ui/tree/treeDefaults":["collapse all"],"vs/workbench/browser/parts/views/checkbox":["checked","unchecked"],"vs/base/browser/ui/splitview/paneview":["viewSection"],"vs/workbench/contrib/remote/browser/tunnelView":["remote.tunnelsView.addPort","tunnelPrivacy.private","tunnel.portColumn.label","tunnel.portColumn.tooltip","tunnel.addressColumn.label","tunnel.addressColumn.tooltip","portsLink.followLinkAlt.mac","portsLink.followLinkAlt","portsLink.followLinkCmd","portsLink.followLinkCtrl","tunnel.processColumn.label","tunnel.processColumn.tooltip","tunnel.originColumn.label","tunnel.originColumn.tooltip","tunnel.privacyColumn.label","tunnel.privacyColumn.tooltip","remote.tunnelsView.input","tunnelView.runningProcess.inacessable","remote.tunnel.tooltipForwarded","remote.tunnel.tooltipCandidate","tunnel.iconColumn.running","tunnel.iconColumn.notRunning","remote.tunnel.tooltipName","tunnelPrivacy.unknown","tunnelPrivacy.private","tunnel.focusContext","tunnelView","remote.tunnel.label","remote.tunnelsView.labelPlaceholder","remote.tunnelsView.portNumberValid","remote.tunnelsView.portNumberToHigh","remote.tunnelView.inlineElevationMessage","remote.tunnelView.alreadyForwarded","remote.tunnel.forward","remote.tunnel.forwardItem","remote.tunnel.forwardPrompt","remote.tunnel.forwardError","remote.tunnel.forwardErrorProvided","remote.tunnel.closeNoPorts","remote.tunnel.close","remote.tunnel.closePlaceholder","remote.tunnel.open","remote.tunnel.openPreview","remote.tunnel.openCommandPalette","remote.tunnel.openCommandPaletteNone","remote.tunnel.openCommandPaletteView","remote.tunnel.openCommandPalettePick","remote.tunnel.copyAddressInline","remote.tunnel.copyAddressCommandPalette","remote.tunnel.copyAddressPlaceholdter","remote.tunnel.changeLocalPort","remote.tunnelsView.portShouldBeNumber","remote.tunnel.changeLocalPortNumber","remote.tunnelsView.changePort","remote.tunnel.protocolHttp","remote.tunnel.protocolHttps","tunnelContext.privacyMenu","tunnelContext.protocolMenu","portWithRunningProcess.foreground","remote.tunnel"],"vs/workbench/contrib/remote/browser/remoteIcons":["getStartedIcon","documentationIcon","feedbackIcon","reviewIssuesIcon","reportIssuesIcon","remoteExplorerViewIcon","portsViewIcon","portIcon","privatePortIcon","forwardPortIcon","stopForwardIcon","openBrowserIcon","openPreviewIcon","copyAddressIcon","labelPortIcon","forwardedPortWithoutProcessIcon","forwardedPortWithProcessIcon"],"vs/workbench/browser/parts/editor/textCodeEditor":["textEditor"],"vs/workbench/browser/parts/editor/binaryEditor":["binaryEditor","binaryError","openAnyway"],"vs/workbench/browser/parts/paneCompositePart":["pane.emptyMessage","moreActions","views"],"vs/workbench/browser/parts/activitybar/activitybarPart":["menu","hideMenu","activity bar position","positionActivityBarSide",{"key":"miSideActivityBar","comment":["&& denotes a mnemonic"]},"side","positionActivityBarTop",{"key":"miTopActivityBar","comment":["&& denotes a mnemonic"]},"top","hideActivityBar",{"key":"miHideActivityBar","comment":["&& denotes a mnemonic"]},"hide","positionActivituBar","positionActivituBar","positionActivituBar","previousSideBarView","nextSideBarView","focusActivityBar"],"vs/workbench/browser/parts/sidebar/sidebarActions":["focusSideBar"],"vs/base/browser/ui/iconLabel/iconLabelHover":["iconLabel.loading"],"vs/workbench/services/preferences/browser/keybindingsEditorModel":["default","extension","user","cat.title","cat.title","option","meta"],"vs/workbench/services/preferences/common/preferencesValidation":["validations.booleanIncorrectType","validations.expectedNumeric","validations.stringIncorrectEnumOptions","validations.stringIncorrectType","invalidTypeError","validations.maxLength","validations.minLength","validations.regex","validations.colorFormat","validations.uriEmpty","validations.uriMissing","validations.uriSchemeMissing","validations.invalidStringEnumValue","validations.exclusiveMax","validations.exclusiveMin","validations.max","validations.min","validations.multipleOf","validations.expectedInteger","validations.arrayIncorrectType","validations.stringArrayUniqueItems","validations.stringArrayMinItem","validations.stringArrayMaxItem","validations.stringArrayIncorrectType","validations.stringArrayItemPattern","validations.stringArrayItemEnum","validations.objectIncorrectType","validations.objectPattern"],"vs/editor/common/model/editStack":["edit"],"vs/base/browser/ui/selectBox/selectBoxCustom":[{"key":"selectBox","comment":["Behave like native select dropdown element."]}],"vs/platform/quickinput/browser/quickInputController":["quickInput.checkAll",{"key":"quickInput.visibleCount","comment":["This tells the user how many items are shown in a list of items to select from. The items can be anything. Currently not visible, but read by screen readers."]},{"key":"quickInput.countSelected","comment":["This tells the user how many items are selected in a list of items to select from. The items can be anything."]},"ok","custom","quickInput.backWithKeybinding","quickInput.back"],"vs/base/browser/ui/hover/hoverWidget":["acessibleViewHint","acessibleViewHintNoKbOpen"],"vs/workbench/services/textMate/common/TMGrammars":["vscode.extension.contributes.grammars","vscode.extension.contributes.grammars.language","vscode.extension.contributes.grammars.scopeName","vscode.extension.contributes.grammars.path","vscode.extension.contributes.grammars.embeddedLanguages","vscode.extension.contributes.grammars.tokenTypes","vscode.extension.contributes.grammars.injectTo","vscode.extension.contributes.grammars.balancedBracketScopes","vscode.extension.contributes.grammars.unbalancedBracketScopes"],"vs/workbench/contrib/preferences/browser/preferencesWidgets":["userSettings","userSettingsRemote","workspaceSettings","folderSettings","settingsSwitcherBarAriaLabel","userSettings","userSettingsRemote","workspaceSettings","userSettings","workspaceSettings"],"vs/base/browser/ui/keybindingLabel/keybindingLabel":["unbound"],"vs/workbench/contrib/preferences/common/settingsEditorColorRegistry":["headerForeground","settingsHeaderHoverForeground","modifiedItemForeground","settingsHeaderBorder","settingsSashBorder","settingsDropdownBackground","settingsDropdownForeground","settingsDropdownBorder","settingsDropdownListBorder","settingsCheckboxBackground","settingsCheckboxForeground","settingsCheckboxBorder","textInputBoxBackground","textInputBoxForeground","textInputBoxBorder","numberInputBoxBackground","numberInputBoxForeground","numberInputBoxBorder","focusedRowBackground","settings.rowHoverBackground","settings.focusedRowBorder"],"vs/workbench/contrib/preferences/browser/preferencesRenderers":["editTtile","replaceDefaultValue","copyDefaultValue","unsupportedPolicySetting","unsupportLanguageOverrideSetting","defaultProfileSettingWhileNonDefaultActive","allProfileSettingWhileInNonDefaultProfileSetting","unsupportedRemoteMachineSetting","unsupportedWindowSetting","unsupportedApplicationSetting","unsupportedMachineSetting","untrustedSetting","unknown configuration setting","manage workspace trust","manage workspace trust","unsupportedProperty"],"vs/base/browser/ui/toolbar/toolbar":["moreActions"],"vs/workbench/contrib/preferences/browser/settingsTree":["extensions","modified","settingsContextMenuTitle","newExtensionsButtonLabel","editInSettingsJson","editLanguageSettingLabel","settings.Default","modified","showExtension","resetSettingLabel","validationError","validationError","settings.Modified","settings","copySettingIdLabel","copySettingAsJSONLabel","stopSyncingSetting","applyToAllProfiles"],"vs/workbench/contrib/preferences/browser/settingsLayout":["commonlyUsed","textEditor","cursor","find","font","formatting","diffEditor","minimap","suggestions","files","workbench","appearance","breadcrumbs","editorManagement","settings","zenMode","screencastMode","window","newWindow","features","accessibility","fileExplorer","search","debug","testing","scm","extensions","terminal","task","problems","output","comments","remote","timeline","notebook","audioCues","mergeEditor","chat","application","proxy","keyboard","update","telemetry","settingsSync","experimental","other","security","workspace"],"vs/workbench/contrib/preferences/browser/tocTree":[{"key":"settingsTOC","comment":["A label for the table of contents for the full settings list"]},"groupRowAriaLabel"],"vs/workbench/contrib/preferences/browser/settingsSearchMenu":["modifiedSettingsSearch","modifiedSettingsSearchTooltip","extSettingsSearch","extSettingsSearchTooltip","featureSettingsSearch","featureSettingsSearchTooltip","tagSettingsSearch","tagSettingsSearchTooltip","langSettingsSearch","langSettingsSearchTooltip","onlineSettingsSearch","onlineSettingsSearchTooltip","policySettingsSearch","policySettingsSearchTooltip"],"vs/workbench/contrib/chat/browser/actions/chatAccessibilityHelp":["chat.overview","chat.requestHistory","chat.inspectResponse","chat.inspectResponseNoKb","chat.announcement","workbench.action.chat.focus","workbench.action.chat.focusNoKb","workbench.action.chat.focusInput","workbench.action.interactiveSession.focusInputNoKb","workbench.action.chat.nextCodeBlock","workbench.action.chat.nextCodeBlockNoKb","workbench.action.chat.nextFileTree","workbench.action.chat.nextFileTreeNoKb","workbench.action.chat.clear","workbench.action.chat.clearNoKb","inlineChat.overview","inlineChat.access","inlineChat.requestHistory","inlineChat.inspectResponse","inlineChat.inspectResponseNoKb","inlineChat.contextActions","inlineChat.fix","inlineChat.diff","inlineChat.diffNoKb","inlineChat.toolbar","chat.audioCues"],"vs/workbench/contrib/notebook/browser/controller/cellOperations":["notebookActions.joinSelectedCells","notebookActions.joinSelectedCells.label"],"vs/workbench/contrib/chat/browser/chatInputPart":["actions.chat.accessibiltyHelp","chatInput.accessibilityHelpNoKb","chatInput"],"vs/workbench/contrib/chat/browser/chatListRenderer":["usedAgent","usingAgent","thinking","usedReferencesPlural","usedReferencesSingular","usedReferencesExpanded","usedReferencesCollapsed","chat","commandFollowUpInfo","commandFollowUpInfoMany","singleFileTreeHint","multiFileTreeHint","noCodeBlocksHint","noCodeBlocks","singleCodeBlockHint","singleCodeBlock","multiCodeBlockHint","multiCodeBlock","treeAriaLabel"],"vs/platform/actions/browser/toolbar":["hide","resetThisMenu"],"vs/editor/contrib/inlineCompletions/browser/inlineCompletionContextKeys":["inlineSuggestionVisible","inlineSuggestionHasIndentation","inlineSuggestionHasIndentationLessThanTabSize","suppressSuggestions"],"vs/workbench/contrib/notebook/browser/viewParts/notebookKernelView":["notebookActions.selectKernel","notebookActions.selectKernel.args"],"vs/workbench/contrib/notebook/browser/notebookExtensionPoint":["contributes.notebook.provider","contributes.notebook.provider.viewType","contributes.notebook.provider.displayName","contributes.notebook.provider.selector","contributes.notebook.provider.selector.filenamePattern","contributes.notebook.selector.provider.excludeFileNamePattern","contributes.priority","contributes.priority.default","contributes.priority.option","contributes.notebook.renderer","contributes.notebook.renderer.viewType","contributes.notebook.renderer.displayName","contributes.notebook.renderer.hardDependencies","contributes.notebook.renderer.optionalDependencies","contributes.notebook.renderer.requiresMessaging.always","contributes.notebook.renderer.requiresMessaging.optional","contributes.notebook.renderer.requiresMessaging.never","contributes.notebook.renderer.requiresMessaging","contributes.notebook.selector","contributes.notebook.renderer.entrypoint","contributes.notebook.renderer.entrypoint","contributes.notebook.renderer.entrypoint.extends","contributes.notebook.renderer.entrypoint","contributes.preload.provider","contributes.preload.provider.viewType","contributes.preload.entrypoint","contributes.preload.localResourceRoots"],"vs/workbench/contrib/notebook/browser/notebookEditorWidget":["notebookTreeAriaLabelHelp","notebookTreeAriaLabelHelpNoKb","notebookTreeAriaLabel","notebook.cellBorderColor","notebook.focusedEditorBorder","notebookStatusSuccessIcon.foreground","notebookEditorOverviewRuler.runningCellForeground","notebookStatusErrorIcon.foreground","notebookStatusRunningIcon.foreground","notebook.outputContainerBorderColor","notebook.outputContainerBackgroundColor","notebook.cellToolbarSeparator","focusedCellBackground","selectedCellBackground","notebook.cellHoverBackground","notebook.selectedCellBorder","notebook.inactiveSelectedCellBorder","notebook.focusedCellBorder","notebook.inactiveFocusedCellBorder","notebook.cellStatusBarItemHoverBackground","notebook.cellInsertionIndicator","notebookScrollbarSliderBackground","notebookScrollbarSliderHoverBackground","notebookScrollbarSliderActiveBackground","notebook.symbolHighlightBackground","notebook.cellEditorBackground","notebook.editorBackground"],"vs/workbench/contrib/notebook/browser/view/renderers/backLayerWebView":["notebook.emptyMarkdownPlaceholder",{"key":"notebook.error.rendererNotFound","comment":["$0 is a placeholder for the mime type"]},{"key":"notebook.error.rendererFallbacksExhausted","comment":["$0 is a placeholder for the mime type"]},"webview title"],"vs/workbench/services/workingCopy/common/fileWorkingCopyManager":["fileWorkingCopyCreate.source","fileWorkingCopyReplace.source","fileWorkingCopyDecorations","readonlyAndDeleted","readonly","deleted","confirmOverwrite","overwriteIrreversible",{"key":"replaceButtonLabel","comment":["&& denotes a mnemonic"]},"confirmMakeWriteable","confirmMakeWriteableDetail",{"key":"makeWriteableButtonLabel","comment":["&& denotes a mnemonic"]}],"vs/workbench/contrib/notebook/browser/viewParts/notebookKernelQuickPickStrategy":["current1","current2","prompt.placeholder.change","prompt.placeholder.select","installSuggestedKernel","searchForKernels","selectAnotherKernel.more","select","selectAnotherKernel","selectKernel.placeholder","learnMoreTooltip","selectKernelFromExtension","kernels.selectedKernelAndKernelDetectionRunning","kernels.detecting","kernels.detecting","select"],"vs/workbench/contrib/notebook/browser/contrib/find/notebookFindWidget":["ariaSearchNoResultEmpty","ariaSearchNoResult","ariaSearchNoResultWithLineNumNoCurrentMatch"],"vs/editor/contrib/codeAction/browser/codeAction":["applyCodeActionFailed"],"vs/workbench/contrib/inlineChat/browser/inlineChatStrategies":["lines.0","lines.1","lines.N"],"vs/workbench/contrib/inlineChat/browser/inlineChatWidget":["aria-label","original","modified","inlineChat.accessibilityHelp","inlineChat.accessibilityHelpNoKb","slashCommandUsed","inlineChatClosed"],"vs/workbench/contrib/terminal/browser/xterm/xtermTerminal":["terminal.integrated.copySelection.noSelection","yes","no","dontShowAgain","terminal.slowRendering"],"vs/workbench/contrib/testing/browser/theme":["testing.iconFailed","testing.iconErrored","testing.iconPassed","testing.runAction","testing.iconQueued","testing.iconUnset","testing.iconSkipped","testing.peekBorder","testing.peekBorder","testing.message.error.decorationForeground","testing.message.error.marginBackground","testing.message.info.decorationForeground","testing.message.info.marginBackground"],"vs/workbench/contrib/terminal/common/terminalColorRegistry":["terminal.background","terminal.foreground","terminalCursor.foreground","terminalCursor.background","terminal.selectionBackground","terminal.inactiveSelectionBackground","terminal.selectionForeground","terminalCommandDecoration.defaultBackground","terminalCommandDecoration.successBackground","terminalCommandDecoration.errorBackground","terminalOverviewRuler.cursorForeground","terminal.border","terminal.findMatchBackground","terminal.findMatchHighlightBorder","terminal.findMatchBorder","terminal.findMatchHighlightBackground","terminal.findMatchHighlightBorder","terminalOverviewRuler.findMatchHighlightForeground","terminal.dragAndDropBackground","terminal.tab.activeBorder","terminal.ansiColor"],"vs/workbench/contrib/testing/common/constants":["testState.errored","testState.failed","testState.passed","testState.queued","testState.running","testState.skipped","testState.unset",{"key":"testing.treeElementLabel","comment":["label then the unit tests state, for example \\"Addition Tests (Running)\\""]},"testGroup.debug","testGroup.run","testGroup.coverage"],"vs/workbench/contrib/testing/browser/testingExplorerFilter":["testing.filters.showOnlyFailed","testing.filters.showOnlyExecuted","testing.filters.currentFile","testing.filters.showExcludedTests","testing.filters.menu","testExplorerFilterLabel","testExplorerFilter","testing.filters.fuzzyMatch","testing.filters.showExcludedTests","testing.filters.removeTestExclusions"],"vs/platform/quickinput/browser/commandsQuickAccess":["recentlyUsed","suggested","commonlyUsed","morecCommands","suggested","commandPickAriaLabelWithKeybinding","canNotRun"],"vs/workbench/contrib/files/browser/fileImportExport":["uploadingFiles","overwrite","overwriting","uploadProgressSmallMany","uploadProgressLarge","copyingFiles","copyFolders","copyFolder","addFolders","addFolder","dropFolders","dropFolder","copyfolders","copyfolder","filesInaccessible","fileInaccessible",{"comment":["substitution will be the name of the file that was imported"],"key":"importFile"},{"comment":["substitution will be the number of files that were imported"],"key":"importnFile"},{"comment":["substitution will be the name of the file that was copied"],"key":"copyingFile"},{"comment":["substitution will be the number of files that were copied"],"key":"copyingnFile"},"downloadingFiles","downloadProgressSmallMany","downloadProgressLarge","downloadButton","chooseWhereToDownload","downloadBulkEdit","downloadingBulkEdit","confirmOverwrite","irreversible",{"key":"replaceButtonLabel","comment":["&& denotes a mnemonic"]},"confirmManyOverwrites","irreversible",{"key":"replaceButtonLabel","comment":["&& denotes a mnemonic"]}],"vs/workbench/contrib/files/browser/views/explorerDecorationsProvider":["canNotResolve","symbolicLlink","unknown","label"],"vs/workbench/contrib/files/browser/views/explorerViewer":["treeAriaLabel","fileInputAriaLabel","confirmRootsMove","confirmMultiMove","confirmRootMove","confirmMove","doNotAskAgain",{"key":"moveButtonLabel","comment":["&& denotes a mnemonic"]},"copy","copying","move","moving","numberOfFolders","numberOfFiles"],"vs/workbench/contrib/bulkEdit/browser/preview/bulkEditTree":["bulkEdit","aria.renameAndEdit","aria.createAndEdit","aria.deleteAndEdit","aria.editOnly","aria.rename","aria.create","aria.delete","aria.replace","aria.del","aria.insert","rename.label","detail.rename","detail.create","detail.del","title"],"vs/editor/contrib/quickAccess/browser/gotoSymbolQuickAccess":["cannotRunGotoSymbolWithoutEditor","cannotRunGotoSymbolWithoutSymbolProvider","noMatchingSymbolResults","noSymbolResults","openToSide","openToBottom","symbols","property","method","function","_constructor","variable","class","struct","event","operator","interface","namespace","package","typeParameter","modules","property","enum","enumMember","string","file","array","number","boolean","object","key","field","constant"],"vs/workbench/contrib/search/browser/replaceService":["searchReplace.source","fileReplaceChanges"],"vs/workbench/contrib/search/browser/searchFindInput":["searchFindInputNotebookFilter.label"],"vs/workbench/contrib/searchEditor/browser/searchEditorSerialization":["invalidQueryStringError","numFiles","oneFile","numResults","oneResult","noResults","searchMaxResultsWarning"],"vs/workbench/contrib/scm/browser/dirtyDiffSwitcher":["remotes","quickDiff.base.switch"],"vs/workbench/contrib/scm/browser/menus":["miShare"],"vs/workbench/contrib/debug/browser/baseDebugView":["debug.lazyButton.tooltip"],"vs/workbench/contrib/debug/common/debugSource":["unknownSource"],"vs/workbench/contrib/debug/browser/debugSessionPicker":["moveFocusedView.selectView","workbench.action.debug.startDebug","workbench.action.debug.spawnFrom"],"vs/workbench/contrib/debug/common/loadedScriptsPicker":["moveFocusedView.selectView"],"vs/workbench/contrib/debug/browser/debugAdapterManager":["debugNoType","debugName","debugServer","debugPrelaunchTask","debugPostDebugTask","suppressMultipleSessionWarning","CouldNotFindLanguage",{"key":"findExtension","comment":["&& denotes a mnemonic"]},"suggestedDebuggers","installLanguage","installExt","selectDebug"],"vs/workbench/contrib/debug/browser/debugConfigurationManager":["editLaunchConfig","selectConfiguration","DebugConfig.failed","workspace","user settings"],"vs/workbench/contrib/debug/browser/debugSession":["noDebugAdapter","noDebugAdapter","noDebugAdapter","noDebugAdapter","noDebugAdapter","noDebugAdapter","sessionNotReadyForBreakpoints","noDebugAdapter","noDebugAdapter","noDebugAdapter","noDebugAdapter","noDebugAdapter","noDebugAdapter","noDebugAdapter","noDebugAdapter","noDebugAdapter","noDebugAdapter","noDebugAdapter","noDebugAdapter","noDebugAdapter","noDebugAdapter","noDebugAdapter","noDebugAdapter","noDebugAdapter","noDebugAdapter","noDebugAdapter","noDebugAdapter","noDebugAdapter","noDebugAdapter","noDebugAdapter","noDebugAdapter","noDebugAdapter","noDebugAdapter","noDebugAdapter","noDebugAdapter","noDebugAdapter","noDebugAdapter","debuggingStartedNoDebug","debuggingStarted","debuggingStopped"],"vs/workbench/contrib/debug/browser/debugTaskRunner":["preLaunchTaskErrors","preLaunchTaskError","preLaunchTaskExitCode","preLaunchTaskTerminated",{"key":"debugAnyway","comment":["&& denotes a mnemonic"]},{"key":"showErrors","comment":["&& denotes a mnemonic"]},"abort","remember",{"key":"debugAnyway","comment":["&& denotes a mnemonic"]},"rememberTask","invalidTaskReference","DebugTaskNotFoundWithTaskId","DebugTaskNotFound","taskNotTrackedWithTaskId","taskNotTracked"],"vs/base/browser/ui/dropdown/dropdownActionViewItem":["moreActions"],"vs/workbench/contrib/mergeEditor/common/mergeEditor":["is","isr","editorLayout","showBase","showBaseAtTop","showNonConflictingChanges","baseUri","resultUri"],"vs/workbench/contrib/mergeEditor/browser/mergeEditorInputModel":["messageN","message1",{"key":"saveWithConflict","comment":["&& denotes a mnemonic"]},{"key":"save","comment":["&& denotes a mnemonic"]},{"key":"discard","comment":["&& denotes a mnemonic"]},"detailNConflicts","detail1Conflicts","detailN","detail1","saveTempFile.message","saveTempFile.detail",{"key":"acceptMerge","comment":["&& denotes a mnemonic"]},"merge-editor.source","workspace.messageN","workspace.message1","workspace.detailN.unhandled","workspace.detail1.unhandled","workspace.detailN.handled","workspace.detail1.handled",{"key":"workspace.saveWithConflict","comment":["&& denotes a mnemonic"]},{"key":"workspace.save","comment":["&& denotes a mnemonic"]},{"key":"workspace.doNotSave","comment":["&& denotes a mnemonic"]},"workspace.messageN.nonDirty","workspace.message1.nonDirty","workspace.detailN.unhandled.nonDirty","workspace.detail1.unhandled.nonDirty",{"key":"workspace.closeWithConflicts","comment":["&& denotes a mnemonic"]},{"key":"workspace.close","comment":["&& denotes a mnemonic"]},"noMoreWarn"],"vs/workbench/contrib/mergeEditor/browser/view/viewModel":["noConflictMessage"],"vs/workbench/contrib/mergeEditor/browser/view/editors/resultCodeEditorView":["result","mergeEditor.remainingConflicts","mergeEditor.remainingConflict","goToNextConflict","allConflictHandled"],"vs/workbench/contrib/mergeEditor/browser/view/editors/inputCodeEditorView":["input1","input2","mergeEditor.accept","mergeEditor.accept","mergeEditor.acceptBoth","mergeEditor.swap","mergeEditor.markAsHandled","accept.excluded","accept.conflicting","accept.first","accept.second"],"vs/workbench/contrib/mergeEditor/browser/view/colors":["mergeEditor.change.background","mergeEditor.change.word.background","mergeEditor.changeBase.background","mergeEditor.changeBase.word.background","mergeEditor.conflict.unhandledUnfocused.border","mergeEditor.conflict.unhandledFocused.border","mergeEditor.conflict.handledUnfocused.border","mergeEditor.conflict.handledFocused.border","mergeEditor.conflict.handled.minimapOverViewRuler","mergeEditor.conflict.unhandled.minimapOverViewRuler","mergeEditor.conflictingLines.background","mergeEditor.conflict.input1.background","mergeEditor.conflict.input2.background"],"vs/base/browser/ui/findinput/replaceInput":["defaultLabel","label.preserveCaseToggle"],"vs/workbench/contrib/markers/browser/markersTreeViewer":["problemsView","expandedIcon","collapsedIcon","single line","multi line"],"vs/workbench/contrib/markers/browser/markersTable":["codeColumnLabel","messageColumnLabel","fileColumnLabel","sourceColumnLabel"],"vs/workbench/contrib/comments/browser/commentsController":["commentRange","commentRangeStart","hasCommentRangesKb","hasCommentRangesNoKb","hasCommentRanges","pickCommentService"],"vs/workbench/contrib/mergeEditor/browser/view/editors/baseCodeEditorView":["base","compareWith","compareWithTooltip"],"vs/workbench/contrib/customEditor/common/contributedCustomEditors":["builtinProviderDisplayName"],"vs/platform/files/browser/htmlFileSystemProvider":["fileSystemRenameError","fileSystemNotAllowedError"],"vs/workbench/contrib/terminal/browser/terminalActions":["showTerminalTabs","workbench.action.terminal.newWorkspacePlaceholder","terminalLaunchHelp","workbench.action.terminal.newInActiveWorkspace","workbench.action.terminal.createTerminalEditor","workbench.action.terminal.createTerminalEditor","workbench.action.terminal.createTerminalEditorSide","workbench.action.terminal.focusPreviousPane","workbench.action.terminal.focusNextPane","workbench.action.terminal.runRecentCommand","workbench.action.terminal.copyLastCommand","workbench.action.terminal.goToRecentDirectory","workbench.action.terminal.resizePaneLeft","workbench.action.terminal.resizePaneRight","workbench.action.terminal.resizePaneUp","workbench.action.terminal.resizePaneDown","workbench.action.terminal.focus.tabsView","workbench.action.terminal.focusNext","workbench.action.terminal.focusPrevious","workbench.action.terminal.runSelectedText","workbench.action.terminal.runActiveFile","workbench.action.terminal.runActiveFile.noFile","workbench.action.terminal.scrollDown","workbench.action.terminal.scrollDownPage","workbench.action.terminal.scrollToBottom","workbench.action.terminal.scrollUp","workbench.action.terminal.scrollUpPage","workbench.action.terminal.scrollToTop","workbench.action.terminal.clearSelection","workbench.action.terminal.detachSession","workbench.action.terminal.attachToSession","noUnattachedTerminals","quickAccessTerminal","workbench.action.terminal.scrollToPreviousCommand","workbench.action.terminal.scrollToNextCommand","workbench.action.terminal.selectToPreviousCommand","workbench.action.terminal.selectToNextCommand","workbench.action.terminal.selectToPreviousLine","workbench.action.terminal.selectToNextLine","sendSequence","workbench.action.terminal.newWithCwd.cwd","workbench.action.terminal.renameWithArg.name","workbench.action.terminal.renameWithArg.noName","workbench.action.terminal.relaunch","workbench.action.terminal.joinInstance","workbench.action.terminal.join","workbench.action.terminal.join.insufficientTerminals","workbench.action.terminal.join.onlySplits","workbench.action.terminal.splitInActiveWorkspace","workbench.action.terminal.selectAll","workbench.action.terminal.new","workbench.action.terminal.kill","workbench.action.terminal.killAll","workbench.action.terminal.killEditor","workbench.action.terminal.clear","workbench.action.terminal.selectDefaultShell","workbench.action.terminal.openSettings","workbench.action.terminal.setFixedDimensions","workbench.action.terminal.sizeToContentWidth","workbench.action.terminal.clearPreviousSessionHistory","workbench.action.terminal.selectPrevSuggestion","workbench.action.terminal.selectPrevPageSuggestion","workbench.action.terminal.selectNextSuggestion","workbench.action.terminal.selectNextPageSuggestion","workbench.action.terminal.acceptSelectedSuggestion","workbench.action.terminal.hideSuggestWidget","workbench.action.terminal.copySelection","workbench.action.terminal.copyAndClearSelection","workbench.action.terminal.copySelectionAsHtml","workbench.action.terminal.paste","workbench.action.terminal.pasteSelection","workbench.action.terminal.switchTerminal","emptyTerminalNameInfo","workbench.action.terminal.newWithProfile","workbench.action.terminal.newWithProfile.profileName","workbench.action.terminal.newWorkspacePlaceholder","workbench.action.terminal.overriddenCwdDescription","workbench.action.terminal.newWorkspacePlaceholder","workbench.action.terminal.rename.prompt"],"vs/workbench/contrib/terminal/browser/terminalQuickAccess":["workbench.action.terminal.newplus","workbench.action.terminal.newWithProfilePlus","renameTerminal"],"vs/workbench/contrib/terminal/browser/terminalService":["terminalService.terminalCloseConfirmationSingular","terminalService.terminalCloseConfirmationPlural",{"key":"terminate","comment":["&& denotes a mnemonic"]},"localTerminalVirtualWorkspace","localTerminalRemote"],"vs/workbench/contrib/terminal/common/terminalConfiguration":["cwd","cwdFolder","workspaceFolder","local","process","separator","sequence","task","terminalTitle","terminalDescription","terminalIntegratedConfigurationTitle","terminal.integrated.sendKeybindingsToShell","terminal.integrated.tabs.defaultColor","terminal.integrated.tabs.defaultIcon","terminal.integrated.tabs.enabled","terminal.integrated.tabs.enableAnimation","terminal.integrated.tabs.hideCondition","terminal.integrated.tabs.hideCondition.never","terminal.integrated.tabs.hideCondition.singleTerminal","terminal.integrated.tabs.hideCondition.singleGroup","terminal.integrated.tabs.showActiveTerminal","terminal.integrated.tabs.showActiveTerminal.always","terminal.integrated.tabs.showActiveTerminal.singleTerminal","terminal.integrated.tabs.showActiveTerminal.singleTerminalOrNarrow","terminal.integrated.tabs.showActiveTerminal.never","terminal.integrated.tabs.showActions","terminal.integrated.tabs.showActions.always","terminal.integrated.tabs.showActions.singleTerminal","terminal.integrated.tabs.showActions.singleTerminalOrNarrow","terminal.integrated.tabs.showActions.never","terminal.integrated.tabs.location.left","terminal.integrated.tabs.location.right","terminal.integrated.tabs.location","terminal.integrated.defaultLocation.editor","terminal.integrated.defaultLocation.view","terminal.integrated.defaultLocation","terminal.integrated.tabs.focusMode.singleClick","terminal.integrated.tabs.focusMode.doubleClick","terminal.integrated.tabs.focusMode","terminal.integrated.macOptionIsMeta","terminal.integrated.macOptionClickForcesSelection","terminal.integrated.altClickMovesCursor","terminal.integrated.copyOnSelection","terminal.integrated.enableMultiLinePasteWarning","terminal.integrated.drawBoldTextInBrightColors","terminal.integrated.fontFamily","terminal.integrated.fontSize","terminal.integrated.letterSpacing","terminal.integrated.lineHeight","terminal.integrated.minimumContrastRatio","terminal.integrated.tabStopWidth","terminal.integrated.fastScrollSensitivity","terminal.integrated.mouseWheelScrollSensitivity","terminal.integrated.bellDuration","terminal.integrated.fontWeightError","terminal.integrated.fontWeight","terminal.integrated.fontWeightError","terminal.integrated.fontWeightBold","terminal.integrated.cursorBlinking","terminal.integrated.cursorStyle","terminal.integrated.cursorStyleInactive","terminal.integrated.cursorWidth","terminal.integrated.scrollback","terminal.integrated.detectLocale","terminal.integrated.detectLocale.auto","terminal.integrated.detectLocale.off","terminal.integrated.detectLocale.on","terminal.integrated.gpuAcceleration.auto","terminal.integrated.gpuAcceleration.on","terminal.integrated.gpuAcceleration.off","terminal.integrated.gpuAcceleration.canvas","terminal.integrated.gpuAcceleration","terminal.integrated.tabs.separator","terminal.integrated.rightClickBehavior.default","terminal.integrated.rightClickBehavior.copyPaste","terminal.integrated.rightClickBehavior.paste","terminal.integrated.rightClickBehavior.selectWord","terminal.integrated.rightClickBehavior.nothing","terminal.integrated.rightClickBehavior","terminal.integrated.cwd","terminal.integrated.confirmOnExit","terminal.integrated.confirmOnExit.never","terminal.integrated.confirmOnExit.always","terminal.integrated.confirmOnExit.hasChildProcesses","terminal.integrated.confirmOnKill","terminal.integrated.confirmOnKill.never","terminal.integrated.confirmOnKill.editor","terminal.integrated.confirmOnKill.panel","terminal.integrated.confirmOnKill.always","terminal.integrated.enableBell","terminal.integrated.commandsToSkipShell","openDefaultSettingsJson","openDefaultSettingsJson.capitalized","terminal.integrated.allowChords","terminal.integrated.allowMnemonics","terminal.integrated.env.osx","terminal.integrated.env.linux","terminal.integrated.env.windows","terminal.integrated.environmentChangesIndicator","terminal.integrated.environmentChangesIndicator.off","terminal.integrated.environmentChangesIndicator.on","terminal.integrated.environmentChangesIndicator.warnonly","terminal.integrated.environmentChangesRelaunch","terminal.integrated.showExitAlert","terminal.integrated.splitCwd","terminal.integrated.splitCwd.workspaceRoot","terminal.integrated.splitCwd.initial","terminal.integrated.splitCwd.inherited","terminal.integrated.windowsEnableConpty","terminal.integrated.wordSeparators","terminal.integrated.enableFileLinks","enableFileLinks.off","enableFileLinks.on","enableFileLinks.notRemote","terminal.integrated.unicodeVersion.six","terminal.integrated.unicodeVersion.eleven","terminal.integrated.unicodeVersion","terminal.integrated.localEchoLatencyThreshold","terminal.integrated.localEchoEnabled","terminal.integrated.localEchoEnabled.on","terminal.integrated.localEchoEnabled.off","terminal.integrated.localEchoEnabled.auto","terminal.integrated.localEchoExcludePrograms","terminal.integrated.localEchoStyle","terminal.integrated.enablePersistentSessions","terminal.integrated.persistentSessionReviveProcess","terminal.integrated.persistentSessionReviveProcess.onExit","terminal.integrated.persistentSessionReviveProcess.onExitAndWindowClose","terminal.integrated.persistentSessionReviveProcess.never","terminal.integrated.hideOnStartup","hideOnStartup.never","hideOnStartup.whenEmpty","hideOnStartup.always","terminal.integrated.customGlyphs","terminal.integrated.autoReplies","terminal.integrated.autoReplies.reply","terminal.integrated.shellIntegration.enabled","terminal.integrated.shellIntegration.decorationsEnabled","terminal.integrated.shellIntegration.decorationsEnabled.both","terminal.integrated.shellIntegration.decorationsEnabled.gutter","terminal.integrated.shellIntegration.decorationsEnabled.overviewRuler","terminal.integrated.shellIntegration.decorationsEnabled.never","terminal.integrated.shellIntegration.history","terminal.integrated.shellIntegration.suggestEnabled","terminal.integrated.smoothScrolling","terminal.integrated.ignoreBracketedPasteMode","terminal.integrated.enableImages","terminal.integrated.focusAfterRun","terminal.integrated.focusAfterRun.terminal","terminal.integrated.focusAfterRun.accessible-buffer","terminal.integrated.focusAfterRun.none","terminal.integrated.accessibleViewPreserveCursorPosition"],"vs/workbench/contrib/terminal/browser/terminalMenus":[{"key":"miNewTerminal","comment":["&& denotes a mnemonic"]},{"key":"miSplitTerminal","comment":["&& denotes a mnemonic"]},{"key":"miRunActiveFile","comment":["&& denotes a mnemonic"]},{"key":"miRunSelectedText","comment":["&& denotes a mnemonic"]},"workbench.action.terminal.copySelection.short","workbench.action.terminal.copySelectionAsHtml","workbench.action.terminal.paste.short","workbench.action.terminal.clear","workbench.action.terminal.selectAll","workbench.action.terminal.copySelection.short","workbench.action.terminal.copySelectionAsHtml","workbench.action.terminal.paste.short","workbench.action.terminal.clear","workbench.action.terminal.selectAll","workbench.action.terminal.newWithProfile.short","workbench.action.terminal.selectDefaultProfile","workbench.action.terminal.openSettings","workbench.action.tasks.runTask","workbench.action.tasks.configureTaskRunner","workbench.action.terminal.switchTerminal","workbench.action.terminal.clearLong","workbench.action.terminal.runActiveFile","workbench.action.terminal.runSelectedText","workbench.action.terminal.renameInstance","workbench.action.terminal.changeIcon","workbench.action.terminal.changeColor","workbench.action.terminal.sizeToContentWidthInstance","workbench.action.terminal.joinInstance","defaultTerminalProfile","defaultTerminalProfile","defaultTerminalProfile","splitTerminal"],"vs/workbench/contrib/terminal/browser/terminalIcons":["terminalViewIcon","renameTerminalIcon","killTerminalIcon","newTerminalIcon","configureTerminalProfileIcon","terminalDecorationMark","terminalDecorationIncomplete","terminalDecorationError","terminalDecorationSuccess","terminalCommandHistoryRemove","terminalCommandHistoryOutput","terminalCommandHistoryFuzzySearch"],"vs/workbench/contrib/terminal/common/terminalStrings":["terminal","terminal.new","doNotShowAgain","currentSessionCategory","previousSessionCategory","task","local","terminalCategory","workbench.action.terminal.focus","workbench.action.terminal.focusAndHideAccessibleBuffer","killTerminal","killTerminal.short","moveToEditor","workbench.action.terminal.moveToTerminalPanel","workbench.action.terminal.changeIcon","workbench.action.terminal.changeColor","splitTerminal","splitTerminal.short","unsplitTerminal","workbench.action.terminal.rename","workbench.action.terminal.sizeToContentWidthInstance","workbench.action.terminal.focusHover","workbench.action.terminal.sendSequence","workbench.action.terminal.newWithCwd","workbench.action.terminal.renameWithArg"],"vs/platform/terminal/common/terminalLogService":["terminalLoggerName"],"vs/workbench/contrib/terminal/browser/terminalTabbedView":["moveTabsRight","moveTabsLeft","hideTabs"],"vs/workbench/contrib/terminal/browser/terminalTooltip":["shellIntegration.enabled","launchFailed.exitCodeOnlyShellIntegration","shellIntegration.activationFailed",{"key":"shellProcessTooltip.processId","comment":["The first arg is \\"PID\\" which shouldn\'t be translated"]},"shellProcessTooltip.commandLine"],"vs/workbench/contrib/terminalContrib/accessibility/browser/terminalAccessibilityHelp":["focusAccessibleBuffer","focusAccessibleBufferNoKb","preserveCursor","commandPromptMigration","shellIntegration","goToNextCommand","goToNextCommandNoKb","goToPreviousCommand","goToPreviousCommandNoKb","goToSymbol","goToSymbolNoKb","runRecentCommand","runRecentCommandNoKb","goToRecentDirectory","goToRecentDirectoryNoKb","goToRecentDirectoryNoShellIntegration","goToRecentDirectoryNoKbNoShellIntegration","openDetectedLink","openDetectedLinkNoKb","newWithProfile","newWithProfileNoKb","focusAfterRun"],"vs/workbench/contrib/terminalContrib/links/browser/terminalLinkManager":["terminalLinkHandler.followLinkAlt.mac","terminalLinkHandler.followLinkAlt","terminalLinkHandler.followLinkCmd","terminalLinkHandler.followLinkCtrl","followLink","followForwardedLink","followLinkUrl"],"vs/workbench/contrib/terminalContrib/links/browser/terminalLinkQuickpick":["terminal.integrated.urlLinks","terminal.integrated.localFileLinks","terminal.integrated.localFolderLinks","terminal.integrated.searchLinks","terminal.integrated.openDetectedLink","terminal.integrated.urlLinks","terminal.integrated.localFileLinks","terminal.integrated.localFolderLinks","terminal.integrated.searchLinks"],"vs/workbench/contrib/terminalContrib/quickFix/browser/quickFixAddon":["quickFix.command","quickFix.opener","codeAction.widget.id.quickfix"],"vs/workbench/contrib/terminalContrib/quickFix/browser/terminalQuickFixBuiltinActions":["terminal.freePort","terminal.createPR"],"vs/workbench/contrib/terminalContrib/quickFix/browser/terminalQuickFixService":["vscode.extension.contributes.terminalQuickFixes","vscode.extension.contributes.terminalQuickFixes.id","vscode.extension.contributes.terminalQuickFixes.commandLineMatcher","vscode.extension.contributes.terminalQuickFixes.outputMatcher","vscode.extension.contributes.terminalQuickFixes.commandExitResult","vscode.extension.contributes.terminalQuickFixes.kind"],"vs/workbench/contrib/extensions/browser/extensionsWidgets":["ratedLabel","sponsor","remote extension title","syncingore.label","activation","startup","pre-release-label","sponsor","publisher verified tooltip","updateRequired","activation","startup","uncaught error","uncaught errors","message","messages","dependencies","Show prerelease version","has prerelease","recommendationHasBeenIgnored","extensionIconStarForeground","extensionIconVerifiedForeground","extensionPreReleaseForeground","extensionIcon.sponsorForeground"],"vs/workbench/contrib/extensions/browser/extensionsViewer":["error","Unknown Extension","extensions"],"vs/workbench/contrib/extensions/browser/exeBasedRecommendations":["exeBasedRecommendation"],"vs/workbench/contrib/extensions/browser/workspaceRecommendations":["workspaceRecommendation"],"vs/workbench/contrib/extensions/browser/fileBasedRecommendations":["fileBasedRecommendation","languageName"],"vs/workbench/contrib/extensions/browser/configBasedRecommendations":["exeBasedRecommendation"],"vs/workbench/contrib/extensions/browser/webRecommendations":["reason"],"vs/workbench/contrib/tasks/common/jsonSchemaCommon":["JsonSchema.options","JsonSchema.options.cwd","JsonSchema.options.env","JsonSchema.tasks.matcherError","JsonSchema.tasks.matcherError","JsonSchema.shellConfiguration","JsonSchema.shell.executable","JsonSchema.shell.args","JsonSchema.command","JsonSchema.tasks.args","JsonSchema.tasks.taskName","JsonSchema.command","JsonSchema.tasks.args","JsonSchema.tasks.windows","JsonSchema.tasks.matchers","JsonSchema.tasks.mac","JsonSchema.tasks.matchers","JsonSchema.tasks.linux","JsonSchema.tasks.matchers","JsonSchema.tasks.suppressTaskName","JsonSchema.tasks.showOutput","JsonSchema.echoCommand","JsonSchema.tasks.watching.deprecation","JsonSchema.tasks.watching","JsonSchema.tasks.background","JsonSchema.tasks.promptOnClose","JsonSchema.tasks.build","JsonSchema.tasks.test","JsonSchema.tasks.matchers","JsonSchema.command","JsonSchema.args","JsonSchema.showOutput","JsonSchema.watching.deprecation","JsonSchema.watching","JsonSchema.background","JsonSchema.promptOnClose","JsonSchema.echoCommand","JsonSchema.suppressTaskName","JsonSchema.taskSelector","JsonSchema.matchers","JsonSchema.tasks"],"vs/workbench/services/configurationResolver/common/configurationResolverUtils":["deprecatedVariables"],"vs/workbench/services/configurationResolver/common/configurationResolverSchema":["JsonSchema.input.id","JsonSchema.input.type","JsonSchema.input.description","JsonSchema.input.default","JsonSchema.inputs","JsonSchema.input.type.promptString","JsonSchema.input.password","JsonSchema.input.type.pickString","JsonSchema.input.options","JsonSchema.input.pickString.optionLabel","JsonSchema.input.pickString.optionValue","JsonSchema.input.type.command","JsonSchema.input.command.command","JsonSchema.input.command.args","JsonSchema.input.command.args","JsonSchema.input.command.args"],"vs/workbench/contrib/remote/browser/explorerViewItems":["switchRemote.label"],"vs/workbench/contrib/snippets/browser/commands/abstractSnippetsActions":["snippets"],"vs/workbench/contrib/snippets/browser/snippetPicker":["sep.userSnippet","sep.workspaceSnippet","disableSnippet","isDisabled","enable.snippet","pick.placeholder","pick.noSnippetAvailable"],"vs/workbench/contrib/snippets/browser/snippetsFile":["source.workspaceSnippetGlobal","source.userSnippetGlobal","source.userSnippet"],"vs/workbench/contrib/snippets/browser/snippetCompletionProvider":["detail.snippet","snippetSuggest.longLabel","snippetSuggest.longLabel"],"vs/workbench/contrib/update/browser/releaseNotesEditor":["releaseNotesInputName","unassigned","showOnUpdate"],"vs/workbench/contrib/welcomeGettingStarted/common/gettingStartedContent":["getting-started-setup-icon","getting-started-beginner-icon","getting-started-intermediate-icon","gettingStarted.newFile.title","gettingStarted.newFile.description","gettingStarted.openMac.title","gettingStarted.openMac.description","gettingStarted.openFile.title","gettingStarted.openFile.description","gettingStarted.openFolder.title","gettingStarted.openFolder.description","gettingStarted.openFolder.title","gettingStarted.openFolder.description","gettingStarted.topLevelGitClone.title","gettingStarted.topLevelGitClone.description","gettingStarted.topLevelGitOpen.title","gettingStarted.topLevelGitOpen.description","gettingStarted.topLevelShowWalkthroughs.title","gettingStarted.topLevelShowWalkthroughs.description","gettingStarted.topLevelRemoteOpen.title","gettingStarted.topLevelRemoteOpen.description","gettingStarted.topLevelOpenTunnel.title","gettingStarted.topLevelOpenTunnel.description","gettingStarted.setup.title","gettingStarted.setup.description","gettingStarted.settingsSync.title","gettingStarted.settingsSync.description.interpolated","enableSync","gettingStarted.pickColor.title","gettingStarted.pickColor.description.interpolated","titleID","gettingStarted.commandPalette.title","gettingStarted.commandPalette.description.interpolated","commandPalette","gettingStarted.extensions.title","gettingStarted.extensionsWeb.description.interpolated","browsePopular","gettingStarted.findLanguageExts.title","gettingStarted.findLanguageExts.description.interpolated","browseLangExts","gettingStarted.setup.OpenFolder.title","gettingStarted.setup.OpenFolder.description.interpolated","pickFolder","gettingStarted.setup.OpenFolder.title","gettingStarted.setup.OpenFolder.description.interpolated","pickFolder","gettingStarted.quickOpen.title","gettingStarted.quickOpen.description.interpolated","quickOpen","gettingStarted.setupWeb.title","gettingStarted.setupWeb.description","gettingStarted.settingsSync.title","gettingStarted.settingsSync.description.interpolated","enableSync","gettingStarted.pickColor.title","gettingStarted.pickColor.description.interpolated","titleID","gettingStarted.commandPalette.title","gettingStarted.commandPalette.description.interpolated","commandPalette","gettingStarted.menuBar.title","gettingStarted.menuBar.description.interpolated","toggleMenuBar","gettingStarted.extensions.title","gettingStarted.extensionsWeb.description.interpolated","browsePopular","gettingStarted.findLanguageExts.title","gettingStarted.findLanguageExts.description.interpolated","browseLangExts","gettingStarted.setup.OpenFolder.title","gettingStarted.setup.OpenFolderWeb.description.interpolated","openFolder","openRepository","gettingStarted.quickOpen.title","gettingStarted.quickOpen.description.interpolated","quickOpen","gettingStarted.beginner.title","gettingStarted.beginner.description","gettingStarted.playground.title","gettingStarted.playground.description.interpolated","openEditorPlayground","gettingStarted.terminal.title","gettingStarted.terminal.description.interpolated","showTerminal","gettingStarted.extensions.title","gettingStarted.extensions.description.interpolated","browseRecommended","gettingStarted.settings.title","gettingStarted.settings.description.interpolated","tweakSettings","gettingStarted.profiles.title","gettingStarted.profiles.description.interpolated","tryProfiles","gettingStarted.workspaceTrust.title","gettingStarted.workspaceTrust.description.interpolated","workspaceTrust","enableTrust","gettingStarted.videoTutorial.title","gettingStarted.videoTutorial.description.interpolated","watch","gettingStarted.intermediate.title","gettingStarted.intermediate.description","gettingStarted.splitview.title","gettingStarted.splitview.description.interpolated","splitEditor","gettingStarted.debug.title","gettingStarted.debug.description.interpolated","runProject","gettingStarted.scm.title","gettingStarted.scmClone.description.interpolated","cloneRepo","gettingStarted.scm.title","gettingStarted.scmSetup.description.interpolated","initRepo","gettingStarted.scm.title","gettingStarted.scm.description.interpolated","openSCM","gettingStarted.installGit.title",{"key":"gettingStarted.installGit.description.interpolated","comment":["The placeholders are command link items should not be translated"]},"installGit","gettingStarted.tasks.title","gettingStarted.tasks.description.interpolated","runTasks","gettingStarted.shortcuts.title","gettingStarted.shortcuts.description.interpolated","keyboardShortcuts","gettingStarted.notebook.title","gettingStarted.notebookProfile.title","gettingStarted.notebookProfile.description"],"vs/workbench/contrib/welcomeGettingStarted/browser/featuredExtensionService":["gettingStarted.featuredTitle"],"vs/workbench/contrib/welcomeGettingStarted/browser/gettingStartedColors":["welcomePage.background","welcomePage.tileBackground","welcomePage.tileHoverBackground","welcomePage.tileBorder","welcomePage.progress.background","welcomePage.progress.foreground","walkthrough.stepTitle.foreground"],"vs/workbench/contrib/welcomeGettingStarted/browser/gettingStartedExtensionPoint":["title","walkthroughs","walkthroughs.id","walkthroughs.title","walkthroughs.icon","walkthroughs.description","walkthroughs.featuredFor","walkthroughs.when","walkthroughs.steps","walkthroughs.steps.id","walkthroughs.steps.title","walkthroughs.steps.description.interpolated","walkthroughs.steps.button.deprecated.interpolated","walkthroughs.steps.media","pathDeprecated","walkthroughs.steps.media.image.path.string","walkthroughs.steps.media.image.path.dark.string","walkthroughs.steps.media.image.path.light.string","walkthroughs.steps.media.image.path.hc.string","walkthroughs.steps.media.image.path.hcLight.string","walkthroughs.steps.media.altText","walkthroughs.steps.media.image.path.svg","walkthroughs.steps.media.altText","pathDeprecated","walkthroughs.steps.media.markdown.path","walkthroughs.steps.completionEvents","walkthroughs.steps.completionEvents.onCommand","walkthroughs.steps.completionEvents.onLink","walkthroughs.steps.completionEvents.onView","walkthroughs.steps.completionEvents.onSettingChanged","walkthroughs.steps.completionEvents.onContext","walkthroughs.steps.completionEvents.extensionInstalled","walkthroughs.steps.completionEvents.stepSelected","walkthroughs.steps.doneOn","walkthroughs.steps.doneOn.deprecation","walkthroughs.steps.oneOn.command","walkthroughs.steps.when"],"vs/workbench/contrib/welcomeWalkthrough/common/walkThroughUtils":["walkThrough.embeddedEditorBackground"],"vs/workbench/contrib/callHierarchy/browser/callHierarchyTree":["tree.aria","from","to"],"vs/workbench/contrib/typeHierarchy/browser/typeHierarchyTree":["tree.aria","supertypes","subtypes"],"vs/editor/contrib/symbolIcons/browser/symbolIcons":["symbolIcon.arrayForeground","symbolIcon.booleanForeground","symbolIcon.classForeground","symbolIcon.colorForeground","symbolIcon.constantForeground","symbolIcon.constructorForeground","symbolIcon.enumeratorForeground","symbolIcon.enumeratorMemberForeground","symbolIcon.eventForeground","symbolIcon.fieldForeground","symbolIcon.fileForeground","symbolIcon.folderForeground","symbolIcon.functionForeground","symbolIcon.interfaceForeground","symbolIcon.keyForeground","symbolIcon.keywordForeground","symbolIcon.methodForeground","symbolIcon.moduleForeground","symbolIcon.namespaceForeground","symbolIcon.nullForeground","symbolIcon.numberForeground","symbolIcon.objectForeground","symbolIcon.operatorForeground","symbolIcon.packageForeground","symbolIcon.propertyForeground","symbolIcon.referenceForeground","symbolIcon.snippetForeground","symbolIcon.stringForeground","symbolIcon.structForeground","symbolIcon.textForeground","symbolIcon.typeParameterForeground","symbolIcon.unitForeground","symbolIcon.variableForeground"],"vs/workbench/contrib/userDataSync/browser/userDataSyncViews":["workbench.actions.sync.editMachineName","workbench.actions.sync.turnOffSyncOnMachine","workbench.actions.sync.loadActivity","select sync activity file","workbench.actions.sync.resolveResourceRef","workbench.actions.sync.compareWithLocal","remoteToLocalDiff",{"key":"leftResourceName","comment":["remote as in file in cloud"]},{"key":"rightResourceName","comment":["local as in file in disk"]},"workbench.actions.sync.replaceCurrent",{"key":"confirm replace","comment":["A confirmation message to replace current user data (settings, extensions, keybindings, snippets) with selected version"]},"reset","sideBySideLabels",{"key":"current","comment":["Represents current machine"]},{"key":"current","comment":["Represents current machine"]},"no machines",{"key":"current","comment":["Current machine"]},"not found","turn off sync on multiple machines","turn off sync on machine",{"key":"turn off","comment":["&& denotes a mnemonic"]},"placeholder","not found","valid message","sync logs","last sync states",{"key":"current","comment":["Represents current log file"]},"conflicts","synced machines","remote sync activity title","local sync activity title","downloaded sync activity title","troubleshoot"],"vs/workbench/browser/parts/notifications/notificationsList":["notificationAccessibleViewHint","notificationAccessibleViewHintNoKb","notificationAriaLabelHint","notificationAriaLabel","notificationWithSourceAriaLabelHint","notificationWithSourceAriaLabel","notificationsList"],"vs/workbench/browser/parts/notifications/notificationsActions":["clearIcon","clearAllIcon","hideIcon","expandIcon","collapseIcon","configureIcon","doNotDisturbIcon","clearNotification","clearNotifications","toggleDoNotDisturbMode","hideNotificationsCenter","expandNotification","collapseNotification","configureNotification","copyNotification"],"vs/workbench/services/textfile/common/textFileSaveParticipant":["saveParticipants"],"vs/workbench/browser/parts/titlebar/menubarControl":[{"key":"mFile","comment":["&& denotes a mnemonic"]},{"key":"mEdit","comment":["&& denotes a mnemonic"]},{"key":"mSelection","comment":["&& denotes a mnemonic"]},{"key":"mView","comment":["&& denotes a mnemonic"]},{"key":"mGoto","comment":["&& denotes a mnemonic"]},{"key":"mTerminal","comment":["&& denotes a mnemonic"]},{"key":"mHelp","comment":["&& denotes a mnemonic"]},{"key":"mPreferences","comment":["&& denotes a mnemonic"]},"menubar.customTitlebarAccessibilityNotification","goToSetting","focusMenu",{"key":"checkForUpdates","comment":["&& denotes a mnemonic"]},"checkingForUpdates",{"key":"download now","comment":["&& denotes a mnemonic"]},"DownloadingUpdate",{"key":"installUpdate...","comment":["&& denotes a mnemonic"]},"installingUpdate",{"key":"restartToUpdate","comment":["&& denotes a mnemonic"]}],"vs/workbench/browser/parts/titlebar/commandCenterControl":["label.dfl","label1","label2","title","title2","title3"],"vs/workbench/browser/parts/globalCompositeBar":["accountsViewBarIcon","hideAccounts","manage","accounts","accounts","loading","authProviderUnavailable","manageTrustedExtensions","signOut","noAccounts","manage","manage profile"],"vs/workbench/services/workingCopy/common/storedFileWorkingCopy":["staleSaveError","overwrite","discard","overwriteElevated","overwriteElevatedSudo","saveElevated","saveElevatedSudo","overwrite","retry","saveAs","discard","readonlySaveErrorAdmin","readonlySaveErrorSudo","readonlySaveError","permissionDeniedSaveError","permissionDeniedSaveErrorSudo",{"key":"genericSaveError","comment":["{0} is the resource that failed to save and {1} the error message"]}],"vs/platform/terminal/common/terminalProfiles":["terminalAutomaticProfile"],"vs/workbench/contrib/webview/browser/webviewElement":["fatalErrorMessage"],"vs/platform/quickinput/browser/quickPickPin":["terminal.commands.pinned","pinCommand","pinnedCommand"],"vs/workbench/api/common/extHostDiagnostics":[{"key":"limitHit","comment":["amount of errors/warning skipped due to limits"]}],"vs/workbench/api/common/extHostLanguageFeatures":["defaultPasteLabel","defaultDropLabel"],"vs/workbench/api/common/extHostProgress":["extensionSource"],"vs/workbench/api/common/extHostStatusBar":["extensionLabel","status.extensionMessage"],"vs/workbench/api/common/extHostTreeViews":["treeView.duplicateElement"],"vs/workbench/api/common/extHostNotebook":["err.readonly","fileModifiedError"],"vs/workbench/api/common/extHostChat":["emptyResponse","errorResponse"],"vs/workbench/api/common/extHostChatAgents2":["errorResponse"],"vs/base/browser/ui/findinput/findInputToggles":["caseDescription","wordsDescription","regexDescription"],"vs/editor/browser/widget/diffEditor/accessibleDiffViewer":["accessibleDiffViewerInsertIcon","accessibleDiffViewerRemoveIcon","accessibleDiffViewerCloseIcon","label.close","ariaLabel","no_lines_changed","one_line_changed","more_lines_changed",{"key":"header","comment":["This is the ARIA label for a git diff header.","A git diff header looks like this: @@ -154,12 +159,39 @@.","That encodes that at original line 154 (which is now line 159), 12 lines were removed/changed with 39 lines.","Variables 0 and 1 refer to the diff index out of total number of diffs.","Variables 2 and 4 will be numbers (a line number).","Variables 3 and 5 will be \\"no lines changed\\", \\"1 line changed\\" or \\"X lines changed\\", localized separately."]},"blankLine",{"key":"unchangedLine","comment":["The placeholders are contents of the line and should not be translated."]},"equalLine","insertLine","deleteLine"],"vs/editor/browser/widget/diffEditor/hideUnchangedRegionsFeature":["foldUnchanged","diff.hiddenLines.top","showAll","diff.bottom","hiddenLines","diff.hiddenLines.expandAll"],"vs/editor/browser/widget/diffEditor/movedBlocksLines":["codeMovedToWithChanges","codeMovedFromWithChanges","codeMovedTo","codeMovedFrom"],"vs/editor/browser/widget/diffEditor/diffEditorEditors":["diff-aria-navigation-tip"],"vs/editor/browser/widget/diffEditor/colors":["diffEditor.move.border","diffEditor.moveActive.border"],"vs/editor/browser/controller/textAreaHandler":["editor","accessibilityModeOff","accessibilityOffAriaLabel","accessibilityOffAriaLabelNoKb","accessibilityOffAriaLabelNoKbs"],"vs/editor/contrib/codeAction/browser/codeActionMenu":["codeAction.widget.id.more","codeAction.widget.id.quickfix","codeAction.widget.id.extract","codeAction.widget.id.inline","codeAction.widget.id.convert","codeAction.widget.id.move","codeAction.widget.id.surround","codeAction.widget.id.source"],"vs/platform/actionWidget/browser/actionWidget":["actionBar.toggledBackground","codeActionMenuVisible","hideCodeActionWidget.title","selectPrevCodeAction.title","selectNextCodeAction.title","acceptSelected.title","previewSelected.title"],"vs/editor/contrib/colorPicker/browser/colorPickerWidget":["clickToToggleColorOptions","closeIcon"],"vs/editor/contrib/editorState/browser/keybindingCancellation":["cancellableOperation"],"vs/editor/contrib/gotoSymbol/browser/peek/referencesWidget":["missingPreviewMessage","noResults","peekView.alternateTitle"],"vs/editor/contrib/snippet/browser/snippetVariables":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","SundayShort","MondayShort","TuesdayShort","WednesdayShort","ThursdayShort","FridayShort","SaturdayShort","January","February","March","April","May","June","July","August","September","October","November","December","JanuaryShort","FebruaryShort","MarchShort","AprilShort","MayShort","JuneShort","JulyShort","AugustShort","SeptemberShort","OctoberShort","NovemberShort","DecemberShort"],"vs/editor/contrib/suggest/browser/suggestWidgetStatus":[{"key":"content","comment":["A label","A keybinding"]}],"vs/editor/contrib/suggest/browser/suggestWidgetDetails":["details.close","loading"],"vs/editor/contrib/suggest/browser/suggestWidgetRenderer":["suggestMoreInfoIcon","readMore"],"vs/workbench/contrib/comments/common/commentModel":["noComments"],"vs/workbench/contrib/comments/browser/commentsViewActions":["focusCommentsList","commentsClearFilterText","focusCommentsFilter","toggle unresolved","comments","unresolved","toggle resolved","comments","resolved"],"vs/workbench/contrib/comments/browser/commentColors":["resolvedCommentIcon","unresolvedCommentIcon","resolvedCommentBorder","unresolvedCommentBorder","commentThreadRangeBackground","commentThreadActiveRangeBackground"],"vs/workbench/browser/parts/editor/editorPanes":["editorUnsupportedInAuxWindow","openFolder","editorOpenErrorDialog",{"key":"ok","comment":["&& denotes a mnemonic"]}],"vs/workbench/browser/parts/editor/editorGroupWatermark":["watermark.showCommands","watermark.quickAccess","watermark.openFile","watermark.openFolder","watermark.openFileFolder","watermark.openRecent","watermark.newUntitledFile","watermark.findInFiles",{"key":"watermark.toggleTerminal","comment":["toggle is a verb here"]},"watermark.startDebugging",{"key":"watermark.toggleFullscreen","comment":["toggle is a verb here"]},"watermark.showSettings"],"vs/workbench/browser/parts/editor/editorPlaceholder":["trustRequiredEditor","requiresFolderTrustText","requiresWorkspaceTrustText","manageTrust","errorEditor","unavailableResourceErrorEditorText","unknownErrorEditorTextWithError","unknownErrorEditorTextWithoutError","retry"],"vs/workbench/browser/parts/compositePart":["ariaCompositeToolbarLabel","viewsAndMoreActions","titleTooltip"],"vs/workbench/browser/parts/paneCompositeBar":["resetLocation","resetLocation"],"vs/platform/quickinput/browser/quickInput":["quickInput.back","inputModeEntry","quickInput.steps","quickInputBox.ariaLabel","inputModeEntryDescription"],"vs/platform/quickinput/browser/quickInputList":["quickInput"],"vs/workbench/contrib/preferences/browser/settingsEditorSettingIndicators":["workspaceUntrustedLabel","trustLabel","manageWorkspaceTrust","extensionSyncIgnoredLabel","syncIgnoredTitle","defaultOverriddenLabel","user","workspace","remote","policyLabelText","policyDescription","policyFilterLink","applicationSetting","applicationSettingDescription","alsoConfiguredIn","configuredIn","alsoConfiguredElsewhere","configuredElsewhere","alsoModifiedInScopes","modifiedInScopes","hasDefaultOverridesForLanguages","defaultOverriddenDetails","user","workspace","remote","modifiedInScopeForLanguage","user","workspace","remote","modifiedInScopeForLanguageMidSentence","workspaceUntrustedAriaLabel","policyDescriptionAccessible","applicationSettingDescriptionAccessible","alsoConfiguredIn","configuredIn","syncIgnoredAriaLabel","defaultOverriddenDetailsAriaLabel","defaultOverriddenLanguagesList"],"vs/workbench/contrib/preferences/browser/settingsWidgets":["okButton","cancelButton","listValueHintLabel","listSiblingHintLabel","removeItem","editItem","addItem","itemInputPlaceholder","listSiblingInputPlaceholder","excludePatternHintLabel","excludeSiblingHintLabel","removeExcludeItem","editExcludeItem","addPattern","excludePatternInputPlaceholder","excludeSiblingInputPlaceholder","includePatternHintLabel","includeSiblingHintLabel","removeIncludeItem","editIncludeItem","addPattern","includePatternInputPlaceholder","includeSiblingInputPlaceholder","okButton","cancelButton","objectKeyInputPlaceholder","objectValueInputPlaceholder","objectPairHintLabel","removeItem","resetItem","editItem","addItem","objectKeyHeader","objectValueHeader","objectPairHintLabel","removeItem","resetItem","editItem","addItem","objectKeyHeader","objectValueHeader"],"vs/workbench/contrib/chat/browser/codeBlockPart":["chat.codeBlockHelp","chat.codeBlock.toolbarVerbose","chat.codeBlock.toolbar","chat.codeBlockLabel"],"vs/workbench/contrib/notebook/browser/view/renderers/cellRenderer":["cellExecutionOrderCountLabel"],"vs/workbench/contrib/notebook/browser/viewParts/notebookEditorStickyScroll":["toggleStickyScroll",{"key":"mitoggleStickyScroll","comment":["&& denotes a mnemonic"]},"notebookStickyScroll",{"key":"miNotebookStickyScroll","comment":["&& denotes a mnemonic"]}],"vs/workbench/services/workingCopy/common/storedFileWorkingCopyManager":["join.fileWorkingCopyManager"],"vs/workbench/contrib/notebook/browser/contrib/find/notebookFindReplaceWidget":["label.find","placeholder.find","label.previousMatchButton","label.nextMatchButton","label.closeButton","label.toggleReplaceButton","label.replace","placeholder.replace","label.replaceButton","label.replaceAllButton","findFilterIcon","notebook.find.filter.filterAction","notebook.find.filter.findInMarkupInput","notebook.find.filter.findInMarkupPreview","notebook.find.filter.findInCodeInput","notebook.find.filter.findInCodeOutput"],"vs/workbench/contrib/notebook/browser/viewModel/notebookOutlineEntryFactory":["empty"],"vs/workbench/contrib/chat/browser/chatSlashCommandContentWidget":["exited slash command mode"],"vs/platform/actions/browser/buttonbar":["labelWithKeybinding"],"vs/workbench/contrib/debug/common/debugger":["cannot.find.da","launch.config.comment1","launch.config.comment2","launch.config.comment3","debugType","debugTypeNotRecognised","node2NotSupported","debugRequest","debugWindowsConfiguration","debugOSXConfiguration","debugLinuxConfiguration"],"vs/workbench/contrib/terminal/browser/xterm/decorationAddon":["terminal.rerunCommand","rerun","yes","no","terminal.copyCommand","terminal.copyCommandAndOutput","terminal.copyOutput","terminal.copyOutputAsHtml","workbench.action.terminal.runRecentCommand","workbench.action.terminal.goToRecentDirectory","terminal.configureCommandDecorations","terminal.learnShellIntegration","toggleVisibility","toggleVisibility","gutter","overviewRuler"],"vs/workbench/contrib/debug/common/debugSchemas":["vscode.extension.contributes.debuggers","vscode.extension.contributes.debuggers.type","vscode.extension.contributes.debuggers.label","vscode.extension.contributes.debuggers.program","vscode.extension.contributes.debuggers.args","vscode.extension.contributes.debuggers.runtime","vscode.extension.contributes.debuggers.runtimeArgs","vscode.extension.contributes.debuggers.variables","vscode.extension.contributes.debuggers.initialConfigurations","vscode.extension.contributes.debuggers.languages","vscode.extension.contributes.debuggers.configurationSnippets","vscode.extension.contributes.debuggers.configurationAttributes","vscode.extension.contributes.debuggers.when","vscode.extension.contributes.debuggers.hiddenWhen","vscode.extension.contributes.debuggers.deprecated","vscode.extension.contributes.debuggers.windows","vscode.extension.contributes.debuggers.windows.runtime","vscode.extension.contributes.debuggers.osx","vscode.extension.contributes.debuggers.osx.runtime","vscode.extension.contributes.debuggers.linux","vscode.extension.contributes.debuggers.linux.runtime","vscode.extension.contributes.debuggers.strings","vscode.extension.contributes.debuggers.strings.unverifiedBreakpoints","vscode.extension.contributes.breakpoints","vscode.extension.contributes.breakpoints.language","vscode.extension.contributes.breakpoints.when","presentation","presentation.hidden","presentation.group","presentation.order","app.launch.json.title","app.launch.json.version","app.launch.json.configurations","app.launch.json.compounds","app.launch.json.compound.name","useUniqueNames","app.launch.json.compound.name","app.launch.json.compound.folder","app.launch.json.compounds.configurations","app.launch.json.compound.stopAll","compoundPrelaunchTask"],"vs/workbench/contrib/debug/browser/rawDebugSession":["noDebugAdapterStart","canNotStart",{"key":"continue","comment":["&& denotes a mnemonic"]},"noDebugAdapter","moreInfo"],"vs/workbench/contrib/mergeEditor/browser/model/mergeEditorModel":["setInputHandled","undoMarkAsHandled"],"vs/workbench/contrib/mergeEditor/browser/mergeMarkers/mergeMarkersController":["conflictingLine","conflictingLines"],"vs/workbench/contrib/mergeEditor/browser/view/conflictActions":["accept","acceptTooltip","acceptBoth0First","acceptBoth","acceptBothTooltip","append","appendTooltip","combine","acceptBothTooltip","ignore","markAsHandledTooltip","manualResolution","manualResolutionTooltip","noChangesAccepted","noChangesAcceptedTooltip","remove","removeTooltip","remove","removeTooltip","resetToBase","resetToBaseTooltip"],"vs/workbench/contrib/comments/browser/commentGlyphWidget":["editorGutterCommentRangeForeground","editorOverviewRuler.commentForeground","editorOverviewRuler.commentUnresolvedForeground","editorGutterCommentGlyphForeground","editorGutterCommentUnresolvedGlyphForeground"],"vs/workbench/contrib/customEditor/common/extensionPoint":["contributes.customEditors","contributes.viewType","contributes.displayName","contributes.selector","contributes.selector.filenamePattern","contributes.priority","contributes.priority.default","contributes.priority.option"],"vs/workbench/contrib/terminal/browser/terminalConfigHelper":["useWslExtension.title","install"],"vs/workbench/contrib/terminal/browser/terminalProfileQuickpick":["terminal.integrated.selectProfileToCreate","terminal.integrated.chooseDefaultProfile","enterTerminalProfileName","terminalProfileAlreadyExists","terminalProfiles","ICreateContributedTerminalProfileOptions","terminalProfiles.detected","unsafePathWarning","yes","cancel","createQuickLaunchProfile"],"vs/workbench/contrib/terminal/browser/terminalInstance":["terminal.integrated.a11yPromptLabel","terminal.integrated.useAccessibleBuffer","terminal.integrated.useAccessibleBufferNoKb","bellStatus","keybindingHandling","configureTerminalSettings","preview","confirmMoveTrashMessageFilesAndDirectories",{"key":"multiLinePasteButton","comment":["&& denotes a mnemonic"]},"doNotAskAgain","disconnectStatus","workspaceNotTrustedCreateTerminal","workspaceNotTrustedCreateTerminalCwd","launchFailed.exitCodeOnlyShellIntegration","shellIntegration.learnMore","shellIntegration.openSettings","terminal.requestTrust","terminalTextBoxAriaLabelNumberAndTitle","terminalTextBoxAriaLabel","terminalScreenReaderMode","terminalHelpAriaLabel","setTerminalDimensionsColumn","setTerminalDimensionsRow","terminalStaleTextBoxAriaLabel","changeIcon","changeColor","launchFailed.exitCodeAndCommandLine","launchFailed.exitCodeOnly","terminated.exitCodeAndCommandLine","terminated.exitCodeOnly","launchFailed.errorMessage"],"vs/workbench/contrib/terminal/browser/terminalTabsList":["terminalInputAriaLabel","terminal.tabs",{"key":"splitTerminalAriaLabel","comment":["The terminal\'s ID","The terminal\'s title","The terminal\'s split number","The terminal group\'s total split number"]},{"key":"terminalAriaLabel","comment":["The terminal\'s ID","The terminal\'s title"]},"label"],"vs/workbench/contrib/codeEditor/browser/find/simpleFindWidget":["label.find","placeholder.find","label.previousMatchButton","label.nextMatchButton","label.closeButton","ariaSearchNoInput","ariaSearchNoResultEmpty","ariaSearchNoResult","ariaSearchNoResultWithLineNumNoCurrentMatch","simpleFindWidget.sashBorder"],"vs/workbench/contrib/terminalContrib/links/browser/terminalLinkDetectorAdapter":["searchWorkspace","openFile","focusFolder","openFolder","followLink"],"vs/workbench/contrib/terminal/browser/xterm/decorationStyles":["terminalPromptContextMenu","terminalPromptCommandFailed","terminalPromptCommandFailedWithExitCode","terminalPromptCommandSuccess"],"vs/workbench/contrib/welcomeGettingStarted/common/media/theme_picker":["dark","light","HighContrast","HighContrastLight","seeMore"],"vs/workbench/contrib/welcomeGettingStarted/common/media/notebookProfile":["default","jupyter","colab"],"vs/workbench/contrib/userDataSync/browser/userDataSyncConflictsView":["explanation",{"key":"workbench.actions.sync.openConflicts","comment":["This is an action title to show the conflicts between local and remote version of resources"]},"workbench.actions.sync.acceptRemote","workbench.actions.sync.acceptLocal",{"key":"remoteResourceName","comment":["remote as in file in cloud"]},"localResourceName","Theirs","Yours"],"vs/workbench/browser/parts/notifications/notificationsViewer":["executeCommand","notificationActions","notificationSource"],"vs/platform/languagePacks/common/localizedStrings":["open","close","find"],"vs/base/browser/ui/menu/menubar":["mAppMenu","mMore"],"vs/workbench/browser/parts/compositeBarActions":["titleKeybinding","badgeTitle","additionalViews","numberBadge","manageExtension","hide","keep","hideBadge","showBadge","toggle","toggleBadge"],"vs/editor/browser/widget/diffEditor/decorations":["diffInsertIcon","diffRemoveIcon","revertChangeHoverMessage"],"vs/editor/common/viewLayout/viewLineRenderer":["showMore","overflow.chars"],"vs/editor/browser/widget/diffEditor/inlineDiffDeletedCodeMargin":["diff.clipboard.copyDeletedLinesContent.label","diff.clipboard.copyDeletedLinesContent.single.label","diff.clipboard.copyChangedLinesContent.label","diff.clipboard.copyChangedLinesContent.single.label","diff.clipboard.copyDeletedLineContent.label","diff.clipboard.copyChangedLineContent.label","diff.inline.revertChange.label"],"vs/platform/actionWidget/browser/actionList":[{"key":"label-preview","comment":["placeholders are keybindings, e.g \\"F2 to apply, Shift+F2 to preview\\""]},{"key":"label","comment":["placeholder is a keybinding, e.g \\"F2 to apply\\""]},{"key":"customQuickFixWidget.labels","comment":["Action widget labels for accessibility."]},{"key":"customQuickFixWidget","comment":["An action widget option"]}],"vs/editor/contrib/gotoSymbol/browser/peek/referencesTree":["referencesCount","referenceCount","treeAriaLabel"],"vs/workbench/browser/parts/editor/multiEditorTabsControl":["ariaLabelTabActions"],"vs/workbench/browser/parts/editor/breadcrumbsControl":["separatorIcon","breadcrumbsPossible","breadcrumbsVisible","breadcrumbsActive","empty","cmd.toggle",{"key":"miBreadcrumbs","comment":["&& denotes a mnemonic"]},"cmd.toggle2",{"key":"miBreadcrumbs2","comment":["&& denotes a mnemonic"]},"cmd.focusAndSelect","cmd.focus"],"vs/workbench/browser/parts/compositeBar":["activityBarAriaLabel"],"vs/platform/quickinput/browser/quickInputUtils":["executeCommand"],"vs/workbench/contrib/notebook/browser/diff/diffElementOutputs":["mimeTypePicker","empty","noRenderer.2","curruentActiveMimeType","promptChooseMimeTypeInSecure.placeHolder","promptChooseMimeType.placeHolder","builtinRenderInfo"],"vs/workbench/contrib/notebook/browser/view/cellParts/cellEditorOptions":["notebook.lineNumbers","notebook.toggleLineNumbers","notebook.showLineNumbers","notebook.cell.toggleLineNumbers.title"],"vs/workbench/contrib/notebook/browser/view/cellParts/codeCell":["cellExpandInputButtonLabelWithDoubleClick","cellExpandInputButtonLabel"],"vs/workbench/contrib/notebook/browser/view/cellParts/codeCellRunToolbar":["notebook.moreRunActionsLabel"],"vs/workbench/contrib/notebook/browser/view/cellParts/collapsedCellOutput":["cellOutputsCollapsedMsg","cellExpandOutputButtonLabelWithDoubleClick","cellExpandOutputButtonLabel"],"vs/workbench/contrib/notebook/browser/view/cellParts/foldedCellHint":["hiddenCellsLabel","hiddenCellsLabelPlural"],"vs/workbench/contrib/notebook/browser/view/cellParts/markupCell":["cellExpandInputButtonLabelWithDoubleClick","cellExpandInputButtonLabel"],"vs/workbench/services/suggest/browser/simpleSuggestWidget":["suggest","label.full","label.detail","label.desc","ariaCurrenttSuggestionReadDetails"],"vs/workbench/contrib/comments/browser/commentThreadWidget":["commentLabel","commentLabelWithKeybinding","commentLabelWithKeybindingNoKeybinding"],"vs/workbench/contrib/terminal/browser/terminalProcessManager":["killportfailure","ptyHostRelaunch"],"vs/workbench/contrib/terminal/browser/terminalRunRecentQuickPick":["removeCommand","viewCommandOutput","selectRecentCommandMac","selectRecentCommand","shellFileHistoryCategory","selectRecentDirectoryMac","selectRecentDirectory"],"vs/workbench/browser/parts/editor/editorTabsControl":["ariaLabelEditorActions","draggedEditorGroup"],"vs/workbench/browser/parts/editor/breadcrumbs":["title","enabled","filepath","filepath.on","filepath.off","filepath.last","symbolpath","symbolpath.on","symbolpath.off","symbolpath.last","symbolSortOrder","symbolSortOrder.position","symbolSortOrder.name","symbolSortOrder.type","icons","filteredTypes.file","filteredTypes.module","filteredTypes.namespace","filteredTypes.package","filteredTypes.class","filteredTypes.method","filteredTypes.property","filteredTypes.field","filteredTypes.constructor","filteredTypes.enum","filteredTypes.interface","filteredTypes.function","filteredTypes.variable","filteredTypes.constant","filteredTypes.string","filteredTypes.number","filteredTypes.boolean","filteredTypes.array","filteredTypes.object","filteredTypes.key","filteredTypes.null","filteredTypes.enumMember","filteredTypes.struct","filteredTypes.event","filteredTypes.operator","filteredTypes.typeParameter"],"vs/workbench/browser/parts/editor/breadcrumbsPicker":["breadcrumbs"],"vs/workbench/contrib/notebook/browser/view/cellParts/cellOutput":["empty","noRenderer.2","pickMimeType","curruentActiveMimeType","installJupyterPrompt","promptChooseMimeTypeInSecure.placeHolder","promptChooseMimeType.placeHolder","unavailableRenderInfo"],"vs/workbench/contrib/notebook/browser/view/cellParts/codeCellExecutionIcon":["notebook.cell.status.success","notebook.cell.status.failed","notebook.cell.status.pending","notebook.cell.status.executing"],"vs/workbench/contrib/comments/browser/commentThreadBody":["commentThreadAria.withRange","commentThreadAria.document","commentThreadAria"],"vs/workbench/contrib/comments/browser/commentThreadHeader":["collapseIcon","label.collapse","startThread"],"vs/workbench/contrib/terminal/browser/environmentVariableInfo":["extensionEnvironmentContributionInfoStale","relaunchTerminalLabel","extensionEnvironmentContributionInfoActive","showEnvironmentContributions","ScopedEnvironmentContributionInfo"],"vs/workbench/contrib/comments/browser/commentNode":["commentToggleReaction","commentToggleReactionError","commentToggleReactionDefaultError","commentDeleteReactionError","commentDeleteReactionDefaultError","commentAddReactionError","commentAddReactionDefaultError"],"vs/workbench/contrib/comments/browser/reactionsAction":["pickReactions","comment.toggleableReaction",{"key":"comment.reactionLabelNone","comment":["This is a tooltip for an emoji button so that the current user can toggle their reaction to a comment.","The first arg is localized message \\"Toggle reaction\\" or empty if the user doesn\'t have permission to toggle the reaction, the second is the name of the reaction."]},{"key":"comment.reactionLabelOne","comment":["This is a tooltip for an emoji that is a \\"reaction\\" to a comment where the count of the reactions is 1.","The emoji is also a button so that the current user can also toggle their own emoji reaction.","The first arg is localized message \\"Toggle reaction\\" or empty if the user doesn\'t have permission to toggle the reaction, the second is the name of the reaction."]},{"key":"comment.reactionLabelMany","comment":["This is a tooltip for an emoji that is a \\"reaction\\" to a comment where the count of the reactions is greater than 1.","The emoji is also a button so that the current user can also toggle their own emoji reaction.","The first arg is localized message \\"Toggle reaction\\" or empty if the user doesn\'t have permission to toggle the reaction, the second is number of users who have reacted with that reaction, and the third is the name of the reaction."]}]},"messages":{"vs/platform/terminal/node/ptyHostMain":["Pty Host"],"vs/code/node/cliProcessMain":["CLI"],"vs/code/electron-main/main":["Main","Another instance of {0} is already running as administrator.","Please close the other instance and try again.","Another instance of {0} is running but not responding","Please close all other instances and try again.","Warning: The --status argument can only be used if {0} is already running. Please run it again after {0} has started.","Unable to write program user data.","{0}\\n\\nPlease make sure the following directories are writeable:\\n\\n{1}","&&Close"],"vs/code/node/sharedProcess/sharedProcessMain":["Shared"],"vs/code/electron-sandbox/processExplorer/processExplorerMain":["Process Name","CPU (%)","PID","Memory (MB)","Kill Process","Force Kill Process","Copy","Copy All","Debug"],"vs/workbench/electron-sandbox/desktop.main":["Saving UI state"],"vs/workbench/electron-sandbox/desktop.contribution":["New Window Tab","Show Previous Window Tab","Show Next Window Tab","Move Window Tab to New Window","Merge All Windows","Toggle Window Tabs Bar","E&&xit","Controls the timeout in seconds before giving up resolving the shell environment when the application is not already launched from a terminal. See our [documentation](https://go.microsoft.com/fwlink/?linkid=2149667) for more information.","Window","Open a new empty window.","Focus the last active running instance.","Controls whether a new empty window should open when starting a second instance without arguments or if the last running instance should get focus.\\nNote that there can still be cases where this setting is ignored (e.g. when using the `--new-window` or `--reuse-window` command line option).","Always reopen all windows. If a folder or workspace is opened (e.g. from the command line) it opens as a new window unless it was opened before. If files are opened they will open in one of the restored windows.","Reopen all windows unless a folder, workspace or file is opened (e.g. from the command line).","Reopen all windows that had folders or workspaces opened unless a folder, workspace or file is opened (e.g. from the command line).","Reopen the last active window unless a folder, workspace or file is opened (e.g. from the command line).","Never reopen a window. Unless a folder or workspace is opened (e.g. from the command line), an empty window will appear.","Controls how windows are being reopened after starting for the first time. This setting has no effect when the application is already running.","Controls whether a window should restore to full screen mode if it was exited in full screen mode.","Adjust the zoom level of the window. The original size is 0 and each increment above (e.g. 1) or below (e.g. -1) represents zooming 20% larger or smaller. You can also enter decimals to adjust the zoom level with a finer granularity.","Open new windows in the center of the screen.","Open new windows with same dimension as last active one.","Open new windows with same dimension as last active one with an offset position.","Open new windows maximized.","Open new windows in full screen mode.","Controls the dimensions of opening a new window when at least one window is already opened. Note that this setting does not have an impact on the first window that is opened. The first window will always restore the size and location as you left it before closing.","Controls whether closing the last editor should also close the window. This setting only applies for windows that do not show folders.","If enabled, this setting will close the window when the application icon in the title bar is double-clicked. The window will not be able to be dragged by the icon. This setting is effective only if `#window.titleBarStyle#` is set to `custom`.","Adjust the appearance of the window title bar to be native by the OS or custom. On Linux and Windows, this setting also affects the application and context menu appearances. Changes require a full restart to apply.","Adjust the appearance of dialog windows.","Enables macOS Sierra window tabs. Note that changes require a full restart to apply and that native tabs will disable a custom title bar style if configured.","Controls if native full-screen should be used on macOS. Disable this option to prevent macOS from creating a new space when going full-screen.","If enabled, clicking on an inactive window will both activate the window and trigger the element under the mouse if it is clickable. If disabled, clicking anywhere on an inactive window will activate it only and a second click is required on the element.","Telemetry","Enable crash reports to be collected. This helps us improve stability. \\nThis option requires restart to take effect.","If this setting is false, no telemetry will be sent regardless of the new setting\'s value. Deprecated due to being combined into the {0} setting.","Keyboard","Enables the macOS touchbar buttons on the keyboard if available.","A set of identifiers for entries in the touchbar that should not show up (for example `workbench.action.navigateBack`).","If enabled, a dialog will ask for confirmation whenever a local file or workspace is about to open through a protocol handler.","If enabled, a dialog will ask for confirmation whenever a remote file or workspace is about to open through a protocol handler.","The display Language to use. Picking a different language requires the associated language pack to be installed.","Disables hardware acceleration. ONLY change this option if you encounter graphic issues.","Allows to override the color profile to use. If you experience colors appear badly, try to set this to `srgb` and restart.","Allows to disable crash reporting, should restart the app if the value is changed.","Unique id used for correlating crash reports sent from this app instance.","Enable proposed APIs for a list of extension ids (such as `vscode.git`). Proposed APIs are unstable and subject to breaking without warning at any time. This should only be set for extension development and testing purposes.","Log level to use. Default is \'info\'. Allowed values are \'error\', \'warn\', \'info\', \'debug\', \'trace\', \'off\'.","Disables the Chromium sandbox. This is useful when running VS Code as elevated on Linux and running under Applocker on Windows.","Ensures that an in-memory store will be used for secret storage instead of using the OS\'s credential store. This is often used when running VS Code extension tests or when you\'re experiencing difficulties with the credential store.","Forces the renderer to be accessible. ONLY change this if you are using a screen reader on Linux. On other platforms the renderer will automatically be accessible. This flag is automatically set if you have editor.accessibilitySupport: on.","Configures the backend used to store secrets on Linux. This argument is ignored on Windows & macOS."],"vs/workbench/services/textfile/electron-sandbox/nativeTextFileService":["Saving text files"],"vs/workbench/services/workspaces/electron-sandbox/workspaceEditingService":["Do you want to save your workspace configuration as a file?","Save your workspace if you plan to open it again.","&&Save","Do&&n\'t Save","Unable to save workspace \'{0}\'","The workspace is already opened in another window. Please close that window first and then try again.","Opening a multi-root workspace."],"vs/workbench/services/secrets/electron-sandbox/secretStorageService":["Open troubleshooting guide","An OS keyring couldn\'t be identified for storing the encryption related data in your current desktop environment.","Open the troubleshooting guide to address this or you can use weaker encryption that doesn\'t use the OS keyring.","Use weaker encryption","You\'re running in a GNOME environment but the OS keyring is not available for encryption. Ensure you have gnome-keyring or another libsecret compatible implementation installed and running.","You\'re running in a KDE environment but the OS keyring is not available for encryption. Ensure you have kwallet running."],"vs/workbench/services/localization/electron-sandbox/localeService":["Unable to write display language. Please open the runtime settings, correct errors/warnings in it and try again.","Open Runtime Settings","Installing {0} language support...","Restart {0} to switch to {1}?","To change the display language to {0}, {1} needs to restart.","&&Restart"],"vs/workbench/services/extensionManagement/electron-sandbox/extensionManagementServerService":["Local","Remote"],"vs/workbench/services/integrity/electron-sandbox/integrityService":["Your {0} installation appears to be corrupt. Please reinstall.","More Information","Don\'t Show Again"],"vs/workbench/services/workingCopy/electron-sandbox/workingCopyBackupService":["Backup working copies"],"vs/workbench/services/extensions/electron-sandbox/nativeExtensionService":["Extension host cannot start: version mismatch.","Relaunch VS Code","The extension host terminated unexpectedly. Restarting...","Start Extension Bisect","Open Developer Tools","Restart Extension Host","Learn More","Extension host terminated unexpectedly 3 times within the last 5 minutes.","Could not fetch remote environment","Extension \'{0}\' is required to open the remote window.\\nOK to enable?","Enable and Reload","Extension \'{0}\' is required to open the remote window.\\nDo you want to install the extension?","Install and Reload","`{0}` not found on marketplace","Restart Extension Host","Restarting extension host on explicit request."],"vs/workbench/contrib/files/electron-sandbox/fileActions.contribution":["Reveal in File Explorer","Reveal in Finder","Open Containing Folder","Share","File"],"vs/workbench/contrib/localization/electron-sandbox/localization.contribution":["Would you like to change {0}\'s display language to {1} and restart?","Change Language and Restart","Don\'t Show Again"],"vs/workbench/contrib/issue/electron-sandbox/issue.contribution":["Report Performance Issue...","Open Process Explorer","Open &&Process Explorer","Stop Tracing","Tracing requires to launch with a \'--trace\' argument","&&Relaunch and Enable Tracing","Creating trace file...","This can take up to one minute to complete."],"vs/workbench/contrib/extensions/electron-sandbox/extensions.contribution":["Running Extensions"],"vs/workbench/contrib/remote/electron-sandbox/remote.contribution":["Whether the platform has the WSL feature installed","Remote","When enabled extensions are downloaded locally and installed on remote."],"vs/workbench/contrib/userDataSync/electron-sandbox/userDataSync.contribution":["Local backups folder does not exist","Successfully downloaded Settings Sync activity.","Open Folder","Open Local Backups Folder"],"vs/workbench/contrib/performance/electron-sandbox/performance.contribution":["When enabled slow renderers are automatically profiled"],"vs/workbench/contrib/tasks/electron-sandbox/taskService":["There is a task running. Do you want to terminate it?","&&Terminate Task","The launched task doesn\'t exist anymore. If the task spawned background processes exiting VS Code might result in orphaned processes. To avoid this start the last background process with a wait flag.","&&Exit Anyways"],"vs/workbench/contrib/externalTerminal/electron-sandbox/externalTerminal.contribution":["Open New External Terminal","External Terminal","Use VS Code\'s integrated terminal.","Use the configured external terminal.","Use the other two together.","When opening a file from the Explorer in a terminal, determines what kind of terminal will be launched","Use VS Code\'s integrated terminal.","Use the configured external terminal.","Use the other two together.","When opening a repository from the Source Control Repositories view in a terminal, determines what kind of terminal will be launched","Customizes which terminal to run on Windows.","Customizes which terminal application to run on macOS.","Customizes which terminal to run on Linux."],"vs/workbench/contrib/remoteTunnel/electron-sandbox/remoteTunnel.contribution":["Remote Tunnels","Turn on Remote Tunnel Access...","Turn off Remote Tunnel Access...","Show Remote Tunnel Service Log","Configure Tunnel Name...","Copy Browser URI to Clipboard","Get Started with Tunnels","Tunnel \'{0}\' is avaiable for remote access. The {1} extension can be used to connect to it.","Show Extension","Do not show again","[Looking for remote tunnel](command:{0})","[Starting remote tunnel](command:{0})","Installation as a service failed, and we fell back to running the tunnel for this session. See the [error log](command:{0}) for details.","Sign in to an account to enable remote access","Signed In","Others","Sign in with {0}","Remote Tunnels is currently in preview. Please report any problems using the \\"Help: Report Issue\\" command.","&&Enable","Select how you want to enable access","Turn on for this session","Run whenever {0} is open","Install as a service","Run whenever you\'re logged in","You can now access this machine anywhere via the secure tunnel [{0}](command:{4}). To connect via a different machine, use the generated [{1}]({2}) link or use the [{6}]({7}) extension in the desktop or web. You can [configure](command:{3}) or [turn off](command:{5}) this access via the VS Code Accounts menu.","Copy Browser Link to Clipboard","Show Extension","Unable to turn on the remote tunnel access. Check the Remote Tunnel Service log for details.","Remote Tunnel Access is On","Remote Tunnel Access is Connecting","Do you want to turn off Remote Tunnel Access? This will also stop the service that was started externally.","Do you want to turn off Remote Tunnel Access?","Select a command to invoke","Remote Tunnel Access enabled for {0} (launched externally)","Remote Tunnel Access enabled for {0}","Remote Tunnel Access not enabled","Show Log","Change Tunnel Name","The name under which the remote tunnel access is registered. If not set, the host name is used.","The name must only consist of letters, numbers, underscore and dash. It must not start with a dash.","Prevent the computer from sleeping when remote tunnel access is turned on."],"vs/base/common/platform":["_"],"vs/platform/environment/node/argv":["Options","Extensions Management","Troubleshooting","Directory where CLI metadata should be stored.","Directory where CLI metadata should be stored.","Compare two files with each other.","Perform a three-way merge by providing paths for two modified versions of a file, the common origin of both modified versions and the output file to save merge results.","Add folder(s) to the last active window.","Open a file at the path on the specified line and character position.","Force to open a new window.","Force to open a file or folder in an already opened window.","Wait for the files to be closed before returning.","The locale to use (e.g. en-US or zh-TW).","Specifies the directory that user data is kept in. Can be used to open multiple distinct instances of Code.","Opens the provided folder or workspace with the given profile and associates the profile with the workspace. If the profile does not exist, a new empty one is created.","Print usage.","Set the root path for extensions.","List the installed extensions.","Show versions of installed extensions, when using --list-extensions.","Filters installed extensions by provided category, when using --list-extensions.","Installs or updates an extension. The argument is either an extension id or a path to a VSIX. The identifier of an extension is \'${publisher}.${name}\'. Use \'--force\' argument to update to latest version. To install a specific version provide \'@${version}\'. For example: \'vscode.csharp@1.2.3\'.","Installs the pre-release version of the extension, when using --install-extension","Uninstalls an extension.","Enables proposed API features for extensions. Can receive one or more extension IDs to enable individually.","Print version.","Print verbose output (implies --wait).","Log level to use. Default is \'info\'. Allowed values are \'critical\', \'error\', \'warn\', \'info\', \'debug\', \'trace\', \'off\'. You can also configure the log level of an extension by passing extension id and log level in the following format: \'${publisher}.${name}:${logLevel}\'. For example: \'vscode.csharp:trace\'. Can receive one or more such entries.","Print process usage and diagnostics information.","Run CPU profiler during startup.","Disable all installed extensions. This option is not persisted and is effective only when the command opens a new window.","Disable the provided extension. This option is not persisted and is effective only when the command opens a new window.","Turn sync on or off.","Allow debugging and profiling of extensions. Check the developer tools for the connection URI.","Allow debugging and profiling of extensions with the extension host being paused after start. Check the developer tools for the connection URI.","Disable GPU hardware acceleration.","Use this option only when there is requirement to launch the application as sudo user on Linux or when running as an elevated user in an applocker environment on Windows.","Shows all telemetry events which VS code collects.","Use {0} instead.","paths","Usage","options","To read output from another program, append \'-\' (e.g. \'echo Hello World | {0} -\')","To read from stdin, append \'-\' (e.g. \'ps aux | grep code | {0} -\')","Subcommands","Unknown version","Unknown commit"],"vs/platform/terminal/node/ptyService":["History restored"],"vs/editor/common/config/editorOptions":["Use platform APIs to detect when a Screen Reader is attached.","Optimize for usage with a Screen Reader.","Assume a screen reader is not attached.","Controls if the UI should run in a mode where it is optimized for screen readers.","Controls whether a space character is inserted when commenting.","Controls if empty lines should be ignored with toggle, add or remove actions for line comments.","Controls whether copying without a selection copies the current line.","Controls whether the cursor should jump to find matches while typing.","Never seed search string from the editor selection.","Always seed search string from the editor selection, including word at cursor position.","Only seed search string from the editor selection.","Controls whether the search string in the Find Widget is seeded from the editor selection.","Never turn on Find in Selection automatically (default).","Always turn on Find in Selection automatically.","Turn on Find in Selection automatically when multiple lines of content are selected.","Controls the condition for turning on Find in Selection automatically.","Controls whether the Find Widget should read or modify the shared find clipboard on macOS.","Controls whether the Find Widget should add extra lines on top of the editor. When true, you can scroll beyond the first line when the Find Widget is visible.","Controls whether the search automatically restarts from the beginning (or the end) when no further matches can be found.","Enables/Disables font ligatures (\'calt\' and \'liga\' font features). Change this to a string for fine-grained control of the \'font-feature-settings\' CSS property.","Explicit \'font-feature-settings\' CSS property. A boolean can be passed instead if one only needs to turn on/off ligatures.","Configures font ligatures or font features. Can be either a boolean to enable/disable ligatures or a string for the value of the CSS \'font-feature-settings\' property.","Enables/Disables the translation from font-weight to font-variation-settings. Change this to a string for fine-grained control of the \'font-variation-settings\' CSS property.","Explicit \'font-variation-settings\' CSS property. A boolean can be passed instead if one only needs to translate font-weight to font-variation-settings.","Configures font variations. Can be either a boolean to enable/disable the translation from font-weight to font-variation-settings or a string for the value of the CSS \'font-variation-settings\' property.","Controls the font size in pixels.","Only \\"normal\\" and \\"bold\\" keywords or numbers between 1 and 1000 are allowed.","Controls the font weight. Accepts \\"normal\\" and \\"bold\\" keywords or numbers between 1 and 1000.","Show Peek view of the results (default)","Go to the primary result and show a Peek view","Go to the primary result and enable Peek-less navigation to others","This setting is deprecated, please use separate settings like \'editor.editor.gotoLocation.multipleDefinitions\' or \'editor.editor.gotoLocation.multipleImplementations\' instead.","Controls the behavior the \'Go to Definition\'-command when multiple target locations exist.","Controls the behavior the \'Go to Type Definition\'-command when multiple target locations exist.","Controls the behavior the \'Go to Declaration\'-command when multiple target locations exist.","Controls the behavior the \'Go to Implementations\'-command when multiple target locations exist.","Controls the behavior the \'Go to References\'-command when multiple target locations exist.","Alternative command id that is being executed when the result of \'Go to Definition\' is the current location.","Alternative command id that is being executed when the result of \'Go to Type Definition\' is the current location.","Alternative command id that is being executed when the result of \'Go to Declaration\' is the current location.","Alternative command id that is being executed when the result of \'Go to Implementation\' is the current location.","Alternative command id that is being executed when the result of \'Go to Reference\' is the current location.","Controls whether the hover is shown.","Controls the delay in milliseconds after which the hover is shown.","Controls whether the hover should remain visible when mouse is moved over it.","Controls the delay in milliseconds after which the hover is hidden. Requires `editor.hover.sticky` to be enabled.","Prefer showing hovers above the line, if there\'s space.","Assumes that all characters are of the same width. This is a fast algorithm that works correctly for monospace fonts and certain scripts (like Latin characters) where glyphs are of equal width.","Delegates wrapping points computation to the browser. This is a slow algorithm, that might cause freezes for large files, but it works correctly in all cases.","Controls the algorithm that computes wrapping points. Note that when in accessibility mode, advanced will be used for the best experience.","Enables the Code Action lightbulb in the editor.","Shows the nested current scopes during the scroll at the top of the editor.","Defines the maximum number of sticky lines to show.","Defines the model to use for determining which lines to stick. If the outline model does not exist, it will fall back on the folding provider model which falls back on the indentation model. This order is respected in all three cases.","Enable scrolling of Sticky Scroll with the editor\'s horizontal scrollbar.","Enables the inlay hints in the editor.","Inlay hints are enabled","Inlay hints are showing by default and hide when holding {0}","Inlay hints are hidden by default and show when holding {0}","Inlay hints are disabled","Controls font size of inlay hints in the editor. As default the {0} is used when the configured value is less than {1} or greater than the editor font size.","Controls font family of inlay hints in the editor. When set to empty, the {0} is used.","Enables the padding around the inlay hints in the editor.","Controls the line height. \\n - Use 0 to automatically compute the line height from the font size.\\n - Values between 0 and 8 will be used as a multiplier with the font size.\\n - Values greater than or equal to 8 will be used as effective values.","Controls whether the minimap is shown.","Controls whether the minimap is hidden automatically.","The minimap has the same size as the editor contents (and might scroll).","The minimap will stretch or shrink as necessary to fill the height of the editor (no scrolling).","The minimap will shrink as necessary to never be larger than the editor (no scrolling).","Controls the size of the minimap.","Controls the side where to render the minimap.","Controls when the minimap slider is shown.","Scale of content drawn in the minimap: 1, 2 or 3.","Render the actual characters on a line as opposed to color blocks.","Limit the width of the minimap to render at most a certain number of columns.","Controls the amount of space between the top edge of the editor and the first line.","Controls the amount of space between the bottom edge of the editor and the last line.","Enables a pop-up that shows parameter documentation and type information as you type.","Controls whether the parameter hints menu cycles or closes when reaching the end of the list.","Quick suggestions show inside the suggest widget","Quick suggestions show as ghost text","Quick suggestions are disabled","Enable quick suggestions inside strings.","Enable quick suggestions inside comments.","Enable quick suggestions outside of strings and comments.","Controls whether suggestions should automatically show up while typing. This can be controlled for typing in comments, strings, and other code. Quick suggestion can be configured to show as ghost text or with the suggest widget. Also be aware of the \'{0}\'-setting which controls if suggestions are triggered by special characters.","Line numbers are not rendered.","Line numbers are rendered as absolute number.","Line numbers are rendered as distance in lines to cursor position.","Line numbers are rendered every 10 lines.","Controls the display of line numbers.","Number of monospace characters at which this editor ruler will render.","Color of this editor ruler.","Render vertical rulers after a certain number of monospace characters. Use multiple values for multiple rulers. No rulers are drawn if array is empty.","The vertical scrollbar will be visible only when necessary.","The vertical scrollbar will always be visible.","The vertical scrollbar will always be hidden.","Controls the visibility of the vertical scrollbar.","The horizontal scrollbar will be visible only when necessary.","The horizontal scrollbar will always be visible.","The horizontal scrollbar will always be hidden.","Controls the visibility of the horizontal scrollbar.","The width of the vertical scrollbar.","The height of the horizontal scrollbar.","Controls whether clicks scroll by page or jump to click position.","When set, the horizontal scrollbar will not increase the size of the editor\'s content.","Controls whether all non-basic ASCII characters are highlighted. Only characters between U+0020 and U+007E, tab, line-feed and carriage-return are considered basic ASCII.","Controls whether characters that just reserve space or have no width at all are highlighted.","Controls whether characters are highlighted that can be confused with basic ASCII characters, except those that are common in the current user locale.","Controls whether characters in comments should also be subject to Unicode highlighting.","Controls whether characters in strings should also be subject to Unicode highlighting.","Defines allowed characters that are not being highlighted.","Unicode characters that are common in allowed locales are not being highlighted.","Controls whether to automatically show inline suggestions in the editor.","Show the inline suggestion toolbar whenever an inline suggestion is shown.","Show the inline suggestion toolbar when hovering over an inline suggestion.","Controls when to show the inline suggestion toolbar.","Controls how inline suggestions interact with the suggest widget. If enabled, the suggest widget is not shown automatically when inline suggestions are available.","Controls whether bracket pair colorization is enabled or not. Use {0} to override the bracket highlight colors.","Controls whether each bracket type has its own independent color pool.","Enables bracket pair guides.","Enables bracket pair guides only for the active bracket pair.","Disables bracket pair guides.","Controls whether bracket pair guides are enabled or not.","Enables horizontal guides as addition to vertical bracket pair guides.","Enables horizontal guides only for the active bracket pair.","Disables horizontal bracket pair guides.","Controls whether horizontal bracket pair guides are enabled or not.","Controls whether the editor should highlight the active bracket pair.","Controls whether the editor should render indent guides.","Highlights the active indent guide.","Highlights the active indent guide even if bracket guides are highlighted.","Do not highlight the active indent guide.","Controls whether the editor should highlight the active indent guide.","Insert suggestion without overwriting text right of the cursor.","Insert suggestion and overwrite text right of the cursor.","Controls whether words are overwritten when accepting completions. Note that this depends on extensions opting into this feature.","Controls whether filtering and sorting suggestions accounts for small typos.","Controls whether sorting favors words that appear close to the cursor.","Controls whether remembered suggestion selections are shared between multiple workspaces and windows (needs `#editor.suggestSelection#`).","Always select a suggestion when automatically triggering IntelliSense.","Never select a suggestion when automatically triggering IntelliSense.","Select a suggestion only when triggering IntelliSense from a trigger character.","Select a suggestion only when triggering IntelliSense as you type.","Controls whether a suggestion is selected when the widget shows. Note that this only applies to automatically triggered suggestions (`#editor.quickSuggestions#` and `#editor.suggestOnTriggerCharacters#`) and that a suggestion is always selected when explicitly invoked, e.g via `Ctrl+Space`.","Controls whether an active snippet prevents quick suggestions.","Controls whether to show or hide icons in suggestions.","Controls the visibility of the status bar at the bottom of the suggest widget.","Controls whether to preview the suggestion outcome in the editor.","Controls whether suggest details show inline with the label or only in the details widget.","This setting is deprecated. The suggest widget can now be resized.","This setting is deprecated, please use separate settings like \'editor.suggest.showKeywords\' or \'editor.suggest.showSnippets\' instead.","When enabled IntelliSense shows `method`-suggestions.","When enabled IntelliSense shows `function`-suggestions.","When enabled IntelliSense shows `constructor`-suggestions.","When enabled IntelliSense shows `deprecated`-suggestions.","When enabled IntelliSense filtering requires that the first character matches on a word start. For example, `c` on `Console` or `WebContext` but _not_ on `description`. When disabled IntelliSense will show more results but still sorts them by match quality.","When enabled IntelliSense shows `field`-suggestions.","When enabled IntelliSense shows `variable`-suggestions.","When enabled IntelliSense shows `class`-suggestions.","When enabled IntelliSense shows `struct`-suggestions.","When enabled IntelliSense shows `interface`-suggestions.","When enabled IntelliSense shows `module`-suggestions.","When enabled IntelliSense shows `property`-suggestions.","When enabled IntelliSense shows `event`-suggestions.","When enabled IntelliSense shows `operator`-suggestions.","When enabled IntelliSense shows `unit`-suggestions.","When enabled IntelliSense shows `value`-suggestions.","When enabled IntelliSense shows `constant`-suggestions.","When enabled IntelliSense shows `enum`-suggestions.","When enabled IntelliSense shows `enumMember`-suggestions.","When enabled IntelliSense shows `keyword`-suggestions.","When enabled IntelliSense shows `text`-suggestions.","When enabled IntelliSense shows `color`-suggestions.","When enabled IntelliSense shows `file`-suggestions.","When enabled IntelliSense shows `reference`-suggestions.","When enabled IntelliSense shows `customcolor`-suggestions.","When enabled IntelliSense shows `folder`-suggestions.","When enabled IntelliSense shows `typeParameter`-suggestions.","When enabled IntelliSense shows `snippet`-suggestions.","When enabled IntelliSense shows `user`-suggestions.","When enabled IntelliSense shows `issues`-suggestions.","Whether leading and trailing whitespace should always be selected.","Whether subwords (like \'foo\' in \'fooBar\' or \'foo_bar\') should be selected.","No indentation. Wrapped lines begin at column 1.","Wrapped lines get the same indentation as the parent.","Wrapped lines get +1 indentation toward the parent.","Wrapped lines get +2 indentation toward the parent.","Controls the indentation of wrapped lines.","Controls whether you can drag and drop a file into a text editor by holding down `shift` (instead of opening the file in an editor).","Controls if a widget is shown when dropping files into the editor. This widget lets you control how the file is dropped.","Show the drop selector widget after a file is dropped into the editor.","Never show the drop selector widget. Instead the default drop provider is always used.","Controls whether you can paste content in different ways.","Controls if a widget is shown when pasting content in to the editor. This widget lets you control how the file is pasted.","Show the paste selector widget after content is pasted into the editor.","Never show the paste selector widget. Instead the default pasting behavior is always used.","Controls whether suggestions should be accepted on commit characters. For example, in JavaScript, the semi-colon (`;`) can be a commit character that accepts a suggestion and types that character.","Only accept a suggestion with `Enter` when it makes a textual change.","Controls whether suggestions should be accepted on `Enter`, in addition to `Tab`. Helps to avoid ambiguity between inserting new lines or accepting suggestions.","Controls the number of lines in the editor that can be read out by a screen reader at once. When we detect a screen reader we automatically set the default to be 500. Warning: this has a performance implication for numbers larger than the default.","Editor content","Control whether inline suggestions are announced by a screen reader.","Use language configurations to determine when to autoclose brackets.","Autoclose brackets only when the cursor is to the left of whitespace.","Controls whether the editor should automatically close brackets after the user adds an opening bracket.","Use language configurations to determine when to autoclose comments.","Autoclose comments only when the cursor is to the left of whitespace.","Controls whether the editor should automatically close comments after the user adds an opening comment.","Remove adjacent closing quotes or brackets only if they were automatically inserted.","Controls whether the editor should remove adjacent closing quotes or brackets when deleting.","Type over closing quotes or brackets only if they were automatically inserted.","Controls whether the editor should type over closing quotes or brackets.","Use language configurations to determine when to autoclose quotes.","Autoclose quotes only when the cursor is to the left of whitespace.","Controls whether the editor should automatically close quotes after the user adds an opening quote.","The editor will not insert indentation automatically.","The editor will keep the current line\'s indentation.","The editor will keep the current line\'s indentation and honor language defined brackets.","The editor will keep the current line\'s indentation, honor language defined brackets and invoke special onEnterRules defined by languages.","The editor will keep the current line\'s indentation, honor language defined brackets, invoke special onEnterRules defined by languages, and honor indentationRules defined by languages.","Controls whether the editor should automatically adjust the indentation when users type, paste, move or indent lines.","Use language configurations to determine when to automatically surround selections.","Surround with quotes but not brackets.","Surround with brackets but not quotes.","Controls whether the editor should automatically surround selections when typing quotes or brackets.","Emulate selection behavior of tab characters when using spaces for indentation. Selection will stick to tab stops.","Controls whether the editor shows CodeLens.","Controls the font family for CodeLens.","Controls the font size in pixels for CodeLens. When set to 0, 90% of `#editor.fontSize#` is used.","Controls whether the editor should render the inline color decorators and color picker.","Make the color picker appear both on click and hover of the color decorator","Make the color picker appear on hover of the color decorator","Make the color picker appear on click of the color decorator","Controls the condition to make a color picker appear from a color decorator","Controls the max number of color decorators that can be rendered in an editor at once.","Enable that the selection with the mouse and keys is doing column selection.","Controls whether syntax highlighting should be copied into the clipboard.","Control the cursor animation style.","Smooth caret animation is disabled.","Smooth caret animation is enabled only when the user moves the cursor with an explicit gesture.","Smooth caret animation is always enabled.","Controls whether the smooth caret animation should be enabled.","Controls the cursor style.","Controls the minimal number of visible leading lines (minimum 0) and trailing lines (minimum 1) surrounding the cursor. Known as \'scrollOff\' or \'scrollOffset\' in some other editors.","`cursorSurroundingLines` is enforced only when triggered via the keyboard or API.","`cursorSurroundingLines` is enforced always.","Controls when `#cursorSurroundingLines#` should be enforced.","Controls the width of the cursor when `#editor.cursorStyle#` is set to `line`.","Controls whether the editor should allow moving selections via drag and drop.","Use a new rendering method with svgs.","Use a new rendering method with font characters.","Use the stable rendering method.","Controls whether whitespace is rendered with a new, experimental method.","Scrolling speed multiplier when pressing `Alt`.","Controls whether the editor has code folding enabled.","Use a language-specific folding strategy if available, else the indentation-based one.","Use the indentation-based folding strategy.","Controls the strategy for computing folding ranges.","Controls whether the editor should highlight folded ranges.","Controls whether the editor automatically collapses import ranges.","The maximum number of foldable regions. Increasing this value may result in the editor becoming less responsive when the current source has a large number of foldable regions.","Controls whether clicking on the empty content after a folded line will unfold the line.","Controls the font family.","Controls whether the editor should automatically format the pasted content. A formatter must be available and the formatter should be able to format a range in a document.","Controls whether the editor should automatically format the line after typing.","Controls whether the editor should render the vertical glyph margin. Glyph margin is mostly used for debugging.","Controls whether the cursor should be hidden in the overview ruler.","Controls the letter spacing in pixels.","Controls whether the editor has linked editing enabled. Depending on the language, related symbols such as HTML tags, are updated while editing.","Controls whether the editor should detect links and make them clickable.","Highlight matching brackets.","A multiplier to be used on the `deltaX` and `deltaY` of mouse wheel scroll events.","Zoom the font of the editor when using mouse wheel and holding `Ctrl`.","Merge multiple cursors when they are overlapping.","Maps to `Control` on Windows and Linux and to `Command` on macOS.","Maps to `Alt` on Windows and Linux and to `Option` on macOS.","The modifier to be used to add multiple cursors with the mouse. The Go to Definition and Open Link mouse gestures will adapt such that they do not conflict with the [multicursor modifier](https://code.visualstudio.com/docs/editor/codebasics#_multicursor-modifier).","Each cursor pastes a single line of the text.","Each cursor pastes the full text.","Controls pasting when the line count of the pasted text matches the cursor count.","Controls the max number of cursors that can be in an active editor at once.","Controls whether the editor should highlight semantic symbol occurrences.","Experimental: Controls whether the editor should highlight word occurrences accross multiple open editors.","Controls whether a border should be drawn around the overview ruler.","Focus the tree when opening peek","Focus the editor when opening peek","Controls whether to focus the inline editor or the tree in the peek widget.","Controls whether the Go to Definition mouse gesture always opens the peek widget.","Controls the delay in milliseconds after which quick suggestions will show up.","Controls whether the editor auto renames on type.","Deprecated, use `editor.linkedEditing` instead.","Controls whether the editor should render control characters.","Render last line number when the file ends with a newline.","Highlights both the gutter and the current line.","Controls how the editor should render the current line highlight.","Controls if the editor should render the current line highlight only when the editor is focused.","Render whitespace characters except for single spaces between words.","Render whitespace characters only on selected text.","Render only trailing whitespace characters.","Controls how the editor should render whitespace characters.","Controls whether selections should have rounded corners.","Controls the number of extra characters beyond which the editor will scroll horizontally.","Controls whether the editor will scroll beyond the last line.","Scroll only along the predominant axis when scrolling both vertically and horizontally at the same time. Prevents horizontal drift when scrolling vertically on a trackpad.","Controls whether the Linux primary clipboard should be supported.","Controls whether the editor should highlight matches similar to the selection.","Always show the folding controls.","Never show the folding controls and reduce the gutter size.","Only show the folding controls when the mouse is over the gutter.","Controls when the folding controls on the gutter are shown.","Controls fading out of unused code.","Controls strikethrough deprecated variables.","Show snippet suggestions on top of other suggestions.","Show snippet suggestions below other suggestions.","Show snippets suggestions with other suggestions.","Do not show snippet suggestions.","Controls whether snippets are shown with other suggestions and how they are sorted.","Controls whether the editor will scroll using an animation.","Controls whether the accessibility hint should be provided to screen reader users when an inline completion is shown.","Font size for the suggest widget. When set to {0}, the value of {1} is used.","Line height for the suggest widget. When set to {0}, the value of {1} is used. The minimum value is 8.","Controls whether suggestions should automatically show up when typing trigger characters.","Always select the first suggestion.","Select recent suggestions unless further typing selects one, e.g. `console.| -> console.log` because `log` has been completed recently.","Select suggestions based on previous prefixes that have completed those suggestions, e.g. `co -> console` and `con -> const`.","Controls how suggestions are pre-selected when showing the suggest list.","Tab complete will insert the best matching suggestion when pressing tab.","Disable tab completions.","Tab complete snippets when their prefix match. Works best when \'quickSuggestions\' aren\'t enabled.","Enables tab completions.","Unusual line terminators are automatically removed.","Unusual line terminators are ignored.","Unusual line terminators prompt to be removed.","Remove unusual line terminators that might cause problems.","Inserting and deleting whitespace follows tab stops.","Use the default line break rule.","Word breaks should not be used for Chinese/Japanese/Korean (CJK) text. Non-CJK text behavior is the same as for normal.","Controls the word break rules used for Chinese/Japanese/Korean (CJK) text.","Characters that will be used as word separators when doing word related navigations or operations.","Lines will never wrap.","Lines will wrap at the viewport width.","Lines will wrap at `#editor.wordWrapColumn#`.","Lines will wrap at the minimum of viewport and `#editor.wordWrapColumn#`.","Controls how lines should wrap.","Controls the wrapping column of the editor when `#editor.wordWrap#` is `wordWrapColumn` or `bounded`.","Controls whether inline color decorations should be shown using the default document color provider","Controls whether the editor receives tabs or defers them to the workbench for navigation."],"vs/base/common/errorMessage":["{0}: {1}","A system error occurred ({0})","An unknown error occurred. Please consult the log for more details.","An unknown error occurred. Please consult the log for more details.","{0} ({1} errors in total)","An unknown error occurred. Please consult the log for more details."],"vs/platform/extensionManagement/common/extensionManagement":["Extensions","Preferences"],"vs/platform/extensionManagement/common/extensionManagementCLI":["Extension \'{0}\' not found.","Make sure you use the full extension ID, including the publisher, e.g.: {0}","Extensions installed on {0}:","Installing extensions on {0}...","Installing extensions...","Extension \'{0}\' v{1} is already installed. Use \'--force\' option to update to latest version or provide \'@<version>\' to install a specific version, for example: \'{2}@1.2.3\'.","Extension \'{0}\' is already installed.","Error while installing extensions: {0}","Failed Installing Extensions: {0}","Extension \'{0}\' was successfully installed.","Cancelled installing extension \'{0}\'.","Extension \'{0}\' is already installed.","Updating the extension \'{0}\' to the version {1}","Installing builtin extension \'{0}\' v{1}...","Installing builtin extension \'{0}\'...","Installing extension \'{0}\' v{1}...","Installing extension \'{0}\'...","Extension \'{0}\' v{1} was successfully installed.","Cancelled installing extension \'{0}\'.","A newer version of extension \'{0}\' v{1} is already installed. Use \'--force\' option to downgrade to older version.","Extension \'{0}\' is a Built-in extension and cannot be uninstalled","Extension \'{0}\' is marked as a Built-in extension by user. Please use \'--force\' option to uninstall it.","Uninstalling {0}...","Extension \'{0}\' was successfully uninstalled from {1}!","Extension \'{0}\' was successfully uninstalled!","Extension \'{0}\' is not installed on {1}.","Extension \'{0}\' is not installed."],"vs/platform/extensionManagement/common/extensionsScannerService":["Cannot read file {0}: {1}.","Failed to parse {0}: [{1}, {2}] {3}.","Invalid manifest file {0}: Not an JSON object.","Failed to parse {0}: {1}.","Invalid format {0}: JSON object expected.","Failed to parse {0}: {1}.","Invalid format {0}: JSON object expected."],"vs/platform/files/common/files":["Unknown Error","{0}B","{0}KB","{0}MB","{0}GB","{0}TB"],"vs/platform/extensionManagement/node/extensionManagementService":["Unable to install extension \'{0}\' as it is not compatible with VS Code \'{1}\'.","Marketplace is not enabled","Only Marketplace Extensions can be reinstalled","Error while removing the extension: {0}. Please Quit and Start VS Code before trying again.","Unable to delete the existing folder \'{0}\' while installing the extension \'{1}\'. Please delete the folder manually and try again","Unknown error while renaming {0} to {1}","Cannot read the extension from {0}","Please restart VS Code before reinstalling {0}.","Please restart VS Code before reinstalling {0}."],"vs/platform/files/common/fileService":["Unable to resolve filesystem provider with relative file path \'{0}\'","ENOPRO: No file system provider found for resource \'{0}\'","Unable to resolve nonexistent file \'{0}\'","Unable to create file \'{0}\' that already exists when overwrite flag is not set","Unable to write file \'{0}\' ({1})","Unable to unlock file \'{0}\' because provider does not support it.","Unable to atomically write file \'{0}\' because provider does not support it.","Unable to atomically write file \'{0}\' because provider does not support unbuffered writes.","Unable to unlock file \'{0}\' because atomic write is enabled.","Unable to write file \'{0}\' that is actually a directory","File Modified Since","Unable to read file \'{0}\' ({1})","Unable to read file \'{0}\' that is actually a directory","File not modified since","Unable to read file \'{0}\' that is too large to open","Unable to copy when source \'{0}\' is same as target \'{1}\' with different path case on a case insensitive file system","Unable to move/copy when source \'{0}\' is parent of target \'{1}\'.","Unable to move/copy \'{0}\' because target \'{1}\' already exists at destination.","Unable to move/copy \'{0}\' into \'{1}\' since a file would replace the folder it is contained in.","Unable to create folder \'{0}\' that already exists but is not a directory","Unable to delete file \'{0}\' via trash because provider does not support it.","Unable to delete file \'{0}\' atomically because provider does not support it.","Unable to atomically delete file \'{0}\' because using trash is enabled.","Unable to delete nonexistent file \'{0}\'","Unable to delete non-empty folder \'{0}\'.","Unable to modify read-only file \'{0}\'","Unable to modify read-only file \'{0}\'"],"vs/platform/files/node/diskFileSystemProvider":["File already exists","File does not exist","Unable to move \'{0}\' into \'{1}\' ({2}).","Unable to copy \'{0}\' into \'{1}\' ({2}).","File cannot be copied to same path with different path case","File to move/copy does not exist","File at target already exists and thus will not be moved/copied to unless overwrite is specified"],"vs/platform/languagePacks/common/languagePacks":[" (Current)"],"vs/platform/request/common/request":["Network Requests","HTTP","The proxy setting to use. If not set, will be inherited from the `http_proxy` and `https_proxy` environment variables.","Controls whether the proxy server certificate should be verified against the list of supplied CAs.","Overrides the principal service name for Kerberos authentication with the HTTP proxy. A default based on the proxy hostname is used when this is not set.","The value to send as the `Proxy-Authorization` header for every network request.","Disable proxy support for extensions.","Enable proxy support for extensions.","Enable proxy support for extensions, fall back to request options, when no proxy found.","Enable proxy support for extensions, override request options.","Use the proxy support for extensions.","Controls whether CA certificates should be loaded from the OS. (On Windows and macOS, a reload of the window is required after turning this off.)","Controls whether experimental loading of CA certificates from the OS should be enabled. This uses a more general approach than the default implemenation."],"vs/platform/telemetry/common/telemetryService":["Controls {0} telemetry, first-party extension telemetry, and participating third-party extension telemetry. Some third party extensions might not respect this setting. Consult the specific extension\'s documentation to be sure. Telemetry helps us better understand how {0} is performing, where improvements need to be made, and how features are being used.","Read more about the [data we collect]({0}).","Read more about the [data we collect]({0}) and our [privacy statement]({1}).","A full restart of the application is necessary for crash reporting changes to take effect.","Crash Reports","Error Telemetry","Usage Data","The following table outlines the data sent with each setting:","****Note:*** If this setting is \'off\', no telemetry will be sent regardless of other telemetry settings. If this setting is set to anything except \'off\' and telemetry is disabled with deprecated settings, no telemetry will be sent.*","Telemetry","Sends usage data, errors, and crash reports.","Sends general error telemetry and crash reports.","Sends OS level crash reports.","Disables all product telemetry.","Telemetry","Enable diagnostic data to be collected. This helps us to better understand how {0} is performing and where improvements need to be made.","Enable diagnostic data to be collected. This helps us to better understand how {0} is performing and where improvements need to be made. [Read more]({1}) about what we collect and our privacy statement.","If this setting is false, no telemetry will be sent regardless of the new setting\'s value. Deprecated in favor of the {0} setting."],"vs/platform/userDataProfile/common/userDataProfile":["Default"],"vs/code/electron-main/app":["&&Yes","&&No","An external application wants to open \'{0}\' in {1}. Do you want to open this file or folder?","If you did not initiate this request, it may represent an attempted attack on your system. Unless you took an explicit action to initiate this request, you should press \'No\'","Allow opening local paths without asking","Allow opening remote paths without asking"],"vs/platform/environment/node/argvHelper":["Option \'{0}\' is defined more than once. Using value \'{1}\'.","Option \'{0}\' requires a non empty value. Ignoring the option.","Option \'{0}\' is deprecated: {1}","Warning: \'{0}\' is not in the list of known options for subcommand \'{1}\'","Warning: \'{0}\' is not in the list of known options, but still passed to Electron/Chromium.","Arguments in `--goto` mode should be in the format of `FILE(:LINE(:CHARACTER))`."],"vs/platform/dialogs/common/dialogs":["&&Yes","Cancel","Cancel","Cancel","&&OK","&&OK","Cancel","...1 additional file not shown","...{0} additional files not shown"],"vs/platform/update/common/update.config.contribution":["Update","Configure whether you receive automatic updates. Requires a restart after change. The updates are fetched from a Microsoft online service.","Disable updates.","Disable automatic background update checks. Updates will be available if you manually check for updates.","Check for updates only on startup. Disable automatic background update checks.","Enable automatic update checks. Code will check for updates automatically and periodically.","Configure whether you receive automatic updates. Requires a restart after change. The updates are fetched from a Microsoft online service.","This setting is deprecated, please use \'{0}\' instead.","Enable Background Updates on Windows","Enable to download and install new VS Code versions in the background on Windows.","Show Release Notes after an update. The Release Notes are fetched from a Microsoft online service."],"vs/code/electron-sandbox/issue/issueReporterPage":["Include my system information","Include my currently running processes","Include my workspace metadata","Include my enabled extensions","Include A/B experiment info","Include additional extension info","Before you report an issue here please <a href=\\"https://github.com/microsoft/vscode/wiki/Submitting-Bugs-and-Suggestions\\" target=\\"_blank\\">review the guidance we provide</a>.","Please complete the form in English.","This is a","File on","An issue source is required.","Try to reproduce the problem after {0}. If the problem only reproduces when extensions are active, it is likely an issue with an extension.","disabling all extensions and reloading the window","Extension","The issue reporter is unable to create issues for this extension. Please visit {0} to report an issue.","The issue reporter is unable to create issues for this extension, as it does not specify a URL for reporting issues. Please check the marketplace page of this extension to see if other instructions are available.","Title","Please enter a title.","A title is required.","The title is too long.","Please enter details.","A description is required.","show","Extension does not have additional data to include.","show","show","show","show","show"],"vs/code/electron-sandbox/issue/issueReporterService":["hide","show","Create on GitHub","Preview on GitHub","Loading data...","GitHub query limit exceeded. Please wait.","Similar issues","Open","Closed","Open","Closed","No similar issues found","Bug Report","Feature Request","Performance Issue","Select source","Visual Studio Code","An extension","Extensions marketplace","Don\'t know","This extension handles issues outside of VS Code","The \'{0}\' extension prefers to use an external issue reporter. To be taken to that issue reporting experience, click the button below.","Open External Issue Reporter","Steps to Reproduce","Share the steps needed to reliably reproduce the problem. Please include actual and expected results. We support GitHub-flavored Markdown. You will be able to edit your issue and add screenshots when we preview it on GitHub.","Steps to Reproduce","When did this performance issue happen? Does it occur on startup or after a specific series of actions? We support GitHub-flavored Markdown. You will be able to edit your issue and add screenshots when we preview it on GitHub.","Description","Please describe the feature you would like to see. We support GitHub-flavored Markdown. You will be able to edit your issue and add screenshots when we preview it on GitHub.","We have written the needed data into your clipboard because it was too large to send. Please paste.","Select extension","Extensions are disabled","No current experiments."],"vs/platform/telemetry/common/telemetryLogAppender":["Telemetry{0}"],"vs/platform/userDataSync/common/userDataSync":["Settings Sync","Synchronize keybindings for each platform.","List of extensions to be ignored while synchronizing. The identifier of an extension is always `${publisher}.${name}`. For example: `vscode.csharp`.","Expected format \'${publisher}.${name}\'. Example: \'vscode.csharp\'.","Configure settings to be ignored while synchronizing."],"vs/platform/userDataSync/common/userDataSyncLog":["Settings Sync"],"vs/platform/userDataSync/common/userDataSyncMachines":["Cannot read machines data as the current version is incompatible. Please update {0} and try again."],"vs/platform/remoteTunnel/common/remoteTunnel":["Remote Tunnel Service"],"vs/platform/userDataSync/common/userDataSyncResourceProvider":["Cannot parse sync data as it is not compatible with the current version."],"vs/platform/remoteTunnel/node/remoteTunnelService":["Building CLI from sources","Connecting as {0} ({1})","Opening tunnel {0}","Opening tunnel","Failed to install tunnel as a service, starting in session..."],"vs/platform/list/browser/listService":["Workbench","Maps to `Control` on Windows and Linux and to `Command` on macOS.","Maps to `Alt` on Windows and Linux and to `Option` on macOS.","The modifier to be used to add an item in trees and lists to a multi-selection with the mouse (for example in the explorer, open editors and scm view). The \'Open to Side\' mouse gestures - if supported - will adapt such that they do not conflict with the multiselect modifier.","Controls how to open items in trees and lists using the mouse (if supported). Note that some trees and lists might choose to ignore this setting if it is not applicable.","Controls whether lists and trees support horizontal scrolling in the workbench. Warning: turning on this setting has a performance implication.","Controls whether clicks in the scrollbar scroll page by page.","Controls tree indentation in pixels.","Controls whether the tree should render indent guides.","Controls whether lists and trees have smooth scrolling.","A multiplier to be used on the `deltaX` and `deltaY` of mouse wheel scroll events.","Scrolling speed multiplier when pressing `Alt`.","Highlight elements when searching. Further up and down navigation will traverse only the highlighted elements.","Filter elements when searching.","Controls the default find mode for lists and trees in the workbench.","Simple keyboard navigation focuses elements which match the keyboard input. Matching is done only on prefixes.","Highlight keyboard navigation highlights elements which match the keyboard input. Further up and down navigation will traverse only the highlighted elements.","Filter keyboard navigation will filter out and hide all the elements which do not match the keyboard input.","Controls the keyboard navigation style for lists and trees in the workbench. Can be simple, highlight and filter.","Please use \'workbench.list.defaultFindMode\' and\\t\'workbench.list.typeNavigationMode\' instead.","Use fuzzy matching when searching.","Use contiguous matching when searching.","Controls the type of matching used when searching lists and trees in the workbench.","Controls how tree folders are expanded when clicking the folder names. Note that some trees and lists might choose to ignore this setting if it is not applicable.","Controls how type navigation works in lists and trees in the workbench. When set to `trigger`, type navigation begins once the `list.triggerTypeNavigation` command is run."],"vs/platform/contextkey/common/contextkey":["Empty context key expression","Did you forget to write an expression? You can also put \'false\' or \'true\' to always evaluate to false or true, respectively.","\'in\' after \'not\'.","closing parenthesis \')\'","Unexpected token","Did you forget to put && or || before the token?","Unexpected end of expression","Did you forget to put a context key?","Expected: {0}\\nReceived: \'{1}\'.","Unexpected token. Hint: {0}","Unexpected token."],"vs/platform/contextkey/browser/contextKeyService":["A command that returns information about context keys"],"vs/platform/markers/common/markers":["Error","Warning","Info"],"vs/workbench/browser/actions/textInputActions":["Undo","Redo","Cut","Copy","Paste","Select All"],"vs/workbench/browser/workbench.contribution":["The default size.","Increases the size, so it can be grabbed more easily with the mouse.","Controls the height of the scrollbars used for tabs and breadcrumbs in the editor title area.","Each editor is displayed as a tab in the editor title area.","The active editor is displayed as a single large tab in the editor title area.","The editor title area is not displayed.","Controls whether opened editors should show as individual tabs, one single large tab or if the title area should not be shown.","Controls whether tabs should be wrapped over multiple lines when exceeding available space or whether a scrollbar should appear instead. This value is ignored when `#workbench.editor.showTabs#` is not set to `multiple`.","Controls whether scrolling over tabs will open them or not. By default tabs will only reveal upon scrolling, but not open. You can press and hold the Shift-key while scrolling to change this behavior for that duration. This value is ignored when `#workbench.editor.showTabs#` is not set to `multiple`.","Controls whether a top border is drawn on tabs for editors that have unsaved changes. This value is ignored when `#workbench.editor.showTabs#` is not set to `multiple`.","Controls whether editor file decorations should use badges.","Controls whether editor file decorations should use colors.","Show the name of the file. When tabs are enabled and two files have the same name in one group the distinguishing sections of each file\'s path are added. When tabs are disabled, the path relative to the workspace folder is shown if the editor is active.","Show the name of the file followed by its directory name.","Show the name of the file followed by its path relative to the workspace folder.","Show the name of the file followed by its absolute path.","Controls the format of the label for an editor.","The name of the untitled file is derived from the contents of its first line unless it has an associated file path. It will fallback to the name in case the line is empty or contains no word characters.","The name of the untitled file is not derived from the contents of the file.","Controls the format of the label for an untitled editor.","Controls if the empty editor text hint should be visible in the editor.","Controls whether the language in a text editor is automatically detected unless the language has been explicitly set by the language picker. This can also be scoped by language so you can specify which languages you do not want to be switched off of. This is useful for languages like Markdown that often contain other languages that might trick language detection into thinking it\'s the embedded language and not Markdown.","Enables use of editor history in language detection. This causes automatic language detection to favor languages that have been recently opened and allows for automatic language detection to operate with smaller inputs.","When enabled, a language detection model that takes into account editor history will be given higher precedence.","When enabled, shows a Status bar Quick Fix when the editor language doesn\'t match detected content language.","Show in untitled text editors","Show in notebook editors","Controls the position of the editor\'s tabs close buttons, or disables them when set to \'off\'. This value is ignored when `#workbench.editor.showTabs#` is not set to `multiple`.","Always keep tabs large enough to show the full editor label.","Allow tabs to get smaller when the available space is not enough to show all tabs at once.","Make all tabs the same size, while allowing them to get smaller when the available space is not enough to show all tabs at once.","Controls the size of editor tabs. This value is ignored when `#workbench.editor.showTabs#` is not set to `multiple`.","Controls the minimum width of tabs when `#workbench.editor.tabSizing#` size is set to `fixed`.","Controls the maximum width of tabs when `#workbench.editor.tabSizing#` size is set to `fixed`.","Controls the height of editor tabs. Also applies to the title control bar when `#workbench.editor.showTabs#` is not set to `multiple`.","A pinned tab inherits the look of non pinned tabs.","A pinned tab will show in a compact form with only icon or first letter of the editor name.","A pinned tab shrinks to a compact fixed size showing parts of the editor name.","Controls the size of pinned editor tabs. Pinned tabs are sorted to the beginning of all opened tabs and typically do not close until unpinned. This value is ignored when `#workbench.editor.showTabs#` is not set to `multiple`.","When enabled, displays pinned tabs in a separate row above all other tabs. This value is ignored when `#workbench.editor.showTabs#` is not set to `multiple`.","Always prevent closing the pinned editor when using mouse middle click or keyboard.","Prevent closing the pinned editor when using the keyboard.","Prevent closing the pinned editor when using mouse middle click.","Never prevent closing a pinned editor.","Controls whether pinned editors should close when keyboard or middle mouse click is used for closing.","Splits the active editor group to equal parts, unless all editor groups are already in equal parts. In that case, splits all the editor groups to equal parts.","Splits all the editor groups to equal parts.","Splits the active editor group to equal parts.","Controls the size of editor groups when splitting them.","Controls if editor groups can be split from drag and drop operations by dropping an editor or file on the edges of the editor area.","Controls whether editors are closed in most recently used order or from left to right.","Controls whether opened editors should show with an icon or not. This requires a file icon theme to be enabled as well.","Controls whether opened editors show as preview editors. Preview editors do not stay open, are reused until explicitly set to be kept open (via double-click or editing), and show file names in italics.","Controls whether editors opened from Quick Open show as preview editors. Preview editors do not stay open, and are reused until explicitly set to be kept open (via double-click or editing). When enabled, hold Ctrl before selection to open an editor as a non-preview. This value is ignored when `#workbench.editor.enablePreview#` is disabled.","Controls whether editors remain in preview when a code navigation is started from them. Preview editors do not stay open, and are reused until explicitly set to be kept open (via double-click or editing). This value is ignored when `#workbench.editor.enablePreview#` is disabled.","Controls whether editors showing a file that was opened during the session should close automatically when getting deleted or renamed by some other process. Disabling this will keep the editor open  on such an event. Note that deleting from within the application will always close the editor and that editors with unsaved changes will never close to preserve your data.","Controls where editors open. Select `left` or `right` to open editors to the left or right of the currently active one. Select `first` or `last` to open editors independently from the currently active one.","Controls the default direction of editors that are opened side by side (for example, from the Explorer). By default, editors will open on the right hand side of the currently active one. If changed to `down`, the editors will open below the currently active one.","Controls the behavior of empty editor groups when the last tab in the group is closed. When enabled, empty groups will automatically close. When disabled, empty groups will remain part of the grid.","Controls whether an editor is revealed in any of the visible groups if opened. If disabled, an editor will prefer to open in the currently active editor group. If enabled, an already opened editor will be revealed instead of opened again in the currently active editor group. Note that there are some cases where this setting is ignored, such as when forcing an editor to open in a specific group or to the side of the currently active group.","Enables the use of mouse buttons four and five for commands \'Go Back\' and \'Go Forward\'.","Controls the scope of history navigation in editors for commands such as \'Go Back\' and \'Go Forward\'.","Navigate across all opened editors and editor groups.","Navigate only in editors of the active editor group.","Navigate only in the active editor.","Restores the last editor view state (such as scroll position) when re-opening editors after they have been closed. Editor view state is stored per editor group and discarded when a group closes. Use the {0} setting to use the last known view state across all editor groups in case no previous view state was found for a editor group.","Preserves the most recent editor view state (such as scroll position) across all editor groups and restores that if no specific editor view state is found for the editor group.","Controls the layout for when an editor is split in an editor group to be either vertical or horizontal.","Editors are positioned from top to bottom.","Editors are positioned from left to right.","Controls if the centered layout should automatically resize to maximum width when more than one group is open. Once only one group is open it will resize back to the original centered width.","Controls whether the centered layout tries to maintain constant width when the window is resized.","Controls how the editor group is resized when double clicking on a tab. This value is ignored when `#workbench.editor.showTabs#` is not set to `multiple`.","All other editor groups are hidden and the current editor group is maximized to take up the entire editor area.","The editor group takes as much space as possible by making all other editor groups as small as possible.","No editor group is resized when double clicking on a tab.","Controls if the number of opened editors should be limited or not. When enabled, less recently used editors will close to make space for newly opening editors.","Controls the maximum number of opened editors. Use the {0} setting to control this limit per editor group or across all groups.","Controls if the maximum number of opened editors should exclude dirty editors for counting towards the configured limit.","Controls if the limit of maximum opened editors should apply per editor group or across all editor groups.","Controls whether local file history is enabled. When enabled, the file contents of an editor that is saved will be stored to a backup location to be able to restore or review the contents later. Changing this setting has no effect on existing local file history entries.","Controls the maximum size of a file (in KB) to be considered for local file history. Files that are larger will not be added to the local file history. Changing this setting has no effect on existing local file history entries.","Controls the maximum number of local file history entries per file. When the number of local file history entries exceeds this number for a file, the oldest entries will be discarded.","Configure paths or [glob patterns](https://aka.ms/vscode-glob-patterns) for excluding files from the local file history. Glob patterns are always evaluated relative to the path of the workspace folder unless they are absolute paths. Changing this setting has no effect on existing local file history entries.","Configure an interval in seconds during which the last entry in local file history is replaced with the entry that is being added. This helps reduce the overall number of entries that are added, for example when auto save is enabled. This setting is only applied to entries that have the same source of origin. Changing this setting has no effect on existing local file history entries.","Controls the number of recently used commands to keep in history for the command palette. Set to 0 to disable command history.","Controls whether the last typed input to the command palette should be restored when opening it the next time.","Controls whether the command palette should have a list of commonly used commands.","Controls where the command palette should ask chat questions.","Ask chat questions in the Chat view.","Ask chat questions in Quick Chat.","Controls whether the command palette should include similar commands. You must have an extension installed that provides Natural Language support.","Controls whether Quick Open should close automatically once it loses focus.","Controls whether the last typed input to Quick Open should be restored when opening it the next time.","Controls whether opening settings also opens an editor showing all default settings.","Controls whether to use the split JSON editor when editing settings as JSON.","Controls whether opening keybinding settings also opens an editor showing all default keybindings.","Controls the location of the primary side bar and activity bar. They can either show on the left or right of the workbench. The secondary side bar will show on the opposite side of the workbench.","Controls the default location of the panel (Terminal, Debug Console, Output, Problems) in a new workspace. It can either show at the bottom, right, or left of the editor area.","Controls whether the panel opens maximized. It can either always open maximized, never open maximized, or open to the last state it was in before being closed.","Always maximize the panel when opening it.","Never maximize the panel when opening it. The panel will open un-maximized.","Open the panel to the state that it was in, before it was closed.","Controls the visibility of the status bar at the bottom of the workbench.","Controls the location of the activity bar. It can either show to the `side` or `top` (requires {0} set to {1}) of the primary side bar or `hidden`.","Show the activity bar to the side of the primary side bar.","Show the activity bar on top of the primary side bar.","Hide the activity bar.","Controls the behavior of clicking an activity bar icon in the workbench.","Hide the side bar if the clicked item is already visible.","Focus side bar if the clicked item is already visible.","Controls the visibility of view header actions. View header actions may either be always visible, or only visible when that view is focused or hovered over.","Controls font aliasing method in the workbench.","Sub-pixel font smoothing. On most non-retina displays this will give the sharpest text.","Smooth the font on the level of the pixel, as opposed to the subpixel. Can make the font appear lighter overall.","Disables font smoothing. Text will show with jagged sharp edges.","Applies `default` or `antialiased` automatically based on the DPI of displays.","Use the settings UI editor.","Use the JSON file editor.","Determines which settings editor to use by default.","Controls the delay in milliseconds after which the hover is shown for workbench items (ex. some extension provided tree view items). Already visible items may require a refresh before reflecting this setting change.","Controls whether the workbench should render with fewer animations.","Always render with reduced motion.","Do not render with reduced motion","Render with reduced motion based on OS configuration.","Controls whether the layout control in the title bar is shown.","Controls whether the layout control is shown in the custom title bar. This setting only has an effect when {0} is set to {1}.","Shows a single button with a dropdown of layout options.","Shows several buttons for toggling the visibility of the panels and side bar.","Shows both the dropdown and toggle buttons.","Controls whether the layout control in the custom title bar is displayed as a single menu button or with multiple UI toggles.","When enabled, will show the watermark tips when no editor is open.","Controls the window title based on the current context such as the opened workspace or active editor. Variables are substituted based on the context:","`${activeEditorShort}`: the file name (e.g. myFile.txt).","`${activeEditorMedium}`: the path of the file relative to the workspace folder (e.g. myFolder/myFileFolder/myFile.txt).","`${activeEditorLong}`: the full path of the file (e.g. /Users/Development/myFolder/myFileFolder/myFile.txt).","`${activeFolderShort}`: the name of the folder the file is contained in (e.g. myFileFolder).","`${activeFolderMedium}`: the path of the folder the file is contained in, relative to the workspace folder (e.g. myFolder/myFileFolder).","`${activeFolderLong}`: the full path of the folder the file is contained in (e.g. /Users/Development/myFolder/myFileFolder).","`${folderName}`: name of the workspace folder the file is contained in (e.g. myFolder).","`${folderPath}`: file path of the workspace folder the file is contained in (e.g. /Users/Development/myFolder).","`${rootName}`: name of the workspace with optional remote name and workspace indicator if applicable (e.g. myFolder, myRemoteFolder [SSH] or myWorkspace (Workspace)).","`${rootNameShort}`: shortened name of the workspace without suffixes (e.g. myFolder, myRemoteFolder or myWorkspace).","`${rootPath}`: file path of the opened workspace or folder (e.g. /Users/Development/myWorkspace).","`${profileName}`: name of the profile in which the workspace is opened (e.g. Data Science (Profile)). Ignored if default profile is used.","`${appName}`: e.g. VS Code.","`${remoteName}`: e.g. SSH","`${dirty}`: an indicator for when the active editor has unsaved changes.","`${focusedView}`: the name of the view that is currently focused.","`${separator}`: a conditional separator (\\" - \\") that only shows when surrounded by variables with values or static text.","Window","Separator used by {0}.","Show command launcher together with the window title.","Show command launcher together with the window title. This setting only has an effect when {0} is set to {1}.","Menu is displayed at the top of the window and only hidden in full screen mode.","Menu is always visible at the top of the window even in full screen mode.","Menu is hidden but can be displayed at the top of the window by executing the `Focus Application Menu` command.","Menu is hidden but can be displayed at the top of the window via the Alt key.","Menu is always hidden.","Menu is displayed as a compact button in the side bar.","Menu is displayed as a compact button in the side bar. This value is ignored when {0} is {1}.","Control the visibility of the menu bar. A setting of \'toggle\' means that the menu bar is hidden and executing `Focus Application Menu` will show it. A setting of \'compact\' will move the menu into the side bar.","Control the visibility of the menu bar. A setting of \'toggle\' means that the menu bar is hidden and a single press of the Alt key will show it. A setting of \'compact\' will move the menu into the side bar.","Controls whether the main menus can be opened via Alt-key shortcuts. Disabling mnemonics allows to bind these Alt-key shortcuts to editor commands instead.","Controls whether the menu bar will be focused by pressing the Alt-key. This setting has no effect on toggling the menu bar with the Alt-key.","Files will open in a new window.","Files will open in the window with the files\' folder open or the last active window.","Files will open in the window with the files\' folder open or the last active window unless opened via the Dock or from Finder.","Files will open in a new window unless picked from within the application (e.g. via the File menu).","Controls whether files should open in a new window when using a command line or file dialog.\\nNote that there can still be cases where this setting is ignored (e.g. when using the `--new-window` or `--reuse-window` command line option).","Controls whether files should open in a new window when using a command line or file dialog.\\nNote that there can still be cases where this setting is ignored (e.g. when using the `--new-window` or `--reuse-window` command line option).","Folders will open in a new window.","Folders will replace the last active window.","Folders will open in a new window unless a folder is picked from within the application (e.g. via the File menu).","Controls whether folders should open in a new window or replace the last active window.\\nNote that there can still be cases where this setting is ignored (e.g. when using the `--new-window` or `--reuse-window` command line option).","Always try to ask for confirmation. Note that browsers may still decide to close a tab or window without confirmation.","Always ask for confirmation.","Only ask for confirmation if a keybinding was used to close the window. Note that detection may not be possible in some cases.","Only ask for confirmation if a keybinding was used.","Never explicitly ask for confirmation unless data loss is imminent.","Never explicitly ask for confirmation.","Controls whether to show a confirmation dialog before closing the browser tab or window. Note that even if enabled, browsers may still decide to close a tab or window without confirmation and that this setting is only a hint that may not work in all cases.","Controls whether to show a confirmation dialog before closing the window or quitting the application.","Zen Mode","Controls whether turning on Zen Mode also puts the workbench into full screen mode.","Controls whether turning on Zen Mode also centers the layout.","Controls whether turning on Zen Mode should show multiple editor tabs, a single editor tab or hide the editor title area completely.","Each editor is displayed as a tab in the editor title area.","The active editor is displayed as a single large tab in the editor title area.","The editor title area is not displayed.","Controls whether turning on Zen Mode also hides the status bar at the bottom of the workbench.","Controls whether turning on Zen Mode also hides the activity bar either at the left or right of the workbench.","Controls whether turning on Zen Mode also hides the editor line numbers.","Controls whether a window should restore to Zen Mode if it was exited in Zen Mode.","Controls whether notifications do not disturb mode should be enabled while in Zen Mode. If true, only error notifications will pop out."],"vs/workbench/browser/actions/helpActions":["Keyboard Shortcuts Reference","&&Keyboard Shortcuts Reference","Video Tutorials","&&Video Tutorials","Tips and Tricks","Tips and Tri&&cks","Documentation","&&Documentation","Signup for the VS Code Newsletter","Join Us on YouTube","&&Join Us on YouTube","Search Feature Requests","&&Search Feature Requests","View License","View &&License","Privacy Statement","Privac&&y Statement"],"vs/workbench/browser/actions/developerActions":["Inspect Context Keys","Toggle Screencast Mode","Log Storage Database Contents","The storage database contents have been logged to the developer tools.","Open developer tools from the menu and select the Console tab.","Log Working Copies","Remove Large Storage Database Entries...","Scope: {0}, Target: {1}","Global","Profile","Workspace","Machine","User","Remove","Select large entries to remove from storage","There are no large storage entries to remove.","Do you want to remove the selected storage entries from the database?","{0}\\n\\nThis action is irreversible and may result in data loss!","&&Remove","Start Tracking Disposables","Snapshot Tracked Disposables","Stop Tracking Disposables","Screencast Mode","Controls the vertical offset of the screencast mode overlay from the bottom as a percentage of the workbench height.","Controls the font size (in pixels) of the screencast mode keyboard.","Options for customizing the keyboard overlay in screencast mode.","Show raw keys.","Show keyboard shortcuts.","Show command names.","Show command group names, when commands are also shown.","Show single editor cursor move commands.","Controls how long (in milliseconds) the keyboard overlay is shown in screencast mode.","Controls the color in hex (#RGB, #RGBA, #RRGGBB or #RRGGBBAA) of the mouse indicator in screencast mode.","Controls the size (in pixels) of the mouse indicator in screencast mode."],"vs/workbench/browser/actions/layoutActions":["Represents the menu bar","Represents the activity bar in the left position","Represents the activity bar in the right position","Represents a side bar in the left position","Represents a side bar in the left position toggled off","Represents side bar in the right position","Represents side bar in the right position toggled off","Represents the bottom panel","Represents the status bar","Represents the bottom panel alignment set to the left","Represents the bottom panel alignment set to the right","Represents the bottom panel alignment set to the center","Represents the bottom panel alignment set to justified","Represents full screen","Represents centered layout mode","Represents zen mode","Close Primary Side Bar","Toggle Activity Bar Visibility","Toggle Centered Layout","&&Centered Layout","Move Primary Side Bar Right","Move Primary Side Bar Left","Toggle Primary Side Bar Position","Move Primary Side Bar Right","Move Primary Side Bar Left","Toggle Primary Side Bar Position","Icon represents workbench layout configuration.","Configure Layout","Move Primary Side Bar Right","Move Primary Side Bar Right","Move Primary Side Bar Left","Move Primary Side Bar Left","Move Secondary Side Bar Left","Move Secondary Side Bar Right","&&Move Primary Side Bar Right","&&Move Primary Side Bar Left","Toggle Editor Area Visibility","Show &&Editor Area","&&Appearance","Toggle Primary Side Bar Visibility","Primary Side Bar","&&Primary Side Bar","Hide Primary Side Bar","Hide Primary Side Bar","Toggle Primary Side Bar","Toggle Primary Side Bar","Toggle Status Bar Visibility","S&&tatus Bar","Hide Editor Tabs","Show Multiple Editor Tabs","Show Single Editor Tab","Tab Bar","Separate Pinned Editor Tabs","Toggle Zen Mode","Zen Mode","Toggle Menu Bar","Menu &&Bar","Menu Bar","Reset View Locations","Move View","Side Bar / {0}","Panel / {0}","Secondary Side Bar / {0}","Select a View to Move","Move Focused View","There is no view currently focused.","The currently focused view is not movable.","Select a Destination for the View","View: Move {0}","New Panel Entry","New Side Bar Entry","New Secondary Side Bar Entry","Side Bar","Panel","Secondary Side Bar","Reset Focused View Location","There is no view currently focused.","Increase Current View Size","Increase Editor Width","Increase Editor Height","Decrease Current View Size","Decrease Editor Width","Decrease Editor Height","Select to Hide","Select to Show","Active","Menu Bar","Activity Bar","Primary Side Bar","Secondary Side Bar","Panel","Status Bar","Left","Right","Left","Right","Center","Justify","Full Screen","Zen Mode","Centered Layout","Customize Layout...","Visibility","Primary Side Bar Position","Panel Alignment","Modes","Customize Layout","Close","Restore Defaults"],"vs/workbench/browser/actions/navigationActions":["Navigate to the View on the Left","Navigate to the View on the Right","Navigate to the View Above","Navigate to the View Below","Focus Next Part","Focus Previous Part"],"vs/workbench/browser/actions/windowActions":["Remove from Recently Opened","Folder With Unsaved Files","Workspace With Unsaved Files","folders & workspaces","folders","files","Select to open (hold Cmd-key to force new window or Option-key for same window)","Select to open (hold Ctrl-key to force new window or Alt-key for same window)","Workspace with Unsaved Files","Folder with Unsaved Files","Do you want to open the workspace to review the unsaved files?","Do you want to open the folder to review the unsaved files?","Workspaces with unsaved files cannot be removed until all unsaved files have been saved or reverted.","Folders with unsaved files cannot be removed until all unsaved files have been saved or reverted.","{0}, workspace with unsaved changes","{0}, folder with unsaved changes","Open Recent...","&&More...","Quick Open Recent...","Toggle Full Screen","&&Full Screen","Reload Window","About","&&About","New Window","New &&Window","Remove keyboard focus from focused element","Confirm Before Close","Open &&Recent"],"vs/workbench/browser/actions/workspaceActions":["Workspaces","Open File...","Open Folder...","Open Folder...","Open...","Open Workspace from File...","Close Workspace","Open Workspace Configuration File","Remove Folder from Workspace...","Save Workspace As...","Duplicate As Workspace in New Window","&&Open File...","Open &&Folder...","Open &&Folder...","&&Open...","Open Wor&&kspace from File...","A&&dd Folder to Workspace...","Save Workspace As...","Duplicate Workspace","Close &&Folder","Close &&Workspace"],"vs/workbench/browser/actions/workspaceCommands":["Add Folder to Workspace...","&&Add","Add Folder to Workspace","Select workspace folder"],"vs/workbench/browser/actions/quickAccessActions":["Go to File...","Quick Open","Navigate Next in Quick Open","Navigate Previous in Quick Open","Select Next in Quick Open","Select Previous in Quick Open"],"vs/workbench/services/actions/common/menusExtensionPoint":["The Command Palette","The touch bar (macOS only)","The editor title menu","Run submenu inside the editor title menu","The editor context menu","\'Copy as\' submenu in the editor context menu","\'Share\' submenu in the editor context menu","The file explorer context menu","\'Share\' submenu in the file explorer context menu","The editor tabs context menu","\'Share\' submenu inside the editor title context menu","The debug callstack view context menu","The debug variables view context menu","The debug toolbar menu","The home indicator context menu (web only)","\'Copy as\' submenu in the top level Edit menu","The Source Control title menu","The Source Control menu","The Source Control resource state context menu","The Source Control resource folder context menu","The Source Control resource group context menu","The Source Control inline change menu","The remote indicator menu in the status bar","The terminal context menu","The terminal tabs context menu","The contributed view title menu","The contributed view item context menu","The contributed comment editor actions","The contributed comment thread title menu","The contributed comment thread context menu, rendered as buttons below the comment editor","The contributed comment thread context menu, rendered as buttons below the comment editor","The contributed comment thread title\'s peek context menu, rendered as a right click menu on the comment thread\'s peek title.","The contributed comment title menu","The contributed comment context menu, rendered as buttons below the comment editor","The contributed comment context menu, rendered as a right click menu on the an individual comment in the comment thread\'s peek view.","The contributed notebook toolbar menu","The contributed notebook kernel sources menu","The contributed notebook cell title menu","The contributed notebook cell execution menu","The contributed interactive toolbar menu","The contributed interactive cell title menu","The contributed test item menu","The menu for a gutter decoration for a test item","A prominent button overlaying editor content where the message is displayed","Context menu for the message in the results tree","The extension context menu","The Timeline view title menu","The Timeline view item context menu","The Ports view item context menu","The Ports view item origin inline menu","The Ports view item port inline menu","The \'New File...\' quick pick, shown on welcome page and File menu.","The webview context menu","Share submenu shown in the top level File menu.","The actions shown when hovering on an inline completion","The prominent button in an editor, overlays its content","The contributed editor line number context menu","The result toolbar of the merge editor","property `{0}` is mandatory and must be of type `string`","property `{0}` can be omitted or must be of type `string`","property `{0}` can be omitted or must be of type `string`","property `{0}` can be omitted or must be of type `string`","property `{0}` is mandatory and must be of type `string`","property `{0}` can be omitted or must be of type `string`","property `{0}` can be omitted or must be of type `string`","submenu items must be an array","submenu items must be an object","property `{0}` is mandatory and must be of type `string`","property `{0}` is mandatory and must be of type `string`","Identifier of the command to execute. The command must be declared in the \'commands\'-section","Identifier of an alternative command to execute. The command must be declared in the \'commands\'-section","Condition which must be true to show this item","Group into which this item belongs","Identifier of the submenu to display in this item.","Condition which must be true to show this item","Group into which this item belongs","Identifier of the menu to display as a submenu.","The label of the menu item which leads to this submenu.","(Optional) Icon which is used to represent the submenu in the UI. Either a file path, an object with file paths for dark and light themes, or a theme icon references, like `\\\\$(zap)`","Icon path when a light theme is used","Icon path when a dark theme is used","Contributes menu items to the editor","Proposed API, requires `enabledApiProposal: [\\"{0}\\"]` - {1}","Contributes submenu items to the editor","expected non-empty value.","property `{0}` is mandatory and must be of type `string`","property `{0}` can be omitted or must be of type `string`","property `icon` can be omitted or must be either a string or a literal like `{dark, light}`","property `{0}` is mandatory and must be of type `string` or `object`","property `{0}` is mandatory and must be of type `string`","properties `{0}` and `{1}` are mandatory and must be of type `string`","Identifier of the command to execute","Title by which the command is represented in the UI","(Optional) Short title by which the command is represented in the UI. Menus pick either `title` or `shortTitle` depending on the context in which they show commands.","(Optional) Category string by which the command is grouped in the UI","(Optional) Condition which must be true to enable the command in the UI (menu and keybindings). Does not prevent executing the command by other means, like the `executeCommand`-api.","(Optional) Icon which is used to represent the command in the UI. Either a file path, an object with file paths for dark and light themes, or a theme icon references, like `\\\\$(zap)`","Icon path when a light theme is used","Icon path when a dark theme is used","Contributes commands to the command palette.","Command `{0}` already registered by {1} ({2})","Command `{0}` already registered","`{0}` is not a valid submenu identifier","The `{0}` submenu was already previously registered.","`{0}` is not a valid submenu label","{0} is a proposed menu identifier. It requires \'package.json#enabledApiProposals: [\\"{1}\\"]\' and is only available when running out of dev or with the following command line switch: --enable-proposed-api {2}","Menu item references a command `{0}` which is not defined in the \'commands\' section.","Menu item references an alt-command `{0}` which is not defined in the \'commands\' section.","Menu item references the same command as default and alt-command","Menu item references a submenu for a menu which doesn\'t have submenu support.","Menu item references a submenu `{0}` which is not defined in the \'submenus\' section.","The `{0}` submenu was already contributed to the `{1}` menu."],"vs/workbench/api/common/configurationExtensionPoint":["A title for the current category of settings. This label will be rendered in the Settings editor as a subheading. If the title is the same as the extension display name, then the category will be grouped under the main extension heading.","When specified, gives the order of this category of settings relative to other categories.","Description of the configuration properties.","Property should not be empty.","Schema of the configuration property.","Configuration that can be configured only in the user settings.","Configuration that can be configured only in the user settings or only in the remote settings.","Configuration that can be configured in the user, remote or workspace settings.","Configuration that can be configured in the user, remote, workspace or folder settings.","Resource configuration that can be configured in language specific settings.","Machine configuration that can be configured also in workspace or folder settings.","Scope in which the configuration is applicable. Available scopes are `application`, `machine`, `window`, `resource`, and `machine-overridable`.","Descriptions for enum values","Descriptions for enum values in the markdown format.","Labels for enum values to be displayed in the Settings editor. When specified, the {0} values still show after the labels, but less prominently.","The description in the markdown format.","If set, the property is marked as deprecated and the given message is shown as an explanation.","If set, the property is marked as deprecated and the given message is shown as an explanation in the markdown format.","The value will be shown in an inputbox.","The value will be shown in a textarea.","When specified, controls the presentation format of the string setting.","When specified, gives the order of this setting relative to other settings within the same category. Settings with an order property will be placed before settings without this property set.","When enabled, Settings Sync will not sync the user value of this configuration by default.","Cannot register configuration defaults for \'{0}\'. Only defaults for machine-overridable, window, resource and language overridable scoped settings are supported.","Contributes configuration settings.","\'configuration.title\' must be a string","\'configuration.properties\' must be an object","Cannot register \'{0}\'. This property is already registered.","configuration.properties property \'{0}\' must be an object","\'configuration.allOf\' is deprecated and should no longer be used. Instead, pass multiple configuration sections as an array to the \'configuration\' contribution point.","List of folders to be loaded in the workspace.","A file path. e.g. `/root/folderA` or `./folderA` for a relative path that will be resolved against the location of the workspace file.","An optional name for the folder. ","URI of the folder","An optional name for the folder. ","Workspace settings","Workspace launch configurations","Workspace task configurations","Workspace extensions","The remote server where the workspace is located.","A transient workspace will disappear when restarting or reloading.","Unknown workspace configuration property"],"vs/workbench/browser/parts/editor/editorParts":["Window {0}"],"vs/workbench/api/browser/viewsExtensionPoint":["Unique id used to identify the container in which views can be contributed using \'views\' contribution point","Human readable string used to render the container","Path to the container icon. Icons are 24x24 centered on a 50x40 block and have a fill color of \'rgb(215, 218, 224)\' or \'#d7dae0\'. It is recommended that icons be in SVG, though any image file type is accepted.","Contributes views containers to the editor","Contribute views containers to Activity Bar","Contribute views containers to Panel","Type of the view. This can either be `tree` for a tree view based view or `webview` for a webview based view. The default is `tree`.","The view is backed by a `TreeView` created by `createTreeView`.","The view is backed by a `WebviewView` registered by `registerWebviewViewProvider`.","Identifier of the view. This should be unique across all views. It is recommended to include your extension id as part of the view id. Use this to register a data provider through `vscode.window.registerTreeDataProviderForView` API. Also to trigger activating your extension by registering `onView:${id}` event to `activationEvents`.","The human-readable name of the view. Will be shown","Condition which must be true to show this view","Path to the view icon. View icons are displayed when the name of the view cannot be shown. It is recommended that icons be in SVG, though any image file type is accepted.","Human-readable context for when the view is moved out of its original location. By default, the view\'s container name will be used.","Initial state of the view when the extension is first installed. Once the user has changed the view state by collapsing, moving, or hiding the view, the initial state will not be used again.","The default initial state for the view. In most containers the view will be expanded, however; some built-in containers (explorer, scm, and debug) show all contributed views collapsed regardless of the `visibility`.","The view will not be shown in the view container, but will be discoverable through the views menu and other view entry points and can be un-hidden by the user.","The view will show in the view container, but will be collapsed.","The initial size of the view. The size will behave like the css \'flex\' property, and will set the initial size when the view is first shown. In the side bar, this is the height of the view. This value is only respected when the same extension owns both the view and the view container.","Identifier of the view. This should be unique across all views. It is recommended to include your extension id as part of the view id. Use this to register a data provider through `vscode.window.registerTreeDataProviderForView` API. Also to trigger activating your extension by registering `onView:${id}` event to `activationEvents`.","The human-readable name of the view. Will be shown","Condition which must be true to show this view","Nested group in the viewlet","The name of the remote type associated with this view","Contributes views to the editor","Contributes views to Explorer container in the Activity bar","Contributes views to Debug container in the Activity bar","Contributes views to SCM container in the Activity bar","Contributes views to Test container in the Activity bar","Contributes views to Remote container in the Activity bar. To contribute to this container, enableProposedApi needs to be turned on","Contributes views to contributed views container","views containers must be an array","property `{0}` is mandatory and must be of type `string` with non-empty value. Only alphanumeric characters, \'_\', and \'-\' are allowed.","property `{0}` is mandatory and must be of type `string` with non-empty value. Only alphanumeric characters, \'_\', and \'-\' are allowed.","property `{0}` is mandatory and must be of type `string`","property `{0}` is mandatory and must be of type `string`","property `{0}` is mandatory and must be of type `string` with non-empty value","View container \'{0}\' requires \'enabledApiProposals: [\\"contribViewsRemote\\"]\' to be added to \'Remote\'.","View container \'{0}\' does not exist and all views registered to it will be added to \'Explorer\'.","Cannot register multiple views with same id `{0}`","A view with id `{0}` is already registered.","Unknown view type `{0}`.","views must be an array","property `{0}` is mandatory and must be of type `string`","property `{0}` is mandatory and must be of type `string`","property `{0}` can be omitted or must be of type `string`","property `{0}` can be omitted or must be of type `string`","property `{0}` can be omitted or must be of type `string`","property `{0}` can be omitted or must be one of {1}"],"vs/workbench/browser/parts/editor/editor.contribution":["Text Editor","Text Diff Editor","Binary Diff Editor","Side by Side Editor","Type the name of an editor to open it.","Show Editors in Active Group by Most Recently Used","Type the name of an editor to open it.","Show All Opened Editors By Appearance","Type the name of an editor to open it.","Show All Opened Editors By Most Recently Used","Unlock Group","Close Group","Split Up","Split Down","Split Left","Split Right","Lock Group","Close","Split Up","Split Down","Split Left","Split Right","Tab Bar","Multiple Tabs","Single Tab","Hide","Close","Close Others","Close to the Right","Close Saved","Close All","Reopen Editor With...","Keep Open","Pin","Unpin","Split Up","Split Down","Split Left","Split Right","Split in Group","Join in Group","Inline View","Show Opened Editors","Close All","Close Saved","Enable Preview Editors","Maximize Group","Unmaximize Group","Lock Group","Split Editor Right","Split Editor Down","Split Editor Down","Split Editor Right","Toggle Layout","Close","Close All","Close","Close All","Unpin","Close","Unpin","Close","Unlock Group","Icon for the previous change action in the diff editor.","Icon for the next change action in the diff editor.","Icon for the toggle whitespace action in the diff editor.","Previous Change","Next Change","Show Leading/Trailing Whitespace Differences","Keep Editor","Pin Editor","Unpin Editor","Close Editor","Close Pinned Editor","Close All Editors in Group","Close Saved Editors in Group","Close Other Editors in Group","Close Editors to the Right in Group","Close Editor Group","Reopen Editor With...","&&Reopen Closed Editor","&&Clear Recently Opened","Share","Editor &&Layout","Split Up","Split &&Up","Split Down","Split &&Down","Split Left","Split &&Left","Split Right","Split &&Right","Split in Group","Split in &&Group","Join in Group","Join in &&Group","Single","&&Single","Two Columns","&&Two Columns","Three Columns","T&&hree Columns","Two Rows","T&&wo Rows","Three Rows","Three &&Rows","Grid (2x2)","&&Grid (2x2)","Two Rows Right","Two R&&ows Right","Two Columns Bottom","Two &&Columns Bottom","&&Last Edit Location","&&First Side in Editor","&&Second Side in Editor","&&Next Editor","&&Previous Editor","&&Next Used Editor","&&Previous Used Editor","&&Next Editor in Group","&&Previous Editor in Group","&&Next Used Editor in Group","&&Previous Used Editor in Group","Switch &&Editor","Group &&1","Group &&2","Group &&3","Group &&4","Group &&5","&&Next Group","&&Previous Group","Group &&Left","Group &&Right","Group &&Above","Group &&Below","Switch &&Group"],"vs/workbench/browser/parts/banner/bannerPart":["Focus Banner"],"vs/workbench/browser/parts/statusbar/statusbarPart":["Hide Status Bar"],"vs/workbench/browser/parts/views/viewsService":["Text Editor","Show {0}","Toggle {0}","Show {0}","Toggle {0}","Focus on {0} View","Reset Location"],"vs/platform/undoRedo/common/undoRedoService":["The following files have been closed and modified on disk: {0}.","The following files have been modified in an incompatible way: {0}.","Could not undo \'{0}\' across all files. {1}","Could not undo \'{0}\' across all files. {1}","Could not undo \'{0}\' across all files because changes were made to {1}","Could not undo \'{0}\' across all files because there is already an undo or redo operation running on {1}","Could not undo \'{0}\' across all files because an undo or redo operation occurred in the meantime","Would you like to undo \'{0}\' across all files?","&&Undo in {0} Files","Undo this &&File","Could not undo \'{0}\' because there is already an undo or redo operation running.","Would you like to undo \'{0}\'?","&&Yes","No","Could not redo \'{0}\' across all files. {1}","Could not redo \'{0}\' across all files. {1}","Could not redo \'{0}\' across all files because changes were made to {1}","Could not redo \'{0}\' across all files because there is already an undo or redo operation running on {1}","Could not redo \'{0}\' across all files because an undo or redo operation occurred in the meantime","Could not redo \'{0}\' because there is already an undo or redo operation running."],"vs/workbench/services/extensions/browser/extensionUrlHandler":["Allow \'{0}\' extension to open this URI?","Don\'t ask again for this extension.","&&Open","Would you like to install \'{0}\' extension from \'{1}\' to open this URI?","\'{0}\' extension wants to open a URI:","&&Install and Open","Installing Extension \'{0}\'...","Extension \'{0}\' is disabled. Would you like to enable the extension and open the URL?","&&Enable and Open","Extension \'{0}\' is not loaded. Would you like to reload the window to load the extension and open the URL?","&&Reload Window and Open","Manage Authorized Extension URIs...","Extensions","There are currently no authorized extension URIs."],"vs/workbench/services/keybinding/common/keybindingEditing":["Unable to write because the keybindings configuration file has unsaved changes. Please save it first and then try again.","Unable to write to the keybindings configuration file. Please open it to correct errors/warnings in the file and try again.","Unable to write to the keybindings configuration file. It has an object which is not of type Array. Please open the file to clean up and try again.","Place your key bindings in this file to override the defaults"],"vs/workbench/services/decorations/browser/decorationsService":["Contains emphasized items"],"vs/workbench/services/progress/browser/progressService":["{0}: {1}","[{0}] {1}: {2}","[{0}]: {1}","[{0}]: {1}","Progress Message","Cancel","Cancel","Dismiss"],"vs/workbench/services/preferences/browser/preferencesService":["Open a folder or workspace first to create workspace or folder settings.","Place your key bindings in this file to override the defaults","Default Keybindings","Default Keybindings","Unable to create \'{0}\' ({1})."],"vs/workbench/services/configuration/common/jsonEditingService":["Unable to write into the file. Please open the file to correct errors/warnings in the file and try again."],"vs/workbench/services/editor/browser/editorResolverService":["There are multiple default editors available for the resource.","Configure Default","Keep {0}","Active","Default","Active and Default","Configure default editor for \'{0}\'...","Select new default editor for \'{0}\'","Select editor for \'{0}\'"],"vs/workbench/services/history/browser/historyService":["Whether it is possible to navigate back in editor history","Whether it is possible to navigate forward in editor history","Whether it is possible to navigate back in editor navigation locations history","Whether it is possible to navigate forward in editor navigation locations history","Whether it is possible to navigate to the last editor navigation location","Whether it is possible to navigate back in editor edit locations history","Whether it is possible to navigate forward in editor edit locations history","Whether it is possible to navigate to the last editor edit location","Whether it is possible to reopen the last closed editor"],"vs/workbench/services/keybinding/browser/keybindingService":["expected non-empty value.","property `{0}` is mandatory and must be of type `string`","property `{0}` can be omitted or must be of type `string`","property `{0}` can be omitted or must be of type `string`","property `{0}` can be omitted or must be of type `string`","property `{0}` can be omitted or must be of type `string`","property `{0}` can be omitted or must be of type `string`","Identifier of the command to run when keybinding is triggered.","Arguments to pass to the command to execute.","Key or key sequence (separate keys with plus-sign and sequences with space, e.g. Ctrl+O and Ctrl+L L for a chord).","Mac specific key or key sequence.","Linux specific key or key sequence.","Windows specific key or key sequence.","Condition when the key is active.","Contributes keybindings.","Invalid `contributes.{0}`: {1}","Here are other available commands: ","Keybindings configuration","Name of the command to execute","Name of the command to remove keyboard shortcut for","Key or key sequence (separated by space)","Incorrect type. Expected \\"{0}\\". The field \'command\' does not support running multiple commands. Use command \'runCommands\' to pass it multiple commands to run.","Condition when the key is active.","Arguments to pass to the command to execute."],"vs/workbench/services/language/common/languageService":["Contributes language declarations.","ID of the language.","Name aliases for the language.","File extensions associated to the language.","File names associated to the language.","File name glob patterns associated to the language.","Mime types associated to the language.","A regular expression matching the first line of a file of the language.","A relative path to a file containing configuration options for the language.","A icon to use as file icon, if no icon theme provides one for the language.","Icon path when a light theme is used","Icon path when a dark theme is used","Invalid `contributes.{0}`. Expected an array.","Empty value for `contributes.{0}`","property `{0}` is mandatory and must be of type `string`","property `{0}` can be omitted and must be of type `string[]`","property `{0}` can be omitted and must be of type `string[]`","property `{0}` can be omitted and must be of type `string`","property `{0}` can be omitted and must be of type `string`","property `{0}` can be omitted and must be of type `string[]`","property `{0}` can be omitted and must be of type `string[]`","property `{0}` can be omitted and must be of type `object` with properties `{1}` and `{2}` of type `string`"],"vs/workbench/services/themes/browser/workbenchThemeService":["Unable to load {0}: {1}"],"vs/workbench/services/label/common/labelService":["Contributes resource label formatting rules.","URI scheme on which to match the formatter on. For example \\"file\\". Simple glob patterns are supported.","URI authority on which to match the formatter on. Simple glob patterns are supported.","Rules for formatting uri resource labels.","Label rules to display. For example: myLabel:/${path}. ${path}, ${scheme}, ${authority} and ${authoritySuffix} are supported as variables.","Separator to be used in the uri label display. \'/\' or \'\' as an example.","Controls whether `${path}` substitutions should have starting separator characters stripped.","Controls if the start of the uri label should be tildified when possible.","Suffix appended to the workspace label.","Untitled (Workspace)","Workspace","{0} (Workspace)","{0} (Workspace)"],"vs/workbench/services/extensionManagement/browser/extensionEnablementService":["All installed extensions are temporarily disabled.","Reload and Enable Extensions","Cannot change enablement of {0} extension because it contributes language packs.","Cannot change enablement {0} extension because Settings Sync depends on it.","Cannot change enablement of {0} extension because it is enabled in environment","Cannot change enablement of {0} extension because it is disabled in environment","Cannot change enablement of {0} extension because it does not support virtual workspaces","Cannot change enablement of {0} extension because of its extension kind","Cannot enable \'{0}\' extension because it depends on \'{1}\' extension that cannot be enabled","No workspace.","Cannot change enablement of {0} extension in workspace because it contributes authentication providers"],"vs/workbench/services/extensionRecommendations/common/workspaceExtensionsConfig":["Remove extension recommendation from","Add extension recommendation to","Remove extension recommendation from","Add extension recommendation to","Workspace Folder","Workspace"],"vs/workbench/services/notification/common/notificationService":["Don\'t Show Again","Don\'t Show Again"],"vs/workbench/services/userDataProfile/browser/userDataProfileManagement":["The current profile has been updated. Please reload to switch back to the updated profile","The current profile has been removed. Please reload to switch back to default profile","The current profile has been removed. Please reload to switch back to default profile","Cannot rename the default profile","Cannot delete the default profile","Switching to a profile.","Switching a profile requires reloading VS Code.","&&Reload"],"vs/workbench/services/userDataProfile/browser/userDataProfileImportExportService":["Error while importing profile: {0}","{0}: Resolving profile content...","Preview Profile","Create Profile","Create Profile","Edit {0} Profile...","Create New Profile...","Settings","Keyboard Shortcuts","User Snippets","User Tasks","Extensions","Profile name","Save","Create","Choose what to configure in your Profile:","Profile with name {0} already exists.","The profile should contain at least one configuration.","Using Default Profile","Profile name is required and must be a non-empty value.","Icon:","Icon: {0}","Icon: {0}","Copy from:","None","Profile Templates","Existing Profiles","Copy profile from","Create Profile","Export","Close","Create Profile: {0}","Applying Extensions...","Switching Profile...","Troubleshoot Issue","Setting up Troubleshoot Profile: {0}","Applying Extensions...","Switching Profile...","{0}: Exporting...","Profile \'{0}\' was exported successfully.","&&Copy Link","&&Open Link","&&Open in {0}","Close","Preview Profile","Create Profile in {0}","Close","By default, extensions aren\'t installed when previewing a profile on the web. You can still install them manually before importing the profile. ","Learn more","Install Extensions","Create Profile","Cancel","Create Profile","Switching Profile...","Applying Settings...","Applying Keyboard Shortcuts...","Applying Tasks...","Applying Snippets...","Applying State...","Applying Extensions...","Export \'{0}\' profile as...","Profile with name \'{0}\' already exists. Do you want to overwrite it?","&&Overwrite","&&Create New Profile","Profile name","Create New Profile","Profile with name {0} already exists.","{0}: Applying...","{0}: Applied successfully.","Local","file","Save Profile","Select Profile","Select {0}","Select {0}","From Default Profile","Name the profile","Export Profile","Profile name must be provided."],"vs/workbench/services/remote/common/remoteExplorerService":["The ID of a Get Started walkthrough to open.","Contributes help information for Remote","The url, or a command that returns the url, to your project\'s Getting Started page, or a walkthrough ID contributed by your project\'s extension","The url, or a command that returns the url, to your project\'s documentation page","The url, or a command that returns the url, to your project\'s feedback reporter","Use {0} instead","The url, or a command that returns the url, to your project\'s issue reporter","The url, or a command that returns the url, to your project\'s issues list"],"vs/workbench/services/filesConfiguration/common/filesConfigurationService":["Editor is read-only because the file system of the file is read-only.","Editor is read-only because the file was set read-only in this session. [Click here](command:{0}) to set writeable.","Editor is read-only because the file was set read-only via settings. [Click here](command:{0}) to configure.","Editor is read-only because of file permissions. [Click here](command:{0}) to set writeable anyway.","Editor is read-only because the file is read-only."],"vs/workbench/services/views/browser/viewDescriptorService":["Hide \'{0}\'","Reset Location"],"vs/workbench/services/userDataSync/browser/userDataSyncWorkbenchService":["Settings sync cannot be turned on because there are no authentication providers available.","No account available","Settings Sync is being turned on. Would you like to cancel it?","Settings Sync","&&Yes","No","{0} is turned on","Turning on...","Resolving conflicts...","Turning on...","Conflicts Detected","Please resolve conflicts to turn on...","&&Show Conflicts","Replace &&Local","Replace &&Remote","This will clear your data in the cloud and stop sync on all your devices.","Clear","&&Reset","Select folder to download Settings Sync activity","Save","Select an account to sign in","Signed in","Last Used with Sync","Others","Sign in with {0}"],"vs/workbench/services/authentication/browser/authenticationService":["The id of the authentication provider.","The human readable name of the authentication provider.","Contributes authentication","No accounts requested yet...","An authentication contribution must specify an id.","An authentication contribution must specify a label.","This authentication id \'{0}\' has already been registered","Loading...","Sign in requested","The extension \'{0}\' wants to access the {1} account \'{2}\'.","&&Allow","&&Deny","Sign in to another account","The extension \'{0}\' wants to access a {1} account","Select an account for \'{0}\' to use or Esc to cancel","Grant access to {0} for {1}... (1)","Sign in with {0} to use {1} (1)"],"vs/workbench/services/assignment/common/assignmentService":["Fetches experiments to run from a Microsoft online service."],"vs/workbench/services/issue/browser/issueTroubleshoot":["Troubleshoot Issue","Issue troubleshooting is a process to help you identify the cause for an issue. The cause for an issue can be a misconfiguration, due to an extension, or be {0} itself.\\n\\nDuring the process the window reloads repeatedly. Each time you must confirm if you are still seeing the issue.","&&Troubleshoot Issue","Issue troubleshooting is active and has temporarily disabled all installed extensions. Check if you can still reproduce the problem and proceed by selecting from these options.","Issue troubleshooting is active and has temporarily reset your configurations to defaults. Check if you can still reproduce the problem and proceed by selecting from these options.","Issue troubleshooting has identified that the issue is caused by your configurations. Please report the issue by exporting your configurations using \\"Export Profile\\" command and share the file in the issue report.","Issue troubleshooting has identified that the issue is with {0}.","I Can\'t Reproduce","I Can Reproduce","Stop","Troubleshoot Issue","This likely means that the issue has been addressed already and will be available in an upcoming release. You can safely use {0} insiders until the new stable version is available.","Troubleshoot Issue","Download {0} Insiders","Report Issue Anyway","Please try to download and reproduce the issue in {0} insiders.","Troubleshoot Issue","I can\'t reproduce","I can reproduce","Stop","Please try to reproduce the issue in {0} insiders and confirm if the issue exists there.","Troubleshoot Issue...","Stop Troubleshoot Issue"],"vs/workbench/contrib/preferences/browser/keybindingsEditorContribution":["You won\'t be able to produce this key combination under your current keyboard layout.","**{0}** for your current keyboard layout (**{1}** for US standard).","**{0}** for your current keyboard layout."],"vs/workbench/contrib/performance/browser/performance.contribution":["Startup Performance","Print Service Cycles","Print Service Traces","Print Emitter Profiles"],"vs/workbench/contrib/preferences/browser/preferences.contribution":["Settings Editor 2","Keybindings Editor","Open Settings (UI)","Open User Settings (JSON)","Open Application Settings (JSON)","Preferences","Settings","&&Settings","Open Settings (UI)","Open User Settings","Open Default Settings (JSON)","Open Workspace Settings","Open Accessibility Settings","Open Workspace Settings (JSON)","Open Folder Settings","Open Folder Settings (JSON)","Open Folder Settings","&&Online Services Settings","Show untrusted workspace settings","&&Telemetry Settings","Open Remote Settings ({0})","Open Remote Settings (JSON) ({0})","Focus Settings Search","Clear Settings Search Results","Focus settings file","Focus settings file","Focus settings list","Focus Settings Table of Contents","Focus Setting Control","Show Setting Context Menu","Move Focus Up One Level","Preferences","Open Keyboard Shortcuts","Keyboard Shortcuts","Keyboard Shortcuts","Open Default Keyboard Shortcuts (JSON)","Open Keyboard Shortcuts (JSON)","Show System Keybindings","Show Extension Keybindings","Show User Keybindings","Clear Search Results","Clear Keyboard Shortcuts Search History","Define Keybinding","Open Settings (JSON)","&&Preferences"],"vs/workbench/contrib/chat/browser/chat.contribution":["Chat","Controls the font size in pixels in chat codeblocks.","Controls the font family in chat codeblocks.","Controls the font weight in chat codeblocks.","Controls whether lines should wrap in chat codeblocks.","Controls the line height in pixels in chat codeblocks. Use 0 to compute the line height from the font size.","Chat","Chat","Clear the session"],"vs/workbench/contrib/notebook/browser/notebook.contribution":["Settings for code editors used in notebooks. This can be used to customize most editor.* settings.","Notebook","Priority list for output mime types","Where the cell toolbar should be shown, or whether it should be hidden.","Configure the cell toolbar position for for specific file types","Whether the cell status bar should be shown.","The cell Status bar is always hidden.","The cell Status bar is always visible.","The cell Status bar is hidden until the cell has executed. Then it becomes visible to show the execution status.","Whether to use the enhanced text diff editor for notebook.","Whether to render the overview ruler in the diff editor for notebook.","Whether the cell toolbar should appear on hover or click.","Whether to use separate undo/redo stack for each cell.","Control whether the notebook editor should be rendered in a compact form. For example, when turned on, it will decrease the left margin width.","Controls where the focus indicator is rendered, either along the cell borders or on the left gutter.","Control where the insert cell actions should appear.","A toolbar that appears on hover between cells.","The toolbar at the top of the notebook editor.","Both toolbars.","The insert actions don\'t appear anywhere.","Control whether to render a global toolbar inside the notebook editor.","Experimental. Control whether to render notebook Sticky Scroll headers in the notebook editor.","Control whether outputs action should be rendered in the output toolbar.","Controls when the Markdown header folding arrow is shown.","The folding controls are always visible.","Never show the folding controls and reduce the gutter size.","The folding controls are visible only on mouseover.","Control whether the notebook editor should allow moving cells through drag and drop.","Control whether extra actions are shown in a dropdown next to the run button.","Control whether the actions on the notebook toolbar should render label or not.","Controls how many lines of text are displayed in a text output. If {0} is enabled, this setting is used to determine the scroll height of the output.","Controls the font size in pixels of rendered markup in notebooks. When set to {0}, 120% of {1} is used.","Controls whether code cells in the interactive window are collapsed by default.","Line height of the output text within notebook cells.\\n - When set to 0, editor line height is used.\\n - Values between 0 and 8 will be used as a multiplier with the font size.\\n - Values greater than or equal to 8 will be used as effective values.","Font size for the output text within notebook cells. When set to 0, {0} is used.","The font family of the output text within notebook cells. When set to empty, the {0} is used.","Initially render notebook outputs in a scrollable region when longer than the limit.","Controls whether the lines in output should wrap.","Format a notebook on save. A formatter must be available, the file must not be saved after delay, and the editor must not be shutting down.","Run a series of Code Actions for a notebook on save. Code Actions must be specified, the file must not be saved after delay, and the editor must not be shutting down. Example: `\\"notebook.source.organizeImports\\": \\"explicit\\"`","Triggers Code Actions only when explicitly saved.","Never triggers Code Actions on save.","Triggers Code Actions only when explicitly saved. This value will be deprecated in favor of \\"explicit\\".","Triggers Code Actions only when explicitly saved. This value will be deprecated in favor of \\"never\\".","Format a notebook cell upon execution. A formatter must be available.","Control whether a confirmation prompt is required to delete a running cell.","Customize the Find Widget behavior for searching within notebook cells. When both markup source and markup preview are enabled, the Find Widget will search either the source code or preview based on the current state of the cell.","Enables the incremental saving of notebooks in Remote environment. When enabled, only the changes to the notebook are sent to the extension host, improving performance for large notebooks and slow network connections.","How far to scroll when revealing the next cell upon running {0}.","Scroll to fully reveal the next cell.","Scroll to reveal the first line of the next cell.","Do not scroll.","Experimental. Keep the focused cell steady while surrounding cells change size.","Anchor the viewport to the focused cell depending on context unless {0} is set to {1}.","Always anchor the viewport to the focused cell.","The focused cell may shift around as cells resize."],"vs/workbench/contrib/testing/browser/testing.contribution":["Testing","T&&esting","No tests have been found in this workspace yet.","Install Additional Test Extensions...","Test Results","Test Results","Test Explorer"],"vs/workbench/contrib/logs/common/logs.contribution":["Set Default Log Level","{0} (Remote)","Show Window Log"],"vs/workbench/contrib/interactive/browser/interactive.contribution":["Interactive Window","Open Interactive Window","Open Interactive Window","Execute Code","Clear the interactive window input editor contents","Previous value in history","Next value in history","Scroll to Top","Scroll to Bottom","Focus Input Editor","Focus History","The border color for the current interactive code cell when the editor has focus.","The border color for the current interactive code cell when the editor does not have focus.","Automatically scroll the interactive window to show the output of the last statement executed. If this value is false, the window will only scroll if the last cell was already the one scrolled to."],"vs/workbench/contrib/quickaccess/browser/quickAccess.contribution":["Type \'{0}\' to get help on the actions you can take from here.","Show all Quick Access Providers","More","Type the name of a view, output channel or terminal to open.","Open View","Type the name of a command to run.","Show and Run Commands","&&Command Palette...","Show All Commands","&&Open View...","Go to &&Line/Column...","Command Palette...","Command Palette..."],"vs/workbench/contrib/files/browser/fileActions.contribution":["Copy Path","Copy Relative Path","Reveal in Explorer View","Use your changes and overwrite file contents","Discard your changes and revert to file contents","Copy Path of Active File","Copy Relative Path of Active File","Save All in Group","Save All Files","Revert File","Compare Active File with Saved","Open to the Side","Reopen Editor With...","Revert File","Save All","Compare with Saved","Compare with Selected","Select for Compare","Compare Selected","Close","Close Others","Close Saved","Close All","Open With...","Cut","Delete Permanently","Delete Permanently","New Text File","Open File...","&&New Text File","&&Save","Save &&As...","Save A&&ll","A&&uto Save","Re&&vert File","&&Close Editor","Go to &&File...","Create a new folder or directory"],"vs/workbench/contrib/files/browser/explorerViewlet":["View icon of the explorer view.","View icon of the open editors view.","&&Explorer","Open Folder","add a folder","Open Recent","You have not yet added a folder to the workspace.\\n{0}","You have not yet opened a folder.\\n{0}\\n{1}","Connected to remote.\\n{0}","You have not yet opened a folder.\\n{0}\\nOpening a folder will close all currently open editors. To keep them open, {1} instead.","You have not yet opened a folder.\\n{0}","Folders","Explorer","Explorer"],"vs/workbench/contrib/files/browser/files.contribution":["Text File Editor","Binary File Editor","Disable hot exit. A prompt will show when attempting to close a window with editors that have unsaved changes.","Hot exit will be triggered when the last window is closed on Windows/Linux or when the `workbench.action.quit` command is triggered (command palette, keybinding, menu). All windows without folders opened will be restored upon next launch. A list of previously opened windows with unsaved files can be accessed via `File > Open Recent > More...`","Hot exit will be triggered when the last window is closed on Windows/Linux or when the `workbench.action.quit` command is triggered (command palette, keybinding, menu), and also for any window with a folder opened regardless of whether it\'s the last window. All windows without folders opened will be restored upon next launch. A list of previously opened windows with unsaved files can be accessed via `File > Open Recent > More...`","[Hot Exit](https://aka.ms/vscode-hot-exit) controls whether unsaved files are remembered between sessions, allowing the save prompt when exiting the editor to be skipped.","Disable hot exit. A prompt will show when attempting to close a window with editors that have unsaved changes.","Hot exit will be triggered when the browser quits or the window or tab is closed.","[Hot Exit](https://aka.ms/vscode-hot-exit) controls whether unsaved files are remembered between sessions, allowing the save prompt when exiting the editor to be skipped.","Files","Configure [glob patterns](https://aka.ms/vscode-glob-patterns) for excluding files and folders. For example, the File Explorer decides which files and folders to show or hide based on this setting. Refer to the `#search.exclude#` setting to define search-specific excludes. Refer to the `#explorer.excludeGitIgnore#` setting for ignoring files based on your `.gitignore`.","Enable the pattern.","Disable the pattern.","The glob pattern to match file paths against. Set to true or false to enable or disable the pattern.","Additional check on the siblings of a matching file. Use \\\\$(basename) as variable for the matching file name.","Configure [glob patterns](https://aka.ms/vscode-glob-patterns) of file associations to languages (for example `\\"*.extension\\": \\"html\\"`). Patterns will match on the absolute path of a file if they contain a path separator and will match on the name of the file otherwise. These have precedence over the default associations of the languages installed.","The default character set encoding to use when reading and writing files. This setting can also be configured per language.","When enabled, the editor will attempt to guess the character set encoding when opening files. This setting can also be configured per language. Note, this setting is not respected by text search. Only {0} is respected.","LF","CRLF","Uses operating system specific end of line character.","The default end of line character.","Moves files/folders to the OS trash (recycle bin on Windows) when deleting. Disabling this will delete files/folders permanently.","When enabled, will trim trailing whitespace when saving a file.","When enabled, insert a final new line at the end of the file when saving it.","When enabled, will trim all new lines after the final new line at the end of the file when saving it.","An editor with changes is never automatically saved.","An editor with changes is automatically saved after the configured `#files.autoSaveDelay#`.","An editor with changes is automatically saved when the editor loses focus.","An editor with changes is automatically saved when the window loses focus.","Controls [auto save](https://code.visualstudio.com/docs/editor/codebasics#_save-auto-save) of editors that have unsaved changes.","Controls the delay in milliseconds after which an editor with unsaved changes is saved automatically. Only applies when `#files.autoSave#` is set to `{0}`.","Configure paths or [glob patterns](https://aka.ms/vscode-glob-patterns) to exclude from file watching. Paths can either be relative to the watched folder or absolute. Glob patterns are matched relative from the watched folder. When you experience the file watcher process consuming a lot of CPU, make sure to exclude large folders that are of less interest (such as build output folders).","Configure extra paths to watch for changes inside the workspace. By default, all workspace folders will be watched recursively, except for folders that are symbolic links. You can explicitly add absolute or relative paths to support watching folders that are symbolic links. Relative paths will be resolved to an absolute path using the currently opened workspace.","The default language identifier that is assigned to new files. If configured to `${activeEditorLanguage}`, will use the language identifier of the currently active text editor if any.","Configure paths or [glob patterns](https://aka.ms/vscode-glob-patterns) to mark as read-only. Glob patterns are always evaluated relative to the path of the workspace folder unless they are absolute paths. You can exclude matching paths via the `#files.readonlyExclude#` setting. Files from readonly file system providers will always be read-only independent of this setting.","Configure paths or [glob patterns](https://aka.ms/vscode-glob-patterns) to exclude from being marked as read-only if they match as a result of the `#files.readonlyInclude#` setting. Glob patterns are always evaluated relative to the path of the workspace folder unless they are absolute paths. Files from readonly file system providers will always be read-only independent of this setting.","Marks files as read-only when their file permissions indicate as such. This can be overridden via `#files.readonlyInclude#` and `#files.readonlyExclude#` settings.","Restore the undo stack when a file is reopened.","Will refuse to save and ask for resolving the save conflict manually.","Will resolve the save conflict by overwriting the file on disk with the changes in the editor.","A save conflict can occur when a file is saved to disk that was changed by another program in the meantime. To prevent data loss, the user is asked to compare the changes in the editor with the version on disk. This setting should only be changed if you frequently encounter save conflict errors and may result in data loss if used without caution.","Default path for file dialogs must be an absolute path (e.g. C:\\\\\\\\myFolder or /myFolder).","Default path for file dialogs, overriding user\'s home path. Only used in the absence of a context-specific path, such as most recently opened file or folder.","Enables the simple file dialog for opening and saving files and folders. The simple file dialog replaces the system file dialog when enabled.","Timeout in milliseconds after which file participants for create, rename, and delete are cancelled. Use `0` to disable participants.","Format a file on save. A formatter must be available, the file must not be saved after delay, and the editor must not be shutting down.","Format the whole file.","Format modifications (requires source control).","Will attempt to format modifications only (requires source control). If source control can\'t be used, then the whole file will be formatted.","Controls if format on save formats the whole file or only modifications. Only applies when `#editor.formatOnSave#` is enabled.","File Explorer","The initial maximum number of editors shown in the Open Editors pane. Exceeding this limit will show a scroll bar and allow resizing the pane to display more items.","The minimum number of editor slots pre-allocated in the Open Editors pane. If set to 0 the Open Editors pane will dynamically resize based on the number of editors.","Controls the sorting order of editors in the Open Editors pane.","Editors are ordered in the same order editor tabs are shown.","Editors are ordered alphabetically by tab name inside each editor group.","Editors are ordered alphabetically by full path inside each editor group.","Files will be revealed and selected.","Files will not be revealed and selected.","Files will not be scrolled into view, but will still be focused.","Controls whether the Explorer should automatically reveal and select files when opening them.","Configure paths or [glob patterns](https://aka.ms/vscode-glob-patterns) for excluding files and folders from being revealed and selected in the Explorer when they are opened. Glob patterns are always evaluated relative to the path of the workspace folder unless they are absolute paths.","The glob pattern to match file paths against. Set to true or false to enable or disable the pattern.","Additional check on the siblings of a matching file. Use $(basename) as variable for the matching file name.","Controls whether the Explorer should allow to move files and folders via drag and drop. This setting only effects drag and drop from inside the Explorer.","Controls whether the Explorer should ask for confirmation to move files and folders via drag and drop.","Controls whether the Explorer should ask for confirmation when deleting a file via the trash.","Controls whether the Explorer should support undoing file and folder operations.","Controls whether the Explorer should ask for confirmation when undoing.","Explorer will prompt before all undo operations.","Explorer will prompt before destructive undo operations.","Explorer will not prompt before undo operations when focused.","Controls whether the Explorer should expand multi-root workspaces containing only one folder during initialization","Files and folders are sorted by their names. Folders are displayed before files.","Files and folders are sorted by their names. Files are interwoven with folders.","Files and folders are sorted by their names. Files are displayed before folders.","Files and folders are grouped by extension type then sorted by their names. Folders are displayed before files.","Files and folders are sorted by last modified date in descending order. Folders are displayed before files.","Files and folders are sorted by their names. Folders are displayed before files. Files with nested children are displayed before other files.","Controls the property-based sorting of files and folders in the Explorer. When `#explorer.fileNesting.enabled#` is enabled, also controls sorting of nested files.","Uppercase and lowercase names are mixed together.","Uppercase names are grouped together before lowercase names.","Lowercase names are grouped together before uppercase names.","Names are sorted in Unicode order.","Controls the lexicographic sorting of file and folder names in the Explorer.","Controls whether file decorations should use colors.","Controls whether file decorations should use badges.","Appends the word \\"copy\\" at the end of the duplicated name potentially followed by a number.","Adds a number at the end of the duplicated name. If some number is already part of the name, tries to increase that number.","Disables incremental naming. If two files with the same name exist you will be prompted to overwrite the existing file.","Controls which naming strategy to use when giving a new name to a duplicated Explorer item on paste.","Controls whether the Explorer should render folders in a compact form. In such a form, single child folders will be compressed in a combined tree element. Useful for Java package structures, for example.","Use slash as path separation character.","Use backslash as path separation character.","Uses operating system specific path separation character.","The path separation character used when copying relative file paths.","Controls whether entries in .gitignore should be parsed and excluded from the Explorer. Similar to {0}.","Controls whether file nesting is enabled in the Explorer. File nesting allows for related files in a directory to be visually grouped together under a single parent file.","Controls whether file nests are automatically expanded. {0} must be set for this to take effect.","Controls nesting of files in the Explorer. {0} must be set for this to take effect. Each __Item__ represents a parent pattern and may contain a single `*` character that matches any string. Each __Value__ represents a comma separated list of the child patterns that should be shown nested under a given parent. Child patterns may contain several special tokens:\\n- `${capture}`: Matches the resolved value of the `*` from the parent pattern\\n- `${basename}`: Matches the parent file\'s basename, the `file` in `file.ts`\\n- `${extname}`: Matches the parent file\'s extension, the `ts` in `file.ts`\\n- `${dirname}`: Matches the parent file\'s directory name, the `src` in `src/file.ts`\\n- `*`:  Matches any string, may only be used once per child pattern","Each key pattern may contain a single `*` character which will match any string."],"vs/workbench/contrib/bulkEdit/browser/bulkEditService":["Made no edits","Made {0} text edits in {1} files","Made {0} text edits in one file","Made {0} text edits in {1} files, also created or deleted {2} files","Workspace Edit","Workspace Edit","Made no edits","Are you sure you want to close the window?","&&Close Window","Are you sure you want to change the workspace?","Change &&Workspace","Are you sure you want to reload the window?","&&Reload Window","Are you sure you want to quit?","&&Quit","\'{0}\' is in progress.","File operation","Controls if files that were part of a refactoring are saved automatically"],"vs/workbench/contrib/bulkEdit/browser/preview/bulkEdit.contribution":["Another refactoring is being previewed.","Press \'Continue\' to discard the previous refactoring and continue with the current refactoring.","&&Continue","View icon of the refactor preview view.","Apply Refactoring","Refactor Preview","Discard Refactoring","Refactor Preview","Toggle Change","Refactor Preview","Group Changes By File","Refactor Preview","Group Changes By Type","Refactor Preview","Group Changes By Type","Refactor Preview","Refactor Preview","Refactor Preview"],"vs/workbench/contrib/search/browser/search.contribution":["&&Search","Search files by name (append {0} to go to line or {1} to go to symbol)","Go to File","Type the name of a symbol to open.","Go to Symbol in Workspace","Search for text in your workspace files (experimental).","Search for Text (Experimental)","Search","Configure [glob patterns](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options) for excluding files and folders in fulltext searches and quick open. Inherits all glob patterns from the `#files.exclude#` setting.","The glob pattern to match file paths against. Set to true or false to enable or disable the pattern.","Additional check on the siblings of a matching file. Use \\\\$(basename) as variable for the matching file name.","Controls where new `Search: Find in Files` and `Find in Folder` operations occur: either in the search view, or in a search editor.","Search in the search view, either in the panel or side bars.","Search in an existing search editor if present, otherwise in a new search editor.","Search in a new search editor.","This setting is deprecated and now falls back on \\"search.usePCRE2\\".","Deprecated. Consider \\"search.usePCRE2\\" for advanced regex feature support.","The search cache is kept in the extension host which never shuts down, so this setting is no longer needed.","When enabled, the searchService process will be kept alive instead of being shut down after an hour of inactivity. This will keep the file search cache in memory.","Controls whether to use `.gitignore` and `.ignore` files when searching for files.","Controls whether to use your global gitignore file (for example, from `$HOME/.config/git/ignore`) when searching for files. Requires `#search.useIgnoreFiles#` to be enabled.","Controls whether to use `.gitignore` and `.ignore` files in parent directories when searching for files. Requires `#search.useIgnoreFiles#` to be enabled.","Whether to include results from a global symbol search in the file results for Quick Open.","Whether to include results from recently opened files in the file results for Quick Open.","History entries are sorted by relevance based on the filter value used. More relevant entries appear first.","History entries are sorted by recency. More recently opened entries appear first.","Controls sorting order of editor history in quick open when filtering.","Controls whether to follow symlinks while searching.","Search case-insensitively if the pattern is all lowercase, otherwise, search case-sensitively.","Controls whether the search view should read or modify the shared find clipboard on macOS.","Controls whether the search will be shown as a view in the sidebar or as a panel in the panel area for more horizontal space.","This setting is deprecated. You can drag the search icon to a new location instead.","Controls the maximum number of search results, this can be set to `null` (empty) to return unlimited results.","Files with less than 10 results are expanded. Others are collapsed.","Controls whether the search results will be collapsed or expanded.","Controls whether to open Replace Preview when selecting or replacing a match.","Controls whether to show line numbers for search results.","Whether to use the PCRE2 regex engine in text search. This enables using some advanced regex features like lookahead and backreferences. However, not all PCRE2 features are supported - only features that are also supported by JavaScript.","Deprecated. PCRE2 will be used automatically when using regex features that are only supported by PCRE2.","Position the actionbar to the right when the search view is narrow, and immediately after the content when the search view is wide.","Always position the actionbar to the right.","Controls the positioning of the actionbar on rows in the search view.","Search all files as you type.","Enable seeding search from the word nearest the cursor when the active editor has no selection.","Update the search query to the editor\'s selected text when focusing the search view. This happens either on click or when triggering the `workbench.views.search.focus` command.","When {0} is enabled, controls the timeout in milliseconds between a character being typed and the search starting. Has no effect when {0} is disabled.","Double-clicking selects the word under the cursor.","Double-clicking opens the result in the active editor group.","Double-clicking opens the result in the editor group to the side, creating one if it does not yet exist.","Configure effect of double-clicking a result in a search editor.","When enabled, new Search Editors will reuse the includes, excludes, and flags of the previously opened Search Editor.","The default number of surrounding context lines to use when creating new Search Editors. If using `#search.searchEditor.reusePriorSearchConfiguration#`, this can be set to `null` (empty) to use the prior Search Editor\'s configuration.","Results are sorted by folder and file names, in alphabetical order.","Results are sorted by file names ignoring folder order, in alphabetical order.","Results are sorted by file extensions, in alphabetical order.","Results are sorted by file last modified date, in descending order.","Results are sorted by count per file, in descending order.","Results are sorted by count per file, in ascending order.","Controls sorting order of search results.","Controls whether search file decorations should use colors.","Controls whether search file decorations should use badges.","Shows search results as a tree.","Shows search results as a list.","Controls the default search result view mode.","Show notebook editor rich content results for closed notebooks. Please refresh your search results after changing this setting.","Controls whether the last typed input to Quick Search should be restored when opening it the next time.","Search","Search"],"vs/workbench/contrib/searchEditor/browser/searchEditor.contribution":["Search Editor","Search Editor","Search Editor","Delete File Results","New Search Editor","Open Search Editor","Open New Search Editor to the Side","Open Results in Editor","Search Again","Focus Search Editor Input","Focus Search Editor Files to Include","Focus Search Editor Files to Exclude","Toggle Match Case","Toggle Match Whole Word","Toggle Use Regular Expression","Toggle Context Lines","Increase Context Lines","Decrease Context Lines","Select All Matches","Open New Search Editor"],"vs/workbench/contrib/sash/browser/sash.contribution":["Controls the feedback area size in pixels of the dragging area in between views/editors. Set it to a larger value if you feel it\'s hard to resize views using the mouse.","Controls the hover feedback delay in milliseconds of the dragging area in between views/editors."],"vs/workbench/contrib/scm/browser/scm.contribution":["View icon of the Source Control view.","Source Control","No source control providers registered.","None of the registered source control providers work in Restricted Mode.","Manage Workspace Trust","Source &&Control","Source Control","Show the diff decorations in all available locations.","Show the diff decorations only in the editor gutter.","Show the diff decorations only in the overview ruler.","Show the diff decorations only in the minimap.","Do not show the diff decorations.","Controls diff decorations in the editor.","Controls the width(px) of diff decorations in gutter (added & modified).","Show the diff decorator in the gutter at all times.","Show the diff decorator in the gutter only on hover.","Controls the visibility of the Source Control diff decorator in the gutter.","Show the inline diff Peek view on click.","Do nothing.","Controls the behavior of Source Control diff gutter decorations.","Controls whether a pattern is used for the diff decorations in gutter.","Use pattern for the diff decorations in gutter for added lines.","Use pattern for the diff decorations in gutter for modified lines.","Ignore leading and trailing whitespace.","Do not ignore leading and trailing whitespace.","Inherit from `diffEditor.ignoreTrimWhitespace`.","Controls whether leading and trailing whitespace is ignored in Source Control diff gutter decorations.","Controls whether inline actions are always visible in the Source Control view.","Show the sum of all Source Control Provider count badges.","Show the count badge of the focused Source Control Provider.","Disable the Source Control count badge.","Controls the count badge on the Source Control icon on the Activity Bar.","Hide Source Control Provider count badges.","Only show count badge for Source Control Provider when non-zero.","Show Source Control Provider count badges.","Controls the count badges on Source Control Provider headers. These headers appear in the \\"Source Control\\", and \\"Source Control Sync\\" views when there is more than one provider or when the {0} setting is enabled, as well as in the \\"Source Control Repositories\\" view.","Show the repository changes as a tree.","Show the repository changes as a list.","Controls the default Source Control repository view mode.","Sort the repository changes by file name.","Sort the repository changes by path.","Sort the repository changes by Source Control status.","Controls the default Source Control repository changes sort order when viewed as a list.","Controls whether the Source Control view should automatically reveal and select files when opening them.","Controls the font for the input message. Use `default` for the workbench user interface font family, `editor` for the `#editor.fontFamily#`\'s value, or a custom font family.","Controls the font size for the input message in pixels.","Controls whether repositories should always be visible in the Source Control view.","Repositories in the Source Control Repositories view are sorted by discovery time. Repositories in the Source Control view are sorted in the order that they were selected.","Repositories in the Source Control Repositories and Source Control views are sorted by repository name.","Repositories in the Source Control Repositories and Source Control views are sorted by repository path.","Controls the sort order of the repositories in the source control repositories view.","Controls how many repositories are visible in the Source Control Repositories section. Set to 0, to be able to manually resize the view.","Controls whether an action button can be shown in the Source Control view.","Controls whether the Source Control Sync view is shown.","Source Control: Accept Input","Source Control: View Next Commit","Source Control: View Previous Commit","Open in External Terminal","Open in Integrated Terminal","Source Control","Source Control Repositories","Source Control Sync"],"vs/workbench/contrib/search/browser/searchView":["Search was canceled before any results could be found - ","Toggle Search Details","files to include","e.g. *.ts, src/**/include","files to exclude","e.g. *.ts, src/**/exclude","Replace All","&&Replace","Replaced {0} occurrence across {1} file with \'{2}\'.","Replaced {0} occurrence across {1} file.","Replaced {0} occurrence across {1} files with \'{2}\'.","Replaced {0} occurrence across {1} files.","Replaced {0} occurrences across {1} file with \'{2}\'.","Replaced {0} occurrences across {1} file.","Replaced {0} occurrences across {1} files with \'{2}\'.","Replaced {0} occurrences across {1} files.","Replace {0} occurrence across {1} file with \'{2}\'?","Replace {0} occurrence across {1} file?","Replace {0} occurrence across {1} files with \'{2}\'?","Replace {0} occurrence across {1} files?","Replace {0} occurrences across {1} file with \'{2}\'?","Replace {0} occurrences across {1} file?","Replace {0} occurrences across {1} files with \'{2}\'?","Replace {0} occurrences across {1} files?","Empty Search","Search path not found: {0}","No results found in open editors matching \'{0}\' excluding \'{1}\' - ","No results found in open editors matching \'{0}\' - ","No results found in open editors excluding \'{0}\' - ","No results found in open editors. Review your settings for configured exclusions and check your gitignore files - ","No results found in \'{0}\' excluding \'{1}\' - ","No results found in \'{0}\' - ","No results found excluding \'{0}\' - ","No results found. Review your settings for configured exclusions and check your gitignore files - ","Search again","Search again in all files","Open Settings","Learn More","Search returned {0} results in {1} files","The result set only contains a subset of all matches. Be more specific in your search to narrow down the results."," - Search: {0}","exclude settings and ignore files are disabled","enable","Use Exclude Settings and Ignore Files","searching only in open files","disable","Search in entire workspace","Copy current search results to an editor","Open in editor","{0} result in {1} file","{0} result in {1} files","{0} results in {1} file","{0} results in {1} files","You have not opened or specified a folder. Only open files are currently searched - ","Open Folder"],"vs/workbench/contrib/debug/browser/debugEditorContribution":["Color for the debug inline value text.","Color for the debug inline value background."],"vs/workbench/contrib/debug/browser/debug.contribution":["Debug","Type the name of a launch configuration to run.","Start Debugging","Type the name of a debug console to open.","Show All Debug Consoles","Terminate Thread","Restart Frame","Copy Call Stack","View Binary Data","Set Value","Copy Value","Copy as Expression","Add to Watch","Break on Value Read","Break on Value Change","Break on Value Access","Edit Expression","Set Value","Copy Value","View Binary Data","Remove Expression","&&Run","&&Start Debugging","Run &&Without Debugging","&&Stop Debugging","&&Restart Debugging","A&&dd Configuration...","Step &&Over","Step &&Into","Step O&&ut","&&Continue","Inline Breakp&&oint","&&New Breakpoint","&&Install Additional Debuggers...","De&&bug Console","&&Run","Disassembly","Debug","Allow setting breakpoints in any file.","Automatically open the explorer view at the end of a debug session.","Show variable values inline in editor while debugging.","Always show variable values inline in editor while debugging.","Never show variable values inline in editor while debugging.","Show variable values inline in editor while debugging when the language supports inline value locations.","Controls the location of the debug toolbar. Either `floating` in all views, `docked` in the debug view, `commandCenter` (requires `{0}`), or `hidden`.","Show debug toolbar in all views.","Show debug toolbar only in debug views.","`(Experimental)` Show debug toolbar in the command center.","Do not show debug toolbar.","Never show debug in Status bar","Always show debug in Status bar","Show debug in Status bar only after debug was started for the first time","Controls when the debug Status bar should be visible.","Controls if the Debug Console should be automatically closed when the debug session ends.","Before starting a new debug session in an integrated or external terminal, clear the terminal.","Controls when the debug view should open.","Controls whether the debug sub-sessions are shown in the debug tool bar. When this setting is false the stop command on a sub-session will also stop the parent session.","Controls the font size in pixels in the Debug Console.","Controls the font family in the Debug Console.","Controls the line height in pixels in the Debug Console. Use 0 to compute the line height from the font size.","Controls if the lines should wrap in the Debug Console.","Controls if the Debug Console should suggest previously typed input.","Controls if the Debug Console should collapse identical lines and show a number of occurrences with a badge.","Controls whether suggestions should be accepted on Enter in the Debug Console. Enter is also used to evaluate whatever is typed in the Debug Console.","Global debug launch configuration. Should be used as an alternative to \'launch.json\' that is shared across workspaces.","Controls whether the workbench window should be focused when the debugger breaks.","Controls whether the editor should be focused when the debugger breaks.","Ignore task errors and start debugging.","Show the Problems view and do not start debugging.","Prompt user.","Cancel debugging.","Controls what to do when errors are encountered after running a preLaunchTask.","Controls whether breakpoints should be shown in the overview ruler.","Controls whether inline breakpoints candidate decorations should be shown in the editor while debugging.","Controls what editors to save before starting a debug session.","Save all editors in the active group before starting a debug session.","Save all editors in the active group except untitled ones before starting a debug session.","Don\'t save any editors before starting a debug session.","Controls whether to confirm when the window closes if there are active debug sessions.","Never confirm.","Always confirm if there are debug sessions.","Show Source Code in Disassembly View.","Automatically show values for variables that are lazily resolved by the debugger, such as getters.","Color of the Status bar when debugger is active.","Hide \'Start Debugging\' control in title bar of \'Run and Debug\' view while debugging is active. Only relevant when `{0}` is not `docked`.","Terminate Thread","Focus on Debug Console View","Jump to Cursor","Set Next Statement","Inline Breakpoint","Run or Debug...","Debug Console","Debug Console","Run and Debug","Variables","Watch","Call Stack","Breakpoints","Loaded Scripts"],"vs/workbench/contrib/debug/browser/callStackEditorContribution":["Background color for the highlight of line at the top stack frame position.","Background color for the highlight of line at focused stack frame position."],"vs/workbench/contrib/debug/browser/breakpointEditorContribution":["Logpoint","Breakpoint","This {0} has a {1} that will get lost on remove. Consider enabling the {0} instead.","message","condition","This {0} has a {1} that will get lost on remove. Consider disabling the {0} instead.","message","condition","&&Remove {0}","{0} {1}","&&Disable","&&Enable","Logpoint","Breakpoint","Remove {0}","Edit {0}...","Disable {0}","Enable {0}","Remove Breakpoints","Remove Inline Breakpoint on Column {0}","Remove Line Breakpoint","Edit Breakpoints","Edit Inline Breakpoint on Column {0}","Edit Line Breakpoint","Enable/Disable Breakpoints","Disable Inline Breakpoint on Column {0}","Disable Line Breakpoint","Enable Inline Breakpoint on Column {0}","Enable Line Breakpoint","Add Breakpoint","Add Conditional Breakpoint...","Add Logpoint...","Run to Line","Icon color for breakpoints.","Icon color for disabled breakpoints.","Icon color for unverified breakpoints.","Icon color for the current breakpoint stack frame.","Icon color for all breakpoint stack frames."],"vs/workbench/contrib/debug/browser/debugViewlet":["Open &&Configurations","Select a workspace folder to create a launch.json file in or add it to the workspace config file","Debug Console","Start Additional Session"],"vs/workbench/contrib/mergeEditor/browser/mergeEditor.contribution":["Merge Editor","Uses the legacy diffing algorithm.","Uses the advanced diffing algorithm."],"vs/workbench/contrib/debug/browser/repl":["Filter (e.g. text, !exclude)","Showing {0} of {1}","Debug Console","Please start a debug session to evaluate expressions","REPL Accept Input","REPL Focus Content to Filter","Debug: Console Copy All","Select Debug Console","Clear Console","Collapse All","Paste","Copy All","Copy"],"vs/workbench/contrib/markers/browser/markers.contribution":["View icon of the markers view.","&&Problems","View as Tree","View as Table","Toggle Errors","Problems","Show Errors","Toggle Warnings","Problems","Show Warnings","Toggle Infos","Problems","Show Infos","Toggle Active File","Problems","Show Active File Only","Toggle Excluded Files","Problems","Hide Excluded Files","Copy","Copy Message","Copy Message","Focus problems view","Focus problems filter","Show message in multiple lines","Problems","Show message in single line","Problems","Clear filters text","Problems","Collapse All","Problems","Errors: {0}","Warnings: {0}","Infos: {0}","No Problems","10K+","Total {0} Problems"],"vs/workbench/contrib/commands/common/commands.contribution":["Run Commands","Run several commands","Commands to run","\'runCommands\' has received an argument with incorrect type. Please, review the argument passed to the command.","\'runCommands\' has not received commands to run. Did you forget to pass commands in the \'runCommands\' argument?"],"vs/workbench/contrib/url/browser/url.contribution":["Open URL","URL to open","When enabled, trusted domain prompts will appear when opening links in trusted workspaces."],"vs/workbench/contrib/comments/browser/comments.contribution":["Comments","Controls when the comments panel should open.","This setting is deprecated in favor of `comments.openView`.","The comments view will never be opened.","The comments view will open when a file with comments is active.","If the comments view has not been opened yet during this session it will open the first time during a session that a file with comments is active.","If the comments view has not been opened yet during this session and the comment is not resolved, it will open the first time during a session that a file with comments is active.","Controls when the comments view should open.","Determines if relative time will be used in comment timestamps (ex. \'1 day ago\').","Controls the visibility of the comments bar and comment threads in editors that have commenting ranges and comments. Comments are still accessible via the Comments view and will cause commenting to be toggled on in the same way running the command \\"Comments: Toggle Editor Commenting\\" toggles comments.","Controls whether the comments widget scrolls or expands.","Controls whether the comment thread should collapse when the thread is resolved.","The editor contains commentable range(s). Some useful commands include:","This widget contains a text area, for composition of new comments, and actions, that can be tabbed to once tab moves focus mode has been enabled ({0}).","This widget contains a text area, for composition of new comments, and actions, that can be tabbed to once tab moves focus mode has been enabled with the command Toggle Tab Key Moves Focus, which is currently not triggerable via keybinding.","Some useful comment commands include:","- Dismiss Comment (Escape)","- Go to Next Commenting Range ({0})","- Go to Next Commenting Range, which is currently not triggerable via keybinding.","- Go to Previous Commenting Range ({0})","- Go to Previous Commenting Range, which is currently not triggerable via keybinding.","- Go to Next Comment Thread ({0})","- Go to Next Comment Thread, which is currently not triggerable via keybinding.","- Go to Previous Comment Thread ({0})","- Go to Previous Comment Thread, which is currently not triggerable via keybinding.","- Add Comment ({0})","- Add Comment on Current Selection, which is currently not triggerable via keybinding.","- Submit Comment ({0})","- Submit Comment, accessible via tabbing, as it\'s currently not triggerable with a keybinding."],"vs/workbench/contrib/webviewPanel/browser/webviewPanel.contribution":["webview editor"],"vs/workbench/contrib/webview/browser/webview.contribution":["Cut","Copy","Paste"],"vs/workbench/contrib/extensions/browser/extensionsViewlet":["Remote","Installed","Install Local Extensions in \'{0}\'...","Install Remote Extensions Locally...","Search Extensions in Marketplace","1 extension found in the {0} section.","1 extension found.","{0} extensions found in the {1} section.","{0} extensions found.","Marketplace returned \'ECONNREFUSED\'. Please check the \'http.proxy\' setting.","Open User Settings","{0} requires update","{0} require update","{0} requires reload","{0} require reload","We have uninstalled \'{0}\' which was reported to be problematic.","Reload Now","Popular","Recommended","Enabled","Disabled","Marketplace","Installed","Recently Updated","Enabled","Disabled","Available Updates","Builtin","Workspace Unsupported","Workspace Recommendations","Other Recommendations","Features","Themes","Programming Languages","Disabled in Restricted Mode","Limited in Restricted Mode","Disabled in Virtual Workspaces","Limited in Virtual Workspaces","Deprecated"],"vs/workbench/contrib/output/browser/outputView":["{0} - Output","Output channel for \'{0}\'","Output","Output panel"],"vs/workbench/contrib/output/browser/output.contribution":["View icon of the output view.","&&Output","Switch Output","Switch Output","Select Output Channel","Turn Auto Scrolling Off","Turn Auto Scrolling On","Extension Logs","Select Log","The id of the log file to open, for example `\\"window\\"`. Currently the best way to get this is to get the ID by checking the `workbench.action.output.show.<id>` commands","Select Log File","Output","Enable/disable the ability of smart scrolling in the output view. Smart scrolling allows you to lock scrolling automatically when you click in the output view and unlocks when you click in the last line.","Output","Output","Show Output Channels...","Output","Clear Output","Toggle Auto Scrolling","Open Log Output File","Show Logs...","Open Log File..."],"vs/workbench/contrib/externalTerminal/browser/externalTerminal.contribution":["Open in Integrated Terminal","Open in External Terminal","Open in Windows Terminal"],"vs/workbench/contrib/relauncher/browser/relauncher.contribution":["A setting has changed that requires a restart to take effect.","A setting has changed that requires a reload to take effect.","Press the restart button to restart {0} and enable the setting.","Press the reload button to reload {0} and enable the setting.","&&Restart","&&Reload","Restarting extension host due to a workspace folder change."],"vs/workbench/contrib/extensions/browser/extensions.contribution":["Press Enter to manage extensions.","Manage Extensions","Extension","Extensions","E&&xtensions","Extensions","All Extensions","Only Enabled Extensions","None","Download and install updates automatically for all extensions except for those updates are ignored.","Download and install updates automatically only for enabled extensions except for those updates are ignored. Disabled extensions are not updated automatically.","Extensions are not automatically updated.","Controls the automatic update behavior of extensions. The updates are fetched from a Microsoft online service.","When enabled, automatically checks extensions for updates. If an extension has an update, it is marked as outdated in the Extensions view. The updates are fetched from a Microsoft online service.","When enabled, the notifications for extension recommendations will not be shown.","This setting is deprecated. Use extensions.ignoreRecommendations setting to control recommendation notifications. Use Extensions view\'s visibility actions to hide Recommended view by default.","When enabled, editors with extension details will be automatically closed upon navigating away from the Extensions View.","When an extension is listed here, a confirmation prompt will not be shown when that extension handles a URI.","The Web Worker Extension Host will always be launched.","The Web Worker Extension Host will never be launched.","The Web Worker Extension Host will be launched when a web extension needs it.","Enable web worker extension host.","Override the virtual workspaces support of an extension.","Configure an extension to execute in a different extension host process.","Override the untrusted workspace support of an extension. Extensions using `true` will always be enabled. Extensions using `limited` will always be enabled, and the extension will hide functionality that requires trust. Extensions using `false` will only be enabled only when the workspace is trusted.","Extension will always be enabled.","Extension will only be enabled only when the workspace is trusted.","Extension will always be enabled, and the extension will hide functionality requiring trust.","Defines the untrusted workspace support setting for the extension.","Defines the version of the extension for which the override should be applied. If not specified, the override will be applied independent of the extension version.","When enabled, extensions which declare the `onStartupFinished` activation event will be activated after a timeout.","Extension \'{0}\' not found.","Install the given extension","Extension id or VSIX resource uri","When enabled, VS Code installs only newly added extensions from the extension pack VSIX. This option is considered only while installing a VSIX.","When enabled, VS Code installs the pre-release version of the extension if available.","When enabled, VS Code do not sync this extension when Settings Sync is on.","Context for the installation. This is a JSON object that can be used to pass any information to the installation handlers. i.e. `{skipWalkthrough: true}` will skip opening the walkthrough upon install.","Extension \'{0}\' not found.","Uninstall the given extension","Id of the extension to uninstall","Extension id required.","Extension \'{0}\' is not installed. Make sure you use the full extension ID, including the publisher, e.g.: ms-dotnettools.csharp.","Extension \'{0}\' is a Built-in extension and cannot be installed","Search for a specific extension","Query to use in search","Type the name of an extension to install or search.","Install or Search Extensions","&&Extensions","Extensions","Focus on Extensions View","Install Extensions","Keymaps","Migrate Keyboard Shortcuts from...","Language Extensions","Check for Extension Updates","All extensions are up to date.","Auto Update Extensions","All Extensions","Only Enabled Extensions","None","Update All Extensions","Disable Auto Update for All Extensions","Enable Auto Update for All Extensions","Enable All Extensions","Enable All Extensions for this Workspace","Disable All Installed Extensions","Disable All Installed Extensions for this Workspace","Install from VSIX...","Install from VSIX","&&Install","Install Extension VSIX","Completed installing {0} extension from VSIX. Please reload Visual Studio Code to enable it.","Completed installing {0} extension from VSIX.","Reload Now","Install Extension from Location...","Install Extension from Location","Install","Location of the web extension","Install Extension from Location","Filter Extensions...","Show Featured Extensions","Featured","Show Popular Extensions","Most Popular","Show Recommended Extensions","Recommended","Show Recently Published Extensions","Recently Published","Category","Show Built-in Extensions","Built-in","Show Extension Updates","Updates","Show Extensions Unsupported By Workspace","Workspace Unsupported","Show Enabled Extensions","Enabled","Show Disabled Extensions","Disabled","Sort By","Install Count","Rating","Name","Published Date","Updated Date","Clear Extensions Search Results","Refresh","Install Workspace Recommended Extensions","Show Pre-Release Version","Show Release Version","Copy","Name: {0}","Id: {0}","Description: {0}","Version: {0}","Publisher: {0}","VS Marketplace Link: {0}","Copy Extension ID","Extension Settings","Extension Keyboard Shortcuts","Apply Extension to all Profiles","Sync This Extension","Ignore Recommendation","Undo Ignored Recommendation","Add to Workspace Recommendations","Remove from Workspace Recommendations","Add Extension to Workspace Recommendations","Extensions","Add Extension to Workspace Folder Recommendations","Extensions","Add Extension to Workspace Ignored Recommendations","Extensions","Add Extension to Workspace Folder Ignored Recommendations","Extensions","Extensions"],"vs/workbench/contrib/tasks/browser/task.contribution":["Building...","Running Tasks","{0} running tasks","Show Running Tasks","&&Run Task...","Run &&Build Task...","Show Runnin&&g Tasks...","R&&estart Running Task...","&&Terminate Task...","&&Configure Tasks...","Configure De&&fault Build Task...","Open Workspace Tasks","Show Task Log","Run Task","Rerun Last Task","Restart Running Task","Show Running Tasks","Terminate Task","Run Build Task","Run Test Task","Configure Default Build Task","Configure Default Test Task","Open User Tasks","User Tasks","Type the name of a task to run.","Run Task","Tasks","Configures whether to show the problem matcher prompt when running a task. Set to `true` to never prompt, or use a dictionary of task types to turn off prompting only for specific task types.","Sets problem matcher prompting behavior for all tasks.","An object containing task type-boolean pairs to never prompt for problem matchers on.","Controls enablement of `provideTasks` for all task provider extension. If the Tasks: Run Task command is slow, disabling auto detect for task providers may help. Individual extensions may also provide settings that disable auto detection.","Configures whether a warning is shown when a provider is slow","Sets the slow provider warning for all tasks.","An array of task types to never show the slow provider warning.","Controls the number of recent items tracked in task quick open dialog.","Controls whether to show the task detail for tasks that have a detail in task quick picks, such as Run Task.","Controls whether the task quick pick is skipped when there is only one task to pick from.","Causes the Tasks: Run Task command to use the slower \\"show all\\" behavior instead of the faster two level picker where tasks are grouped by provider.","Always","Never","Enable automatic tasks - note that tasks won\'t run in an untrusted workspace.","On window reload, reconnect to tasks that have problem matchers.","Save all dirty editors before running a task.","Always saves all editors before running.","Never saves editors before running.","Prompts whether to save editors before running."],"vs/workbench/contrib/remote/common/remote.contribution":["Workspace does not exist","Please select another workspace to open.","&&Open Workspace...","Connection: Trigger Reconnect","Connection: Pause socket writing","UI extension kind. In a remote window, such extensions are enabled only when available on the local machine.","Workspace extension kind. In a remote window, such extensions are enabled only when available on the remote.","Remote","Override the kind of an extension. `ui` extensions are installed and run on the local machine while `workspace` extensions are run on the remote. By overriding an extension\'s default kind using this setting, you specify if that extension should be installed and enabled locally or remotely.","Restores the ports you forwarded in a workspace.","When enabled, new running processes are detected and ports that they listen on are automatically forwarded. Disabling this setting will not prevent all ports from being forwarded. Even when disabled, extensions will still be able to cause ports to be forwarded, and opening some URLs will still cause ports to forwarded.","Sets the source from which ports are automatically forwarded when {0} is true. On Windows and Mac remotes, the `process` and `hybrid` options have no effect and `output` will be used. Requires a reload to take effect.","Ports will be automatically forwarded when discovered by watching for processes that are started and include a port.","Ports will be automatically forwarded when discovered by reading terminal and debug output. Not all processes that use ports will print to the integrated terminal or debug console, so some ports will be missed. Ports forwarded based on output will not be \\"un-forwarded\\" until reload or until the port is closed by the user in the Ports view.","Ports will be automatically forwarded when discovered by reading terminal and debug output. Not all processes that use ports will print to the integrated terminal or debug console, so some ports will be missed. Ports will be \\"un-forwarded\\" by watching for processes that listen on that port to be terminated.","Controls whether local URLs with a port will be forwarded when opened from the terminal and the debug console.","A port, range of ports (ex. \\"40000-55000\\"), host and port (ex. \\"db:1234\\"), or regular expression (ex. \\".+\\\\\\\\/server.js\\").  For a port number or range, the attributes will apply to that port number or range of port numbers. Attributes which use a regular expression will apply to ports whose associated process command line matches the expression.","Shows a notification when a port is automatically forwarded.","Opens the browser when the port is automatically forwarded. Depending on your settings, this could open an embedded browser.","Opens the browser when the port is automatically forwarded, but only the first time the port is forward during a session. Depending on your settings, this could open an embedded browser.","Opens a preview in the same window when the port is automatically forwarded.","Shows no notification and takes no action when this port is automatically forwarded.","This port will not be automatically forwarded.","Defines the action that occurs when the port is discovered for automatic forwarding","Automatically prompt for elevation (if needed) when this port is forwarded. Elevate is required if the local port is a privileged port.","Label that will be shown in the UI for this port.","Application","When true, a modal dialog will show if the chosen local port isn\'t used for forwarding.","The protocol to use when forwarding this port.","Application","Set properties that are applied when a specific port number is forwarded. For example:\\n\\n```\\n\\"3000\\": {\\n  \\"label\\": \\"Application\\"\\n},\\n\\"40000-55000\\": {\\n  \\"onAutoForward\\": \\"ignore\\"\\n},\\n\\".+\\\\\\\\/server.js\\": {\\n \\"onAutoForward\\": \\"openPreview\\"\\n}\\n```","Must be a port number, range of port numbers, or regular expression.","Shows a notification when a port is automatically forwarded.","Opens the browser when the port is automatically forwarded. Depending on your settings, this could open an embedded browser.","Opens a preview in the same window when the port is automatically forwarded.","Shows no notification and takes no action when this port is automatically forwarded.","This port will not be automatically forwarded.","Defines the action that occurs when the port is discovered for automatic forwarding","Automatically prompt for elevation (if needed) when this port is forwarded. Elevate is required if the local port is a privileged port.","Label that will be shown in the UI for this port.","Application","When true, a modal dialog will show if the chosen local port isn\'t used for forwarding.","The protocol to use when forwarding this port.","Set default properties that are applied to all ports that don\'t get properties from the setting {0}. For example:\\n\\n```\\n{\\n  \\"onAutoForward\\": \\"ignore\\"\\n}\\n```","Specifies the local host name that will be used for port forwarding."],"vs/workbench/contrib/snippets/browser/snippets.contribution":["Controls if surround-with-snippets or file template snippets show as Code Actions.","The prefix to use when selecting the snippet in intellisense","The snippet is meant to populate or replace a whole file","The snippet content. Use `$1`, `${1:defaultText}` to define cursor positions, use `$0` for the final cursor position. Insert variable values with `${varName}` and `${varName:defaultText}`, e.g. `This is file: $TM_FILENAME`.","The snippet description.","Empty snippet","User snippet configuration","Empty snippet","User snippet configuration","A list of language names to which this snippet applies, e.g. \'typescript,javascript\'."],"vs/workbench/contrib/keybindings/browser/keybindings.contribution":["Toggle Keyboard Shortcuts Troubleshooting"],"vs/workbench/contrib/folding/browser/folding.contribution":["All","All active folding range providers","Defines a default folding range provider that takes precedence over all other folding range providers. Must be the identifier of an extension contributing a folding range provider."],"vs/workbench/contrib/limitIndicator/browser/limitIndicator.contribution":["Configure","Color Decorator Status","Color Decorators","Color Decorators","Folding Status","Folding Ranges","Folding","only {0} shown for performance reasons"],"vs/workbench/contrib/inlayHints/browser/inlayHintsAccessibilty":["Whether the current line and its inlay hints are currently focused","Code with Inlay Hint Information","Read Line With Inline Hints","Stop Inlay Hints Reading"],"vs/workbench/contrib/update/browser/update.contribution":["Show Release Notes","Show &&Release Notes","This version of {0} does not have release notes online","Check for Updates...","Download Update","Install Update","Restart to Update","Download {0}","Apply Update...","Apply Update","&&Update"],"vs/workbench/contrib/surveys/browser/nps.contribution":["Do you mind taking a quick feedback survey?","Take Survey","Remind Me Later","Don\'t Show Again"],"vs/workbench/contrib/surveys/browser/ces.contribution":["Got a moment to help the VS Code team? Please tell us about your experience with VS Code so far.","Give Feedback","Remind Me Later"],"vs/workbench/contrib/themes/browser/themes.contribution":["Icon for the \'Manage\' action in the theme selection quick pick.","Type to Search More. Select to Install. Up/Down Keys to Preview","Error while searching for themes: {0}","This will install extension \'{0}\' published by \'{1}\'. Do you want to continue?","OK","Installing Extension {0}...","Color Theme","Install Additional Color Themes...","Browse Additional Color Themes...","Select Color Theme (Up/Down Keys to Preview)","light themes","dark themes","high contrast themes","File Icon Theme","Install Additional File Icon Themes...","Select File Icon Theme (Up/Down Keys to Preview)","file icon themes","None","Disable File Icons","Product Icon Theme","Install Additional Product Icon Themes...","Browse Additional Product Icon Themes...","Select Product Icon Theme (Up/Down Keys to Preview)","product icon themes","Default","Manage Extension","Generate Color Theme From Current Settings","Toggle between Light/Dark Themes","Browse Color Themes in Marketplace","Themes","&&Theme","Color Theme","File Icon Theme","Product Icon Theme","Keep New Theme","Browse Themes","Revert","Visual Studio Code now ships with a new default theme \'{0}\'. If you prefer, you can switch back to the old theme or try one of the many other color themes available.","Try New Theme","Cancel","Visual Studio Code now ships with a new default theme \'{0}\'. Do you want to give it a try?"],"vs/workbench/contrib/surveys/browser/languageSurveys.contribution":["Help us improve our support for {0}","Take Short Survey","Remind Me Later","Don\'t Show Again"],"vs/workbench/contrib/welcomeGettingStarted/browser/gettingStarted.contribution":["Welcome","Welcome","Welcome","Go Back","Mark Step Complete","Mark Step Incomplete","Open Walkthrough...","Select a walkthrough to open","The platform of the current workspace, which in remote or serverless contexts may be different from the platform of the UI","When enabled, an extension\'s walkthrough will open upon install of the extension.","Start without an editor.","Open the Welcome page, with content to aid in getting started with VS Code and extensions.","Open the README when opening a folder that contains one, fallback to \'welcomePage\' otherwise. Note: This is only observed as a global configuration, it will be ignored if set in a workspace or folder configuration.","Open a new untitled text file (only applies when opening an empty window).","Open the Welcome page when opening an empty workbench.","Controls which editor is shown at startup, if none are restored from the previous session.","Deprecated, use the global `workbench.reduceMotion`.","When enabled, reduce motion in welcome page."],"vs/workbench/contrib/welcomeWalkthrough/browser/walkThrough.contribution":["Playground","Editor Playgrou&&nd"],"vs/workbench/contrib/welcomeViews/common/newFile.contribution":["Built-In","Create","New File...","New File...","Select File Type or Enter File Name...","File","Notebook","Configure Keybinding","Create New File ({0})","Text File"],"vs/workbench/contrib/callHierarchy/browser/callHierarchy.contribution":["Whether a call hierarchy provider is available","Whether call hierarchy peek is currently showing","Whether call hierarchy shows incoming or outgoing calls","No results","Failed to show call hierarchy","Peek Call Hierarchy","Show Incoming Calls","Icon for incoming calls in the call hierarchy view.","Show Outgoing Calls","Icon for outgoing calls in the call hierarchy view.","Refocus Call Hierarchy","Close"],"vs/workbench/contrib/typeHierarchy/browser/typeHierarchy.contribution":["Whether a type hierarchy provider is available","Whether type hierarchy peek is currently showing","whether type hierarchy shows super types or subtypes","No results","Failed to show type hierarchy","Peek Type Hierarchy","Show Supertypes","Show Subtypes","Refocus Type Hierarchy","Close"],"vs/workbench/contrib/codeEditor/browser/outline/documentSymbolsOutline":["Document Symbols"],"vs/workbench/contrib/outline/browser/outline.contribution":["View icon of the outline view.","Outline","Render Outline elements with icons.","Controls whether Outline items are collapsed or expanded.","Collapse all items.","Expand all items.","Show errors and warnings on Outline elements.","Use colors for errors and warnings on Outline elements.","Use badges for errors and warnings on Outline elements.","When enabled, Outline shows `file`-symbols.","When enabled, Outline shows `module`-symbols.","When enabled, Outline shows `namespace`-symbols.","When enabled, Outline shows `package`-symbols.","When enabled, Outline shows `class`-symbols.","When enabled, Outline shows `method`-symbols.","When enabled, Outline shows `property`-symbols.","When enabled, Outline shows `field`-symbols.","When enabled, Outline shows `constructor`-symbols.","When enabled, Outline shows `enum`-symbols.","When enabled, Outline shows `interface`-symbols.","When enabled, Outline shows `function`-symbols.","When enabled, Outline shows `variable`-symbols.","When enabled, Outline shows `constant`-symbols.","When enabled, Outline shows `string`-symbols.","When enabled, Outline shows `number`-symbols.","When enabled, Outline shows `boolean`-symbols.","When enabled, Outline shows `array`-symbols.","When enabled, Outline shows `object`-symbols.","When enabled, Outline shows `key`-symbols.","When enabled, Outline shows `null`-symbols.","When enabled, Outline shows `enumMember`-symbols.","When enabled, Outline shows `struct`-symbols.","When enabled, Outline shows `event`-symbols.","When enabled, Outline shows `operator`-symbols.","When enabled, Outline shows `typeParameter`-symbols.","Outline"],"vs/workbench/contrib/languageDetection/browser/languageDetection.contribution":["Accept Detected Language: {0}","Language Detection","Change to Detected Language: {0}","Detect Language from Content","Unable to detect editor language"],"vs/workbench/contrib/languageStatus/browser/languageStatus.contribution":["Editor Language Status","Editor Language Status: {0}","Add to Status Bar","Remove from Status Bar","{0}, {1}","{0}","{0} (Language Status)","Reset Language Status Interaction Counter"],"vs/workbench/contrib/userDataSync/browser/userDataSync.contribution":["Settings sync is suspended temporarily because the current device is making too many requests. Please reload {0} to resume.","Settings sync is suspended temporarily because the current device is making too many requests. Please restart {0} to resume.","Show Log","Reload","Restart","Operation Id: {0}","Settings sync is disabled because the current device is making too many requests. Please wait for 10 minutes and turn on sync.","Settings Sync. Operation Id: {0}","Show Log"],"vs/workbench/contrib/timeline/browser/timeline.contribution":["View icon of the timeline view.","Icon for the open timeline action.","Timeline","The number of items to show in the Timeline view by default and when loading more items. Setting to `null` (the default) will automatically choose a page size based on the visible area of the Timeline view.","Experimental. Controls whether the Timeline view will load the next page of items when you scroll to the end of the list.","Open Timeline","Icon for the filter timeline action.","Filter Timeline"],"vs/workbench/contrib/editSessions/browser/editSessions.contribution":["Continue Working On...","Open In Local Folder","Show Log","Install additional development environment options","Resuming working changes...","Storing current working changes...","Check for pending cloud changes","Storing working changes...","Show Cloud Changes","Storing your working changes...","Resume Latest Changes from Cloud","Resume Changes from Serialized Data","Store Working Changes in Cloud","Storing working changes...","Checking for pending cloud changes...","There are no changes to resume from the cloud.","Could not resume changes from the cloud for ID {0}.","Please upgrade to a newer version of {0} to resume your working changes from the cloud.","Resuming your working changes from the cloud will overwrite the following {0} files. Do you want to proceed?","Resuming your working changes from the cloud will overwrite {0}. Do you want to proceed?","Failed to resume your working changes from the cloud.","You have pending working changes in the cloud for this workspace. Would you like to resume them?","Resume","Your working changes exceed the size limit and cannot be stored.","Skipped storing working changes in the cloud as there are no edits to store.","Your working changes exceed the size limit and cannot be stored.","Your working changes cannot be stored.","Select whether to bring your working changes with you","Yes, continue with my working changes","No, continue without my working changes","Select a local folder to continue working in","Continue Working in Existing Local Folder","Select a development environment to continue working on {0} in","Open in Local Folder","Built-in","Learn More","Contributes options for continuing the current edit session in a different environment","Identifier of the command to execute. The command must be declared in the \'commands\'-section and return a URI representing a different environment where the current edit session can be continued.","Group into which this item belongs.","A fully qualified name for this item which is used for display in menus.","The url, or a command that returns the url, to the option\'s documentation page.","Group into which this item belongs in the remote indicator.","Condition which must be true to show this item.","Automatically store current working changes in the cloud on window close.","Never attempt to automatically store working changes in the cloud.","Controls whether to automatically store available working changes in the cloud for the current workspace. This setting has no effect in the web.","Automatically resume available working changes from the cloud on window reload.","Never attempt to resume working changes from the cloud.","Controls whether to automatically resume available working changes stored in the cloud for the current workspace.","Prompt the user to sign in to store working changes in the cloud with Continue Working On.","Do not store working changes in the cloud with Continue Working On unless the user has already turned on Cloud Changes.","Controls whether to prompt the user to store working changes in the cloud when using Continue Working On.","Controls whether to surface cloud changes which partially match the current session."],"vs/workbench/contrib/workspaces/browser/workspaces.contribution":["This folder contains a workspace file \'{0}\'. Do you want to open it? [Learn more]({1}) about workspace files.","Open Workspace","This folder contains multiple workspace files. Do you want to open one? [Learn more]({0}) about workspace files.","Select Workspace","Select a workspace to open","Open Workspace","This workspace is already open."],"vs/workbench/contrib/workspace/browser/workspace.contribution":["You are trying to open untrusted files in a workspace which is trusted.","You are trying to open untrusted files in a window which is trusted.","If you don\'t want to open untrusted files, we recommend to open them in Restricted Mode in a new window as the files may be malicious. See [our docs](https://aka.ms/vscode-workspace-trust) to learn more.","Do you want to allow untrusted files in this workspace?","Do you want to allow untrusted files in this window?","&&Open","Open in &&Restricted Mode","Remember my decision for all workspaces","Do you trust the authors of the files in this workspace?","Do you trust the authors of the files in this folder?","A feature you are trying to use may be a security risk if you do not trust the source of the files or folders you currently have open.","&&Trust Workspace & Continue","&&Trust Folder & Continue","&&Manage","Cancel","If you don\'t trust the authors of these files, we do not recommend continuing as the files may be malicious. See [our docs](https://aka.ms/vscode-workspace-trust) to learn more.","Do you trust the authors of the files in this folder?","You are adding files that are not currently trusted to a trusted workspace. Do you trust the authors of these new files?","No","Do you trust the authors of the files in this workspace?","Do you trust the authors of the files in this folder?","Trust the authors of all files in the parent folder \'{0}\'","&&Yes, I trust the authors","Trust folder and enable all features","Trust workspace and enable all features","&&No, I don\'t trust the authors","Browse folder in restricted mode","Browse workspace in restricted mode","{0} provides features that may automatically execute files in this workspace.","{0} provides features that may automatically execute files in this folder.","If you don\'t trust the authors of these files, we recommend to continue in restricted mode as the files may be malicious. See [our docs](https://aka.ms/vscode-workspace-trust) to learn more.","Manage","Learn More","Restricted Mode is intended for safe code browsing. Trust this window to enable all features. Use navigation keys to access banner actions.","Restricted Mode is intended for safe code browsing. Trust this folder to enable all features. Use navigation keys to access banner actions.","Restricted Mode is intended for safe code browsing. Trust this workspace to enable all features. Use navigation keys to access banner actions.","Restricted Mode is intended for safe code browsing. Trust this window to enable all features.","Restricted Mode is intended for safe code browsing. Trust this folder to enable all features.","Restricted Mode is intended for safe code browsing. Trust this workspace to enable all features.","This window is trusted.","Restricted Mode: Some features are disabled because this window is not trusted.","Running in Restricted Mode\\n\\nSome [features are disabled]({0}) because this [window is not trusted]({1}).","This folder is trusted.","Restricted Mode: Some features are disabled because this folder is not trusted.","Running in Restricted Mode\\n\\nSome [features are disabled]({0}) because this [folder is not trusted]({1}).","This workspace is trusted.","Restricted Mode: Some features are disabled because this workspace is not trusted.","Running in Restricted Mode\\n\\nSome [features are disabled]({0}) because this [workspace is not trusted]({1}).","Workspace Trust","Workspace Trust Editor","Workspaces","Configure Workspace Trust Settings","Manage Workspace Trust","Controls whether or not Workspace Trust is enabled within VS Code.","Controls when the startup prompt to trust a workspace is shown.","Ask for trust every time an untrusted workspace is opened.","Ask for trust the first time an untrusted workspace is opened.","Do not ask for trust when an untrusted workspace is opened.","Controls when the restricted mode banner is shown.","Show the banner every time an untrusted workspace is open.","Show the banner when an untrusted workspace is opened until dismissed.","Do not show the banner when an untrusted workspace is open.","Controls how to handle opening untrusted files in a trusted workspace. This setting also applies to opening files in an empty window which is trusted via `#{0}#`.","Ask how to handle untrusted files for each workspace. Once untrusted files are introduced to a trusted workspace, you will not be prompted again.","Always allow untrusted files to be introduced to a trusted workspace without prompting.","Always open untrusted files in a separate window in restricted mode without prompting.","Controls whether or not the empty window is trusted by default within VS Code. When used with `#{0}#`, you can enable the full functionality of VS Code without prompting in an empty window."],"vs/workbench/contrib/share/browser/share.contribution":["Share...","Generating link...","Copied text to clipboard!","Copied link to clipboard!","Close","Open Link","Controls whether to render the Share action next to the command center when {0} is {1}."],"vs/workbench/contrib/audioCues/browser/audioCues.contribution":["Enable audio cue when a screen reader is attached.","Enable audio cue.","Disable audio cue.","The volume of the audio cues in percent (0-100).","Whether or not position changes should be debounced","Plays a sound when the active line has a breakpoint.","Plays a sound when the active line has an inline suggestion.","Plays a sound when the active line has an error.","Plays a sound when the active line has a folded area that can be unfolded.","Plays a sound when the active line has a warning.","Plays a sound when the debugger stopped on a breakpoint.","Plays a sound when trying to read a line with inlay hints that has no inlay hints.","Plays a sound when a task is completed.","Plays a sound when a task fails (non-zero exit code).","Plays a sound when a terminal command fails (non-zero exit code).","Plays a sound when terminal Quick Fixes are available.","Plays a sound when the focus moves to an inserted line in Accessible Diff Viewer mode or to the next/previous change.","Plays a sound when the focus moves to a deleted line in Accessible Diff Viewer mode or to the next/previous change.","Plays a sound when the focus moves to a modified line in Accessible Diff Viewer mode or to the next/previous change.","Plays a sound when a notebook cell execution is successfully completed.","Plays a sound when a notebook cell execution fails.","Plays a sound when a chat request is made.","Plays a sound on loop while the response is pending.","Plays a sound on loop while the response has been received.","Plays a sound when a feature is cleared (for example, the terminal, debug console, or output channel). When this is disabled, an aria alert will announce \'Cleared\'.","Plays a sound when a file is saved. Also see {0}","Plays the audio cue when a user explicitly saves a file.","Plays the audio cue whenever a file is saved, including auto save.","Never plays the audio cue.","Plays a sound when a file or notebook is formatted. Also see {0}","Plays the audio cue when a user explicitly formats a file.","Plays the audio cue whenever a file is formatted, including if it is set to format on save, type, or, paste, or run of a cell.","Never plays the audio cue."],"vs/workbench/contrib/accountEntitlements/browser/accountsEntitlements.contribution":["When enabled, available entitlements for the account will be show in the accounts menu."],"vs/workbench/browser/workbench":["Failed to load a required file. Please restart the application to try again. Details: {0}"],"vs/workbench/contrib/deprecatedExtensionMigrator/browser/deprecatedExtensionMigrator.contribution":["The extension \'Bracket pair Colorizer\' got disabled because it was deprecated.","Uninstall Extension","Enable Native Bracket Pair Colorization","More Info"],"vs/workbench/electron-sandbox/window":["Restart","Configure","Learn More","Writing login information to the keychain failed with error \'{0}\'.","Troubleshooting Guide","You are running an emulated version of {0}. For better performance download the native arm64 version of {0} build for your machine.","Download","Proxy Authentication Required","&&Log In","Username","Password","The proxy {0} requires a username and password.","Remember my credentials","Are you sure you want to quit?","Are you sure you want to exit?","Are you sure you want to close the window?","&&Quit","&&Exit","&&Close Window","Do not ask me again","Error: {0}","The following operations are still running: \\n{0}","An unexpected error prevented the window to close","An unexpected error prevented the application to quit","An unexpected error prevented the window to reload","An unexpected error prevented to change the workspace","Closing the window is taking a bit longer...","Quitting the application is taking a bit longer...","Reloading the window is taking a bit longer...","Changing the workspace is taking a bit longer...","Close Anyway","Quit Anyway","Reload Anyway","Change Anyway","There is a dependency cycle in the AMD modules that needs to be resolved!","It is not recommended to run {0} as root user.","Files you store within the installation folder (\'{0}\') may be OVERWRITTEN or DELETED IRREVERSIBLY without warning at update time.","{0} on {1} will soon stop receiving updates. Consider upgrading your macOS version.","Learn More","Resolving shell environment...","Learn More"],"vs/platform/workspace/common/workspace":["Code Workspace"],"vs/workbench/services/configuration/browser/configurationService":["Contribute defaults for configurations","Experiments","Configure settings to be applied for all profiles."],"vs/workbench/services/log/electron-sandbox/logService":["Window"],"vs/platform/workspace/common/workspaceTrust":["Trusted","Restricted Mode"],"vs/workbench/services/userDataProfile/common/userDataProfile":["Icon for Default Profile.","Profiles","Profile"],"vs/workbench/services/remote/electron-sandbox/remoteAgentService":["Open Developer Tools","Open in browser","Failed to connect to the remote extension host server (Error: {0})"],"vs/workbench/electron-sandbox/actions/developerActions":["Toggle Developer Tools","Configure Runtime Arguments","Reload With Extensions Disabled","Open User Data Folder"],"vs/platform/configuration/common/configurationRegistry":["Default Language Configuration Overrides","Configure settings to be overridden for the {0} language.","Configure editor settings to be overridden for a language.","This setting does not support per-language configuration.","Configure editor settings to be overridden for a language.","This setting does not support per-language configuration.","Cannot register an empty property","Cannot register \'{0}\'. This matches property pattern \'\\\\\\\\[.*\\\\\\\\]$\' for describing language specific editor settings. Use \'configurationDefaults\' contribution.","Cannot register \'{0}\'. This property is already registered.","Cannot register \'{0}\'. The associated policy {1} is already registered with {2}."],"vs/workbench/electron-sandbox/actions/windowActions":["Close Window","Clos&&e Window","Zoom In","&&Zoom In","Zoom Out","&&Zoom Out","Reset Zoom","&&Reset Zoom","Close Window","Close Window","Select a window to switch to","{0}, window with unsaved changes","Current Window","Switch Window...","Quick Switch Window...","Split Window (Experimental)","&&Split Window (Experimental)"],"vs/platform/contextkey/common/contextkeys":["Whether the operating system is macOS","Whether the operating system is Linux","Whether the operating system is Windows","Whether the platform is a web browser","Whether the operating system is macOS on a non-browser platform","Whether the operating system is iOS","Whether the platform is a mobile web browser","Quality type of VS Code","Whether keyboard focus is inside an input box"],"vs/workbench/electron-sandbox/actions/installActions":["Shell Command","Install \'{0}\' command in PATH","Shell command \'{0}\' successfully installed in PATH.","Uninstall \'{0}\' command from PATH","Shell command \'{0}\' successfully uninstalled from PATH."],"vs/workbench/common/contextkeys":["The kind of workspace opened in the window, either \'empty\' (no workspace), \'folder\' (single folder) or \'workspace\' (multi-root workspace)","The number of root folders in the workspace","Whether there are any working copies with unsaved changes","The name of the remote the window is connected to or an empty string if not connected to any remote","The scheme of the current workspace is from a virtual file system or an empty string.","The scheme of the current workspace is from a temporary file system.","Whether the window is in fullscreen mode","The identifier of the embedder according to the product service, if one is defined","Whether the active editor has unsaved changes","Whether the active editor is not in preview mode","Whether the active editor is the first one in its group","Whether the active editor is the last one in its group","Whether the active editor is pinned","Whether the active editor is read-only","Whether the active editor can toggle between being read-only or writeable","Whether the active editor can revert","The identifier of the active editor","The available editor identifiers that are usable for the active editor","Whether a text compare editor is visible","Whether a text compare editor is active","Whether a side by side editor is active","The number of opened editor groups","Whether the active editor group is empty","The index of the active editor group","Whether the active editor group is the last group","Whether the active editor group is locked","Whether there are multiple editor groups opened","Whether an editor is open","Whether Zen mode is enabled","Whether centered layout is enabled","Whether editors split vertically","Whether the editor area is visible","Whether editor tabs are visible","Editor group is maximized","Whether the sidebar is visible","Whether the sidebar has keyboard focus","The identifier of the active viewlet","Whether the status bar has keyboard focus","Style of the window title bar","Whether the title bar is visible","Whether the banner has keyboard focus","Whether a notification has keyboard focus","Whether the notifications center is visible","Whether a notification toast is visible","The identifier of the active auxiliary panel","Whether the auxiliary bar has keyboard focus","Whether the auxiliary bar is visible","The identifier of the active panel","Whether the panel has keyboard focus","The position of the panel, always \'bottom\'","The alignment of the panel, either \'center\', \'left\', \'right\' or \'justify\'","Whether the panel is visible","Whether the panel is maximized","The identifier of the view that has keyboard focus","The scheme of the resource","The file name of the resource","The folder name the resource is contained in","The full path of the resource","The language identifier of the resource","The full value of the resource including scheme and path","The extension name of the resource","Whether a resource is present or not","Whether the resource is backed by a file system provider"],"vs/workbench/common/configuration":["Application","Workbench","Security","UNC host names must not contain backslashes.","A set of UNC host names (without leading or trailing backslash, for example `192.168.0.1` or `my-server`) to allow without user confirmation. If a UNC host is being accessed that is not allowed via this setting or has not been acknowledged via user confirmation, an error will occur and the operation stopped. A restart is required when changing this setting. Find out more about this setting at https://aka.ms/vscode-windows-unc.","If enabled, only allows access to UNC host names that are allowed by the `#security.allowedUNCHosts#` setting or after user confirmation. Find out more about this setting at https://aka.ms/vscode-windows-unc."],"vs/workbench/browser/parts/dialogs/dialogHandler":["Version: {0}\\nCommit: {1}\\nDate: {2}\\nBrowser: {3}","&&Copy","OK"],"vs/workbench/electron-sandbox/parts/dialogs/dialogHandler":["Version: {0}\\nCommit: {1}\\nDate: {2}\\nElectron: {3}\\nElectronBuildId: {4}\\nChromium: {5}\\nNode.js: {6}\\nV8: {7}\\nOS: {8}","&&Copy","OK"],"vs/workbench/services/dialogs/browser/abstractFileDialogService":["Your changes will be lost if you don\'t save them.","Do you want to save the changes you made to {0}?","Do you want to save the changes to the following {0} files?","&&Save All","&&Save","Do&&n\'t Save","Open File or Folder","Open File","Open Folder","Open Workspace from File","Workspace","Save As","Save As","All Files","No Extension"],"vs/workbench/services/textfile/browser/textFileService":["File Created","File Replaced","Text File Model Decorations","Deleted, Read-only","Read-only","Deleted","File seems to be binary and cannot be opened as text","\'{0}\' already exists. Do you want to replace it?","A file or folder with the name \'{0}\' already exists in the folder \'{1}\'. Replacing it will overwrite its current contents.","&&Replace","\'{0}\' is marked as read-only. Do you want to save anyway?","Paths can be configured as read-only via settings.","&&Save Anyway"],"vs/workbench/common/theme":["Active tab background color in an active group. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups.","Active tab background color in an unfocused group. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups.","Inactive tab background color in an active group. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups.","Inactive tab background color in an unfocused group. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups.","Active tab foreground color in an active group. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups.","Inactive tab foreground color in an active group. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups.","Active tab foreground color in an unfocused group. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups.","Inactive tab foreground color in an unfocused group. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups.","Tab background color when hovering. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups.","Tab background color in an unfocused group when hovering. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups.","Tab foreground color when hovering. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups.","Tab foreground color in an unfocused group when hovering. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups.","Border to separate tabs from each other. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups.","Border to separate pinned tabs from other tabs. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups.","Border on the bottom of an active tab. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups.","Border on the bottom of an active tab in an unfocused group. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups.","Border to the top of an active tab. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups.","Border to the top of an active tab in an unfocused group. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups.","Border to highlight tabs when hovering. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups.","Border to highlight tabs in an unfocused group when hovering. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups.","Border on the top of modified active tabs in an active group. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups.","Border on the top of modified inactive tabs in an active group. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups.","Border on the top of modified active tabs in an unfocused group. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups.","Border on the top of modified inactive tabs in an unfocused group. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups.","Background color of the editor pane visible on the left and right side of the centered editor layout.","Background color of an empty editor group. Editor groups are the containers of editors.","Border color of an empty editor group that is focused. Editor groups are the containers of editors.","Background color of the editor group title header when tabs are enabled. Editor groups are the containers of editors.","Border color of the editor group title header when tabs are enabled. Editor groups are the containers of editors.","Background color of the editor group title header when (`\\"workbench.editor.showTabs\\": \\"single\\"`). Editor groups are the containers of editors.","Border color of the editor group title header. Editor groups are the containers of editors.","Color to separate multiple editor groups from each other. Editor groups are the containers of editors.","Background color when dragging editors around. The color should have transparency so that the editor contents can still shine through.","Foreground color of text shown over editors when dragging files. This text informs the user that they can hold shift to drop into the editor.","Background color of text shown over editors when dragging files. This text informs the user that they can hold shift to drop into the editor.","Border color of text shown over editors when dragging files. This text informs the user that they can hold shift to drop into the editor.","Color to separate two editors from each other when shown side by side in an editor group from top to bottom.","Color to separate two editors from each other when shown side by side in an editor group from left to right.","Panel background color. Panels are shown below the editor area and contain views like output and integrated terminal.","Panel border color to separate the panel from the editor. Panels are shown below the editor area and contain views like output and integrated terminal.","Title color for the active panel. Panels are shown below the editor area and contain views like output and integrated terminal.","Title color for the inactive panel. Panels are shown below the editor area and contain views like output and integrated terminal.","Border color for the active panel title. Panels are shown below the editor area and contain views like output and integrated terminal.","Input box border for inputs in the panel.","Drag and drop feedback color for the panel titles. Panels are shown below the editor area and contain views like output and integrated terminal.","Drag and drop feedback color for the panel sections. The color should have transparency so that the panel sections can still shine through. Panels are shown below the editor area and contain views like output and integrated terminal. Panel sections are views nested within the panels.","Panel section header background color. Panels are shown below the editor area and contain views like output and integrated terminal. Panel sections are views nested within the panels.","Panel section header foreground color. Panels are shown below the editor area and contain views like output and integrated terminal. Panel sections are views nested within the panels.","Panel section header border color used when multiple views are stacked vertically in the panel. Panels are shown below the editor area and contain views like output and integrated terminal. Panel sections are views nested within the panels.","Panel section border color used when multiple views are stacked horizontally in the panel. Panels are shown below the editor area and contain views like output and integrated terminal. Panel sections are views nested within the panels.","Banner background color. The banner is shown under the title bar of the window.","Banner foreground color. The banner is shown under the title bar of the window.","Banner icon color. The banner is shown under the title bar of the window.","Status bar foreground color when a workspace or folder is opened. The status bar is shown in the bottom of the window.","Status bar foreground color when no folder is opened. The status bar is shown in the bottom of the window.","Status bar background color when a workspace or folder is opened. The status bar is shown in the bottom of the window.","Status bar background color when no folder is opened. The status bar is shown in the bottom of the window.","Status bar border color separating to the sidebar and editor. The status bar is shown in the bottom of the window.","Status bar border color when focused on keyboard navigation. The status bar is shown in the bottom of the window.","Status bar border color separating to the sidebar and editor when no folder is opened. The status bar is shown in the bottom of the window.","Status bar item background color when clicking. The status bar is shown in the bottom of the window.","Status bar item border color when focused on keyboard navigation. The status bar is shown in the bottom of the window.","Status bar item background color when hovering. The status bar is shown in the bottom of the window.","Status bar item foreground color when hovering. The status bar is shown in the bottom of the window.","Status bar item background color when hovering an item that contains two hovers. The status bar is shown in the bottom of the window.","Status bar prominent items foreground color. Prominent items stand out from other status bar entries to indicate importance. The status bar is shown in the bottom of the window.","Status bar prominent items background color. Prominent items stand out from other status bar entries to indicate importance. The status bar is shown in the bottom of the window.","Status bar prominent items foreground color when hovering. Prominent items stand out from other status bar entries to indicate importance. The status bar is shown in the bottom of the window.","Status bar prominent items background color when hovering. Prominent items stand out from other status bar entries to indicate importance. The status bar is shown in the bottom of the window.","Status bar error items background color. Error items stand out from other status bar entries to indicate error conditions. The status bar is shown in the bottom of the window.","Status bar error items foreground color. Error items stand out from other status bar entries to indicate error conditions. The status bar is shown in the bottom of the window.","Status bar error items foreground color when hovering. Error items stand out from other status bar entries to indicate error conditions. The status bar is shown in the bottom of the window.","Status bar error items background color when hovering. Error items stand out from other status bar entries to indicate error conditions. The status bar is shown in the bottom of the window.","Status bar warning items background color. Warning items stand out from other status bar entries to indicate warning conditions. The status bar is shown in the bottom of the window.","Status bar warning items foreground color. Warning items stand out from other status bar entries to indicate warning conditions. The status bar is shown in the bottom of the window.","Status bar warning items foreground color when hovering. Warning items stand out from other status bar entries to indicate warning conditions. The status bar is shown in the bottom of the window.","Status bar warning items background color when hovering. Warning items stand out from other status bar entries to indicate warning conditions. The status bar is shown in the bottom of the window.","Activity bar background color. The activity bar is showing on the far left or right and allows to switch between views of the side bar.","Activity bar item foreground color when it is active. The activity bar is showing on the far left or right and allows to switch between views of the side bar.","Activity bar item foreground color when it is inactive. The activity bar is showing on the far left or right and allows to switch between views of the side bar.","Activity bar border color separating to the side bar. The activity bar is showing on the far left or right and allows to switch between views of the side bar.","Activity bar border color for the active item. The activity bar is showing on the far left or right and allows to switch between views of the side bar.","Activity bar focus border color for the active item. The activity bar is showing on the far left or right and allows to switch between views of the side bar.","Activity bar background color for the active item. The activity bar is showing on the far left or right and allows to switch between views of the side bar.","Drag and drop feedback color for the activity bar items. The activity bar is showing on the far left or right and allows to switch between views of the side bar.","Activity notification badge background color. The activity bar is showing on the far left or right and allows to switch between views of the side bar.","Activity notification badge foreground color. The activity bar is showing on the far left or right and allows to switch between views of the side bar.","Profile badge background color. The profile badge shows on top of the settings gear icon in the activity bar.","Profile badge foreground color. The profile badge shows on top of the settings gear icon in the activity bar.","Background color for the remote indicator on the status bar.","Foreground color for the remote indicator on the status bar.","Foreground color for the remote indicator on the status bar when hovering.","Background color for the remote indicator on the status bar when hovering.","Status bar item background color when the workbench is offline.","Status bar item foreground color when the workbench is offline.","Status bar item foreground hover color when the workbench is offline.","Status bar item background hover color when the workbench is offline.","Background color for the remote badge in the extensions view.","Foreground color for the remote badge in the extensions view.","Side bar background color. The side bar is the container for views like explorer and search.","Side bar foreground color. The side bar is the container for views like explorer and search.","Side bar border color on the side separating to the editor. The side bar is the container for views like explorer and search.","Side bar title foreground color. The side bar is the container for views like explorer and search.","Drag and drop feedback color for the side bar sections. The color should have transparency so that the side bar sections can still shine through. The side bar is the container for views like explorer and search. Side bar sections are views nested within the side bar.","Side bar section header background color. The side bar is the container for views like explorer and search. Side bar sections are views nested within the side bar.","Side bar section header foreground color. The side bar is the container for views like explorer and search. Side bar sections are views nested within the side bar.","Side bar section header border color. The side bar is the container for views like explorer and search. Side bar sections are views nested within the side bar.","Title bar foreground when the window is active.","Title bar foreground when the window is inactive.","Title bar background when the window is active.","Title bar background when the window is inactive.","Title bar border color.","Foreground color of the selected menu item in the menubar.","Background color of the selected menu item in the menubar.","Border color of the selected menu item in the menubar.","Foreground color of the command center","Active foreground color of the command center","Foreground color of the command center when the window is inactive","Background color of the command center","Active background color of the command center","Border color of the command center","Active border color of the command center","Border color of the command center when the window is inactive","Notifications center border color. Notifications slide in from the bottom right of the window.","Notification toast border color. Notifications slide in from the bottom right of the window.","Notifications foreground color. Notifications slide in from the bottom right of the window.","Notifications background color. Notifications slide in from the bottom right of the window.","Notification links foreground color. Notifications slide in from the bottom right of the window.","Notifications center header foreground color. Notifications slide in from the bottom right of the window.","Notifications center header background color. Notifications slide in from the bottom right of the window.","Notifications border color separating from other notifications in the notifications center. Notifications slide in from the bottom right of the window.","The color used for the icon of error notifications. Notifications slide in from the bottom right of the window.","The color used for the icon of warning notifications. Notifications slide in from the bottom right of the window.","The color used for the icon of info notifications. Notifications slide in from the bottom right of the window.","The color used for the border of the window when it is active. Only supported in the macOS and Linux desktop client when using the custom title bar.","The color used for the border of the window when it is inactive. Only supported in the macOS and Linux desktop client when using the custom title bar."],"vs/platform/theme/common/colorRegistry":["Overall foreground color. This color is only used if not overridden by a component.","Overall foreground for disabled elements. This color is only used if not overridden by a component.","Overall foreground color for error messages. This color is only used if not overridden by a component.","Foreground color for description text providing additional information, for example for a label.","The default color for icons in the workbench.","Overall border color for focused elements. This color is only used if not overridden by a component.","An extra border around elements to separate them from others for greater contrast.","An extra border around active elements to separate them from others for greater contrast.","The background color of text selections in the workbench (e.g. for input fields or text areas). Note that this does not apply to selections within the editor.","Color for text separators.","Foreground color for links in text.","Foreground color for links in text when clicked on and on mouse hover.","Foreground color for preformatted text segments.","Background color for preformatted text segments.","Background color for block quotes in text.","Border color for block quotes in text.","Background color for code blocks in text.","Shadow color of widgets such as find/replace inside the editor.","Border color of widgets such as find/replace inside the editor.","Input box background.","Input box foreground.","Input box border.","Border color of activated options in input fields.","Background color of activated options in input fields.","Background hover color of options in input fields.","Foreground color of activated options in input fields.","Input box foreground color for placeholder text.","Input validation background color for information severity.","Input validation foreground color for information severity.","Input validation border color for information severity.","Input validation background color for warning severity.","Input validation foreground color for warning severity.","Input validation border color for warning severity.","Input validation background color for error severity.","Input validation foreground color for error severity.","Input validation border color for error severity.","Dropdown background.","Dropdown list background.","Dropdown foreground.","Dropdown border.","Button foreground color.","Button separator color.","Button background color.","Button background color when hovering.","Button border color.","Secondary button foreground color.","Secondary button background color.","Secondary button background color when hovering.","Badge background color. Badges are small information labels, e.g. for search results count.","Badge foreground color. Badges are small information labels, e.g. for search results count.","Scrollbar shadow to indicate that the view is scrolled.","Scrollbar slider background color.","Scrollbar slider background color when hovering.","Scrollbar slider background color when clicked on.","Background color of the progress bar that can show for long running operations.","Background color of error text in the editor. The color must not be opaque so as not to hide underlying decorations.","Foreground color of error squigglies in the editor.","If set, color of double underlines for errors in the editor.","Background color of warning text in the editor. The color must not be opaque so as not to hide underlying decorations.","Foreground color of warning squigglies in the editor.","If set, color of double underlines for warnings in the editor.","Background color of info text in the editor. The color must not be opaque so as not to hide underlying decorations.","Foreground color of info squigglies in the editor.","If set, color of double underlines for infos in the editor.","Foreground color of hint squigglies in the editor.","If set, color of double underlines for hints in the editor.","Border color of active sashes.","Editor background color.","Editor default foreground color.","Sticky scroll background color for the editor","Sticky scroll on hover background color for the editor","Background color of editor widgets, such as find/replace.","Foreground color of editor widgets, such as find/replace.","Border color of editor widgets. The color is only used if the widget chooses to have a border and if the color is not overridden by a widget.","Border color of the resize bar of editor widgets. The color is only used if the widget chooses to have a resize border and if the color is not overridden by a widget.","Quick picker background color. The quick picker widget is the container for pickers like the command palette.","Quick picker foreground color. The quick picker widget is the container for pickers like the command palette.","Quick picker title background color. The quick picker widget is the container for pickers like the command palette.","Quick picker color for grouping labels.","Quick picker color for grouping borders.","Keybinding label background color. The keybinding label is used to represent a keyboard shortcut.","Keybinding label foreground color. The keybinding label is used to represent a keyboard shortcut.","Keybinding label border color. The keybinding label is used to represent a keyboard shortcut.","Keybinding label border bottom color. The keybinding label is used to represent a keyboard shortcut.","Color of the editor selection.","Color of the selected text for high contrast.","Color of the selection in an inactive editor. The color must not be opaque so as not to hide underlying decorations.","Color for regions with the same content as the selection. The color must not be opaque so as not to hide underlying decorations.","Border color for regions with the same content as the selection.","Color of the current search match.","Color of the other search matches. The color must not be opaque so as not to hide underlying decorations.","Color of the range limiting the search. The color must not be opaque so as not to hide underlying decorations.","Border color of the current search match.","Border color of the other search matches.","Border color of the range limiting the search. The color must not be opaque so as not to hide underlying decorations.","Color of the Search Editor query matches.","Border color of the Search Editor query matches.","Color of the text in the search viewlet\'s completion message.","Highlight below the word for which a hover is shown. The color must not be opaque so as not to hide underlying decorations.","Background color of the editor hover.","Foreground color of the editor hover.","Border color of the editor hover.","Background color of the editor hover status bar.","Color of active links.","Foreground color of inline hints","Background color of inline hints","Foreground color of inline hints for types","Background color of inline hints for types","Foreground color of inline hints for parameters","Background color of inline hints for parameters","The color used for the lightbulb actions icon.","The color used for the lightbulb auto fix actions icon.","Background color for text that got inserted. The color must not be opaque so as not to hide underlying decorations.","Background color for text that got removed. The color must not be opaque so as not to hide underlying decorations.","Background color for lines that got inserted. The color must not be opaque so as not to hide underlying decorations.","Background color for lines that got removed. The color must not be opaque so as not to hide underlying decorations.","Background color for the margin where lines got inserted.","Background color for the margin where lines got removed.","Diff overview ruler foreground for inserted content.","Diff overview ruler foreground for removed content.","Outline color for the text that got inserted.","Outline color for text that got removed.","Border color between the two text editors.","Color of the diff editor\'s diagonal fill. The diagonal fill is used in side-by-side diff views.","The background color of unchanged blocks in the diff editor.","The foreground color of unchanged blocks in the diff editor.","The background color of unchanged code in the diff editor.","List/Tree background color for the focused item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.","List/Tree foreground color for the focused item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.","List/Tree outline color for the focused item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.","List/Tree outline color for the focused item when the list/tree is active and selected. An active list/tree has keyboard focus, an inactive does not.","List/Tree background color for the selected item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.","List/Tree foreground color for the selected item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.","List/Tree icon foreground color for the selected item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.","List/Tree background color for the selected item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not.","List/Tree foreground color for the selected item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not.","List/Tree icon foreground color for the selected item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not.","List/Tree background color for the focused item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not.","List/Tree outline color for the focused item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not.","List/Tree background when hovering over items using the mouse.","List/Tree foreground when hovering over items using the mouse.","List/Tree drag and drop background when moving items around using the mouse.","List/Tree foreground color of the match highlights when searching inside the list/tree.","List/Tree foreground color of the match highlights on actively focused items when searching inside the list/tree.","List/Tree foreground color for invalid items, for example an unresolved root in explorer.","Foreground color of list items containing errors.","Foreground color of list items containing warnings.","Background color of the type filter widget in lists and trees.","Outline color of the type filter widget in lists and trees.","Outline color of the type filter widget in lists and trees, when there are no matches.","Shadow color of the type filter widget in lists and trees.","Background color of the filtered match.","Border color of the filtered match.","Tree stroke color for the indentation guides.","Tree stroke color for the indentation guides that are not active.","Table border color between columns.","Background color for odd table rows.","List/Tree foreground color for items that are deemphasized. ","Background color of checkbox widget.","Background color of checkbox widget when the element it\'s in is selected.","Foreground color of checkbox widget.","Border color of checkbox widget.","Border color of checkbox widget when the element it\'s in is selected.","Please use quickInputList.focusBackground instead","Quick picker foreground color for the focused item.","Quick picker icon foreground color for the focused item.","Quick picker background color for the focused item.","Border color of menus.","Foreground color of menu items.","Background color of menu items.","Foreground color of the selected menu item in menus.","Background color of the selected menu item in menus.","Border color of the selected menu item in menus.","Color of a separator menu item in menus.","Toolbar background when hovering over actions using the mouse","Toolbar outline when hovering over actions using the mouse","Toolbar background when holding the mouse over actions","Highlight background color of a snippet tabstop.","Highlight border color of a snippet tabstop.","Highlight background color of the final tabstop of a snippet.","Highlight border color of the final tabstop of a snippet.","Color of focused breadcrumb items.","Background color of breadcrumb items.","Color of focused breadcrumb items.","Color of selected breadcrumb items.","Background color of breadcrumb item picker.","Current header background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.","Current content background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.","Incoming header background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.","Incoming content background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.","Common ancestor header background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.","Common ancestor content background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.","Border color on headers and the splitter in inline merge-conflicts.","Current overview ruler foreground for inline merge-conflicts.","Incoming overview ruler foreground for inline merge-conflicts.","Common ancestor overview ruler foreground for inline merge-conflicts.","Overview ruler marker color for find matches. The color must not be opaque so as not to hide underlying decorations.","Overview ruler marker color for selection highlights. The color must not be opaque so as not to hide underlying decorations.","Minimap marker color for find matches.","Minimap marker color for repeating editor selections.","Minimap marker color for the editor selection.","Minimap marker color for infos.","Minimap marker color for warnings.","Minimap marker color for errors.","Minimap background color.","Opacity of foreground elements rendered in the minimap. For example, \\"#000000c0\\" will render the elements with 75% opacity.","Minimap slider background color.","Minimap slider background color when hovering.","Minimap slider background color when clicked on.","The color used for the problems error icon.","The color used for the problems warning icon.","The color used for the problems info icon.","The foreground color used in charts.","The color used for horizontal lines in charts.","The red color used in chart visualizations.","The blue color used in chart visualizations.","The yellow color used in chart visualizations.","The orange color used in chart visualizations.","The green color used in chart visualizations.","The purple color used in chart visualizations."],"vs/base/common/actions":["(empty)"],"vs/workbench/services/workspaces/browser/abstractWorkspaceEditingService":["Save","Save Workspace","Unable to write into workspace configuration file. Please open the file to correct errors/warnings in it and try again.","Open Workspace Configuration"],"vs/workbench/services/configurationResolver/browser/baseConfigurationResolverService":["Cannot substitute command variable \'{0}\' because command did not return a result of type string.","Variable \'{0}\' must be defined in an \'{1}\' section of the debug or task configuration.","Input variable \'{0}\' is of type \'{1}\' and must include \'{2}\'.","(Default)","Cannot substitute input variable \'{0}\' because command \'{1}\' did not return a result of type string.","Input variable \'{0}\' can only be of type \'promptString\', \'pickString\', or \'command\'.","Undefined input variable \'{0}\' encountered. Remove or define \'{0}\' to continue."],"vs/platform/keyboardLayout/common/keyboardConfig":["Keyboard","Controls the dispatching logic for key presses to use either `code` (recommended) or `keyCode`.","Controls if the AltGraph+ modifier should be treated as Ctrl+Alt+."],"vs/workbench/services/extensionManagement/common/extensionManagementService":["Cannot uninstall extension \'{0}\'. Extension \'{1}\' depends on this.","Cannot uninstall extension \'{0}\'. Extensions \'{1}\' and \'{2}\' depend on this.","Cannot uninstall extension \'{0}\'. Extensions \'{1}\', \'{2}\' and others depend on this.","Installing Extension {0} failed: Manifest is not found.","Cannot install the \'{0}\' extension because it is not available in this setup.","Install Extension","Install Extensions","Would you like to install and synchronize \'{0}\' extension across your devices?","Would you like to install and synchronize extensions across your devices?","&&Install","Install (Do &&not sync)","Enabling this extension requires a trusted workspace.","Trust Workspace & Install","Install","Learn More","{0} for the Web","\'{0}\' has limited functionality in {1}.","&&Install Anyway","&&Show Extensions","Contains extensions which are not supported.","\'{0}\' contains extensions which are not supported in {1}."],"vs/workbench/services/extensionManagement/electron-sandbox/remoteExtensionManagementService":["Can\'t install release version of \'{0}\' extension because it has no release version.","Can\'t install \'{0}\' extension because it is not compatible with the current version of {1} (version {2})."],"vs/workbench/services/workingCopy/electron-sandbox/workingCopyBackupTracker":["The following editors with unsaved changes could not be saved to the back up location.","The following editors with unsaved changes could not be saved or reverted.","Try saving or reverting the editors with unsaved changes first and then try again.","Backing up editors with unsaved changes is taking a bit longer...","Click \'Cancel\' to stop waiting and to save or revert editors with unsaved changes.","Saving editors with unsaved changes is taking a bit longer...","Reverting editors with unsaved changes is taking a bit longer...","Discarding backups is taking a bit longer..."],"vs/workbench/services/workingCopy/common/workingCopyHistoryService":["File Saved","File Moved","File Renamed","Saving local history"],"vs/platform/action/common/actionCommonCategories":["View","Help","Test","File","Preferences","Developer"],"vs/workbench/services/extensions/common/abstractExtensionService":["The following extensions contain dependency loops and have been disabled: {0}","The following extensions contain dependency loops and have been disabled: {0}","No extension host found that can launch the test runner at {0}.","{0} (Error: {1})","The following operation was blocked: {0}","The reason for blocking the operation: {0}","The reasons for blocking the operation:\\n- {0}","The remote extension host terminated unexpectedly. Restarting...","Remote Extension host terminated unexpectedly 3 times within the last 5 minutes.","Restart Remote Extension Host"],"vs/workbench/services/extensions/electron-sandbox/cachedExtensionScanner":["Extensions have been modified on disk. Please reload the window.","Reload Window"],"vs/workbench/services/auxiliaryWindow/browser/auxiliaryWindowService":["Unable to open a new window.","The browser interrupted the opening of a new window. Press \'Retry\' to try again.","To avoid this problem in the future, please ensure to allow popups for this website.","&&Retry"],"vs/workbench/contrib/logs/electron-sandbox/logsActions":["Open Logs Folder","Open Extension Logs Folder"],"vs/editor/common/editorContextKeys":["Whether the editor text has focus (cursor is blinking)","Whether the editor or an editor widget has focus (e.g. focus is in the find widget)","Whether an editor or a rich text input has focus (cursor is blinking)","Whether the editor is read-only","Whether the context is a diff editor","Whether the context is an embedded diff editor","Whether a moved code block is selected for comparison","Whether the accessible diff viewer is visible","Whether the diff editor render side by side inline breakpoint is reached","Whether `editor.columnSelection` is enabled","Whether the editor has text selected","Whether the editor has multiple selections","Whether `Tab` will move focus out of the editor","Whether the editor hover is visible","Whether the editor hover is focused","Whether the sticky scroll is focused","Whether the sticky scroll is visible","Whether the standalone color picker is visible","Whether the standalone color picker is focused","Whether the editor is part of a larger editor (e.g. notebooks)","The language identifier of the editor","Whether the editor has a completion item provider","Whether the editor has a code actions provider","Whether the editor has a code lens provider","Whether the editor has a definition provider","Whether the editor has a declaration provider","Whether the editor has an implementation provider","Whether the editor has a type definition provider","Whether the editor has a hover provider","Whether the editor has a document highlight provider","Whether the editor has a document symbol provider","Whether the editor has a reference provider","Whether the editor has a rename provider","Whether the editor has a signature help provider","Whether the editor has an inline hints provider","Whether the editor has a document formatting provider","Whether the editor has a document selection formatting provider","Whether the editor has multiple document formatting providers","Whether the editor has multiple document selection formatting providers"],"vs/workbench/services/extensions/electron-sandbox/localProcessExtensionHost":["Extension host did not start in 10 seconds, it might be stopped on the first line and needs a debugger to continue.","Extension host did not start in 10 seconds, that might be a problem.","Reload Window","Terminating extension debug session"],"vs/workbench/common/editor":["Text Editor","Built-in","Open Anyway","Configure Limit"],"vs/workbench/contrib/localization/electron-sandbox/minimalTranslations":["Search language packs in the Marketplace to change the display language to {0}.","Search Marketplace","Install language pack to change the display language to {0}.","Install and Restart"],"vs/workbench/contrib/localization/common/localization.contribution":["Contributes localizations to the editor","Id of the language into which the display strings are translated.","Name of the language in English.","Name of the language in contributed language.","List of translations associated to the language.","Id of VS Code or Extension for which this translation is contributed to. Id of VS Code is always `vscode` and of extension should be in format `publisherId.extensionName`.","Id should be `vscode` or in format `publisherId.extensionName` for translating VS code or an extension respectively.","A relative path to a file containing translations for the language."],"vs/workbench/contrib/codeEditor/electron-sandbox/selectionClipboard":["Paste Selection Clipboard"],"vs/workbench/contrib/codeEditor/electron-sandbox/startDebugTextMate":["Start Text Mate Syntax Grammar Logging"],"vs/workbench/contrib/issue/common/issue.contribution":["Report Issue...","Report &&Issue"],"vs/workbench/contrib/extensions/electron-sandbox/runtimeExtensionsEditor":["Start Extension Host Profile","Stop Extension Host Profile","Save Extension Host Profile","Save Extension Host Profile","Save"],"vs/workbench/browser/editor":["{0}, preview","{0}, pinned"],"vs/workbench/contrib/extensions/electron-sandbox/debugExtensionHostAction":["Start Debugging Extension Host","Profile Extensions","In order to profile extensions a restart is required. Do you want to restart \'{0}\' now?","&&Restart","Attach Extension Host"],"vs/workbench/contrib/extensions/electron-sandbox/extensionsActions":["Open Extensions Folder","Cleanup Extensions Folder"],"vs/workbench/contrib/extensions/common/runtimeExtensionsInput":["Running Extensions"],"vs/workbench/contrib/extensions/electron-sandbox/extensionProfileService":["Extension Profiler","Profiling Extension Host","Profiling Extension Host","Click to stop profiling.","Profiling Extension Host ({0} sec)","Profile Extensions","In order to profile extensions a restart is required. Do you want to restart \'{0}\' now?","&&Restart"],"vs/workbench/contrib/extensions/electron-sandbox/extensionsAutoProfiler":["The extension \'{0}\' took a very long time to complete its last operation and it has prevented other extensions from running.","Show Extensions"],"vs/workbench/contrib/terminal/common/terminal":["Contributes terminal functionality.","Defines additional terminal profiles that the user can create.","The ID of the terminal profile provider.","Title for this terminal profile.","A codicon, URI, or light and dark URIs to associate with this terminal type.","Icon path when a light theme is used","Icon path when a dark theme is used"],"vs/workbench/services/dialogs/browser/simpleFileDialog":["Open Local File...","Save Local File...","Open Local Folder...","Open Local...","File system provider for {0} is not available.","Show Local","The path does not exist.","Cancel","Please enter a valid path.","The folder already exists. Please use a new file name.","{0} already exists. Are you sure you want to overwrite it?","Please enter a valid file name.","The folder {0} does not exist. Would you like to create it?","Please enter a path that exists.","This folder cannot be used as a save destination. Please choose another folder","Please enter a path that exists.","Please start the path with a drive letter.","Please select a file.","Please select a folder."],"vs/editor/common/languages":["array","boolean","class","constant","constructor","enumeration","enumeration member","event","field","file","function","interface","key","method","module","namespace","null","number","object","operator","package","property","string","struct","type parameter","variable","{0} ({1})"],"vs/workbench/services/userDataSync/common/userDataSync":["Settings","Keyboard Shortcuts","User Snippets","User Tasks","Extensions","UI State","Profiles","Workspace State","View icon of the Settings Sync view.","Download Settings Sync Activity","Settings Sync"],"vs/workbench/contrib/tasks/common/tasks":["Whether a task is currently running.","Tasks","Error: the task identifier \'{0}\' is missing the required property \'{1}\'. The task identifier will be ignored."],"vs/workbench/contrib/tasks/common/taskService":["Whether CustomExecution tasks are supported. Consider using in the when clause of a \'taskDefinition\' contribution.","Whether ShellExecution tasks are supported. Consider using in the when clause of a \'taskDefinition\' contribution.","Whether the task commands have been registered yet","Whether ProcessExecution tasks are supported. Consider using in the when clause of a \'taskDefinition\' contribution.","True when in the web with no remote authority."],"vs/workbench/contrib/performance/electron-sandbox/startupProfiler":["Successfully created profiles.","Please create an issue and manually attach the following files:\\n{0}","&&Create Issue and Restart","Restart","Thanks for helping us.","A final restart is required to continue to use \'{0}\'. Again, thank you for your contribution.","&&Restart"],"vs/workbench/common/views":["Views","Default view icon.","A view with id \'{0}\' is already registered","No tree view with id \'{0}\' registered."],"vs/workbench/contrib/terminal/common/terminalContextKey":["Whether the terminal is focused.","Whether any terminal is focused, including detached terminals used in other UI.","Whether a terminal in the editor area is focused.","The current number of terminals.","Whether the terminal tabs widget is focused.","The shell type of the active terminal, this is set to the last known value when no terminals exist.","Whether the terminal\'s alt buffer is active.","Whether the terminal\'s suggest widget is visible.","Whether the terminal view is showing","Whether text is selected in the active terminal.","Whether text is selected in a focused terminal.","Whether terminal processes can be launched in the current workspace.","Whether one terminal is selected in the terminal tabs list.","Whether the focused tab\'s terminal is a split terminal.","Whether the terminal run command picker is currently open.","Whether shell integration is enabled in the active terminal"],"vs/platform/audioCues/browser/audioCueService":["Error on Line","Warning on Line","Folded Area on Line","Breakpoint on Line","Inline Suggestion on Line","Terminal Quick Fix","Debugger Stopped on Breakpoint","No Inlay Hints on Line","Task Completed","Task Failed","Terminal Command Failed","Terminal Bell","Notebook Cell Completed","Notebook Cell Failed","Diff Line Inserted","Diff Line Deleted","Diff Line Modified","Chat Request Sent","Chat Response Received","Chat Response Pending","Clear","Save","Format"],"vs/workbench/contrib/webview/electron-sandbox/webviewCommands":["Open Webview Developer Tools","Using standard dev tools to debug iframe based webview"],"vs/workbench/contrib/localHistory/electron-sandbox/localHistoryCommands":["Reveal in File Explorer","Reveal in Finder","Open Containing Folder"],"vs/workbench/contrib/mergeEditor/electron-sandbox/devCommands":["Merge Editor (Dev)","Open Merge Editor State from JSON","Enter JSON","Open Selection In Temporary Merge Editor"],"vs/workbench/contrib/tasks/browser/terminalTaskSystem":["A unknown error has occurred while executing a task. See task output log for details.","There are issues with task \\"{0}\\". See the output for more details.","There is a dependency cycle. See task \\"{0}\\".","Couldn\'t resolve dependent task \'{0}\' in workspace folder \'{1}\'","Task {0} is a background task but uses a problem matcher without a background pattern","Executing task in folder {0}: {1}","Executing task: {0}","Executing task in folder {0}: {1}","Executing task: {0}","Executing task: {0}","Can\'t execute a shell command on an UNC drive using cmd.exe.","Problem matcher {0} can\'t be resolved. The matcher will be ignored","Press any key to close the terminal.","Terminal will be reused by tasks, press any key to close it."],"vs/workbench/contrib/tasks/browser/abstractTaskService":["Configure Task","Tasks","Select the build task (there is no default build task defined)","Filters the tasks shown in the quickpick","The task\'s label or a term to filter by","The contributed task type","The task\'s label or a term to filter by","There are task errors. See the output for details.","Show output","The folder {0} is ignored since it uses task version 0.1.0","Warning: {0} tasks are unavailable in the current environment.\\n","No test task defined. Mark a task with \'isTestCommand\' in the tasks.json file.","No test task defined. Mark a task with as a \'test\' group in the tasks.json file.","No build task defined. Mark a task with \'isBuildCommand\' in the tasks.json file.","No build task defined. Mark a task with as a \'build\' group in the tasks.json file.","Task to execute is undefined","associate","Continue without scanning the task output","Never scan the task output for this task","Never scan the task output for {0} tasks","Learn more about scanning the task output","Select for which kind of errors and warnings to scan the task output","The current task configuration has errors. Please fix the errors first before customizing a task.","\\t// See https://go.microsoft.com/fwlink/?LinkId=733558 \\n\\t// for the documentation about the tasks.json format","There are many build tasks defined in the tasks.json. Executing the first one.\\n","Save all editors?","Do you want to save all editors before running the task?","&&Save","Don\'t save","The task \'{0}\' is already active.","Terminate Task","Restart Task","There is already a task running. Terminate it first before executing another task.","Failed to terminate and restart task {0}","The task provider for \\"{0}\\" tasks unexpectedly provided a task of type \\"{1}\\".\\n","Warning: {0} tasks are unavailable in the current environment.\\n","Error: The {0} task detection didn\'t contribute a task for the following configuration:\\n{1}\\nThe task will be ignored.\\n","Error: the provided task configuration has validation errors and can\'t not be used. Please correct the errors first.","Error: The content of the tasks json in {0} has syntax errors. Please correct them before executing a task.\\n","workspace file","Only tasks version 2.0.0 permitted in workspace configuration files.","user settings","Only tasks version 2.0.0 permitted in user settings.","Workspace folder was undefined","Error: the provided task configuration has validation errors and can\'t not be used. Please correct the errors first.","Ignoring task configurations for workspace folder {0}. Multi folder workspace task support requires that all folders use task version 2.0.0\\n","Error: The content of the tasks.json file has syntax errors. Please correct them before executing a task.\\n","Terminate Task","An error has occurred while running a task. See task log for details.","Configure Task","recently used tasks","configured tasks","detected tasks","The following workspace folders are ignored since they use task version 0.1.0: {0}","Don\'t Show Again","Listing and running tasks requires that some of the files in this workspace be executed as code.","Select the task to run","Configure a Task","Configure a Task","Fetching build tasks...","Select the build task to run","No build task to run found. Configure Build Task...","Fetching test tasks...","Select the test task to run","No test task to run found. Configure Tasks...","Select a task to terminate","No task is currently running","All Running Tasks","The launched process doesn\'t exist anymore. If the task spawned background tasks exiting VS Code might result in orphaned processes.","Failed to terminate running task","Select the task to restart","No task to restart","Select a Task Template","User","Create tasks.json file from template","Open tasks.json file","Select a task to configure","{0} is already marked as the default build task","Select a task to configure","Select the task to be used as the default build task","{0} is already marked as the default test task.","Select the task to be used as the default test task","Select the task to show its output","No task is running","The deprecated tasks version 0.1.0 has been removed. Your tasks have been upgraded to version 2.0.0. Open the diff to review the upgrade.","The deprecated tasks version 0.1.0 has been removed. Your tasks have been upgraded to version 2.0.0. Open the diffs to review the upgrade.","Open diff","Open diffs"],"vs/workbench/contrib/chat/electron-sandbox/actions/voiceChatActions":["True when getting ready for receiving voice input from the microphone for voice chat.","True when voice recording from microphone is in progress for voice chat.","True when voice recording from microphone is in progress for quick chat.","True when voice recording from microphone is in progress for inline chat.","True when voice recording from microphone is in progress in the chat view.","True when voice recording from microphone is in progress in the chat editor.","I\'m listening","Voice Chat in Chat View","Inline Voice Chat","Quick Voice Chat","Use Microphone","Stop Listening","Stop Listening","Stop Listening","Stop Listening","Stop Listening","Stop Listening and Submit"],"vs/workbench/api/common/extHostTelemetry":["Extension Telemetry{0}"],"vs/workbench/api/common/extHostExtensionService":["Cannot load test runner.","Path {0} does not point to a valid extension test runner."],"vs/workbench/api/common/extHostWorkspace":["Extension \'{0}\' failed to update workspace folders: {1}"],"vs/workbench/api/common/extHostTerminalService":["Could not find the terminal with id {0} on the extension host"],"vs/workbench/api/common/extHostTunnelService":["Private","Public"],"vs/workbench/api/common/extHostLogService":["Extension Host (Remote)","Extension Host (Worker)","Extension Host"],"vs/platform/terminal/node/terminalProcess":["Starting directory (cwd) \\"{0}\\" is not a directory","Starting directory (cwd) \\"{0}\\" does not exist","Path to shell executable \\"{0}\\" does not exist","Path to shell executable \\"{0}\\" is not a file or a symlink"],"vs/workbench/api/node/extHostDebugService":["Debug Process"],"vs/platform/extensions/common/extensionValidator":["property publisher must be of type `string`.","property `{0}` is mandatory and must be of type `string`","property `{0}` is mandatory and must be of type `string`","property `{0}` is mandatory and must be of type `object`","property `{0}` is mandatory and must be of type `string`","property `{0}` can be omitted or must be of type `string[]`","property `{0}` can be omitted or must be of type `string[]`","property `{0}` should be omitted if the extension doesn\'t have a `{1}` or `{2}` property.","property `{0}` can be defined only if property `main` is also defined.","property `{0}` can be omitted or must be of type `string`","Expected `main` ({0}) to be included inside extension\'s folder ({1}). This might make the extension non-portable.","property `{0}` can be omitted or must be of type `string`","Expected `browser` ({0}) to be included inside extension\'s folder ({1}). This might make the extension non-portable.","Extension version is not semver compatible.","Could not parse `engines.vscode` value {0}. Please use, for example: ^1.22.0, ^1.22.x, etc.","Version specified in `engines.vscode` ({0}) is not specific enough. For vscode versions before 1.0.0, please define at a minimum the major and minor desired version. E.g. ^0.10.0, 0.10.x, 0.11.0, etc.","Version specified in `engines.vscode` ({0}) is not specific enough. For vscode versions after 1.0.0, please define at a minimum the major desired version. E.g. ^1.10.0, 1.10.x, 1.x.x, 2.x.x, etc.","Extension is not compatible with Code {0}. Extension requires: {1}."],"vs/platform/extensionManagement/common/extensionNls":["Couldn\'t find message for key {0}."],"vs/base/common/jsonErrorMessages":["Invalid symbol","Invalid number format","Property name expected","Value expected","Colon expected","Comma expected","Closing brace expected","Closing bracket expected","End of file expected"],"vs/base/node/zip":["Error extracting {0}. Invalid file.","Incomplete. Found {0} of {1} entries","{0} not found inside zip."],"vs/platform/extensionManagement/common/abstractExtensionManagementService":["Marketplace is not enabled","Can\'t install \'{0}\' extension since it was reported to be problematic.","Can\'t install \'{0}\' extension since it was deprecated and the replacement extension \'{1}\' can\'t be found.","The \'{0}\' extension is not available in {1} for {2}.","Can\'t install release version of \'{0}\' extension because it has no release version.","Can\'t install \'{0}\' extension because it is not compatible with the current version of {1} (version {2}).","Cannot uninstall \'{0}\' extension. \'{1}\' extension depends on this.","Cannot uninstall \'{0}\' extension. \'{1}\' and \'{2}\' extensions depend on this.","Cannot uninstall \'{0}\' extension. \'{1}\', \'{2}\' and other extension depend on this.","Cannot uninstall \'{0}\' extension . It includes uninstalling \'{1}\' extension and \'{2}\' extension depends on this.","Cannot uninstall \'{0}\' extension. It includes uninstalling \'{1}\' extension and \'{2}\' and \'{3}\' extensions depend on this.","Cannot uninstall \'{0}\' extension. It includes uninstalling \'{1}\' extension and \'{2}\', \'{3}\' and other extensions depend on this."],"vs/platform/extensionManagement/node/extensionManagementUtil":["VSIX invalid: package.json is not a JSON file."],"vs/platform/files/common/io":["File is too large to open"],"vs/platform/shell/node/shellEnv":["Unable to resolve your shell environment in a reasonable time. Please review your shell configuration and restart.","Unable to resolve your shell environment: {0}","Unexpected exit code from spawned shell (code {0}, signal {1})"],"vs/platform/dialogs/electron-main/dialogMainService":["Open","Open Folder","Open File","Open Workspace from File","&&Open"],"vs/platform/files/electron-main/diskFileSystemProviderServer":["Failed to move \'{0}\' to the recycle bin","Failed to move \'{0}\' to the trash"],"vs/platform/externalTerminal/node/externalTerminalService":["VS Code Console","Script \'{0}\' failed with exit code {1}","\'{0}\' not supported","Press any key to continue...","\'{0}\' failed with exit code {1}","can\'t find terminal application \'{0}\'"],"vs/platform/issue/electron-main/issueMainService":["Local","Issue Reporter","Process Explorer","Successfully created the trace file","Please create an issue and manually attach the following file:\\n{0}","&&OK","Your input will not be saved. Are you sure you want to close this window?","&&Yes","Cancel","There is too much data to send to GitHub directly. The data will be copied to the clipboard, please paste it into the GitHub issue page that is opened.","&&OK","Cancel"],"vs/platform/native/electron-main/nativeHostMainService":["{0} will now prompt with \'osascript\' for Administrator privileges to install the shell command.","&&OK","Cancel","Unable to install the shell command \'{0}\'.","{0} will now prompt with \'osascript\' for Administrator privileges to uninstall the shell command.","&&OK","Cancel","Unable to uninstall the shell command \'{0}\'.","Unable to find shell script in \'{0}\'"],"vs/platform/workspaces/electron-main/workspacesHistoryMainService":["New Window","Opens a new window","Recent Folders & Workspaces","Recent Folders","Untitled (Workspace)","{0} (Workspace)"],"vs/platform/workspaces/electron-main/workspacesManagementMainService":["&&OK","Unable to save workspace \'{0}\'","The workspace is already opened in another window. Please close that window first and then try again."],"vs/platform/windows/electron-main/windowsMainService":["&&OK","Path does not exist","URI can not be opened","The path \'{0}\' does not exist on this computer.","The URI \'{0}\' is not valid and can not be opened.","&&Allow","&&Cancel","&&Learn More","The host \'{0}\' was not found in the list of allowed hosts. Do you want to allow it anyway?","The path \'{0}\' uses a host that is not allowed. Unless you trust the host, you should press \'Cancel\'","Permanently allow host \'{0}\'"],"vs/base/browser/ui/button/button":["More Actions..."],"vs/base/common/date":["in {0}","now","{0} second ago","{0} sec ago","{0} seconds ago","{0} secs ago","{0} second","{0} sec","{0} seconds","{0} secs","{0} minute ago","{0} min ago","{0} minutes ago","{0} mins ago","{0} minute","{0} min","{0} minutes","{0} mins","{0} hour ago","{0} hr ago","{0} hours ago","{0} hrs ago","{0} hour","{0} hr","{0} hours","{0} hrs","{0} day ago","{0} days ago","{0} day","{0} days","{0} week ago","{0} wk ago","{0} weeks ago","{0} wks ago","{0} week","{0} wk","{0} weeks","{0} wks","{0} month ago","{0} mo ago","{0} months ago","{0} mos ago","{0} month","{0} mo","{0} months","{0} mos","{0} year ago","{0} yr ago","{0} years ago","{0} yrs ago","{0} year","{0} yr","{0} years","{0} yrs"],"vs/platform/userDataSync/common/keybindingsSync":["Unable to sync keybindings because the content in the file is not valid. Please open the file and correct it.","Unable to sync keybindings because the content in the file is not valid. Please open the file and correct it."],"vs/platform/userDataSync/common/settingsSync":["Unable to sync settings as there are errors/warning in settings file."],"vs/platform/userDataSync/common/abstractSynchronizer":["Cannot sync {0} as its local version {1} is not compatible with its remote version {2}","Cannot parse sync data as it is not compatible with the current version."],"vs/platform/userDataSync/common/userDataAutoSyncService":["Cannot sync because default service has changed","Cannot sync because sync service has changed","Cannot sync because syncing is turned off in the cloud","Cannot sync because default service has changed","Cannot sync because sync service has changed","Cannot sync because current session is expired","Cannot sync because syncing is turned off on this machine from another machine."],"vs/base/browser/ui/tree/abstractTree":["Filter","Fuzzy Match","Type to filter","Type to search","Type to search","Close","No elements found."],"vs/platform/theme/common/iconRegistry":["The id of the font to use. If not set, the font that is defined first is used.","The font character associated with the icon definition.","Icon for the close action in widgets.","Icon for goto previous editor location.","Icon for goto next editor location."],"vs/editor/common/core/editorColorRegistry":["Background color for the highlight of line at the cursor position.","Background color for the border around the line at the cursor position.","Background color of highlighted ranges, like by quick open and find features. The color must not be opaque so as not to hide underlying decorations.","Background color of the border around highlighted ranges.","Background color of highlighted symbol, like for go to definition or go next/previous symbol. The color must not be opaque so as not to hide underlying decorations.","Background color of the border around highlighted symbols.","Color of the editor cursor.","The background color of the editor cursor. Allows customizing the color of a character overlapped by a block cursor.","Color of whitespace characters in the editor.","Color of editor line numbers.","Color of the editor indentation guides.","\'editorIndentGuide.background\' is deprecated. Use \'editorIndentGuide.background1\' instead.","Color of the active editor indentation guides.","\'editorIndentGuide.activeBackground\' is deprecated. Use \'editorIndentGuide.activeBackground1\' instead.","Color of the editor indentation guides (1).","Color of the editor indentation guides (2).","Color of the editor indentation guides (3).","Color of the editor indentation guides (4).","Color of the editor indentation guides (5).","Color of the editor indentation guides (6).","Color of the active editor indentation guides (1).","Color of the active editor indentation guides (2).","Color of the active editor indentation guides (3).","Color of the active editor indentation guides (4).","Color of the active editor indentation guides (5).","Color of the active editor indentation guides (6).","Color of editor active line number","Id is deprecated. Use \'editorLineNumber.activeForeground\' instead.","Color of editor active line number","Color of the final editor line when editor.renderFinalNewline is set to dimmed.","Color of the editor rulers.","Foreground color of editor CodeLens","Background color behind matching brackets","Color for matching brackets boxes","Color of the overview ruler border.","Background color of the editor overview ruler.","Background color of the editor gutter. The gutter contains the glyph margins and the line numbers.","Border color of unnecessary (unused) source code in the editor.","Opacity of unnecessary (unused) source code in the editor. For example, \\"#000000c0\\" will render the code with 75% opacity. For high contrast themes, use the  \'editorUnnecessaryCode.border\' theme color to underline unnecessary code instead of fading it out.","Border color of ghost text in the editor.","Foreground color of the ghost text in the editor.","Background color of the ghost text in the editor.","Overview ruler marker color for range highlights. The color must not be opaque so as not to hide underlying decorations.","Overview ruler marker color for errors.","Overview ruler marker color for warnings.","Overview ruler marker color for infos.","Foreground color of brackets (1). Requires enabling bracket pair colorization.","Foreground color of brackets (2). Requires enabling bracket pair colorization.","Foreground color of brackets (3). Requires enabling bracket pair colorization.","Foreground color of brackets (4). Requires enabling bracket pair colorization.","Foreground color of brackets (5). Requires enabling bracket pair colorization.","Foreground color of brackets (6). Requires enabling bracket pair colorization.","Foreground color of unexpected brackets.","Background color of inactive bracket pair guides (1). Requires enabling bracket pair guides.","Background color of inactive bracket pair guides (2). Requires enabling bracket pair guides.","Background color of inactive bracket pair guides (3). Requires enabling bracket pair guides.","Background color of inactive bracket pair guides (4). Requires enabling bracket pair guides.","Background color of inactive bracket pair guides (5). Requires enabling bracket pair guides.","Background color of inactive bracket pair guides (6). Requires enabling bracket pair guides.","Background color of active bracket pair guides (1). Requires enabling bracket pair guides.","Background color of active bracket pair guides (2). Requires enabling bracket pair guides.","Background color of active bracket pair guides (3). Requires enabling bracket pair guides.","Background color of active bracket pair guides (4). Requires enabling bracket pair guides.","Background color of active bracket pair guides (5). Requires enabling bracket pair guides.","Background color of active bracket pair guides (6). Requires enabling bracket pair guides.","Border color used to highlight unicode characters.","Background color used to highlight unicode characters."],"vs/editor/browser/coreCommands":["Stick to the end even when going to longer lines","Stick to the end even when going to longer lines","Removed secondary cursors"],"vs/editor/browser/widget/diffEditor/diffEditor.contribution":["Toggle Collapse Unchanged Regions","Toggle Show Moved Code Blocks","Toggle Use Inline View When Space Is Limited","Use Inline View When Space Is Limited","Show Moved Code Blocks","Diff Editor","Switch Side","Exit Compare Move","Collapse All Unchanged Regions","Show All Unchanged Regions","Accessible Diff Viewer","Go to Next Difference","Open Accessible Diff Viewer","Go to Previous Difference"],"vs/editor/browser/widget/codeEditorWidget":["The number of cursors has been limited to {0}. Consider using [find and replace](https://code.visualstudio.com/docs/editor/codebasics#_find-and-replace) for larger changes or increase the editor multi cursor limit setting.","Increase Multi Cursor Limit"],"vs/platform/contextkey/common/scanner":["Did you mean {0}?","Did you mean {0} or {1}?","Did you mean {0}, {1} or {2}?","Did you forget to open or close the quote?","Did you forget to escape the \'/\' (slash) character? Put two backslashes before it to escape, e.g., \'\\\\\\\\/\'."],"vs/editor/contrib/anchorSelect/browser/anchorSelect":["Selection Anchor","Anchor set at {0}:{1}","Set Selection Anchor","Go to Selection Anchor","Select from Anchor to Cursor","Cancel Selection Anchor"],"vs/editor/contrib/bracketMatching/browser/bracketMatching":["Overview ruler marker color for matching brackets.","Go to Bracket","Select to Bracket","Remove Brackets","Go to &&Bracket"],"vs/editor/contrib/caretOperations/browser/caretOperations":["Move Selected Text Left","Move Selected Text Right"],"vs/editor/contrib/caretOperations/browser/transpose":["Transpose Letters"],"vs/editor/contrib/clipboard/browser/clipboard":["Cu&&t","Cut","Cut","Cut","&&Copy","Copy","Copy","Copy","Copy As","Copy As","Share","Share","Share","&&Paste","Paste","Paste","Paste","Copy With Syntax Highlighting"],"vs/editor/contrib/codeAction/browser/codeActionContributions":["Enable/disable showing group headers in the Code Action menu.","Enable/disable showing nearest Quick Fix within a line when not currently on a diagnostic."],"vs/editor/contrib/codelens/browser/codelensController":["Show CodeLens Commands For Current Line","Select a command"],"vs/editor/contrib/colorPicker/browser/standaloneColorPickerActions":["Show or Focus Standalone Color Picker","&&Show or Focus Standalone Color Picker","Hide the Color Picker","Insert Color with Standalone Color Picker"],"vs/editor/contrib/comment/browser/comment":["Toggle Line Comment","&&Toggle Line Comment","Add Line Comment","Remove Line Comment","Toggle Block Comment","Toggle &&Block Comment"],"vs/editor/contrib/contextmenu/browser/contextmenu":["Minimap","Render Characters","Vertical size","Proportional","Fill","Fit","Slider","Mouse Over","Always","Show Editor Context Menu"],"vs/editor/contrib/cursorUndo/browser/cursorUndo":["Cursor Undo","Cursor Redo"],"vs/editor/contrib/dropOrPasteInto/browser/copyPasteContribution":["Paste As...","The id of the paste edit to try applying. If not provided, the editor will show a picker."],"vs/editor/contrib/dropOrPasteInto/browser/dropIntoEditorContribution":["Configures the default drop provider to use for content of a given mime type."],"vs/editor/contrib/folding/browser/folding":["Unfold","Unfold Recursively","Fold","Toggle Fold","Fold Recursively","Fold All Block Comments","Fold All Regions","Unfold All Regions","Fold All Except Selected","Unfold All Except Selected","Fold All","Unfold All","Go to Parent Fold","Go to Previous Folding Range","Go to Next Folding Range","Create Folding Range from Selection","Remove Manual Folding Ranges","Fold Level {0}"],"vs/editor/contrib/find/browser/findController":["The file is too large to perform a replace all operation.","Find","&&Find","Overrides \\"Use Regular Expression\\" flag.\\nThe flag will not be saved for the future.\\n0: Do Nothing\\n1: True\\n2: False","Overrides \\"Match Whole Word\\" flag.\\nThe flag will not be saved for the future.\\n0: Do Nothing\\n1: True\\n2: False","Overrides \\"Math Case\\" flag.\\nThe flag will not be saved for the future.\\n0: Do Nothing\\n1: True\\n2: False","Overrides \\"Preserve Case\\" flag.\\nThe flag will not be saved for the future.\\n0: Do Nothing\\n1: True\\n2: False","Find With Arguments","Find With Selection","Find Next","Find Previous","Go to Match...","No matches. Try searching for something else.","Type a number to go to a specific match (between 1 and {0})","Please type a number between 1 and {0}","Please type a number between 1 and {0}","Find Next Selection","Find Previous Selection","Replace","&&Replace"],"vs/editor/contrib/fontZoom/browser/fontZoom":["Editor Font Zoom In","Editor Font Zoom Out","Editor Font Zoom Reset"],"vs/editor/contrib/format/browser/formatActions":["Format Document","Format Selection"],"vs/editor/contrib/gotoSymbol/browser/goToCommands":["Peek","Definitions","No definition found for \'{0}\'","No definition found","Go to Definition","Go to &&Definition","Open Definition to the Side","Peek Definition","Declarations","No declaration found for \'{0}\'","No declaration found","Go to Declaration","Go to &&Declaration","No declaration found for \'{0}\'","No declaration found","Peek Declaration","Type Definitions","No type definition found for \'{0}\'","No type definition found","Go to Type Definition","Go to &&Type Definition","Peek Type Definition","Implementations","No implementation found for \'{0}\'","No implementation found","Go to Implementations","Go to &&Implementations","Peek Implementations","No references found for \'{0}\'","No references found","Go to References","Go to &&References","References","Peek References","References","Go to Any Symbol","Locations","No results for \'{0}\'","References"],"vs/editor/contrib/gotoSymbol/browser/link/goToDefinitionAtPosition":["Click to show {0} definitions."],"vs/editor/contrib/gotoError/browser/gotoError":["Go to Next Problem (Error, Warning, Info)","Icon for goto next marker.","Go to Previous Problem (Error, Warning, Info)","Icon for goto previous marker.","Go to Next Problem in Files (Error, Warning, Info)","Next &&Problem","Go to Previous Problem in Files (Error, Warning, Info)","Previous &&Problem"],"vs/editor/contrib/hover/browser/hover":["Show or Focus Hover","Show Definition Preview Hover","Scroll Up Hover","Scroll Down Hover","Scroll Left Hover","Scroll Right Hover","Page Up Hover","Page Down Hover","Go To Top Hover","Go To Bottom Hover"],"vs/editor/contrib/indentation/browser/indentation":["Convert Indentation to Spaces","Convert Indentation to Tabs","Configured Tab Size","Default Tab Size","Current Tab Size","Select Tab Size for Current File","Indent Using Tabs","Indent Using Spaces","Change Tab Display Size","Detect Indentation from Content","Reindent Lines","Reindent Selected Lines"],"vs/editor/contrib/inPlaceReplace/browser/inPlaceReplace":["Replace with Previous Value","Replace with Next Value"],"vs/editor/contrib/lineSelection/browser/lineSelection":["Expand Line Selection"],"vs/editor/contrib/linesOperations/browser/linesOperations":["Copy Line Up","&&Copy Line Up","Copy Line Down","Co&&py Line Down","Duplicate Selection","&&Duplicate Selection","Move Line Up","Mo&&ve Line Up","Move Line Down","Move &&Line Down","Sort Lines Ascending","Sort Lines Descending","Delete Duplicate Lines","Trim Trailing Whitespace","Delete Line","Indent Line","Outdent Line","Insert Line Above","Insert Line Below","Delete All Left","Delete All Right","Join Lines","Transpose Characters around the Cursor","Transform to Uppercase","Transform to Lowercase","Transform to Title Case","Transform to Snake Case","Transform to Camel Case","Transform to Kebab Case"],"vs/editor/contrib/linkedEditing/browser/linkedEditing":["Start Linked Editing","Background color when the editor auto renames on type."],"vs/editor/contrib/links/browser/links":["Failed to open this link because it is not well-formed: {0}","Failed to open this link because its target is missing.","Execute command","Follow link","cmd + click","ctrl + click","option + click","alt + click","Execute command {0}","Open Link"],"vs/editor/contrib/multicursor/browser/multicursor":["Cursor added: {0}","Cursors added: {0}","Add Cursor Above","&&Add Cursor Above","Add Cursor Below","A&&dd Cursor Below","Add Cursors to Line Ends","Add C&&ursors to Line Ends","Add Cursors To Bottom","Add Cursors To Top","Add Selection To Next Find Match","Add &&Next Occurrence","Add Selection To Previous Find Match","Add P&&revious Occurrence","Move Last Selection To Next Find Match","Move Last Selection To Previous Find Match","Select All Occurrences of Find Match","Select All &&Occurrences","Change All Occurrences","Focus Next Cursor","Focuses the next cursor","Focus Previous Cursor","Focuses the previous cursor"],"vs/editor/contrib/parameterHints/browser/parameterHints":["Trigger Parameter Hints"],"vs/editor/contrib/rename/browser/rename":["No result.","An unknown error occurred while resolving rename location","Renaming \'{0}\' to \'{1}\'","Renaming {0} to {1}","Successfully renamed \'{0}\' to \'{1}\'. Summary: {2}","Rename failed to apply edits","Rename failed to compute edits","Rename Symbol","Enable/disable the ability to preview changes before renaming"],"vs/editor/contrib/smartSelect/browser/smartSelect":["Expand Selection","&&Expand Selection","Shrink Selection","&&Shrink Selection"],"vs/editor/contrib/snippet/browser/snippetController2":["Whether the editor in current in snippet mode","Whether there is a next tab stop when in snippet mode","Whether there is a previous tab stop when in snippet mode","Go to next placeholder..."],"vs/editor/contrib/tokenization/browser/tokenization":["Developer: Force Retokenize"],"vs/editor/contrib/suggest/browser/suggestController":["Accepting \'{0}\' made {1} additional edits","Trigger Suggest","Insert","Insert","Replace","Replace","Insert","show less","show more","Reset Suggest Widget Size"],"vs/editor/contrib/toggleTabFocusMode/browser/toggleTabFocusMode":["Toggle Tab Key Moves Focus","Pressing Tab will now move focus to the next focusable element","Pressing Tab will now insert the tab character"],"vs/editor/contrib/unicodeHighlighter/browser/unicodeHighlighter":["Icon shown with a warning message in the extensions editor.","This document contains many non-basic ASCII unicode characters","This document contains many ambiguous unicode characters","This document contains many invisible unicode characters","The character {0} could be confused with the ASCII character {1}, which is more common in source code.","The character {0} could be confused with the character {1}, which is more common in source code.","The character {0} is invisible.","The character {0} is not a basic ASCII character.","Adjust settings","Disable Highlight In Comments","Disable highlighting of characters in comments","Disable Highlight In Strings","Disable highlighting of characters in strings","Disable Ambiguous Highlight","Disable highlighting of ambiguous characters","Disable Invisible Highlight","Disable highlighting of invisible characters","Disable Non ASCII Highlight","Disable highlighting of non basic ASCII characters","Show Exclude Options","Exclude {0} (invisible character) from being highlighted","Exclude {0} from being highlighted","Allow unicode characters that are more common in the language \\"{0}\\".","Configure Unicode Highlight Options"],"vs/editor/contrib/unusualLineTerminators/browser/unusualLineTerminators":["Unusual Line Terminators","Detected unusual line terminators","The file \'{0}\' contains one or more unusual line terminator characters, like Line Separator (LS) or Paragraph Separator (PS).\\n\\nIt is recommended to remove them from the file. This can be configured via `editor.unusualLineTerminators`.","&&Remove Unusual Line Terminators","Ignore"],"vs/editor/contrib/wordHighlighter/browser/wordHighlighter":["Go to Next Symbol Highlight","Go to Previous Symbol Highlight","Trigger Symbol Highlight"],"vs/editor/contrib/wordOperations/browser/wordOperations":["Delete Word"],"vs/editor/contrib/readOnlyMessage/browser/contribution":["Cannot edit in read-only input","Cannot edit in read-only editor"],"vs/editor/common/standaloneStrings":["Accessibility Help","Opening the Accessibility documentation page.","You are in a read-only pane of a diff editor.","You are in a pane of a diff editor.","You are in a read-only code editor.","You are in a code editor.","Configure the application to be optimized for usage with a Screen Reader (Command+E).","Configure the application to be optimized for usage with a Screen Reader (Control+E).","The application is configured to be optimized for usage with a Screen Reader.","The application is configured to never be optimized for usage with a Screen Reader.","Screen Reader Optimized Mode enabled.","Screen Reader Optimized Mode disabled.","Pressing Tab in the current editor will move focus to the next focusable element. Toggle this behavior {0}.","Pressing Tab in the current editor will move focus to the next focusable element. The command {0} is currently not triggerable by a keybinding.","Focus Sticky Scroll ({0}) to focus the currently nested scopes.","Focus Sticky Scroll to focus the currently nested scopes. It is currently not triggerable by a keybinding.","Pressing Tab in the current editor will insert the tab character. Toggle this behavior {0}.","Pressing Tab in the current editor will insert the tab character. The command {0} is currently not triggerable by a keybinding.","Show Accessibility Help","`audioCues.save` is disabled, so an alert will occur when a file is saved.","`audioCues.save` is enabled, so will play whenever a file is saved.","`audioCues.save` is enabled, so will play when a file is saved via user gesture.","`audioCues.format` is disabled, so an alert will occur when a file is formatted.","`audioCues.format` is enabled, so will play whenever a file is formatted.","`audioCues.format` is enabled, so will play when a file is formatted via user gesture.","Developer: Inspect Tokens","Go to Line/Column...","Show all Quick Access Providers","Command Palette","Show And Run Commands","Go to Symbol...","Go to Symbol by Category...","Editor content","Press Alt+F1 for Accessibility Options.","Toggle High Contrast Theme","Made {0} edits in {1} files"],"vs/workbench/browser/parts/auxiliarybar/auxiliaryBarActions":["Icon to toggle the auxiliary bar off in its right position.","Icon to toggle the auxiliary bar on in its right position.","Icon to toggle the auxiliary bar in its left position.","Icon to toggle the auxiliary bar on in its left position.","Toggle Secondary Side Bar Visibility","Secondary Side Bar","Secondary Si&&de Bar","Focus into Secondary Side Bar","Toggle Secondary Side Bar","Toggle Secondary Side Bar","Hide Secondary Side Bar"],"vs/workbench/browser/parts/panel/panelActions":["Icon to maximize a panel.","Icon to restore a panel.","Icon to close a panel.","Icon to toggle the panel off when it is on.","Icon to toggle the panel on when it is off.","Toggle Panel Visibility","Panel","&&Panel","Focus into Panel","Focus into Panel","Move Panel Left","Left","Move Panel Right","Right","Move Panel To Bottom","Bottom","Set Panel Alignment to Left","Left","Set Panel Alignment to Right","Right","Set Panel Alignment to Center","Center","Set Panel Alignment to Justify","Justify","Panel Position","Align Panel","Previous Panel View","Next Panel View","Toggle Maximized Panel","Maximize Panel Size","Restore Panel Size","Maximizing the panel is only supported when it is center aligned.","Close Panel","Close Secondary Side Bar","Toggle Panel","Hide Panel","Move Panel Views To Secondary Side Bar","Move Panel Views To Secondary Side Bar","Move Secondary Side Bar Views To Panel","Move Secondary Side Bar Views To Panel"],"vs/workbench/browser/quickaccess":["Whether keyboard focus is inside the quick open control"],"vs/workbench/api/common/jsonValidationExtensionPoint":["Contributes json schema configuration.","The file pattern (or an array of patterns) to match, for example \\"package.json\\" or \\"*.launch\\". Exclusion patterns start with \'!\'","A schema URL (\'http:\', \'https:\') or relative path to the extension folder (\'./\').","\'configuration.jsonValidation\' must be a array","\'configuration.jsonValidation.fileMatch\' must be defined as a string or an array of strings.","\'configuration.jsonValidation.url\' must be a URL or relative path","Expected `contributes.{0}.url` ({1}) to be included inside extension\'s folder ({2}). This might make the extension non-portable.","\'configuration.jsonValidation.url\' is an invalid relative URL: {0}","\'configuration.jsonValidation.url\' must be an absolute URL or start with \'./\'  to reference schemas located in the extension."],"vs/workbench/services/themes/common/iconExtensionPoint":["Contributes extension defined themable icons","The identifier of the themable icon","Identifiers can only contain letters, digits and minuses and need to consist of at least two segments in the form `component-iconname`.","The description of the themable icon","The path of the icon font that defines the icon.","The character for the icon in the icon font.","The default of the icon. Either a reference to an extisting ThemeIcon or an icon in an icon font.","\'configuration.icons\' must be an object with the icon names as properties.","\'configuration.icons\' keys represent the icon id and can only contain letter, digits and minuses. They need to consist of at least two segments in the form `component-iconname`.","\'configuration.icons.description\' must be defined and can not be empty","Expected `contributes.icons.default.fontPath` to have file extension \'woff\', woff2\' or \'ttf\', is \'{0}\'.","Expected `contributes.icons.default.fontPath` ({0}) to be included inside extension\'s folder ({0}).","\'configuration.icons.default\' must be either a reference to the id of an other theme icon (string) or a icon definition (object) with properties `fontPath` and `fontCharacter`."],"vs/workbench/services/themes/common/colorExtensionPoint":["Contributes extension defined themable colors","The identifier of the themable color","Identifiers must only contain letters, digits and dots and can not start with a dot","The description of the themable color","The default color for light themes. Either a color value in hex (#RRGGBB[AA]) or the identifier of a themable color which provides the default.","The default color for dark themes. Either a color value in hex (#RRGGBB[AA]) or the identifier of a themable color which provides the default.","The default color for high contrast dark themes. Either a color value in hex (#RRGGBB[AA]) or the identifier of a themable color which provides the default. If not provided, the `dark` color is used as default for high contrast dark themes.","The default color for high contrast light themes. Either a color value in hex (#RRGGBB[AA]) or the identifier of a themable color which provides the default. If not provided, the `light` color is used as default for high contrast light themes.","\'configuration.colors\' must be a array","{0} must be either a color value in hex (#RRGGBB[AA] or #RGB[A]) or the identifier of a themable color which provides the default.","\'configuration.colors.id\' must be defined and can not be empty","\'configuration.colors.id\' must only contain letters, digits and dots and can not start with a dot","\'configuration.colors.description\' must be defined and can not be empty","\'configuration.colors.defaults\' must be defined and must contain \'light\' and \'dark\'","If defined, \'configuration.colors.defaults.highContrast\' must be a string.","If defined, \'configuration.colors.defaults.highContrastLight\' must be a string."],"vs/workbench/services/themes/common/tokenClassificationExtensionPoint":["Contributes semantic token types.","The identifier of the semantic token type","Identifiers should be in the form letterOrDigit[_-letterOrDigit]*","The super type of the semantic token type","Super types should be in the form letterOrDigit[_-letterOrDigit]*","The description of the semantic token type","Contributes semantic token modifiers.","The identifier of the semantic token modifier","Identifiers should be in the form letterOrDigit[_-letterOrDigit]*","The description of the semantic token modifier","Contributes semantic token scope maps.","Lists the languge for which the defaults are.","Maps a semantic token (described by semantic token selector) to one or more textMate scopes used to represent that token.","\'configuration.{0}.id\' must be defined and can not be empty","\'configuration.{0}.id\' must follow the pattern letterOrDigit[-_letterOrDigit]*","\'configuration.{0}.superType\' must follow the pattern letterOrDigit[-_letterOrDigit]*","\'configuration.{0}.description\' must be defined and can not be empty","\'configuration.semanticTokenType\' must be an array","\'configuration.semanticTokenModifier\' must be an array","\'configuration.semanticTokenScopes\' must be an array","\'configuration.semanticTokenScopes.language\' must be a string","\'configuration.semanticTokenScopes.scopes\' must be defined as an object","\'configuration.semanticTokenScopes.scopes\' values must be an array of strings","configuration.semanticTokenScopes.scopes\': Problems parsing selector {0}."],"vs/workbench/contrib/codeEditor/browser/languageConfigurationExtensionPoint":["Errors parsing {0}: {1}","{0}: Invalid format, JSON object expected.","The opening bracket character or string sequence.","The closing bracket character or string sequence.","Defines the comment symbols","Defines how block comments are marked.","The character sequence that starts a block comment.","The character sequence that ends a block comment.","The character sequence that starts a line comment.","Defines the bracket symbols that increase or decrease the indentation. When bracket pair colorization is enabled and {0} is not defined, this also defines the bracket pairs that are colorized by their nesting level.","Defines the bracket pairs that are colorized by their nesting level if bracket pair colorization is enabled. Any brackets included here that are not included in {0} will be automatically included in {0}.","Defines the bracket pairs. When a opening bracket is entered, the closing bracket is inserted automatically.","Defines a list of scopes where the auto pairs are disabled.","Defines what characters must be after the cursor in order for bracket or quote autoclosing to occur when using the \'languageDefined\' autoclosing setting. This is typically the set of characters which can not start an expression.","Defines the bracket pairs that can be used to surround a selected string.","Defines what is considered to be a word in the programming language.","The RegExp pattern used to match words.","The RegExp flags used to match words.","Must match the pattern `/^([gimuy]+)$/`.","The language\'s indentation settings.","If a line matches this pattern, then all the lines after it should be indented once (until another rule matches).","The RegExp pattern for increaseIndentPattern.","The RegExp flags for increaseIndentPattern.","Must match the pattern `/^([gimuy]+)$/`.","If a line matches this pattern, then all the lines after it should be unindented once (until another rule matches).","The RegExp pattern for decreaseIndentPattern.","The RegExp flags for decreaseIndentPattern.","Must match the pattern `/^([gimuy]+)$/`.","If a line matches this pattern, then **only the next line** after it should be indented once.","The RegExp pattern for indentNextLinePattern.","The RegExp flags for indentNextLinePattern.","Must match the pattern `/^([gimuy]+)$/`.","If a line matches this pattern, then its indentation should not be changed and it should not be evaluated against the other rules.","The RegExp pattern for unIndentedLinePattern.","The RegExp flags for unIndentedLinePattern.","Must match the pattern `/^([gimuy]+)$/`.","The language\'s folding settings.","A language adheres to the off-side rule if blocks in that language are expressed by their indentation. If set, empty lines belong to the subsequent block.","Language specific folding markers such as \'#region\' and \'#endregion\'. The start and end regexes will be tested against the contents of all lines and must be designed efficiently","The RegExp pattern for the start marker. The regexp must start with \'^\'.","The RegExp pattern for the end marker. The regexp must start with \'^\'.","The language\'s rules to be evaluated when pressing Enter.","The language\'s rules to be evaluated when pressing Enter.","This rule will only execute if the text before the cursor matches this regular expression.","The RegExp pattern for beforeText.","The RegExp flags for beforeText.","Must match the pattern `/^([gimuy]+)$/`.","This rule will only execute if the text after the cursor matches this regular expression.","The RegExp pattern for afterText.","The RegExp flags for afterText.","Must match the pattern `/^([gimuy]+)$/`.","This rule will only execute if the text above the line matches this regular expression.","The RegExp pattern for previousLineText.","The RegExp flags for previousLineText.","Must match the pattern `/^([gimuy]+)$/`.","The action to execute.","Describe what to do with the indentation","Insert new line and copy the previous line\'s indentation.","Insert new line and indent once (relative to the previous line\'s indentation).","Insert two new lines:\\n - the first one indented which will hold the cursor\\n - the second one at the same indentation level","Insert new line and outdent once (relative to the previous line\'s indentation).","Describes text to be appended after the new line and after the indentation.","Describes the number of characters to remove from the new line\'s indentation."],"vs/workbench/api/browser/statusBarExtensionPoint":["The identifier of the status bar entry. Must be unique within the extension. The same value must be used when calling the `vscode.window.createStatusBarItem(id, ...)`-API","The name of the entry, like \'Python Language Indicator\', \'Git Status\' etc. Try to keep the length of the name short, yet descriptive enough that users can understand what the status bar item is about.","The text to show for the entry. You can embed icons in the text by leveraging the `$(<name>)`-syntax, like \'Hello $(globe)!\'","The tooltip text for the entry.","The command to execute when the status bar entry is clicked.","The alignment of the status bar entry.","The priority of the status bar entry. Higher value means the item should be shown more to the left.","Defines the role and aria label to be used when the status bar entry is focused.","The role of the status bar entry which defines how a screen reader interacts with it. More about aria roles can be found here https://w3c.github.io/aria/#widget_roles","The aria label of the status bar entry. Defaults to the entry\'s text.","Contributes items to the status bar.","Invalid status bar item contribution."],"vs/workbench/api/browser/mainThreadCLICommands":["Cannot install the \'{0}\' extension because it is declared to not run in this setup."],"vs/workbench/api/browser/mainThreadExtensionService":["Cannot activate the \'{0}\' extension because it depends on the \'{1}\' extension, which is not loaded. Would you like to reload the window to load the extension?","Reload Window","Cannot activate the \'{0}\' extension because it depends on the \'{1}\' extension which is not supported in the current workspace","Cannot activate the \'{0}\' extension because it depends on the \'{1}\' extension which is not supported in Restricted Mode","Manage Workspace Trust","Cannot activate the \'{0}\' extension because it depends on the \'{1}\' extension which is disabled. Would you like to enable the extension and reload the window?","Enable and Reload","Cannot activate the \'{0}\' extension because it depends on the \'{1}\' extension which is disabled.","Cannot activate the \'{0}\' extension because it depends on the \'{1}\' extension from \'{2}\', which is not installed. Would you like to install the extension and reload the window?","Install and Reload","Cannot activate the \'{0}\' extension because it depends on an unknown \'{1}\' extension."],"vs/workbench/api/browser/mainThreadFileSystemEventService":["Extension \'{0}\' wants to make refactoring changes with this file creation","Extension \'{0}\' wants to make refactoring changes with this file copy","Extension \'{0}\' wants to make refactoring changes with this file move","Extension \'{0}\' wants to make refactoring changes with this file deletion","{0} extensions want to make refactoring changes with this file creation","{0} extensions want to make refactoring changes with this file copy","{0} extensions want to make refactoring changes with this file move","{0} extensions want to make refactoring changes with this file deletion","Show &&Preview","Skip Changes","&&OK","Show &&Preview","Skip Changes","Don\'t ask again","Running \'File Create\' participants...","Running \'File Rename\' participants...","Running \'File Copy\' participants...","Running \'File Delete\' participants...","Running \'File Write\' participants...","Reset choice for \'File operation needs preview\'"],"vs/workbench/api/browser/mainThreadMessageService":["{0} (Extension)","Extension","Manage Extension","Cancel","&&OK"],"vs/workbench/api/browser/mainThreadProgress":["Manage Extension"],"vs/workbench/api/browser/mainThreadSaveParticipant":["Aborted onWillSaveTextDocument-event after 1750ms"],"vs/workbench/api/browser/mainThreadEditSessionIdentityParticipant":["Aborted onWillCreateEditSessionIdentity-event after 10000ms"],"vs/workbench/api/browser/mainThreadUriOpeners":["Open using default opener","Could not open uri with \'{0}\': {1}"],"vs/workbench/api/browser/mainThreadWorkspace":["Extension \'{0}\' added 1 folder to the workspace","Extension \'{0}\' added {1} folders to the workspace","Extension \'{0}\' removed 1 folder from the workspace","Extension \'{0}\' removed {1} folders from the workspace","Extension \'{0}\' changed folders of the workspace"],"vs/workbench/api/browser/mainThreadComments":["View icon of the comments view."],"vs/workbench/api/browser/mainThreadNotebookSaveParticipant":["Aborted onWillSaveNotebookDocument-event after 1750ms"],"vs/workbench/api/browser/mainThreadTask":["{0}: {1}"],"vs/workbench/api/browser/mainThreadTunnelService":["The extension {0} has forwarded port {1}. You\'ll need to run as superuser to use port {2} locally.","Use Port {0} as Sudo..."],"vs/workbench/api/browser/mainThreadAuthentication":["This account has not been used by any extensions.","Cancel","Last used this account {0}","Has not used this account","Manage Trusted Extensions","Choose which extensions can access this account","The account \'{0}\' has been used by: \\n\\n{1}\\n\\n Sign out from these extensions?","Sign out of \'{0}\'?","&&Sign Out","Successfully signed out.","The extension \'{0}\' wants you to sign in again using {1}.","The extension \'{0}\' wants to sign in using {1}.","&&Allow"],"vs/workbench/services/extensions/common/extensionsRegistry":["UI extension kind. In a remote window, such extensions are enabled only when available on the local machine.","Workspace extension kind. In a remote window, such extensions are enabled only when available on the remote.","Engine compatibility.","For VS Code extensions, specifies the VS Code version that the extension is compatible with. Cannot be *. For example: ^0.10.5 indicates compatibility with a minimum VS Code version of 0.10.5.","The publisher of the VS Code extension.","The display name for the extension used in the VS Code gallery.","The categories used by the VS Code gallery to categorize the extension.","Use \'Programming  Languages\' instead","Banner used in the VS Code marketplace.","The banner color on the VS Code marketplace page header.","The color theme for the font used in the banner.","All contributions of the VS Code extension represented by this package.","Sets the extension to be flagged as a Preview in the Marketplace.","Use `enabledApiProposals` instead.","Enable API proposals to try them out. Only valid **during development**. Extensions **cannot be published** with this property. For more details visit: https://code.visualstudio.com/api/advanced-topics/using-proposed-api","Describe the API provided by this extension. For more details visit: https://code.visualstudio.com/api/advanced-topics/remote-extensions#handling-dependencies-with-remote-extensions","Give up entirely the ability to export any APIs. This allows other extensions that depend on this extension to run in a separate extension host process or in a remote machine.","Activation events for the VS Code extension.","An activation event emmited when a webview is loaded of a certain viewType","An activation event emitted whenever a file that resolves to the specified language gets opened.","An activation event emitted whenever the specified command gets invoked.","An activation event emitted whenever a user is about to start debugging or about to setup debug configurations.","An activation event emitted whenever a \\"launch.json\\" needs to be created (and all provideDebugConfigurations methods need to be called).","An activation event emitted whenever a list of all debug configurations needs to be created (and all provideDebugConfigurations methods for the \\"dynamic\\" scope need to be called).","An activation event emitted whenever a debug session with the specific type is about to be launched (and a corresponding resolveDebugConfiguration method needs to be called).","An activation event emitted whenever a debug session with the specific type is about to be launched and a debug protocol tracker might be needed.","An activation event emitted whenever a folder is opened that contains at least a file matching the specified glob pattern.","An activation event emitted after the start-up finished (after all `*` activated extensions have finished activating).","An activation event emitted whenever tasks of a certain type need to be listed or resolved.","An activation event emitted whenever a file or folder is accessed with the given scheme.","An activation event emitted whenever an edit session is accessed with the given scheme.","An activation event emitted whenever a search is started in the folder with the given scheme.","An activation event emitted whenever the specified view is expanded.","An activation event emitted whenever a system-wide Uri directed towards this extension is open.","An activation event emitted whenever a external uri (such as an http or https link) is being opened.","An activation event emitted whenever the specified custom editor becomes visible.","An activation event emitted whenever the specified notebook document is opened.","An activation event emitted whenever sessions are requested from the specified authentication provider.","An activation event emitted whenever a notebook output renderer is used.","An activation event emitted when a specific terminal profile is launched.","An activation event emitted when a command matches the selector associated with this ID","An activation event emitted when a specified walkthrough is opened.","An activation event emitted on VS Code startup. To ensure a great end user experience, please use this activation event in your extension only when no other activation events combination works in your use-case.","Array of badges to display in the sidebar of the Marketplace\'s extension page.","Badge image URL.","Badge link.","Badge description.","Controls the Markdown rendering engine used in the Marketplace. Either github (default) or standard.","Controls the Q&A link in the Marketplace. Set to marketplace to enable the default Marketplace Q & A site. Set to a string to provide the URL of a custom Q & A site. Set to false to disable Q & A altogether.","Dependencies to other extensions. The identifier of an extension is always ${publisher}.${name}. For example: vscode.csharp.","A set of extensions that can be installed together. The identifier of an extension is always ${publisher}.${name}. For example: vscode.csharp.","Define the kind of an extension. `ui` extensions are installed and run on the local machine while `workspace` extensions run on the remote.","Define an extension which can run only on the local machine when connected to remote window.","Define an extension which can run only on the remote machine when connected remote window.","Define an extension which can run on either side, with a preference towards running on the local machine.","Define an extension which can run on either side, with a preference towards running on the remote machine.","Define an extension which cannot run in a remote context, neither on the local, nor on the remote machine.","Declare the set of supported capabilities by the extension.","Declares whether the extension should be enabled in virtual workspaces. A virtual workspace is a workspace which is not backed by any on-disk resources. When false, this extension will be automatically disabled in virtual workspaces. Default is true.","Declares the level of support for virtual workspaces by the extension.","The extension will be enabled in virtual workspaces with some functionality disabled.","The extension will be enabled in virtual workspaces with all functionality enabled.","The extension will not be enabled in virtual workspaces.","A description of how virtual workspaces affects the extensions behavior and why it is needed. This only applies when `supported` is not `true`.","Declares how the extension should be handled in untrusted workspaces.","Declares the level of support for untrusted workspaces by the extension.","The extension will be enabled in untrusted workspaces with some functionality disabled.","The extension will be enabled in untrusted workspaces with all functionality enabled.","The extension will not be enabled in untrusted workspaces.","A list of configuration keys contributed by the extension that should not use workspace values in untrusted workspaces.","A description of how workspace trust affects the extensions behavior and why it is needed. This only applies when `supported` is not `true`.","Specify the location from where users can sponsor your extension.","URL from where users can sponsor your extension. It must be a valid URL with a HTTP or HTTPS protocol. Example value: https://github.com/sponsors/nvaccess","Script executed before the package is published as a VS Code extension.","Uninstall hook for VS Code extension. Script that gets executed when the extension is completely uninstalled from VS Code which is when VS Code is restarted (shutdown and start) after the extension is uninstalled. Only Node scripts are supported.","The path to a 128x128 pixel icon.","The relative path to a folder containing localization (bundle.l10n.*.json) files. Must be specified if you are using the vscode.l10n API.","The pricing information for the extension. Can be Free (default) or Trial. For more details visit: https://code.visualstudio.com/api/working-with-extensions/publishing-extension#extension-pricing-label","API proposals that the respective extensions can freely use."],"vs/workbench/browser/parts/titlebar/windowTitle":["[Administrator]","[Superuser]","[Extension Development Host]"],"vs/workbench/browser/parts/views/treeView":["There is no data provider registered that can provide view data.","Whether the the tree view with id {0} enables collapse all.","Whether the tree view with id {0} enables refresh.","Refresh","Collapse All","Whether collapse all is toggled for the tree view with id {0}.","Error running command {1}: {0}. This is likely caused by the extension that contributes {1}."],"vs/workbench/contrib/debug/common/debug":["Debug type of the active debug session. For example \'python\'.","Debug type of the selected launch configuration. For example \'python\'.","State that the focused debug session is in. One of the following: \'inactive\', \'initializing\', \'stopped\' or \'running\'.","Debug UX state. When there are no debug configurations it is \'simple\', otherwise \'default\'. Used to decide when to show welcome views in the debug viewlet.","True when a debug session has been started at least once, false otherwise.","True when debugging, false otherwise.","True when focus is in the debug console, false otherwise.","True when breakpoint editor zone widget is visible, false otherwise.","True when focus is in the breakpoint editor zone widget, false otherwise.","True when the BREAKPOINTS view is focused, false otherwise.","True when the WATCH view is focused, false otherwsie.","True when at least one watch expression exists, false otherwise.","True when the VARIABLES views is focused, false otherwsie","True when an expression input box is open in either the WATCH or the VARIABLES view, false otherwise.","True when the input box has focus in the BREAKPOINTS view.","Represents the item type of the focused element in the CALL STACK view. For example: \'session\', \'thread\', \'stackFrame\'","True when the session in the CALL STACK view is attach, false otherwise. Used internally for inline menus in the CALL STACK view.","True when the focused item in the CALL STACK is stopped. Used internaly for inline menus in the CALL STACK view.","True when the focused session in the CALL STACK view has exactly one thread. Used internally for inline menus in the CALL STACK view.","Represents the item type of the focused element in the WATCH view. For example: \'expression\', \'variable\'","Indicates whether the item in the view has an associated memory refrence.","Represents the item type of the focused element in the BREAKPOINTS view. For example: \'breakpoint\', \'exceptionBreakppint\', \'functionBreakpoint\', \'dataBreakpoint\'","True when the focused breakpoint supports conditions.","True when the focused sessions supports the LOADED SCRIPTS view","Represents the item type of the focused element in the LOADED SCRIPTS view.","True when the focused session is \'attach\'.","True when the focused session supports \'stepBack\' requests.","True when the focused session supports \'restartFrame\' requests.","True when the focused stack frame suppots \'restartFrame\'.","True when the focused session supports \'jumpToCursor\' request.","True when the focused session supports \'stepIntoTargets\' request.","True when at least one breakpoint exists.","True when there is at least one debug extensions active.","True when there is at least one debug extension installed and enabled.","Represents the context the debug adapter sets on the focused variable in the VARIABLES view.","True when the focused session supports \'setVariable\' request.","True when the focused session supports \'setExpression\' request.","True when the focused session supports to break when value changes.","True when the focused breakpoint supports to break when value is accessed.","True when the focused breakpoint supports to break when value is read.","True when the focused session supports the terminate debuggee capability.","True when the focused session supports the suspend debuggee capability.","True when the focused variable has an \'evalauteName\' field set.","True when the focused variable is read-only.","True when the exception widget is visible.","True when there is more than 1 debug console.","True when there is more than 1 active debug session.","True when the focused sessions supports disassemble request.","True when the Disassembly View is focused.","True when the language in the current editor supports disassemble request.","True when the focused stack frame has instruction pointer reference.","Configured debug type \'{0}\' is installed but not supported in this environment.","Controls when the internal Debug Console should open."],"vs/workbench/browser/parts/views/viewPaneContainer":["Views","Move View Up","Move View Left","Move View Down","Move View Right","Move Views"],"vs/workbench/contrib/files/common/files":["True when the EXPLORER viewlet is visible.","True when the FOLDERS view (the file tree within the explorer view container) is visible.","True when the focused item in the EXPLORER is a folder.","True when the focused item in the EXPLORER is read-only.","True when the focused item in the EXPLORER is a root folder.","True when an item in the EXPLORER has been cut for cut and paste.","True when the focused item in the EXPLORER can be moved to trash.","True when the focus is inside the EXPLORER view.","True when the focus is inside the OPEN EDITORS view.","True when the focus is inside the EXPLORER viewlet.","True when the focused item in the EXPLORER view is a compact item.","True when the focus is inside a compact item\'s first part in the EXPLORER view.","True when the focus is inside a compact item\'s last part in the EXPLORER view.","True when a workspace in the EXPLORER view has some collapsible root child."],"vs/workbench/contrib/remote/browser/remoteExplorer":["No forwarded ports. Forward a port to access your running services locally.\\n[Forward a Port]({0})","No forwarded ports. Forward a port to access your locally running services over the internet.\\n[Forward a Port]({0})","Ports","1 forwarded port","{0} forwarded ports","No Ports Forwarded","Forwarded Ports: {0}","Forwarded Ports","Your application running on port {0} is available.  ","[See all forwarded ports]({0})","You\'ll need to run as superuser to use port {0} locally.  ","Make Public","Use Port {0} as Sudo..."],"vs/workbench/common/editor/sideBySideEditorInput":["{0} - {1}"],"vs/workbench/browser/parts/editor/sideBySideEditor":["Side by Side Editor"],"vs/workbench/common/editor/diffEditorInput":["{0} ↔ {1}"],"vs/workbench/browser/parts/editor/textDiffEditor":["Text Diff Editor","At least one file is not displayed in the text compare editor because it is very large ({0}).","At least one file is not displayed in the text compare editor because it is very large."],"vs/workbench/browser/parts/editor/binaryDiffEditor":["{0} ↔ {1}"],"vs/workbench/browser/parts/editor/editorStatus":["Ln {0}, Col {1} ({2} selected)","Ln {0}, Col {1}","{0} selections ({1} characters selected)","{0} selections","LF","CRLF","No text editor active at this time","The active code editor is read-only.","convert file","change view","Select Action","Tab Moves Focus","Accessibility Mode","Disable Accessibility Mode","Column Selection","Column Selection Mode","Disable Column Selection Mode","Editor Selection","Go to Line/Column","Editor Indentation","Select Indentation","Editor Encoding","Select Encoding","Editor End of Line","Select End of Line Sequence","Editor Language","Select Language Mode","File Information","File Information","Spaces: {0}","Spaces: {0} (Tab Size: {1})","Tab Size: {0}","Current Problem","Current Problem","Search Marketplace Extensions for \'{0}\'...","Change Language Mode","No text editor active at this time","({0}) - Configured Language","({0})","languages (identifier)","Configure \'{0}\' language based settings...","Configure File Association for \'{0}\'...","Auto Detect","Select Language Mode","Current Association","Select Language Mode to Associate with \'{0}\'","Change End of Line Sequence","No text editor active at this time","The active code editor is read-only.","Select End of Line Sequence","Change File Encoding","No text editor active at this time","No text editor active at this time","No file active at this time","Save with Encoding","Reopen with Encoding","Select Action","Guessed from content","Select File Encoding to Reopen File","Select File Encoding to Save with"],"vs/workbench/browser/parts/editor/editorCommands":["Move the active editor by tabs or groups","Active editor move argument","Argument Properties:\\n\\t* \'to\': String value providing where to move.\\n\\t* \'by\': String value providing the unit for move (by tab or by group).\\n\\t* \'value\': Number value providing how many positions or an absolute position to move.","Copy the active editor by groups","Active editor copy argument","Argument Properties:\\n\\t* \'to\': String value providing where to copy.\\n\\t* \'value\': Number value providing how many positions or an absolute position to copy.","Go to Next Change","Go to Previous Change","Toggle Inline View","Compare","Split Editor in Group","Join Editor in Group","Toggle Split Editor in Group","Toggle Layout of Split Editor in Group","Focus First Side in Active Editor","Focus Second Side in Active Editor","Focus Other Side in Active Editor","Toggle Editor Group Lock","Lock Editor Group","Unlock Editor Group"],"vs/workbench/browser/parts/editor/editorActions":["Split Editor","Split Editor Orthogonal","Split Editor Left","Split Editor Right","Split Editor Up","Split Editor Up","Split Editor Down","Split Editor Down","Join Editor Group with Next Group","Join All Editor Groups","Navigate Between Editor Groups","Focus Active Editor Group","Focus First Editor Group","Focus Last Editor Group","Focus Next Editor Group","Focus Previous Editor Group","Focus Left Editor Group","Focus Right Editor Group","Focus Editor Group Above","Focus Editor Group Below","Close Editor","Unpin Editor","Close","Revert and Close Editor","Close Editors to the Left in Group","Close All Editors","Close All Editor Groups","Close Editors in Other Groups","Close Editor in All Groups","Move Editor Group Left","Move Editor Group Right","Move Editor Group Up","Move Editor Group Down","Duplicate Editor Group Left","Duplicate Editor Group Right","Duplicate Editor Group Up","Duplicate Editor Group Down","Expand Editor Group","Reset Editor Group Sizes","Toggle Editor Group Sizes","Maximize Editor Group and Hide Side Bars","Toggle Maximize Editor Group","Open Next Editor","Open Previous Editor","Open Next Editor in Group","Open Previous Editor in Group","Open First Editor in Group","Open Last Editor in Group","Go Forward","Go Forward","&&Forward","Go Back","Go Back","&&Back","Go Previous","Go Forward in Edit Locations","Go Back in Edit Locations","Go Previous in Edit Locations","Go to Last Edit Location","Go Forward in Navigation Locations","Go Back in Navigation Locations","Go Previous in Navigation Locations","Go to Last Navigation Location","Reopen Closed Editor","Clear Recently Opened","Do you want to clear all recently opened files and workspaces?","This action is irreversible!","&&Clear","Show Editors in Active Group By Most Recently Used","Show All Editors By Appearance","Show All Editors By Most Recently Used","Quick Open Previous Recently Used Editor","Quick Open Least Recently Used Editor","Quick Open Previous Recently Used Editor in Group","Quick Open Least Recently Used Editor in Group","Quick Open Previous Editor from History","Open Next Recently Used Editor","Open Previous Recently Used Editor","Open Next Recently Used Editor In Group","Open Previous Recently Used Editor In Group","Clear Editor History","Do you want to clear the history of recently opened editors?","This action is irreversible!","&&Clear","Move Editor Left","Move Editor Right","Move Editor into Previous Group","Move Editor into Next Group","Move Editor into Group Above","Move Editor into Group Below","Move Editor into Left Group","Move Editor into Right Group","Move Editor into First Group","Move Editor into Last Group","Split Editor into Previous Group","Split Editor into Next Group","Split Editor into Group Above","Split Editor into Group Below","Split Editor into Left Group","Split Editor into Left Group","Split Editor into Right Group","Split Editor into First Group","Split Editor into Last Group","Single Column Editor Layout","Two Columns Editor Layout","Three Columns Editor Layout","Two Rows Editor Layout","Three Rows Editor Layout","Grid Editor Layout (2x2)","Two Columns Bottom Editor Layout","Two Rows Right Editor Layout","New Editor Group to the Left","New Editor Group to the Right","New Editor Group Above","New Editor Group Below","Toggle Editor Type","Reopen Editor With Text Editor","Move Active Editor into a New Window (Experimental)","&&Move Active Editor into a New Window (Experimental)"],"vs/editor/browser/editorExtensions":["&&Undo","Undo","&&Redo","Redo","&&Select All","Select All"],"vs/workbench/browser/parts/editor/editorQuickAccess":["No matching editors","{0}, unsaved changes, {1}","{0}, {1}","{0}, unsaved changes","Close Editor"],"vs/workbench/browser/parts/editor/editorConfiguration":["Interactive Window","Markdown Preview","If an editor matching one of the listed types is opened as the first in an editor group and more than one group is open, the group is automatically locked. Locked groups will only be used for opening editors when explicitly chosen by a user gesture (for example drag and drop), but not by default. Consequently, the active editor in a locked group is less likely to be replaced accidentally with a different editor.","The default editor for files detected as binary. If undefined, the user will be presented with a picker.","Configure [glob patterns](https://aka.ms/vscode-glob-patterns) to editors (for example `\\"*.hex\\": \\"hexEditor.hexedit\\"`). These have precedence over the default behavior.","Controls the minimum size of a file in MB before asking for confirmation when opening in the editor. Note that this setting may not apply to all editor types and environments."],"vs/workbench/browser/parts/panel/panelPart":["Panel Position","Align Panel","Hide Panel"],"vs/workbench/browser/parts/sidebar/sidebarPart":["Manage","Accounts"],"vs/workbench/browser/parts/auxiliarybar/auxiliaryBarPart":["Move Secondary Side Bar Left","Move Secondary Side Bar Right","Hide Secondary Side Bar"],"vs/workbench/browser/parts/statusbar/statusbarActions":["Hide \'{0}\'","Focus Status Bar"],"vs/platform/actions/common/menuResetAction":["Reset All Menus"],"vs/platform/actions/common/menuService":["Hide \'{0}\'"],"vs/base/browser/ui/icons/iconSelectBox":["Search icons","No results"],"vs/base/browser/ui/dialog/dialog":["OK","Info","Error","Warning","In Progress","Close Dialog"],"vs/workbench/services/preferences/common/preferencesEditorInput":["Settings"],"vs/workbench/services/preferences/browser/keybindingsEditorInput":["Keyboard Shortcuts"],"vs/workbench/services/preferences/common/preferencesModels":["Commonly Used","Override key bindings by placing them into your key bindings file."],"vs/workbench/services/textfile/common/textFileEditorModel":["File Encoding Changed"],"vs/base/common/keybindingLabels":["Ctrl","Shift","Alt","Windows","Ctrl","Shift","Alt","Super","Control","Shift","Option","Command","Control","Shift","Alt","Windows","Control","Shift","Alt","Super"],"vs/platform/keybinding/common/abstractKeybindingService":["({0}) was pressed. Waiting for second key of chord...","({0}) was pressed. Waiting for next key of chord...","The key combination ({0}, {1}) is not a command.","The key combination ({0}, {1}) is not a command."],"vs/workbench/services/editor/common/editorResolverService":["Configure [glob patterns](https://aka.ms/vscode-glob-patterns) to editors (for example `\\"*.hex\\": \\"hexEditor.hexedit\\"`). These have precedence over the default behavior."],"vs/workbench/services/themes/common/colorThemeData":["Problems parsing JSON theme file: {0}","Invalid format for JSON theme file: Object expected.","Problem parsing color theme file: {0}. Property \'colors\' is not of type \'object\'.","Problem parsing color theme file: {0}. Property \'tokenColors\' should be either an array specifying colors or a path to a TextMate theme file","Problem parsing color theme file: {0}. Property \'semanticTokenColors\' contains a invalid selector","Problem parsing tmTheme file: {0}. \'settings\' is not array.","Problems parsing tmTheme file: {0}","Problems loading tmTheme file {0}: {1}"],"vs/workbench/services/themes/common/fileIconThemeSchema":["The folder icon for expanded folders. The expanded folder icon is optional. If not set, the icon defined for folder will be shown.","The folder icon for collapsed folders, and if folderExpanded is not set, also for expanded folders.","The default file icon, shown for all files that don\'t match any extension, filename or language id.","The folder icon for collapsed root folders, and if rootFolderExpanded is not set, also for expanded root folders.","The folder icon for expanded root folders. The expanded root folder icon is optional. If not set, the icon defined for root folder will be shown.","Associates root folder names to icons. The object key is the root folder name. No patterns or wildcards are allowed. Root folder name matching is case insensitive.","The ID of the icon definition for the association.","Associates root folder names to icons for expanded root folders. The object key is the root folder name. No patterns or wildcards are allowed. Root folder name matching is case insensitive.","The ID of the icon definition for the association.","Associates folder names to icons. The object key is the folder name, not including any path segments. No patterns or wildcards are allowed. Folder name matching is case insensitive.","The ID of the icon definition for the association.","Associates folder names to icons for expanded folders. The object key is the folder name, not including any path segments. No patterns or wildcards are allowed. Folder name matching is case insensitive.","The ID of the icon definition for the association.","Associates file extensions to icons. The object key is the file extension name. The extension name is the last segment of a file name after the last dot (not including the dot). Extensions are compared case insensitive.","The ID of the icon definition for the association.","Associates file names to icons. The object key is the full file name, but not including any path segments. File name can include dots and a possible file extension. No patterns or wildcards are allowed. File name matching is case insensitive.","The ID of the icon definition for the association.","Associates languages to icons. The object key is the language id as defined in the language contribution point.","The ID of the icon definition for the association.","Fonts that are used in the icon definitions.","The ID of the font.","The ID must only contain letter, numbers, underscore and minus.","The location of the font.","The font path, relative to the current file icon theme file.","The format of the font.","The weight of the font. See https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight for valid values.","The style of the font. See https://developer.mozilla.org/en-US/docs/Web/CSS/font-style for valid values.","The default size of the font. See https://developer.mozilla.org/en-US/docs/Web/CSS/font-size for valid values.","Description of all icons that can be used when associating files to icons.","An icon definition. The object key is the ID of the definition.","When using a SVG or PNG: The path to the image. The path is relative to the icon set file.","When using a glyph font: The character in the font to use.","When using a glyph font: The color to use.","When using a font: The font size in percentage to the text font. If not set, defaults to the size in the font definition.","When using a font: The id of the font. If not set, defaults to the first font definition.","Optional associations for file icons in light color themes.","Optional associations for file icons in high contrast color themes.","Configures whether the file explorer\'s arrows should be hidden when this theme is active.","Configures whether the default language icons should be used if the theme does not define an icon for a language."],"vs/workbench/services/themes/browser/fileIconThemeData":["Problems parsing file icons file: {0}","Invalid format for file icons theme file: Object expected."],"vs/workbench/services/themes/common/colorThemeSchema":["Colors and styles for the token.","Foreground color for the token.","Token background colors are currently not supported.","Font style of the rule: \'italic\', \'bold\', \'underline\', \'strikethrough\' or a combination. The empty string unsets inherited settings.","Font style must be \'italic\', \'bold\', \'underline\', \'strikethrough\' or a combination or the empty string.","None (clear inherited style)","Description of the rule.","Scope selector against which this rule matches.","Colors in the workbench","Path to a tmTheme file (relative to the current file).","Colors for syntax highlighting","Whether semantic highlighting should be enabled for this theme.","Colors for semantic tokens"],"vs/workbench/services/themes/common/themeExtensionPoints":["Contributes textmate color themes.","Id of the color theme as used in the user settings.","Label of the color theme as shown in the UI.","Base theme defining the colors around the editor: \'vs\' is the light color theme, \'vs-dark\' is the dark color theme. \'hc-black\' is the dark high contrast theme, \'hc-light\' is the light high contrast theme.","Path of the tmTheme file. The path is relative to the extension folder and is typically \'./colorthemes/awesome-color-theme.json\'.","Contributes file icon themes.","Id of the file icon theme as used in the user settings.","Label of the file icon theme as shown in the UI.","Path of the file icon theme definition file. The path is relative to the extension folder and is typically \'./fileicons/awesome-icon-theme.json\'.","Contributes product icon themes.","Id of the product icon theme as used in the user settings.","Label of the product icon theme as shown in the UI.","Path of the product icon theme definition file. The path is relative to the extension folder and is typically \'./producticons/awesome-product-icon-theme.json\'.","Extension point `{0}` must be an array.","Expected string in `contributes.{0}.path`. Provided value: {1}","Expected string in `contributes.{0}.id`. Provided value: {1}","Expected `contributes.{0}.path` ({1}) to be included inside extension\'s folder ({2}). This might make the extension non-portable."],"vs/workbench/services/themes/browser/productIconThemeData":["Problems processing product icons definitions in {0}:\\n{1}","Default","Problems parsing product icons file: {0}","Invalid format for product icons theme file: Object expected.","Invalid format for product icons theme file: Must contain iconDefinitions and fonts.","Invalid font weight in font \'{0}\'. Ignoring setting.","Invalid font style in font \'{0}\'. Ignoring setting.","Invalid font source in font \'{0}\'. Ignoring source.","No valid font source in font \'{0}\'. Ignoring font definition.","Missing or invalid font id \'{0}\'. Skipping font definition.","Skipping icon definition \'{0}\'. Unknown font.","Skipping icon definition \'{0}\'. Unknown fontCharacter."],"vs/workbench/services/themes/common/themeConfiguration":["Specifies the color theme used in the workbench.","Theme is unknown or not installed.","Specifies the preferred color theme for dark OS appearance when {0} is enabled.","Theme is unknown or not installed.","Specifies the preferred color theme for light OS appearance when {0} is enabled.","Theme is unknown or not installed.","Specifies the preferred color theme used in high contrast dark mode when {0} is enabled.","Theme is unknown or not installed.","Specifies the preferred color theme used in high contrast light mode when {0} is enabled.","Theme is unknown or not installed.","If set, automatically switch to the preferred color theme based on the OS appearance. If the OS appearance is dark, the theme specified at {0} is used, for light {1}.","Overrides colors from the currently selected color theme.","Specifies the file icon theme used in the workbench or \'null\' to not show any file icons.","None","No file icons","File icon theme is unknown or not installed.","Specifies the product icon theme used.","Default","Default","Product icon theme is unknown or not installed.","If enabled, will automatically change to high contrast theme if the OS is using a high contrast theme. The high contrast theme to use is specified by {0} and {1}.","Sets the colors and styles for comments","Sets the colors and styles for strings literals.","Sets the colors and styles for keywords.","Sets the colors and styles for number literals.","Sets the colors and styles for type declarations and references.","Sets the colors and styles for functions declarations and references.","Sets the colors and styles for variables declarations and references.","Sets colors and styles using textmate theming rules (advanced).","Whether semantic highlighting should be enabled for this theme.","Use `enabled` in `editor.semanticTokenColorCustomizations` setting instead.","Use `enabled` in {0} setting instead.","Overrides editor syntax colors and font style from the currently selected color theme.","Whether semantic highlighting is enabled or disabled for this theme","Semantic token styling rules for this theme.","Overrides editor semantic token color and styles from the currently selected color theme."],"vs/workbench/services/themes/common/productIconThemeSchema":["The ID of the font.","The ID must only contain letters, numbers, underscore and minus.","The location of the font.","The font path, relative to the current product icon theme file.","The format of the font.","The weight of the font. See https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight for valid values.","The style of the font. See https://developer.mozilla.org/en-US/docs/Web/CSS/font-style for valid values.","Association of icon name to a font character."],"vs/workbench/services/extensionManagement/browser/extensionBisect":["I can\'t reproduce","I can reproduce","Extension Bisect is active and has disabled 1 extension. Check if you can still reproduce the problem and proceed by selecting from these options.","Extension Bisect is active and has disabled {0} extensions. Check if you can still reproduce the problem and proceed by selecting from these options.","Start Extension Bisect","Extension Bisect","Extension Bisect will use binary search to find an extension that causes a problem. During the process the window reloads repeatedly (~{0} times). Each time you must confirm if you are still seeing problems.","&&Start Extension Bisect","Continue Extension Bisect","Extension Bisect","Extension Bisect is done but no extension has been identified. This might be a problem with {0}.","Extension Bisect","&&Report Issue & Continue","Continue","Extension Bisect is done and has identified {0} as the extension causing the problem.","Keep this extension disabled","Extension Bisect","Extension Bisect is active and has disabled {0} extensions. Check if you can still reproduce the problem and proceed by selecting from these options.","I ca&&n\'t reproduce","I can &&reproduce","&&Stop Bisect","&&Cancel Bisect","Stop Extension Bisect"],"vs/workbench/services/userDataProfile/browser/settingsResource":["Settings"],"vs/workbench/services/userDataProfile/browser/keybindingsResource":["Keyboard Shortcuts"],"vs/workbench/services/userDataProfile/browser/snippetsResource":["Snippets","Select Snippet {0}"],"vs/workbench/services/userDataProfile/browser/tasksResource":["User Tasks"],"vs/workbench/services/userDataProfile/browser/extensionsResource":["Extensions","Disabled","Select {0} Extension","Select {0} Extension"],"vs/workbench/services/userDataProfile/browser/globalStateResource":["UI State"],"vs/workbench/services/userDataProfile/common/userDataProfileIcons":["Settings icon in the view bar."],"vs/workbench/services/workingCopy/common/storedFileWorkingCopySaveParticipant":["Saving \'{0}\'"],"vs/workbench/services/remote/common/tunnelModel":["Whether the Ports view is enabled.","User Forwarded","Auto Forwarded","Local port {0} could not be used for forwarding to remote port {1}.\\n\\nThis usually happens when there is already another process using local port {0}.\\n\\nPort number {2} has been used instead.","Statically Forwarded"],"vs/workbench/services/hover/browser/hoverWidget":["Hold {0} key to mouse over"],"vs/workbench/services/textMate/browser/textMateTokenizationFeatureImpl":["Already Logging.","Stop","Preparing to log TM Grammar parsing. Press Stop when finished.","Now logging TM Grammar parsing. Press Stop when finished.","Unknown language in `contributes.{0}.language`. Provided value: {1}","Expected string in `contributes.{0}.scopeName`. Provided value: {1}","Expected string in `contributes.{0}.path`. Provided value: {1}","Invalid value in `contributes.{0}.injectTo`. Must be an array of language scope names. Provided value: {1}","Invalid value in `contributes.{0}.embeddedLanguages`. Must be an object map from scope name to language. Provided value: {1}","Invalid value in `contributes.{0}.tokenTypes`. Must be an object map from scope name to token type. Provided value: {1}","Expected `contributes.{0}.path` ({1}) to be included inside extension\'s folder ({2}). This might make the extension non-portable."],"vs/workbench/contrib/preferences/browser/keybindingWidgets":["Press desired key combination and then press ENTER.","1 existing command has this keybinding","{0} existing commands have this keybinding","chord to"],"vs/workbench/contrib/performance/browser/perfviewEditor":["Startup Performance"],"vs/workbench/contrib/speech/common/speechService":["A speech provider is registered to the speech service."],"vs/editor/contrib/suggest/browser/suggest":["Whether any suggestion is focused","Whether suggestion details are visible","Whether there are multiple suggestions to pick from","Whether inserting the current suggestion yields in a change or has everything already been typed","Whether suggestions are inserted when pressing Enter","Whether the current suggestion has insert and replace behaviour","Whether the default behaviour is to insert or replace","Whether the current suggestion supports to resolve further details"],"vs/workbench/contrib/preferences/browser/keybindingsEditor":["Record Keys","Sort by Precedence (Highest first)","Type to search in keybindings","Recording Keys. Press Escape to exit","Clear Keybindings Search Input","Recording Keys","Command","Keybinding","When","Source","Showing {0} Keybindings in precedence order","Showing {0} Keybindings in alphabetical order","Change Keybinding...","Add Keybinding...","Add Keybinding...","Change When Expression","Remove Keybinding","Reset Keybinding","Show Same Keybindings","Copy","Copy Command ID","Copy Command Title","Error \'{0}\' while editing the keybinding. Please open \'keybindings.json\' file and check for errors.","Change Keybinding {0}","Change Keybinding","Add Keybinding {0}","Add Keybinding","{0} ({1})","Extension ({0})","Keybindings","No keybinding assigned","No when context","use space or enter to change the keybinding."],"vs/workbench/contrib/preferences/browser/preferencesIcons":["Icon for the folder dropdown button in the split JSON Settings editor.","Icon for the \'more actions\' action in the Settings UI.","Icon for the \'record keys\' action in the keybinding UI.","Icon for the \'sort by precedence\' toggle in the keybinding UI.","Icon for the edit action in the keybinding UI.","Icon for the add action in the keybinding UI.","Icon for the edit action in the Settings UI.","Icon for the remove action in the Settings UI.","Icon for the discard action in the Settings UI.","Icon for clear input in the Settings and keybinding UI.","Icon for the button that suggests filters for the Settings UI.","Icon for open settings commands."],"vs/workbench/contrib/preferences/browser/preferencesActions":["Configure Language Specific Settings...","({0})","Select Language"],"vs/workbench/contrib/preferences/common/preferencesContribution":["Split Settings Editor","Controls whether to enable the natural language search mode for settings. The natural language search is provided by a Microsoft online service.","Hide the Table of Contents while searching. The search results will not be grouped by category, and instead will be sorted by similarity to the query, with exact keyword matches coming first.","Filter the Table of Contents to just categories that have matching settings. Clicking a category will filter the results to that category. The search results will be grouped by category.","Controls the behavior of the Settings editor Table of Contents while searching. If this setting is being changed in the Settings editor, the setting will take effect after the search query is modified."],"vs/workbench/contrib/preferences/browser/settingsEditor2":["Search settings","Clear Settings Search Input","Filter Settings","No Settings Found","Clear Filters","Settings","Workspace Trust","No Settings Found","1 Setting Found","{0} Settings Found","Backup and Sync Settings","Last synced: {0}"],"vs/workbench/contrib/chat/browser/actions/chatActions":["Chat","Quick Chat","Accept Chat Input","Submit to Secondary Agent","Clear Input History","Focus Chat List","Focus Chat Input","Open Editor ({0})","Show History","Delete","Select a chat session to restore"],"vs/workbench/contrib/chat/browser/actions/chatCodeblockActions":["Copy","Insert at Cursor","Insert Into New File","Run in Terminal","Next Code Block","Previous Code Block"],"vs/workbench/contrib/chat/browser/actions/chatCopyActions":["Copy All","Copy"],"vs/workbench/contrib/chat/browser/actions/chatExecuteActions":["Submit","Cancel"],"vs/workbench/contrib/chat/browser/actions/chatQuickInputActions":["Open in Chat View","Close Quick Chat","Quick Chat","Toggle the quick chat","The query to open the quick chat with","Whether the query is partial; it will wait for more user input","The query to open the quick chat with","Open Quick Chat ({0})"],"vs/workbench/contrib/chat/browser/actions/chatTitleActions":["Helpful","Unhelpful","Insert into Notebook","Remove Request and Response"],"vs/workbench/contrib/chat/browser/chatContributionServiceImpl":["Contributes an Interactive Session provider","Unique identifier for this Interactive Session provider.","Display name for this Interactive Session provider.","An icon for this Interactive Session provider.","A condition which must be true to enable this Interactive Session provider.","Chat"],"vs/workbench/contrib/chat/browser/actions/chatImportExport":["Chat Session","Export Session","Import Session"],"vs/workbench/contrib/chat/browser/chatEditorInput":["Chat"],"vs/workbench/contrib/chat/common/chatServiceImpl":["Provider returned null response"],"vs/workbench/contrib/chat/browser/actions/chatMoveActions":["Open Session In Editor","Open Session In Editor","Open Session In Sidebar"],"vs/workbench/contrib/chat/browser/actions/chatClearActions":["Clear","Clear","Clear"],"vs/workbench/contrib/accessibility/browser/accessibleView":["({0}) {1}","({0}) {1}","{0} accessibility verbosity is now disabled","\\n\\nOpen a browser window with more information related to accessibility (H).","\\n\\nExit this dialog (Escape).","Explore actions such as disabling this hint (Shift+Tab), use Escape to exit this dialog.","Explore actions such as disabling this hint (Shift+Tab).","Accessibility Help","Accessible View","Accessible View, {0}","Accessibility Help, {0}","Accessibility Help","Accessible View","Navigate to the toolbar (Shift+Tab)).","In the accessible view, you can:\\n","Show the next ({0}) or previous ({1}) item.","Show the next or previous item by configuring keybindings for the Show Next & Previous in Accessible View commands.","\\n\\nDisable accessibility verbosity for this feature ({0}).","\\n\\nAdd a keybinding for the command Disable Accessible View Hint, which disables accessibility verbosity for this feature.s","Go to a symbol ({0})","To go to a symbol, configure a keybinding for the command Go To Symbol in Accessible View","Inspect this in the accessible view with {0}","Inspect this in the accessible view via the command Open Accessible View which is currently not triggerable via keybinding.","Type to search symbols","Go to Symbol Accessible View"],"vs/workbench/contrib/accessibility/browser/accessibilityContributions":["{0} Source: {1}","{0}","Clear Notification","Clear Notification"],"vs/workbench/contrib/accessibility/browser/accessibleViewActions":["Show Next in Accessible View","Show Previous in Accessible View","Go To Symbol in Accessible View","Open Accessibility Help","Open Accessible View","Disable Accessible View Hint","Accept Inline Completion"],"vs/workbench/contrib/chat/browser/actions/chatFileTreeActions":["Next File Tree","Previous File Tree"],"vs/workbench/contrib/chat/common/chatContextKeys":["True when the provider has assigned an id to this response.","When the response has been voted up, is set to \'up\'. When voted down, is set to \'down\'. Otherwise an empty string.","True when the chat response was filtered out by the server.","True when the current request is still in progress.","The chat item is a response.","The chat item is a request","True when the chat input has text.","True when focus is in the chat input, false otherwise.","True when focus is in the chat widget, false otherwise.","True when some chat provider has been registered."],"vs/workbench/contrib/chat/browser/contrib/chatInputEditorContrib":["Pick a file"],"vs/workbench/contrib/chat/common/chatColors":["The border color of a chat request.","The background color of a chat slash command.","The foreground color of a chat slash command.","The background color of a chat avatar.","The foreground color of a chat avatar."],"vs/workbench/contrib/notebook/common/notebookEditorInput":["Notebook \'{0}\' could not be saved."],"vs/workbench/contrib/notebook/browser/notebookEditor":["Cannot open resource with notebook editor type \'{0}\', please check if you have the right extension installed and enabled.","Cannot open resource with notebook editor type \'{0}\', please check if you have the right extension installed and enabled.","Enable extension for \'{0}\'","Install extension for \'{0}\'","Open As Text","Open in Text Editor"],"vs/workbench/contrib/notebook/browser/services/notebookServiceImpl":["Install extension for \'{0}\'"],"vs/workbench/contrib/notebook/browser/diff/notebookDiffEditor":["Notebook Text Diff"],"vs/workbench/contrib/notebook/browser/services/notebookExecutionServiceImpl":["Executing a notebook cell will run code from this workspace."],"vs/workbench/contrib/notebook/browser/services/notebookKeymapServiceImpl":["Disable other keymaps ({0}) to avoid conflicts between keybindings?","Yes","No"],"vs/editor/common/languages/modesRegistry":["Plain Text"],"vs/workbench/contrib/comments/browser/commentReply":["Reply...","Type a new comment","Reply...","Reply..."],"vs/workbench/contrib/notebook/browser/services/notebookKernelHistoryServiceImpl":["Clear Notebook Kernels MRU Cache"],"vs/workbench/contrib/notebook/browser/services/notebookLoggingServiceImpl":["Notebook rendering"],"vs/workbench/contrib/notebook/browser/notebookAccessibility":["The notebook view is a collection of code and markdown cells. Code cells can be executed and will produce output directly below the cell.","The Edit Cell command ({0}) will focus on the cell input.","The Edit Cell command will focus on the cell input and is currently not triggerable by a keybinding.","The Quit Edit command ({0}) will set focus on the cell container. The default (Escape) key may need to be pressed twice first exit the virtual cursor if active.","The Quit Edit command will set focus on the cell container and is currently not triggerable by a keybinding.","The Focus Output command ({0}) will set focus in the cell\'s output.","The Quit Edit command will set focus in the cell\'s output and is currently not triggerable by a keybinding.","The Focus Next Cell Editor command ({0}) will set focus in the next cell\'s editor.","The Focus Next Cell Editor command will set focus in the next cell\'s editor and is currently not triggerable by a keybinding.","The Focus Previous Cell Editor command ({0}) will set focus in the previous cell\'s editor.","The Focus Previous Cell Editor command will set focus in the previous cell\'s editor and is currently not triggerable by a keybinding.","The up and down arrows will also move focus between cells while focused on the outer cell container.","The Execute Cell command ({0}) executes the cell that currently has focus.","The Execute Cell command executes the cell that currently has focus and is currently not triggerable by a keybinding.","The Insert Cell Above/Below commands will create new empty code cells","The Change Cell to Code/Markdown commands are used to switch between cell types."],"vs/workbench/contrib/notebook/browser/controller/coreActions":["Notebook","Insert Cell","Notebook Cell","Share"],"vs/workbench/contrib/notebook/browser/controller/executeActions":["Render All Markdown Cells","Run All","Run All","Execute Cell","Execute Cell","Execute Above Cells","Execute Cell and Below","Execute Cell and Focus Container","Execute Cell and Focus Container","Stop Cell Execution","Stop Cell Execution","Execute Notebook Cell and Select Below","Execute Notebook Cell and Insert Below","Stop Execution","Interrupt","Go to Running Cell","Go to Running Cell","Go To","Go to Most Recently Failed Cell","Go to Most Recently Failed Cell","Go To"],"vs/workbench/contrib/notebook/browser/controller/insertCellActions":["Insert Code Cell Above","Insert Code Cell Above and Focus Container","Insert Code Cell Below","Insert Code Cell Below and Focus Container","Insert Markdown Cell Above","Insert Markdown Cell Below","Add Code Cell At Top","Add Markdown Cell At Top","Code","Add Code Cell","Add Code","Add Code Cell","Code","Add Code Cell","Code","Add Code Cell","Add Code","Add Code Cell","Markdown","Add Markdown Cell","Markdown","Add Markdown Cell","Markdown","Add Markdown Cell"],"vs/workbench/contrib/notebook/browser/controller/layoutActions":["Select between Notebook Layouts","Customize Notebook Layout","Customize Notebook Layout","Customize Notebook...","Toggle Notebook Line Numbers","Notebook Line Numbers","Toggle Cell Toolbar Position","Toggle Breadcrumbs","Save Mimetype Display Order","Settings file to save in","User Settings","Workspace Settings","Reset Notebook Webview"],"vs/workbench/contrib/notebook/browser/controller/editActions":["Edit Cell","Stop Editing Cell","Delete Cell","Delete","This cell is running, are you sure you want to delete it?","Do not ask me again","Clear Cell Outputs","Clear All Outputs","Change Cell Language","Change Cell Language","({0}) - Current Language","({0})","Auto Detect","languages (identifier)","Select Language Mode","Accept Detected Language for Cell","Unable to detect cell language"],"vs/workbench/contrib/notebook/browser/controller/cellOutputActions":["Copy Output"],"vs/workbench/contrib/notebook/browser/controller/foldingController":["Fold Cell","Unfold Cell","Fold Cell"],"vs/workbench/contrib/notebook/browser/contrib/clipboard/notebookClipboard":["Copy Cell","Cut Cell","Paste Cell","Paste Cell Above","Toggle Notebook Clipboard Troubleshooting"],"vs/workbench/contrib/notebook/browser/contrib/find/notebookFind":["Hide Find in Notebook","Find in Notebook"],"vs/workbench/contrib/notebook/browser/contrib/format/formatting":["Format Notebook","Format Notebook","Format Cell","Format Cells"],"vs/workbench/contrib/notebook/browser/contrib/saveParticipants/saveParticipants":["Formatting","Format Notebook","Notebook Trim Trailing Whitespace","Trim Final New Lines","Insert Final New Line","Running \'Notebook\' code actions","Running \'Cell\' code actions","Getting code actions from \'{0}\' ([configure]({1})).","Applying code action \'{0}\'."],"vs/workbench/contrib/notebook/browser/contrib/gettingStarted/notebookGettingStarted":["Reset notebook getting started"],"vs/workbench/contrib/notebook/browser/contrib/layout/layoutActions":["Toggle Cell Toolbar Position"],"vs/workbench/contrib/notebook/browser/contrib/navigation/arrow":["Focus Next Cell Editor","Focus Previous Cell Editor","Focus First Cell","Focus Last Cell","Focus In Active Cell Output","Focus Out Active Cell Output","Center Active Cell","Cell Cursor Page Up","Cell Cursor Page Up Select","Cell Cursor Page Down","Cell Cursor Page Down Select","When enabled cursor can navigate to the next/previous cell when the current cursor in the cell editor is at the first/last line."],"vs/workbench/contrib/notebook/browser/contrib/outline/notebookOutline":["When enabled notebook outline shows code cells.","When enabled notebook breadcrumbs contain code cells.","When enabled the Go to Symbol Quick Pick will display full code symbols from the notebook, as well as Markdown headers."],"vs/workbench/contrib/notebook/browser/contrib/profile/notebookProfile":["Set Profile"],"vs/workbench/contrib/notebook/browser/contrib/cellStatusBar/statusBarProviders":["Unknown cell language. Click to search for \'{0}\' extensions","Select Cell Language Mode","Accept Detected Language: {0}"],"vs/workbench/contrib/notebook/browser/contrib/cellStatusBar/executionStatusBarItemController":["Success","Failed","Pending","Executing","Use the links above to file an issue using the issue reporter.","**Last Execution** {0}\\n\\n**Execution Time** {1}\\n\\n**Overhead Time** {2}\\n\\n**Render Times**\\n\\n{3}"],"vs/workbench/contrib/notebook/browser/contrib/editorStatusBar/editorStatusBar":["Notebook Kernel Info","{0} (suggestion)","Notebook Kernel Selection","Select Kernel","Select Kernel","Notebook Editor Selections","Cell {0} ({1} selected)","Cell {0} of {1}"],"vs/workbench/contrib/notebook/browser/contrib/cellCommands/cellCommands":["Move Cell Up","Move Cell Down","Copy Cell Up","Copy Cell Down","Split Cell","Join With Previous Cell","Join With Next Cell","Join Selected Cells","Change Cell to Code","Change Cell to Markdown","Collapse Cell Input","Expand Cell Input","Collapse Cell Output","Expand Cell Output","Toggle Outputs","Toggle Outputs","Collapse All Cell Inputs","Expand All Cell Inputs","Collapse All Cell Outputs","Expand All Cell Outputs","Toggle Scroll Cell Output"],"vs/workbench/contrib/notebook/browser/diff/notebookDiffActions":["Open Text Diff Editor","Revert Metadata","Switch Output Rendering","Revert Outputs","Revert Input","Show Outputs Differences","Show Metadata Differences","Show Previous Change","Show Next Change","Hide Metadata Differences","Hide Outputs Differences"],"vs/workbench/contrib/notebook/browser/contrib/troubleshoot/layout":["Toggle Layout Troubleshoot","Inspect Notebook Layout","Clear Notebook Editor Type Cache"],"vs/workbench/contrib/inlineChat/browser/inlineChatController":["AI-generated code may be incorrect","Getting ready...","Failed to start editor chat","Please consult the error log and try again later.","AI-generated code may be incorrect","Ask a question","{0} ({1}, {2} for history)","Thinking…","Review proposed changes in the diff editor.","No results, please refine your input and try again","No results, please refine your input and try again","Failed to apply changes.","Failed to discard changes."],"vs/workbench/contrib/inlineChat/common/inlineChat":["Whether a provider for interactive editors exists","Whether the interactive editor input is visible","Whether the interactive editor input is focused","Whether the interactive widget\'s response is focused","Whether the interactive editor input is empty","Whether the cursor of the iteractive editor input is on the first line","Whether the cursor of the iteractive editor input is on the last line","Whether the cursor of the iteractive editor input is on the start of the input","Whether the cursor of the iteractive editor input is on the end of the input","Whether the interactive editor message is cropped, not cropped or expanded","Whether the cursor of the outer editor is above or below the interactive editor input","Whether interactive editor has an active request","Whether interactive editor has kept a session for quick restore","What type was the last response of the current interactive editor session","What type was the responses have been receieved","Whether interactive editor did change any code","Whether the user did changes ontop of the inline chat","The last kind of feedback that was provided","Whether the document has changed concurrently","Background color of the interactive editor widget","Border color of the interactive editor widget","Shadow color of the interactive editor widget","Background highlighting of the current interactive region. Must be transparent.","Border color of the interactive editor input","Border color of the interactive editor input when focused","Foreground color of the interactive editor input placeholder","Background color of the interactive editor input","Background color of inserted text in the interactive editor input","Background color of removed text in the interactive editor input","Configure if changes crafted in the interactive editor are applied directly to the document or are previewed first.","Changes are applied directly to the document and are highlighted visually via inline or side-by-side diffs. Ending a session will keep the changes.","Changes are previewed only and need to be accepted via the apply button. Ending a session will discard the changes.","Changes are applied directly to the document but can be highlighted via inline diffs. Ending a session will keep the changes.","Enable/disable showing the diff when edits are generated. Works only with inlineChat.mode equal to live or livePreview.","Show/hide a gutter icon for spawning inline chat on empty lines."],"vs/workbench/contrib/inlineChat/browser/inlineChatActions":["Start Inline Chat","Resume Last Dismissed Inline Chat","Inline Chat","Make Request","Regenerate Response","Regenerate","Stop Request","Cursor Up","Cursor Down","Focus Input","Previous From History","Next From History","Discard...","Discard","Discard to Clipboard","Discard to New File","Helpful","Unhelpful","Show Diff","&&Show Diff","Show Diff","&&Show Diff","Accept Changes","Accept","Cancel","(Developer) Write Exchange to Clipboard","\'{0}\' and {1} follow ups ({2})","View in Chat","Show More","Show Less"],"vs/workbench/contrib/inlineChat/browser/inlineChatDecorations":["Icon which spawns the inline chat from the gutter","Toggle Inline Chat Icon"],"vs/workbench/contrib/files/browser/fileConstants":["Save As...","Save","Save without Formatting","Save All","Remove Folder from Workspace","New Untitled Text File"],"vs/workbench/contrib/testing/browser/testingProgressUiService":["Running tests...","Running tests, {0}/{1} passed ({2}%)","Running tests, {0}/{1} tests passed ({2}%, {3} skipped)","{0}/{1} tests passed ({2}%)","{0}/{1} tests passed ({2}%, {3} skipped)"],"vs/workbench/contrib/testing/browser/testingOutputPeek":["Could not open markdown preview: {0}.\\n\\nPlease make sure the markdown extension is enabled.","Test Output","Expected result","Actual result","Test output is only available for new test runs.","The test run did not record any output.","Close","Unnamed Task","+ {0} more lines","+ 1 more line","Test Result Messages","Show Result Output","Show Result Output","Rerun Test Run","Debug Test Run","Show Result Output","Reveal in Test Explorer","Run Test","Debug Test","Go to Source","Go to Source","Go to Next Test Failure","Go to Previous Test Failure","Open in Editor","Toggle Test History in Peek"],"vs/workbench/contrib/testing/browser/testingViewPaneContainer":["Testing"],"vs/workbench/contrib/testing/common/configuration":["Testing","How long to wait, in milliseconds, after a test is marked as outdated and starting a new run.","Configures when the error Peek view is automatically opened.","Open automatically no matter where the failure is.","Open automatically when a test fails in a visible document.","Never automatically open.","Controls whether to show messages from all test runs.","Controls whether to automatically open the Peek view during continuous run mode.","Controls the count badge on the Testing icon on the Activity Bar.","Show the number of failed tests","Disable the testing count badge","Show the number of passed tests","Show the number of skipped tests","Controls whether the running test should be followed in the Test Explorer view.","Controls the action to take when left-clicking on a test decoration in the gutter.","Run the test.","Debug the test.","Open the context menu for more options.","Controls whether test decorations are shown in the editor gutter.","Control whether save all dirty editors before running a test.","Never automatically open the testing views","Open the test results view when tests start","Open the test result view on any test failure","Open the test explorer when tests start","Controls when the testing view should open.","Always reveal the executed test when `#testing.followRunningTest#` is on. If this setting is turned off, only failed tests will be revealed."],"vs/workbench/contrib/testing/browser/testingDecorations":["Peek Test Output","Expected","Actual","Click for test options","Click to debug tests, right click for more options","Click to run tests, right click for more options","Run Test","Debug Test","Execute Using Profile...","Peek Error","Reveal in Test Explorer","Run All Tests","Debug All Tests"],"vs/workbench/contrib/testing/common/testServiceImpl":["Running tests may execute code in your workspace.","An error occurred attempting to run tests: {0}","Running tests may execute code in your workspace.","An error occurred attempting to run tests: {0}"],"vs/workbench/contrib/testing/common/testingContentProvider":["The test run did not record any output."],"vs/workbench/contrib/testing/browser/icons":["View icon of the test view.","Icons for test results.","Icon of the \\"run test\\" action.","Icon of the \\"rerun tests\\" action.","Icon of the \\"run all tests\\" action.","Icon of the \\"debug all tests\\" action.","Icon of the \\"debug test\\" action.","Icon to cancel ongoing test runs.","Icon for the \'Filter\' action in the testing view.","Icon shown beside hidden tests, when they\'ve been shown.","Icon shown when the test explorer is disabled as a tree.","Icon shown when the test explorer is disabled as a list.","Icon shown to update test profiles.","Icon on the button to refresh tests.","Icon to turn continuous test runs on.","Icon to turn continuous test runs off.","Icon when continuous run is on for a test ite,.","Icon on the button to cancel refreshing tests.","Icon shown for tests that have an error.","Icon shown for tests that failed.","Icon shown for tests that passed.","Icon shown for tests that are queued.","Icon shown for tests that are skipped.","Icon shown for tests that are in an unset state."],"vs/workbench/contrib/testing/common/testingContextKeys":["Indicates whether any test controller has an attached refresh handler.","Indicates whether any test controller is currently refreshing tests.","Indicates whether continuous test mode is on.","Indicates whether any test controller has registered a debug configuration","Indicates whether any test controller has registered a run configuration","Indicates whether any test controller has registered a coverage configuration","Indicates whether any test controller has registered a non-default configuration","Indicates whether any test configuration can be configured","Indicates whether continous test running is supported","Indicates whether the parent of a test is continuously running, set in the menu context of test items","Indicates whether any tests are present in the current editor","Type of the item in the output peek view. Either a \\"test\\", \\"message\\", \\"task\\", or \\"result\\".","Controller ID of the current test item","ID of the current test item, set when creating or opening menus on test items","Boolean indicating whether the test item has a URI defined","Boolean indicating whether the test item is hidden","Value set in `testMessage.contextValue`, available in editor/content and testing/message/context","Value available in editor/content and testing/message/context when the result is outdated"],"vs/workbench/contrib/testing/browser/testingConfigurationUi":["Pick a test profile to use","Update Test Configuration"],"vs/workbench/contrib/testing/browser/testExplorerActions":["Hide Test","Unhide Test","Unhide All Tests","Debug Test","Execute Using Profile...","Run Test","Select Default Profile","Turn on Continuous Run","Turn off Continuous Run","Start Continous Run Using...","Configure Test Profiles","Select a profile to update","Stop Continuous Run","No test continuous run-enabled profiles were found","Select profiles to run when files change:","Start Continuous Run","Get Selected Profiles","Get Explorer Selection","Run Tests","Debug Tests","Discovering Tests","Run All Tests","No tests found in this workspace. You may need to install a test provider extension","Debug All Tests","No debuggable tests found in this workspace. You may need to install a test provider extension","Cancel Test Run","View as List","View as Tree","Sort by Status","Sort by Location","Sort by Duration","Show Output","Collapse All Tests","Clear All Results","Go to Test","No tests found here","Run Test at Cursor","Debug Test at Cursor","No tests found in this file","Run Tests in Current File","Debug Tests in Current File","Rerun Failed Tests","Debug Failed Tests","Rerun Last Run","Debug Last Run","Search for Test Extension","Peek Output","Toggle Inline Test Output","Refresh Tests","Cancel Test Refresh"],"vs/workbench/contrib/logs/common/logsActions":["Set Log Level...","All","Extension Logs","Logs","Set Log Level"," {0}: Select log level","Select log level","Set as Default Log Level","Trace","Debug","Info","Warning","Error","Off","Default","Open Window Log File (Session)...","Current","Select Session","Select Log file"],"vs/editor/contrib/peekView/browser/peekView":["Whether the current code editor is embedded inside peek","Close","Background color of the peek view title area.","Color of the peek view title.","Color of the peek view title info.","Color of the peek view borders and arrow.","Background color of the peek view result list.","Foreground color for line nodes in the peek view result list.","Foreground color for file nodes in the peek view result list.","Background color of the selected entry in the peek view result list.","Foreground color of the selected entry in the peek view result list.","Background color of the peek view editor.","Background color of the gutter in the peek view editor.","Background color of sticky scroll in the peek view editor.","Match highlight color in the peek view result list.","Match highlight color in the peek view editor.","Match highlight border in the peek view editor."],"vs/workbench/contrib/testing/browser/testingExplorerView":["{0} (Default)","Select Default Profile","Configure Test Profiles","No test results yet.","Tests are being watched for changes","{0} passed tests","{0} skipped tests","{0} failed tests","No tests were found in this file.","Show Workspace Tests","{0}, in {1}","{0}, outdated result","Test Explorer"],"vs/workbench/contrib/interactive/browser/interactiveEditor":["Type \'{0}\' code here and press {1} to run"],"vs/platform/quickinput/browser/helpQuickAccess":["{0}, {1}"],"vs/workbench/contrib/quickaccess/browser/viewQuickAccess":["No matching views","Side Bar","Panel","Secondary Side Bar","{0}: {1}","Terminal","Debug Console","Output","Open View","Quick Open View"],"vs/workbench/contrib/quickaccess/browser/commandsQuickAccess":["No matching commands","Configure Keybinding","Ask {0}: {1}","{0}: {1}","Show All Commands","Clear Command History","Do you want to clear the history of recently used commands?","This action is irreversible!","&&Clear"],"vs/workbench/contrib/notebook/browser/notebookIcons":["Configure icon to select a kernel in notebook editors.","Icon to execute in notebook editors.","Icon to execute above cells in notebook editors.","Icon to execute below cells in notebook editors.","Icon to stop an execution in notebook editors.","Icon to delete a cell in notebook editors.","Icon to execute all cells in notebook editors.","Icon to edit a cell in notebook editors.","Icon to stop editing a cell in notebook editors.","Icon to move up a cell in notebook editors.","Icon to move down a cell in notebook editors.","Icon to clear cell outputs in notebook editors.","Icon to split a cell in notebook editors.","Icon to indicate a success state in notebook editors.","Icon to indicate an error state in notebook editors.","Icon to indicate a pending state in notebook editors.","Icon to indicate an executing state in notebook editors.","Icon to annotate a collapsed section in notebook editors.","Icon to annotate an expanded section in notebook editors.","Icon to open the notebook in a text editor.","Icon to revert in notebook editors.","Icon to render output in diff editor.","Icon for a mime type in notebook editors.","Icon to copy content to clipboard","Icon for the previous change action in the diff editor.","Icon for the next change action in the diff editor."],"vs/workbench/contrib/files/browser/fileActions":["New File...","New Folder...","Rename...","Delete","Copy","Paste","Download...","Upload...","&&Move to Recycle Bin","&&Move to Trash","&&Delete","You are deleting files with unsaved changes. Do you want to continue?","You are deleting a folder {0} with unsaved changes in 1 file. Do you want to continue?","You are deleting a folder {0} with unsaved changes in {1} files. Do you want to continue?","You are deleting {0} with unsaved changes. Do you want to continue?","Your changes will be lost if you don\'t save them.","This action is irreversible!","You can restore these files using the Undo command","You can restore this file using the Undo command","You can restore these files from the Recycle Bin.","You can restore this file from the Recycle Bin.","You can restore these files from the Trash.","You can restore this file from the Trash.","Do not ask me again","Delete {0} files","Delete {0}","Deleting {0} files","Deleting {0}","Failed to delete using the Recycle Bin. Do you want to permanently delete instead?","Failed to delete using the Trash. Do you want to permanently delete instead?","&&Delete Permanently","&&Retry","Are you sure you want to delete the following {0} files/directories and their contents?","Are you sure you want to delete the following {0} directories and their contents?","Are you sure you want to delete the following {0} files?","Are you sure you want to delete \'{0}\' and its contents?","Are you sure you want to delete \'{0}\'?","Are you sure you want to permanently delete the following {0} files/directories and their contents?","Are you sure you want to permanently delete the following {0} directories and their contents?","Are you sure you want to permanently delete the following {0} files?","Are you sure you want to permanently delete \'{0}\' and its contents?","Are you sure you want to permanently delete \'{0}\'?","A file or folder with the name \'{0}\' already exists in the destination folder. Do you want to replace it?","&&Replace","Compare Active File With...","Save All in Group","Close Group","Focus on Files Explorer","Reveal Active File in Explorer View","Open Active File in New Window","The active editor must contain an openable resource.","A file or folder name must be provided.","A file or folder name cannot start with a slash.","A file or folder **{0}** already exists at this location. Please choose a different name.","The name **{0}** is not valid as a file or folder name. Please choose a different name.","Leading or trailing whitespace detected in file or folder name.","Compare New Untitled Text Files","Compare Active File with Clipboard","Clipboard ↔ {0}","Retry","Create {0}","Creating {0}","Rename {0} to {1}","Renaming {0} to {1}","File to paste is an ancestor of the destination folder","Moving {0} files","Moving {0}","Move {0} files","Move {0}","Copying {0} files","Copying {0}","Paste {0} files","Paste {0}","The file(s) to paste have been deleted or moved since you copied them. {0}","Set Active Editor Read-only in Session","Set Active Editor Writeable in Session","Toggle Active Editor Read-only in Session","Reset Active Editor Read-only in Session","Toggle Auto Save","Toggle the ability to save files automatically after typing"],"vs/workbench/contrib/files/browser/editors/textFileSaveErrorHandler":["Use the actions in the editor tool bar to either undo your changes or overwrite the content of the file with your changes.","Failed to save \'{0}\': The content of the file is newer. Please compare your version with the file contents or overwrite the content of the file with your changes.","Failed to save \'{0}\': File is read-only. Select \'Overwrite as Admin\' to retry as administrator.","Failed to save \'{0}\': File is read-only. Select \'Overwrite as Sudo\' to retry as superuser.","Failed to save \'{0}\': File is read-only. Select \'Overwrite\' to attempt to make it writeable.","Failed to save \'{0}\': Insufficient permissions. Select \'Retry as Admin\' to retry as administrator.","Failed to save \'{0}\': Insufficient permissions. Select \'Retry as Sudo\' to retry as superuser.","Failed to save \'{0}\': {1}","Learn More","Don\'t Show Again","Compare","{0} (in file) ↔ {1} (in {2}) - Resolve save conflict","Overwrite as Admin...","Overwrite as Sudo...","Retry as Admin...","Retry as Sudo...","Retry","Discard","Overwrite","Overwrite","Configure"],"vs/workbench/contrib/files/browser/fileCommands":["{0} (in file) ↔ {1}","Failed to save \'{0}\': {1}","Retry","Discard","Failed to revert \'{0}\': {1}","Create File"],"vs/workbench/contrib/files/browser/views/explorerView":["Explorer Section: {0}","New File...","New Folder...","Refresh Explorer","Collapse Folders in Explorer"],"vs/workbench/contrib/files/browser/views/openEditorsView":["{0} unsaved","Open Editors","Toggle Vertical/Horizontal Editor Layout","Flip Layout","Flip &&Layout","New Untitled Text File","Open Editors"],"vs/workbench/contrib/files/browser/editors/binaryFileEditor":["Binary File Viewer"],"vs/workbench/contrib/files/browser/workspaceWatcher":["Unable to watch for file changes in this large workspace folder. Please follow the instructions link to resolve this issue.","Instructions","File changes watcher stopped unexpectedly. A reload of the window may enable the watcher again unless the workspace cannot be watched for file changes.","Reload"],"vs/editor/common/config/editorConfigurationSchema":["Editor","The number of spaces a tab is equal to. This setting is overridden based on the file contents when {0} is on.","The number of spaces used for indentation or `\\"tabSize\\"` to use the value from `#editor.tabSize#`. This setting is overridden based on the file contents when `#editor.detectIndentation#` is on.","Insert spaces when pressing `Tab`. This setting is overridden based on the file contents when {0} is on.","Controls whether {0} and {1} will be automatically detected when a file is opened based on the file contents.","Remove trailing auto inserted whitespace.","Special handling for large files to disable certain memory intensive features.","Controls whether completions should be computed based on words in the document.","Only suggest words from the active document.","Suggest words from all open documents of the same language.","Suggest words from all open documents.","Controls from which documents word based completions are computed.","Semantic highlighting enabled for all color themes.","Semantic highlighting disabled for all color themes.","Semantic highlighting is configured by the current color theme\'s `semanticHighlighting` setting.","Controls whether the semanticHighlighting is shown for the languages that support it.","Keep peek editors open even when double-clicking their content or when hitting `Escape`.","Lines above this length will not be tokenized for performance reasons","Controls whether the tokenization should happen asynchronously on a web worker.","Controls whether async tokenization should be logged. For debugging only.","Controls whether async tokenization should be verified against legacy background tokenization. Might slow down tokenization. For debugging only.","Defines the bracket symbols that increase or decrease the indentation.","The opening bracket character or string sequence.","The closing bracket character or string sequence.","Defines the bracket pairs that are colorized by their nesting level if bracket pair colorization is enabled.","The opening bracket character or string sequence.","The closing bracket character or string sequence.","Timeout in milliseconds after which diff computation is cancelled. Use 0 for no timeout.","Maximum file size in MB for which to compute diffs. Use 0 for no limit.","Controls whether the diff editor shows the diff side by side or inline.","If the diff editor width is smaller than this value, the inline view is used.","If enabled and the editor width is too small, the inline view is used.","When enabled, the diff editor shows arrows in its glyph margin to revert changes.","When enabled, the diff editor ignores changes in leading or trailing whitespace.","Controls whether the diff editor shows +/- indicators for added/removed changes.","Controls whether the editor shows CodeLens.","Lines will never wrap.","Lines will wrap at the viewport width.","Lines will wrap according to the {0} setting.","Uses the legacy diffing algorithm.","Uses the advanced diffing algorithm.","Controls whether the diff editor shows unchanged regions.","Controls how many lines are used for unchanged regions.","Controls how many lines are used as a minimum for unchanged regions.","Controls how many lines are used as context when comparing unchanged regions.","Controls whether the diff editor should show detected code moves.","Controls whether the diff editor shows empty decorations to see where characters got inserted or deleted."],"vs/workbench/contrib/files/common/dirtyFilesIndicator":["1 unsaved file","{0} unsaved files"],"vs/workbench/contrib/files/browser/editors/textFileEditor":["Text File Editor","Open Folder","Reveal Folder","The file is not displayed in the text editor because it is a directory.","The file is not displayed in the text editor because it is very large ({0}).","The file is not displayed in the text editor because it is very large.","The editor could not be opened because the file was not found.","Create File"],"vs/workbench/contrib/bulkEdit/browser/preview/bulkEditPane":["Apply","Discard","Invoke a code action, like rename, to see a preview of its changes here.","Cannot apply refactoring because \'{0}\' has changed in the meantime.","Cannot apply refactoring because {0} other files have changed in the meantime.","{0} (delete, refactor preview)","rename","create","{0} ({1}, refactor preview)","{0} (refactor preview)"],"vs/workbench/contrib/bulkEdit/browser/preview/bulkEditPreview":["Other"],"vs/editor/contrib/quickAccess/browser/gotoLineQuickAccess":["Open a text editor first to go to a line.","Go to line {0} and character {1}.","Go to line {0}.","Current Line: {0}, Character: {1}. Type a line number between 1 and {2} to navigate to.","Current Line: {0}, Character: {1}. Type a line number to navigate to."],"vs/workbench/contrib/codeEditor/browser/quickaccess/gotoSymbolQuickAccess":["No matching entries","Go to Symbol in Editor...","Go to &&Symbol in Editor...","Type the name of a symbol to go to.","Go to Symbol in Editor","Go to Symbol in Editor by Category"],"vs/workbench/contrib/search/browser/anythingQuickAccess":["No matching results","recently opened","file and symbol results","file results","{0}, {1}","Open Quick Chat","Open to the Side","Open to the Bottom","Remove from Recently Opened","{0} unsaved changes"],"vs/workbench/contrib/search/browser/searchIcons":["Icon to make search details visible.","Icon for toggle the context in the search editor.","Icon to collapse the replace section in the search view.","Icon to expand the replace section in the search view.","Icon for replace all in the search view.","Icon for replace in the search view.","Icon to remove a search result.","Icon for refresh in the search view.","Icon for collapse results in the search view.","Icon for expand results in the search view.","Icon for viewing results as a tree in the search view.","Icon for viewing results as a list in the search view.","Icon for clear results in the search view.","Icon for stop in the search view.","View icon of the search view.","Icon for the action to open a new search editor.","Icon for the action to go to the file of the current search result."],"vs/workbench/contrib/search/browser/searchWidget":["Replace All (Submit Search to Enable)","Replace All","Toggle Replace","Search: Type Search Term and press Enter to search","Search","Toggle Context Lines","Replace: Type replace term and press Enter to preview","Replace"],"vs/workbench/contrib/search/browser/symbolsQuickAccess":["No matching workspace symbols","Open to the Side","Open to the Bottom"],"vs/workbench/contrib/search/browser/quickTextSearch/textSearchQuickAccess":["See More Files","Open File","More"],"vs/workbench/contrib/search/browser/searchActionsCopy":["Copy","Copy Path","Copy All"],"vs/workbench/contrib/search/browser/searchActionsFind":["Restrict Search to Folder","Exclude Folder from Search","Reveal in Explorer View","Find in Files","Find &&in Files","Open a workspace search","A set of options for the search","Find in Folder...","Find in Workspace..."],"vs/workbench/contrib/search/browser/searchActionsNav":["Toggle Query Details","Close Replace Widget","Toggle Case Sensitive","Toggle Whole Word","Toggle Regex","Toggle Preserve Case","Open Match","Open Match To Side","Add Cursors at Search Results","Focus Next Input","Focus Previous Input","Focus Search From Results","Toggle Search on Type","Focus List","Focus Next Search Result","Focus Previous Search Result","Replace in Files"],"vs/workbench/contrib/search/browser/searchActionsRemoveReplace":["Dismiss","Replace","Replace All","Replace All"],"vs/workbench/contrib/search/browser/searchActionsTopBar":["Clear Search History","Cancel Search","Refresh","Collapse All","Expand All","Clear Search Results","View as Tree","View as List"],"vs/workbench/contrib/search/browser/searchActionsSymbol":["Go to Symbol in Workspace...","Go to Symbol in Workspace...","Go to Symbol in &&Workspace..."],"vs/workbench/contrib/search/browser/searchActionsTextQuickAccess":["Quick Text Search (Experimental)"],"vs/workbench/contrib/search/browser/searchActionsBase":["Search"],"vs/workbench/contrib/searchEditor/browser/searchEditor":["Toggle Search Details","files to include","Search Include Patterns","files to exclude","Search Exclude Patterns","Run Search","Matched {0} at {1} in file {2}","Search","Search editor text input box border."],"vs/workbench/contrib/searchEditor/browser/searchEditorInput":["Search: {0}","Search: {0}","Search"],"vs/workbench/contrib/scm/browser/dirtydiffDecorator":["{0} - {1} of {2} changes","{0} - {1} of {2} change","{0} of {1} changes","{0} of {1} change","Close","Show Previous Change","Show Next Change","Next &&Change","Previous &&Change","Go to Previous Change","Go to Next Change","Editor gutter background color for lines that are modified.","Editor gutter background color for lines that are added.","Editor gutter background color for lines that are deleted.","Minimap gutter background color for lines that are modified.","Minimap gutter background color for lines that are added.","Minimap gutter background color for lines that are deleted.","Overview ruler marker color for modified content.","Overview ruler marker color for added content.","Overview ruler marker color for deleted content."],"vs/workbench/contrib/scm/browser/activity":["Source Control","{0} pending changes"],"vs/workbench/contrib/scm/browser/scmViewPaneContainer":["Source Control"],"vs/workbench/contrib/scm/browser/scmViewPane":["Source Control Management","Source Control Input","View & Sort","Repositories","View as List","View as Tree","Sort by Discovery Time","Sort by Name","Sort by Path","Sort Changes by Name","Sort Changes by Path","Sort Changes by Status","Collapse All Repositories","Expand All Repositories","Close"],"vs/workbench/contrib/scm/browser/scmRepositoriesViewPane":["Source Control Repositories"],"vs/workbench/contrib/workspace/common/workspace":["Whether the workspace trust feature is enabled.","Whether the current workspace has been trusted by the user."],"vs/workbench/contrib/scm/browser/scmSyncViewPane":["Source Control Sync","Incoming Changes","Outgoing Changes","Refresh","View as List","View as Tree"],"vs/workbench/browser/parts/views/viewPane":["Icon for an expanded view pane container.","Icon for a collapsed view pane container.","{0} actions"],"vs/workbench/contrib/search/browser/patternInputWidget":["input","Search only in Open Editors","Use Exclude Settings and Ignore Files"],"vs/workbench/contrib/search/browser/searchMessage":["Unable to open command link from untrusted source: {0}","Unable to open unknown link: {0}"],"vs/workbench/contrib/search/browser/searchResultsView":["Other files","Other files","{0} files found","{0} file found","{0} matches found","{0} match found","From line {0}","{0} more lines","Search","{0} matches in folder root {1}, Search result","{0} matches outside of the workspace, Search result","{0} matches in file {1} of folder {2}, Search result","\'{0}\' at column {1} replace {2} with {3}","\'{0}\' at column {1} found {2}"],"vs/workbench/services/search/common/queryBuilder":["Workspace folder does not exist: {0}"],"vs/workbench/contrib/debug/browser/debugHover":["Hold {0} key to switch to editor language hover","Debug Hover","{0}, value {1}, variables, debug"],"vs/workbench/contrib/debug/browser/exceptionWidget":["Exception widget border color.","Exception widget background color.","Exception has occurred: {0}","Exception has occurred.","Close"],"vs/workbench/contrib/debug/common/debugModel":["Invalid variable attributes","Please start a debug session to evaluate expressions","not available","Paused on {0}","Paused","Running","Unverified breakpoint. File is modified, please restart debug session."],"vs/workbench/contrib/debug/browser/breakpointsView":["Unverified Exception Breakpoint","Expression condition: {0}","Expression: {0} | Hit Count: {1}","Function breakpoints are not supported by this debug type","Data breakpoints are not supported by this debug type","Read","Write","Access","Function to break on","Type function breakpoint.","Break when expression evaluates to true","Type expression. Function breakpoint will break when expression evaluates to true","Break when hit count is met","Type hit count. Function breakpoint will break when hit count is met.","Type exception breakpoint condition","Break when expression evaluates to true","Breakpoints","Disabled Logpoint","Disabled Breakpoint","Unverified Logpoint","Unverified Breakpoint","Data breakpoints not supported by this debug type","Data Breakpoint","Function breakpoints not supported by this debug type","Function Breakpoint","Expression condition: {0}","Hit Count: {0}","Instruction breakpoints not supported by this debug type","Instruction breakpoint at address {0}","Instruction breakpoint","Hit Count: {0}","Breakpoints of this type are not supported by the debugger","Log Message: {0}","Expression condition: {0}","Hit Count: {0}","Breakpoint","Add Function Breakpoint","&&Function Breakpoint...","Toggle Activate Breakpoints","Remove Breakpoint","Remove All Breakpoints","Remove &&All Breakpoints","Enable All Breakpoints","&&Enable All Breakpoints","Disable All Breakpoints","Disable A&&ll Breakpoints","Reapply All Breakpoints","Edit Condition...","Edit Condition...","Edit Hit Count...","Edit Function Breakpoint...","Edit Hit Count..."],"vs/workbench/contrib/debug/browser/callStackView":["Running","Show More Stack Frames","Session","Running","Restart Frame","Load More Stack Frames","Show {0} More: {1}","Show {0} More Stack Frames","Paused on {0}","Paused","Debug Call Stack","Thread {0} {1}","Stack Frame {0}, line {1}, {2}","Running","Session {0} {1}","Show {0} More Stack Frames","Collapse All"],"vs/workbench/contrib/debug/browser/debugColors":["Debug toolbar background color.","Debug toolbar border color.","Debug toolbar icon for start debugging.","Debug toolbar icon for pause.","Debug toolbar icon for stop.","Debug toolbar icon for disconnect.","Debug toolbar icon for restart.","Debug toolbar icon for step over.","Debug toolbar icon for step into.","Debug toolbar icon for step over.","Debug toolbar icon for continue.","Debug toolbar icon for step back."],"vs/workbench/contrib/debug/browser/debugCommands":["Debug","Restart","Step Over","Step Into","Step Into Target","Step Out","Pause","Disconnect","Disconnect and Suspend","Stop","Continue","Focus Session","Select and Start Debugging","Open \'{0}\'","Start Debugging","Start Without Debugging","Focus Next Debug Console","Focus Previous Debug Console","Open Loaded Script...","Navigate to Top of Call Stack","Navigate to Bottom of Call Stack","Navigate Up Call Stack","Navigate Down Call Stack","Select Debug Console","Select Debug Session","Choose the specific location","No executable code is associated at the current cursor position.","Jump to Cursor","No step targets available","Add Configuration...","Add Inline Breakpoint"],"vs/workbench/contrib/debug/browser/debugConsoleQuickAccess":["Start a New Debug Session"],"vs/workbench/contrib/debug/browser/debugEditorActions":["Debug: Toggle Breakpoint","Toggle &&Breakpoint","Debug: Add Conditional Breakpoint...","&&Conditional Breakpoint...","Debug: Add Logpoint...","&&Logpoint...","Debug: Edit Breakpoint","&&Edit Breakpoint","Open Disassembly View","&&DisassemblyView","Toggle Source Code in Disassembly View","&&ToggleSource","Debug: Show Hover","Step targets are not available here","Step Into Target","Debug: Go to Next Breakpoint","Debug: Go to Previous Breakpoint","Close Exception Widget","Run to Cursor","Evaluate in Debug Console","Add to Watch"],"vs/workbench/contrib/debug/browser/debugIcons":["View icon of the debug console view.","View icon of the run view.","View icon of the variables view.","View icon of the watch view.","View icon of the call stack view.","View icon of the breakpoints view.","View icon of the loaded scripts view.","Icon for breakpoints.","Icon for disabled breakpoints.","Icon for unverified breakpoints.","Icon for function breakpoints.","Icon for disabled function breakpoints.","Icon for unverified function breakpoints.","Icon for conditional breakpoints.","Icon for disabled conditional breakpoints.","Icon for unverified conditional breakpoints.","Icon for data breakpoints.","Icon for disabled data breakpoints.","Icon for unverified data breakpoints.","Icon for log breakpoints.","Icon for disabled log breakpoint.","Icon for unverified log breakpoints.","Icon for breakpoint hints shown on hover in editor glyph margin.","Icon for unsupported breakpoints.","Icon for a stackframe shown in the editor glyph margin.","Icon for a focused stackframe  shown in the editor glyph margin.","Icon for the debug bar gripper.","Icon for the debug restart frame action.","Icon for the debug stop action.","Icon for the debug disconnect action.","Icon for the debug restart action.","Icon for the debug step over action.","Icon for the debug step into action.","Icon for the debug step out action.","Icon for the debug step back action.","Icon for the debug pause action.","Icon for the debug continue action.","Icon for the debug reverse continue action.","Icon for the run or debug action.","Icon for the debug start action.","Icon for the debug configure action.","Icon for the debug console open action.","Icon for removing debug configurations.","Icon for the collapse all action in the debug views.","Icon for the session icon in the call stack view.","Icon for the clear all action in the debug console.","Icon for the Remove All action in the watch view.","Icon for the Remove action in the watch view.","Icon for the add action in the watch view.","Icon for the add function breakpoint action in the watch view.","Icon for the Remove All action in the breakpoints view.","Icon for the activate action in the breakpoints view.","Icon for the debug evaluation input marker.","Icon for the debug evaluation prompt.","Icon for the inspect memory action."],"vs/workbench/contrib/debug/browser/debugQuickAccess":["No matching launch configurations","Configure Launch Configuration","contributed","Remove Launch Configuration","{0} contributed configurations","configure","Add Config ({0})...","Add Configuration..."],"vs/workbench/contrib/debug/browser/debugService":["1 active session","{0} active sessions","Running executes build tasks and program code from your workspace.","Debugging executes build tasks and program code from your workspace.","Compound must have \\"configurations\\" attribute set in order to start multiple configurations.","Could not find launch configuration \'{0}\' in the workspace.","There are multiple launch configurations \'{0}\' in the workspace. Use folder name to qualify the configuration.","Can not find folder with name \'{0}\' for configuration \'{1}\' in compound \'{2}\'.","Configuration \'{0}\' is missing in \'launch.json\'.","\'launch.json\' does not exist for passed workspace folder.","Attribute \'{0}\' has an unsupported value \'{1}\' in the chosen debug configuration.","Attribute \'{0}\' is missing from the chosen debug configuration.","Configured debug type \'{0}\' is not supported.","Missing property \'type\' for the chosen launch configuration.","Install {0} Extension","The active file can not be debugged. Make sure it is saved and that you have a debug extension installed for that file type.","\'{0}\' is already running. Do you want to start another instance?","Debug adapter process has terminated unexpectedly ({0})","{0}, debugging paused {1}, {2}:{3}","Added breakpoint, line {0}, file {1}","Removed breakpoint, line {0}, file {1}"],"vs/workbench/contrib/debug/browser/debugStatus":["Debug","Debug: {0}","Select and start debug configuration"],"vs/workbench/contrib/debug/browser/debugToolBar":["More...","Step Back","Reverse"],"vs/workbench/contrib/debug/browser/disassemblyView":["Disassembly not available.","instructions","from disassembly","Disassembly View","Address","Bytes","Instruction"],"vs/workbench/contrib/debug/browser/loadedScriptsView":["Debug Session","Debug Loaded Scripts","Workspace folder {0}, loaded script, debug","Session {0}, loaded script, debug","Folder {0}, loaded script, debug","{0}, loaded script, debug"],"vs/workbench/contrib/debug/browser/statusbarColorProvider":["Status bar background color when a program is being debugged. The status bar is shown in the bottom of the window","Status bar foreground color when a program is being debugged. The status bar is shown in the bottom of the window","Status bar border color separating to the sidebar and editor when a program is being debugged. The status bar is shown in the bottom of the window","Command center background color when a program is being debugged"],"vs/workbench/contrib/debug/browser/variablesView":["Type new variable value","Debug Variables","Scope {0}","{0}, value {1}","Inspecting binary data requires the Hex Editor extension. Would you like to install it now?","Cancel","Install","Installing the Hex Editor...","Collapse All"],"vs/workbench/contrib/debug/browser/watchExpressionsView":["Type new value","Type watch expression","Expression to watch","Debug Watch Expressions","{0}, value {1}","{0}, value {1}","Collapse All","Add Expression","Remove All Expressions"],"vs/workbench/contrib/debug/common/debugContentProvider":["Unable to resolve the resource without a debug session","Could not load source \'{0}\': {1}.","Could not load source \'{0}\'."],"vs/workbench/contrib/debug/common/debugLifecycle":["There is an active debug session, are you sure you want to stop it?","There are active debug sessions, are you sure you want to stop them?","&&Stop Debugging"],"vs/workbench/contrib/debug/common/disassemblyViewInput":["Disassembly"],"vs/workbench/contrib/debug/browser/welcomeView":["[Open a file](command:{0}) which can be debugged or run.","Run and Debug","Show all automatic debug configurations","To customize Run and Debug [create a launch.json file](command:{0}).","To customize Run and Debug, [open a folder](command:{0}) and create a launch.json file.","All debug extensions are disabled. Enable a debug extension or install a new one from the Marketplace.","Run"],"vs/workbench/contrib/debug/browser/breakpointWidget":["Message to log when breakpoint is hit. Expressions within {} are interpolated. \'{0}\' to accept, \'{1}\' to cancel.","Break when hit count condition is met. \'{0}\' to accept, \'{1}\' to cancel.","Break when expression evaluates to true. \'{0}\' to accept, \'{1}\' to cancel.","Expression","Hit Count","Log Message","Breakpoint Type"],"vs/platform/actions/browser/menuEntryActionViewItem":["{0} ({1})","{0} ({1})","{0}\\n[{1}] {2}"],"vs/workbench/contrib/debug/browser/debugActionViewItems":["Debug Launch Configurations","No Configurations","Add Config ({0})...","Add Configuration...","Debug Session"],"vs/workbench/contrib/mergeEditor/browser/commands/devCommands":["Merge Editor (Dev)","Copy Merge Editor State as JSON","Merge Editor","No active merge editor","Merge Editor","Successfully copied merge editor state","Save Merge Editor State to Folder","Merge Editor","No active merge editor","Select folder to save to","Merge Editor","Successfully saved merge editor state to folder","Load Merge Editor State from Folder","Select folder to save to"],"vs/workbench/contrib/mergeEditor/browser/commands/commands":["Open Merge Editor","Mixed Layout","Column Layout","Show Non-Conflicting Changes","Show Base","Show Base Top","Show Base Center","Merge Editor","Open File","Go to Next Unhandled Conflict","Go to Previous Unhandled Conflict","Toggle Current Conflict from Left","Toggle Current Conflict from Right","Compare Input 1 With Base","Compare With Base","Compare Input 2 With Base","Compare With Base","Open Base File","Accept All Changes from Left","Accept All Changes from Right","Reset Result","Reset","Reset Choice for \'Close with Conflicts\'","Complete Merge","Do you want to complete the merge of {0}?","The file contains unhandled conflicts.","&&Complete with Conflicts"],"vs/workbench/contrib/mergeEditor/browser/mergeEditorInput":["Merging: {0}"],"vs/workbench/contrib/mergeEditor/browser/view/mergeEditor":["Text Merge Editor"],"vs/platform/history/browser/contextScopedHistoryWidget":["Whether suggestion are visible"],"vs/workbench/contrib/debug/browser/linkDetector":["follow link using forwarded port","follow link","Cmd + click to {0}\\n{1}","Ctrl + click to {0}\\n{1}","Cmd + click to {0}","Ctrl + click to {0}"],"vs/workbench/contrib/debug/browser/replViewer":["Debug Console","Variable {0}, value {1}",", occurred {0} times","Debug console variable {0}, value {1}","Debug console group {0}"],"vs/workbench/contrib/debug/common/replModel":["Console was cleared"],"vs/workbench/contrib/markers/browser/markersView":["Showing {0} of {1}","Showing {0} problems","Showing {0} of {1} problems","Clear Filters"],"vs/workbench/contrib/markers/browser/messages":["Toggle Problems (Errors, Warnings, Infos)","Focus Problems (Errors, Warnings, Infos)","Problems View","Controls whether Problems view should automatically reveal files when opening them.","Controls the default view mode of the Problems view.","When enabled shows the current problem in the status bar.","Controls the order in which problems are navigated.","Navigate problems ordered by severity","Navigate problems ordered by position","No problems have been detected in the workspace.","No problems have been detected in the current file.","No results found with provided filter criteria.","More Filters...","Show Errors","Show Warnings","Show Infos","Hide Excluded Files","Show Active File Only","Filter Problems","Show fixes","Filter Problems","Filter (e.g. text, **/*.ts, !**/node_modules/**)","errors","warnings","infos","1 Error","{0} Errors","1 Warning","{0} Warnings","1 Info","{0} Infos","1 Unknown","{0} Unknowns","[Ln {0}, Col {1}]","{0} problems in file {1} of folder {2}"," This problem has references to {0} locations.","Error: {0} at line {1} and character {2}.{3} generated by {4}","Error: {0} at line {1} and character {2}.{3}","Warning: {0} at line {1} and character {2}.{3} generated by {4}","Warning: {0} at line {1} and character {2}.{3}","Info: {0} at line {1} and character {2}.{3} generated by {4}","Info: {0} at line {1} and character {2}.{3}","Problem: {0} at line {1} and character {2}.{3} generated by {4}","Problem: {0} at line {1} and character {2}.{3}","{0} at line {1} and character {2} in {3}","Show Errors and Warnings","Problems"],"vs/workbench/browser/parts/views/viewFilter":["More Filters..."],"vs/workbench/contrib/markers/browser/markersFileDecorations":["Problems","1 problem in this file","{0} problems in this file","Show Errors & Warnings on files and folder."],"vs/workbench/contrib/url/browser/trustedDomains":["Manage Trusted Domains","Trust {0}","Trust {0} on all ports","Trust {0} and all its subdomains","Trust all domains (disables link protection)","Manage Trusted Domains"],"vs/workbench/contrib/url/browser/trustedDomainsValidator":["Do you want {0} to open the external website?","&&Open","&&Copy","Configure &&Trusted Domains"],"vs/workbench/contrib/comments/common/commentContextKeys":["Whether the position at the active cursor has a commenting range","Whether the active editor has a commenting range","Whether the open workspace has either comments or commenting ranges.","Set when the comment thread has no comments","Set when the comment has no input","The context value of the comment","The context value of the comment thread","The comment controller id associated with a comment thread","Set when the comment is focused"],"vs/workbench/contrib/comments/browser/commentsEditorContribution":["Go to Next Commenting Range","Go to Previous Commenting Range","Toggle Editor Commenting","The cursor must be within a commenting range to add a comment","Add Comment on Current Selection","Collapse All Comments","Expand All Comments","Expand Unresolved Comments"],"vs/workbench/contrib/webviewPanel/browser/webviewCommands":["Show find","Stop find","Find next","Find previous","Reload Webviews"],"vs/workbench/contrib/webviewPanel/browser/webviewEditor":["The viewType of the currently active webview panel."],"vs/workbench/contrib/customEditor/common/customEditor":["The viewType of the currently active custom editor."],"vs/workbench/contrib/externalUriOpener/common/configuration":["Configure the opener to use for external URIs (http, https).","Map URI pattern to an opener id.\\nExample patterns: \\n{0}","Map URI pattern to an opener id.\\nExample patterns: \\n{0}","Open using VS Code\'s standard opener."],"vs/workbench/contrib/externalUriOpener/common/externalUriOpenerService":["Open in new browser window","Open in default browser","Configure default opener...","How would you like to open: {0}"],"vs/workbench/contrib/extensions/common/extensionsInput":["Extension: {0}"],"vs/workbench/contrib/extensions/browser/extensionsViews":["Extensions","Unable to search the Marketplace when offline, please check your network connection.","Error while fetching extensions. {0}","No extensions found.","Marketplace returned \'ECONNREFUSED\'. Please check the \'http.proxy\' setting.","Open User Settings","There are no extensions to install.","Verified Publisher {0}","Publisher {0}","Deprecated","Rated {0} out of 5 stars by {1} users"],"vs/workbench/contrib/extensions/browser/extensionsIcons":["View icon of the extensions view.","Icon for the \'Manage\' action in the extensions view.","Icon for the \'Clear Search Result\' action in the extensions view.","Icon for the \'Refresh\' action in the extensions view.","Icon for the \'Filter\' action in the extensions view.","Icon for the \'Install Local Extension in Remote\' action in the extensions view.","Icon for the \'Install Workspace Recommended Extensions\' action in the extensions view.","Icon for the \'Configure Recommended Extensions\' action in the extensions view.","Icon to indicate that an extension is synced.","Icon to indicate that an extension is ignored when syncing.","Icon to indicate that an extension is remote in the extensions view and editor.","Icon shown along with the install count in the extensions view and editor.","Icon shown along with the rating in the extensions view and editor.","Icon used for the verified extension publisher in the extensions view and editor.","Icon shown for extensions having pre-release versions in extensions view and editor.","Icon used for sponsoring extensions in the extensions view and editor.","Full star icon used for the rating in the extensions editor.","Half star icon used for the rating in the extensions editor.","Empty star icon used for the rating in the extensions editor.","Icon shown with a error message in the extensions editor.","Icon shown with a warning message in the extensions editor.","Icon shown with an info message in the extensions editor.","Icon shown with a workspace trust message in the extension editor.","Icon shown with a activation time message in the extension editor."],"vs/platform/dnd/browser/dnd":["File is too large to open as untitled editor. Please upload it first into the file explorer and then try again."],"vs/workbench/contrib/extensions/browser/extensionsActions":["{0} for the Web","The \'{0}\' extension is not available in {1}. Click \'More Information\' to learn more.","&&More Information","Close","{0} cannot verify the \'{1}\' extension. Are you sure you want to install it?","Install Anyway","Cancel","Error while updating \'{0}\' extension.","Error while installing \'{0}\' extension.","Please check the [log]({0}) for more details.","Try Downloading Manually...","Once downloaded, please manually install the downloaded VSIX of \'{0}\'.","Install from VSIX...","Install","This extension is deprecated as it is no longer being maintained.","Install Anyway","This extension is deprecated. Use the {0} extension instead.","&&Open {0}","This extension is deprecated as this functionality is now built-in to VS Code.","&&Configure Settings","Are you sure you want to install \'{0}\'?","Installing extension {0} started. An editor is now open with more details on this extension","Installing extension {0} is completed.","Install Pre-Release","Install Pre-Release Version","Install","Install Release Version","Install","Installing","Install","Installing","Installing extension {0} started. An editor is now open with more details on this extension","Install in {0}","Install Locally","Install in Browser","Uninstall","Uninstalling","Uninstalling extension {0} started.","Please reload Visual Studio Code to complete the uninstallation of the extension {0}.","Update","Update to v{0}","Update","Updating extension {0} to version {1} started.","Updating extension {0} to version {1} completed.","Ignore Updates","Ignoring {0} updates","Migrate","Migrate to {0}","Migrate","Manage","Manage","Switch to Pre-Release Version","Switch to Pre-Release version of this extension","Switch to Release Version","Switch to Release version of this extension","Install Another Version...","This extension has no other versions.","pre-release","current","Select Version to Install","Enable (Workspace)","Enable this extension only in this workspace","Enable","Enable this extension","Disable (Workspace)","Disable this extension only in this workspace","Disable","Disable this extension","Enable","Disable","Reload","Reload Required","current","Set Color Theme","Select Color Theme","Set File Icon Theme","Select File Icon Theme","Set Product Icon Theme","Select Product Icon Theme","Set Display Language","Clear Display Language","Show Recommended Extension","Install Recommended Extension","Do not recommend this extension again","Undo","Search Extensions","Unable to create \'extensions.json\' file inside the \'.vscode\' folder ({0}).","Configure Recommended Extensions (Workspace)","Configure Recommended Extensions (Workspace Folder)","Updated","Installed","Uninstalled","Enabled","Disabled","This extension is ignored during sync","This extension is synced","Sync this extension","Do not sync this extension","This extension was reported to be problematic.","This extension is deprecated. Use the {0} extension instead.","settings","This extension is deprecated as this functionality is now built-in to VS Code. Configure these {0} to use this functionality.","This extension is deprecated as it is no longer being maintained.","The \'{0}\' extension is not available in {1} for {2}.","Learn More","{0} for the Web","The \'{0}\' extension is not available in {1}.","Learn Why","This extension is disabled by the environment.","This extension is enabled because it is required in the current environment.","This extension has been disabled because it does not support virtual workspaces.","This extension has limited features because the current workspace is virtual.","This extension has been disabled because the current workspace is not trusted.","This extension has limited features because the current workspace is not trusted.","This extension is disabled in this workspace because it is defined to run in the Remote Extension Host. Please install the extension in \'{0}\' to enable.","Learn More","This extension is disabled in this workspace because it is defined to run in the Local Extension Host. Please install the extension locally to enable.","Learn More","This extension is disabled because it is defined to run only in {0} for the Desktop.","Learn More","This extension is disabled because it is not supported in {0} for the Web.","Learn More","Install the language pack extension on \'{0}\' to enable it there also.","Install the language pack extension locally to enable it there also.","This extension is enabled in the Remote Extension Host because it prefers to run there.","Learn More","This extension is enabled in the Local Extension Host because it prefers to run there.","Learn More","This extension is enabled in the Web Worker Extension Host because it prefers to run there.","Learn More","This extension has been disabled because it depends on an extension that is disabled.","This extension is enabled for this workspace by the user.","Extension is enabled on \'{0}\'","This extension is enabled globally.","This extension is disabled globally by the user.","This extension is disabled for this workspace by the user.","Reinstall Extension...","Select Extension to Reinstall","Please reload Visual Studio Code to complete reinstalling the extension {0}.","Reinstalling the extension {0} is completed.","Reload Now","Install Specific Version of Extension...","Select Extension","Select extensions to install","There are no extensions to install.","Installing Extensions...","Successfully installed extensions.","Install Local Extensions in \'{0}\'...","Install Local Extensions in \'{0}\'","Install Remote Extensions Locally...","Install Remote Extensions Locally","Button background color for extension actions.","Button foreground color for extension actions.","Button background hover color for extension actions.","Button separator color for extension actions","Button background color for extension actions that stand out (e.g. install button).","Button foreground color for extension actions that stand out (e.g. install button).","Button background hover color for extension actions that stand out (e.g. install button)."],"vs/workbench/contrib/terminal/browser/terminal.contribution":["Type the name of a terminal to open.","Show All Opened Terminals","&&Terminal","Terminal","Terminal"],"vs/workbench/contrib/terminal/browser/terminalView":["Use \'monospace\'","The terminal only supports monospace fonts. Be sure to restart VS Code if this is a newly installed font.","Open Terminals.","Starting..."],"vs/workbench/contrib/terminalContrib/accessibility/browser/terminal.accessibility.contribution":["Focus Accessible Buffer","Accessible Buffer Go to Next Command","Accessible Buffer Go to Previous Command"],"vs/workbench/contrib/terminalContrib/developer/browser/terminal.developer.contribution":["Show Terminal Texture Atlas","Write Data to Terminal","Enter data to write directly to the terminal, bypassing the pty","Restart Pty Host"],"vs/workbench/contrib/terminalContrib/environmentChanges/browser/terminal.environmentChanges.contribution":["Show Environment Contributions","Terminal Environment Changes","Extension: {0}","workspace"],"vs/workbench/contrib/terminalContrib/find/browser/terminal.find.contribution":["Focus Find","Hide Find","Toggle Find Using Regex","Toggle Find Using Whole Word","Toggle Find Using Case Sensitive","Find Next","Find Previous","Search Workspace"],"vs/workbench/contrib/terminalContrib/links/browser/terminal.links.contribution":["Open Detected Link...","Open Last URL Link","Open Last Local File Link"],"vs/workbench/contrib/terminalContrib/quickFix/browser/terminal.quickFix.contribution":["Show Terminal Quick Fixes"],"vs/workbench/contrib/extensions/common/extensionsFileTemplate":["Extensions","List of extensions which should be recommended for users of this workspace. The identifier of an extension is always \'${publisher}.${name}\'. For example: \'vscode.csharp\'.","Expected format \'${publisher}.${name}\'. Example: \'vscode.csharp\'.","List of extensions recommended by VS Code that should not be recommended for users of this workspace. The identifier of an extension is always \'${publisher}.${name}\'. For example: \'vscode.csharp\'.","Expected format \'${publisher}.${name}\'. Example: \'vscode.csharp\'."],"vs/workbench/contrib/extensions/browser/extensionEditor":["Extension Version","Pre-Release","Extension name","Preview","Preview","Built-in","Publisher","Install count","Rating","Details","Extension details, rendered from the extension\'s \'README.md\' file","Feature Contributions","Lists contributions to VS Code by this extension","Changelog","Extension update history, rendered from the extension\'s \'CHANGELOG.md\' file","Dependencies","Lists extensions this extension depends on","Extension Pack","Lists extensions those will be installed together with this extension","Runtime Status","Extension runtime status","No README available.","Readme","Extension Pack ({0})","No README available.","Readme","Categories","Marketplace","Repository","License","Extension Resources","More Info","Published","Last released","Last updated","Identifier","No Changelog available.","Changelog","No Contributions","No Contributions","No Dependencies","Activation Event:","Startup","Activation Time:","Activated By:","Not yet activated.","Uncaught Errors ({0})","Messages ({0})","No status available.","Settings ({0})","ID","Description","Default","Debuggers ({0})","Name","Type","View Containers ({0})","ID","Title","Where","Views ({0})","ID","Name","Where","Localizations ({0})","Language ID","Language Name","Language Name (Localized)","Custom Editors ({0})","View Type","Priority","Filename Pattern","Code Actions ({0})","Title","Kind","Description","Languages","Authentication ({0})","Label","ID","Color Themes ({0})","File Icon Themes ({0})","Product Icon Themes ({0})","Colors ({0})","ID","Description","Dark Default","Light Default","High Contrast Default","JSON Validation ({0})","File Match","Schema","Commands ({0})","ID","Title","Keyboard Shortcuts","Menu Contexts","Languages ({0})","ID","Name","File Extensions","Grammar","Snippets","Activation Events ({0})","Notebooks ({0})","ID","Name","Notebook Renderers ({0})","Name","Mimetypes","Find","Find Next","Find Previous"],"vs/workbench/contrib/extensions/common/extensionsUtils":["Disable other keymaps ({0}) to avoid conflicts between keybindings?","Yes","No"],"vs/workbench/contrib/extensions/browser/extensionsActivationProgress":["Activating Extensions..."],"vs/workbench/contrib/extensions/browser/extensionsDependencyChecker":["Extensions","Install Missing Dependencies","Finished installing missing dependencies. Please reload the window now.","Reload Window","There are no missing dependencies to install."],"vs/workbench/contrib/extensions/browser/extensionsQuickAccess":["Type an extension name to install or search.","Press Enter to search for extension \'{0}\'.","Press Enter to install extension \'{0}\'.","Press Enter to manage your extensions."],"vs/workbench/contrib/extensions/browser/extensionRecommendationNotificationService":["Don\'t Show Again","Do you want to ignore all extension recommendations?","Yes, Ignore All","No","this repository","\'{0}\' extension from {1}","extensions from {0}, {1} and others","extensions from {0} and {1}","extensions from {0}","Do you want to install the recommended {0} for {1}?","You have {0} installed on your system. Do you want to install the recommended {1} for it?","Install","Install (Do not sync)","Show Recommendations"],"vs/workbench/contrib/extensions/browser/extensionsWorkbenchService":["Manifest is not found","Please reload Visual Studio Code to complete the uninstallation of this extension.","Please reload Visual Studio Code to enable the updated extension.","Please reload Visual Studio Code to enable this extension locally.","Please reload Visual Studio Code to enable this extension in {0}.","Please reload Visual Studio Code to enable this extension.","Please reload Visual Studio Code to enable this extension.","Please reload Visual Studio Code to disable this extension.","Please reload Visual Studio Code to enable this extension.","Please reload Visual Studio Code to enable this extension.","This extension is reported to be problematic.","Can\'t install \'{0}\' extension because it is not compatible.","Uninstalling extension....","Unable to install extension \'{0}\' because the requested version \'{1}\' is not found.","Installing extension....","Installing \'{0}\' extension....","Disable All","Cannot disable \'{0}\' extension alone. \'{1}\' extension depends on this. Do you want to disable all these extensions?","Cannot disable \'{0}\' extension alone. \'{1}\' and \'{2}\' extensions depend on this. Do you want to disable all these extensions?","Cannot disable \'{0}\' extension alone. \'{1}\', \'{2}\' and other extensions depend on this. Do you want to disable all these extensions?"],"vs/workbench/contrib/extensions/browser/extensionsCompletionItemsProvider":["Example"],"vs/workbench/contrib/extensions/browser/deprecatedExtensionsChecker":["You have deprecated extensions installed. We recommend to review them and migrate to alternatives.","Show Deprecated Extensions","Don\'t Show Again"],"vs/workbench/contrib/extensions/browser/abstractRuntimeExtensionsEditor":["Activated by {0} on start-up","Activated by {1} because a file matching {0} exists in your workspace","Activated by {1} because file {0} exists in your workspace","Activated by {1} because searching for {0} took too long","Activated by {0} after start-up finished","Activated by {1} because you opened a {0} file","Activated by {1} on {0}","Extension is activating...","Extension has caused the extension host to freeze.","{0} uncaught errors","Runtime Extensions","Copy id ({0})","Disable (Workspace)","Disable","Show Running Extensions"],"vs/workbench/contrib/tasks/common/problemMatcher":["The problem pattern is missing a regular expression.","The loop property is only supported on the last line matcher.","The problem pattern is invalid. The kind property must be provided only in the first element","The problem pattern is invalid. It must have at least have a file and a message.","The problem pattern is invalid. It must either have kind: \\"file\\" or have a line or location match group.","Error: The string {0} is not a valid regular expression.\\n","The regular expression to find an error, warning or info in the output.","whether the pattern matches a location (file and line) or only a file.","The match group index of the filename. If omitted 1 is used.","The match group index of the problem\'s location. Valid location patterns are: (line), (line,column) and (startLine,startColumn,endLine,endColumn). If omitted (line,column) is assumed.","The match group index of the problem\'s line. Defaults to 2","The match group index of the problem\'s line character. Defaults to 3","The match group index of the problem\'s end line. Defaults to undefined","The match group index of the problem\'s end line character. Defaults to undefined","The match group index of the problem\'s severity. Defaults to undefined","The match group index of the problem\'s code. Defaults to undefined","The match group index of the message. If omitted it defaults to 4 if location is specified. Otherwise it defaults to 5.","In a multi line matcher loop indicated whether this pattern is executed in a loop as long as it matches. Can only specified on a last pattern in a multi line pattern.","The name of the problem pattern.","The name of the problem multi line problem pattern.","The actual patterns.","Contributes problem patterns","Invalid problem pattern. The pattern will be ignored.","Invalid problem pattern. The pattern will be ignored.","Error: the description can\'t be converted into a problem matcher:\\n{0}\\n","Error: the description doesn\'t define a valid problem pattern:\\n{0}\\n","Error: the description doesn\'t define an owner:\\n{0}\\n","Error: the description doesn\'t define a file location:\\n{0}\\n","Info: unknown severity {0}. Valid values are error, warning and info.\\n","Error: the pattern with the identifier {0} doesn\'t exist.","Error: the pattern property refers to an empty identifier.","Error: the pattern property {0} is not a valid pattern variable name.","A problem matcher must define both a begin pattern and an end pattern for watching.","Error: The string {0} is not a valid regular expression.\\n","The regular expression to detect the begin or end of a background task.","The match group index of the filename. Can be omitted.","The name of a contributed or predefined pattern","A problem pattern or the name of a contributed or predefined problem pattern. Can be omitted if base is specified.","The name of a base problem matcher to use.","The owner of the problem inside Code. Can be omitted if base is specified. Defaults to \'external\' if omitted and base is not specified.","A human-readable string describing the source of this diagnostic, e.g. \'typescript\' or \'super lint\'.","The default severity for captures problems. Is used if the pattern doesn\'t define a match group for severity.","Controls if a problem reported on a text document is applied only to open, closed or all documents.","Defines how file names reported in a problem pattern should be interpreted. A relative fileLocation may be an array, where the second element of the array is the path of the relative file location. The search fileLocation mode, performs a deep (and, possibly, heavy) file system search within the directories specified by the include/exclude properties of the second element (or the current workspace directory if not specified).","Patterns to track the begin and end of a matcher active on a background task.","If set to true the background monitor is in active mode when the task starts. This is equals of issuing a line that matches the beginsPattern","If matched in the output the start of a background task is signaled.","If matched in the output the end of a background task is signaled.","The watching property is deprecated. Use background instead.","Patterns to track the begin and end of a watching matcher.","If set to true the watcher is in active mode when the task starts. This is equals of issuing a line that matches the beginPattern","If matched in the output the start of a watching task is signaled.","If matched in the output the end of a watching task is signaled.","This property is deprecated. Use the watching property instead.","A regular expression signaling that a watched tasks begins executing triggered through file watching.","This property is deprecated. Use the watching property instead.","A regular expression signaling that a watched tasks ends executing.","The name of the problem matcher used to refer to it.","A human readable label of the problem matcher.","Contributes problem matchers","Microsoft compiler problems","Less problems","Gulp TSC Problems","JSHint problems","JSHint stylish problems","ESLint compact problems","ESLint stylish problems","Go problems"],"vs/workbench/contrib/tasks/browser/runAutomaticTasks":["Manage Automatic Tasks","Allow Automatic Tasks","Disallow Automatic Tasks"],"vs/workbench/contrib/tasks/common/jsonSchema_v2":["Specifies whether the command is a shell command or an external program. Defaults to false if omitted.","The property isShellCommand is deprecated. Use the type property of the task and the shell property in the options instead. See also the 1.14 release notes.","Hide this task from the run task quick pick","The task identifier.","Another task this task depends on.","The other tasks this task depends on.","Either a string representing another task or an array of other tasks that this task depends on.","Run all dependsOn tasks in parallel.","Run all dependsOn tasks in sequence.","Determines the order of the dependsOn tasks for this task. Note that this property is not recursive.","An optional description of a task that shows in the Run Task quick pick as a detail.","An optional icon for the task","An optional codicon ID to use","An optional color of the icon","Configures the panel that is used to present the task\'s output and reads its input.","Controls whether the executed command is echoed to the panel. Default is true.","Controls whether the panel takes focus. Default is false. If set to true the panel is revealed as well.","Always reveals the problems panel when this task is executed.","Only reveals the problems panel if a problem is found.","Never reveals the problems panel when this task is executed.","Controls whether the problems panel is revealed when running this task or not. Takes precedence over option \\"reveal\\". Default is \\"never\\".","Always reveals the terminal when this task is executed.","Only reveals the terminal if the task exits with an error or the problem matcher finds an error.","Never reveals the terminal when this task is executed.","Controls whether the terminal running the task is revealed or not. May be overridden by option \\"revealProblems\\". Default is \\"always\\".","Controls if the panel is shared between tasks, dedicated to this task or a new one is created on every run.","Controls whether to show the `Terminal will be reused by tasks, press any key to close it` message.","Controls whether the terminal is cleared before executing the task.","Controls whether the task is executed in a specific terminal group using split panes.","Controls whether the terminal the task runs in is closed when the task exits.","The terminal property is deprecated. Use presentation instead","Marks the task as a build task accessible through the \'Run Build Task\' command.","Marks the task as a test task accessible through the \'Run Test Task\' command.","Assigns the task to no group","The task\'s execution group.","Defines if this task is the default task in the group, or a glob to match the file which should trigger this task.","Marks the task as the default build task.","Marks the task as the default test task.","Defines to which execution group this task belongs to. It supports \\"build\\" to add it to the build group and \\"test\\" to add it to the test group.","Defines whether the task is run as a process or as a command inside a shell.","The shell command to be executed. Array items will be joined using a space character","The shell command to be executed. Array items will be joined using a space character","The actual command value","Escapes characters using the shell\'s escape character (e.g. ` under PowerShell and \\\\ under bash).","Quotes the argument using the shell\'s strong quote character (e.g. \' under PowerShell and bash).","Quotes the argument using the shell\'s weak quote character (e.g. \\" under PowerShell and bash).","How the command value should be quoted.","The command to be executed. Can be an external program or a shell command.","The actual argument value","Escapes characters using the shell\'s escape character (e.g. ` under PowerShell and \\\\ under bash).","Quotes the argument using the shell\'s strong quote character (e.g. \' under PowerShell and bash).","Quotes the argument using the shell\'s weak quote character (e.g. \\" under PowerShell and bash).","How the argument value should be quoted.","Arguments passed to the command when this task is invoked.","The task\'s user interface label","The config\'s version number.","A user defined identifier to reference the task in launch.json or a dependsOn clause.","User defined identifiers are deprecated. For custom task use the name as a reference and for tasks provided by extensions use their defined task identifier.","Whether to reevaluate task variables on rerun.","Configures when the task should be run. If set to folderOpen, then the task will be run automatically when the folder is opened.","The number of instances of the task that are allowed to run simultaneously.","The task\'s run related options","The task\'s label","The task\'s name","The task\'s name property is deprecated. Use the label property instead.","Whether the executed task is kept alive and is running in the background.","Whether the user is prompted when VS Code closes with a running task.","The problem matcher(s) to use. Can either be a string or a problem matcher definition or an array of strings and problem matchers.","The task type to customize","The customize property is deprecated. See the 1.14 release notes on how to migrate to the new task customization approach","The task\'s name property is deprecated. Use the label property instead.","The property showOutput is deprecated. Use the reveal property inside the presentation property instead. See also the 1.14 release notes.","The property echoCommand is deprecated. Use the echo property inside the presentation property instead. See also the 1.14 release notes.","The property suppressTaskName is deprecated. Inline the command with its arguments into the task instead. See also the 1.14 release notes.","The property isBuildCommand is deprecated. Use the group property instead. See also the 1.14 release notes.","The property isTestCommand is deprecated. Use the group property instead. See also the 1.14 release notes.","Defines whether the task is run as a process or as a command inside a shell.","The property suppressTaskName is deprecated. Inline the command with its arguments into the task instead. See also the 1.14 release notes.","The property taskSelector is deprecated. Inline the command with its arguments into the task instead. See also the 1.14 release notes.","Windows specific command configuration","Mac specific command configuration","Linux specific command configuration"],"vs/workbench/contrib/extensions/browser/extensionEnablementWorkspaceTrustTransitionParticipant":["Restarting extension host due to workspace trust change."],"vs/workbench/contrib/tasks/common/jsonSchema_v1":["Task version 0.1.0 is deprecated. Please use 2.0.0","The config\'s version number","The runner has graduated. Use the official runner property","Defines whether the task is executed as a process and the output is shown in the output window or inside the terminal.","Windows specific command configuration","Mac specific command configuration","Linux specific command configuration","Specifies whether the command is a shell command or an external program. Defaults to false if omitted."],"vs/workbench/contrib/tasks/browser/tasksQuickAccess":["No matching tasks","Select the task to run"],"vs/workbench/contrib/tasks/common/taskDefinitionRegistry":["The actual task type. Please note that types starting with a \'$\' are reserved for internal usage.","Additional properties of the task type","Condition which must be true to enable this type of task. Consider using `shellExecutionSupported`, `processExecutionSupported`, and `customExecutionSupported` as appropriate for this task definition. See the [API documentation](https://code.visualstudio.com/api/extension-guides/task-provider#when-clause) for more information.","The task type configuration is missing the required \'taskType\' property","Contributes task kinds"],"vs/workbench/contrib/remote/browser/tunnelFactory":["Private","Public"],"vs/workbench/contrib/remote/browser/remote":["Get Started","Read Documentation","Review Issues","Report Issue","Select url to open","Remote Help","Remote Explorer","Remote Explorer","Attempting to reconnect in {0} second...","Attempting to reconnect in {0} seconds...","Reconnect Now","Reload Window","Connection Lost","Disconnected. Attempting to reconnect...","Cannot reconnect. Please reload the window.","&&Reload Window","Help and feedback"],"vs/workbench/contrib/remote/browser/remoteIndicator":["Remote","Show Remote Menu","Close Remote Connection","Close Re&&mote Connection","Install Remote Development Extensions","Opening Remote...","Opening Remote...","Reconnecting to {0}...","Disconnected from {0}","Editing on {0}","Editing on {0}","Some [features are not available]({0}) for resources located on a virtual file system.","Open a Remote Window","Remote Host","Network appears to be offline, certain features might be unavailable.","Network appears to have high latency ({0}ms last, {1}ms average), certain features may be slow to respond.","Learn More","Install","Close Remote Connection","Reload Window","Close Remote Workspace","Select an option to open a Remote Window","Installing extension... "],"vs/workbench/contrib/emmet/browser/actions/expandAbbreviation":["Emmet: Expand Abbreviation","Emmet: E&&xpand Abbreviation"],"vs/workbench/contrib/codeEditor/browser/accessibility/accessibility":["Toggle Screen Reader Accessibility Mode"],"vs/workbench/contrib/codeEditor/browser/diffEditorHelper":["Show Whitespace Differences","The diff algorithm was stopped early (after {0} ms.)","Remove Limit","You are in a diff editor.","View the next ({0}) or previous ({1}) diff in diff review mode, which is optimized for screen readers.","To control which audio cues should be played, the following settings can be configured: {0}."],"vs/workbench/contrib/codeEditor/browser/inspectKeybindings":["Inspect Key Mappings","Inspect Key Mappings (JSON)"],"vs/workbench/contrib/codeEditor/browser/largeFileOptimizations":["{0}: tokenization, wrapping, folding, codelens, word highlighting and sticky scroll have been turned off for this large file in order to reduce memory usage and avoid freezing or crashing.","Forcefully Enable Features","Please reopen file in order for this setting to take effect."],"vs/workbench/contrib/codeEditor/browser/inspectEditorTokens/inspectEditorTokens":["Developer: Inspect Editor Tokens and Scopes","Loading..."],"vs/workbench/contrib/codeEditor/browser/saveParticipants":["Running \'{0}\' Formatter ([configure]({1})).","Quick Fixes","Getting code actions from \'{0}\' ([configure]({1})).","Applying code action \'{0}\'."],"vs/workbench/contrib/codeEditor/browser/toggleColumnSelection":["Toggle Column Selection Mode","Column &&Selection Mode"],"vs/workbench/contrib/codeEditor/browser/toggleMinimap":["Toggle Minimap","&&Minimap"],"vs/workbench/contrib/codeEditor/browser/quickaccess/gotoLineQuickAccess":["Go to Line/Column...","Type the line number and optional column to go to (e.g. 42:5 for line 42 and column 5).","Go to Line/Column"],"vs/workbench/contrib/codeEditor/browser/toggleMultiCursorModifier":["Toggle Multi-Cursor Modifier","Switch to Alt+Click for Multi-Cursor","Switch to Cmd+Click for Multi-Cursor","Switch to Ctrl+Click for Multi-Cursor"],"vs/workbench/contrib/codeEditor/browser/toggleRenderControlCharacter":["Toggle Control Characters","Render &&Control Characters"],"vs/workbench/contrib/codeEditor/browser/toggleRenderWhitespace":["Toggle Render Whitespace","&&Render Whitespace"],"vs/workbench/contrib/codeEditor/browser/toggleWordWrap":["Whether the editor is currently using word wrapping.","View: Toggle Word Wrap","Disable wrapping for this file","Enable wrapping for this file","&&Word Wrap"],"vs/workbench/contrib/codeEditor/browser/emptyTextEditorHint/emptyTextEditorHint":["Press {0} to ask {1} to do something. ","Start typing to dismiss.","[[Ask {0} to do something]] or start typing to dismiss.","[[Select a language]], or [[fill with template]], or [[open a different editor]] to get started.\\nStart typing to dismiss or [[don\'t show]] this again.","Execute {0} to select a language, execute {1} to fill with template, or execute {2} to open a different editor and get started. Start typing to dismiss."," Toggle {0} in settings to disable this hint."],"vs/workbench/contrib/snippets/browser/commands/configureSnippets":["(global)","({0})","({0}) {1}","Type snippet file name","Invalid file name","\'{0}\' is not a valid file name","\'{0}\' already exists","Configure User Snippets","User Snippets","User &&Snippets","global","New Global Snippets file...","{0} workspace","New Snippets file for \'{0}\'...","Existing Snippets","New Snippets","New Snippets","Select Snippets File or Create Snippets"],"vs/workbench/contrib/snippets/browser/commands/fileTemplateSnippets":["Fill File with Snippet","Select a snippet"],"vs/workbench/contrib/snippets/browser/commands/insertSnippet":["Insert Snippet"],"vs/workbench/contrib/snippets/browser/commands/surroundWithSnippet":["Surround With Snippet..."],"vs/workbench/contrib/snippets/browser/snippetCodeActionProvider":["Surround With: {0}","Start with Snippet","Start with: {0}"],"vs/workbench/contrib/snippets/browser/snippetsService":["Expected string in `contributes.{0}.path`. Provided value: {1}","When omitting the language, the value of `contributes.{0}.path` must be a `.code-snippets`-file. Provided value: {1}","Unknown language in `contributes.{0}.language`. Provided value: {1}","Expected `contributes.{0}.path` ({1}) to be included inside extension\'s folder ({2}). This might make the extension non-portable.","Contributes snippets.","Language identifier for which this snippet is contributed to.","Path of the snippets file. The path is relative to the extension folder and typically starts with \'./snippets/\'.","One or more snippets from the extension \'{0}\' very likely confuse snippet-variables and snippet-placeholders (see https://code.visualstudio.com/docs/editor/userdefinedsnippets#_snippet-syntax for more details)","The snippet file \\"{0}\\" could not be read."],"vs/workbench/contrib/format/browser/formatActionsNone":["Format Document","This file cannot be formatted because it is too large","There is no formatter for \'{0}\' files installed.","&&Install Formatter..."],"vs/workbench/contrib/format/browser/formatActionsMultiple":["None","None","Extension \'{0}\' is configured as formatter but it cannot format \'{1}\'-files","There are multiple formatters for \'{0}\' files. One of them should be configured as default formatter.","Extension \'{0}\' is configured as formatter but not available. Select a different default formatter to continue.","Configure Default Formatter","&&Configure...","Configure...","Select a default formatter for \'{0}\' files","Configure...","Formatter Conflicts","Formatting","Defines a default formatter which takes precedence over all other formatter settings. Must be the identifier of an extension contributing a formatter.","(default)","Configure Default Formatter...","Select a formatter","Select a default formatter for \'{0}\' files","Format Document With...","Format Selection With..."],"vs/workbench/contrib/format/browser/formatModified":["Format Modified Lines"],"vs/workbench/contrib/update/browser/update":["This version of {0} does not have release notes online","Welcome to {0} v{1}! Would you like to read the Release Notes?","Release Notes","Updates are disabled because you are running the user-scope installation of {0} as Administrator.","Learn More","New {0} update available.","Checking for Updates...","Downloading...","Updating...","Update Service","There are currently no updates available.","There is an available update.","Download Update","Later","Release Notes","There\'s an update available: {0} {1}","Install Update","Later","Release Notes","Update Now","Later","Release Notes","Restart {0} to apply the latest update.","Check for Updates...","Checking for Updates...","Download Update (1)","Downloading Update...","Install Update... (1)","Installing Update...","Show Update Release Notes","Restart to Update (1)","Switch to Insiders Version...","Switch to Stable Version...","Changing the version requires a reload to take effect","Press the reload button to switch to the Insiders version of VS Code.","Press the reload button to switch to the Stable version of VS Code.","&&Reload","Choose the settings sync service to use after changing the version","The Insiders version of VS Code will synchronize your settings, keybindings, extensions, snippets and UI State using separate insiders settings sync service by default.","&&Insiders","&&Stable (current)"],"vs/workbench/contrib/welcomeGettingStarted/browser/gettingStartedInput":["Welcome"],"vs/workbench/contrib/welcomeGettingStarted/browser/startupPage":["Welcome Page","Could not open markdown preview: {0}.\\n\\nPlease make sure the markdown extension is enabled."],"vs/workbench/contrib/welcomeGettingStarted/browser/gettingStarted":["Overview of how to get up to speed with your editor.","Open Walkthrough...","Welcome","When checked, this page will be shown on startup.","Show welcome page on startup","Editing evolved","Open folder {0} with path {1}","Recent","You have no recent folders,","open a folder","to start.","Show All Recent Folders {0}","More...","Start","New","Updated","Hide","Hide","Walkthroughs","More...","Hide","Hide","All {0} steps complete!","{0} of {1} steps complete","Tip: Use keyboard shortcut ","Image showing {0}","Mark Done","Next Section","privacy statement","opt out","{0} collects usage data. Read our {1} and learn how to {2}."],"vs/workbench/contrib/welcomeGettingStarted/browser/gettingStartedService":["Built-In","Developer","Reset Welcome Page Walkthrough Progress"],"vs/workbench/contrib/welcomeGettingStarted/browser/gettingStartedIcons":["Used to represent walkthrough steps which have not been completed","Used to represent walkthrough steps which have been completed"],"vs/workbench/contrib/welcomeWalkthrough/browser/walkThroughPart":["unbound","It looks like Git is not installed on your system."],"vs/workbench/contrib/welcomeWalkthrough/browser/editor/editorWalkThrough":["Editor Playground","Interactive Editor Playground"],"vs/workbench/contrib/welcomeViews/common/viewsWelcomeContribution":["The viewsWelcome contribution in \'{0}\' requires \'enabledApiProposals: [\\"contribViewsWelcome\\"]\' in order to use the \'group\' proposed property."],"vs/workbench/contrib/welcomeViews/common/viewsWelcomeExtensionPoint":["Contributed views welcome content. Welcome content will be rendered in tree based views whenever they have no meaningful content to display, ie. the File Explorer when no folder is open. Such content is useful as in-product documentation to drive users to use certain features before they are available. A good example would be a `Clone Repository` button in the File Explorer welcome view.","Contributed welcome content for a specific view.","Target view identifier for this welcome content. Only tree based views are supported.","Target view identifier for this welcome content. Only tree based views are supported.","Welcome content to be displayed. The format of the contents is a subset of Markdown, with support for links only.","Condition when the welcome content should be displayed.","Group to which this welcome content belongs. Proposed API.","Condition when the welcome content buttons and command links should be enabled."],"vs/workbench/contrib/callHierarchy/browser/callHierarchyPeek":["Calls from \'{0}\'","Callers of \'{0}\'","Loading...","No calls from \'{0}\'","No callers of \'{0}\'"],"vs/workbench/contrib/typeHierarchy/browser/typeHierarchyPeek":["Supertypes of \'{0}\'","Subtypes of \'{0}\'","Loading...","No supertypes of \'{0}\'","No subtypes of \'{0}\'"],"vs/workbench/contrib/codeEditor/browser/outline/documentSymbolsTree":["{0} ({1})","1 problem in this element","{0} problems in this element","Contains elements with problems"],"vs/workbench/contrib/outline/browser/outlinePane":["The active editor cannot provide outline information.","Loading document symbols for \'{0}\'...","No symbols found in document \'{0}\'"],"vs/workbench/contrib/outline/browser/outlineActions":["Collapse All","Expand All","Follow Cursor","Filter on Type","Sort By: Position","Sort By: Name","Sort By: Category"],"vs/workbench/contrib/userDataSync/browser/userDataSync":["Turn Off","Configure...","Sync Now","syncing","synced {0}","Show Settings","Show Synced Data","Unable to sync due to conflicts in {0}. Please resolve them to continue.","Replace Remote","Replace Local","Show Conflicts","Error while accepting changes. Please check [logs]({0}) for more details.","Error while accepting changes. Please check [logs]({0}) for more details.","Settings sync was turned off because current session is expired, please sign in again to turn on sync.","Turn on Settings Sync...","Settings sync was turned off from another device, please turn on sync again.","Turn on Settings Sync...","Disabled syncing {0} because size of the {1} file to sync is larger than {2}. Please open the file and reduce the size and enable sync","Disabled syncing profiles because there are too many profiles to sync. Settings Sync supports syncing maximum 20 profiles. Please reduce the number of profiles and enable sync","Settings sync is disabled because the current version ({0}, {1}) is not compatible with the sync service. Please update before turning on sync.","Operation Id: {0}","Settings sync is disabled because the client is making invalid requests. Please report an issue with the logs.","Operation Id: {0}","Show Log","Report Issue","Settings sync is disabled because your data in the cloud is older than that of the client. Please clear your data in the cloud before turning on sync.","Clear Data in Cloud...","Show Synced Data","Settings Sync has been switched to insiders service","Settings Sync has been switched to stable service","Settings sync now uses a separate service, more information is available in the [Settings Sync Documentation](https://aka.ms/vscode-settings-sync-help#_syncing-stable-versus-insiders).","Settings sync was turned off because {0} now uses a separate service. Please turn on sync again.","Turn on Settings Sync...","Operation Id: {0}","Open {0} File","Unable to sync {0} because the content in the file is not valid. Please open the file and correct it.","Open {0} File","{0}: Conflicts Detected","Turning on Settings Sync...","Sign in to Sync Settings","No authentication providers are available.","Settings sync cannot be turned on because size of the {0} file to sync is larger than {1}. Please open the file and reduce the size and turn on sync","Settings sync cannot be turned on because the current version ({0}, {1}) is not compatible with the sync service. Please update before turning on sync.","Operation Id: {0}","Settings sync cannot be turned on because your data in the cloud is older than that of the client. Please clear your data in the cloud before turning on sync.","Clear Data in Cloud...","Show Synced Data","Error while turning on Settings Sync: Authentication failed.","Error while turning on Settings Sync. Please check [logs]({0}) for more details.","Error while turning on Settings Sync. {0}","Sign in","Please sign in to backup and sync your data across devices.","{0}: Configure...","Choose what to sync","Do you want to turn off sync?","Your settings, keybindings, extensions, snippets and UI State will no longer be synced.","&&Turn off","Turn off sync on all your devices and clear the data from the cloud.","{0}: Select Service","Ensure you are using the same settings sync service when syncing with multiple environments","Default","Insiders","Stable","Backup and Sync Settings...","Turning on Settings Sync...","Cancel","Sign in to Sync Settings","Sign in to Sync Settings (1)","Show Conflicts ({0})","Settings Sync is On","Error while turning off Settings Sync. Please check [logs]({0}) for more details.","Configure...","{0}: Show Log","Show Log","Complete Merge","Successfully downloaded Settings Sync activity.","Clear Data in Cloud..."],"vs/workbench/contrib/userDataProfile/browser/userDataProfile":["Profiles ({0})","Switch Profile...","Select Profile","Edit Profile...","Show Profile Contents","Export Profile...","Export Profile ({0})...","Import Profile...","Import from URL","Select File...","Profile Templates","Import from Profile Template...","Provide Profile Template URL","Error while creating profile: {0}","Select Profile Template File","Import Profile...","Save Current Profile As...","Create Profile...","Delete Profile...","Current","Delete Profile...","Select Profiles to Delete"],"vs/workbench/contrib/userDataProfile/browser/userDataProfileActions":["Create a Temporary Profile","Rename...","Rename {0}","Profile with name {0} already exists.","Current","Rename Profile...","Select Profile to Rename","Manage...","Cleanup Profiles","Reset Workspace Profiles Associations"],"vs/workbench/contrib/codeActions/common/codeActionsExtensionPoint":["Configure which editor to use for a resource.","Language modes that the code actions are enabled for.","`CodeActionKind` of the contributed code action.","Label for the code action used in the UI.","Description of what the code action does."],"vs/workbench/contrib/codeActions/common/documentationExtensionPoint":["Contributed documentation.","Contributed documentation for refactorings.","Contributed documentation for refactoring.","Label for the documentation used in the UI.","When clause.","Command executed."],"vs/workbench/contrib/codeActions/browser/codeActionsContribution":["Triggers Code Actions on explicit saves and auto saves triggered by window or focus changes.","Triggers Code Actions only when explicitly saved","Never triggers Code Actions on save","Triggers Code Actions only when explicitly saved. This value will be deprecated in favor of \\"explicit\\".","Never triggers Code Actions on save. This value will be deprecated in favor of \\"never\\".","Controls whether auto fix action should be run on file save.","Run Code Actions for the editor on save. Code Actions must be specified and the editor must not be shutting down. Example: `\\"source.organizeImports\\": \\"explicit\\" `","Controls whether \'{0}\' actions should be run on file save."],"vs/workbench/contrib/timeline/browser/timelinePane":["Loading...","Load more","The active editor cannot provide timeline information.","All timeline sources have been filtered out.","Local History will track recent changes as you save them unless the file has been excluded or is too large.","No filtered timeline information was provided.","No timeline information was provided.","Source Control has not been configured.","The active editor cannot provide timeline information.","{0}: {1}","Timeline","Loading timeline for {0}...","Icon for the refresh timeline action.","Icon for the pin timeline action.","Icon for the unpin timeline action.","Refresh","Timeline","Pin the Current Timeline","Timeline","Unpin the Current Timeline","Timeline","Timeline"],"vs/workbench/contrib/localHistory/browser/localHistoryTimeline":["Local History"],"vs/workbench/contrib/localHistory/browser/localHistoryCommands":["Local History","Compare with File","Compare with Previous","Select for Compare","Compare with Selected","Show Contents","Restore Contents","File Restored","Do you want to restore the contents of \'{0}\'?","Restoring will discard any unsaved changes.","&&Restore","Unable to restore \'{0}\'.","Find Entry to Restore","Select the file to show local history for","Select the local history entry to open","Local History: Find Entry to Restore...","Rename","Rename Local History Entry","Enter the new name of the local history entry","Delete","Do you want to delete the local history entry of \'{0}\' from {1}?","This action is irreversible!","&&Delete","Delete All","Do you want to delete all entries of all files in local history?","This action is irreversible!","&&Delete All","Create Entry","Create Local History Entry","Enter the new name of the local history entry for \'{0}\'","{0} ({1} • {2})","{0} ({1} • {2}) ↔ {3}","{0} ({1} • {2}) ↔ {3} ({4} • {5})"],"vs/workbench/contrib/editSessions/common/editSessions":["Cloud Changes","View icon of the cloud changes view.","Cloud Changes"],"vs/workbench/contrib/editSessions/common/editSessionsLogService":["Cloud Changes"],"vs/workbench/contrib/editSessions/browser/editSessionsStorageService":["Select an account to restore your working changes from the cloud","Select an account to store your working changes in the cloud","Signed In","Others","Sign in with {0}","Turn on Cloud Changes...","Turn on Cloud Changes... (1)","Turn off Cloud Changes...","Do you want to disable storing working changes in the cloud?","Delete all stored data from the cloud."],"vs/workbench/contrib/editSessions/browser/editSessionsViews":["You have no stored changes in the cloud to display.\\n{0}","Store Working Changes","Resume Working Changes","Store Working Changes","Delete Working Changes","Are you sure you want to permanently delete your working changes with ref {0}?"," You cannot undo this action.","Delete All Working Changes from Cloud","Are you sure you want to permanently delete all stored changes from the cloud?"," You cannot undo this action.","Compare Changes","Local Copy","Cloud Changes","Open File"],"vs/workbench/contrib/workspace/browser/workspaceTrustEditor":["Icon for workspace trust ion the banner.","Icon for the checkmark in the workspace trust editor.","Icon for the cross in the workspace trust editor.","Icon for the pick folder icon in the workspace trust editor.","Icon for the edit folder icon in the workspace trust editor.","Icon for the remove folder icon in the workspace trust editor.","Host","Path","{0}, trusted","{0} on {1}, trusted","Trusted Folders & Workspaces","Add Folder","Add Folder","Trust Folder","Select Folder To Trust","You trust the following folders, their subfolders, and workspace files.","You haven\'t trusted any folders or workspace files yet.","You will trust all repositories on {0}.","You will trust all repositories and forks under \'{0}\' on {1}.","You cannot trust individual folders within a repository.","Trust Folder","Select Folder To Trust","Edit Path","Open File Picker","Delete Path","Local","This window is trusted","You trust this window","You trust this folder","You trust this workspace","You are in Restricted Mode","In a Trusted Window","In Restricted Mode","You trust the authors of the files in the current window. All features are enabled:","You do not trust the authors of the files in the current window. The following features are disabled:","In a Trusted Folder","In Restricted Mode","You trust the authors of the files in the current folder. All features are enabled:","You do not trust the authors of the files in the current folder. The following features are disabled:","In a Trusted Workspace","In Restricted Mode","You trust the authors of the files in the current workspace. All features are enabled:","You do not trust the authors of the files in the current workspace. The following features are disabled:","All features are enabled because trust has been granted to the workspace.","{0} is in a restricted mode intended for safe code browsing.","[Configure your settings]({0}) or [learn more](https://aka.ms/vscode-workspace-trust).","Manage Workspace Trust","Trusted Folders & Workspaces","Tasks are allowed to run","Debugging is enabled","All enabled extensions are activated","Tasks are allowed to run","Debugging is enabled","All workspace settings are applied","All enabled extensions are activated","Tasks are not allowed to run","Debugging is disabled","[{0} extensions]({1}) are disabled or have limited functionality","Tasks are not allowed to run","Debugging is disabled","[{0} workspace settings]({1}) are not applied","Workspace settings requiring trust are not applied","[{0} extensions]({1}) are disabled or have limited functionality","Keyboard Shortcut: {0}","Trust","Trust the authors of all files in the current folder or its parent \'{0}\'.","Trust Parent","Don\'t Trust","This workspace is trusted via the bolded entries in the trusted folders below.","This folder is trusted via the bolded entries in the the trusted folders below.","This window is trusted by nature of the workspace that is opened."],"vs/workbench/services/workspaces/browser/workspaceTrustEditorInput":["Workspace Trust"],"vs/workbench/contrib/accessibility/browser/accessibilityConfiguration":["Accessibility","Provide information about how to access the terminal accessibility help menu when the terminal is focused.","Provide information about how to navigate changes in the diff editor when it is focused.","Provide information about how to access the chat help menu when the chat input is focused.","Provide information about how to access the inline editor chat accessibility help menu and alert with hints that describe how to use the feature when the input is focused.","Provide information about how to access the inline completions hover and accessible view.","Provide information about how to change a keybinding in the keybindings editor when a row is focused.","Provide information about how to focus the cell container or inner editor when a notebook cell is focused.","Provide information about how to open the hover in an accessible view.","Provide information about how to open the notification in an accessible view.","Provide information about relevant actions in an empty text editor.","Provide information about actions that can be taken in the comment widget or in a file which contains comments.","When in screen reader mode, alerts when a file is saved. Note that this will be ignored when {0} is enabled.","Alerts when a file is saved via user gesture.","Alerts whenever is a file is saved, including auto save.","Never alerts.","When in screen reader mode, alerts when a file or notebook cell is formatted. Note that this will be ignored when {0} is enabled.","Alerts when a file is formatted via user gesture.","Alerts whenever is a file is formatted, including auto save, on cell execution, and more.","Never alerts.","Whether to dim unfocused editors and terminals, which makes it more clear where typed input will go to. This works with the majority of editors with the notable exceptions of those that utilize iframes like notebooks and extension webview editors.","The opacity fraction (0.2 to 1.0) to use for unfocused editors and terminals. This will only take effect when {0} is enabled.","Controls whether the accessible view is hidden."],"vs/workbench/contrib/accessibility/browser/accessibleNotificationService":["Cleared","Saved","Formatted"],"vs/workbench/contrib/accessibility/browser/accessibilityStatus":["Are you using a screen reader to operate VS Code?","Yes","No","Screen Reader Optimized","Screen Reader Mode"],"vs/workbench/contrib/audioCues/browser/commands":["Help: List Audio Cues","Disabled","Enable/Disable Audio Cue","Select an audio cue to play"],"vs/workbench/contrib/share/browser/shareService":["The number of available share providers","Choose how to share {0}"],"vs/workbench/browser/parts/notifications/notificationsCenter":["No new notifications","Notifications","Notification Center Actions","Notifications Center"],"vs/workbench/browser/parts/notifications/notificationsAlerts":["Error: {0}","Warning: {0}","Info: {0}"],"vs/workbench/browser/parts/notifications/notificationsStatus":["Notifications","Notifications","Do Not Disturb","Do Not Disturb Mode is Enabled","Hide Notifications","No Notifications","No New Notifications","1 New Notification","{0} New Notifications","No New Notifications ({0} in progress)","1 New Notification ({0} in progress)","{0} New Notifications ({1} in progress)","Status Message"],"vs/workbench/browser/parts/notifications/notificationsToasts":["{0}, notification","{0}, source: {1}, notification"],"vs/workbench/browser/parts/notifications/notificationsCommands":["Notifications","Show Notifications","Hide Notifications","Clear All Notifications","Accept Notification Primary Action","Toggle Do Not Disturb Mode","Focus Notification Toast"],"vs/workbench/services/configuration/common/configurationEditing":["Error while writing to {0}. {1}","Open Tasks Configuration","Open Launch Configuration","Open Settings","Open Tasks Configuration","Open Launch Configuration","Save and Retry","Save and Retry","Open Settings","Unable to write {0} because it is configured in system policy.","Unable to write to {0} because {1} is not a registered configuration.","Unable to write {0} to Workspace Settings. This setting can be written only into User settings.","Unable to write {0} to Workspace Settings. This setting can be written only into User settings.","Unable to write to Folder Settings because {0} does not support the folder resource scope.","Unable to write to User Settings because {0} does not support for global scope.","Unable to write to Workspace Settings because {0} does not support for workspace scope in a multi folder workspace.","Unable to write to Folder Settings because no resource is provided.","Unable to write to Language Settings because {0} is not a resource language setting.","Unable to write to {0} because no workspace is opened. Please open a workspace first and try again.","Unable to write into the tasks configuration file. Please open it to correct errors/warnings in it and try again.","Unable to write into the launch configuration file. Please open it to correct errors/warnings in it and try again.","Unable to write into user settings. Please open the user settings to correct errors/warnings in it and try again.","Unable to write into remote user settings. Please open the remote user settings to correct errors/warnings in it and try again.","Unable to write into workspace settings. Please open the workspace settings to correct errors/warnings in the file and try again.","Unable to write into folder settings. Please open the \'{0}\' folder settings to correct errors/warnings in it and try again.","Unable to write into tasks configuration file because the file has unsaved changes. Please save it first and then try again.","Unable to write into launch configuration file because the file has unsaved changes. Please save it first and then try again.","Unable to write into user settings because the file has unsaved changes. Please save the user settings file first and then try again.","Unable to write into remote user settings because the file has unsaved changes. Please save the remote user settings file first and then try again.","Unable to write into workspace settings because the file has unsaved changes. Please save the workspace settings file first and then try again.","Unable to write into folder settings because the file has unsaved changes. Please save the \'{0}\' folder settings file first and then try again.","Unable to write into tasks configuration file because the content of the file is newer.","Unable to write into launch configuration file because the content of the file is newer.","Unable to write into user settings because the content of the file is newer.","Unable to write into remote user settings because the content of the file is newer.","Unable to write into workspace settings because the content of the file is newer.","Unable to write into folder settings because the content of the file is newer.","Unable to write to {0} because of an internal error.","User Settings","Remote User Settings","Workspace Settings","Folder Settings"],"vs/workbench/services/textfile/common/textFileEditorModelManager":["Failed to save \'{0}\': {1}"],"vs/workbench/common/editor/textEditorModel":["Language {0} was automatically detected and set as the language mode."],"vs/workbench/browser/parts/titlebar/titlebarPart":["Focus Title Bar","Command Center","Layout Controls"],"vs/workbench/services/configurationResolver/common/variableResolver":["Variable {0} can not be resolved. Please open an editor.","Variable {0}: can not find workspace folder of \'{1}\'.","Variable {0} can not be resolved. No such folder \'{1}\'.","Variable {0} can not be resolved in a multi folder workspace. Scope this variable using \':\' and a workspace folder name.","Variable {0} can not be resolved. Please open a folder.","Variable {0} can not be resolved because no environment variable name is given.","Variable {0} can not be resolved because setting \'{1}\' not found.","Variable {0} can not be resolved because \'{1}\' is a structured value.","Variable {0} can not be resolved because no settings name is given.","Variable {0} can not be resolved because the extension {1} is not installed.","Variable {0} can not be resolved because no extension name is given.","Variable {0} can not be resolved. UserHome path is not defined","Variable {0} can not be resolved. Make sure to have a line selected in the active editor.","Variable {0} can not be resolved. Make sure to have some text selected in the active editor.","Variable {0} can not be resolved because the command has no value."],"vs/workbench/services/workingCopy/common/workingCopyHistoryTracker":["Undo / Redo"],"vs/workbench/services/extensions/common/extensionHostManager":["Measure Extension Host Latency"],"vs/workbench/services/extensions/common/extensionsUtil":["Overwriting extension {0} with {1}.","Overwriting extension {0} with {1}.","Loading development extension at {0}"],"vs/workbench/contrib/localization/common/localizationsActions":["Select Display Language","Installed","Available","More Info","Clear Display Language Preference","Configure Display Language","Changes the locale of VS Code based on installed language packs. Common languages include French, Chinese, Spanish, Japanese, German, Korean, and more."],"vs/workbench/contrib/extensions/common/reportExtensionIssueAction":["Report Issue"],"vs/workbench/contrib/extensions/electron-sandbox/extensionsSlowActions":["Performance Issue","Report Issue","Did you attach the CPU-Profile?","This is a reminder to make sure that you have not forgotten to attach \'{0}\' to the issue you have just created.","Show Issues","Did you attach the CPU-Profile?","This is a reminder to make sure that you have not forgotten to attach \'{0}\' to an existing performance issue."],"vs/workbench/contrib/terminal/electron-sandbox/terminalRemote":["Create New Integrated Terminal (Local)"],"vs/workbench/contrib/terminal/browser/baseTerminalBackend":["Pty Host Status","Pty Host","The connection to the terminal\'s pty host process is unresponsive, terminals may stop working. Click to manually restart the pty host.","Pty Host is unresponsive"],"vs/workbench/contrib/localHistory/browser/localHistory":["Icon for a local history entry in the timeline view.","Icon for restoring contents of a local history entry."],"vs/workbench/contrib/tasks/browser/taskTerminalStatus":["Task is running","Task succeeded","Task succeeded and waiting...","Task has errors","Task has errors and is waiting...","Task has warnings","Task has warnings and is waiting...","Task has infos","Task has infos and is waiting...","Beginning of detected errors for this run"],"vs/workbench/contrib/tasks/common/taskConfiguration":["Warning: options.cwd must be of type string. Ignoring value {0}\\n","Error: command argument must either be a string or a quoted string. Provided value is:\\n{0}","Warning: shell configuration is only supported when executing tasks in the terminal.","Error: Problem Matcher in declare scope must have a name:\\n{0}\\n","Warning: the defined problem matcher is unknown. Supported types are string | ProblemMatcher | Array<string | ProblemMatcher>.\\n{0}\\n","Error: Invalid problemMatcher reference: {0}\\n","Error: tasks configuration must have a type property. The configuration will be ignored.\\n{0}\\n","Error: there is no registered task type \'{0}\'. Did you miss installing an extension that provides a corresponding task provider?","Error: the task configuration \'{0}\' is missing the required property \'type\'. The task configuration will be ignored.","Error: the task configuration \'{0}\' is using an unknown type. The task configuration will be ignored.","Error: tasks is not declared as a custom task. The configuration will be ignored.\\n{0}\\n","Error: a task must provide a label property. The task will be ignored.\\n{0}\\n","Warning: {0} tasks are unavailable in the current environment.\\n","Error: the task \'{0}\' neither specifies a command nor a dependsOn property. The task will be ignored. Its definition is:\\n{1}","Error: the task \'{0}\' doesn\'t define a command. The task will be ignored. Its definition is:\\n{1}","Task version 2.0.0 doesn\'t support global OS specific tasks. Convert them to a task with a OS specific command. Affected tasks are:\\n{0}"],"vs/workbench/contrib/tasks/common/taskTemplates":["Executes .NET Core build command","Executes the build target","Example to run an arbitrary external command","Executes common maven commands"],"vs/workbench/contrib/tasks/browser/taskQuickPick":["Show All Tasks...","Configuration icon in the tasks selection list.","Icon for remove in the tasks selection list.","Configure Task","contributed","All {0} tasks","Remove Recently Used Task","recently used","configured","configured","Task detection for {0} tasks causes files in any workspace you open to be run as code. Enabling {0} task detection is a user setting and will apply to any workspace you open. \\n\\n Do you want to enable {0} task detection for all workspaces?","No","Select the task to run","$(gear) {0} task detection is turned off. Enable {1} task detection...","Go back ↩","No {0} tasks found. Go back ↩","There is no task provider registered for tasks of type \\"{0}\\"."],"vs/workbench/contrib/debug/common/abstractDebugAdapter":["Timeout after {0} ms for \'{1}\'"],"vs/workbench/contrib/debug/node/debugAdapter":["Debug adapter executable \'{0}\' does not exist.","Cannot determine executable for debug adapter \'{0}\'.","Unable to launch debug adapter from \'{0}\'.","Unable to launch debug adapter."],"vs/platform/menubar/electron-main/menubar":["New &&Window","&&File","&&Edit","&&Selection","&&View","&&Go","&&Run","&&Terminal","Window","&&Help","About {0}","&&Preferences","Services","Hide {0}","Hide Others","Show All","Quit {0}","&&Quit","Cancel","Are you sure you want to quit?","Minimize","Zoom","Bring All to Front","Switch &&Window...","New Tab","Show Previous Tab","Show Next Tab","Move Tab to New Window","Merge All Windows","Check for &&Updates...","Checking for Updates...","D&&ownload Available Update","Downloading Update...","Install &&Update...","Installing Update...","Restart to &&Update"],"vs/platform/windows/electron-main/windowImpl":["&&Reopen","&&Close","&&Keep Waiting","The window is not responding","You can reopen or close the window or keep waiting.","Don\'t restore editors","The window terminated unexpectedly","The window terminated unexpectedly (reason: \'{0}\', code: \'{1}\')","&&Reopen","&&New Window","&&Close","We are sorry for the inconvenience. You can reopen the window to continue where you left off.","We are sorry for the inconvenience. You can open a new empty window to start again.","Don\'t restore editors","You can still access the menu bar by pressing the Alt-key."],"vs/platform/terminal/common/terminalPlatformConfiguration":["An optional set of arguments to run the shell executable with.","Controls whether or not the profile name overrides the auto detected one.","A codicon ID to associate with the terminal icon.","A theme color ID to associate with the terminal icon.","An object with environment variables that will be added to the terminal profile process. Set to `null` to delete environment variables from the base environment.","A single path to a shell executable or an array of paths that will be used as fallbacks when one fails.","A single path to a shell executable.","A set of terminal profile customizations for {0} which allows adding, removing or changing how terminals are launched. Profiles are made up of a mandatory path, optional arguments and other presentation options.\\n\\nTo override an existing profile use its profile name as the key, for example:\\n\\n{1}\\n\\n{2}Read more about configuring profiles{3}.","Integrated Terminal","The terminal profile to use on Linux for automation-related terminal usage like tasks and debug.","The terminal profile to use on macOS for automation-related terminal usage like tasks and debug.","The terminal profile to use for automation-related terminal usage like tasks and debug. This setting will currently be ignored if {0} (now deprecated) is set.","A profile source that will auto detect the paths to the shell. Note that non-standard executable locations are not supported and must be created manually in a new profile.","The extension that contributed this profile.","The id of the extension terminal","The name of the extension terminal","The extension that contributed this profile.","The id of the extension terminal","The name of the extension terminal","The extension that contributed this profile.","The id of the extension terminal","The name of the extension terminal","Controls whether or not WSL distros are shown in the terminal dropdown","Whether new shells should inherit their environment from VS Code, which may source a login shell to ensure $PATH and other development variables are initialized. This has no effect on Windows.","Controls the maximum amount of lines that will be restored when reconnecting to a persistent terminal session. Increasing this will restore more lines of scrollback at the cost of more memory and increase the time it takes to connect to terminals on start up. This setting requires a restart to take effect and should be set to a value less than or equal to `#terminal.integrated.scrollback#`.","Whether to show hovers for links in the terminal output.","A set of process names to ignore when using the {0} setting.","Integrated Terminal","The default terminal profile on Linux.","The default terminal profile on macOS.","The default terminal profile on Windows."],"vs/base/browser/ui/findinput/findInput":["input"],"vs/base/browser/ui/inputbox/inputBox":["Error: {0}","Warning: {0}","Info: {0}","for history","Cleared Input"],"vs/editor/contrib/codeAction/browser/codeActionCommands":["Kind of the code action to run.","Controls when the returned actions are applied.","Always apply the first returned code action.","Apply the first returned code action if it is the only one.","Do not apply the returned code actions.","Controls if only preferred code actions should be returned.","Quick Fix...","No code actions available","No preferred code actions for \'{0}\' available","No code actions for \'{0}\' available","No preferred code actions available","No code actions available","Refactor...","No preferred refactorings for \'{0}\' available","No refactorings for \'{0}\' available","No preferred refactorings available","No refactorings available","Source Action...","No preferred source actions for \'{0}\' available","No source actions for \'{0}\' available","No preferred source actions available","No source actions available","Organize Imports","No organize imports action available","Fix All","No fix all action available","Auto Fix...","No auto fixes available"],"vs/editor/contrib/codeAction/browser/codeActionController":["Context: {0} at line {1} and column {2}.","Hide Disabled","Show Disabled"],"vs/editor/contrib/codeAction/browser/lightBulbWidget":["Show Code Actions. Preferred Quick Fix Available ({0})","Show Code Actions ({0})","Show Code Actions"],"vs/base/browser/ui/actionbar/actionViewItems":["{0} ({1})"],"vs/editor/contrib/dropOrPasteInto/browser/copyPasteController":["Whether the paste widget is showing","Show paste options...","Running paste handlers. Click to cancel","Select Paste Action","Running paste handlers"],"vs/editor/contrib/dropOrPasteInto/browser/defaultProviders":["Built-in","Insert Plain Text","Insert Uris","Insert Uri","Insert Paths","Insert Path","Insert Relative Paths","Insert Relative Path"],"vs/editor/contrib/dropOrPasteInto/browser/dropIntoEditorController":["Whether the drop widget is showing","Show drop options...","Running drop handlers. Click to cancel"],"vs/editor/contrib/folding/browser/foldingDecorations":["Background color behind folded ranges. The color must not be opaque so as not to hide underlying decorations.","Color of the folding control in the editor gutter.","Icon for expanded ranges in the editor glyph margin.","Icon for collapsed ranges in the editor glyph margin.","Icon for manually collapsed ranges in the editor glyph margin.","Icon for manually expanded ranges in the editor glyph margin."],"vs/editor/contrib/find/browser/findWidget":["Icon for \'Find in Selection\' in the editor find widget.","Icon to indicate that the editor find widget is collapsed.","Icon to indicate that the editor find widget is expanded.","Icon for \'Replace\' in the editor find widget.","Icon for \'Replace All\' in the editor find widget.","Icon for \'Find Previous\' in the editor find widget.","Icon for \'Find Next\' in the editor find widget.","Find / Replace","Find","Find","Previous Match","Next Match","Find in Selection","Close","Replace","Replace","Replace","Replace All","Toggle Replace","Only the first {0} results are highlighted, but all find operations work on the entire text.","{0} of {1}","No results","{0} found","{0} found for \'{1}\'","{0} found for \'{1}\', at {2}","{0} found for \'{1}\'","Ctrl+Enter now inserts line break instead of replacing all. You can modify the keybinding for editor.action.replaceAll to override this behavior."],"vs/editor/contrib/inlineCompletions/browser/commands":["Show Next Inline Suggestion","Show Previous Inline Suggestion","Trigger Inline Suggestion","Accept Next Word Of Inline Suggestion","Accept Word","Accept Next Line Of Inline Suggestion","Accept Line","Accept Inline Suggestion","Accept","Hide Inline Suggestion","Always Show Toolbar"],"vs/editor/contrib/inlineCompletions/browser/hoverParticipant":["Suggestion:"],"vs/editor/contrib/inlineCompletions/browser/inlineCompletionsController":["Inspect this in the accessible view ({0})"],"vs/editor/contrib/gotoSymbol/browser/peek/referencesController":["Whether reference peek is visible, like \'Peek References\' or \'Peek Definition\'","Loading...","{0} ({1})"],"vs/editor/contrib/gotoSymbol/browser/referencesModel":["in {0} on line {1} at column {2}","{0} in {1} on line {2} at column {3}","1 symbol in {0}, full path {1}","{0} symbols in {1}, full path {2}","No results found","Found 1 symbol in {0}","Found {0} symbols in {1}","Found {0} symbols in {1} files"],"vs/editor/contrib/gotoSymbol/browser/symbolNavigation":["Whether there are symbol locations that can be navigated via keyboard-only.","Symbol {0} of {1}, {2} for next","Symbol {0} of {1}"],"vs/editor/contrib/message/browser/messageController":["Whether the editor is currently showing an inline message"],"vs/editor/contrib/gotoError/browser/gotoErrorWidget":["Error","Warning","Info","Hint","{0} at {1}. ","{0} of {1} problems","{0} of {1} problem","Editor marker navigation widget error color.","Editor marker navigation widget error heading background.","Editor marker navigation widget warning color.","Editor marker navigation widget warning heading background.","Editor marker navigation widget info color.","Editor marker navigation widget info heading background.","Editor marker navigation widget background."],"vs/editor/contrib/hover/browser/markdownHoverParticipant":["Loading...","Rendering paused for long line for performance reasons. This can be configured via `editor.stopRenderingLineAfter`.","Tokenization is skipped for long lines for performance reasons. This can be configured via `editor.maxTokenizationLineLength`."],"vs/editor/contrib/hover/browser/markerHoverParticipant":["View Problem","No quick fixes available","Checking for quick fixes...","No quick fixes available","Quick Fix..."],"vs/editor/contrib/inlineCompletions/browser/inlineCompletionsHintsWidget":["Icon for show next parameter hint.","Icon for show previous parameter hint.","{0} ({1})","Previous","Next"],"vs/editor/contrib/inlayHints/browser/inlayHintsHover":["Double-click to insert","cmd + click","ctrl + click","option + click","alt + click","Go to Definition ({0}), right click for more","Go to Definition ({0})","Execute Command"],"vs/editor/contrib/wordHighlighter/browser/highlightDecorations":["Background color of a symbol during read-access, like reading a variable. The color must not be opaque so as not to hide underlying decorations.","Background color of a symbol during write-access, like writing to a variable. The color must not be opaque so as not to hide underlying decorations.","Background color of a textual occurrence for a symbol. The color must not be opaque so as not to hide underlying decorations.","Border color of a symbol during read-access, like reading a variable.","Border color of a symbol during write-access, like writing to a variable.","Border color of a textual occurrence for a symbol.","Overview ruler marker color for symbol highlights. The color must not be opaque so as not to hide underlying decorations.","Overview ruler marker color for write-access symbol highlights. The color must not be opaque so as not to hide underlying decorations.","Overview ruler marker color of a textual occurrence for a symbol. The color must not be opaque so as not to hide underlying decorations."],"vs/editor/contrib/parameterHints/browser/parameterHintsWidget":["Icon for show next parameter hint.","Icon for show previous parameter hint.","{0}, hint","Foreground color of the active item in the parameter hint."],"vs/editor/contrib/rename/browser/renameInputField":["Whether the rename input widget is visible","Rename input. Type new name and press Enter to commit.","{0} to Rename, {1} to Preview"],"vs/editor/contrib/stickyScroll/browser/stickyScrollActions":["Toggle Sticky Scroll","&&Toggle Sticky Scroll","Sticky Scroll","&&Sticky Scroll","Focus Sticky Scroll","&&Focus Sticky Scroll","Select next sticky scroll line","Select previous sticky scroll line","Go to focused sticky scroll line","Select Editor"],"vs/editor/contrib/suggest/browser/suggestWidget":["Background color of the suggest widget.","Border color of the suggest widget.","Foreground color of the suggest widget.","Foreground color of the selected entry in the suggest widget.","Icon foreground color of the selected entry in the suggest widget.","Background color of the selected entry in the suggest widget.","Color of the match highlights in the suggest widget.","Color of the match highlights in the suggest widget when an item is focused.","Foreground color of the suggest widget status.","Loading...","No suggestions.","Suggest","{0} {1}, {2}","{0} {1}","{0}, {1}","{0}, docs: {1}"],"vs/platform/theme/common/tokenClassificationRegistry":["Colors and styles for the token.","Foreground color for the token.","Token background colors are currently not supported.","Sets the all font styles of the rule: \'italic\', \'bold\', \'underline\' or \'strikethrough\' or a combination. All styles that are not listed are unset. The empty string unsets all styles.","Font style must be \'italic\', \'bold\', \'underline\' or \'strikethrough\' or a combination. The empty string unsets all styles.","None (clear inherited style)","Sets or unsets the font style to bold. Note, the presence of \'fontStyle\' overrides this setting.","Sets or unsets the font style to italic. Note, the presence of \'fontStyle\' overrides this setting.","Sets or unsets the font style to underline. Note, the presence of \'fontStyle\' overrides this setting.","Sets or unsets the font style to strikethrough. Note, the presence of \'fontStyle\' overrides this setting.","Style for comments.","Style for strings.","Style for keywords.","Style for numbers.","Style for expressions.","Style for operators.","Style for namespaces.","Style for types.","Style for structs.","Style for classes.","Style for interfaces.","Style for enums.","Style for type parameters.","Style for functions","Style for member functions","Style for method (member functions)","Style for macros.","Style for variables.","Style for parameters.","Style for properties.","Style for enum members.","Style for events.","Style for decorators & annotations.","Style for labels. ","Style for all symbol declarations.","Style to use for references in documentation.","Style to use for symbols that are static.","Style to use for symbols that are abstract.","Style to use for symbols that are deprecated.","Style to use for write accesses.","Style to use for symbols that are async.","Style to use for symbols that are read-only."],"vs/workbench/api/browser/mainThreadWebviews":["An error occurred while loading view: {0}"],"vs/workbench/browser/parts/editor/textEditor":["Editor"],"vs/workbench/contrib/terminal/browser/terminalEditorInput":["Do you want to terminate running processes?","&&Terminate","Closing will terminate the running processes in the terminals.","Closing will terminate the running processes in this terminal."],"vs/workbench/api/browser/mainThreadCustomEditors":["Custom editor \'{0}\' could not be saved.","Edit"],"vs/workbench/contrib/comments/browser/commentsView":["Filter (e.g. text, author)","Filter comments","{0} Unresolved Comments","Showing {0} of {1}","Comments for current workspace","Comments in {0}, full path {1}","Comment from ${0} at line {1} column {2} in {3}, source: {4}","Comment from ${0} in {1}, source: {2}","Collapse All","Expand All"],"vs/workbench/contrib/comments/browser/commentsTreeViewer":["{0} comments","1 comment","Image: {0}","Image","[Ln {0}]","[Ln {0}-{1}]","Last reply from {0}","Comments"],"vs/workbench/contrib/testing/common/testResult":["Test run at {0}"],"vs/workbench/browser/parts/editor/editorDropTarget":["Hold __{0}__ to drop into editor"],"vs/workbench/browser/parts/editor/editorGroupView":["Empty editor group actions","{0} (empty)","{0}: Group {1}","Group {0}","{0}: Editor Group {1}","Editor Group {0}"],"vs/base/browser/ui/tree/treeDefaults":["Collapse All"],"vs/workbench/browser/parts/views/checkbox":["Checked","Unchecked"],"vs/base/browser/ui/splitview/paneview":["{0} Section"],"vs/workbench/contrib/remote/browser/tunnelView":["Add Port","Private","Port","The label and remote port number of the forwarded port.","Forwarded Address","The address that the forwarded port is available at.","option + click","alt + click","cmd + click","ctrl + click","Running Process","The command line of the process that is using the port.","Origin","The source that a forwarded port originates from. Can be an extension, user forwarded, statically forwarded, or automatically forwarded.","Visibility","The availability of the forwarded port.","Press Enter to confirm or Escape to cancel.","Process information unavailable","Remote port {0}:{1} forwarded to local address {2}. ","Remote port {0}:{1} not forwarded. ","Port has running process.","No running process.","Port labeled {0}. ","Unknown","Private","Whether the Ports view has focus.","Tunnel View","Set Port Label","Port label","Forwarded port should be a number or a host:port.","Port number must be ≥ 0 and < {0}.","May Require Sudo","Port is already forwarded","Forward a Port","Forward Port","Port number or address (eg. 3000 or 10.10.10.10:2000).","Unable to forward {0}:{1}. The host may not be available or that remote port may already be forwarded","Unable to forward {0}:{1}. {2}","No ports currently forwarded. Try running the {0} command","Stop Forwarding Port","Choose a port to stop forwarding","Open in Browser","Preview in Editor","Open Port in Browser","No ports currently forwarded. Open the Ports view to get started.","Open the Ports view...","Choose the port to open","Copy Local Address","Copy Forwarded Port Address","Choose a forwarded port","Change Local Address Port","Local port should be a number.","The local port {0} is not available. Port number {1} has been used instead","New local port","HTTP","HTTPS","Port Visibility","Change Port Protocol","The color of the icon for a port that has an associated running process.","Ports"],"vs/workbench/contrib/remote/browser/remoteIcons":["Getting started icon in the remote explorer view.","Documentation icon in the remote explorer view.","Feedback icon in the remote explorer view.","Review issue icon in the remote explorer view.","Report issue icon in the remote explorer view.","View icon of the remote explorer view.","View icon of the remote ports view.","Icon representing a remote port.","Icon representing a private remote port.","Icon for the forward action.","Icon for the stop forwarding action.","Icon for the open browser action.","Icon for the open preview action.","Icon for the copy local address action.","Icon for the label port action.","Icon for forwarded ports that don\'t have a running process.","Icon for forwarded ports that do have a running process."],"vs/workbench/browser/parts/editor/textCodeEditor":["Text Editor"],"vs/workbench/browser/parts/editor/binaryEditor":["Binary Viewer","The file is not displayed in the text editor because it is either binary or uses an unsupported text encoding.","Open Anyway"],"vs/workbench/browser/parts/paneCompositePart":["Drag a view here to display.","More Actions...","Views"],"vs/workbench/browser/parts/activitybar/activitybarPart":["Menu","Hide Menu","Activity Bar Position","Move Activity Bar to Side","&&Side","Side","Move Activity Bar to Top","&&Top","Top","Hide Activity Bar","&&Hidden","Hidden","Activity Bar Position","Activity Bar Position","Activity Bar Position","Previous Primary Side Bar View","Next Primary Side Bar View","Focus Activity Bar"],"vs/workbench/browser/parts/sidebar/sidebarActions":["Focus into Primary Side Bar"],"vs/base/browser/ui/iconLabel/iconLabelHover":["Loading..."],"vs/workbench/services/preferences/browser/keybindingsEditorModel":["System","Extension","User","{0}: {1}","{0}: {1}","option","meta"],"vs/workbench/services/preferences/common/preferencesValidation":["Incorrect type. Expected \\"boolean\\".","Value must be a number.","The enum options should be strings, but there is a non-string option. Please file an issue with the extension author.","Incorrect type. Expected \\"string\\".","Setting has an invalid type, expected {0}. Fix in JSON.","Value must be {0} or fewer characters long.","Value must be {0} or more characters long.","Value must match regex `{0}`.","Invalid color format. Use #RGB, #RGBA, #RRGGBB or #RRGGBBAA.","URI expected.","URI is expected.","URI with a scheme is expected.","Value is not accepted. Valid values: {0}.","Value must be strictly less than {0}.","Value must be strictly greater than {0}.","Value must be less than or equal to {0}.","Value must be greater than or equal to {0}.","Value must be a multiple of {0}.","Value must be an integer.","Incorrect type. Expected an array.","Array has duplicate items","Array must have at least {0} items","Array must have at most {0} items","Incorrect type. Expected a string array.","Value {0} must match regex {1}.","Value {0} is not one of {1}","Incorrect type. Expected an object.","Property {0} is not allowed.\\n"],"vs/editor/common/model/editStack":["Typing"],"vs/base/browser/ui/selectBox/selectBoxCustom":["Select Box"],"vs/platform/quickinput/browser/quickInputController":["Toggle all checkboxes","{0} Results","{0} Selected","OK","Custom","Back ({0})","Back"],"vs/base/browser/ui/hover/hoverWidget":["Inspect this in the accessible view with {0}.","Inspect this in the accessible view via the command Open Accessible View which is currently not triggerable via keybinding."],"vs/workbench/services/textMate/common/TMGrammars":["Contributes textmate tokenizers.","Language identifier for which this syntax is contributed to.","Textmate scope name used by the tmLanguage file.","Path of the tmLanguage file. The path is relative to the extension folder and typically starts with \'./syntaxes/\'.","A map of scope name to language id if this grammar contains embedded languages.","A map of scope name to token types.","List of language scope names to which this grammar is injected to.","Defines which scope names contain balanced brackets.","Defines which scope names do not contain balanced brackets."],"vs/workbench/contrib/preferences/browser/preferencesWidgets":["User","Remote","Workspace","Folder","Settings Switcher","User","Remote","Workspace","User","Workspace"],"vs/base/browser/ui/keybindingLabel/keybindingLabel":["Unbound"],"vs/workbench/contrib/preferences/common/settingsEditorColorRegistry":["The foreground color for a section header or active title.","The foreground color for a section header or hovered title.","The color of the modified setting indicator.","The color of the header container border.","The color of the Settings editor splitview sash border.","Settings editor dropdown background.","Settings editor dropdown foreground.","Settings editor dropdown border.","Settings editor dropdown list border. This surrounds the options and separates the options from the description.","Settings editor checkbox background.","Settings editor checkbox foreground.","Settings editor checkbox border.","Settings editor text input box background.","Settings editor text input box foreground.","Settings editor text input box border.","Settings editor number input box background.","Settings editor number input box foreground.","Settings editor number input box border.","The background color of a settings row when focused.","The background color of a settings row when hovered.","The color of the row\'s top and bottom border when the row is focused."],"vs/workbench/contrib/preferences/browser/preferencesRenderers":["Edit","Replace in Settings","Copy to Settings","This setting cannot be applied because it is configured in the system policy.","This setting cannot be applied because it is not registered as language override setting.","This setting cannot be applied while a non-default profile is active. It will be applied when the default profile is active.","This setting cannot be applied because it is configured to be applied in all profiles using setting {0}. Value from the default profile will be used instead.","This setting cannot be applied in this window. It will be applied when you open a local window.","This setting cannot be applied in this workspace. It will be applied when you open the containing workspace folder directly.","This setting has an application scope and can be set only in the user settings file.","This setting can only be applied in user settings in local window or in remote settings in remote window.","This setting can only be applied in a trusted workspace.","Unknown Configuration Setting","Manage Workspace Trust","Manage Workspace Trust","Unsupported Property"],"vs/base/browser/ui/toolbar/toolbar":["More Actions..."],"vs/workbench/contrib/preferences/browser/settingsTree":["Extensions","The setting has been configured in the current scope.","More Actions... ","Show matching extensions","Edit in settings.json","Edit settings for {0}","default","The setting has been configured in the current scope.","Show Extension","Reset Setting","Validation Error.","Validation Error.","Modified.","Settings","Copy Setting ID","Copy Setting as JSON","Sync This Setting","Apply Setting to all Profiles"],"vs/workbench/contrib/preferences/browser/settingsLayout":["Commonly Used","Text Editor","Cursor","Find","Font","Formatting","Diff Editor","Minimap","Suggestions","Files","Workbench","Appearance","Breadcrumbs","Editor Management","Settings Editor","Zen Mode","Screencast Mode","Window","New Window","Features","Accessibility","Explorer","Search","Debug","Testing","Source Control","Extensions","Terminal","Task","Problems","Output","Comments","Remote","Timeline","Notebook","Audio Cues","Merge Editor","Chat","Application","Proxy","Keyboard","Update","Telemetry","Settings Sync","Experimental","Other","Security","Workspace"],"vs/workbench/contrib/preferences/browser/tocTree":["Settings Table of Contents","{0}, group"],"vs/workbench/contrib/preferences/browser/settingsSearchMenu":["Modified","Add or remove modified settings filter","Extension ID...","Add extension ID filter","Feature...","Add feature filter","Tag...","Add tag filter","Language...","Add language ID filter","Online services","Show settings for online services","Policy services","Show settings for policy services"],"vs/workbench/contrib/chat/browser/actions/chatAccessibilityHelp":["The chat view is comprised of an input box and a request/response list. The input box is used to make requests and the list is used to display responses.","In the input box, use up and down arrows to navigate your request history. Edit input and use enter or the submit button to run a new request.","In the input box, inspect the last response in the accessible view via {0}","With the input box focused, inspect the last response in the accessible view via the Open Accessible View command, which is currently not triggerable by a keybinding.","Chat responses will be announced as they come in. A response will indicate the number of code blocks, if any, and then the rest of the response.","To focus the chat request/response list, which can be navigated with up and down arrows, invoke the Focus Chat command ({0}).","To focus the chat request/response list, which can be navigated with up and down arrows, invoke The Focus Chat List command, which is currently not triggerable by a keybinding.","To focus the input box for chat requests, invoke the Focus Chat Input command ({0})","To focus the input box for chat requests, invoke the Focus Chat Input command, which is currently not triggerable by a keybinding.","To focus the next code block within a response, invoke the Chat: Next Code Block command ({0}).","To focus the next code block within a response, invoke the Chat: Next Code Block command, which is currently not triggerable by a keybinding.","To focus the next file tree within a response, invoke the Chat: Next File Tree command ({0}).","To focus the next file tree within a response, invoke the Chat: Next File Tree command, which is currently not triggerable by a keybinding.","To clear the request/response list, invoke the Chat Clear command ({0}).","To clear the request/response list, invoke the Chat Clear command, which is currently not triggerable by a keybinding.","Inline chat occurs within a code editor and takes into account the current selection. It is useful for making changes to the current editor. For example, fixing diagnostics, documenting or refactoring code. Keep in mind that AI generated code may be incorrect.","It can be activated via code actions or directly using the command: Inline Chat: Start Inline Chat ({0}).","In the input box, use {0} and {1} to navigate your request history. Edit input and use enter or the submit button to run a new request.","In the input box, inspect the response in the accessible view via {0}","With the input box focused, inspect the response in the accessible view via the Open Accessible View command, which is currently not triggerable by a keybinding.","Context menu actions may run a request prefixed with a /. Type / to discover such ready-made commands.","If a fix action is invoked, a response will indicate the problem with the current code. A diff editor will be rendered and can be reached by tabbing.","Once in the diff editor, enter review mode with ({0}). Use up and down arrows to navigate lines with the proposed changes.","Tab again to enter the Diff editor with the changes and enter review mode with the Go to Next Difference Command. Use Up/DownArrow to navigate lines with the proposed changes.","Use tab to reach conditional parts like commands, status, message responses and more.","Audio cues can be changed via settings with a prefix of audioCues.chat. By default, if a request takes more than 4 seconds, you will hear an audio cue indicating that progress is still occurring."],"vs/workbench/contrib/notebook/browser/controller/cellOperations":["Cannot join cells of different kinds","Join Notebook Cells"],"vs/workbench/contrib/chat/browser/chatInputPart":["Chat Input,  Type to ask questions or type / for topics, press enter to send out the request. Use {0} for Chat Accessibility Help.","Chat Input,  Type code here and press Enter to run. Use the Chat Accessibility Help command for more information.","Chat Input"],"vs/workbench/contrib/chat/browser/chatListRenderer":["used {0}","using {0}","Thinking","Used {0} references","Used {0} reference","{0}, expanded","{0}, collapsed","Chat","Command: {0}","Commands: {0}","1 file tree","{0} file trees","{0} {1} {2}","{0} {1}","{0} 1 code block: {1} {2}","{0} 1 code block: {1}","{0} {1} code blocks: {2}","{0} {1} code blocks","File Tree"],"vs/platform/actions/browser/toolbar":["Hide","Reset Menu"],"vs/editor/contrib/inlineCompletions/browser/inlineCompletionContextKeys":["Whether an inline suggestion is visible","Whether the inline suggestion starts with whitespace","Whether the inline suggestion starts with whitespace that is less than what would be inserted by tab","Whether suggestions should be suppressed for the current suggestion"],"vs/workbench/contrib/notebook/browser/viewParts/notebookKernelView":["Select Notebook Kernel","Notebook Kernel Args"],"vs/workbench/contrib/notebook/browser/notebookExtensionPoint":["Contributes notebook document provider.","Type of the notebook.","Human readable name of the notebook.","Set of globs that the notebook is for.","Glob that the notebook is enabled for.","Glob that the notebook is disabled for.","Controls if the custom editor is enabled automatically when the user opens a file. This may be overridden by users using the `workbench.editorAssociations` setting.","The editor is automatically used when the user opens a resource, provided that no other default custom editors are registered for that resource.","The editor is not automatically used when the user opens a resource, but a user can switch to the editor using the `Reopen With` command.","Contributes notebook output renderer provider.","Unique identifier of the notebook output renderer.","Human readable name of the notebook output renderer.","List of kernel dependencies the renderer requires. If any of the dependencies are present in the `NotebookKernel.preloads`, the renderer can be used.","List of soft kernel dependencies the renderer can make use of. If any of the dependencies are present in the `NotebookKernel.preloads`, the renderer will be preferred over renderers that don\'t interact with the kernel.","Messaging is required. The renderer will only be used when it\'s part of an extension that can be run in an extension host.","The renderer is better with messaging available, but it\'s not requried.","The renderer does not require messaging.","Defines how and if the renderer needs to communicate with an extension host, via `createRendererMessaging`. Renderers with stronger messaging requirements may not work in all environments.","Set of globs that the notebook is for.","File to load in the webview to render the extension.","File to load in the webview to render the extension.","Existing renderer that this one extends.","File to load in the webview to render the extension.","Contributes notebook preloads.","Type of the notebook.","Path to file loaded in the webview.","Paths to additional resources that should be allowed in the webview."],"vs/workbench/contrib/notebook/browser/notebookEditorWidget":["Notebook\\nUse {0} for accessibility help","Notebook\\nRun the Open Accessibility Help command for more information","Notebook","The border color for notebook cells.","The color of the notebook cell editor border.","The error icon color of notebook cells in the cell status bar.","The color of the running cell decoration in the notebook editor overview ruler.","The error icon color of notebook cells in the cell status bar.","The running icon color of notebook cells in the cell status bar.","The border color of the notebook output container.","The color of the notebook output container background.","The color of the separator in the cell bottom toolbar","The background color of a cell when the cell is focused.","The background color of a cell when the cell is selected.","The background color of a cell when the cell is hovered.","The color of the cell\'s top and bottom border when the cell is selected but not focused.","The color of the cell\'s borders when multiple cells are selected.","The color of the cell\'s focus indicator borders when the cell is focused.","The color of the cell\'s top and bottom border when a cell is focused while the primary focus is outside of the editor.","The background color of notebook cell status bar items.","The color of the notebook cell insertion indicator.","Notebook scrollbar slider background color.","Notebook scrollbar slider background color when hovering.","Notebook scrollbar slider background color when clicked on.","Background color of highlighted cell","Cell editor background color.","Notebook background color."],"vs/workbench/contrib/notebook/browser/view/renderers/backLayerWebView":["Empty markdown cell, double-click or press enter to edit.","No renderer found for \'$0\'","Could not render content for \'$0\'","Notebook webview content"],"vs/workbench/services/workingCopy/common/fileWorkingCopyManager":["File Created","File Replaced","File Working Copy Decorations","Deleted, Read-only","Read-only","Deleted","\'{0}\' already exists. Do you want to replace it?","A file or folder with the name \'{0}\' already exists in the folder \'{1}\'. Replacing it will overwrite its current contents.","&&Replace","\'{0}\' is marked as read-only. Do you want to save anyway?","Paths can be configured as read-only via settings.","&&Save Anyway"],"vs/workbench/contrib/notebook/browser/viewParts/notebookKernelQuickPickStrategy":["Currently Selected","{0} - Currently Selected","Change kernel for \'{0}\'","Select kernel for \'{0}\'","Install/Enable suggested extensions","Browse marketplace for kernel extensions","Select Another Kernel...","Select Kernel","Select Another Kernel","Type to choose a kernel source","Learn More","Select Kernel from {0}","Selected Kernel: {0} (Kernel Detection Tasks Running)","Detecting Kernels","Detecting Kernels","Select Kernel"],"vs/workbench/contrib/notebook/browser/contrib/find/notebookFindWidget":["{0} found","{0} found for \'{1}\'","{0} found for \'{1}\'"],"vs/editor/contrib/codeAction/browser/codeAction":["An unknown error occurred while applying the code action"],"vs/workbench/contrib/inlineChat/browser/inlineChatStrategies":["Nothing changed","Changed 1 line","Changed {0} lines"],"vs/workbench/contrib/inlineChat/browser/inlineChatWidget":["Inline Chat Input","Original","Modified","Inline Chat Input, Use {0} for Inline Chat Accessibility Help.","Inline Chat Input, Run the Inline Chat Accessibility Help command for more information.","Using {0} to generate response...","Closed inline chat widget"],"vs/workbench/contrib/terminal/browser/xterm/xtermTerminal":["The terminal has no selection to copy","Yes","No","Don\'t Show Again","Terminal GPU acceleration appears to be slow on your computer. Would you like to switch to disable it which may improve performance? [Read more about terminal settings](https://code.visualstudio.com/docs/editor/integrated-terminal#_changing-how-the-terminal-is-rendered)."],"vs/workbench/contrib/testing/browser/theme":["Color for the \'failed\' icon in the test explorer.","Color for the \'Errored\' icon in the test explorer.","Color for the \'passed\' icon in the test explorer.","Color for \'run\' icons in the editor.","Color for the \'Queued\' icon in the test explorer.","Color for the \'Unset\' icon in the test explorer.","Color for the \'Skipped\' icon in the test explorer.","Color of the peek view borders and arrow.","Color of the peek view borders and arrow.","Text color of test error messages shown inline in the editor.","Margin color beside error messages shown inline in the editor.","Text color of test info messages shown inline in the editor.","Margin color beside info messages shown inline in the editor."],"vs/workbench/contrib/terminal/common/terminalColorRegistry":["The background color of the terminal, this allows coloring the terminal differently to the panel.","The foreground color of the terminal.","The foreground color of the terminal cursor.","The background color of the terminal cursor. Allows customizing the color of a character overlapped by a block cursor.","The selection background color of the terminal.","The selection background color of the terminal when it does not have focus.","The selection foreground color of the terminal. When this is null the selection foreground will be retained and have the minimum contrast ratio feature applied.","The default terminal command decoration background color.","The terminal command decoration background color for successful commands.","The terminal command decoration background color for error commands.","The overview ruler cursor color.","The color of the border that separates split panes within the terminal. This defaults to panel.border.","Color of the current search match in the terminal. The color must not be opaque so as not to hide underlying terminal content.","Border color of the other search matches in the terminal.","Border color of the current search match in the terminal.","Color of the other search matches in the terminal. The color must not be opaque so as not to hide underlying terminal content.","Border color of the other search matches in the terminal.","Overview ruler marker color for find matches in the terminal.","Background color when dragging on top of terminals. The color should have transparency so that the terminal contents can still shine through.","Border on the side of the terminal tab in the panel. This defaults to tab.activeBorder.","\'{0}\' ANSI color in the terminal."],"vs/workbench/contrib/testing/common/constants":["Errored","Failed","Passed","Queued","Running","Skipped","Not yet run","{0} ({1})","Debug","Run","Coverage"],"vs/workbench/contrib/testing/browser/testingExplorerFilter":["Show Only Failed Tests","Show Only Executed Tests","Show in Active File Only","Show Hidden Tests","More Filters...","Filter text for tests in the explorer","Filter (e.g. text, !exclude, @tag)","Fuzzy Match","Show Hidden Tests","Unhide All Tests"],"vs/platform/quickinput/browser/commandsQuickAccess":["recently used","similar commands","commonly used","other commands","similar commands","{0}, {1}","Command \'{0}\' resulted in an error"],"vs/workbench/contrib/files/browser/fileImportExport":["Uploading","Overwrite {0}","Overwriting {0}","{0} of {1} files ({2}/s)","{0} ({1} of {2}, {3}/s)","Copying...","&&Copy Folders","&&Copy Folder","&&Add Folders to Workspace","&&Add Folder to Workspace","Do you want to copy the folders or add the folders to the workspace?","Do you want to copy \'{0}\' or add \'{0}\' as a folder to the workspace?","Are you sure to want to copy folders?","Are you sure to want to copy \'{0}\'?","Some or all of the dropped files could not be accessed for import.","The dropped file could not be accessed for import.","Import {0}","Import {0} resources","Copying {0}","Copying {0} resources","Downloading","{0} of {1} files ({2}/s)","{0} ({1} of {2}, {3}/s)","Download","Choose Where to Download","Download {0}","Downloading {0}","A file or folder with the name \'{0}\' already exists in the destination folder. Do you want to replace it?","This action is irreversible!","&&Replace","The following {0} files and/or folders already exist in the destination folder. Do you want to replace them?","This action is irreversible!","&&Replace"],"vs/workbench/contrib/files/browser/views/explorerDecorationsProvider":["Unable to resolve workspace folder ({0})","Symbolic Link","Unknown File Type","Explorer"],"vs/workbench/contrib/files/browser/views/explorerViewer":["Files Explorer","Type file name. Press Enter to confirm or Escape to cancel.","Are you sure you want to change the order of multiple root folders in your workspace?","Are you sure you want to move the following {0} files into \'{1}\'?","Are you sure you want to change the order of root folder \'{0}\' in your workspace?","Are you sure you want to move \'{0}\' into \'{1}\'?","Do not ask me again","&&Move","Copy {0}","Copying {0}","Move {0}","Moving {0}","{0} folders","{0} files"],"vs/workbench/contrib/bulkEdit/browser/preview/bulkEditTree":["Bulk Edit","Renaming {0} to {1}, also making text edits","Creating {0}, also making text edits","Deleting {0}, also making text edits","{0}, making text edits","Renaming {0} to {1}","Creating {0}","Deleting {0}","line {0}, replacing {1} with {2}","line {0}, removing {1}","line {0}, inserting {1}","{0} → {1}","(renaming)","(creating)","(deleting)","{0} - {1}"],"vs/editor/contrib/quickAccess/browser/gotoSymbolQuickAccess":["To go to a symbol, first open a text editor with symbol information.","The active text editor does not provide symbol information.","No matching editor symbols","No editor symbols","Open to the Side","Open to the Bottom","symbols ({0})","properties ({0})","methods ({0})","functions ({0})","constructors ({0})","variables ({0})","classes ({0})","structs ({0})","events ({0})","operators ({0})","interfaces ({0})","namespaces ({0})","packages ({0})","type parameters ({0})","modules ({0})","properties ({0})","enumerations ({0})","enumeration members ({0})","strings ({0})","files ({0})","arrays ({0})","numbers ({0})","booleans ({0})","objects ({0})","keys ({0})","fields ({0})","constants ({0})"],"vs/workbench/contrib/search/browser/replaceService":["Search and Replace","{0} ↔ {1} (Replace Preview)"],"vs/workbench/contrib/search/browser/searchFindInput":["Notebook Find Filters"],"vs/workbench/contrib/searchEditor/browser/searchEditorSerialization":["All backslashes in Query string must be escaped (\\\\\\\\)","{0} files","1 file","{0} results","1 result","No Results","The result set only contains a subset of all matches. Be more specific in your search to narrow down the results."],"vs/workbench/contrib/scm/browser/dirtyDiffSwitcher":["Switch quick diff base","Switch Quick Diff Base"],"vs/workbench/contrib/scm/browser/menus":["Share"],"vs/workbench/contrib/debug/browser/baseDebugView":["Click to expand"],"vs/workbench/contrib/debug/common/debugSource":["Unknown Source"],"vs/workbench/contrib/debug/browser/debugSessionPicker":["Search debug sessions by name","Start a New Debug Session","Session {0} spawned from {1}"],"vs/workbench/contrib/debug/common/loadedScriptsPicker":["Search loaded scripts by name"],"vs/workbench/contrib/debug/browser/debugAdapterManager":["Debugger \'type\' can not be omitted and must be of type \'string\'.","Name of configuration; appears in the launch configuration dropdown menu.","For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode","Task to run before debug session starts.","Task to run after debug session ends.","Disable the warning when trying to start the same debug configuration more than once.","You don\'t have an extension for debugging {0}. Should we find a {0} extension in the Marketplace?","&&Find {0} extension","Suggested","Install an extension for {0}...","Install extension...","Select debugger"],"vs/workbench/contrib/debug/browser/debugConfigurationManager":["Edit Debug Configuration in launch.json","Select Launch Configuration","Unable to create \'launch.json\' file inside the \'.vscode\' folder ({0}).","workspace","user settings"],"vs/workbench/contrib/debug/browser/debugSession":["No debugger available, can not send \'{0}\'","No debugger available, can not send \'{0}\'","No debugger available, can not send \'{0}\'","No debugger available, can not send \'{0}\'","No debugger available, can not send \'{0}\'","No debugger available, can not send \'{0}\'","Session is not ready for breakpoints","No debugger available, can not send \'{0}\'","No debugger available, can not send \'{0}\'","No debugger available, can not send \'{0}\'","No debugger available, can not send \'{0}\'","No debugger available, can not send \'{0}\'","No debugger available, can not send \'{0}\'","No debugger available, can not send \'{0}\'","No debugger available, can not send \'{0}\'","No debugger available, can not send \'{0}\'","No debugger available, can not send \'{0}\'","No debugger available, can not send \'{0}\'","No debugger available, can not send \'{0}\'","No debugger available, can not send \'{0}\'","No debugger available, can not send \'{0}\'","No debugger available, can not send \'{0}\'","No debugger available, can not send \'{0}\'","No debugger available, can not send \'{0}\'","No debugger available, can not send \'{0}\'","No debugger available, can not send \'{0}\'","No debugger available, can not send \'{0}\'","No debugger available, can not send \'{0}\'","No debugger available, can not send \'{0}\'","No debugger available, can not send \'{0}\'","No debugger available, can not send \'{0}\'","No debugger available, can not send \'{0}\'","No debugger available, can not send \'{0}\'","No debugger available, can not send \'{0}\'","No debugger available, can not send \'{0}\'","No debugger available, can not send \'{0}\'","No debugger available, can not send \'{0}\'","Started running without debugging.","Debugging started.","Debugging stopped."],"vs/workbench/contrib/debug/browser/debugTaskRunner":["Errors exist after running preLaunchTask \'{0}\'.","Error exists after running preLaunchTask \'{0}\'.","The preLaunchTask \'{0}\' terminated with exit code {1}.","The preLaunchTask \'{0}\' terminated.","&&Debug Anyway","&&Show Errors","Abort","Remember my choice in user settings","&&Debug Anyway","Remember my choice for this task","Task \'{0}\' can not be referenced from a launch configuration that is in a different workspace folder.","Could not find the task \'{0}\'.","Could not find the specified task.","The task \'{0}\' cannot be tracked. Make sure to have a problem matcher defined.","The task \'{0}\' cannot be tracked. Make sure to have a problem matcher defined."],"vs/base/browser/ui/dropdown/dropdownActionViewItem":["More Actions..."],"vs/workbench/contrib/mergeEditor/common/mergeEditor":["The editor is a merge editor","The editor is a the result editor of a merge editor.","The layout mode of a merge editor","If the merge editor shows the base version","If base should be shown at the top","If the merge editor shows non-conflicting changes","The uri of the baser of a merge editor","The uri of the result of a merge editor"],"vs/workbench/contrib/mergeEditor/browser/mergeEditorInputModel":["Do you want keep the merge result of {0} files?","Do you want keep the merge result of {0}?","&&Save With Conflicts","&&Save","Do&&n\'t Save","The files contain unhandled conflicts. The merge results will be lost if you don\'t save them.","The file contains unhandled conflicts. The merge result will be lost if you don\'t save it.","The merge results will be lost if you don\'t save them.","The merge result will be lost if you don\'t save it.","Do you want to accept the merge result?","This will write the merge result to the original file and close the merge editor.","&&Accept Merge","Before Resolving Conflicts In Merge Editor","Do you want to save the changes you made to {0} files?","Do you want to save the changes you made to {0}?","The files contain unhandled conflicts. Your changes will be lost if you don\'t save them.","The file contains unhandled conflicts. Your changes will be lost if you don\'t save them.","Your changes will be lost if you don\'t save them.","Your changes will be lost if you don\'t save them.","&&Save with Conflicts","&&Save","Do&&n\'t Save","Do you want to close {0} merge editors?","Do you want to close the merge editor for {0}?","The files contain unhandled conflicts.","The file contains unhandled conflicts.","&&Close with Conflicts","&&Close","Don\'t ask again"],"vs/workbench/contrib/mergeEditor/browser/view/viewModel":["There is currently no conflict focused that can be toggled."],"vs/workbench/contrib/mergeEditor/browser/view/editors/resultCodeEditorView":["Result","{0} Conflict Remaining","{0} Conflicts Remaining ","Go to next conflict","All conflicts handled, the merge can be completed now."],"vs/workbench/contrib/mergeEditor/browser/view/editors/inputCodeEditorView":["Input 1","Input 2","Accept {0}","Accept {0}","Accept Both","Swap","Mark as Handled","Accept","Accept (result is dirty)","Undo accept","Undo accept (currently second)"],"vs/workbench/contrib/mergeEditor/browser/view/colors":["The background color for changes.","The background color for word changes.","The background color for changes in base.","The background color for word changes in base.","The border color of unhandled unfocused conflicts.","The border color of unhandled focused conflicts.","The border color of handled unfocused conflicts.","The border color of handled focused conflicts.","The foreground color for changes in input 1.","The foreground color for changes in input 1.","The background of the \\"Conflicting Lines\\" text.","The background color of decorations in input 1.","The background color of decorations in input 2."],"vs/base/browser/ui/findinput/replaceInput":["input","Preserve Case"],"vs/workbench/contrib/markers/browser/markersTreeViewer":["Problems View","Icon indicating that multiple lines are shown in the markers view.","Icon indicating that multiple lines are collapsed in the markers view.","Show message in single line","Show message in multiple lines"],"vs/workbench/contrib/markers/browser/markersTable":["Code","Message","File","Source"],"vs/workbench/contrib/comments/browser/commentsController":["Line {0}","Lines {0} to {1}","Editor has commenting ranges, run the command Open Accessibility Help ({0}), for more information.","Editor has commenting ranges, run the command Open Accessibility Help, which is currently not triggerable via keybinding, for more information.","Editor has commenting ranges.","Select Comment Provider"],"vs/workbench/contrib/mergeEditor/browser/view/editors/baseCodeEditorView":["Base","Comparing with {0}","Differences are highlighted with a background color."],"vs/workbench/contrib/customEditor/common/contributedCustomEditors":["Built-in"],"vs/platform/files/browser/htmlFileSystemProvider":["Rename is only supported for files.","Insufficient permissions. Please retry and allow the operation."],"vs/workbench/contrib/terminal/browser/terminalActions":["Show Tabs","Select current working directory for new terminal","Open Help","Create New Terminal (In Active Workspace)","Create New Terminal in Editor Area","Create New Terminal in Editor Area","Create New Terminal in Editor Area to the Side","Focus Previous Terminal in Terminal Group","Focus Next Terminal in Terminal Group","Run Recent Command...","Copy Last Command Output","Go to Recent Directory...","Resize Terminal Left","Resize Terminal Right","Resize Terminal Up","Resize Terminal Down","Focus Terminal Tabs View","Focus Next Terminal Group","Focus Previous Terminal Group","Run Selected Text In Active Terminal","Run Active File In Active Terminal","Only files on disk can be run in the terminal","Scroll Down (Line)","Scroll Down (Page)","Scroll to Bottom","Scroll Up (Line)","Scroll Up (Page)","Scroll to Top","Clear Selection","Detach Session","Attach to Session","There are no unattached terminals to attach to","Switch Active Terminal","Scroll To Previous Command","Scroll To Next Command","Select To Previous Command","Select To Next Command","Select To Previous Line","Select To Next Line","The sequence of text to send to the terminal","The directory to start the terminal at","The new name for the terminal","No name argument provided","Relaunch Active Terminal","Join Terminals","Join Terminals","Insufficient terminals for the join action","All terminals are joined already","Split Terminal (In Active Workspace)","Select All","Create New Terminal","Kill the Active Terminal Instance","Kill All Terminals","Kill the Active Terminal in Editor Area","Clear","Select Default Profile","Configure Terminal Settings","Set Fixed Dimensions","Toggle Size to Content Width","Clear Previous Session History","Select the Previous Suggestion","Select the Previous Page Suggestion","Select the Next Suggestion","Select the Next Page Suggestion","Accept Selected Suggestion","Hide Suggest Widget","Copy Selection","Copy and Clear Selection","Copy Selection as HTML","Paste into Active Terminal","Paste Selection into Active Terminal","Switch Terminal","Providing no name will reset it to the default value","Create New Terminal (With Profile)","The name of the profile to create","Select current working directory for new terminal","(Overriden) {0}","Select current working directory for new terminal","Enter terminal name"],"vs/workbench/contrib/terminal/browser/terminalQuickAccess":["Create New Terminal","Create New Terminal With Profile","Rename Terminal"],"vs/workbench/contrib/terminal/browser/terminalService":["Do you want to terminate the active terminal session?","Do you want to terminate the {0} active terminal sessions?","&&Terminate","This shell is open to a {0}local{1} folder, NOT to the virtual folder","This shell is running on your {0}local{1} machine, NOT on the connected remote machine"],"vs/workbench/contrib/terminal/common/terminalConfiguration":["the terminal\'s current working directory","the terminal\'s current working directory, displayed for multi-root workspaces or in a single root workspace when the value differs from the initial working directory. On Windows, this will only be displayed when shell integration is enabled.","the workspace in which the terminal was launched","indicates a local terminal in a remote workspace","the name of the terminal process","a conditional separator {0} that only shows when surrounded by variables with values or static text.","the name provided to the terminal by the process","indicates this terminal is associated with a task","Controls the terminal title. Variables are substituted based on the context:","Controls the terminal description, which appears to the right of the title. Variables are substituted based on the context:","Integrated Terminal","Dispatches most keybindings to the terminal instead of the workbench, overriding {0}, which can be used alternatively for fine tuning.","A theme color ID to associate with terminal icons by default.","A codicon ID to associate with terminal icons by default.","Controls whether terminal tabs display as a list to the side of the terminal. When this is disabled a dropdown will display instead.","Controls whether terminal tab statuses support animation (eg. in progress tasks).","Controls whether the terminal tabs view will hide under certain conditions.","Never hide the terminal tabs view","Hide the terminal tabs view when there is only a single terminal opened","Hide the terminal tabs view when there is only a single terminal group opened","Shows the active terminal information in the view. This is particularly useful when the title within the tabs aren\'t visible.","Always show the active terminal","Show the active terminal when it is the only terminal opened","Show the active terminal when it is the only terminal opened or when the tabs view is in its narrow textless state","Never show the active terminal","Controls whether terminal split and kill buttons are displays next to the new terminal button.","Always show the actions","Show the actions when it is the only terminal opened","Show the actions when it is the only terminal opened or when the tabs view is in its narrow textless state","Never show the actions","Show the terminal tabs view to the left of the terminal","Show the terminal tabs view to the right of the terminal","Controls the location of the terminal tabs, either to the left or right of the actual terminal(s).","Create terminals in the editor","Create terminals in the terminal view","Controls where newly created terminals will appear.","Focus the terminal when clicking a terminal tab","Focus the terminal when double-clicking a terminal tab","Controls whether focusing the terminal of a tab happens on double or single click.","Controls whether to treat the option key as the meta key in the terminal on macOS.","Controls whether to force selection when using Option+click on macOS. This will force a regular (line) selection and disallow the use of column selection mode. This enables copying and pasting using the regular terminal selection, for example, when mouse mode is enabled in tmux.","If enabled, alt/option + click will reposition the prompt cursor to underneath the mouse when {0} is set to {1} (the default value). This may not work reliably depending on your shell.","Controls whether text selected in the terminal will be copied to the clipboard.","Show a warning dialog when pasting multiple lines into the terminal. The dialog does not show when:\\n\\n- Bracketed paste mode is enabled (the shell supports multi-line paste natively)\\n- The paste is handled by the shell\'s readline (in the case of pwsh)","Controls whether bold text in the terminal will always use the \\"bright\\" ANSI color variant.","Controls the font family of the terminal. Defaults to {0}\'s value.","Controls the font size in pixels of the terminal.","Controls the letter spacing of the terminal. This is an integer value which represents the number of additional pixels to add between characters.","Controls the line height of the terminal. This number is multiplied by the terminal font size to get the actual line-height in pixels.","When set, the foreground color of each cell will change to try meet the contrast ratio specified. Note that this will not apply to `powerline` characters per #146406. Example values:\\n\\n- 1: Do nothing and use the standard theme colors.\\n- 4.5: [WCAG AA compliance (minimum)](https://www.w3.org/TR/UNDERSTANDING-WCAG20/visual-audio-contrast-contrast.html) (default).\\n- 7: [WCAG AAA compliance (enhanced)](https://www.w3.org/TR/UNDERSTANDING-WCAG20/visual-audio-contrast7.html).\\n- 21: White on black or black on white.","The number of cells in a tab stop.","Scrolling speed multiplier when pressing `Alt`.","A multiplier to be used on the `deltaY` of mouse wheel scroll events.","The number of milliseconds to show the bell within a terminal tab when triggered.","Only \\"normal\\" and \\"bold\\" keywords or numbers between 1 and 1000 are allowed.","The font weight to use within the terminal for non-bold text. Accepts \\"normal\\" and \\"bold\\" keywords or numbers between 1 and 1000.","Only \\"normal\\" and \\"bold\\" keywords or numbers between 1 and 1000 are allowed.","The font weight to use within the terminal for bold text. Accepts \\"normal\\" and \\"bold\\" keywords or numbers between 1 and 1000.","Controls whether the terminal cursor blinks.","Controls the style of terminal cursor when the terminal is focused.","Controls the style of terminal cursor when the terminal is not focused.","Controls the width of the cursor when {0} is set to {1}.","Controls the maximum number of lines the terminal keeps in its buffer. We pre-allocate memory based on this value in order to ensure a smooth experience. As such, as the value increases, so will the amount of memory.","Controls whether to detect and set the `$LANG` environment variable to a UTF-8 compliant option since VS Code\'s terminal only supports UTF-8 encoded data coming from the shell.","Set the `$LANG` environment variable if the existing variable does not exist or it does not end in `\'.UTF-8\'`.","Do not set the `$LANG` environment variable.","Always set the `$LANG` environment variable.","Let VS Code detect which renderer will give the best experience.","Enable GPU acceleration within the terminal.","Disable GPU acceleration within the terminal. The terminal will render much slower when GPU acceleration is off but it should reliably work on all systems.","Use the terminal\'s fallback canvas renderer which uses a 2d context instead of webgl which may perform better on some systems. Note that some features are limited in the canvas renderer like opaque selection.","Controls whether the terminal will leverage the GPU to do its rendering.","Separator used by {0} and {1}.","Show the context menu.","Copy when there is a selection, otherwise paste.","Paste on right click.","Select the word under the cursor and show the context menu.","Do nothing and pass event to terminal.","Controls how terminal reacts to right click.","An explicit start path where the terminal will be launched, this is used as the current working directory (cwd) for the shell process. This may be particularly useful in workspace settings if the root directory is not a convenient cwd.","Controls whether to confirm when the window closes if there are active terminal sessions.","Never confirm.","Always confirm if there are terminals.","Confirm if there are any terminals that have child processes.","Controls whether to confirm killing terminals when they have child processes. When set to editor, terminals in the editor area will be marked as changed when they have child processes. Note that child process detection may not work well for shells like Git Bash which don\'t run their processes as child processes of the shell.","Never confirm.","Confirm if the terminal is in the editor.","Confirm if the terminal is in the panel.","Confirm if the terminal is either in the editor or panel.","Controls whether the terminal bell is enabled. This shows up as a visual bell next to the terminal\'s name.","A set of command IDs whose keybindings will not be sent to the shell but instead always be handled by VS Code. This allows keybindings that would normally be consumed by the shell to act instead the same as when the terminal is not focused, for example `Ctrl+P` to launch Quick Open.\\n\\n&nbsp;\\n\\nMany commands are skipped by default. To override a default and pass that command\'s keybinding to the shell instead, add the command prefixed with the `-` character. For example add `-workbench.action.quickOpen` to allow `Ctrl+P` to reach the shell.\\n\\n&nbsp;\\n\\nThe following list of default skipped commands is truncated when viewed in Settings Editor. To see the full list, {1} and search for the first command from the list below.\\n\\n&nbsp;\\n\\nDefault Skipped Commands:\\n\\n{0}","open the default settings JSON","Open Default Settings (JSON)","Whether or not to allow chord keybindings in the terminal. Note that when this is true and the keystroke results in a chord it will bypass {0}, setting this to false is particularly useful when you want ctrl+k to go to your shell (not VS Code).","Whether to allow menubar mnemonics (for example Alt+F) to trigger the open of the menubar. Note that this will cause all alt keystrokes to skip the shell when true. This does nothing on macOS.","Object with environment variables that will be added to the VS Code process to be used by the terminal on macOS. Set to `null` to delete the environment variable.","Object with environment variables that will be added to the VS Code process to be used by the terminal on Linux. Set to `null` to delete the environment variable.","Object with environment variables that will be added to the VS Code process to be used by the terminal on Windows. Set to `null` to delete the environment variable.","Whether to display the environment changes indicator on each terminal which explains whether extensions have made, or want to make changes to the terminal\'s environment.","Disable the indicator.","Enable the indicator.","Only show the warning indicator when a terminal\'s environment is \'stale\', not the information indicator that shows a terminal has had its environment modified by an extension.","Whether to relaunch terminals automatically if extensions want to contribute to their environment and have not been interacted with yet.","Controls whether to show the alert \\"The terminal process terminated with exit code\\" when exit code is non-zero.","Controls the working directory a split terminal starts with.","A new split terminal will use the workspace root as the working directory. In a multi-root workspace a choice for which root folder to use is offered.","A new split terminal will use the working directory that the parent terminal started with.","On macOS and Linux, a new split terminal will use the working directory of the parent terminal. On Windows, this behaves the same as initial.","Whether to use ConPTY for Windows terminal process communication (requires Windows 10 build number 18309+). Winpty will be used if this is false.","A string containing all characters to be considered word separators when double-clicking to select word and in the fallback \'word\' link detection. Since this is used for link detection, including characters such as `:` that are used when detecting links will cause the line and column part of links like `file:10:5` to be ignored.","Whether to enable file links in terminals. Links can be slow when working on a network drive in particular because each file link is verified against the file system. Changing this will take effect only in new terminals.","Always off.","Always on.","Enable only when not in a remote workspace.","Version 6 of Unicode. This is an older version which should work better on older systems.","Version 11 of Unicode. This version provides better support on modern systems that use modern versions of Unicode.","Controls what version of Unicode to use when evaluating the width of characters in the terminal. If you experience emoji or other wide characters not taking up the right amount of space or backspace either deleting too much or too little then you may want to try tweaking this setting.","Length of network delay, in milliseconds, where local edits will be echoed on the terminal without waiting for server acknowledgement. If \'0\', local echo will always be on, and if \'-1\' it will be disabled.","When local echo should be enabled. This will override {0}","Always enabled","Always disabled","Enabled only for remote workspaces","Local echo will be disabled when any of these program names are found in the terminal title.","Terminal style of locally echoed text; either a font style or an RGB color.","Persist terminal sessions/history for the workspace across window reloads.","When the terminal process must be shut down (for example on window or application close), this determines when the previous terminal session contents/history should be restored and processes be recreated when the workspace is next opened.\\n\\nCaveats:\\n\\n- Restoring of the process current working directory depends on whether it is supported by the shell.\\n- Time to persist the session during shutdown is limited, so it may be aborted when using high-latency remote connections.","Revive the processes after the last window is closed on Windows/Linux or when the `workbench.action.quit` command is triggered (command palette, keybinding, menu).","Revive the processes after the last window is closed on Windows/Linux or when the `workbench.action.quit` command is triggered (command palette, keybinding, menu), or when the window is closed.","Never restore the terminal buffers or recreate the process.","Whether to hide the terminal view on startup, avoiding creating a terminal when there are no persistent sessions.","Never hide the terminal view on startup.","Only hide the terminal when there are no persistent sessions restored.","Always hide the terminal, even when there are persistent sessions restored.","Whether to draw custom glyphs for block element and box drawing characters instead of using the font, which typically yields better rendering with continuous lines. Note that this doesn\'t work when {0} is disabled.","A set of messages that, when encountered in the terminal, will be automatically responded to. Provided the message is specific enough, this can help automate away common responses.\\n\\nRemarks:\\n\\n- Use {0} to automatically respond to the terminate batch job prompt on Windows.\\n- The message includes escape sequences so the reply might not happen with styled text.\\n- Each reply can only happen once every second.\\n- Use {1} in the reply to mean the enter key.\\n- To unset a default key, set the value to null.\\n- Restart VS Code if new don\'t apply.","The reply to send to the process.","Determines whether or not shell integration is auto-injected to support features like enhanced command tracking and current working directory detection. \\n\\nShell integration works by injecting the shell with a startup script. The script gives VS Code insight into what is happening within the terminal.\\n\\nSupported shells:\\n\\n- Linux/macOS: bash, fish, pwsh, zsh\\n - Windows: pwsh\\n\\nThis setting applies only when terminals are created, so you will need to restart your terminals for it to take effect.\\n\\n Note that the script injection may not work if you have custom arguments defined in the terminal profile, have enabled {1}, have a [complex bash `PROMPT_COMMAND`](https://code.visualstudio.com/docs/editor/integrated-terminal#_complex-bash-promptcommand), or other unsupported setup. To disable decorations, see {0}","When shell integration is enabled, adds a decoration for each command.","Show decorations in the gutter (left) and overview ruler (right)","Show gutter decorations to the left of the terminal","Show overview ruler decorations to the right of the terminal","Do not show decorations","Controls the number of recently used commands to keep in the terminal command history. Set to 0 to disable terminal command history.","Enables experimental terminal Intellisense suggestions for supported shells when {0} is set to {1}. If shell integration is installed manually, {2} needs to be set to {3} before calling the script.","Controls whether the terminal will scroll using an animation.","Controls whether the terminal will ignore bracketed paste mode even if the terminal was put into the mode, omitting the {0} and {1} sequences when pasting. This is useful when the shell is not respecting the mode which can happen in sub-shells for example.","Enables image support in the terminal, this will only work when {0} is enabled. Both sixel and iTerm\'s inline image protocol are supported on Linux and macOS, Windows support will light up automatically when ConPTY passes through the sequences. Images will currently not be restored between window reloads/reconnects.","Controls whether the terminal, accessible buffer, or neither will be focused after `Terminal: Run Selected Text In Active Terminal` has been run.","Always focus the terminal.","Always focus the accessible buffer.","Do nothing.","Preserve the cursor position on reopen of the terminal\'s accessible view rather than setting it to the bottom of the buffer."],"vs/workbench/contrib/terminal/browser/terminalMenus":["&&New Terminal","&&Split Terminal","Run &&Active File","Run &&Selected Text","Copy","Copy as HTML","Paste","Clear","Select All","Copy","Copy as HTML","Paste","Clear","Select All","New Terminal With Profile","Select Default Profile","Configure Terminal Settings","Run Task...","Configure Tasks...","Switch Terminal","Clear Terminal","Run Active File","Run Selected Text","Rename...","Change Icon...","Change Color...","Toggle Size to Content Width","Join Terminals","{0} (Default)","{0} (Default)","{0} (Default)","Split Terminal"],"vs/workbench/contrib/terminal/browser/terminalIcons":["View icon of the terminal view.","Icon for rename in the terminal quick menu.","Icon for killing a terminal instance.","Icon for creating a new terminal instance.","Icon for creating a new terminal profile.","Icon for a terminal decoration mark.","Icon for a terminal decoration of a command that was incomplete.","Icon for a terminal decoration of a command that errored.","Icon for a terminal decoration of a command that was successful.","Icon for removing a terminal command from command history.","Icon for viewing output of a terminal command.","Icon for toggling fuzzy search of command history."],"vs/workbench/contrib/terminal/common/terminalStrings":["Terminal","New Terminal","Do Not Show Again","current session","previous session","Task","Local","Terminal","Focus Terminal","Focus Terminal and Hide Accessible Buffer","Kill Terminal","Kill","Move Terminal into Editor Area","Move Terminal into Panel","Change Icon...","Change Color...","Split Terminal","Split","Unsplit Terminal","Rename...","Toggle Size to Content Width","Focus Hover","Send Custom Sequence To Terminal","Create New Terminal Starting in a Custom Working Directory","Rename the Currently Active Terminal"],"vs/platform/terminal/common/terminalLogService":["Terminal"],"vs/workbench/contrib/terminal/browser/terminalTabbedView":["Move Tabs Right","Move Tabs Left","Hide Tabs"],"vs/workbench/contrib/terminal/browser/terminalTooltip":["Shell integration activated","The terminal process failed to launch. Disabling shell integration with terminal.integrated.shellIntegration.enabled might help.","Shell integration failed to activate","Process ID ({0}): {1}","Command line: {0}"],"vs/workbench/contrib/terminalContrib/accessibility/browser/terminalAccessibilityHelp":["The Focus Accessible Buffer ({0}) command enables screen readers to read terminal contents.","The Focus Accessible Buffer command enables screen readers to read terminal contents and is currently not triggerable by a keybinding.","Customize the behavior of the cursor when toggling between the terminal and accessible view with `terminal.integrated.accessibleViewPreserveCursorPosition.`","Consider using powershell instead of command prompt for an improved experience","The terminal has a feature called shell integration that offers an enhanced experience and provides useful commands for screen readers such as:","Go to Next Command ({0}) in the accessible view","Go to Next Command in the accessible view is currently not triggerable by a keybinding.","Go to Previous Command ({0}) in the accessible view","Go to Previous Command in the accessible view is currently not triggerable by a keybinding.","Go to Symbol ({0})","Go to symbol is currently not triggerable by a keybinding.","Run Recent Command ({0})","Run Recent Command is currently not triggerable by a keybinding.","Go to Recent Directory ({0})","Go to Recent Directory is currently not triggerable by a keybinding.","The Go to Recent Directory command ({0}) enables screen readers to easily navigate to a directory that has been used in the terminal.","The Go to Recent Directory command enables screen readers to easily navigate to a directory that has been used in the terminal and is currently not triggerable by a keybinding.","The Open Detected Link ({0}) command enables screen readers to easily open links found in the terminal.","The Open Detected Link command enables screen readers to easily open links found in the terminal and is currently not triggerable by a keybinding.","The Create New Terminal (With Profile) ({0}) command allows for easy terminal creation using a specific profile.","The Create New Terminal (With Profile) command allows for easy terminal creation using a specific profile and is currently not triggerable by a keybinding.","Configure what gets focused after running selected text in the terminal with `{0}`."],"vs/workbench/contrib/terminalContrib/links/browser/terminalLinkManager":["option + click","alt + click","cmd + click","ctrl + click","Follow link","Follow link using forwarded port","Link"],"vs/workbench/contrib/terminalContrib/links/browser/terminalLinkQuickpick":["Url","File","Folder","Workspace Search","Select the link to open, type to filter all links","Url","File","Folder","Workspace Search"],"vs/workbench/contrib/terminalContrib/quickFix/browser/quickFixAddon":["Run: {0}","Open: {0}","Quick Fix"],"vs/workbench/contrib/terminalContrib/quickFix/browser/terminalQuickFixBuiltinActions":["Free port {0}","Create PR {0}"],"vs/workbench/contrib/terminalContrib/quickFix/browser/terminalQuickFixService":["Contributes terminal quick fixes.","The ID of the quick fix provider","A regular expression or string to test the command line against","A regular expression or string to match a single line of the output against, which provides groups to be referenced in terminalCommand and uri.\\n\\nFor example:\\n\\n `lineMatcher: /git push --set-upstream origin (?<branchName>[^s]+)/;`\\n\\n`terminalCommand: \'git push --set-upstream origin ${group:branchName}\';`\\n","The command exit result to match on","The kind of the resulting quick fix. This changes how the quick fix is presented. Defaults to {0}."],"vs/workbench/contrib/extensions/browser/extensionsWidgets":["Average rating: {0} out of 5","Sponsor","Extension in {0}","This extension is ignored during sync.","Activation time","Startup","Pre-Release","Sponsor","This publisher has verified ownership of {0}","Latest version:","Activation time","Startup","1 uncaught error","{0} uncaught errors","1 message","{0} messages","Show Dependencies","Pre-Release version","This extension has a {0} available","You have chosen not to receive recommendations for this extension.","The icon color for extension ratings.","The icon color for extension verified publisher.","The icon color for pre-release extension.","The icon color for extension sponsor."],"vs/workbench/contrib/extensions/browser/extensionsViewer":["Error","Unknown Extension:","Extensions"],"vs/workbench/contrib/extensions/browser/exeBasedRecommendations":["This extension is recommended because you have {0} installed."],"vs/workbench/contrib/extensions/browser/workspaceRecommendations":["This extension is recommended by users of the current workspace."],"vs/workbench/contrib/extensions/browser/fileBasedRecommendations":["This extension is recommended based on the files you recently opened.","the {0} language"],"vs/workbench/contrib/extensions/browser/configBasedRecommendations":["This extension is recommended because of the current workspace configuration"],"vs/workbench/contrib/extensions/browser/webRecommendations":["This extension is recommended for {0} for the Web"],"vs/workbench/contrib/tasks/common/jsonSchemaCommon":["Additional command options","The current working directory of the executed program or script. If omitted Code\'s current workspace root is used.","The environment of the executed program or shell. If omitted the parent process\' environment is used.","Unrecognized problem matcher. Is the extension that contributes this problem matcher installed?","Unrecognized problem matcher. Is the extension that contributes this problem matcher installed?","Configures the shell to be used.","The shell to be used.","The shell arguments.","The command to be executed. Can be an external program or a shell command.","Arguments passed to the command when this task is invoked.","The task\'s name","The command to be executed. Can be an external program or a shell command.","Arguments passed to the command when this task is invoked.","Windows specific command configuration","The problem matcher(s) to use. Can either be a string or a problem matcher definition or an array of strings and problem matchers.","Mac specific command configuration","The problem matcher(s) to use. Can either be a string or a problem matcher definition or an array of strings and problem matchers.","Linux specific command configuration","The problem matcher(s) to use. Can either be a string or a problem matcher definition or an array of strings and problem matchers.","Controls whether the task name is added as an argument to the command. If omitted the globally defined value is used.","Controls whether the output of the running task is shown or not. If omitted the globally defined value is used.","Controls whether the executed command is echoed to the output. Default is false.","Deprecated. Use isBackground instead.","Whether the executed task is kept alive and is watching the file system.","Whether the executed task is kept alive and is running in the background.","Whether the user is prompted when VS Code closes with a running task.","Maps this task to Code\'s default build command.","Maps this task to Code\'s default test command.","The problem matcher(s) to use. Can either be a string or a problem matcher definition or an array of strings and problem matchers.","The command to be executed. Can be an external program or a shell command.","Additional arguments passed to the command.","Controls whether the output of the running task is shown or not. If omitted \'always\' is used.","Deprecated. Use isBackground instead.","Whether the executed task is kept alive and is watching the file system.","Whether the executed task is kept alive and is running in the background.","Whether the user is prompted when VS Code closes with a running background task.","Controls whether the executed command is echoed to the output. Default is false.","Controls whether the task name is added as an argument to the command. Default is false.","Prefix to indicate that an argument is task.","The problem matcher(s) to use. Can either be a string or a problem matcher definition or an array of strings and problem matchers.","The task configurations. Usually these are enrichments of task already defined in the external task runner."],"vs/workbench/services/configurationResolver/common/configurationResolverUtils":["\'env.\', \'config.\' and \'command.\' are deprecated, use \'env:\', \'config:\' and \'command:\' instead."],"vs/workbench/services/configurationResolver/common/configurationResolverSchema":["The input\'s id is used to associate an input with a variable of the form ${input:id}.","The type of user input prompt to use.","The description is shown when the user is prompted for input.","The default value for the input.","User inputs. Used for defining user input prompts, such as free string input or a choice from several options.","The \'promptString\' type opens an input box to ask the user for input.","Controls if a password input is shown. Password input hides the typed text.","The \'pickString\' type shows a selection list.","An array of strings that defines the options for a quick pick.","Label for the option.","Value for the option.","The \'command\' type executes a command.","The command to execute for this input variable.","Optional arguments passed to the command.","Optional arguments passed to the command.","Optional arguments passed to the command."],"vs/workbench/contrib/remote/browser/explorerViewItems":["Switch Remote"],"vs/workbench/contrib/snippets/browser/commands/abstractSnippetsActions":["Snippets"],"vs/workbench/contrib/snippets/browser/snippetPicker":["User Snippets","Workspace Snippets","Hide from IntelliSense","(hidden from IntelliSense)","Show in IntelliSense","Select a snippet","No snippet available"],"vs/workbench/contrib/snippets/browser/snippetsFile":["Workspace Snippet","Global User Snippet","User Snippet"],"vs/workbench/contrib/snippets/browser/snippetCompletionProvider":["{0} ({1})","{0}, {1}","{0}, {1}"],"vs/workbench/contrib/update/browser/releaseNotesEditor":["Release Notes: {0}","unassigned","Show release notes after an update"],"vs/workbench/contrib/welcomeGettingStarted/common/gettingStartedContent":["Icon used for the setup category of welcome page","Icon used for the beginner category of welcome page","Icon used for the intermediate category of welcome page","New File...","Open a new untitled text file, notebook, or custom editor.","Open...","Open a file or folder to start working","Open File...","Open a file to start working","Open Folder...","Open a folder to start working","Open Folder...","Open a folder to start working","Clone Git Repository...","Clone a remote repository to a local folder","Open Repository...","Connect to a remote repository or pull request to browse, search, edit, and commit","Open a Walkthrough...","View a walkthrough on the editor or an extension","Connect to...","Connect to remote development workspaces.","Open Tunnel...","Connect to a remote machine through a Tunnel","Get Started with VS Code","Discover the best customizations to make VS Code yours.","Personalize your VS Code","Keep your essential VS Code customizations backed up and updated across all your devices.\\n{0}","Backup and Sync Settings","Choose the look you want","The right color palette helps you focus on your code, is easy on your eyes, and is simply more fun to use.\\n{0}","Browse Color Themes","One shortcut to access everything","Commands are the keyboard way to accomplish any task in VS Code. **Practice** by looking up your frequent ones to save time.\\n{0}\\n__Try searching for \'view toggle\'.__","Open Command Palette","Limitless extensibility","Extensions are VS Code\'s power-ups. A growing number are becoming available in the web.\\n{0}","Browse Popular Web Extensions","Rich support for all your languages","Code smarter with syntax highlighting, code completion, linting and debugging. While many languages are built-in, many more can be added as extensions.\\n{0}","Browse Language Extensions","Open up your code","You\'re all set to start coding. Open a project folder to get your files into VS Code.\\n{0}","Pick a Folder","Open up your code","You\'re all set to start coding. Open a project folder to get your files into VS Code.\\n{0}","Pick a Folder","Quickly navigate between your files","Navigate between files in an instant with one keystroke. Tip: Open multiple files by pressing the right arrow key.\\n{0}","Quick Open a File","Get Started with VS Code for the Web","Discover the best customizations to make VS Code for the Web yours.","Personalize your VS Code","Keep your essential VS Code customizations backed up and updated across all your devices.\\n{0}","Backup and Sync Settings","Choose the look you want","The right color palette helps you focus on your code, is easy on your eyes, and is simply more fun to use.\\n{0}","Browse Color Themes","One shortcut to access everything","Commands are the keyboard way to accomplish any task in VS Code. **Practice** by looking up your frequent ones to save time.\\n{0}\\n__Try searching for \'view toggle\'.__","Open Command Palette","Just the right amount of UI","The full menu bar is available in the dropdown menu to make room for your code. Toggle its appearance for faster access. \\n{0}","Toggle Menu Bar","Limitless extensibility","Extensions are VS Code\'s power-ups. A growing number are becoming available in the web.\\n{0}","Browse Popular Web Extensions","Rich support for all your languages","Code smarter with syntax highlighting, code completion, linting and debugging. While many languages are built-in, many more can be added as extensions.\\n{0}","Browse Language Extensions","Open up your code","You\'re all set to start coding. You can open a local project or a remote repository to get your files into VS Code.\\n{0}\\n{1}","Open Folder","Open Repository","Quickly navigate between your files","Navigate between files in an instant with one keystroke. Tip: Open multiple files by pressing the right arrow key.\\n{0}","Quick Open a File","Learn the Fundamentals","Jump right into VS Code and get an overview of the must-have features.","Redefine your editing skills","Want to code faster and smarter? Practice powerful code editing features in the interactive playground.\\n{0}","Open Editor Playground","Convenient built-in terminal","Quickly run shell commands and monitor build output, right next to your code.\\n{0}","Show Terminal Panel","Limitless extensibility","Extensions are VS Code\'s power-ups. They range from handy productivity hacks, expanding out-of-the-box features, to adding completely new capabilities.\\n{0}","Browse Recommended Extensions","Tune your settings","Tweak every aspect of VS Code and your extensions to your liking. Commonly used settings are listed first to get you started.\\n{0}","Tweak my Settings","Customize VS Code with Profiles","Profiles let you create sets of VS Code customizations that include settings, extensions and UI state. Create your own profile from scratch or use the predefined set of profile templates for your specific workflow.\\n{0}","Try Profiles","Safely browse and edit code","{0} lets you decide whether your project folders should **allow or restrict** automatic code execution __(required for extensions, debugging, etc)__.\\nOpening a file/folder will prompt to grant trust. You can always {1} later.","Workspace Trust","enable trust","Lean back and learn","Watch the first in a series of short & practical video tutorials for VS Code\'s key features.\\n{0}","Watch Tutorial","Boost your Productivity","Optimize your development workflow with these tips & tricks.","Side by side editing","Make the most of your screen estate by opening files side by side, vertically and horizontally.\\n{0}","Split Editor","Watch your code in action","Accelerate your edit, build, test, and debug loop by setting up a launch configuration.\\n{0}","Run your Project","Track your code with Git","Set up the built-in version control for your project to track your changes and collaborate with others.\\n{0}","Clone Repository","Track your code with Git","Set up the built-in version control for your project to track your changes and collaborate with others.\\n{0}","Initialize Git Repository","Track your code with Git","No more looking up Git commands! Git and GitHub workflows are seamlessly integrated.\\n{0}","Open Source Control","Install Git","Install Git to track changes in your projects.\\n{0}\\n{1}Reload window{2} after installation to complete Git setup.","Install Git","Automate your project tasks","Create tasks for your common workflows and enjoy the integrated experience of running scripts and automatically checking results.\\n{0}","Run Auto-detected Tasks","Customize your shortcuts","Once you have discovered your favorite commands, create custom keyboard shortcuts for instant access.\\n{0}","Keyboard Shortcuts","Customize Notebooks","Select the layout for your notebooks","Get notebooks to feel just the way you prefer"],"vs/workbench/contrib/welcomeGettingStarted/browser/featuredExtensionService":["Recommended"],"vs/workbench/contrib/welcomeGettingStarted/browser/gettingStartedColors":["Background color for the Welcome page.","Background color for the tiles on the Welcome page.","Hover background color for the tiles on the Welcome.","Border color for the tiles on the Welcome page.","Foreground color for the Welcome page progress bars.","Background color for the Welcome page progress bars.","Foreground color of the heading of each walkthrough step"],"vs/workbench/contrib/welcomeGettingStarted/browser/gettingStartedExtensionPoint":["Title","Contribute walkthroughs to help users getting started with your extension.","Unique identifier for this walkthrough.","Title of walkthrough.","Relative path to the icon of the walkthrough. The path is relative to the extension location. If not specified, the icon defaults to the extension icon if available.","Description of walkthrough.","Walkthroughs that match one of these glob patterns appear as \'featured\' in workspaces with the specified files. For example, a walkthrough for TypeScript projects might specify `tsconfig.json` here.","Context key expression to control the visibility of this walkthrough.","Steps to complete as part of this walkthrough.","Unique identifier for this step. This is used to keep track of which steps have been completed.","Title of step.","Description of step. Supports ``preformatted``, __italic__, and **bold** text. Use markdown-style links for commands or external links: {0}, {1}, or {2}. Links on their own line will be rendered as buttons.","Deprecated. Use markdown links in the description instead, i.e. {0}, {1}, or {2}","Media to show alongside this step, either an image or markdown content.","Deprecated. Please use `image` or `markdown` instead","Path to an image - or object consisting of paths to light, dark, and hc images - relative to extension directory. Depending on context, the image will be displayed from 400px to 800px wide, with similar bounds on height. To support HIDPI displays, the image will be rendered at 1.5x scaling, for example a 900 physical pixels wide image will be displayed as 600 logical pixels wide.","Path to the image for dark themes, relative to extension directory.","Path to the image for light themes, relative to extension directory.","Path to the image for hc themes, relative to extension directory.","Path to the image for hc light themes, relative to extension directory.","Alternate text to display when the image cannot be loaded or in screen readers.","Path to an svg, color tokens are supported in variables to support theming to match the workbench.","Alternate text to display when the image cannot be loaded or in screen readers.","Deprecated. Please use `image` or `markdown` instead","Path to the markdown document, relative to extension directory.","Events that should trigger this step to become checked off. If empty or not defined, the step will check off when any of the step\'s buttons or links are clicked; if the step has no buttons or links it will check on when it is selected.","Check off step when a given command is executed anywhere in VS Code.","Check off step when a given link is opened via a walkthrough step.","Check off step when a given view is opened","Check off step when a given setting is changed","Check off step when a context key expression is true.","Check off step when an extension with the given id is installed. If the extension is already installed, the step will start off checked.","Check off step as soon as it is selected.","Signal to mark step as complete.","doneOn is deprecated. By default steps will be checked off when their buttons are clicked, to configure further use completionEvents","Mark step done when the specified command is executed.","Context key expression to control the visibility of this step."],"vs/workbench/contrib/welcomeWalkthrough/common/walkThroughUtils":["Background color for the embedded editors on the Interactive Playground."],"vs/workbench/contrib/callHierarchy/browser/callHierarchyTree":["Call Hierarchy","calls from {0}","callers of {0}"],"vs/workbench/contrib/typeHierarchy/browser/typeHierarchyTree":["Type Hierarchy","supertypes of {0}","subtypes of {0}"],"vs/editor/contrib/symbolIcons/browser/symbolIcons":["The foreground color for array symbols. These symbols appear in the outline, breadcrumb, and suggest widget.","The foreground color for boolean symbols. These symbols appear in the outline, breadcrumb, and suggest widget.","The foreground color for class symbols. These symbols appear in the outline, breadcrumb, and suggest widget.","The foreground color for color symbols. These symbols appear in the outline, breadcrumb, and suggest widget.","The foreground color for constant symbols. These symbols appear in the outline, breadcrumb, and suggest widget.","The foreground color for constructor symbols. These symbols appear in the outline, breadcrumb, and suggest widget.","The foreground color for enumerator symbols. These symbols appear in the outline, breadcrumb, and suggest widget.","The foreground color for enumerator member symbols. These symbols appear in the outline, breadcrumb, and suggest widget.","The foreground color for event symbols. These symbols appear in the outline, breadcrumb, and suggest widget.","The foreground color for field symbols. These symbols appear in the outline, breadcrumb, and suggest widget.","The foreground color for file symbols. These symbols appear in the outline, breadcrumb, and suggest widget.","The foreground color for folder symbols. These symbols appear in the outline, breadcrumb, and suggest widget.","The foreground color for function symbols. These symbols appear in the outline, breadcrumb, and suggest widget.","The foreground color for interface symbols. These symbols appear in the outline, breadcrumb, and suggest widget.","The foreground color for key symbols. These symbols appear in the outline, breadcrumb, and suggest widget.","The foreground color for keyword symbols. These symbols appear in the outline, breadcrumb, and suggest widget.","The foreground color for method symbols. These symbols appear in the outline, breadcrumb, and suggest widget.","The foreground color for module symbols. These symbols appear in the outline, breadcrumb, and suggest widget.","The foreground color for namespace symbols. These symbols appear in the outline, breadcrumb, and suggest widget.","The foreground color for null symbols. These symbols appear in the outline, breadcrumb, and suggest widget.","The foreground color for number symbols. These symbols appear in the outline, breadcrumb, and suggest widget.","The foreground color for object symbols. These symbols appear in the outline, breadcrumb, and suggest widget.","The foreground color for operator symbols. These symbols appear in the outline, breadcrumb, and suggest widget.","The foreground color for package symbols. These symbols appear in the outline, breadcrumb, and suggest widget.","The foreground color for property symbols. These symbols appear in the outline, breadcrumb, and suggest widget.","The foreground color for reference symbols. These symbols appear in the outline, breadcrumb, and suggest widget.","The foreground color for snippet symbols. These symbols appear in the outline, breadcrumb, and suggest widget.","The foreground color for string symbols. These symbols appear in the outline, breadcrumb, and suggest widget.","The foreground color for struct symbols. These symbols appear in the outline, breadcrumb, and suggest widget.","The foreground color for text symbols. These symbols appear in the outline, breadcrumb, and suggest widget.","The foreground color for type parameter symbols. These symbols appear in the outline, breadcrumb, and suggest widget.","The foreground color for unit symbols. These symbols appear in the outline, breadcrumb, and suggest widget.","The foreground color for variable symbols. These symbols appear in the outline, breadcrumb, and suggest widget."],"vs/workbench/contrib/userDataSync/browser/userDataSyncViews":["Edit Name","Turn off Settings Sync","Load Sync Activity","Select Sync Activity File or Folder","Show raw JSON sync data","Compare with Local","{0} ↔ {1}","{0} (Remote)","{0} (Local)","Restore","Would you like to replace your current {0} with selected?","Reset Synced Data","{0} ↔ {1}","Current","Current","No Machines","Current","machine not found with id: {0}","Are you sure you want to turn off sync on selected machines?","Are you sure you want to turn off sync on {0}?","&&Turn off","Enter the name of the machine","machine not found with id: {0}","Machine name should be unique and not empty","Logs","Last Synced Remotes","Current","Conflicts","Synced Machines","Sync Activity (Remote)","Sync Activity (Local)","Sync Activity (Developer)","Troubleshoot"],"vs/workbench/browser/parts/notifications/notificationsList":["Inspect the response in the accessible view with {0}","Inspect the response in the accessible view via the command Open Accessible View which is currently not triggerable via keybinding","{0}, notification, {1}","{0}, notification","{0}, source: {1}, notification, {2}","{0}, source: {1}, notification","Notifications List"],"vs/workbench/browser/parts/notifications/notificationsActions":["Icon for the clear action in notifications.","Icon for the clear all action in notifications.","Icon for the hide action in notifications.","Icon for the expand action in notifications.","Icon for the collapse action in notifications.","Icon for the configure action in notifications.","Icon for the mute all action in notifications.","Clear Notification","Clear All Notifications","Toggle Do Not Disturb Mode","Hide Notifications","Expand Notification","Collapse Notification","More Actions...","Copy Text"],"vs/workbench/services/textfile/common/textFileSaveParticipant":["Saving \'{0}\'"],"vs/workbench/browser/parts/titlebar/menubarControl":["&&File","&&Edit","&&Selection","&&View","&&Go","&&Terminal","&&Help","Preferences","Accessibility support is enabled for you. For the most accessible experience, we recommend the custom title bar style.","Open Settings","Focus Application Menu","Check for &&Updates...","Checking for Updates...","D&&ownload Update","Downloading Update...","Install &&Update...","Installing Update...","Restart to &&Update"],"vs/workbench/browser/parts/titlebar/commandCenterControl":["Search","{0} {1}","{0} {1}","Search {0} ({1}) — {2}","Search {0} — {1}","Command Center"],"vs/workbench/browser/parts/globalCompositeBar":["Accounts icon in the view bar.","Hide Accounts","Manage","Accounts","Accounts","Loading...","{0} is currently unavailable","Manage Trusted Extensions","Sign Out","You are not signed in to any accounts","Manage","Manage {0} (Profile)"],"vs/workbench/services/workingCopy/common/storedFileWorkingCopy":["Failed to save \'{0}\': The content of the file is newer. Do you want to overwrite the file with your changes?","Overwrite","Discard","Overwrite as Admin...","Overwrite as Sudo...","Retry as Admin...","Retry as Sudo...","Overwrite","Retry","Save As...","Discard","Failed to save \'{0}\': File is read-only. Select \'Overwrite as Admin\' to retry as administrator.","Failed to save \'{0}\': File is read-only. Select \'Overwrite as Sudo\' to retry as superuser.","Failed to save \'{0}\': File is read-only. Select \'Overwrite\' to attempt to make it writeable.","Failed to save \'{0}\': Insufficient permissions. Select \'Retry as Admin\' to retry as administrator.","Failed to save \'{0}\': Insufficient permissions. Select \'Retry as Sudo\' to retry as superuser.","Failed to save \'{0}\': {1}"],"vs/platform/terminal/common/terminalProfiles":["Automatically detect the default"],"vs/workbench/contrib/webview/browser/webviewElement":["Error loading webview: {0}"],"vs/platform/quickinput/browser/quickPickPin":["pinned","Pin command","Pinned command"],"vs/workbench/api/common/extHostDiagnostics":["Not showing {0} further errors and warnings."],"vs/workbench/api/common/extHostLanguageFeatures":["Paste using \'{0}\' extension","Drop using \'{0}\' extension"],"vs/workbench/api/common/extHostProgress":["{0} (Extension)"],"vs/workbench/api/common/extHostStatusBar":["{0} (Extension)","Extension Status"],"vs/workbench/api/common/extHostTreeViews":["Element with id {0} is already registered"],"vs/workbench/api/common/extHostNotebook":["Unable to modify read-only file \'{0}\'","File Modified Since"],"vs/workbench/api/common/extHostChat":["Provider returned null response","Error from provider: {0}"],"vs/workbench/api/common/extHostChatAgents2":["Error from provider: {0}"],"vs/base/browser/ui/findinput/findInputToggles":["Match Case","Match Whole Word","Use Regular Expression"],"vs/editor/browser/widget/diffEditor/accessibleDiffViewer":["Icon for \'Insert\' in accessible diff viewer.","Icon for \'Remove\' in accessible diff viewer.","Icon for \'Close\' in accessible diff viewer.","Close","Accessible Diff Viewer. Use arrow up and down to navigate.","no lines changed","1 line changed","{0} lines changed","Difference {0} of {1}: original line {2}, {3}, modified line {4}, {5}","blank","{0} unchanged line {1}","{0} original line {1} modified line {2}","+ {0} modified line {1}","- {0} original line {1}"],"vs/editor/browser/widget/diffEditor/hideUnchangedRegionsFeature":["Fold Unchanged Region","Click or drag to show more above","Show all","Click or drag to show more below","{0} hidden lines","Double click to unfold"],"vs/editor/browser/widget/diffEditor/movedBlocksLines":["Code moved with changes to line {0}-{1}","Code moved with changes from line {0}-{1}","Code moved to line {0}-{1}","Code moved from line {0}-{1}"],"vs/editor/browser/widget/diffEditor/diffEditorEditors":[" use {0} to open the accessibility help."],"vs/editor/browser/widget/diffEditor/colors":["The border color for text that got moved in the diff editor.","The active border color for text that got moved in the diff editor."],"vs/editor/browser/controller/textAreaHandler":["editor","The editor is not accessible at this time.","{0} To enable screen reader optimized mode, use {1}","{0} To enable screen reader optimized mode, open the quick pick with {1} and run the command Toggle Screen Reader Accessibility Mode, which is currently not triggerable via keyboard.","{0} Please assign a keybinding for the command Toggle Screen Reader Accessibility Mode by accessing the keybindings editor with {1} and run it."],"vs/editor/contrib/codeAction/browser/codeActionMenu":["More Actions...","Quick Fix","Extract","Inline","Rewrite","Move","Surround With","Source Action"],"vs/platform/actionWidget/browser/actionWidget":["Background color for toggled action items in action bar.","Whether the action widget list is visible","Hide action widget","Select previous action","Select next action","Accept selected action","Preview selected action"],"vs/editor/contrib/colorPicker/browser/colorPickerWidget":["Click to toggle color options (rgb/hsl/hex)","Icon to close the color picker"],"vs/editor/contrib/editorState/browser/keybindingCancellation":["Whether the editor runs a cancellable operation, e.g. like \'Peek References\'"],"vs/editor/contrib/gotoSymbol/browser/peek/referencesWidget":["no preview available","No results","References"],"vs/editor/contrib/snippet/browser/snippetVariables":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sun","Mon","Tue","Wed","Thu","Fri","Sat","January","February","March","April","May","June","July","August","September","October","November","December","Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"vs/editor/contrib/suggest/browser/suggestWidgetStatus":["{0} ({1})"],"vs/editor/contrib/suggest/browser/suggestWidgetDetails":["Close","Loading..."],"vs/editor/contrib/suggest/browser/suggestWidgetRenderer":["Icon for more information in the suggest widget.","Read More"],"vs/workbench/contrib/comments/common/commentModel":["There are no comments in this workspace yet."],"vs/workbench/contrib/comments/browser/commentsViewActions":["Focus Comments view","Clear filter text","Focus comments filter","Toggle Unresolved Comments","Comments","Show Unresolved","Toggle Resolved Comments","Comments","Show Resolved"],"vs/workbench/contrib/comments/browser/commentColors":["Icon color for resolved comments.","Icon color for unresolved comments.","Color of borders and arrow for resolved comments.","Color of borders and arrow for unresolved comments.","Color of background for comment ranges.","Color of background for currently selected or hovered comment range."],"vs/workbench/browser/parts/editor/editorPanes":["This type of editor cannot be opened in floating windows yet.","Close Editor","Unable to open \'{0}\'","&&OK"],"vs/workbench/browser/parts/editor/editorGroupWatermark":["Show All Commands","Go to File","Open File","Open Folder","Open File or Folder","Open Recent","New Untitled Text File","Find in Files","Toggle Terminal","Start Debugging","Toggle Full Screen","Show Settings"],"vs/workbench/browser/parts/editor/editorPlaceholder":["Workspace Trust Required","The file is not displayed in the editor because trust has not been granted to the folder.","The file is not displayed in the editor because trust has not been granted to the workspace.","Manage Workspace Trust","Error Editor","The editor could not be opened because the file was not found.","The editor could not be opened due to an unexpected error: {0}","The editor could not be opened due to an unexpected error.","Try Again"],"vs/workbench/browser/parts/compositePart":["{0} actions","Views and More Actions...","{0} ({1})"],"vs/workbench/browser/parts/paneCompositeBar":["Reset Location","Reset Location"],"vs/platform/quickinput/browser/quickInput":["Back","Press \'Enter\' to confirm your input or \'Escape\' to cancel","{0}/{1}","Type to narrow down results.","{0} (Press \'Enter\' to confirm or \'Escape\' to cancel)"],"vs/platform/quickinput/browser/quickInputList":["Quick Input"],"vs/workbench/contrib/preferences/browser/settingsEditorSettingIndicators":["Setting value not applied","The setting value can only be applied in a trusted workspace.","Manage Workspace Trust","Not synced","This setting is ignored during sync","Default value changed","User","Workspace","Remote","Setting value not applied","This setting is managed by your organization and its applied value cannot be changed.","View policy settings","Applies to all profiles","The setting is not specific to the current profile, and will retain its value when switching profiles.","Also modified in","Modified in","Also modified elsewhere","Modified elsewhere","The setting has also been modified in the following scopes:","The setting has been modified in the following scopes:","The following languages have default overrides:","Default setting value overridden by {0}","User","Workspace","Remote","The {0} scope for {1}","User","Workspace","Remote","the {0} scope for {1}","Workspace untrusted; setting value not applied","Managed by organization policy; setting value not applied","Setting value retained when switching profiles","Also modified in","Modified in","Setting ignored during sync","{0} overrides the default value","Language-specific default values exist for {0}"],"vs/workbench/contrib/preferences/browser/settingsWidgets":["OK","Cancel","List item `{0}`","List item `{0}` with sibling `${1}`","Remove Item","Edit Item","Add Item","Item...","Sibling...","Exclude files matching `{0}`","Exclude files matching `{0}`, only when a file matching `{1}` is present","Remove Exclude Item","Edit Exclude Item","Add Pattern","Exclude Pattern...","When Pattern Is Present...","Include files matching `{0}`","Include files matching `{0}`, only when a file matching `{1}` is present","Remove Include Item","Edit Include Item","Add Pattern","Include Pattern...","When Pattern Is Present...","OK","Cancel","Key","Value","The property `{0}` is set to `{1}`.","Remove Item","Reset Item","Edit Item","Add Item","Item","Value","The property `{0}` is set to `{1}`.","Remove Item","Reset Item","Edit Item","Add Item","Item","Value"],"vs/workbench/contrib/chat/browser/codeBlockPart":["Code block","Toolbar for code block which can be reached via tab","Code block toolbar","Code block {0}"],"vs/workbench/contrib/notebook/browser/view/renderers/cellRenderer":["Execution Order"],"vs/workbench/contrib/notebook/browser/viewParts/notebookEditorStickyScroll":["Toggle Notebook Sticky Scroll","&&Toggle Notebook Sticky Scroll","Notebook Sticky Scroll","&&Notebook Sticky Scroll"],"vs/workbench/services/workingCopy/common/storedFileWorkingCopyManager":["Saving working copies"],"vs/workbench/contrib/notebook/browser/contrib/find/notebookFindReplaceWidget":["Find","Find","Previous Match","Next Match","Close","Toggle Replace","Replace","Replace","Replace","Replace All","Icon for Find Filter in find widget.","Find Filters","Markdown Source","Rendered Markdown","Code Cell Source","Code Cell Output"],"vs/workbench/contrib/notebook/browser/viewModel/notebookOutlineEntryFactory":["empty cell"],"vs/workbench/contrib/chat/browser/chatSlashCommandContentWidget":["Exited {0} mode"],"vs/platform/actions/browser/buttonbar":["{0} ({1})"],"vs/workbench/contrib/debug/common/debugger":["Cannot find debug adapter for type \'{0}\'.","Use IntelliSense to learn about possible attributes.","Hover to view descriptions of existing attributes.","For more information, visit: {0}","Type of configuration.","The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.","\\"node2\\" is no longer supported, use \\"node\\" instead and set the \\"protocol\\" attribute to \\"inspector\\".","Request type of configuration. Can be \\"launch\\" or \\"attach\\".","Windows specific launch configuration attributes.","OS X specific launch configuration attributes.","Linux specific launch configuration attributes."],"vs/workbench/contrib/terminal/browser/xterm/decorationAddon":["Rerun Command","Do you want to run the command: {0}","Yes","No","Copy Command","Copy Command and Output","Copy Output","Copy Output as HTML","Run Recent Command","Go To Recent Directory","Configure Command Decorations","Learn About Shell Integration","Toggle visibility","Toggle visibility","Gutter command decorations","Overview ruler command decorations"],"vs/workbench/contrib/debug/common/debugSchemas":["Contributes debug adapters.","Unique identifier for this debug adapter.","Display name for this debug adapter.","Path to the debug adapter program. Path is either absolute or relative to the extension folder.","Optional arguments to pass to the adapter.","Optional runtime in case the program attribute is not an executable but requires a runtime.","Optional runtime arguments.","Mapping from interactive variables (e.g. ${action.pickProcess}) in `launch.json` to a command.","Configurations for generating the initial \'launch.json\'.","List of languages for which the debug extension could be considered the \\"default debugger\\".","Snippets for adding new configurations in \'launch.json\'.","JSON schema configurations for validating \'launch.json\'.","Condition which must be true to enable this type of debugger. Consider using \'shellExecutionSupported\', \'virtualWorkspace\', \'resourceScheme\' or an extension-defined context key as appropriate for this.","When this condition is true, this debugger type is hidden from the debugger list, but is still enabled.","Optional message to mark this debug type as being deprecated.","Windows specific settings.","Runtime used for Windows.","macOS specific settings.","Runtime used for macOS.","Linux specific settings.","Runtime used for Linux.","UI strings contributed by this debug adapter.","When there are unverified breakpoints in a language supported by this debug adapter, this message will appear on the breakpoint hover and in the breakpoints view. Markdown and command links are supported.","Contributes breakpoints.","Allow breakpoints for this language.","Condition which must be true to enable breakpoints in this language. Consider matching this to the debugger when clause as appropriate.","Presentation options on how to show this configuration in the debug configuration dropdown and the command palette.","Controls if this configuration should be shown in the configuration dropdown and the command palette.","Group that this configuration belongs to. Used for grouping and sorting in the configuration dropdown and the command palette.","Order of this configuration within a group. Used for grouping and sorting in the configuration dropdown and the command palette.","Launch","Version of this file format.","List of configurations. Add new configurations or edit existing ones by using IntelliSense.","List of compounds. Each compound references multiple configurations which will get launched together.","Name of compound. Appears in the launch configuration drop down menu.","Please use unique configuration names.","Name of compound. Appears in the launch configuration drop down menu.","Name of folder in which the compound is located.","Names of configurations that will be started as part of this compound.","Controls whether manually terminating one session will stop all of the compound sessions.","Task to run before any of the compound configurations start."],"vs/workbench/contrib/debug/browser/rawDebugSession":["No debug adapter, can not start debug session.","The debugger needs to open a new tab or window for the debuggee but the browser prevented this. You must give permission to continue.","&&Continue","No debugger available found. Can not send \'{0}\'.","More Info"],"vs/workbench/contrib/mergeEditor/browser/model/mergeEditorModel":["Set Input Handled","Undo Mark As Handled"],"vs/workbench/contrib/mergeEditor/browser/mergeMarkers/mergeMarkersController":["1 Conflicting Line","{0} Conflicting Lines"],"vs/workbench/contrib/mergeEditor/browser/view/conflictActions":["Accept {0}","Accept {0} in the result document.","Accept Combination ({0} First)","Accept Combination","Accept an automatic combination of both sides in the result document.","Append {0}","Append {0} to the result document.","Accept Combination","Accept an automatic combination of both sides in the result document.","Ignore","Don\'t take this side of the conflict.","Manual Resolution","This conflict has been resolved manually.","No Changes Accepted","The current resolution of this conflict equals the common ancestor of both the right and left changes.","Remove {0}","Remove {0} from the result document.","Remove {0}","Remove {0} from the result document.","Reset to base","Reset this conflict to the common ancestor of both the right and left changes."],"vs/workbench/contrib/comments/browser/commentGlyphWidget":["Editor gutter decoration color for commenting ranges. This color should be opaque.","Editor overview ruler decoration color for resolved comments. This color should be opaque.","Editor overview ruler decoration color for unresolved comments. This color should be opaque.","Editor gutter decoration color for commenting glyphs.","Editor gutter decoration color for commenting glyphs for unresolved comment threads."],"vs/workbench/contrib/customEditor/common/extensionPoint":["Contributed custom editors.","Identifier for the custom editor. This must be unique across all custom editors, so we recommend including your extension id as part of `viewType`. The `viewType` is used when registering custom editors with `vscode.registerCustomEditorProvider` and in the `onCustomEditor:${id}` [activation event](https://code.visualstudio.com/api/references/activation-events).","Human readable name of the custom editor. This is displayed to users when selecting which editor to use.","Set of globs that the custom editor is enabled for.","Glob that the custom editor is enabled for.","Controls if the custom editor is enabled automatically when the user opens a file. This may be overridden by users using the `workbench.editorAssociations` setting.","The editor is automatically used when the user opens a resource, provided that no other default custom editors are registered for that resource.","The editor is not automatically used when the user opens a resource, but a user can switch to the editor using the `Reopen With` command."],"vs/workbench/contrib/terminal/browser/terminalConfigHelper":["The \'{0}\' extension is recommended for opening a terminal in WSL.","Install"],"vs/workbench/contrib/terminal/browser/terminalProfileQuickpick":["Select the terminal profile to create","Select your default terminal profile","Enter terminal profile name","A terminal profile already exists with that name","profiles","contributed","detected","This terminal profile uses a potentially unsafe path that can be modified by another user: {0}. Are you sure you want to use it?","Yes","Cancel","Configure Terminal Profile"],"vs/workbench/contrib/terminal/browser/terminalInstance":["Terminal input","Use the accessible buffer {0} to manually review output","Use the Terminal: Focus Accessible Buffer command to manually review output","Bell","Some keybindings don\'t go to the terminal by default and are handled by {0} instead.","Configure Terminal Settings","Preview:","Are you sure you want to paste {0} lines of text into the terminal?","&&Paste","Do not ask me again","Lost connection to process","Cannot launch a terminal process in an untrusted workspace","Cannot launch a terminal process in an untrusted workspace with cwd {0} and userHome {1}","Disabling shell integration in user settings might help.","Learn more about shell integration","Open user settings","Creating a terminal process requires executing code","Terminal {0}, {1}","Terminal {0}","Run the command: Toggle Screen Reader Accessibility Mode for an optimized screen reader experience","Use {0} for terminal accessibility help","Set Fixed Dimensions: Column","Set Fixed Dimensions: Row","Terminal {0} environment is stale, run the \'Show Environment Information\' command for more information","Select an icon for the terminal","Select a color for the terminal","The terminal process \\"{0}\\" failed to launch (exit code: {1}).","The terminal process failed to launch (exit code: {0}).","The terminal process \\"{0}\\" terminated with exit code: {1}.","The terminal process terminated with exit code: {0}.","The terminal process failed to launch: {0}."],"vs/workbench/contrib/terminal/browser/terminalTabsList":["Type terminal name. Press Enter to confirm or Escape to cancel.","Terminal tabs","Terminal {0} {1}, split {2} of {3}","Terminal {0} {1}","Terminal"],"vs/workbench/contrib/codeEditor/browser/find/simpleFindWidget":["Find","Find (⇅ for history)","Previous Match","Next Match","Close","Enter search input","{0} found","{0} found for \'{1}\'","{0} found for \'{1}\'","Border color of the sash border."],"vs/workbench/contrib/terminalContrib/links/browser/terminalLinkDetectorAdapter":["Search workspace","Open file in editor","Focus folder in explorer","Open folder in new window","Follow link"],"vs/workbench/contrib/terminal/browser/xterm/decorationStyles":["Show Command Actions","Command executed {0} and failed","Command executed {0} and failed (Exit Code {1})","Command executed {0}"],"vs/workbench/contrib/welcomeGettingStarted/common/media/theme_picker":["Dark Modern","Light Modern","Dark High Contrast","Light High Contrast","See More Themes..."],"vs/workbench/contrib/welcomeGettingStarted/common/media/notebookProfile":["Default","Jupyter","Colab"],"vs/workbench/contrib/userDataSync/browser/userDataSyncConflictsView":["Please go through each entry and merge to resolve conflicts.","Show Conflicts","Accept Remote","Accept Local","{0} (Remote)","{0} (Local)","Theirs","Yours"],"vs/workbench/browser/parts/notifications/notificationsViewer":["Click to execute command \'{0}\'","Notification Actions","Source: {0}"],"vs/platform/languagePacks/common/localizedStrings":["open","close","find"],"vs/base/browser/ui/menu/menubar":["Application Menu","More"],"vs/workbench/browser/parts/compositeBarActions":["{0} ({1})","{0} - {1}","Additional Views","{0} ({1})","Manage Extension","Hide \'{0}\'","Keep \'{0}\'","Hide Badge","Show Badge","Toggle View Pinned","Toggle View Badge"],"vs/editor/browser/widget/diffEditor/decorations":["Line decoration for inserts in the diff editor.","Line decoration for removals in the diff editor.","Click to revert change"],"vs/editor/common/viewLayout/viewLineRenderer":["Show more ({0})","{0} chars"],"vs/editor/browser/widget/diffEditor/inlineDiffDeletedCodeMargin":["Copy deleted lines","Copy deleted line","Copy changed lines","Copy changed line","Copy deleted line ({0})","Copy changed line ({0})","Revert this change"],"vs/platform/actionWidget/browser/actionList":["{0} to apply, {1} to preview","{0} to apply","{0}, Disabled Reason: {1}","Action Widget"],"vs/editor/contrib/gotoSymbol/browser/peek/referencesTree":["{0} references","{0} reference","References"],"vs/workbench/browser/parts/editor/multiEditorTabsControl":["Tab actions"],"vs/workbench/browser/parts/editor/breadcrumbsControl":["Icon for the separator in the breadcrumbs.","Whether the editor can show breadcrumbs","Whether breadcrumbs are currently visible","Whether breadcrumbs have focus","no elements","Toggle Breadcrumbs","Toggle &&Breadcrumbs","Breadcrumbs","&&Breadcrumbs","Focus and Select Breadcrumbs","Focus Breadcrumbs"],"vs/workbench/browser/parts/compositeBar":["Active View Switcher"],"vs/platform/quickinput/browser/quickInputUtils":["Click to execute command \'{0}\'"],"vs/workbench/contrib/notebook/browser/diff/diffElementOutputs":["Choose a different output mimetype, available mimetypes: {0}","Cell has no output","No renderer could be found for output. It has the following mimetypes: {0}","Currently Active","Select mimetype to render for current output. Rich mimetypes are available only when the notebook is trusted","Select mimetype to render for current output","built-in"],"vs/workbench/contrib/notebook/browser/view/cellParts/cellEditorOptions":["Controls the display of line numbers in the cell editor.","Toggle Notebook Line Numbers","Notebook Line Numbers","Show Cell Line Numbers"],"vs/workbench/contrib/notebook/browser/view/cellParts/codeCell":["Double-click to expand cell input ({0})","Expand Cell Input ({0})"],"vs/workbench/contrib/notebook/browser/view/cellParts/codeCellRunToolbar":["More..."],"vs/workbench/contrib/notebook/browser/view/cellParts/collapsedCellOutput":["Outputs are collapsed","Double-click to expand cell output ({0})","Expand Cell Output (${0})"],"vs/workbench/contrib/notebook/browser/view/cellParts/foldedCellHint":["1 cell hidden","{0} cells hidden"],"vs/workbench/contrib/notebook/browser/view/cellParts/markupCell":["Double-click to expand cell input ({0})","Expand Cell Input ({0})"],"vs/workbench/services/suggest/browser/simpleSuggestWidget":["Suggest","{0}{1}, {2}","{0}{1}","{0}, {1}","{0}, docs: {1}"],"vs/workbench/contrib/comments/browser/commentThreadWidget":["Comment","{0}, use ({1}) for accessibility help","{0}, run the command Open Accessibility Help which is currently not triggerable via keybinding."],"vs/workbench/contrib/terminal/browser/terminalProcessManager":["Could not kill process listening on port {0}, command exited with error {1}","Restarting the terminal because the connection to the shell process was lost..."],"vs/workbench/contrib/terminal/browser/terminalRunRecentQuickPick":["Remove from Command History","View Command Output","Select a command to run (hold Option-key to edit the command)","Select a command to run (hold Alt-key to edit the command)","{0} history","Select a directory to go to (hold Option-key to edit the command)","Select a directory to go to (hold Alt-key to edit the command)"],"vs/workbench/browser/parts/editor/editorTabsControl":["Editor actions","{0} (+{1})"],"vs/workbench/browser/parts/editor/breadcrumbs":["Breadcrumb Navigation","Enable/disable navigation breadcrumbs.","Controls whether and how file paths are shown in the breadcrumbs view.","Show the file path in the breadcrumbs view.","Do not show the file path in the breadcrumbs view.","Only show the last element of the file path in the breadcrumbs view.","Controls whether and how symbols are shown in the breadcrumbs view.","Show all symbols in the breadcrumbs view.","Do not show symbols in the breadcrumbs view.","Only show the current symbol in the breadcrumbs view.","Controls how symbols are sorted in the breadcrumbs outline view.","Show symbol outline in file position order.","Show symbol outline in alphabetical order.","Show symbol outline in symbol type order.","Render breadcrumb items with icons.","When enabled breadcrumbs show `file`-symbols.","When enabled breadcrumbs show `module`-symbols.","When enabled breadcrumbs show `namespace`-symbols.","When enabled breadcrumbs show `package`-symbols.","When enabled breadcrumbs show `class`-symbols.","When enabled breadcrumbs show `method`-symbols.","When enabled breadcrumbs show `property`-symbols.","When enabled breadcrumbs show `field`-symbols.","When enabled breadcrumbs show `constructor`-symbols.","When enabled breadcrumbs show `enum`-symbols.","When enabled breadcrumbs show `interface`-symbols.","When enabled breadcrumbs show `function`-symbols.","When enabled breadcrumbs show `variable`-symbols.","When enabled breadcrumbs show `constant`-symbols.","When enabled breadcrumbs show `string`-symbols.","When enabled breadcrumbs show `number`-symbols.","When enabled breadcrumbs show `boolean`-symbols.","When enabled breadcrumbs show `array`-symbols.","When enabled breadcrumbs show `object`-symbols.","When enabled breadcrumbs show `key`-symbols.","When enabled breadcrumbs show `null`-symbols.","When enabled breadcrumbs show `enumMember`-symbols.","When enabled breadcrumbs show `struct`-symbols.","When enabled breadcrumbs show `event`-symbols.","When enabled breadcrumbs show `operator`-symbols.","When enabled breadcrumbs show `typeParameter`-symbols."],"vs/workbench/browser/parts/editor/breadcrumbsPicker":["Breadcrumbs"],"vs/workbench/contrib/notebook/browser/view/cellParts/cellOutput":["Cell has no output","No renderer could be found for output. It has the following mimetypes: {0}","Change Presentation","Currently Active","Install additional renderers from the marketplace","Select mimetype to render for current output","Select mimetype to render for current output","renderer not available"],"vs/workbench/contrib/notebook/browser/view/cellParts/codeCellExecutionIcon":["Success","Failed","Pending","Executing"],"vs/workbench/contrib/comments/browser/commentThreadBody":["Comment thread with {0} comments on lines {1} through {2}. {3}.","Comment thread with {0} comments on the entire document. {1}.","Comment thread with {0} comments. {1}."],"vs/workbench/contrib/comments/browser/commentThreadHeader":["Icon to collapse a review comment.","Collapse","Start discussion"],"vs/workbench/contrib/terminal/browser/environmentVariableInfo":["The following extensions want to relaunch the terminal to contribute to its environment:","Relaunch terminal","The following extensions have contributed to this terminal\'s environment:","Show environment contributions","workspace"],"vs/workbench/contrib/comments/browser/commentNode":["Toggle Reaction","Toggling the comment reaction failed: {0}.","Toggling the comment reaction failed","Deleting the comment reaction failed: {0}.","Deleting the comment reaction failed","Deleting the comment reaction failed: {0}.","Deleting the comment reaction failed"],"vs/workbench/contrib/comments/browser/reactionsAction":["Pick Reactions...","Toggle reaction, ","{0}{1} reaction","{0}1 reaction with {1}","{0}{1} reactions with {2}"]},"bundles":{"vs/workbench/workbench.desktop.main":["vs/base/browser/ui/actionbar/actionViewItems","vs/base/browser/ui/button/button","vs/base/browser/ui/dialog/dialog","vs/base/browser/ui/dropdown/dropdownActionViewItem","vs/base/browser/ui/findinput/findInput","vs/base/browser/ui/findinput/findInputToggles","vs/base/browser/ui/findinput/replaceInput","vs/base/browser/ui/hover/hoverWidget","vs/base/browser/ui/iconLabel/iconLabelHover","vs/base/browser/ui/icons/iconSelectBox","vs/base/browser/ui/inputbox/inputBox","vs/base/browser/ui/keybindingLabel/keybindingLabel","vs/base/browser/ui/menu/menubar","vs/base/browser/ui/selectBox/selectBoxCustom","vs/base/browser/ui/splitview/paneview","vs/base/browser/ui/toolbar/toolbar","vs/base/browser/ui/tree/abstractTree","vs/base/browser/ui/tree/treeDefaults","vs/base/common/actions","vs/base/common/date","vs/base/common/errorMessage","vs/base/common/jsonErrorMessages","vs/base/common/keybindingLabels","vs/base/common/platform","vs/editor/browser/controller/textAreaHandler","vs/editor/browser/coreCommands","vs/editor/browser/editorExtensions","vs/editor/browser/widget/codeEditorWidget","vs/editor/browser/widget/diffEditor/accessibleDiffViewer","vs/editor/browser/widget/diffEditor/colors","vs/editor/browser/widget/diffEditor/decorations","vs/editor/browser/widget/diffEditor/diffEditor.contribution","vs/editor/browser/widget/diffEditor/diffEditorEditors","vs/editor/browser/widget/diffEditor/hideUnchangedRegionsFeature","vs/editor/browser/widget/diffEditor/inlineDiffDeletedCodeMargin","vs/editor/browser/widget/diffEditor/movedBlocksLines","vs/editor/common/config/editorConfigurationSchema","vs/editor/common/config/editorOptions","vs/editor/common/core/editorColorRegistry","vs/editor/common/editorContextKeys","vs/editor/common/languages","vs/editor/common/languages/modesRegistry","vs/editor/common/model/editStack","vs/editor/common/standaloneStrings","vs/editor/common/viewLayout/viewLineRenderer","vs/editor/contrib/anchorSelect/browser/anchorSelect","vs/editor/contrib/bracketMatching/browser/bracketMatching","vs/editor/contrib/caretOperations/browser/caretOperations","vs/editor/contrib/caretOperations/browser/transpose","vs/editor/contrib/clipboard/browser/clipboard","vs/editor/contrib/codeAction/browser/codeAction","vs/editor/contrib/codeAction/browser/codeActionCommands","vs/editor/contrib/codeAction/browser/codeActionContributions","vs/editor/contrib/codeAction/browser/codeActionController","vs/editor/contrib/codeAction/browser/codeActionMenu","vs/editor/contrib/codeAction/browser/lightBulbWidget","vs/editor/contrib/codelens/browser/codelensController","vs/editor/contrib/colorPicker/browser/colorPickerWidget","vs/editor/contrib/colorPicker/browser/standaloneColorPickerActions","vs/editor/contrib/comment/browser/comment","vs/editor/contrib/contextmenu/browser/contextmenu","vs/editor/contrib/cursorUndo/browser/cursorUndo","vs/editor/contrib/dropOrPasteInto/browser/copyPasteContribution","vs/editor/contrib/dropOrPasteInto/browser/copyPasteController","vs/editor/contrib/dropOrPasteInto/browser/defaultProviders","vs/editor/contrib/dropOrPasteInto/browser/dropIntoEditorContribution","vs/editor/contrib/dropOrPasteInto/browser/dropIntoEditorController","vs/editor/contrib/editorState/browser/keybindingCancellation","vs/editor/contrib/find/browser/findController","vs/editor/contrib/find/browser/findWidget","vs/editor/contrib/folding/browser/folding","vs/editor/contrib/folding/browser/foldingDecorations","vs/editor/contrib/fontZoom/browser/fontZoom","vs/editor/contrib/format/browser/formatActions","vs/editor/contrib/gotoError/browser/gotoError","vs/editor/contrib/gotoError/browser/gotoErrorWidget","vs/editor/contrib/gotoSymbol/browser/goToCommands","vs/editor/contrib/gotoSymbol/browser/link/goToDefinitionAtPosition","vs/editor/contrib/gotoSymbol/browser/peek/referencesController","vs/editor/contrib/gotoSymbol/browser/peek/referencesTree","vs/editor/contrib/gotoSymbol/browser/peek/referencesWidget","vs/editor/contrib/gotoSymbol/browser/referencesModel","vs/editor/contrib/gotoSymbol/browser/symbolNavigation","vs/editor/contrib/hover/browser/hover","vs/editor/contrib/hover/browser/markdownHoverParticipant","vs/editor/contrib/hover/browser/markerHoverParticipant","vs/editor/contrib/inPlaceReplace/browser/inPlaceReplace","vs/editor/contrib/indentation/browser/indentation","vs/editor/contrib/inlayHints/browser/inlayHintsHover","vs/editor/contrib/inlineCompletions/browser/commands","vs/editor/contrib/inlineCompletions/browser/hoverParticipant","vs/editor/contrib/inlineCompletions/browser/inlineCompletionContextKeys","vs/editor/contrib/inlineCompletions/browser/inlineCompletionsController","vs/editor/contrib/inlineCompletions/browser/inlineCompletionsHintsWidget","vs/editor/contrib/lineSelection/browser/lineSelection","vs/editor/contrib/linesOperations/browser/linesOperations","vs/editor/contrib/linkedEditing/browser/linkedEditing","vs/editor/contrib/links/browser/links","vs/editor/contrib/message/browser/messageController","vs/editor/contrib/multicursor/browser/multicursor","vs/editor/contrib/parameterHints/browser/parameterHints","vs/editor/contrib/parameterHints/browser/parameterHintsWidget","vs/editor/contrib/peekView/browser/peekView","vs/editor/contrib/quickAccess/browser/gotoLineQuickAccess","vs/editor/contrib/quickAccess/browser/gotoSymbolQuickAccess","vs/editor/contrib/readOnlyMessage/browser/contribution","vs/editor/contrib/rename/browser/rename","vs/editor/contrib/rename/browser/renameInputField","vs/editor/contrib/smartSelect/browser/smartSelect","vs/editor/contrib/snippet/browser/snippetController2","vs/editor/contrib/snippet/browser/snippetVariables","vs/editor/contrib/stickyScroll/browser/stickyScrollActions","vs/editor/contrib/suggest/browser/suggest","vs/editor/contrib/suggest/browser/suggestController","vs/editor/contrib/suggest/browser/suggestWidget","vs/editor/contrib/suggest/browser/suggestWidgetDetails","vs/editor/contrib/suggest/browser/suggestWidgetRenderer","vs/editor/contrib/suggest/browser/suggestWidgetStatus","vs/editor/contrib/symbolIcons/browser/symbolIcons","vs/editor/contrib/toggleTabFocusMode/browser/toggleTabFocusMode","vs/editor/contrib/tokenization/browser/tokenization","vs/editor/contrib/unicodeHighlighter/browser/unicodeHighlighter","vs/editor/contrib/unusualLineTerminators/browser/unusualLineTerminators","vs/editor/contrib/wordHighlighter/browser/highlightDecorations","vs/editor/contrib/wordHighlighter/browser/wordHighlighter","vs/editor/contrib/wordOperations/browser/wordOperations","vs/platform/action/common/actionCommonCategories","vs/platform/actionWidget/browser/actionList","vs/platform/actionWidget/browser/actionWidget","vs/platform/actions/browser/buttonbar","vs/platform/actions/browser/menuEntryActionViewItem","vs/platform/actions/browser/toolbar","vs/platform/actions/common/menuResetAction","vs/platform/actions/common/menuService","vs/platform/audioCues/browser/audioCueService","vs/platform/configuration/common/configurationRegistry","vs/platform/contextkey/browser/contextKeyService","vs/platform/contextkey/common/contextkey","vs/platform/contextkey/common/contextkeys","vs/platform/contextkey/common/scanner","vs/platform/dialogs/common/dialogs","vs/platform/dnd/browser/dnd","vs/platform/extensionManagement/common/extensionManagement","vs/platform/extensionManagement/common/extensionManagementCLI","vs/platform/extensionManagement/common/extensionNls","vs/platform/extensionManagement/common/extensionsScannerService","vs/platform/extensions/common/extensionValidator","vs/platform/files/browser/htmlFileSystemProvider","vs/platform/files/common/fileService","vs/platform/files/common/files","vs/platform/files/common/io","vs/platform/history/browser/contextScopedHistoryWidget","vs/platform/keybinding/common/abstractKeybindingService","vs/platform/keyboardLayout/common/keyboardConfig","vs/platform/languagePacks/common/languagePacks","vs/platform/languagePacks/common/localizedStrings","vs/platform/list/browser/listService","vs/platform/markers/common/markers","vs/platform/quickinput/browser/commandsQuickAccess","vs/platform/quickinput/browser/helpQuickAccess","vs/platform/quickinput/browser/quickInput","vs/platform/quickinput/browser/quickInputController","vs/platform/quickinput/browser/quickInputList","vs/platform/quickinput/browser/quickInputUtils","vs/platform/quickinput/browser/quickPickPin","vs/platform/remoteTunnel/common/remoteTunnel","vs/platform/request/common/request","vs/platform/telemetry/common/telemetryService","vs/platform/terminal/common/terminalLogService","vs/platform/terminal/common/terminalPlatformConfiguration","vs/platform/terminal/common/terminalProfiles","vs/platform/theme/common/colorRegistry","vs/platform/theme/common/iconRegistry","vs/platform/theme/common/tokenClassificationRegistry","vs/platform/undoRedo/common/undoRedoService","vs/platform/update/common/update.config.contribution","vs/platform/userDataProfile/common/userDataProfile","vs/platform/userDataSync/common/abstractSynchronizer","vs/platform/userDataSync/common/userDataSync","vs/platform/userDataSync/common/userDataSyncLog","vs/platform/userDataSync/common/userDataSyncMachines","vs/platform/workspace/common/workspace","vs/platform/workspace/common/workspaceTrust","vs/workbench/api/browser/mainThreadAuthentication","vs/workbench/api/browser/mainThreadCLICommands","vs/workbench/api/browser/mainThreadComments","vs/workbench/api/browser/mainThreadCustomEditors","vs/workbench/api/browser/mainThreadEditSessionIdentityParticipant","vs/workbench/api/browser/mainThreadExtensionService","vs/workbench/api/browser/mainThreadFileSystemEventService","vs/workbench/api/browser/mainThreadMessageService","vs/workbench/api/browser/mainThreadNotebookSaveParticipant","vs/workbench/api/browser/mainThreadProgress","vs/workbench/api/browser/mainThreadSaveParticipant","vs/workbench/api/browser/mainThreadTask","vs/workbench/api/browser/mainThreadTunnelService","vs/workbench/api/browser/mainThreadUriOpeners","vs/workbench/api/browser/mainThreadWebviews","vs/workbench/api/browser/mainThreadWorkspace","vs/workbench/api/browser/statusBarExtensionPoint","vs/workbench/api/browser/viewsExtensionPoint","vs/workbench/api/common/configurationExtensionPoint","vs/workbench/api/common/extHostTunnelService","vs/workbench/api/common/jsonValidationExtensionPoint","vs/workbench/browser/actions/developerActions","vs/workbench/browser/actions/helpActions","vs/workbench/browser/actions/layoutActions","vs/workbench/browser/actions/navigationActions","vs/workbench/browser/actions/quickAccessActions","vs/workbench/browser/actions/textInputActions","vs/workbench/browser/actions/windowActions","vs/workbench/browser/actions/workspaceActions","vs/workbench/browser/actions/workspaceCommands","vs/workbench/browser/editor","vs/workbench/browser/parts/activitybar/activitybarPart","vs/workbench/browser/parts/auxiliarybar/auxiliaryBarActions","vs/workbench/browser/parts/auxiliarybar/auxiliaryBarPart","vs/workbench/browser/parts/banner/bannerPart","vs/workbench/browser/parts/compositeBar","vs/workbench/browser/parts/compositeBarActions","vs/workbench/browser/parts/compositePart","vs/workbench/browser/parts/dialogs/dialogHandler","vs/workbench/browser/parts/editor/binaryDiffEditor","vs/workbench/browser/parts/editor/binaryEditor","vs/workbench/browser/parts/editor/breadcrumbs","vs/workbench/browser/parts/editor/breadcrumbsControl","vs/workbench/browser/parts/editor/breadcrumbsPicker","vs/workbench/browser/parts/editor/editor.contribution","vs/workbench/browser/parts/editor/editorActions","vs/workbench/browser/parts/editor/editorCommands","vs/workbench/browser/parts/editor/editorConfiguration","vs/workbench/browser/parts/editor/editorDropTarget","vs/workbench/browser/parts/editor/editorGroupView","vs/workbench/browser/parts/editor/editorGroupWatermark","vs/workbench/browser/parts/editor/editorPanes","vs/workbench/browser/parts/editor/editorParts","vs/workbench/browser/parts/editor/editorPlaceholder","vs/workbench/browser/parts/editor/editorQuickAccess","vs/workbench/browser/parts/editor/editorStatus","vs/workbench/browser/parts/editor/editorTabsControl","vs/workbench/browser/parts/editor/multiEditorTabsControl","vs/workbench/browser/parts/editor/sideBySideEditor","vs/workbench/browser/parts/editor/textCodeEditor","vs/workbench/browser/parts/editor/textDiffEditor","vs/workbench/browser/parts/editor/textEditor","vs/workbench/browser/parts/globalCompositeBar","vs/workbench/browser/parts/notifications/notificationsActions","vs/workbench/browser/parts/notifications/notificationsAlerts","vs/workbench/browser/parts/notifications/notificationsCenter","vs/workbench/browser/parts/notifications/notificationsCommands","vs/workbench/browser/parts/notifications/notificationsList","vs/workbench/browser/parts/notifications/notificationsStatus","vs/workbench/browser/parts/notifications/notificationsToasts","vs/workbench/browser/parts/notifications/notificationsViewer","vs/workbench/browser/parts/paneCompositeBar","vs/workbench/browser/parts/paneCompositePart","vs/workbench/browser/parts/panel/panelActions","vs/workbench/browser/parts/panel/panelPart","vs/workbench/browser/parts/sidebar/sidebarActions","vs/workbench/browser/parts/sidebar/sidebarPart","vs/workbench/browser/parts/statusbar/statusbarActions","vs/workbench/browser/parts/statusbar/statusbarPart","vs/workbench/browser/parts/titlebar/commandCenterControl","vs/workbench/browser/parts/titlebar/menubarControl","vs/workbench/browser/parts/titlebar/titlebarPart","vs/workbench/browser/parts/titlebar/windowTitle","vs/workbench/browser/parts/views/checkbox","vs/workbench/browser/parts/views/treeView","vs/workbench/browser/parts/views/viewFilter","vs/workbench/browser/parts/views/viewPane","vs/workbench/browser/parts/views/viewPaneContainer","vs/workbench/browser/parts/views/viewsService","vs/workbench/browser/quickaccess","vs/workbench/browser/workbench","vs/workbench/browser/workbench.contribution","vs/workbench/common/configuration","vs/workbench/common/contextkeys","vs/workbench/common/editor","vs/workbench/common/editor/diffEditorInput","vs/workbench/common/editor/sideBySideEditorInput","vs/workbench/common/editor/textEditorModel","vs/workbench/common/theme","vs/workbench/common/views","vs/workbench/contrib/accessibility/browser/accessibilityConfiguration","vs/workbench/contrib/accessibility/browser/accessibilityContributions","vs/workbench/contrib/accessibility/browser/accessibilityStatus","vs/workbench/contrib/accessibility/browser/accessibleNotificationService","vs/workbench/contrib/accessibility/browser/accessibleView","vs/workbench/contrib/accessibility/browser/accessibleViewActions","vs/workbench/contrib/accountEntitlements/browser/accountsEntitlements.contribution","vs/workbench/contrib/audioCues/browser/audioCues.contribution","vs/workbench/contrib/audioCues/browser/commands","vs/workbench/contrib/bulkEdit/browser/bulkEditService","vs/workbench/contrib/bulkEdit/browser/preview/bulkEdit.contribution","vs/workbench/contrib/bulkEdit/browser/preview/bulkEditPane","vs/workbench/contrib/bulkEdit/browser/preview/bulkEditPreview","vs/workbench/contrib/bulkEdit/browser/preview/bulkEditTree","vs/workbench/contrib/callHierarchy/browser/callHierarchy.contribution","vs/workbench/contrib/callHierarchy/browser/callHierarchyPeek","vs/workbench/contrib/callHierarchy/browser/callHierarchyTree","vs/workbench/contrib/chat/browser/actions/chatAccessibilityHelp","vs/workbench/contrib/chat/browser/actions/chatActions","vs/workbench/contrib/chat/browser/actions/chatClearActions","vs/workbench/contrib/chat/browser/actions/chatCodeblockActions","vs/workbench/contrib/chat/browser/actions/chatCopyActions","vs/workbench/contrib/chat/browser/actions/chatExecuteActions","vs/workbench/contrib/chat/browser/actions/chatFileTreeActions","vs/workbench/contrib/chat/browser/actions/chatImportExport","vs/workbench/contrib/chat/browser/actions/chatMoveActions","vs/workbench/contrib/chat/browser/actions/chatQuickInputActions","vs/workbench/contrib/chat/browser/actions/chatTitleActions","vs/workbench/contrib/chat/browser/chat.contribution","vs/workbench/contrib/chat/browser/chatContributionServiceImpl","vs/workbench/contrib/chat/browser/chatEditorInput","vs/workbench/contrib/chat/browser/chatInputPart","vs/workbench/contrib/chat/browser/chatListRenderer","vs/workbench/contrib/chat/browser/chatSlashCommandContentWidget","vs/workbench/contrib/chat/browser/codeBlockPart","vs/workbench/contrib/chat/browser/contrib/chatInputEditorContrib","vs/workbench/contrib/chat/common/chatColors","vs/workbench/contrib/chat/common/chatContextKeys","vs/workbench/contrib/chat/common/chatServiceImpl","vs/workbench/contrib/chat/electron-sandbox/actions/voiceChatActions","vs/workbench/contrib/codeActions/browser/codeActionsContribution","vs/workbench/contrib/codeActions/common/codeActionsExtensionPoint","vs/workbench/contrib/codeActions/common/documentationExtensionPoint","vs/workbench/contrib/codeEditor/browser/accessibility/accessibility","vs/workbench/contrib/codeEditor/browser/diffEditorHelper","vs/workbench/contrib/codeEditor/browser/emptyTextEditorHint/emptyTextEditorHint","vs/workbench/contrib/codeEditor/browser/find/simpleFindWidget","vs/workbench/contrib/codeEditor/browser/inspectEditorTokens/inspectEditorTokens","vs/workbench/contrib/codeEditor/browser/inspectKeybindings","vs/workbench/contrib/codeEditor/browser/languageConfigurationExtensionPoint","vs/workbench/contrib/codeEditor/browser/largeFileOptimizations","vs/workbench/contrib/codeEditor/browser/outline/documentSymbolsOutline","vs/workbench/contrib/codeEditor/browser/outline/documentSymbolsTree","vs/workbench/contrib/codeEditor/browser/quickaccess/gotoLineQuickAccess","vs/workbench/contrib/codeEditor/browser/quickaccess/gotoSymbolQuickAccess","vs/workbench/contrib/codeEditor/browser/saveParticipants","vs/workbench/contrib/codeEditor/browser/toggleColumnSelection","vs/workbench/contrib/codeEditor/browser/toggleMinimap","vs/workbench/contrib/codeEditor/browser/toggleMultiCursorModifier","vs/workbench/contrib/codeEditor/browser/toggleRenderControlCharacter","vs/workbench/contrib/codeEditor/browser/toggleRenderWhitespace","vs/workbench/contrib/codeEditor/browser/toggleWordWrap","vs/workbench/contrib/codeEditor/electron-sandbox/selectionClipboard","vs/workbench/contrib/codeEditor/electron-sandbox/startDebugTextMate","vs/workbench/contrib/commands/common/commands.contribution","vs/workbench/contrib/comments/browser/commentColors","vs/workbench/contrib/comments/browser/commentGlyphWidget","vs/workbench/contrib/comments/browser/commentNode","vs/workbench/contrib/comments/browser/commentReply","vs/workbench/contrib/comments/browser/commentThreadBody","vs/workbench/contrib/comments/browser/commentThreadHeader","vs/workbench/contrib/comments/browser/commentThreadWidget","vs/workbench/contrib/comments/browser/comments.contribution","vs/workbench/contrib/comments/browser/commentsController","vs/workbench/contrib/comments/browser/commentsEditorContribution","vs/workbench/contrib/comments/browser/commentsTreeViewer","vs/workbench/contrib/comments/browser/commentsView","vs/workbench/contrib/comments/browser/commentsViewActions","vs/workbench/contrib/comments/browser/reactionsAction","vs/workbench/contrib/comments/common/commentContextKeys","vs/workbench/contrib/comments/common/commentModel","vs/workbench/contrib/customEditor/common/contributedCustomEditors","vs/workbench/contrib/customEditor/common/customEditor","vs/workbench/contrib/customEditor/common/extensionPoint","vs/workbench/contrib/debug/browser/baseDebugView","vs/workbench/contrib/debug/browser/breakpointEditorContribution","vs/workbench/contrib/debug/browser/breakpointWidget","vs/workbench/contrib/debug/browser/breakpointsView","vs/workbench/contrib/debug/browser/callStackEditorContribution","vs/workbench/contrib/debug/browser/callStackView","vs/workbench/contrib/debug/browser/debug.contribution","vs/workbench/contrib/debug/browser/debugActionViewItems","vs/workbench/contrib/debug/browser/debugAdapterManager","vs/workbench/contrib/debug/browser/debugColors","vs/workbench/contrib/debug/browser/debugCommands","vs/workbench/contrib/debug/browser/debugConfigurationManager","vs/workbench/contrib/debug/browser/debugConsoleQuickAccess","vs/workbench/contrib/debug/browser/debugEditorActions","vs/workbench/contrib/debug/browser/debugEditorContribution","vs/workbench/contrib/debug/browser/debugHover","vs/workbench/contrib/debug/browser/debugIcons","vs/workbench/contrib/debug/browser/debugQuickAccess","vs/workbench/contrib/debug/browser/debugService","vs/workbench/contrib/debug/browser/debugSession","vs/workbench/contrib/debug/browser/debugSessionPicker","vs/workbench/contrib/debug/browser/debugStatus","vs/workbench/contrib/debug/browser/debugTaskRunner","vs/workbench/contrib/debug/browser/debugToolBar","vs/workbench/contrib/debug/browser/debugViewlet","vs/workbench/contrib/debug/browser/disassemblyView","vs/workbench/contrib/debug/browser/exceptionWidget","vs/workbench/contrib/debug/browser/linkDetector","vs/workbench/contrib/debug/browser/loadedScriptsView","vs/workbench/contrib/debug/browser/rawDebugSession","vs/workbench/contrib/debug/browser/repl","vs/workbench/contrib/debug/browser/replViewer","vs/workbench/contrib/debug/browser/statusbarColorProvider","vs/workbench/contrib/debug/browser/variablesView","vs/workbench/contrib/debug/browser/watchExpressionsView","vs/workbench/contrib/debug/browser/welcomeView","vs/workbench/contrib/debug/common/abstractDebugAdapter","vs/workbench/contrib/debug/common/debug","vs/workbench/contrib/debug/common/debugContentProvider","vs/workbench/contrib/debug/common/debugLifecycle","vs/workbench/contrib/debug/common/debugModel","vs/workbench/contrib/debug/common/debugSchemas","vs/workbench/contrib/debug/common/debugSource","vs/workbench/contrib/debug/common/debugger","vs/workbench/contrib/debug/common/disassemblyViewInput","vs/workbench/contrib/debug/common/loadedScriptsPicker","vs/workbench/contrib/debug/common/replModel","vs/workbench/contrib/deprecatedExtensionMigrator/browser/deprecatedExtensionMigrator.contribution","vs/workbench/contrib/editSessions/browser/editSessions.contribution","vs/workbench/contrib/editSessions/browser/editSessionsStorageService","vs/workbench/contrib/editSessions/browser/editSessionsViews","vs/workbench/contrib/editSessions/common/editSessions","vs/workbench/contrib/editSessions/common/editSessionsLogService","vs/workbench/contrib/emmet/browser/actions/expandAbbreviation","vs/workbench/contrib/extensions/browser/abstractRuntimeExtensionsEditor","vs/workbench/contrib/extensions/browser/configBasedRecommendations","vs/workbench/contrib/extensions/browser/deprecatedExtensionsChecker","vs/workbench/contrib/extensions/browser/exeBasedRecommendations","vs/workbench/contrib/extensions/browser/extensionEditor","vs/workbench/contrib/extensions/browser/extensionEnablementWorkspaceTrustTransitionParticipant","vs/workbench/contrib/extensions/browser/extensionRecommendationNotificationService","vs/workbench/contrib/extensions/browser/extensions.contribution","vs/workbench/contrib/extensions/browser/extensionsActions","vs/workbench/contrib/extensions/browser/extensionsActivationProgress","vs/workbench/contrib/extensions/browser/extensionsCompletionItemsProvider","vs/workbench/contrib/extensions/browser/extensionsDependencyChecker","vs/workbench/contrib/extensions/browser/extensionsIcons","vs/workbench/contrib/extensions/browser/extensionsQuickAccess","vs/workbench/contrib/extensions/browser/extensionsViewer","vs/workbench/contrib/extensions/browser/extensionsViewlet","vs/workbench/contrib/extensions/browser/extensionsViews","vs/workbench/contrib/extensions/browser/extensionsWidgets","vs/workbench/contrib/extensions/browser/extensionsWorkbenchService","vs/workbench/contrib/extensions/browser/fileBasedRecommendations","vs/workbench/contrib/extensions/browser/webRecommendations","vs/workbench/contrib/extensions/browser/workspaceRecommendations","vs/workbench/contrib/extensions/common/extensionsFileTemplate","vs/workbench/contrib/extensions/common/extensionsInput","vs/workbench/contrib/extensions/common/extensionsUtils","vs/workbench/contrib/extensions/common/reportExtensionIssueAction","vs/workbench/contrib/extensions/common/runtimeExtensionsInput","vs/workbench/contrib/extensions/electron-sandbox/debugExtensionHostAction","vs/workbench/contrib/extensions/electron-sandbox/extensionProfileService","vs/workbench/contrib/extensions/electron-sandbox/extensions.contribution","vs/workbench/contrib/extensions/electron-sandbox/extensionsActions","vs/workbench/contrib/extensions/electron-sandbox/extensionsAutoProfiler","vs/workbench/contrib/extensions/electron-sandbox/extensionsSlowActions","vs/workbench/contrib/extensions/electron-sandbox/runtimeExtensionsEditor","vs/workbench/contrib/externalTerminal/browser/externalTerminal.contribution","vs/workbench/contrib/externalTerminal/electron-sandbox/externalTerminal.contribution","vs/workbench/contrib/externalUriOpener/common/configuration","vs/workbench/contrib/externalUriOpener/common/externalUriOpenerService","vs/workbench/contrib/files/browser/editors/binaryFileEditor","vs/workbench/contrib/files/browser/editors/textFileEditor","vs/workbench/contrib/files/browser/editors/textFileSaveErrorHandler","vs/workbench/contrib/files/browser/explorerViewlet","vs/workbench/contrib/files/browser/fileActions","vs/workbench/contrib/files/browser/fileActions.contribution","vs/workbench/contrib/files/browser/fileCommands","vs/workbench/contrib/files/browser/fileConstants","vs/workbench/contrib/files/browser/fileImportExport","vs/workbench/contrib/files/browser/files.contribution","vs/workbench/contrib/files/browser/views/explorerDecorationsProvider","vs/workbench/contrib/files/browser/views/explorerView","vs/workbench/contrib/files/browser/views/explorerViewer","vs/workbench/contrib/files/browser/views/openEditorsView","vs/workbench/contrib/files/browser/workspaceWatcher","vs/workbench/contrib/files/common/dirtyFilesIndicator","vs/workbench/contrib/files/common/files","vs/workbench/contrib/files/electron-sandbox/fileActions.contribution","vs/workbench/contrib/folding/browser/folding.contribution","vs/workbench/contrib/format/browser/formatActionsMultiple","vs/workbench/contrib/format/browser/formatActionsNone","vs/workbench/contrib/format/browser/formatModified","vs/workbench/contrib/inlayHints/browser/inlayHintsAccessibilty","vs/workbench/contrib/inlineChat/browser/inlineChatActions","vs/workbench/contrib/inlineChat/browser/inlineChatController","vs/workbench/contrib/inlineChat/browser/inlineChatDecorations","vs/workbench/contrib/inlineChat/browser/inlineChatStrategies","vs/workbench/contrib/inlineChat/browser/inlineChatWidget","vs/workbench/contrib/inlineChat/common/inlineChat","vs/workbench/contrib/interactive/browser/interactive.contribution","vs/workbench/contrib/interactive/browser/interactiveEditor","vs/workbench/contrib/issue/common/issue.contribution","vs/workbench/contrib/issue/electron-sandbox/issue.contribution","vs/workbench/contrib/keybindings/browser/keybindings.contribution","vs/workbench/contrib/languageDetection/browser/languageDetection.contribution","vs/workbench/contrib/languageStatus/browser/languageStatus.contribution","vs/workbench/contrib/limitIndicator/browser/limitIndicator.contribution","vs/workbench/contrib/localHistory/browser/localHistory","vs/workbench/contrib/localHistory/browser/localHistoryCommands","vs/workbench/contrib/localHistory/browser/localHistoryTimeline","vs/workbench/contrib/localHistory/electron-sandbox/localHistoryCommands","vs/workbench/contrib/localization/common/localization.contribution","vs/workbench/contrib/localization/common/localizationsActions","vs/workbench/contrib/localization/electron-sandbox/localization.contribution","vs/workbench/contrib/localization/electron-sandbox/minimalTranslations","vs/workbench/contrib/logs/common/logs.contribution","vs/workbench/contrib/logs/common/logsActions","vs/workbench/contrib/logs/electron-sandbox/logsActions","vs/workbench/contrib/markers/browser/markers.contribution","vs/workbench/contrib/markers/browser/markersFileDecorations","vs/workbench/contrib/markers/browser/markersTable","vs/workbench/contrib/markers/browser/markersTreeViewer","vs/workbench/contrib/markers/browser/markersView","vs/workbench/contrib/markers/browser/messages","vs/workbench/contrib/mergeEditor/browser/commands/commands","vs/workbench/contrib/mergeEditor/browser/commands/devCommands","vs/workbench/contrib/mergeEditor/browser/mergeEditor.contribution","vs/workbench/contrib/mergeEditor/browser/mergeEditorInput","vs/workbench/contrib/mergeEditor/browser/mergeEditorInputModel","vs/workbench/contrib/mergeEditor/browser/mergeMarkers/mergeMarkersController","vs/workbench/contrib/mergeEditor/browser/model/mergeEditorModel","vs/workbench/contrib/mergeEditor/browser/view/colors","vs/workbench/contrib/mergeEditor/browser/view/conflictActions","vs/workbench/contrib/mergeEditor/browser/view/editors/baseCodeEditorView","vs/workbench/contrib/mergeEditor/browser/view/editors/inputCodeEditorView","vs/workbench/contrib/mergeEditor/browser/view/editors/resultCodeEditorView","vs/workbench/contrib/mergeEditor/browser/view/mergeEditor","vs/workbench/contrib/mergeEditor/browser/view/viewModel","vs/workbench/contrib/mergeEditor/common/mergeEditor","vs/workbench/contrib/mergeEditor/electron-sandbox/devCommands","vs/workbench/contrib/notebook/browser/contrib/cellCommands/cellCommands","vs/workbench/contrib/notebook/browser/contrib/cellStatusBar/executionStatusBarItemController","vs/workbench/contrib/notebook/browser/contrib/cellStatusBar/statusBarProviders","vs/workbench/contrib/notebook/browser/contrib/clipboard/notebookClipboard","vs/workbench/contrib/notebook/browser/contrib/editorStatusBar/editorStatusBar","vs/workbench/contrib/notebook/browser/contrib/find/notebookFind","vs/workbench/contrib/notebook/browser/contrib/find/notebookFindReplaceWidget","vs/workbench/contrib/notebook/browser/contrib/find/notebookFindWidget","vs/workbench/contrib/notebook/browser/contrib/format/formatting","vs/workbench/contrib/notebook/browser/contrib/gettingStarted/notebookGettingStarted","vs/workbench/contrib/notebook/browser/contrib/layout/layoutActions","vs/workbench/contrib/notebook/browser/contrib/navigation/arrow","vs/workbench/contrib/notebook/browser/contrib/outline/notebookOutline","vs/workbench/contrib/notebook/browser/contrib/profile/notebookProfile","vs/workbench/contrib/notebook/browser/contrib/saveParticipants/saveParticipants","vs/workbench/contrib/notebook/browser/contrib/troubleshoot/layout","vs/workbench/contrib/notebook/browser/controller/cellOperations","vs/workbench/contrib/notebook/browser/controller/cellOutputActions","vs/workbench/contrib/notebook/browser/controller/coreActions","vs/workbench/contrib/notebook/browser/controller/editActions","vs/workbench/contrib/notebook/browser/controller/executeActions","vs/workbench/contrib/notebook/browser/controller/foldingController","vs/workbench/contrib/notebook/browser/controller/insertCellActions","vs/workbench/contrib/notebook/browser/controller/layoutActions","vs/workbench/contrib/notebook/browser/diff/diffElementOutputs","vs/workbench/contrib/notebook/browser/diff/notebookDiffActions","vs/workbench/contrib/notebook/browser/diff/notebookDiffEditor","vs/workbench/contrib/notebook/browser/notebook.contribution","vs/workbench/contrib/notebook/browser/notebookAccessibility","vs/workbench/contrib/notebook/browser/notebookEditor","vs/workbench/contrib/notebook/browser/notebookEditorWidget","vs/workbench/contrib/notebook/browser/notebookExtensionPoint","vs/workbench/contrib/notebook/browser/notebookIcons","vs/workbench/contrib/notebook/browser/services/notebookExecutionServiceImpl","vs/workbench/contrib/notebook/browser/services/notebookKernelHistoryServiceImpl","vs/workbench/contrib/notebook/browser/services/notebookKeymapServiceImpl","vs/workbench/contrib/notebook/browser/services/notebookLoggingServiceImpl","vs/workbench/contrib/notebook/browser/services/notebookServiceImpl","vs/workbench/contrib/notebook/browser/view/cellParts/cellEditorOptions","vs/workbench/contrib/notebook/browser/view/cellParts/cellOutput","vs/workbench/contrib/notebook/browser/view/cellParts/codeCell","vs/workbench/contrib/notebook/browser/view/cellParts/codeCellExecutionIcon","vs/workbench/contrib/notebook/browser/view/cellParts/codeCellRunToolbar","vs/workbench/contrib/notebook/browser/view/cellParts/collapsedCellOutput","vs/workbench/contrib/notebook/browser/view/cellParts/foldedCellHint","vs/workbench/contrib/notebook/browser/view/cellParts/markupCell","vs/workbench/contrib/notebook/browser/view/renderers/backLayerWebView","vs/workbench/contrib/notebook/browser/view/renderers/cellRenderer","vs/workbench/contrib/notebook/browser/viewModel/notebookOutlineEntryFactory","vs/workbench/contrib/notebook/browser/viewParts/notebookEditorStickyScroll","vs/workbench/contrib/notebook/browser/viewParts/notebookKernelQuickPickStrategy","vs/workbench/contrib/notebook/browser/viewParts/notebookKernelView","vs/workbench/contrib/notebook/common/notebookEditorInput","vs/workbench/contrib/outline/browser/outline.contribution","vs/workbench/contrib/outline/browser/outlineActions","vs/workbench/contrib/outline/browser/outlinePane","vs/workbench/contrib/output/browser/output.contribution","vs/workbench/contrib/output/browser/outputView","vs/workbench/contrib/performance/browser/performance.contribution","vs/workbench/contrib/performance/browser/perfviewEditor","vs/workbench/contrib/performance/electron-sandbox/performance.contribution","vs/workbench/contrib/performance/electron-sandbox/startupProfiler","vs/workbench/contrib/preferences/browser/keybindingWidgets","vs/workbench/contrib/preferences/browser/keybindingsEditor","vs/workbench/contrib/preferences/browser/keybindingsEditorContribution","vs/workbench/contrib/preferences/browser/preferences.contribution","vs/workbench/contrib/preferences/browser/preferencesActions","vs/workbench/contrib/preferences/browser/preferencesIcons","vs/workbench/contrib/preferences/browser/preferencesRenderers","vs/workbench/contrib/preferences/browser/preferencesWidgets","vs/workbench/contrib/preferences/browser/settingsEditor2","vs/workbench/contrib/preferences/browser/settingsEditorSettingIndicators","vs/workbench/contrib/preferences/browser/settingsLayout","vs/workbench/contrib/preferences/browser/settingsSearchMenu","vs/workbench/contrib/preferences/browser/settingsTree","vs/workbench/contrib/preferences/browser/settingsWidgets","vs/workbench/contrib/preferences/browser/tocTree","vs/workbench/contrib/preferences/common/preferencesContribution","vs/workbench/contrib/preferences/common/settingsEditorColorRegistry","vs/workbench/contrib/quickaccess/browser/commandsQuickAccess","vs/workbench/contrib/quickaccess/browser/quickAccess.contribution","vs/workbench/contrib/quickaccess/browser/viewQuickAccess","vs/workbench/contrib/relauncher/browser/relauncher.contribution","vs/workbench/contrib/remote/browser/explorerViewItems","vs/workbench/contrib/remote/browser/remote","vs/workbench/contrib/remote/browser/remoteExplorer","vs/workbench/contrib/remote/browser/remoteIcons","vs/workbench/contrib/remote/browser/remoteIndicator","vs/workbench/contrib/remote/browser/tunnelFactory","vs/workbench/contrib/remote/browser/tunnelView","vs/workbench/contrib/remote/common/remote.contribution","vs/workbench/contrib/remote/electron-sandbox/remote.contribution","vs/workbench/contrib/remoteTunnel/electron-sandbox/remoteTunnel.contribution","vs/workbench/contrib/sash/browser/sash.contribution","vs/workbench/contrib/scm/browser/activity","vs/workbench/contrib/scm/browser/dirtyDiffSwitcher","vs/workbench/contrib/scm/browser/dirtydiffDecorator","vs/workbench/contrib/scm/browser/menus","vs/workbench/contrib/scm/browser/scm.contribution","vs/workbench/contrib/scm/browser/scmRepositoriesViewPane","vs/workbench/contrib/scm/browser/scmSyncViewPane","vs/workbench/contrib/scm/browser/scmViewPane","vs/workbench/contrib/scm/browser/scmViewPaneContainer","vs/workbench/contrib/search/browser/anythingQuickAccess","vs/workbench/contrib/search/browser/patternInputWidget","vs/workbench/contrib/search/browser/quickTextSearch/textSearchQuickAccess","vs/workbench/contrib/search/browser/replaceService","vs/workbench/contrib/search/browser/search.contribution","vs/workbench/contrib/search/browser/searchActionsBase","vs/workbench/contrib/search/browser/searchActionsCopy","vs/workbench/contrib/search/browser/searchActionsFind","vs/workbench/contrib/search/browser/searchActionsNav","vs/workbench/contrib/search/browser/searchActionsRemoveReplace","vs/workbench/contrib/search/browser/searchActionsSymbol","vs/workbench/contrib/search/browser/searchActionsTextQuickAccess","vs/workbench/contrib/search/browser/searchActionsTopBar","vs/workbench/contrib/search/browser/searchFindInput","vs/workbench/contrib/search/browser/searchIcons","vs/workbench/contrib/search/browser/searchMessage","vs/workbench/contrib/search/browser/searchResultsView","vs/workbench/contrib/search/browser/searchView","vs/workbench/contrib/search/browser/searchWidget","vs/workbench/contrib/search/browser/symbolsQuickAccess","vs/workbench/contrib/searchEditor/browser/searchEditor","vs/workbench/contrib/searchEditor/browser/searchEditor.contribution","vs/workbench/contrib/searchEditor/browser/searchEditorInput","vs/workbench/contrib/searchEditor/browser/searchEditorSerialization","vs/workbench/contrib/share/browser/share.contribution","vs/workbench/contrib/share/browser/shareService","vs/workbench/contrib/snippets/browser/commands/abstractSnippetsActions","vs/workbench/contrib/snippets/browser/commands/configureSnippets","vs/workbench/contrib/snippets/browser/commands/fileTemplateSnippets","vs/workbench/contrib/snippets/browser/commands/insertSnippet","vs/workbench/contrib/snippets/browser/commands/surroundWithSnippet","vs/workbench/contrib/snippets/browser/snippetCodeActionProvider","vs/workbench/contrib/snippets/browser/snippetCompletionProvider","vs/workbench/contrib/snippets/browser/snippetPicker","vs/workbench/contrib/snippets/browser/snippets.contribution","vs/workbench/contrib/snippets/browser/snippetsFile","vs/workbench/contrib/snippets/browser/snippetsService","vs/workbench/contrib/speech/common/speechService","vs/workbench/contrib/surveys/browser/ces.contribution","vs/workbench/contrib/surveys/browser/languageSurveys.contribution","vs/workbench/contrib/surveys/browser/nps.contribution","vs/workbench/contrib/tasks/browser/abstractTaskService","vs/workbench/contrib/tasks/browser/runAutomaticTasks","vs/workbench/contrib/tasks/browser/task.contribution","vs/workbench/contrib/tasks/browser/taskQuickPick","vs/workbench/contrib/tasks/browser/taskTerminalStatus","vs/workbench/contrib/tasks/browser/tasksQuickAccess","vs/workbench/contrib/tasks/browser/terminalTaskSystem","vs/workbench/contrib/tasks/common/jsonSchemaCommon","vs/workbench/contrib/tasks/common/jsonSchema_v1","vs/workbench/contrib/tasks/common/jsonSchema_v2","vs/workbench/contrib/tasks/common/problemMatcher","vs/workbench/contrib/tasks/common/taskConfiguration","vs/workbench/contrib/tasks/common/taskDefinitionRegistry","vs/workbench/contrib/tasks/common/taskService","vs/workbench/contrib/tasks/common/taskTemplates","vs/workbench/contrib/tasks/common/tasks","vs/workbench/contrib/tasks/electron-sandbox/taskService","vs/workbench/contrib/terminal/browser/baseTerminalBackend","vs/workbench/contrib/terminal/browser/environmentVariableInfo","vs/workbench/contrib/terminal/browser/terminal.contribution","vs/workbench/contrib/terminal/browser/terminalActions","vs/workbench/contrib/terminal/browser/terminalConfigHelper","vs/workbench/contrib/terminal/browser/terminalEditorInput","vs/workbench/contrib/terminal/browser/terminalIcons","vs/workbench/contrib/terminal/browser/terminalInstance","vs/workbench/contrib/terminal/browser/terminalMenus","vs/workbench/contrib/terminal/browser/terminalProcessManager","vs/workbench/contrib/terminal/browser/terminalProfileQuickpick","vs/workbench/contrib/terminal/browser/terminalQuickAccess","vs/workbench/contrib/terminal/browser/terminalRunRecentQuickPick","vs/workbench/contrib/terminal/browser/terminalService","vs/workbench/contrib/terminal/browser/terminalTabbedView","vs/workbench/contrib/terminal/browser/terminalTabsList","vs/workbench/contrib/terminal/browser/terminalTooltip","vs/workbench/contrib/terminal/browser/terminalView","vs/workbench/contrib/terminal/browser/xterm/decorationAddon","vs/workbench/contrib/terminal/browser/xterm/decorationStyles","vs/workbench/contrib/terminal/browser/xterm/xtermTerminal","vs/workbench/contrib/terminal/common/terminal","vs/workbench/contrib/terminal/common/terminalColorRegistry","vs/workbench/contrib/terminal/common/terminalConfiguration","vs/workbench/contrib/terminal/common/terminalContextKey","vs/workbench/contrib/terminal/common/terminalStrings","vs/workbench/contrib/terminal/electron-sandbox/terminalRemote","vs/workbench/contrib/terminalContrib/accessibility/browser/terminal.accessibility.contribution","vs/workbench/contrib/terminalContrib/accessibility/browser/terminalAccessibilityHelp","vs/workbench/contrib/terminalContrib/developer/browser/terminal.developer.contribution","vs/workbench/contrib/terminalContrib/environmentChanges/browser/terminal.environmentChanges.contribution","vs/workbench/contrib/terminalContrib/find/browser/terminal.find.contribution","vs/workbench/contrib/terminalContrib/links/browser/terminal.links.contribution","vs/workbench/contrib/terminalContrib/links/browser/terminalLinkDetectorAdapter","vs/workbench/contrib/terminalContrib/links/browser/terminalLinkManager","vs/workbench/contrib/terminalContrib/links/browser/terminalLinkQuickpick","vs/workbench/contrib/terminalContrib/quickFix/browser/quickFixAddon","vs/workbench/contrib/terminalContrib/quickFix/browser/terminal.quickFix.contribution","vs/workbench/contrib/terminalContrib/quickFix/browser/terminalQuickFixBuiltinActions","vs/workbench/contrib/terminalContrib/quickFix/browser/terminalQuickFixService","vs/workbench/contrib/testing/browser/icons","vs/workbench/contrib/testing/browser/testExplorerActions","vs/workbench/contrib/testing/browser/testing.contribution","vs/workbench/contrib/testing/browser/testingConfigurationUi","vs/workbench/contrib/testing/browser/testingDecorations","vs/workbench/contrib/testing/browser/testingExplorerFilter","vs/workbench/contrib/testing/browser/testingExplorerView","vs/workbench/contrib/testing/browser/testingOutputPeek","vs/workbench/contrib/testing/browser/testingProgressUiService","vs/workbench/contrib/testing/browser/testingViewPaneContainer","vs/workbench/contrib/testing/browser/theme","vs/workbench/contrib/testing/common/configuration","vs/workbench/contrib/testing/common/constants","vs/workbench/contrib/testing/common/testResult","vs/workbench/contrib/testing/common/testServiceImpl","vs/workbench/contrib/testing/common/testingContentProvider","vs/workbench/contrib/testing/common/testingContextKeys","vs/workbench/contrib/themes/browser/themes.contribution","vs/workbench/contrib/timeline/browser/timeline.contribution","vs/workbench/contrib/timeline/browser/timelinePane","vs/workbench/contrib/typeHierarchy/browser/typeHierarchy.contribution","vs/workbench/contrib/typeHierarchy/browser/typeHierarchyPeek","vs/workbench/contrib/typeHierarchy/browser/typeHierarchyTree","vs/workbench/contrib/update/browser/releaseNotesEditor","vs/workbench/contrib/update/browser/update","vs/workbench/contrib/update/browser/update.contribution","vs/workbench/contrib/url/browser/trustedDomains","vs/workbench/contrib/url/browser/trustedDomainsValidator","vs/workbench/contrib/url/browser/url.contribution","vs/workbench/contrib/userDataProfile/browser/userDataProfile","vs/workbench/contrib/userDataProfile/browser/userDataProfileActions","vs/workbench/contrib/userDataSync/browser/userDataSync","vs/workbench/contrib/userDataSync/browser/userDataSync.contribution","vs/workbench/contrib/userDataSync/browser/userDataSyncConflictsView","vs/workbench/contrib/userDataSync/browser/userDataSyncViews","vs/workbench/contrib/userDataSync/electron-sandbox/userDataSync.contribution","vs/workbench/contrib/webview/browser/webview.contribution","vs/workbench/contrib/webview/browser/webviewElement","vs/workbench/contrib/webview/electron-sandbox/webviewCommands","vs/workbench/contrib/webviewPanel/browser/webviewCommands","vs/workbench/contrib/webviewPanel/browser/webviewEditor","vs/workbench/contrib/webviewPanel/browser/webviewPanel.contribution","vs/workbench/contrib/welcomeGettingStarted/browser/featuredExtensionService","vs/workbench/contrib/welcomeGettingStarted/browser/gettingStarted","vs/workbench/contrib/welcomeGettingStarted/browser/gettingStarted.contribution","vs/workbench/contrib/welcomeGettingStarted/browser/gettingStartedColors","vs/workbench/contrib/welcomeGettingStarted/browser/gettingStartedExtensionPoint","vs/workbench/contrib/welcomeGettingStarted/browser/gettingStartedIcons","vs/workbench/contrib/welcomeGettingStarted/browser/gettingStartedInput","vs/workbench/contrib/welcomeGettingStarted/browser/gettingStartedService","vs/workbench/contrib/welcomeGettingStarted/browser/startupPage","vs/workbench/contrib/welcomeGettingStarted/common/gettingStartedContent","vs/workbench/contrib/welcomeGettingStarted/common/media/notebookProfile","vs/workbench/contrib/welcomeGettingStarted/common/media/theme_picker","vs/workbench/contrib/welcomeViews/common/newFile.contribution","vs/workbench/contrib/welcomeViews/common/viewsWelcomeContribution","vs/workbench/contrib/welcomeViews/common/viewsWelcomeExtensionPoint","vs/workbench/contrib/welcomeWalkthrough/browser/editor/editorWalkThrough","vs/workbench/contrib/welcomeWalkthrough/browser/walkThrough.contribution","vs/workbench/contrib/welcomeWalkthrough/browser/walkThroughPart","vs/workbench/contrib/welcomeWalkthrough/common/walkThroughUtils","vs/workbench/contrib/workspace/browser/workspace.contribution","vs/workbench/contrib/workspace/browser/workspaceTrustEditor","vs/workbench/contrib/workspace/common/workspace","vs/workbench/contrib/workspaces/browser/workspaces.contribution","vs/workbench/electron-sandbox/actions/developerActions","vs/workbench/electron-sandbox/actions/installActions","vs/workbench/electron-sandbox/actions/windowActions","vs/workbench/electron-sandbox/desktop.contribution","vs/workbench/electron-sandbox/desktop.main","vs/workbench/electron-sandbox/parts/dialogs/dialogHandler","vs/workbench/electron-sandbox/window","vs/workbench/services/actions/common/menusExtensionPoint","vs/workbench/services/assignment/common/assignmentService","vs/workbench/services/authentication/browser/authenticationService","vs/workbench/services/auxiliaryWindow/browser/auxiliaryWindowService","vs/workbench/services/configuration/browser/configurationService","vs/workbench/services/configuration/common/configurationEditing","vs/workbench/services/configuration/common/jsonEditingService","vs/workbench/services/configurationResolver/browser/baseConfigurationResolverService","vs/workbench/services/configurationResolver/common/configurationResolverSchema","vs/workbench/services/configurationResolver/common/configurationResolverUtils","vs/workbench/services/configurationResolver/common/variableResolver","vs/workbench/services/decorations/browser/decorationsService","vs/workbench/services/dialogs/browser/abstractFileDialogService","vs/workbench/services/dialogs/browser/simpleFileDialog","vs/workbench/services/editor/browser/editorResolverService","vs/workbench/services/editor/common/editorResolverService","vs/workbench/services/extensionManagement/browser/extensionBisect","vs/workbench/services/extensionManagement/browser/extensionEnablementService","vs/workbench/services/extensionManagement/common/extensionManagementService","vs/workbench/services/extensionManagement/electron-sandbox/extensionManagementServerService","vs/workbench/services/extensionManagement/electron-sandbox/remoteExtensionManagementService","vs/workbench/services/extensionRecommendations/common/workspaceExtensionsConfig","vs/workbench/services/extensions/browser/extensionUrlHandler","vs/workbench/services/extensions/common/abstractExtensionService","vs/workbench/services/extensions/common/extensionHostManager","vs/workbench/services/extensions/common/extensionsRegistry","vs/workbench/services/extensions/common/extensionsUtil","vs/workbench/services/extensions/electron-sandbox/cachedExtensionScanner","vs/workbench/services/extensions/electron-sandbox/localProcessExtensionHost","vs/workbench/services/extensions/electron-sandbox/nativeExtensionService","vs/workbench/services/filesConfiguration/common/filesConfigurationService","vs/workbench/services/history/browser/historyService","vs/workbench/services/hover/browser/hoverWidget","vs/workbench/services/integrity/electron-sandbox/integrityService","vs/workbench/services/issue/browser/issueTroubleshoot","vs/workbench/services/keybinding/browser/keybindingService","vs/workbench/services/keybinding/common/keybindingEditing","vs/workbench/services/label/common/labelService","vs/workbench/services/language/common/languageService","vs/workbench/services/localization/electron-sandbox/localeService","vs/workbench/services/log/electron-sandbox/logService","vs/workbench/services/notification/common/notificationService","vs/workbench/services/preferences/browser/keybindingsEditorInput","vs/workbench/services/preferences/browser/keybindingsEditorModel","vs/workbench/services/preferences/browser/preferencesService","vs/workbench/services/preferences/common/preferencesEditorInput","vs/workbench/services/preferences/common/preferencesModels","vs/workbench/services/preferences/common/preferencesValidation","vs/workbench/services/progress/browser/progressService","vs/workbench/services/remote/common/remoteExplorerService","vs/workbench/services/remote/common/tunnelModel","vs/workbench/services/remote/electron-sandbox/remoteAgentService","vs/workbench/services/search/common/queryBuilder","vs/workbench/services/secrets/electron-sandbox/secretStorageService","vs/workbench/services/suggest/browser/simpleSuggestWidget","vs/workbench/services/textMate/browser/textMateTokenizationFeatureImpl","vs/workbench/services/textMate/common/TMGrammars","vs/workbench/services/textfile/browser/textFileService","vs/workbench/services/textfile/common/textFileEditorModel","vs/workbench/services/textfile/common/textFileEditorModelManager","vs/workbench/services/textfile/common/textFileSaveParticipant","vs/workbench/services/textfile/electron-sandbox/nativeTextFileService","vs/workbench/services/themes/browser/fileIconThemeData","vs/workbench/services/themes/browser/productIconThemeData","vs/workbench/services/themes/browser/workbenchThemeService","vs/workbench/services/themes/common/colorExtensionPoint","vs/workbench/services/themes/common/colorThemeData","vs/workbench/services/themes/common/colorThemeSchema","vs/workbench/services/themes/common/fileIconThemeSchema","vs/workbench/services/themes/common/iconExtensionPoint","vs/workbench/services/themes/common/productIconThemeSchema","vs/workbench/services/themes/common/themeConfiguration","vs/workbench/services/themes/common/themeExtensionPoints","vs/workbench/services/themes/common/tokenClassificationExtensionPoint","vs/workbench/services/userDataProfile/browser/extensionsResource","vs/workbench/services/userDataProfile/browser/globalStateResource","vs/workbench/services/userDataProfile/browser/keybindingsResource","vs/workbench/services/userDataProfile/browser/settingsResource","vs/workbench/services/userDataProfile/browser/snippetsResource","vs/workbench/services/userDataProfile/browser/tasksResource","vs/workbench/services/userDataProfile/browser/userDataProfileImportExportService","vs/workbench/services/userDataProfile/browser/userDataProfileManagement","vs/workbench/services/userDataProfile/common/userDataProfile","vs/workbench/services/userDataProfile/common/userDataProfileIcons","vs/workbench/services/userDataSync/browser/userDataSyncWorkbenchService","vs/workbench/services/userDataSync/common/userDataSync","vs/workbench/services/views/browser/viewDescriptorService","vs/workbench/services/workingCopy/common/fileWorkingCopyManager","vs/workbench/services/workingCopy/common/storedFileWorkingCopy","vs/workbench/services/workingCopy/common/storedFileWorkingCopyManager","vs/workbench/services/workingCopy/common/storedFileWorkingCopySaveParticipant","vs/workbench/services/workingCopy/common/workingCopyHistoryService","vs/workbench/services/workingCopy/common/workingCopyHistoryTracker","vs/workbench/services/workingCopy/electron-sandbox/workingCopyBackupService","vs/workbench/services/workingCopy/electron-sandbox/workingCopyBackupTracker","vs/workbench/services/workspaces/browser/abstractWorkspaceEditingService","vs/workbench/services/workspaces/browser/workspaceTrustEditorInput","vs/workbench/services/workspaces/electron-sandbox/workspaceEditingService"],"vs/editor/common/services/editorSimpleWorker":["vs/base/common/platform","vs/editor/common/languages"],"vs/base/common/worker/simpleWorker":["vs/base/common/platform"],"vs/workbench/api/worker/extensionHostWorker":["vs/base/common/actions","vs/base/common/date","vs/base/common/errorMessage","vs/editor/common/config/editorOptions","vs/platform/configuration/common/configurationRegistry","vs/platform/contextkey/common/contextkey","vs/platform/contextkey/common/scanner","vs/platform/extensionManagement/common/extensionManagement","vs/platform/extensions/common/extensionValidator","vs/platform/files/common/files","vs/platform/markers/common/markers","vs/platform/theme/common/iconRegistry","vs/platform/workspace/common/workspace","vs/workbench/api/common/extHostChat","vs/workbench/api/common/extHostChatAgents2","vs/workbench/api/common/extHostDiagnostics","vs/workbench/api/common/extHostExtensionService","vs/workbench/api/common/extHostLanguageFeatures","vs/workbench/api/common/extHostLogService","vs/workbench/api/common/extHostNotebook","vs/workbench/api/common/extHostProgress","vs/workbench/api/common/extHostStatusBar","vs/workbench/api/common/extHostTelemetry","vs/workbench/api/common/extHostTerminalService","vs/workbench/api/common/extHostTreeViews","vs/workbench/api/common/extHostTunnelService","vs/workbench/api/common/extHostWorkspace","vs/workbench/common/editor","vs/workbench/common/views","vs/workbench/contrib/debug/common/abstractDebugAdapter","vs/workbench/contrib/debug/common/debug","vs/workbench/contrib/tasks/common/taskDefinitionRegistry","vs/workbench/contrib/tasks/common/tasks","vs/workbench/services/configurationResolver/common/variableResolver","vs/workbench/services/extensions/common/extensionsRegistry","vs/workbench/services/search/common/queryBuilder"],"vs/workbench/contrib/notebook/common/services/notebookSimpleWorker":["vs/platform/contextkey/common/contextkey","vs/platform/contextkey/common/scanner"],"vs/workbench/contrib/debug/node/telemetryApp":["vs/base/common/platform"],"vs/platform/files/node/watcher/watcherMain":["vs/base/common/errorMessage","vs/base/common/platform","vs/platform/files/common/files"],"vs/platform/terminal/node/ptyHostMain":["vs/base/common/date","vs/base/common/errorMessage","vs/base/common/platform","vs/platform/contextkey/common/contextkey","vs/platform/contextkey/common/scanner","vs/platform/environment/node/argv","vs/platform/files/common/files","vs/platform/terminal/node/ptyHostMain","vs/platform/terminal/node/ptyService","vs/platform/terminal/node/terminalProcess"],"vs/workbench/api/node/extensionHostProcess":["vs/base/common/actions","vs/base/common/date","vs/base/common/errorMessage","vs/base/common/platform","vs/editor/common/config/editorOptions","vs/editor/common/languages","vs/platform/configuration/common/configurationRegistry","vs/platform/contextkey/common/contextkey","vs/platform/contextkey/common/scanner","vs/platform/dialogs/common/dialogs","vs/platform/extensionManagement/common/extensionManagement","vs/platform/extensions/common/extensionValidator","vs/platform/externalTerminal/node/externalTerminalService","vs/platform/files/common/files","vs/platform/files/common/io","vs/platform/files/node/diskFileSystemProvider","vs/platform/markers/common/markers","vs/platform/theme/common/iconRegistry","vs/platform/userDataProfile/common/userDataProfile","vs/platform/workspace/common/workspace","vs/workbench/api/common/extHostChat","vs/workbench/api/common/extHostChatAgents2","vs/workbench/api/common/extHostDiagnostics","vs/workbench/api/common/extHostExtensionService","vs/workbench/api/common/extHostLanguageFeatures","vs/workbench/api/common/extHostLogService","vs/workbench/api/common/extHostNotebook","vs/workbench/api/common/extHostProgress","vs/workbench/api/common/extHostStatusBar","vs/workbench/api/common/extHostTelemetry","vs/workbench/api/common/extHostTerminalService","vs/workbench/api/common/extHostTreeViews","vs/workbench/api/common/extHostTunnelService","vs/workbench/api/common/extHostWorkspace","vs/workbench/api/node/extHostDebugService","vs/workbench/common/editor","vs/workbench/common/views","vs/workbench/contrib/debug/common/abstractDebugAdapter","vs/workbench/contrib/debug/common/debug","vs/workbench/contrib/debug/node/debugAdapter","vs/workbench/contrib/tasks/common/taskDefinitionRegistry","vs/workbench/contrib/tasks/common/tasks","vs/workbench/services/configurationResolver/common/variableResolver","vs/workbench/services/extensions/common/extensionsRegistry","vs/workbench/services/remote/common/tunnelModel","vs/workbench/services/search/common/queryBuilder"],"vs/code/electron-main/main":["vs/base/common/date","vs/base/common/errorMessage","vs/base/common/jsonErrorMessages","vs/base/common/platform","vs/code/electron-main/app","vs/code/electron-main/main","vs/platform/configuration/common/configurationRegistry","vs/platform/contextkey/common/contextkey","vs/platform/contextkey/common/scanner","vs/platform/dialogs/common/dialogs","vs/platform/dialogs/electron-main/dialogMainService","vs/platform/environment/node/argv","vs/platform/environment/node/argvHelper","vs/platform/extensionManagement/common/extensionManagement","vs/platform/extensionManagement/common/extensionNls","vs/platform/extensionManagement/common/extensionsScannerService","vs/platform/extensions/common/extensionValidator","vs/platform/externalTerminal/node/externalTerminalService","vs/platform/files/common/fileService","vs/platform/files/common/files","vs/platform/files/common/io","vs/platform/files/electron-main/diskFileSystemProviderServer","vs/platform/files/node/diskFileSystemProvider","vs/platform/issue/electron-main/issueMainService","vs/platform/menubar/electron-main/menubar","vs/platform/native/electron-main/nativeHostMainService","vs/platform/request/common/request","vs/platform/shell/node/shellEnv","vs/platform/telemetry/common/telemetryService","vs/platform/terminal/common/terminalPlatformConfiguration","vs/platform/terminal/common/terminalProfiles","vs/platform/update/common/update.config.contribution","vs/platform/userDataProfile/common/userDataProfile","vs/platform/windows/electron-main/windowImpl","vs/platform/windows/electron-main/windowsMainService","vs/platform/workspace/common/workspace","vs/platform/workspaces/electron-main/workspacesHistoryMainService","vs/platform/workspaces/electron-main/workspacesManagementMainService"],"vs/code/node/cli":["vs/base/common/platform","vs/platform/environment/node/argv","vs/platform/environment/node/argvHelper","vs/platform/files/common/files"],"vs/code/node/cliProcessMain":["vs/base/common/date","vs/base/common/errorMessage","vs/base/common/jsonErrorMessages","vs/base/node/zip","vs/code/node/cliProcessMain","vs/platform/configuration/common/configurationRegistry","vs/platform/contextkey/common/contextkey","vs/platform/contextkey/common/scanner","vs/platform/extensionManagement/common/abstractExtensionManagementService","vs/platform/extensionManagement/common/extensionManagement","vs/platform/extensionManagement/common/extensionManagementCLI","vs/platform/extensionManagement/common/extensionNls","vs/platform/extensionManagement/common/extensionsScannerService","vs/platform/extensionManagement/node/extensionManagementService","vs/platform/extensionManagement/node/extensionManagementUtil","vs/platform/extensions/common/extensionValidator","vs/platform/files/common/fileService","vs/platform/files/common/io","vs/platform/files/node/diskFileSystemProvider","vs/platform/languagePacks/common/languagePacks","vs/platform/request/common/request","vs/platform/shell/node/shellEnv","vs/platform/telemetry/common/telemetryService","vs/platform/userDataProfile/common/userDataProfile","vs/platform/workspace/common/workspace"],"vs/code/electron-sandbox/issue/issueReporterMain":["vs/base/browser/ui/button/button","vs/base/common/actions","vs/base/common/platform","vs/code/electron-sandbox/issue/issueReporterPage","vs/code/electron-sandbox/issue/issueReporterService","vs/platform/theme/common/iconRegistry"],"vs/code/node/sharedProcess/sharedProcessMain":["vs/base/common/date","vs/base/common/errorMessage","vs/base/common/jsonErrorMessages","vs/base/common/platform","vs/base/node/zip","vs/code/node/sharedProcess/sharedProcessMain","vs/platform/configuration/common/configurationRegistry","vs/platform/contextkey/common/contextkey","vs/platform/contextkey/common/scanner","vs/platform/extensionManagement/common/abstractExtensionManagementService","vs/platform/extensionManagement/common/extensionManagement","vs/platform/extensionManagement/common/extensionNls","vs/platform/extensionManagement/common/extensionsScannerService","vs/platform/extensionManagement/node/extensionManagementService","vs/platform/extensionManagement/node/extensionManagementUtil","vs/platform/extensions/common/extensionValidator","vs/platform/files/common/fileService","vs/platform/files/common/files","vs/platform/files/common/io","vs/platform/files/node/diskFileSystemProvider","vs/platform/languagePacks/common/languagePacks","vs/platform/remoteTunnel/common/remoteTunnel","vs/platform/remoteTunnel/node/remoteTunnelService","vs/platform/request/common/request","vs/platform/telemetry/common/telemetryLogAppender","vs/platform/telemetry/common/telemetryService","vs/platform/userDataProfile/common/userDataProfile","vs/platform/userDataSync/common/abstractSynchronizer","vs/platform/userDataSync/common/keybindingsSync","vs/platform/userDataSync/common/settingsSync","vs/platform/userDataSync/common/userDataAutoSyncService","vs/platform/userDataSync/common/userDataSync","vs/platform/userDataSync/common/userDataSyncLog","vs/platform/userDataSync/common/userDataSyncMachines","vs/platform/userDataSync/common/userDataSyncResourceProvider","vs/platform/workspace/common/workspace"],"vs/code/electron-sandbox/processExplorer/processExplorerMain":["vs/base/browser/ui/actionbar/actionViewItems","vs/base/browser/ui/findinput/findInput","vs/base/browser/ui/findinput/findInputToggles","vs/base/browser/ui/iconLabel/iconLabelHover","vs/base/browser/ui/inputbox/inputBox","vs/base/browser/ui/selectBox/selectBoxCustom","vs/base/browser/ui/tree/abstractTree","vs/base/common/actions","vs/base/common/platform","vs/code/electron-sandbox/processExplorer/processExplorerMain","vs/platform/files/common/files","vs/platform/theme/common/iconRegistry"]}}');

/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/src/common/keyboard/layouts/cs-Czech-mac.json":
/*!************************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/src/common/keyboard/layouts/cs-Czech-mac.json ***!
  \************************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"info":{"id":"com.apple.keylayout.Czech","lang":"cs"},"mapping":{"KeyA":{"value":"a","withShift":"A","withAltGr":"ą","withShiftAltGr":"Ą"},"KeyB":{"value":"b","withShift":"B"},"KeyC":{"value":"c","withShift":"C","withShiftAltGr":"©"},"KeyD":{"value":"d","withShift":"D","withAltGr":"∂","withShiftAltGr":"∆"},"KeyE":{"value":"e","withShift":"E","withAltGr":"ę","withShiftAltGr":"Ę"},"KeyF":{"value":"f","withShift":"F"},"KeyG":{"value":"g","withShift":"G"},"KeyH":{"value":"h","withShift":"H","withAltGr":"‘","withShiftAltGr":"“"},"KeyI":{"value":"i","withShift":"I"},"KeyJ":{"value":"j","withShift":"J","withAltGr":"’","withShiftAltGr":"”"},"KeyK":{"value":"k","withShift":"K"},"KeyL":{"value":"l","withShift":"L","withAltGr":"ł","withShiftAltGr":"Ł"},"KeyM":{"value":"m","withShift":"M"},"KeyN":{"value":"n","withShift":"N","withAltGr":"‚","withShiftAltGr":"„"},"KeyO":{"value":"o","withShift":"O"},"KeyP":{"value":"p","withShift":"P"},"KeyQ":{"value":"q","withShift":"Q"},"KeyR":{"value":"r","withShift":"R","withAltGr":"€","withShiftAltGr":"®"},"KeyS":{"value":"s","withShift":"S","withAltGr":"ß","withShiftAltGr":"∑"},"KeyT":{"value":"t","withShift":"T","withShiftAltGr":"™"},"KeyU":{"value":"u","withShift":"U"},"KeyV":{"value":"v","withShift":"V","withShiftAltGr":"√"},"KeyW":{"value":"w","withShift":"W","withAltGr":"ė","withShiftAltGr":"Ė"},"KeyX":{"value":"x","withShift":"X"},"KeyY":{"value":"z","withShift":"Z","withAltGr":"ż","withShiftAltGr":"Ż"},"KeyZ":{"value":"y","withShift":"Y"},"Digit1":{"value":"+","withShift":"1","withAltGr":"`","withShiftAltGr":"¬"},"Digit2":{"value":"ě","withShift":"2","withAltGr":"@","withShiftAltGr":"•"},"Digit3":{"value":"š","withShift":"3","withAltGr":"#","withShiftAltGr":"≠"},"Digit4":{"value":"č","withShift":"4","withAltGr":"$","withShiftAltGr":"£"},"Digit5":{"value":"ř","withShift":"5","withAltGr":"~","withShiftAltGr":"◊"},"Digit6":{"value":"ž","withShift":"6","withAltGr":"^","withShiftAltGr":"†"},"Digit7":{"value":"ý","withShift":"7","withAltGr":"&","withShiftAltGr":"¶"},"Digit8":{"value":"á","withShift":"8","withAltGr":"*","withShiftAltGr":"÷"},"Digit9":{"value":"í","withShift":"9","withAltGr":"{","withShiftAltGr":"«"},"Digit0":{"value":"é","withShift":"0","withAltGr":"}","withShiftAltGr":"»"},"Minus":{"value":"=","withShift":"%","withAltGr":"°","withShiftAltGr":","},"Equal":{"value":"\'","withShift":"ˇ","withAltGr":"^","withShiftAltGr":"-"},"BracketLeft":{"value":"ú","withShift":"/","withAltGr":"[","withShiftAltGr":"‹"},"BracketRight":{"value":")","withShift":"(","withAltGr":"]","withShiftAltGr":"›"},"Backslash":{"value":"¨","withShift":"`","withAltGr":"¨","withShiftAltGr":"\\""},"Semicolon":{"value":"ů","withShift":"\\"","withAltGr":";","withShiftAltGr":"…"},"Quote":{"value":"§","withShift":"!","withAltGr":"\'","withShiftAltGr":"~"},"Backquote":{"value":"\\\\","withShift":"|"},"Comma":{"value":",","withShift":"?","withAltGr":"<","withShiftAltGr":"≤"},"Period":{"value":".","withShift":":","withAltGr":">","withShiftAltGr":"≥"},"Slash":{"value":"-","withShift":"_","withAltGr":"–","withShiftAltGr":"—"},"IntlBackslash":{"value":"<","withShift":">","withAltGr":"≤","withShiftAltGr":"≥"}}}');

/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/src/common/keyboard/layouts/cs-Czech-pc.json":
/*!***********************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/src/common/keyboard/layouts/cs-Czech-pc.json ***!
  \***********************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"info":{"name":"00000405","id":"","text":"Czech"},"mapping":{"KeyA":{"vkey":"VK_A","value":"a","withShift":"A"},"KeyB":{"vkey":"VK_B","value":"b","withShift":"B","withAltGr":"{"},"KeyC":{"vkey":"VK_C","value":"c","withShift":"C","withAltGr":"&"},"KeyD":{"vkey":"VK_D","value":"d","withShift":"D","withAltGr":"Đ"},"KeyE":{"vkey":"VK_E","value":"e","withShift":"E","withAltGr":"€"},"KeyF":{"vkey":"VK_F","value":"f","withShift":"F","withAltGr":"["},"KeyG":{"vkey":"VK_G","value":"g","withShift":"G","withAltGr":"]"},"KeyH":{"vkey":"VK_H","value":"h","withShift":"H"},"KeyI":{"vkey":"VK_I","value":"i","withShift":"I"},"KeyJ":{"vkey":"VK_J","value":"j","withShift":"J"},"KeyK":{"vkey":"VK_K","value":"k","withShift":"K","withAltGr":"ł"},"KeyL":{"vkey":"VK_L","value":"l","withShift":"L","withAltGr":"Ł"},"KeyM":{"vkey":"VK_M","value":"m","withShift":"M"},"KeyN":{"vkey":"VK_N","value":"n","withShift":"N","withAltGr":"}"},"KeyO":{"vkey":"VK_O","value":"o","withShift":"O"},"KeyP":{"vkey":"VK_P","value":"p","withShift":"P"},"KeyQ":{"vkey":"VK_Q","value":"q","withShift":"Q","withAltGr":"\\\\"},"KeyR":{"vkey":"VK_R","value":"r","withShift":"R"},"KeyS":{"vkey":"VK_S","value":"s","withShift":"S","withAltGr":"đ"},"KeyT":{"vkey":"VK_T","value":"t","withShift":"T"},"KeyU":{"vkey":"VK_U","value":"u","withShift":"U"},"KeyV":{"vkey":"VK_V","value":"v","withShift":"V","withAltGr":"@"},"KeyW":{"vkey":"VK_W","value":"w","withShift":"W","withAltGr":"|"},"KeyX":{"vkey":"VK_X","value":"x","withShift":"X","withAltGr":"#"},"KeyY":{"vkey":"VK_Z","value":"z","withShift":"Z"},"KeyZ":{"vkey":"VK_Y","value":"y","withShift":"Y"},"Digit1":{"vkey":"VK_1","value":"+","withShift":"1","withAltGr":"~"},"Digit2":{"vkey":"VK_2","value":"ě","withShift":"2","withAltGr":"ˇ"},"Digit3":{"vkey":"VK_3","value":"š","withShift":"3","withAltGr":"^"},"Digit4":{"vkey":"VK_4","value":"č","withShift":"4","withAltGr":"˘"},"Digit5":{"vkey":"VK_5","value":"ř","withShift":"5","withAltGr":"°"},"Digit6":{"vkey":"VK_6","value":"ž","withShift":"6","withAltGr":"˛"},"Digit7":{"vkey":"VK_7","value":"ý","withShift":"7","withAltGr":"`"},"Digit8":{"vkey":"VK_8","value":"á","withShift":"8","withAltGr":"˙"},"Digit9":{"vkey":"VK_9","value":"í","withShift":"9","withAltGr":"´"},"Digit0":{"vkey":"VK_0","value":"é","withShift":"0","withAltGr":"˝"},"Minus":{"vkey":"VK_OEM_PLUS","value":"=","withShift":"%","withAltGr":"¨"},"Equal":{"vkey":"VK_OEM_2","value":"´","withShift":"ˇ","withAltGr":"¸"},"BracketLeft":{"vkey":"VK_OEM_4","value":"ú","withShift":"/","withAltGr":"÷"},"BracketRight":{"vkey":"VK_OEM_6","value":")","withShift":"(","withAltGr":"×"},"Backslash":{"vkey":"VK_OEM_5","value":"¨","withShift":"\'","withAltGr":"¤"},"Semicolon":{"vkey":"VK_OEM_1","value":"ů","withShift":"\\"","withAltGr":"$"},"Quote":{"vkey":"VK_OEM_7","value":"§","withShift":"!","withAltGr":"ß"},"Backquote":{"vkey":"VK_OEM_3","value":";","withShift":"°"},"Comma":{"vkey":"VK_OEM_COMMA","value":",","withShift":"?","withAltGr":"<"},"Period":{"vkey":"VK_OEM_PERIOD","value":".","withShift":":","withAltGr":">"},"Slash":{"vkey":"VK_OEM_MINUS","value":"-","withShift":"_","withAltGr":"*"},"IntlBackslash":{"vkey":"VK_OEM_102","value":"\\\\","withShift":"|"},"IntlRo":{"vkey":"VK_ABNT_C1"},"IntlYen":{"vkey":"VK_UNKNOWN"}}}');

/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/src/common/keyboard/layouts/da-Danish-mac.json":
/*!*************************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/src/common/keyboard/layouts/da-Danish-mac.json ***!
  \*************************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"info":{"id":"com.apple.keylayout.Danish","lang":"da"},"mapping":{"KeyA":{"value":"a","withShift":"A","withAltGr":"ª","withShiftAltGr":"Ê"},"KeyB":{"value":"b","withShift":"B","withAltGr":"∫","withShiftAltGr":"Ë"},"KeyC":{"value":"c","withShift":"C","withAltGr":"ç","withShiftAltGr":"Ç"},"KeyD":{"value":"d","withShift":"D","withAltGr":"∂","withShiftAltGr":"˘"},"KeyE":{"value":"e","withShift":"E","withAltGr":"é","withShiftAltGr":"É"},"KeyF":{"value":"f","withShift":"F","withAltGr":"ƒ","withShiftAltGr":"ﬁ"},"KeyG":{"value":"g","withShift":"G","withAltGr":"©","withShiftAltGr":"Á"},"KeyH":{"value":"h","withShift":"H","withAltGr":"«","withShiftAltGr":"»"},"KeyI":{"value":"i","withShift":"I","withAltGr":"|","withShiftAltGr":"ı"},"KeyJ":{"value":"j","withShift":"J","withAltGr":"‹","withShiftAltGr":"›"},"KeyK":{"value":"k","withShift":"K","withAltGr":"∆","withShiftAltGr":"˝"},"KeyL":{"value":"l","withShift":"L","withAltGr":"¬","withShiftAltGr":"ﬂ"},"KeyM":{"value":"m","withShift":"M","withAltGr":"µ","withShiftAltGr":"˛"},"KeyN":{"value":"n","withShift":"N","withAltGr":"ñ","withShiftAltGr":"Ñ"},"KeyO":{"value":"o","withShift":"O","withAltGr":"œ","withShiftAltGr":"Œ"},"KeyP":{"value":"p","withShift":"P","withAltGr":"π","withShiftAltGr":"∏"},"KeyQ":{"value":"q","withShift":"Q","withAltGr":"°","withShiftAltGr":"•"},"KeyR":{"value":"r","withShift":"R","withAltGr":"®","withShiftAltGr":"Â"},"KeyS":{"value":"s","withShift":"S","withAltGr":"ß","withShiftAltGr":"ˇ"},"KeyT":{"value":"t","withShift":"T","withAltGr":"†","withShiftAltGr":"‡"},"KeyU":{"value":"u","withShift":"U","withAltGr":"ü","withShiftAltGr":"Ü"},"KeyV":{"value":"v","withShift":"V","withAltGr":"√","withShiftAltGr":"◊"},"KeyW":{"value":"w","withShift":"W","withAltGr":"∑","withShiftAltGr":"˚"},"KeyX":{"value":"x","withShift":"X","withAltGr":"…","withShiftAltGr":"˙"},"KeyY":{"value":"y","withShift":"Y","withAltGr":"¥","withShiftAltGr":"Ÿ"},"KeyZ":{"value":"z","withShift":"Z","withAltGr":"Ω","withShiftAltGr":"¸"},"Digit1":{"value":"1","withShift":"!","withAltGr":"¡","withShiftAltGr":"¯"},"Digit2":{"value":"2","withShift":"\\"","withAltGr":"“","withShiftAltGr":"”"},"Digit3":{"value":"3","withShift":"#","withAltGr":"§","withShiftAltGr":"$"},"Digit4":{"value":"4","withShift":"€","withAltGr":"£","withShiftAltGr":"¢"},"Digit5":{"value":"5","withShift":"%","withAltGr":"∞","withShiftAltGr":"‰"},"Digit6":{"value":"6","withShift":"&","withAltGr":"™","withShiftAltGr":"˜"},"Digit7":{"value":"7","withShift":"/","withAltGr":"¶","withShiftAltGr":"\\\\"},"Digit8":{"value":"8","withShift":"(","withAltGr":"[","withShiftAltGr":"{"},"Digit9":{"value":"9","withShift":")","withAltGr":"]","withShiftAltGr":"}"},"Digit0":{"value":"0","withShift":"=","withAltGr":"≠","withShiftAltGr":"≈"},"Minus":{"value":"+","withShift":"?","withAltGr":"±","withShiftAltGr":"¿"},"Equal":{"value":"´","withShift":"`","withAltGr":"\'","withShiftAltGr":"⁄"},"BracketLeft":{"value":"å","withShift":"Å","withAltGr":"‘","withShiftAltGr":"’"},"BracketRight":{"value":"¨","withShift":"^","withAltGr":"~","withShiftAltGr":"^"},"Backslash":{"value":"\'","withShift":"*","withAltGr":"@","withShiftAltGr":"º"},"Semicolon":{"value":"æ","withShift":"Æ","withAltGr":"ä","withShiftAltGr":"Ä"},"Quote":{"value":"ø","withShift":"Ø","withAltGr":"ö","withShiftAltGr":"Ö"},"Backquote":{"value":"<","withShift":">","withAltGr":"≤","withShiftAltGr":"≥"},"Comma":{"value":",","withShift":";","withAltGr":"‚","withShiftAltGr":"„"},"Period":{"value":".","withShift":":","withAltGr":"·","withShiftAltGr":"÷"},"Slash":{"value":"-","withShift":"_","withAltGr":"–","withShiftAltGr":"—"},"IntlBackslash":{"value":"$","withShift":"§","withAltGr":"","withShiftAltGr":"\'"}}}');

/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/src/common/keyboard/layouts/da-Danish-pc.json":
/*!************************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/src/common/keyboard/layouts/da-Danish-pc.json ***!
  \************************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"info":{"name":"00000406","id":"","text":"Danish"},"mapping":{"KeyA":{"vkey":"VK_A","value":"a","withShift":"A"},"KeyB":{"vkey":"VK_B","value":"b","withShift":"B"},"KeyC":{"vkey":"VK_C","value":"c","withShift":"C"},"KeyD":{"vkey":"VK_D","value":"d","withShift":"D"},"KeyE":{"vkey":"VK_E","value":"e","withShift":"E","withAltGr":"€"},"KeyF":{"vkey":"VK_F","value":"f","withShift":"F"},"KeyG":{"vkey":"VK_G","value":"g","withShift":"G"},"KeyH":{"vkey":"VK_H","value":"h","withShift":"H"},"KeyI":{"vkey":"VK_I","value":"i","withShift":"I"},"KeyJ":{"vkey":"VK_J","value":"j","withShift":"J"},"KeyK":{"vkey":"VK_K","value":"k","withShift":"K"},"KeyL":{"vkey":"VK_L","value":"l","withShift":"L"},"KeyM":{"vkey":"VK_M","value":"m","withShift":"M","withAltGr":"µ"},"KeyN":{"vkey":"VK_N","value":"n","withShift":"N"},"KeyO":{"vkey":"VK_O","value":"o","withShift":"O"},"KeyP":{"vkey":"VK_P","value":"p","withShift":"P"},"KeyQ":{"vkey":"VK_Q","value":"q","withShift":"Q"},"KeyR":{"vkey":"VK_R","value":"r","withShift":"R"},"KeyS":{"vkey":"VK_S","value":"s","withShift":"S"},"KeyT":{"vkey":"VK_T","value":"t","withShift":"T"},"KeyU":{"vkey":"VK_U","value":"u","withShift":"U"},"KeyV":{"vkey":"VK_V","value":"v","withShift":"V"},"KeyW":{"vkey":"VK_W","value":"w","withShift":"W"},"KeyX":{"vkey":"VK_X","value":"x","withShift":"X"},"KeyY":{"vkey":"VK_Y","value":"y","withShift":"Y"},"KeyZ":{"vkey":"VK_Z","value":"z","withShift":"Z"},"Digit1":{"vkey":"VK_1","value":"1","withShift":"!"},"Digit2":{"vkey":"VK_2","value":"2","withShift":"\\"","withAltGr":"@"},"Digit3":{"vkey":"VK_3","value":"3","withShift":"#","withAltGr":"£"},"Digit4":{"vkey":"VK_4","value":"4","withShift":"¤","withAltGr":"$"},"Digit5":{"vkey":"VK_5","value":"5","withShift":"%","withAltGr":"€"},"Digit6":{"vkey":"VK_6","value":"6","withShift":"&"},"Digit7":{"vkey":"VK_7","value":"7","withShift":"/","withAltGr":"{"},"Digit8":{"vkey":"VK_8","value":"8","withShift":"(","withAltGr":"["},"Digit9":{"vkey":"VK_9","value":"9","withShift":")","withAltGr":"]"},"Digit0":{"vkey":"VK_0","value":"0","withShift":"=","withAltGr":"}"},"Minus":{"vkey":"VK_OEM_PLUS","value":"+","withShift":"?"},"Equal":{"vkey":"VK_OEM_4","value":"´","withShift":"`","withAltGr":"|"},"BracketLeft":{"vkey":"VK_OEM_6","value":"å","withShift":"Å"},"BracketRight":{"vkey":"VK_OEM_1","value":"¨","withShift":"^","withAltGr":"~"},"Backslash":{"vkey":"VK_OEM_2","value":"\'","withShift":"*"},"Semicolon":{"vkey":"VK_OEM_3","value":"æ","withShift":"Æ"},"Quote":{"vkey":"VK_OEM_7","value":"ø","withShift":"Ø"},"Backquote":{"vkey":"VK_OEM_5","value":"½","withShift":"§"},"Comma":{"vkey":"VK_OEM_COMMA","value":",","withShift":";"},"Period":{"vkey":"VK_OEM_PERIOD","value":".","withShift":":"},"Slash":{"vkey":"VK_OEM_MINUS","value":"-","withShift":"_"},"IntlBackslash":{"vkey":"VK_OEM_102","value":"<","withShift":">","withAltGr":"\\\\"},"IntlRo":{"vkey":"VK_ABNT_C1"},"IntlYen":{"vkey":"VK_UNKNOWN"}}}');

/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/src/common/keyboard/layouts/de-German-mac.json":
/*!*************************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/src/common/keyboard/layouts/de-German-mac.json ***!
  \*************************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"info":{"id":"com.apple.keylayout.German","lang":"de"},"mapping":{"KeyA":{"value":"a","withShift":"A","withAltGr":"å","withShiftAltGr":"Å"},"KeyB":{"value":"b","withShift":"B","withAltGr":"∫","withShiftAltGr":"‹"},"KeyC":{"value":"c","withShift":"C","withAltGr":"ç","withShiftAltGr":"Ç"},"KeyD":{"value":"d","withShift":"D","withAltGr":"∂","withShiftAltGr":"™"},"KeyE":{"value":"e","withShift":"E","withAltGr":"€","withShiftAltGr":"‰"},"KeyF":{"value":"f","withShift":"F","withAltGr":"ƒ","withShiftAltGr":"Ï"},"KeyG":{"value":"g","withShift":"G","withAltGr":"©","withShiftAltGr":"Ì"},"KeyH":{"value":"h","withShift":"H","withAltGr":"ª","withShiftAltGr":"Ó"},"KeyI":{"value":"i","withShift":"I","withAltGr":"⁄","withShiftAltGr":"Û"},"KeyJ":{"value":"j","withShift":"J","withAltGr":"º","withShiftAltGr":"ı"},"KeyK":{"value":"k","withShift":"K","withAltGr":"∆","withShiftAltGr":"ˆ"},"KeyL":{"value":"l","withShift":"L","withAltGr":"@","withShiftAltGr":"ﬂ"},"KeyM":{"value":"m","withShift":"M","withAltGr":"µ","withShiftAltGr":"˘"},"KeyN":{"value":"n","withShift":"N","withAltGr":"~","withShiftAltGr":"›"},"KeyO":{"value":"o","withShift":"O","withAltGr":"ø","withShiftAltGr":"Ø"},"KeyP":{"value":"p","withShift":"P","withAltGr":"π","withShiftAltGr":"∏"},"KeyQ":{"value":"q","withShift":"Q","withAltGr":"«","withShiftAltGr":"»"},"KeyR":{"value":"r","withShift":"R","withAltGr":"®","withShiftAltGr":"¸"},"KeyS":{"value":"s","withShift":"S","withAltGr":"‚","withShiftAltGr":"Í"},"KeyT":{"value":"t","withShift":"T","withAltGr":"†","withShiftAltGr":"˝"},"KeyU":{"value":"u","withShift":"U","withAltGr":"¨","withShiftAltGr":"Á"},"KeyV":{"value":"v","withShift":"V","withAltGr":"√","withShiftAltGr":"◊"},"KeyW":{"value":"w","withShift":"W","withAltGr":"∑","withShiftAltGr":"„"},"KeyX":{"value":"x","withShift":"X","withAltGr":"≈","withShiftAltGr":"Ù"},"KeyY":{"value":"z","withShift":"Z","withAltGr":"Ω","withShiftAltGr":"ˇ"},"KeyZ":{"value":"y","withShift":"Y","withAltGr":"¥","withShiftAltGr":"‡"},"Digit1":{"value":"1","withShift":"!","withAltGr":"¡","withShiftAltGr":"¬"},"Digit2":{"value":"2","withShift":"\\"","withAltGr":"“","withShiftAltGr":"”"},"Digit3":{"value":"3","withShift":"§","withAltGr":"¶","withShiftAltGr":"#"},"Digit4":{"value":"4","withShift":"$","withAltGr":"¢","withShiftAltGr":"£"},"Digit5":{"value":"5","withShift":"%","withAltGr":"[","withShiftAltGr":"ﬁ"},"Digit6":{"value":"6","withShift":"&","withAltGr":"]","withShiftAltGr":"^"},"Digit7":{"value":"7","withShift":"/","withAltGr":"|","withShiftAltGr":"\\\\"},"Digit8":{"value":"8","withShift":"(","withAltGr":"{","withShiftAltGr":"˜"},"Digit9":{"value":"9","withShift":")","withAltGr":"}","withShiftAltGr":"·"},"Digit0":{"value":"0","withShift":"=","withAltGr":"≠","withShiftAltGr":"¯"},"Minus":{"value":"ß","withShift":"?","withAltGr":"¿","withShiftAltGr":"˙"},"Equal":{"value":"´","withShift":"`","withAltGr":"\'","withShiftAltGr":"˚"},"BracketLeft":{"value":"ü","withShift":"Ü","withAltGr":"•","withShiftAltGr":"°"},"BracketRight":{"value":"+","withShift":"*","withAltGr":"±","withShiftAltGr":""},"Backslash":{"value":"#","withShift":"\'","withAltGr":"‘","withShiftAltGr":"’"},"Semicolon":{"value":"ö","withShift":"Ö","withAltGr":"œ","withShiftAltGr":"Œ"},"Quote":{"value":"ä","withShift":"Ä","withAltGr":"æ","withShiftAltGr":"Æ"},"Backquote":{"value":"<","withShift":">","withAltGr":"≤","withShiftAltGr":"≥"},"Comma":{"value":",","withShift":";","withAltGr":"∞","withShiftAltGr":"˛"},"Period":{"value":".","withShift":":","withAltGr":"…","withShiftAltGr":"÷"},"Slash":{"value":"-","withShift":"_","withAltGr":"–","withShiftAltGr":"—"},"IntlBackslash":{"value":"^","withShift":"°","withAltGr":"„","withShiftAltGr":"“"}}}');

/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/src/common/keyboard/layouts/de-German-pc.json":
/*!************************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/src/common/keyboard/layouts/de-German-pc.json ***!
  \************************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"info":{"name":"00000407","id":"","text":"German"},"mapping":{"KeyA":{"vkey":"VK_A","value":"a","withShift":"A"},"KeyB":{"vkey":"VK_B","value":"b","withShift":"B"},"KeyC":{"vkey":"VK_C","value":"c","withShift":"C"},"KeyD":{"vkey":"VK_D","value":"d","withShift":"D"},"KeyE":{"vkey":"VK_E","value":"e","withShift":"E","withAltGr":"€"},"KeyF":{"vkey":"VK_F","value":"f","withShift":"F"},"KeyG":{"vkey":"VK_G","value":"g","withShift":"G"},"KeyH":{"vkey":"VK_H","value":"h","withShift":"H"},"KeyI":{"vkey":"VK_I","value":"i","withShift":"I"},"KeyJ":{"vkey":"VK_J","value":"j","withShift":"J"},"KeyK":{"vkey":"VK_K","value":"k","withShift":"K"},"KeyL":{"vkey":"VK_L","value":"l","withShift":"L"},"KeyM":{"vkey":"VK_M","value":"m","withShift":"M","withAltGr":"µ"},"KeyN":{"vkey":"VK_N","value":"n","withShift":"N"},"KeyO":{"vkey":"VK_O","value":"o","withShift":"O"},"KeyP":{"vkey":"VK_P","value":"p","withShift":"P"},"KeyQ":{"vkey":"VK_Q","value":"q","withShift":"Q","withAltGr":"@"},"KeyR":{"vkey":"VK_R","value":"r","withShift":"R"},"KeyS":{"vkey":"VK_S","value":"s","withShift":"S"},"KeyT":{"vkey":"VK_T","value":"t","withShift":"T"},"KeyU":{"vkey":"VK_U","value":"u","withShift":"U"},"KeyV":{"vkey":"VK_V","value":"v","withShift":"V"},"KeyW":{"vkey":"VK_W","value":"w","withShift":"W"},"KeyX":{"vkey":"VK_X","value":"x","withShift":"X"},"KeyY":{"vkey":"VK_Z","value":"z","withShift":"Z"},"KeyZ":{"vkey":"VK_Y","value":"y","withShift":"Y"},"Digit1":{"vkey":"VK_1","value":"1","withShift":"!"},"Digit2":{"vkey":"VK_2","value":"2","withShift":"\\"","withAltGr":"²"},"Digit3":{"vkey":"VK_3","value":"3","withShift":"§","withAltGr":"³"},"Digit4":{"vkey":"VK_4","value":"4","withShift":"$"},"Digit5":{"vkey":"VK_5","value":"5","withShift":"%"},"Digit6":{"vkey":"VK_6","value":"6","withShift":"&"},"Digit7":{"vkey":"VK_7","value":"7","withShift":"/","withAltGr":"{"},"Digit8":{"vkey":"VK_8","value":"8","withShift":"(","withAltGr":"["},"Digit9":{"vkey":"VK_9","value":"9","withShift":")","withAltGr":"]"},"Digit0":{"vkey":"VK_0","value":"0","withShift":"=","withAltGr":"}"},"Minus":{"vkey":"VK_OEM_4","value":"ß","withShift":"?","withAltGr":"\\\\","withShiftAltGr":"ẞ"},"Equal":{"vkey":"VK_OEM_6","value":"´","withShift":"`"},"BracketLeft":{"vkey":"VK_OEM_1","value":"ü","withShift":"Ü"},"BracketRight":{"vkey":"VK_OEM_PLUS","value":"+","withShift":"*","withAltGr":"~"},"Backslash":{"vkey":"VK_OEM_2","value":"#","withShift":"\'"},"Semicolon":{"vkey":"VK_OEM_3","value":"ö","withShift":"Ö"},"Quote":{"vkey":"VK_OEM_7","value":"ä","withShift":"Ä"},"Backquote":{"vkey":"VK_OEM_5","value":"^","withShift":"°"},"Comma":{"vkey":"VK_OEM_COMMA","value":",","withShift":";"},"Period":{"vkey":"VK_OEM_PERIOD","value":".","withShift":":"},"Slash":{"vkey":"VK_OEM_MINUS","value":"-","withShift":"_"},"IntlBackslash":{"vkey":"VK_OEM_102","value":"<","withShift":">","withAltGr":"|"},"IntlRo":{"vkey":"VK_ABNT_C1"},"IntlYen":{"vkey":"VK_UNKNOWN"}}}');

/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/src/common/keyboard/layouts/de-Swiss_German-mac.json":
/*!*******************************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/src/common/keyboard/layouts/de-Swiss_German-mac.json ***!
  \*******************************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"info":{"id":"com.apple.keylayout.SwissGerman","lang":"de"},"mapping":{"KeyA":{"value":"a","withShift":"A","withAltGr":"å","withShiftAltGr":"Å"},"KeyB":{"value":"b","withShift":"B","withAltGr":"∫"},"KeyC":{"value":"c","withShift":"C","withAltGr":"©"},"KeyD":{"value":"d","withShift":"D","withAltGr":"∂","withShiftAltGr":"ﬂ"},"KeyE":{"value":"e","withShift":"E","withAltGr":"€","withShiftAltGr":"Ë"},"KeyF":{"value":"f","withShift":"F","withAltGr":"ƒ","withShiftAltGr":"‡"},"KeyG":{"value":"g","withShift":"G","withAltGr":"@","withShiftAltGr":"‚"},"KeyH":{"value":"h","withShift":"H","withAltGr":"ª","withShiftAltGr":"·"},"KeyI":{"value":"i","withShift":"I","withAltGr":"¡","withShiftAltGr":"ı"},"KeyJ":{"value":"j","withShift":"J","withAltGr":"º","withShiftAltGr":"˜"},"KeyK":{"value":"k","withShift":"K","withAltGr":"∆","withShiftAltGr":"¯"},"KeyL":{"value":"l","withShift":"L","withAltGr":"¬","withShiftAltGr":"ˆ"},"KeyM":{"value":"m","withShift":"M","withAltGr":"µ","withShiftAltGr":"˚"},"KeyN":{"value":"n","withShift":"N","withAltGr":"~","withShiftAltGr":"˙"},"KeyO":{"value":"o","withShift":"O","withAltGr":"ø","withShiftAltGr":"Ø"},"KeyP":{"value":"p","withShift":"P","withAltGr":"π","withShiftAltGr":"∏"},"KeyQ":{"value":"q","withShift":"Q","withAltGr":"œ","withShiftAltGr":"Œ"},"KeyR":{"value":"r","withShift":"R","withAltGr":"®","withShiftAltGr":"È"},"KeyS":{"value":"s","withShift":"S","withAltGr":"ß","withShiftAltGr":"ﬁ"},"KeyT":{"value":"t","withShift":"T","withAltGr":"†","withShiftAltGr":"Î"},"KeyU":{"value":"u","withShift":"U","withAltGr":"°","withShiftAltGr":"Ù"},"KeyV":{"value":"v","withShift":"V","withAltGr":"√","withShiftAltGr":"◊"},"KeyW":{"value":"w","withShift":"W","withAltGr":"∑","withShiftAltGr":"Á"},"KeyX":{"value":"x","withShift":"X","withAltGr":"≈","withShiftAltGr":"™"},"KeyY":{"value":"z","withShift":"Z","withAltGr":"Ω","withShiftAltGr":"Í"},"KeyZ":{"value":"y","withShift":"Y","withAltGr":"¥","withShiftAltGr":"Ÿ"},"Digit1":{"value":"1","withShift":"+","withAltGr":"±","withShiftAltGr":"∞"},"Digit2":{"value":"2","withShift":"\\"","withAltGr":"“","withShiftAltGr":"”"},"Digit3":{"value":"3","withShift":"*","withAltGr":"#","withShiftAltGr":"‹"},"Digit4":{"value":"4","withShift":"ç","withAltGr":"Ç","withShiftAltGr":"⁄"},"Digit5":{"value":"5","withShift":"%","withAltGr":"[","withShiftAltGr":"["},"Digit6":{"value":"6","withShift":"&","withAltGr":"]","withShiftAltGr":"]"},"Digit7":{"value":"7","withShift":"/","withAltGr":"|","withShiftAltGr":"\\\\"},"Digit8":{"value":"8","withShift":"(","withAltGr":"{","withShiftAltGr":"Ò"},"Digit9":{"value":"9","withShift":")","withAltGr":"}","withShiftAltGr":"Ô"},"Digit0":{"value":"0","withShift":"=","withAltGr":"≠","withShiftAltGr":"Ú"},"Minus":{"value":"\'","withShift":"?","withAltGr":"¿","withShiftAltGr":""},"Equal":{"value":"^","withShift":"`","withAltGr":"´","withShiftAltGr":"^"},"BracketLeft":{"value":"ü","withShift":"è","withAltGr":"§","withShiftAltGr":"ÿ"},"BracketRight":{"value":"¨","withShift":"!","withAltGr":"‘","withShiftAltGr":"’"},"Backslash":{"value":"$","withShift":"£","withAltGr":"¶","withShiftAltGr":"•"},"Semicolon":{"value":"ö","withShift":"é","withAltGr":"¢","withShiftAltGr":"˘"},"Quote":{"value":"ä","withShift":"à","withAltGr":"æ","withShiftAltGr":"Æ"},"Backquote":{"value":"<","withShift":">","withAltGr":"≤","withShiftAltGr":"≥"},"Comma":{"value":",","withShift":";","withAltGr":"«","withShiftAltGr":"»"},"Period":{"value":".","withShift":":","withAltGr":"…","withShiftAltGr":"÷"},"Slash":{"value":"-","withShift":"_","withAltGr":"–","withShiftAltGr":"—"},"IntlBackslash":{"value":"§","withShift":"°","withAltGr":"ﬁ","withShiftAltGr":"‰"}}}');

/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/src/common/keyboard/layouts/de-Swiss_German-pc.json":
/*!******************************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/src/common/keyboard/layouts/de-Swiss_German-pc.json ***!
  \******************************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"info":{"name":"00000807","id":"","text":"Swiss German"},"mapping":{"KeyA":{"vkey":"VK_A","value":"a","withShift":"A"},"KeyB":{"vkey":"VK_B","value":"b","withShift":"B"},"KeyC":{"vkey":"VK_C","value":"c","withShift":"C"},"KeyD":{"vkey":"VK_D","value":"d","withShift":"D"},"KeyE":{"vkey":"VK_E","value":"e","withShift":"E","withAltGr":"€"},"KeyF":{"vkey":"VK_F","value":"f","withShift":"F"},"KeyG":{"vkey":"VK_G","value":"g","withShift":"G"},"KeyH":{"vkey":"VK_H","value":"h","withShift":"H"},"KeyI":{"vkey":"VK_I","value":"i","withShift":"I"},"KeyJ":{"vkey":"VK_J","value":"j","withShift":"J"},"KeyK":{"vkey":"VK_K","value":"k","withShift":"K"},"KeyL":{"vkey":"VK_L","value":"l","withShift":"L"},"KeyM":{"vkey":"VK_M","value":"m","withShift":"M"},"KeyN":{"vkey":"VK_N","value":"n","withShift":"N"},"KeyO":{"vkey":"VK_O","value":"o","withShift":"O"},"KeyP":{"vkey":"VK_P","value":"p","withShift":"P"},"KeyQ":{"vkey":"VK_Q","value":"q","withShift":"Q"},"KeyR":{"vkey":"VK_R","value":"r","withShift":"R"},"KeyS":{"vkey":"VK_S","value":"s","withShift":"S"},"KeyT":{"vkey":"VK_T","value":"t","withShift":"T"},"KeyU":{"vkey":"VK_U","value":"u","withShift":"U"},"KeyV":{"vkey":"VK_V","value":"v","withShift":"V"},"KeyW":{"vkey":"VK_W","value":"w","withShift":"W"},"KeyX":{"vkey":"VK_X","value":"x","withShift":"X"},"KeyY":{"vkey":"VK_Z","value":"z","withShift":"Z"},"KeyZ":{"vkey":"VK_Y","value":"y","withShift":"Y"},"Digit1":{"vkey":"VK_1","value":"1","withShift":"+","withAltGr":"¦"},"Digit2":{"vkey":"VK_2","value":"2","withShift":"\\"","withAltGr":"@"},"Digit3":{"vkey":"VK_3","value":"3","withShift":"*","withAltGr":"#"},"Digit4":{"vkey":"VK_4","value":"4","withShift":"ç","withAltGr":"°"},"Digit5":{"vkey":"VK_5","value":"5","withShift":"%","withAltGr":"§"},"Digit6":{"vkey":"VK_6","value":"6","withShift":"&","withAltGr":"¬"},"Digit7":{"vkey":"VK_7","value":"7","withShift":"/","withAltGr":"|"},"Digit8":{"vkey":"VK_8","value":"8","withShift":"(","withAltGr":"¢"},"Digit9":{"vkey":"VK_9","value":"9","withShift":")"},"Digit0":{"vkey":"VK_0","value":"0","withShift":"="},"Minus":{"vkey":"VK_OEM_4","value":"\'","withShift":"?","withAltGr":"´"},"Equal":{"vkey":"VK_OEM_6","value":"^","withShift":"`","withAltGr":"~"},"BracketLeft":{"vkey":"VK_OEM_1","value":"ü","withShift":"è","withAltGr":"["},"BracketRight":{"vkey":"VK_OEM_3","value":"¨","withShift":"!","withAltGr":"]"},"Backslash":{"vkey":"VK_OEM_8","value":"$","withShift":"£","withAltGr":"}"},"Semicolon":{"vkey":"VK_OEM_7","value":"ö","withShift":"é"},"Quote":{"vkey":"VK_OEM_5","value":"ä","withShift":"à","withAltGr":"{"},"Backquote":{"vkey":"VK_OEM_2","value":"§","withShift":"°"},"Comma":{"vkey":"VK_OEM_COMMA","value":",","withShift":";"},"Period":{"vkey":"VK_OEM_PERIOD","value":".","withShift":":"},"Slash":{"vkey":"VK_OEM_MINUS","value":"-","withShift":"_"},"IntlBackslash":{"vkey":"VK_OEM_102","value":"<","withShift":">","withAltGr":"\\\\"},"IntlRo":{"vkey":"VK_ABNT_C1"},"IntlYen":{"vkey":"VK_UNKNOWN"}}}');

/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/src/common/keyboard/layouts/en-British-mac.json":
/*!**************************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/src/common/keyboard/layouts/en-British-mac.json ***!
  \**************************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"info":{"id":"com.apple.keylayout.British","lang":"en"},"mapping":{"KeyA":{"value":"a","withShift":"A","withAltGr":"å","withShiftAltGr":"Å"},"KeyB":{"value":"b","withShift":"B","withAltGr":"∫","withShiftAltGr":"ı"},"KeyC":{"value":"c","withShift":"C","withAltGr":"ç","withShiftAltGr":"Ç"},"KeyD":{"value":"d","withShift":"D","withAltGr":"∂","withShiftAltGr":"Î"},"KeyE":{"value":"e","withShift":"E","withAltGr":"´","withShiftAltGr":"‰"},"KeyF":{"value":"f","withShift":"F","withAltGr":"ƒ","withShiftAltGr":"Ï"},"KeyG":{"value":"g","withShift":"G","withAltGr":"©","withShiftAltGr":"Ì"},"KeyH":{"value":"h","withShift":"H","withAltGr":"˙","withShiftAltGr":"Ó"},"KeyI":{"value":"i","withShift":"I","withAltGr":"^","withShiftAltGr":"È"},"KeyJ":{"value":"j","withShift":"J","withAltGr":"∆","withShiftAltGr":"Ô"},"KeyK":{"value":"k","withShift":"K","withAltGr":"˚","withShiftAltGr":""},"KeyL":{"value":"l","withShift":"L","withAltGr":"¬","withShiftAltGr":"Ò"},"KeyM":{"value":"m","withShift":"M","withAltGr":"µ","withShiftAltGr":"˜"},"KeyN":{"value":"n","withShift":"N","withAltGr":"~","withShiftAltGr":"ˆ"},"KeyO":{"value":"o","withShift":"O","withAltGr":"ø","withShiftAltGr":"Ø"},"KeyP":{"value":"p","withShift":"P","withAltGr":"π","withShiftAltGr":"∏"},"KeyQ":{"value":"q","withShift":"Q","withAltGr":"œ","withShiftAltGr":"Œ"},"KeyR":{"value":"r","withShift":"R","withAltGr":"®","withShiftAltGr":"Â"},"KeyS":{"value":"s","withShift":"S","withAltGr":"ß","withShiftAltGr":"Í"},"KeyT":{"value":"t","withShift":"T","withAltGr":"†","withShiftAltGr":"Ê"},"KeyU":{"value":"u","withShift":"U","withAltGr":"¨","withShiftAltGr":"Ë"},"KeyV":{"value":"v","withShift":"V","withAltGr":"√","withShiftAltGr":"◊"},"KeyW":{"value":"w","withShift":"W","withAltGr":"∑","withShiftAltGr":"„"},"KeyX":{"value":"x","withShift":"X","withAltGr":"≈","withShiftAltGr":"Ù"},"KeyY":{"value":"y","withShift":"Y","withAltGr":"¥","withShiftAltGr":"Á"},"KeyZ":{"value":"z","withShift":"Z","withAltGr":"Ω","withShiftAltGr":"Û"},"Digit1":{"value":"1","withShift":"!","withAltGr":"¡","withShiftAltGr":"⁄"},"Digit2":{"value":"2","withShift":"@","withAltGr":"€","withShiftAltGr":"™"},"Digit3":{"value":"3","withShift":"£","withAltGr":"#","withShiftAltGr":"‹"},"Digit4":{"value":"4","withShift":"$","withAltGr":"¢","withShiftAltGr":"›"},"Digit5":{"value":"5","withShift":"%","withAltGr":"∞","withShiftAltGr":"ﬁ"},"Digit6":{"value":"6","withShift":"^","withAltGr":"§","withShiftAltGr":"ﬂ"},"Digit7":{"value":"7","withShift":"&","withAltGr":"¶","withShiftAltGr":"‡"},"Digit8":{"value":"8","withShift":"*","withAltGr":"•","withShiftAltGr":"°"},"Digit9":{"value":"9","withShift":"(","withAltGr":"ª","withShiftAltGr":"·"},"Digit0":{"value":"0","withShift":")","withAltGr":"º","withShiftAltGr":"‚"},"Minus":{"value":"-","withShift":"_","withAltGr":"–","withShiftAltGr":"—"},"Equal":{"value":"=","withShift":"+","withAltGr":"≠","withShiftAltGr":"±"},"BracketLeft":{"value":"[","withShift":"{","withAltGr":"“","withShiftAltGr":"”"},"BracketRight":{"value":"]","withShift":"}","withAltGr":"‘","withShiftAltGr":"’"},"Backslash":{"value":"\\\\","withShift":"|","withAltGr":"«","withShiftAltGr":"»"},"Semicolon":{"value":";","withShift":":","withAltGr":"…","withShiftAltGr":"Ú"},"Quote":{"value":"\'","withShift":"\\"","withAltGr":"æ","withShiftAltGr":"Æ"},"Backquote":{"value":"`","withShift":"~","withAltGr":"`","withShiftAltGr":"Ÿ"},"Comma":{"value":",","withShift":"<","withAltGr":"≤","withShiftAltGr":"¯"},"Period":{"value":".","withShift":">","withAltGr":"≥","withShiftAltGr":"˘"},"Slash":{"value":"/","withShift":"?","withAltGr":"÷","withShiftAltGr":"¿"},"IntlBackslash":{"value":"§","withShift":"±"}}}');

/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/src/common/keyboard/layouts/en-British-pc.json":
/*!*************************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/src/common/keyboard/layouts/en-British-pc.json ***!
  \*************************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"info":{"name":"00000809","id":"","text":"United Kingdom"},"mapping":{"KeyA":{"vkey":"VK_A","value":"a","withShift":"A","withAltGr":"á","withShiftAltGr":"Á"},"KeyB":{"vkey":"VK_B","value":"b","withShift":"B"},"KeyC":{"vkey":"VK_C","value":"c","withShift":"C"},"KeyD":{"vkey":"VK_D","value":"d","withShift":"D"},"KeyE":{"vkey":"VK_E","value":"e","withShift":"E","withAltGr":"é","withShiftAltGr":"É"},"KeyF":{"vkey":"VK_F","value":"f","withShift":"F"},"KeyG":{"vkey":"VK_G","value":"g","withShift":"G"},"KeyH":{"vkey":"VK_H","value":"h","withShift":"H"},"KeyI":{"vkey":"VK_I","value":"i","withShift":"I","withAltGr":"í","withShiftAltGr":"Í"},"KeyJ":{"vkey":"VK_J","value":"j","withShift":"J"},"KeyK":{"vkey":"VK_K","value":"k","withShift":"K"},"KeyL":{"vkey":"VK_L","value":"l","withShift":"L"},"KeyM":{"vkey":"VK_M","value":"m","withShift":"M"},"KeyN":{"vkey":"VK_N","value":"n","withShift":"N"},"KeyO":{"vkey":"VK_O","value":"o","withShift":"O","withAltGr":"ó","withShiftAltGr":"Ó"},"KeyP":{"vkey":"VK_P","value":"p","withShift":"P"},"KeyQ":{"vkey":"VK_Q","value":"q","withShift":"Q"},"KeyR":{"vkey":"VK_R","value":"r","withShift":"R"},"KeyS":{"vkey":"VK_S","value":"s","withShift":"S"},"KeyT":{"vkey":"VK_T","value":"t","withShift":"T"},"KeyU":{"vkey":"VK_U","value":"u","withShift":"U","withAltGr":"ú","withShiftAltGr":"Ú"},"KeyV":{"vkey":"VK_V","value":"v","withShift":"V"},"KeyW":{"vkey":"VK_W","value":"w","withShift":"W"},"KeyX":{"vkey":"VK_X","value":"x","withShift":"X"},"KeyY":{"vkey":"VK_Y","value":"y","withShift":"Y"},"KeyZ":{"vkey":"VK_Z","value":"z","withShift":"Z"},"Digit1":{"vkey":"VK_1","value":"1","withShift":"!"},"Digit2":{"vkey":"VK_2","value":"2","withShift":"\\""},"Digit3":{"vkey":"VK_3","value":"3","withShift":"£"},"Digit4":{"vkey":"VK_4","value":"4","withShift":"$","withAltGr":"€"},"Digit5":{"vkey":"VK_5","value":"5","withShift":"%"},"Digit6":{"vkey":"VK_6","value":"6","withShift":"^"},"Digit7":{"vkey":"VK_7","value":"7","withShift":"&"},"Digit8":{"vkey":"VK_8","value":"8","withShift":"*"},"Digit9":{"vkey":"VK_9","value":"9","withShift":"("},"Digit0":{"vkey":"VK_0","value":"0","withShift":")"},"Minus":{"vkey":"VK_OEM_MINUS","value":"-","withShift":"_"},"Equal":{"vkey":"VK_OEM_PLUS","value":"=","withShift":"+"},"BracketLeft":{"vkey":"VK_OEM_4","value":"[","withShift":"{"},"BracketRight":{"vkey":"VK_OEM_6","value":"]","withShift":"}"},"Backslash":{"vkey":"VK_OEM_7","value":"#","withShift":"~","withAltGr":"\\\\","withShiftAltGr":"|"},"Semicolon":{"vkey":"VK_OEM_1","value":";","withShift":":"},"Quote":{"vkey":"VK_OEM_3","value":"\'","withShift":"@"},"Backquote":{"vkey":"VK_OEM_8","value":"`","withShift":"¬","withAltGr":"¦"},"Comma":{"vkey":"VK_OEM_COMMA","value":",","withShift":"<"},"Period":{"vkey":"VK_OEM_PERIOD","value":".","withShift":">"},"Slash":{"vkey":"VK_OEM_2","value":"/","withShift":"?"},"IntlBackslash":{"vkey":"VK_OEM_5","value":"\\\\","withShift":"|"},"IntlRo":{"vkey":"VK_ABNT_C1"},"IntlYen":{"vkey":"VK_UNKNOWN"}}}');

/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/src/common/keyboard/layouts/en-Colemak-mac.json":
/*!**************************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/src/common/keyboard/layouts/en-Colemak-mac.json ***!
  \**************************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"info":{"id":"com.apple.keylayout.Colemak","lang":"en"},"mapping":{"KeyA":{"value":"a","withShift":"A","withAltGr":"å","withShiftAltGr":"Å"},"KeyB":{"value":"b","withShift":"B","withAltGr":"∫","withShiftAltGr":"ı"},"KeyC":{"value":"c","withShift":"C","withAltGr":"ç","withShiftAltGr":"Ç"},"KeyD":{"value":"s","withShift":"S","withAltGr":"ß","withShiftAltGr":"Í"},"KeyE":{"value":"f","withShift":"F","withAltGr":"ƒ","withShiftAltGr":"Ï"},"KeyF":{"value":"t","withShift":"T","withAltGr":"†","withShiftAltGr":"ˇ"},"KeyG":{"value":"d","withShift":"D","withAltGr":"∂","withShiftAltGr":"Î"},"KeyH":{"value":"h","withShift":"H","withAltGr":"˙","withShiftAltGr":"Ó"},"KeyI":{"value":"u","withShift":"U","withAltGr":"¨","withShiftAltGr":"¨"},"KeyJ":{"value":"n","withShift":"N","withAltGr":"˜","withShiftAltGr":"˜"},"KeyK":{"value":"e","withShift":"E","withAltGr":"´","withShiftAltGr":"´"},"KeyL":{"value":"i","withShift":"I","withAltGr":"ˆ","withShiftAltGr":"ˆ"},"KeyM":{"value":"m","withShift":"M","withAltGr":"µ","withShiftAltGr":"Â"},"KeyN":{"value":"k","withShift":"K","withAltGr":"˚","withShiftAltGr":""},"KeyO":{"value":"y","withShift":"Y","withAltGr":"¥","withShiftAltGr":"Á"},"KeyP":{"value":";","withShift":":","withAltGr":"…","withShiftAltGr":"Ú"},"KeyQ":{"value":"q","withShift":"Q","withAltGr":"œ","withShiftAltGr":"Œ"},"KeyR":{"value":"p","withShift":"P","withAltGr":"π","withShiftAltGr":"∏"},"KeyS":{"value":"r","withShift":"R","withAltGr":"®","withShiftAltGr":"‰"},"KeyT":{"value":"g","withShift":"G","withAltGr":"©","withShiftAltGr":"˝"},"KeyU":{"value":"l","withShift":"L","withAltGr":"¬","withShiftAltGr":"Ò"},"KeyV":{"value":"v","withShift":"V","withAltGr":"√","withShiftAltGr":"◊"},"KeyW":{"value":"w","withShift":"W","withAltGr":"∑","withShiftAltGr":"„"},"KeyX":{"value":"x","withShift":"X","withAltGr":"≈","withShiftAltGr":"˛"},"KeyY":{"value":"j","withShift":"J","withAltGr":"∆","withShiftAltGr":"Ô"},"KeyZ":{"value":"z","withShift":"Z","withAltGr":"Ω","withShiftAltGr":"¸"},"Digit1":{"value":"1","withShift":"!","withAltGr":"¡","withShiftAltGr":"⁄"},"Digit2":{"value":"2","withShift":"@","withAltGr":"™","withShiftAltGr":"€"},"Digit3":{"value":"3","withShift":"#","withAltGr":"£","withShiftAltGr":"‹"},"Digit4":{"value":"4","withShift":"$","withAltGr":"¢","withShiftAltGr":"›"},"Digit5":{"value":"5","withShift":"%","withAltGr":"∞","withShiftAltGr":"ﬁ"},"Digit6":{"value":"6","withShift":"^","withAltGr":"§","withShiftAltGr":"ﬂ"},"Digit7":{"value":"7","withShift":"&","withAltGr":"¶","withShiftAltGr":"‡"},"Digit8":{"value":"8","withShift":"*","withAltGr":"•","withShiftAltGr":"°"},"Digit9":{"value":"9","withShift":"(","withAltGr":"ª","withShiftAltGr":"·"},"Digit0":{"value":"0","withShift":")","withAltGr":"º","withShiftAltGr":"‚"},"Minus":{"value":"-","withShift":"_","withAltGr":"–","withShiftAltGr":"—"},"Equal":{"value":"=","withShift":"+","withAltGr":"≠","withShiftAltGr":"±"},"BracketLeft":{"value":"[","withShift":"{","withAltGr":"“","withShiftAltGr":"”"},"BracketRight":{"value":"]","withShift":"}","withAltGr":"‘","withShiftAltGr":"’"},"Backslash":{"value":"\\\\","withShift":"|","withAltGr":"«","withShiftAltGr":"»"},"Semicolon":{"value":"o","withShift":"O","withAltGr":"ø","withShiftAltGr":"Ø"},"Quote":{"value":"\'","withShift":"\\"","withAltGr":"æ","withShiftAltGr":"Æ"},"Backquote":{"value":"`","withShift":"~","withAltGr":"`","withShiftAltGr":"`"},"Comma":{"value":",","withShift":"<","withAltGr":"≤","withShiftAltGr":"¯"},"Period":{"value":".","withShift":">","withAltGr":"≥","withShiftAltGr":"˘"},"Slash":{"value":"/","withShift":"?","withAltGr":"÷","withShiftAltGr":"¿"},"IntlBackslash":{"value":"§","withShift":"±","withAltGr":"§","withShiftAltGr":"±"}}}');

/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/src/common/keyboard/layouts/en-Dvorak-mac.json":
/*!*************************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/src/common/keyboard/layouts/en-Dvorak-mac.json ***!
  \*************************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"info":{"id":"com.apple.keylayout.Dvorak","lang":"en"},"mapping":{"KeyA":{"value":"a","withShift":"A","withAltGr":"å","withShiftAltGr":"Å"},"KeyB":{"value":"x","withShift":"X","withAltGr":"≈","withShiftAltGr":"˛"},"KeyC":{"value":"j","withShift":"J","withAltGr":"∆","withShiftAltGr":"Ô"},"KeyD":{"value":"e","withShift":"E","withAltGr":"´","withShiftAltGr":"´"},"KeyE":{"value":".","withShift":">","withAltGr":"≥","withShiftAltGr":"˘"},"KeyF":{"value":"u","withShift":"U","withAltGr":"¨","withShiftAltGr":"¨"},"KeyG":{"value":"i","withShift":"I","withAltGr":"ˆ","withShiftAltGr":"ˆ"},"KeyH":{"value":"d","withShift":"D","withAltGr":"∂","withShiftAltGr":"Î"},"KeyI":{"value":"c","withShift":"C","withAltGr":"ç","withShiftAltGr":"Ç"},"KeyJ":{"value":"h","withShift":"H","withAltGr":"˙","withShiftAltGr":"Ó"},"KeyK":{"value":"t","withShift":"T","withAltGr":"†","withShiftAltGr":"ˇ"},"KeyL":{"value":"n","withShift":"N","withAltGr":"˜","withShiftAltGr":"˜"},"KeyM":{"value":"m","withShift":"M","withAltGr":"µ","withShiftAltGr":"Â"},"KeyN":{"value":"b","withShift":"B","withAltGr":"∫","withShiftAltGr":"ı"},"KeyO":{"value":"r","withShift":"R","withAltGr":"®","withShiftAltGr":"‰"},"KeyP":{"value":"l","withShift":"L","withAltGr":"¬","withShiftAltGr":"Ò"},"KeyQ":{"value":"\'","withShift":"\\"","withAltGr":"æ","withShiftAltGr":"Æ"},"KeyR":{"value":"p","withShift":"P","withAltGr":"π","withShiftAltGr":"∏"},"KeyS":{"value":"o","withShift":"O","withAltGr":"ø","withShiftAltGr":"Ø"},"KeyT":{"value":"y","withShift":"Y","withAltGr":"¥","withShiftAltGr":"Á"},"KeyU":{"value":"g","withShift":"G","withAltGr":"©","withShiftAltGr":"˝"},"KeyV":{"value":"k","withShift":"K","withAltGr":"˚","withShiftAltGr":""},"KeyW":{"value":",","withShift":"<","withAltGr":"≤","withShiftAltGr":"¯"},"KeyX":{"value":"q","withShift":"Q","withAltGr":"œ","withShiftAltGr":"Œ"},"KeyY":{"value":"f","withShift":"F","withAltGr":"ƒ","withShiftAltGr":"Ï"},"KeyZ":{"value":";","withShift":":","withAltGr":"…","withShiftAltGr":"Ú"},"Digit1":{"value":"1","withShift":"!","withAltGr":"¡","withShiftAltGr":"⁄"},"Digit2":{"value":"2","withShift":"@","withAltGr":"™","withShiftAltGr":"€"},"Digit3":{"value":"3","withShift":"#","withAltGr":"£","withShiftAltGr":"‹"},"Digit4":{"value":"4","withShift":"$","withAltGr":"¢","withShiftAltGr":"›"},"Digit5":{"value":"5","withShift":"%","withAltGr":"∞","withShiftAltGr":"ﬁ"},"Digit6":{"value":"6","withShift":"^","withAltGr":"§","withShiftAltGr":"ﬂ"},"Digit7":{"value":"7","withShift":"&","withAltGr":"¶","withShiftAltGr":"‡"},"Digit8":{"value":"8","withShift":"*","withAltGr":"•","withShiftAltGr":"°"},"Digit9":{"value":"9","withShift":"(","withAltGr":"ª","withShiftAltGr":"·"},"Digit0":{"value":"0","withShift":")","withAltGr":"º","withShiftAltGr":"‚"},"Minus":{"value":"[","withShift":"{","withAltGr":"“","withShiftAltGr":"”"},"Equal":{"value":"]","withShift":"}","withAltGr":"‘","withShiftAltGr":"’"},"BracketLeft":{"value":"/","withShift":"?","withAltGr":"÷","withShiftAltGr":"¿"},"BracketRight":{"value":"=","withShift":"+","withAltGr":"≠","withShiftAltGr":"±"},"Backslash":{"value":"\\\\","withShift":"|","withAltGr":"«","withShiftAltGr":"»"},"Semicolon":{"value":"s","withShift":"S","withAltGr":"ß","withShiftAltGr":"Í"},"Quote":{"value":"-","withShift":"_","withAltGr":"–","withShiftAltGr":"—"},"Backquote":{"value":"`","withShift":"~","withAltGr":"`","withShiftAltGr":"`"},"Comma":{"value":"w","withShift":"W","withAltGr":"∑","withShiftAltGr":"„"},"Period":{"value":"v","withShift":"V","withAltGr":"√","withShiftAltGr":"◊"},"Slash":{"value":"z","withShift":"Z","withAltGr":"Ω","withShiftAltGr":"¸"},"IntlBackslash":{"value":"§","withShift":"±","withAltGr":"§","withShiftAltGr":"±"}}}');

/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/src/common/keyboard/layouts/en-Dvorak-pc.json":
/*!************************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/src/common/keyboard/layouts/en-Dvorak-pc.json ***!
  \************************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"info":{"name":"00010409","id":"0002","text":"United States-Dvorak"},"mapping":{"KeyA":{"vkey":"VK_A","value":"a","withShift":"A"},"KeyB":{"vkey":"VK_X","value":"x","withShift":"X"},"KeyC":{"vkey":"VK_J","value":"j","withShift":"J"},"KeyD":{"vkey":"VK_E","value":"e","withShift":"E"},"KeyE":{"vkey":"VK_OEM_PERIOD","value":".","withShift":">"},"KeyF":{"vkey":"VK_U","value":"u","withShift":"U"},"KeyG":{"vkey":"VK_I","value":"i","withShift":"I"},"KeyH":{"vkey":"VK_D","value":"d","withShift":"D"},"KeyI":{"vkey":"VK_C","value":"c","withShift":"C"},"KeyJ":{"vkey":"VK_H","value":"h","withShift":"H"},"KeyK":{"vkey":"VK_T","value":"t","withShift":"T"},"KeyL":{"vkey":"VK_N","value":"n","withShift":"N"},"KeyM":{"vkey":"VK_M","value":"m","withShift":"M"},"KeyN":{"vkey":"VK_B","value":"b","withShift":"B"},"KeyO":{"vkey":"VK_R","value":"r","withShift":"R"},"KeyP":{"vkey":"VK_L","value":"l","withShift":"L"},"KeyQ":{"vkey":"VK_OEM_7","value":"\'","withShift":"\\""},"KeyR":{"vkey":"VK_P","value":"p","withShift":"P"},"KeyS":{"vkey":"VK_O","value":"o","withShift":"O"},"KeyT":{"vkey":"VK_Y","value":"y","withShift":"Y"},"KeyU":{"vkey":"VK_G","value":"g","withShift":"G"},"KeyV":{"vkey":"VK_K","value":"k","withShift":"K"},"KeyW":{"vkey":"VK_OEM_COMMA","value":",","withShift":"<"},"KeyX":{"vkey":"VK_Q","value":"q","withShift":"Q"},"KeyY":{"vkey":"VK_F","value":"f","withShift":"F"},"KeyZ":{"vkey":"VK_OEM_1","value":";","withShift":":"},"Digit1":{"vkey":"VK_1","value":"1","withShift":"!"},"Digit2":{"vkey":"VK_2","value":"2","withShift":"@"},"Digit3":{"vkey":"VK_3","value":"3","withShift":"#"},"Digit4":{"vkey":"VK_4","value":"4","withShift":"$"},"Digit5":{"vkey":"VK_5","value":"5","withShift":"%"},"Digit6":{"vkey":"VK_6","value":"6","withShift":"^"},"Digit7":{"vkey":"VK_7","value":"7","withShift":"&"},"Digit8":{"vkey":"VK_8","value":"8","withShift":"*"},"Digit9":{"vkey":"VK_9","value":"9","withShift":"("},"Digit0":{"vkey":"VK_0","value":"0","withShift":")"},"Minus":{"vkey":"VK_OEM_4","value":"[","withShift":"{"},"Equal":{"vkey":"VK_OEM_6","value":"]","withShift":"}"},"BracketLeft":{"vkey":"VK_OEM_2","value":"/","withShift":"?"},"BracketRight":{"vkey":"VK_OEM_PLUS","value":"=","withShift":"+"},"Backslash":{"vkey":"VK_OEM_5","value":"\\\\","withShift":"|"},"Semicolon":{"vkey":"VK_S","value":"s","withShift":"S"},"Quote":{"vkey":"VK_OEM_MINUS","value":"-","withShift":"_"},"Backquote":{"vkey":"VK_OEM_3","value":"`","withShift":"~"},"Comma":{"vkey":"VK_W","value":"w","withShift":"W"},"Period":{"vkey":"VK_V","value":"v","withShift":"V"},"Slash":{"vkey":"VK_Z","value":"z","withShift":"Z"},"IntlBackslash":{"vkey":"VK_OEM_102","value":"\\\\","withShift":"|"},"IntlRo":{"vkey":"VK_ABNT_C1"},"IntlYen":{"vkey":"VK_UNKNOWN"}}}');

/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/src/common/keyboard/layouts/en-Dvorak_Lefthanded-mac.json":
/*!************************************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/src/common/keyboard/layouts/en-Dvorak_Lefthanded-mac.json ***!
  \************************************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"info":{"id":"com.apple.keylayout.Dvorak-Left","lang":"en"},"mapping":{"KeyA":{"value":"-","withShift":"_","withAltGr":"–","withShiftAltGr":"—"},"KeyB":{"value":"w","withShift":"W","withAltGr":"∑","withShiftAltGr":"„"},"KeyC":{"value":"g","withShift":"G","withAltGr":"©","withShiftAltGr":"˝"},"KeyD":{"value":"c","withShift":"C","withAltGr":"ç","withShiftAltGr":"Ç"},"KeyE":{"value":"b","withShift":"B","withAltGr":"∫","withShiftAltGr":"ı"},"KeyF":{"value":"d","withShift":"D","withAltGr":"∂","withShiftAltGr":"Î"},"KeyG":{"value":"t","withShift":"T","withAltGr":"†","withShiftAltGr":"ˇ"},"KeyH":{"value":"h","withShift":"H","withAltGr":"˙","withShiftAltGr":"Ó"},"KeyI":{"value":"o","withShift":"O","withAltGr":"ø","withShiftAltGr":"Ø"},"KeyJ":{"value":"e","withShift":"E","withAltGr":"´","withShiftAltGr":"´"},"KeyK":{"value":"a","withShift":"A","withAltGr":"å","withShiftAltGr":"Å"},"KeyL":{"value":"z","withShift":"Z","withAltGr":"Ω","withShiftAltGr":"¸"},"KeyM":{"value":"i","withShift":"I","withAltGr":"ˆ","withShiftAltGr":"ˆ"},"KeyN":{"value":"n","withShift":"N","withAltGr":"˜","withShiftAltGr":"˜"},"KeyO":{"value":".","withShift":">","withAltGr":"≥","withShiftAltGr":"˘"},"KeyP":{"value":"6","withShift":"^","withAltGr":"§","withShiftAltGr":"ﬂ"},"KeyQ":{"value":";","withShift":":","withAltGr":"…","withShiftAltGr":"Ú"},"KeyR":{"value":"y","withShift":"Y","withAltGr":"¥","withShiftAltGr":"Á"},"KeyS":{"value":"k","withShift":"K","withAltGr":"˚","withShiftAltGr":""},"KeyT":{"value":"u","withShift":"U","withAltGr":"¨","withShiftAltGr":"¨"},"KeyU":{"value":"s","withShift":"S","withAltGr":"ß","withShiftAltGr":"Í"},"KeyV":{"value":"v","withShift":"V","withAltGr":"√","withShiftAltGr":"◊"},"KeyW":{"value":"q","withShift":"Q","withAltGr":"œ","withShiftAltGr":"Œ"},"KeyX":{"value":"x","withShift":"X","withAltGr":"≈","withShiftAltGr":"˛"},"KeyY":{"value":"r","withShift":"R","withAltGr":"®","withShiftAltGr":"‰"},"KeyZ":{"value":"\'","withShift":"\\"","withAltGr":"æ","withShiftAltGr":"Æ"},"Digit1":{"value":"[","withShift":"{","withAltGr":"“","withShiftAltGr":"”"},"Digit2":{"value":"]","withShift":"}","withAltGr":"‘","withShiftAltGr":"’"},"Digit3":{"value":"/","withShift":"?","withAltGr":"÷","withShiftAltGr":"¿"},"Digit4":{"value":"p","withShift":"P","withAltGr":"π","withShiftAltGr":"∏"},"Digit5":{"value":"f","withShift":"F","withAltGr":"ƒ","withShiftAltGr":"Ï"},"Digit6":{"value":"m","withShift":"M","withAltGr":"µ","withShiftAltGr":"Â"},"Digit7":{"value":"l","withShift":"L","withAltGr":"¬","withShiftAltGr":"Ò"},"Digit8":{"value":"j","withShift":"J","withAltGr":"∆","withShiftAltGr":"Ô"},"Digit9":{"value":"4","withShift":"$","withAltGr":"¢","withShiftAltGr":"›"},"Digit0":{"value":"3","withShift":"#","withAltGr":"£","withShiftAltGr":"‹"},"Minus":{"value":"2","withShift":"@","withAltGr":"™","withShiftAltGr":"€"},"Equal":{"value":"1","withShift":"!","withAltGr":"¡","withShiftAltGr":"⁄"},"BracketLeft":{"value":"5","withShift":"%","withAltGr":"∞","withShiftAltGr":"ﬁ"},"BracketRight":{"value":"=","withShift":"+","withAltGr":"≠","withShiftAltGr":"±"},"Backslash":{"value":"\\\\","withShift":"|","withAltGr":"«","withShiftAltGr":"»"},"Semicolon":{"value":"8","withShift":"*","withAltGr":"•","withShiftAltGr":"°"},"Quote":{"value":"7","withShift":"&","withAltGr":"¶","withShiftAltGr":"‡"},"Backquote":{"value":"`","withShift":"~","withAltGr":"`","withShiftAltGr":"`"},"Comma":{"value":",","withShift":"<","withAltGr":"≤","withShiftAltGr":"¯"},"Period":{"value":"0","withShift":")","withAltGr":"º","withShiftAltGr":"‚"},"Slash":{"value":"9","withShift":"(","withAltGr":"ª","withShiftAltGr":"·"},"IntlBackslash":{"value":"§","withShift":"±","withAltGr":"§","withShiftAltGr":"±"}}}');

/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/src/common/keyboard/layouts/en-Dvorak_Lefthanded-pc.json":
/*!***********************************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/src/common/keyboard/layouts/en-Dvorak_Lefthanded-pc.json ***!
  \***********************************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"info":{"name":"00030409","id":"001A","text":"United States-Dvorak for left hand"},"mapping":{"KeyA":{"vkey":"VK_OEM_MINUS","value":"-","withShift":"_"},"KeyB":{"vkey":"VK_W","value":"w","withShift":"W"},"KeyC":{"vkey":"VK_G","value":"g","withShift":"G"},"KeyD":{"vkey":"VK_C","value":"c","withShift":"C"},"KeyE":{"vkey":"VK_B","value":"b","withShift":"B"},"KeyF":{"vkey":"VK_D","value":"d","withShift":"D"},"KeyG":{"vkey":"VK_T","value":"t","withShift":"T"},"KeyH":{"vkey":"VK_H","value":"h","withShift":"H"},"KeyI":{"vkey":"VK_O","value":"o","withShift":"O"},"KeyJ":{"vkey":"VK_E","value":"e","withShift":"E"},"KeyK":{"vkey":"VK_A","value":"a","withShift":"A"},"KeyL":{"vkey":"VK_Z","value":"z","withShift":"Z"},"KeyM":{"vkey":"VK_I","value":"i","withShift":"I"},"KeyN":{"vkey":"VK_N","value":"n","withShift":"N"},"KeyO":{"vkey":"VK_OEM_PERIOD","value":".","withShift":">"},"KeyP":{"vkey":"VK_6","value":"6","withShift":"^"},"KeyQ":{"vkey":"VK_OEM_1","value":";","withShift":":"},"KeyR":{"vkey":"VK_Y","value":"y","withShift":"Y"},"KeyS":{"vkey":"VK_K","value":"k","withShift":"K"},"KeyT":{"vkey":"VK_U","value":"u","withShift":"U"},"KeyU":{"vkey":"VK_S","value":"s","withShift":"S"},"KeyV":{"vkey":"VK_V","value":"v","withShift":"V"},"KeyW":{"vkey":"VK_Q","value":"q","withShift":"Q"},"KeyX":{"vkey":"VK_X","value":"x","withShift":"X"},"KeyY":{"vkey":"VK_R","value":"r","withShift":"R"},"KeyZ":{"vkey":"VK_OEM_7","value":"\'","withShift":"\\""},"Digit1":{"vkey":"VK_OEM_4","value":"[","withShift":"{"},"Digit2":{"vkey":"VK_OEM_6","value":"]","withShift":"}"},"Digit3":{"vkey":"VK_OEM_2","value":"/","withShift":"?"},"Digit4":{"vkey":"VK_P","value":"p","withShift":"P"},"Digit5":{"vkey":"VK_F","value":"f","withShift":"F"},"Digit6":{"vkey":"VK_M","value":"m","withShift":"M"},"Digit7":{"vkey":"VK_L","value":"l","withShift":"L"},"Digit8":{"vkey":"VK_J","value":"j","withShift":"J"},"Digit9":{"vkey":"VK_4","value":"4","withShift":"$"},"Digit0":{"vkey":"VK_3","value":"3","withShift":"#"},"Minus":{"vkey":"VK_2","value":"2","withShift":"@"},"Equal":{"vkey":"VK_1","value":"1","withShift":"!"},"BracketLeft":{"vkey":"VK_5","value":"5","withShift":"%"},"BracketRight":{"vkey":"VK_OEM_PLUS","value":"=","withShift":"+"},"Backslash":{"vkey":"VK_OEM_5","value":"\\\\","withShift":"|"},"Semicolon":{"vkey":"VK_8","value":"8","withShift":"*"},"Quote":{"vkey":"VK_7","value":"7","withShift":"&"},"Backquote":{"vkey":"VK_OEM_3","value":"`","withShift":"~"},"Comma":{"vkey":"VK_OEM_COMMA","value":",","withShift":"<"},"Period":{"vkey":"VK_0","value":"0","withShift":")"},"Slash":{"vkey":"VK_9","value":"9","withShift":"("},"IntlBackslash":{"vkey":"VK_OEM_102","value":"\\\\","withShift":"|"},"IntlRo":{"vkey":"VK_ABNT_C1"},"IntlYen":{"vkey":"VK_UNKNOWN"}}}');

/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/src/common/keyboard/layouts/en-Dvorak_Righthanded-mac.json":
/*!*************************************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/src/common/keyboard/layouts/en-Dvorak_Righthanded-mac.json ***!
  \*************************************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"info":{"id":"com.apple.keylayout.Dvorak-Right","lang":"en"},"mapping":{"KeyA":{"value":"7","withShift":"&","withAltGr":"¶","withShiftAltGr":"‡"},"KeyB":{"value":"i","withShift":"I","withAltGr":"ˆ","withShiftAltGr":"ˆ"},"KeyC":{"value":"x","withShift":"X","withAltGr":"≈","withShiftAltGr":"˛"},"KeyD":{"value":"z","withShift":"Z","withAltGr":"Ω","withShiftAltGr":"¸"},"KeyE":{"value":"q","withShift":"Q","withAltGr":"œ","withShiftAltGr":"Œ"},"KeyF":{"value":"a","withShift":"A","withAltGr":"å","withShiftAltGr":"Å"},"KeyG":{"value":"e","withShift":"E","withAltGr":"´","withShiftAltGr":"´"},"KeyH":{"value":"h","withShift":"H","withAltGr":"˙","withShiftAltGr":"Ó"},"KeyI":{"value":"u","withShift":"U","withAltGr":"¨","withShiftAltGr":"¨"},"KeyJ":{"value":"t","withShift":"T","withAltGr":"†","withShiftAltGr":"ˇ"},"KeyK":{"value":"d","withShift":"D","withAltGr":"∂","withShiftAltGr":"Î"},"KeyL":{"value":"c","withShift":"C","withAltGr":"ç","withShiftAltGr":"Ç"},"KeyM":{"value":"w","withShift":"W","withAltGr":"∑","withShiftAltGr":"„"},"KeyN":{"value":"n","withShift":"N","withAltGr":"˜","withShiftAltGr":"˜"},"KeyO":{"value":"y","withShift":"Y","withAltGr":"¥","withShiftAltGr":"Á"},"KeyP":{"value":"b","withShift":"B","withAltGr":"∫","withShiftAltGr":"ı"},"KeyQ":{"value":"5","withShift":"%","withAltGr":"∞","withShiftAltGr":"ﬁ"},"KeyR":{"value":".","withShift":">","withAltGr":"≥","withShiftAltGr":"˘"},"KeyS":{"value":"8","withShift":"*","withAltGr":"•","withShiftAltGr":"°"},"KeyT":{"value":"o","withShift":"O","withAltGr":"ø","withShiftAltGr":"Ø"},"KeyU":{"value":"s","withShift":"S","withAltGr":"ß","withShiftAltGr":"Í"},"KeyV":{"value":",","withShift":"<","withAltGr":"≤","withShiftAltGr":"¯"},"KeyW":{"value":"6","withShift":"^","withAltGr":"§","withShiftAltGr":"ﬂ"},"KeyX":{"value":"0","withShift":")","withAltGr":"º","withShiftAltGr":"‚"},"KeyY":{"value":"r","withShift":"R","withAltGr":"®","withShiftAltGr":"‰"},"KeyZ":{"value":"9","withShift":"(","withAltGr":"ª","withShiftAltGr":"·"},"Digit1":{"value":"1","withShift":"!","withAltGr":"¡","withShiftAltGr":"⁄"},"Digit2":{"value":"2","withShift":"@","withAltGr":"™","withShiftAltGr":"€"},"Digit3":{"value":"3","withShift":"#","withAltGr":"£","withShiftAltGr":"‹"},"Digit4":{"value":"4","withShift":"$","withAltGr":"¢","withShiftAltGr":"›"},"Digit5":{"value":"j","withShift":"J","withAltGr":"∆","withShiftAltGr":"Ô"},"Digit6":{"value":"l","withShift":"L","withAltGr":"¬","withShiftAltGr":"Ò"},"Digit7":{"value":"m","withShift":"M","withAltGr":"µ","withShiftAltGr":"Â"},"Digit8":{"value":"f","withShift":"F","withAltGr":"ƒ","withShiftAltGr":"Ï"},"Digit9":{"value":"p","withShift":"P","withAltGr":"π","withShiftAltGr":"∏"},"Digit0":{"value":"/","withShift":"?","withAltGr":"÷","withShiftAltGr":"¿"},"Minus":{"value":"[","withShift":"{","withAltGr":"“","withShiftAltGr":"”"},"Equal":{"value":"]","withShift":"}","withAltGr":"‘","withShiftAltGr":"’"},"BracketLeft":{"value":";","withShift":":","withAltGr":"…","withShiftAltGr":"Ú"},"BracketRight":{"value":"=","withShift":"+","withAltGr":"≠","withShiftAltGr":"±"},"Backslash":{"value":"\\\\","withShift":"|","withAltGr":"«","withShiftAltGr":"»"},"Semicolon":{"value":"k","withShift":"K","withAltGr":"˚","withShiftAltGr":""},"Quote":{"value":"-","withShift":"_","withAltGr":"–","withShiftAltGr":"—"},"Backquote":{"value":"`","withShift":"~","withAltGr":"`","withShiftAltGr":"`"},"Comma":{"value":"v","withShift":"V","withAltGr":"√","withShiftAltGr":"◊"},"Period":{"value":"g","withShift":"G","withAltGr":"©","withShiftAltGr":"˝"},"Slash":{"value":"\'","withShift":"\\"","withAltGr":"æ","withShiftAltGr":"Æ"},"IntlBackslash":{"value":"§","withShift":"±","withAltGr":"§","withShiftAltGr":"±"}}}');

/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/src/common/keyboard/layouts/en-Dvorak_Righthanded-pc.json":
/*!************************************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/src/common/keyboard/layouts/en-Dvorak_Righthanded-pc.json ***!
  \************************************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"info":{"name":"00040409","id":"001B","text":"United States-Dvorak for right hand"},"mapping":{"KeyA":{"vkey":"VK_7","value":"7","withShift":"&"},"KeyB":{"vkey":"VK_I","value":"i","withShift":"I"},"KeyC":{"vkey":"VK_X","value":"x","withShift":"X"},"KeyD":{"vkey":"VK_Z","value":"z","withShift":"Z"},"KeyE":{"vkey":"VK_Q","value":"q","withShift":"Q"},"KeyF":{"vkey":"VK_A","value":"a","withShift":"A"},"KeyG":{"vkey":"VK_E","value":"e","withShift":"E"},"KeyH":{"vkey":"VK_H","value":"h","withShift":"H"},"KeyI":{"vkey":"VK_U","value":"u","withShift":"U"},"KeyJ":{"vkey":"VK_T","value":"t","withShift":"T"},"KeyK":{"vkey":"VK_D","value":"d","withShift":"D"},"KeyL":{"vkey":"VK_C","value":"c","withShift":"C"},"KeyM":{"vkey":"VK_W","value":"w","withShift":"W"},"KeyN":{"vkey":"VK_N","value":"n","withShift":"N"},"KeyO":{"vkey":"VK_Y","value":"y","withShift":"Y"},"KeyP":{"vkey":"VK_B","value":"b","withShift":"B"},"KeyQ":{"vkey":"VK_5","value":"5","withShift":"%"},"KeyR":{"vkey":"VK_OEM_PERIOD","value":".","withShift":">"},"KeyS":{"vkey":"VK_8","value":"8","withShift":"*"},"KeyT":{"vkey":"VK_O","value":"o","withShift":"O"},"KeyU":{"vkey":"VK_S","value":"s","withShift":"S"},"KeyV":{"vkey":"VK_OEM_COMMA","value":",","withShift":"<"},"KeyW":{"vkey":"VK_6","value":"6","withShift":"^"},"KeyX":{"vkey":"VK_0","value":"0","withShift":")"},"KeyY":{"vkey":"VK_R","value":"r","withShift":"R"},"KeyZ":{"vkey":"VK_9","value":"9","withShift":"("},"Digit1":{"vkey":"VK_1","value":"1","withShift":"!"},"Digit2":{"vkey":"VK_2","value":"2","withShift":"@"},"Digit3":{"vkey":"VK_3","value":"3","withShift":"#"},"Digit4":{"vkey":"VK_4","value":"4","withShift":"$"},"Digit5":{"vkey":"VK_J","value":"j","withShift":"J"},"Digit6":{"vkey":"VK_L","value":"l","withShift":"L"},"Digit7":{"vkey":"VK_M","value":"m","withShift":"M"},"Digit8":{"vkey":"VK_F","value":"f","withShift":"F"},"Digit9":{"vkey":"VK_P","value":"p","withShift":"P"},"Digit0":{"vkey":"VK_OEM_2","value":"/","withShift":"?"},"Minus":{"vkey":"VK_OEM_4","value":"[","withShift":"{"},"Equal":{"vkey":"VK_OEM_6","value":"]","withShift":"}"},"BracketLeft":{"vkey":"VK_OEM_1","value":";","withShift":":"},"BracketRight":{"vkey":"VK_OEM_PLUS","value":"=","withShift":"+"},"Backslash":{"vkey":"VK_OEM_5","value":"\\\\","withShift":"|"},"Semicolon":{"vkey":"VK_K","value":"k","withShift":"K"},"Quote":{"vkey":"VK_OEM_MINUS","value":"-","withShift":"_"},"Backquote":{"vkey":"VK_OEM_3","value":"`","withShift":"~"},"Comma":{"vkey":"VK_V","value":"v","withShift":"V"},"Period":{"vkey":"VK_G","value":"g","withShift":"G"},"Slash":{"vkey":"VK_OEM_7","value":"\'","withShift":"\\""},"IntlBackslash":{"vkey":"VK_OEM_102","value":"\\\\","withShift":"|"},"IntlRo":{"vkey":"VK_ABNT_C1"},"IntlYen":{"vkey":"VK_UNKNOWN"}}}');

/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/src/common/keyboard/layouts/en-US-mac.json":
/*!*********************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/src/common/keyboard/layouts/en-US-mac.json ***!
  \*********************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"info":{"id":"com.apple.keylayout.US","lang":"en"},"mapping":{"KeyA":{"value":"a","withShift":"A","withAltGr":"å","withShiftAltGr":"Å"},"KeyB":{"value":"b","withShift":"B","withAltGr":"∫","withShiftAltGr":"ı"},"KeyC":{"value":"c","withShift":"C","withAltGr":"ç","withShiftAltGr":"Ç"},"KeyD":{"value":"d","withShift":"D","withAltGr":"∂","withShiftAltGr":"Î"},"KeyE":{"value":"e","withShift":"E","withAltGr":"´","withShiftAltGr":"´"},"KeyF":{"value":"f","withShift":"F","withAltGr":"ƒ","withShiftAltGr":"Ï"},"KeyG":{"value":"g","withShift":"G","withAltGr":"©","withShiftAltGr":"˝"},"KeyH":{"value":"h","withShift":"H","withAltGr":"˙","withShiftAltGr":"Ó"},"KeyI":{"value":"i","withShift":"I","withAltGr":"ˆ","withShiftAltGr":"ˆ"},"KeyJ":{"value":"j","withShift":"J","withAltGr":"∆","withShiftAltGr":"Ô"},"KeyK":{"value":"k","withShift":"K","withAltGr":"˚","withShiftAltGr":""},"KeyL":{"value":"l","withShift":"L","withAltGr":"¬","withShiftAltGr":"Ò"},"KeyM":{"value":"m","withShift":"M","withAltGr":"µ","withShiftAltGr":"Â"},"KeyN":{"value":"n","withShift":"N","withAltGr":"˜","withShiftAltGr":"˜"},"KeyO":{"value":"o","withShift":"O","withAltGr":"ø","withShiftAltGr":"Ø"},"KeyP":{"value":"p","withShift":"P","withAltGr":"π","withShiftAltGr":"∏"},"KeyQ":{"value":"q","withShift":"Q","withAltGr":"œ","withShiftAltGr":"Œ"},"KeyR":{"value":"r","withShift":"R","withAltGr":"®","withShiftAltGr":"‰"},"KeyS":{"value":"s","withShift":"S","withAltGr":"ß","withShiftAltGr":"Í"},"KeyT":{"value":"t","withShift":"T","withAltGr":"†","withShiftAltGr":"ˇ"},"KeyU":{"value":"u","withShift":"U","withAltGr":"¨","withShiftAltGr":"¨"},"KeyV":{"value":"v","withShift":"V","withAltGr":"√","withShiftAltGr":"◊"},"KeyW":{"value":"w","withShift":"W","withAltGr":"∑","withShiftAltGr":"„"},"KeyX":{"value":"x","withShift":"X","withAltGr":"≈","withShiftAltGr":"˛"},"KeyY":{"value":"y","withShift":"Y","withAltGr":"¥","withShiftAltGr":"Á"},"KeyZ":{"value":"z","withShift":"Z","withAltGr":"Ω","withShiftAltGr":"¸"},"Digit1":{"value":"1","withShift":"!","withAltGr":"¡","withShiftAltGr":"⁄"},"Digit2":{"value":"2","withShift":"@","withAltGr":"™","withShiftAltGr":"€"},"Digit3":{"value":"3","withShift":"#","withAltGr":"£","withShiftAltGr":"‹"},"Digit4":{"value":"4","withShift":"$","withAltGr":"¢","withShiftAltGr":"›"},"Digit5":{"value":"5","withShift":"%","withAltGr":"∞","withShiftAltGr":"ﬁ"},"Digit6":{"value":"6","withShift":"^","withAltGr":"§","withShiftAltGr":"ﬂ"},"Digit7":{"value":"7","withShift":"&","withAltGr":"¶","withShiftAltGr":"‡"},"Digit8":{"value":"8","withShift":"*","withAltGr":"•","withShiftAltGr":"°"},"Digit9":{"value":"9","withShift":"(","withAltGr":"ª","withShiftAltGr":"·"},"Digit0":{"value":"0","withShift":")","withAltGr":"º","withShiftAltGr":"‚"},"Minus":{"value":"-","withShift":"_","withAltGr":"–","withShiftAltGr":"—"},"Equal":{"value":"=","withShift":"+","withAltGr":"≠","withShiftAltGr":"±"},"BracketLeft":{"value":"[","withShift":"{","withAltGr":"“","withShiftAltGr":"”"},"BracketRight":{"value":"]","withShift":"}","withAltGr":"‘","withShiftAltGr":"’"},"Backslash":{"value":"\\\\","withShift":"|","withAltGr":"«","withShiftAltGr":"»"},"Semicolon":{"value":";","withShift":":","withAltGr":"…","withShiftAltGr":"Ú"},"Quote":{"value":"\'","withShift":"\\"","withAltGr":"æ","withShiftAltGr":"Æ"},"Backquote":{"value":"`","withShift":"~","withAltGr":"`","withShiftAltGr":"`"},"Comma":{"value":",","withShift":"<","withAltGr":"≤","withShiftAltGr":"¯"},"Period":{"value":".","withShift":">","withAltGr":"≥","withShiftAltGr":"˘"},"Slash":{"value":"/","withShift":"?","withAltGr":"÷","withShiftAltGr":"¿"},"IntlBackslash":{"value":"§","withShift":"±","withAltGr":"§","withShiftAltGr":"±"}}}');

/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/src/common/keyboard/layouts/en-US-pc.json":
/*!********************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/src/common/keyboard/layouts/en-US-pc.json ***!
  \********************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"info":{"name":"00000409","id":"","text":"US"},"mapping":{"KeyA":{"vkey":"VK_A","value":"a","withShift":"A"},"KeyB":{"vkey":"VK_B","value":"b","withShift":"B"},"KeyC":{"vkey":"VK_C","value":"c","withShift":"C"},"KeyD":{"vkey":"VK_D","value":"d","withShift":"D"},"KeyE":{"vkey":"VK_E","value":"e","withShift":"E"},"KeyF":{"vkey":"VK_F","value":"f","withShift":"F"},"KeyG":{"vkey":"VK_G","value":"g","withShift":"G"},"KeyH":{"vkey":"VK_H","value":"h","withShift":"H"},"KeyI":{"vkey":"VK_I","value":"i","withShift":"I"},"KeyJ":{"vkey":"VK_J","value":"j","withShift":"J"},"KeyK":{"vkey":"VK_K","value":"k","withShift":"K"},"KeyL":{"vkey":"VK_L","value":"l","withShift":"L"},"KeyM":{"vkey":"VK_M","value":"m","withShift":"M"},"KeyN":{"vkey":"VK_N","value":"n","withShift":"N"},"KeyO":{"vkey":"VK_O","value":"o","withShift":"O"},"KeyP":{"vkey":"VK_P","value":"p","withShift":"P"},"KeyQ":{"vkey":"VK_Q","value":"q","withShift":"Q"},"KeyR":{"vkey":"VK_R","value":"r","withShift":"R"},"KeyS":{"vkey":"VK_S","value":"s","withShift":"S"},"KeyT":{"vkey":"VK_T","value":"t","withShift":"T"},"KeyU":{"vkey":"VK_U","value":"u","withShift":"U"},"KeyV":{"vkey":"VK_V","value":"v","withShift":"V"},"KeyW":{"vkey":"VK_W","value":"w","withShift":"W"},"KeyX":{"vkey":"VK_X","value":"x","withShift":"X"},"KeyY":{"vkey":"VK_Y","value":"y","withShift":"Y"},"KeyZ":{"vkey":"VK_Z","value":"z","withShift":"Z"},"Digit1":{"vkey":"VK_1","value":"1","withShift":"!"},"Digit2":{"vkey":"VK_2","value":"2","withShift":"@"},"Digit3":{"vkey":"VK_3","value":"3","withShift":"#"},"Digit4":{"vkey":"VK_4","value":"4","withShift":"$"},"Digit5":{"vkey":"VK_5","value":"5","withShift":"%"},"Digit6":{"vkey":"VK_6","value":"6","withShift":"^"},"Digit7":{"vkey":"VK_7","value":"7","withShift":"&"},"Digit8":{"vkey":"VK_8","value":"8","withShift":"*"},"Digit9":{"vkey":"VK_9","value":"9","withShift":"("},"Digit0":{"vkey":"VK_0","value":"0","withShift":")"},"Minus":{"vkey":"VK_OEM_MINUS","value":"-","withShift":"_"},"Equal":{"vkey":"VK_OEM_PLUS","value":"=","withShift":"+"},"BracketLeft":{"vkey":"VK_OEM_4","value":"[","withShift":"{"},"BracketRight":{"vkey":"VK_OEM_6","value":"]","withShift":"}"},"Backslash":{"vkey":"VK_OEM_5","value":"\\\\","withShift":"|"},"Semicolon":{"vkey":"VK_OEM_1","value":";","withShift":":"},"Quote":{"vkey":"VK_OEM_7","value":"\'","withShift":"\\""},"Backquote":{"vkey":"VK_OEM_3","value":"`","withShift":"~"},"Comma":{"vkey":"VK_OEM_COMMA","value":",","withShift":"<"},"Period":{"vkey":"VK_OEM_PERIOD","value":".","withShift":">"},"Slash":{"vkey":"VK_OEM_2","value":"/","withShift":"?"},"IntlBackslash":{"vkey":"VK_OEM_102","value":"\\\\","withShift":"|"},"IntlRo":{"vkey":"VK_ABNT_C1"},"IntlYen":{"vkey":"VK_UNKNOWN"}}}');

/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/src/common/keyboard/layouts/es-Spanish-mac.json":
/*!**************************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/src/common/keyboard/layouts/es-Spanish-mac.json ***!
  \**************************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"info":{"id":"com.apple.keylayout.Spanish","lang":"es"},"mapping":{"KeyA":{"value":"a","withShift":"A","withAltGr":"å","withShiftAltGr":"Å"},"KeyB":{"value":"b","withShift":"B","withAltGr":"∫","withShiftAltGr":"<"},"KeyC":{"value":"c","withShift":"C","withAltGr":"©","withShiftAltGr":"Â"},"KeyD":{"value":"d","withShift":"D","withAltGr":"∂","withShiftAltGr":"ﬂ"},"KeyE":{"value":"e","withShift":"E","withAltGr":"æ","withShiftAltGr":"Æ"},"KeyF":{"value":"f","withShift":"F","withAltGr":"ƒ","withShiftAltGr":"‡"},"KeyG":{"value":"g","withShift":"G","withAltGr":"@","withShiftAltGr":"‚"},"KeyH":{"value":"h","withShift":"H","withAltGr":"™","withShiftAltGr":"·"},"KeyI":{"value":"i","withShift":"I","withAltGr":"^","withShiftAltGr":"ı"},"KeyJ":{"value":"j","withShift":"J","withAltGr":"∆","withShiftAltGr":"˜"},"KeyK":{"value":"k","withShift":"K","withAltGr":"§","withShiftAltGr":"˘"},"KeyL":{"value":"l","withShift":"L","withAltGr":"¬","withShiftAltGr":"ˆ"},"KeyM":{"value":"m","withShift":"M","withAltGr":"µ","withShiftAltGr":"≤"},"KeyN":{"value":"n","withShift":"N","withAltGr":">","withShiftAltGr":">"},"KeyO":{"value":"o","withShift":"O","withAltGr":"ø","withShiftAltGr":"Ø"},"KeyP":{"value":"p","withShift":"P","withAltGr":"π","withShiftAltGr":"∏"},"KeyQ":{"value":"q","withShift":"Q","withAltGr":"œ","withShiftAltGr":"Œ"},"KeyR":{"value":"r","withShift":"R","withAltGr":"®","withShiftAltGr":"Á"},"KeyS":{"value":"s","withShift":"S","withAltGr":"ß","withShiftAltGr":"ﬁ"},"KeyT":{"value":"t","withShift":"T","withAltGr":"†","withShiftAltGr":"È"},"KeyU":{"value":"u","withShift":"U","withAltGr":"€","withShiftAltGr":"Û"},"KeyV":{"value":"v","withShift":"V","withAltGr":"√","withShiftAltGr":"◊"},"KeyW":{"value":"w","withShift":"W","withAltGr":"∑","withShiftAltGr":"Ê"},"KeyX":{"value":"x","withShift":"X","withAltGr":"≈","withShiftAltGr":"‰"},"KeyY":{"value":"y","withShift":"Y","withAltGr":"¥","withShiftAltGr":"Ë"},"KeyZ":{"value":"z","withShift":"Z","withAltGr":"Ω","withShiftAltGr":"„"},"Digit1":{"value":"1","withShift":"¡","withAltGr":"‘","withShiftAltGr":"’"},"Digit2":{"value":"2","withShift":"!","withAltGr":"“","withShiftAltGr":"”"},"Digit3":{"value":"3","withShift":"#","withAltGr":"«","withShiftAltGr":"»"},"Digit4":{"value":"4","withShift":"$","withAltGr":"¢","withShiftAltGr":"Î"},"Digit5":{"value":"5","withShift":"%","withAltGr":"∞","withShiftAltGr":"Ì"},"Digit6":{"value":"6","withShift":"/","withAltGr":"\\\\","withShiftAltGr":"Ï"},"Digit7":{"value":"7","withShift":"&","withAltGr":"|","withShiftAltGr":"Í"},"Digit8":{"value":"8","withShift":"*","withAltGr":"°","withShiftAltGr":""},"Digit9":{"value":"9","withShift":"(","withAltGr":"£","withShiftAltGr":"Ô"},"Digit0":{"value":"0","withShift":")","withAltGr":"≠","withShiftAltGr":"Ò"},"Minus":{"value":"-","withShift":"_","withAltGr":"–","withShiftAltGr":"—"},"Equal":{"value":"=","withShift":"+","withAltGr":"±","withShiftAltGr":"Ó"},"BracketLeft":{"value":"´","withShift":"º","withAltGr":"ª","withShiftAltGr":"Ù"},"BracketRight":{"value":"`","withShift":"¨","withAltGr":"|","withShiftAltGr":"Ú"},"Backslash":{"value":"\'","withShift":"\\"","withAltGr":"]","withShiftAltGr":"}"},"Semicolon":{"value":"ñ","withShift":"Ñ","withAltGr":"~","withShiftAltGr":"˙"},"Quote":{"value":";","withShift":":","withAltGr":"¶","withShiftAltGr":"¯"},"Backquote":{"value":"<","withShift":">","withAltGr":"[","withShiftAltGr":"{"},"Comma":{"value":",","withShift":"¿","withAltGr":"Ÿ","withShiftAltGr":"≥"},"Period":{"value":".","withShift":"?","withAltGr":"…","withShiftAltGr":"÷"},"Slash":{"value":"ç","withShift":"Ç","withAltGr":"•","withShiftAltGr":"¸"},"IntlBackslash":{"value":"[","withShift":"]","withAltGr":"{","withShiftAltGr":"}"}}}');

/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/src/common/keyboard/layouts/es-Spanish-pc.json":
/*!*************************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/src/common/keyboard/layouts/es-Spanish-pc.json ***!
  \*************************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"info":{"name":"0000040A","id":"","text":"Spanish"},"mapping":{"KeyA":{"vkey":"VK_A","value":"a","withShift":"A"},"KeyB":{"vkey":"VK_B","value":"b","withShift":"B"},"KeyC":{"vkey":"VK_C","value":"c","withShift":"C"},"KeyD":{"vkey":"VK_D","value":"d","withShift":"D"},"KeyE":{"vkey":"VK_E","value":"e","withShift":"E","withAltGr":"€"},"KeyF":{"vkey":"VK_F","value":"f","withShift":"F"},"KeyG":{"vkey":"VK_G","value":"g","withShift":"G"},"KeyH":{"vkey":"VK_H","value":"h","withShift":"H"},"KeyI":{"vkey":"VK_I","value":"i","withShift":"I"},"KeyJ":{"vkey":"VK_J","value":"j","withShift":"J"},"KeyK":{"vkey":"VK_K","value":"k","withShift":"K"},"KeyL":{"vkey":"VK_L","value":"l","withShift":"L"},"KeyM":{"vkey":"VK_M","value":"m","withShift":"M"},"KeyN":{"vkey":"VK_N","value":"n","withShift":"N"},"KeyO":{"vkey":"VK_O","value":"o","withShift":"O"},"KeyP":{"vkey":"VK_P","value":"p","withShift":"P"},"KeyQ":{"vkey":"VK_Q","value":"q","withShift":"Q"},"KeyR":{"vkey":"VK_R","value":"r","withShift":"R"},"KeyS":{"vkey":"VK_S","value":"s","withShift":"S"},"KeyT":{"vkey":"VK_T","value":"t","withShift":"T"},"KeyU":{"vkey":"VK_U","value":"u","withShift":"U"},"KeyV":{"vkey":"VK_V","value":"v","withShift":"V"},"KeyW":{"vkey":"VK_W","value":"w","withShift":"W"},"KeyX":{"vkey":"VK_X","value":"x","withShift":"X"},"KeyY":{"vkey":"VK_Y","value":"y","withShift":"Y"},"KeyZ":{"vkey":"VK_Z","value":"z","withShift":"Z"},"Digit1":{"vkey":"VK_1","value":"1","withShift":"!","withAltGr":"|"},"Digit2":{"vkey":"VK_2","value":"2","withShift":"\\"","withAltGr":"@"},"Digit3":{"vkey":"VK_3","value":"3","withShift":"·","withAltGr":"#"},"Digit4":{"vkey":"VK_4","value":"4","withShift":"$","withAltGr":"~"},"Digit5":{"vkey":"VK_5","value":"5","withShift":"%","withAltGr":"€"},"Digit6":{"vkey":"VK_6","value":"6","withShift":"&","withAltGr":"¬"},"Digit7":{"vkey":"VK_7","value":"7","withShift":"/"},"Digit8":{"vkey":"VK_8","value":"8","withShift":"("},"Digit9":{"vkey":"VK_9","value":"9","withShift":")"},"Digit0":{"vkey":"VK_0","value":"0","withShift":"="},"Minus":{"vkey":"VK_OEM_4","value":"\'","withShift":"?"},"Equal":{"vkey":"VK_OEM_6","value":"¡","withShift":"¿"},"BracketLeft":{"vkey":"VK_OEM_1","value":"`","withShift":"^","withAltGr":"["},"BracketRight":{"vkey":"VK_OEM_PLUS","value":"+","withShift":"*","withAltGr":"]"},"Backslash":{"vkey":"VK_OEM_2","value":"ç","withShift":"Ç","withAltGr":"}"},"Semicolon":{"vkey":"VK_OEM_3","value":"ñ","withShift":"Ñ"},"Quote":{"vkey":"VK_OEM_7","value":"´","withShift":"¨","withAltGr":"{"},"Backquote":{"vkey":"VK_OEM_5","value":"º","withShift":"ª","withAltGr":"\\\\"},"Comma":{"vkey":"VK_OEM_COMMA","value":",","withShift":";"},"Period":{"vkey":"VK_OEM_PERIOD","value":".","withShift":":"},"Slash":{"vkey":"VK_OEM_MINUS","value":"-","withShift":"_"},"IntlBackslash":{"vkey":"VK_OEM_102","value":"<","withShift":">"},"IntlRo":{"vkey":"VK_ABNT_C1"},"IntlYen":{"vkey":"VK_UNKNOWN"}}}');

/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/src/common/keyboard/layouts/fr-Bepo-pc.json":
/*!**********************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/src/common/keyboard/layouts/fr-Bepo-pc.json ***!
  \**********************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"info":{"name":"A000040C","id":"00c0","text":"Fran�ais (b�po)"},"mapping":{"KeyA":{"vkey":"VK_A","value":"a","withShift":"A","withAltGr":"æ","withShiftAltGr":"Æ"},"KeyB":{"vkey":"VK_K","value":"k","withShift":"K","withAltGr":"~","withShiftAltGr":"⌨"},"KeyC":{"vkey":"VK_X","value":"x","withShift":"X","withAltGr":"}","withShiftAltGr":"’"},"KeyD":{"vkey":"VK_I","value":"i","withShift":"I","withAltGr":"¨","withShiftAltGr":"˙"},"KeyE":{"vkey":"VK_P","value":"p","withShift":"P","withAltGr":"&","withShiftAltGr":"§"},"KeyF":{"vkey":"VK_E","value":"e","withShift":"E","withAltGr":"€","withShiftAltGr":"¤"},"KeyG":{"vkey":"VK_OEM_COMMA","value":",","withShift":";","withAltGr":"’","withShiftAltGr":"̛"},"KeyH":{"vkey":"VK_C","value":"c","withShift":"C","withAltGr":"©","withShiftAltGr":"ſ"},"KeyI":{"vkey":"VK_D","value":"d","withShift":"D","withAltGr":"ð","withShiftAltGr":"Ð"},"KeyJ":{"vkey":"VK_T","value":"t","withShift":"T","withAltGr":"þ","withShiftAltGr":"Þ"},"KeyK":{"vkey":"VK_S","value":"s","withShift":"S","withAltGr":"ß","withShiftAltGr":"ẞ"},"KeyL":{"vkey":"VK_R","value":"r","withShift":"R","withAltGr":"®","withShiftAltGr":"™"},"KeyM":{"vkey":"VK_Q","value":"q","withShift":"Q","withAltGr":"˚","withShiftAltGr":"̣"},"KeyN":{"vkey":"VK_OEM_3","value":"\'","withShift":"?","withAltGr":"¿","withShiftAltGr":"̉"},"KeyO":{"vkey":"VK_L","value":"l","withShift":"L","withAltGr":"/"},"KeyP":{"vkey":"VK_J","value":"j","withShift":"J","withAltGr":"ĳ","withShiftAltGr":"Ĳ"},"KeyQ":{"vkey":"VK_B","value":"b","withShift":"B","withAltGr":"|","withShiftAltGr":"¦"},"KeyR":{"vkey":"VK_O","value":"o","withShift":"O","withAltGr":"œ","withShiftAltGr":"Œ"},"KeyS":{"vkey":"VK_U","value":"u","withShift":"U","withAltGr":"ù","withShiftAltGr":"Ù"},"KeyT":{"vkey":"VK_OEM_2","value":"è","withShift":"È","withAltGr":"`","withShiftAltGr":"`"},"KeyU":{"vkey":"VK_V","value":"v","withShift":"V","withAltGr":"ˇ"},"KeyV":{"vkey":"VK_OEM_PERIOD","value":".","withShift":":","withAltGr":"…","withShiftAltGr":"·"},"KeyW":{"vkey":"VK_OEM_1","value":"é","withShift":"É","withAltGr":"´","withShiftAltGr":"˝"},"KeyX":{"vkey":"VK_Y","value":"y","withShift":"Y","withAltGr":"{","withShiftAltGr":"‘"},"KeyY":{"vkey":"VK_OEM_4","value":"^","withShift":"!","withAltGr":"¡"},"KeyZ":{"vkey":"VK_OEM_6","value":"à","withShift":"À","withAltGr":"\\\\"},"Digit1":{"vkey":"VK_1","value":"\\"","withShift":"1","withAltGr":"—","withShiftAltGr":"„"},"Digit2":{"vkey":"VK_2","value":"«","withShift":"2","withAltGr":"<","withShiftAltGr":"“"},"Digit3":{"vkey":"VK_3","value":"»","withShift":"3","withAltGr":">","withShiftAltGr":"”"},"Digit4":{"vkey":"VK_4","value":"(","withShift":"4","withAltGr":"[","withShiftAltGr":"≤"},"Digit5":{"vkey":"VK_5","value":")","withShift":"5","withAltGr":"]","withShiftAltGr":"≥"},"Digit6":{"vkey":"VK_6","value":"@","withShift":"6","withAltGr":"^"},"Digit7":{"vkey":"VK_7","value":"+","withShift":"7","withAltGr":"±","withShiftAltGr":"¬"},"Digit8":{"vkey":"VK_8","value":"-","withShift":"8","withAltGr":"−","withShiftAltGr":"¼"},"Digit9":{"vkey":"VK_9","value":"/","withShift":"9","withAltGr":"÷","withShiftAltGr":"½"},"Digit0":{"vkey":"VK_0","value":"*","withShift":"0","withAltGr":"×","withShiftAltGr":"¾"},"Minus":{"vkey":"VK_OEM_MINUS","value":"=","withShift":"°","withAltGr":"≠","withShiftAltGr":"′"},"Equal":{"vkey":"VK_OEM_PLUS","value":"%","withShift":"`","withAltGr":"‰","withShiftAltGr":"″"},"BracketLeft":{"vkey":"VK_Z","value":"z","withShift":"Z","withAltGr":"ə","withShiftAltGr":"Ə"},"BracketRight":{"vkey":"VK_W","value":"w","withShift":"W","withAltGr":"˘"},"Backslash":{"vkey":"VK_OEM_5","value":"ç","withShift":"Ç","withAltGr":"¸","withShiftAltGr":","},"Semicolon":{"vkey":"VK_N","value":"n","withShift":"N","withAltGr":"~"},"Quote":{"vkey":"VK_M","value":"m","withShift":"M","withAltGr":"¯","withShiftAltGr":"º"},"Backquote":{"vkey":"VK_OEM_7","value":"$","withShift":"#","withAltGr":"–","withShiftAltGr":"¶"},"Comma":{"vkey":"VK_G","value":"g","withShift":"G","withAltGr":"µ"},"Period":{"vkey":"VK_H","value":"h","withShift":"H","withAltGr":"†","withShiftAltGr":"‡"},"Slash":{"vkey":"VK_F","value":"f","withShift":"F","withAltGr":"˛","withShiftAltGr":"ª"},"IntlBackslash":{"vkey":"VK_OEM_102","value":"ê","withShift":"Ê","withAltGr":"/"},"IntlRo":{"vkey":"VK_ABNT_C1"},"IntlYen":{"vkey":"VK_UNKNOWN"}}}');

/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/src/common/keyboard/layouts/fr-Canadian_French-mac.json":
/*!**********************************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/src/common/keyboard/layouts/fr-Canadian_French-mac.json ***!
  \**********************************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"info":{"id":"com.apple.keylayout.Canadian-CSA","lang":"fr"},"mapping":{"KeyA":{"value":"a","withShift":"A","withAltGr":"æ","withShiftAltGr":"Æ"},"KeyB":{"value":"b","withShift":"B","withAltGr":"∫","withShiftAltGr":"≤"},"KeyC":{"value":"c","withShift":"C","withAltGr":"¢","withShiftAltGr":"†"},"KeyD":{"value":"d","withShift":"D","withAltGr":"ª","withShiftAltGr":"ˇ"},"KeyE":{"value":"e","withShift":"E","withAltGr":"∂","withShiftAltGr":"¯"},"KeyF":{"value":"f","withShift":"F","withAltGr":"ƒ","withShiftAltGr":"ﬂ"},"KeyG":{"value":"g","withShift":"G","withAltGr":"©","withShiftAltGr":"ﬁ"},"KeyH":{"value":"h","withShift":"H","withAltGr":"˙","withShiftAltGr":"·"},"KeyI":{"value":"i","withShift":"I","withAltGr":"π","withShiftAltGr":"∏"},"KeyJ":{"value":"j","withShift":"J","withAltGr":"∆","withShiftAltGr":"‚"},"KeyK":{"value":"k","withShift":"K","withAltGr":"˚","withShiftAltGr":"⁄"},"KeyL":{"value":"l","withShift":"L","withAltGr":" ","withShiftAltGr":"…"},"KeyM":{"value":"m","withShift":"M","withAltGr":"µ","withShiftAltGr":"º"},"KeyN":{"value":"n","withShift":"N","withAltGr":" ","withShiftAltGr":"≥"},"KeyO":{"value":"o","withShift":"O","withAltGr":"ø","withShiftAltGr":"Ø"},"KeyP":{"value":"p","withShift":"P","withAltGr":"“","withShiftAltGr":"”"},"KeyQ":{"value":"q","withShift":"Q","withAltGr":"œ","withShiftAltGr":"Œ"},"KeyR":{"value":"r","withShift":"R","withAltGr":"¶","withShiftAltGr":"®"},"KeyS":{"value":"s","withShift":"S","withAltGr":"ß","withShiftAltGr":"§"},"KeyT":{"value":"t","withShift":"T","withAltGr":"™","withShiftAltGr":"˘"},"KeyU":{"value":"u","withShift":"U","withAltGr":" ","withShiftAltGr":"˛"},"KeyV":{"value":"v","withShift":"V","withAltGr":"√","withShiftAltGr":"◊"},"KeyW":{"value":"w","withShift":"W","withAltGr":"∑","withShiftAltGr":"‰"},"KeyX":{"value":"x","withShift":"X","withAltGr":"»","withShiftAltGr":"›"},"KeyY":{"value":"y","withShift":"Y","withAltGr":"¥","withShiftAltGr":"˝"},"KeyZ":{"value":"z","withShift":"Z","withAltGr":"«","withShiftAltGr":"‹"},"Digit1":{"value":"1","withShift":"!","withAltGr":"¡","withShiftAltGr":"≈"},"Digit2":{"value":"2","withShift":"@","withAltGr":"@","withShiftAltGr":"ı"},"Digit3":{"value":"3","withShift":"#","withAltGr":"£","withShiftAltGr":"ˆ"},"Digit4":{"value":"4","withShift":"$","withAltGr":"€","withShiftAltGr":"˜"},"Digit5":{"value":"5","withShift":"%","withAltGr":"∞","withShiftAltGr":""},"Digit6":{"value":"6","withShift":"?","withAltGr":" ","withShiftAltGr":"†"},"Digit7":{"value":"7","withShift":"&","withAltGr":"{","withShiftAltGr":"‡"},"Digit8":{"value":"8","withShift":"*","withAltGr":"}","withShiftAltGr":"•"},"Digit9":{"value":"9","withShift":"(","withAltGr":"[","withShiftAltGr":"±"},"Digit0":{"value":"0","withShift":")","withAltGr":"]","withShiftAltGr":"—"},"Minus":{"value":"-","withShift":"_","withAltGr":"|","withShiftAltGr":"¿"},"Equal":{"value":"=","withShift":"+","withAltGr":"¬","withShiftAltGr":"–"},"BracketLeft":{"value":"^","withShift":"¨","withAltGr":"`","withShiftAltGr":"„"},"BracketRight":{"value":"ç","withShift":"Ç","withAltGr":"~","withShiftAltGr":"~"},"Backslash":{"value":"à","withShift":"À","withAltGr":"`","withShiftAltGr":"`"},"Semicolon":{"value":";","withShift":":","withAltGr":"°","withShiftAltGr":"´"},"Quote":{"value":"è","withShift":"È","withAltGr":"\\\\","withShiftAltGr":"’"},"Backquote":{"value":"ù","withShift":"Ù","withAltGr":"\\\\","withShiftAltGr":"Ω"},"Comma":{"value":",","withShift":"\'","withAltGr":"<","withShiftAltGr":"x"},"Period":{"value":".","withShift":"\\"","withAltGr":">","withShiftAltGr":"÷"},"Slash":{"value":"é","withShift":"É","withAltGr":"/","withShiftAltGr":"≠"},"IntlBackslash":{"value":"/","withShift":"\\\\","withAltGr":"|","withShiftAltGr":" "}}}');

/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/src/common/keyboard/layouts/fr-Canadian_French-pc.json":
/*!*********************************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/src/common/keyboard/layouts/fr-Canadian_French-pc.json ***!
  \*********************************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"info":{"name":"00001009","id":"","text":"Canadian French"},"mapping":{"KeyA":{"vkey":"VK_A","value":"a","withShift":"A"},"KeyB":{"vkey":"VK_B","value":"b","withShift":"B"},"KeyC":{"vkey":"VK_C","value":"c","withShift":"C"},"KeyD":{"vkey":"VK_D","value":"d","withShift":"D"},"KeyE":{"vkey":"VK_E","value":"e","withShift":"E"},"KeyF":{"vkey":"VK_F","value":"f","withShift":"F"},"KeyG":{"vkey":"VK_G","value":"g","withShift":"G"},"KeyH":{"vkey":"VK_H","value":"h","withShift":"H"},"KeyI":{"vkey":"VK_I","value":"i","withShift":"I"},"KeyJ":{"vkey":"VK_J","value":"j","withShift":"J"},"KeyK":{"vkey":"VK_K","value":"k","withShift":"K"},"KeyL":{"vkey":"VK_L","value":"l","withShift":"L"},"KeyM":{"vkey":"VK_M","value":"m","withShift":"M","withAltGr":"µ"},"KeyN":{"vkey":"VK_N","value":"n","withShift":"N"},"KeyO":{"vkey":"VK_O","value":"o","withShift":"O","withAltGr":"§"},"KeyP":{"vkey":"VK_P","value":"p","withShift":"P","withAltGr":"¶"},"KeyQ":{"vkey":"VK_Q","value":"q","withShift":"Q"},"KeyR":{"vkey":"VK_R","value":"r","withShift":"R"},"KeyS":{"vkey":"VK_S","value":"s","withShift":"S"},"KeyT":{"vkey":"VK_T","value":"t","withShift":"T"},"KeyU":{"vkey":"VK_U","value":"u","withShift":"U"},"KeyV":{"vkey":"VK_V","value":"v","withShift":"V"},"KeyW":{"vkey":"VK_W","value":"w","withShift":"W"},"KeyX":{"vkey":"VK_X","value":"x","withShift":"X"},"KeyY":{"vkey":"VK_Y","value":"y","withShift":"Y"},"KeyZ":{"vkey":"VK_Z","value":"z","withShift":"Z"},"Digit1":{"vkey":"VK_1","value":"1","withShift":"!","withAltGr":"±"},"Digit2":{"vkey":"VK_2","value":"2","withShift":"\\"","withAltGr":"@"},"Digit3":{"vkey":"VK_3","value":"3","withShift":"/","withAltGr":"£"},"Digit4":{"vkey":"VK_4","value":"4","withShift":"$","withAltGr":"¢"},"Digit5":{"vkey":"VK_5","value":"5","withShift":"%","withAltGr":"¤"},"Digit6":{"vkey":"VK_6","value":"6","withShift":"?","withAltGr":"¬"},"Digit7":{"vkey":"VK_7","value":"7","withShift":"&","withAltGr":"¦"},"Digit8":{"vkey":"VK_8","value":"8","withShift":"*","withAltGr":"²"},"Digit9":{"vkey":"VK_9","value":"9","withShift":"(","withAltGr":"³"},"Digit0":{"vkey":"VK_0","value":"0","withShift":")","withAltGr":"¼"},"Minus":{"vkey":"VK_OEM_MINUS","value":"-","withShift":"_","withAltGr":"½"},"Equal":{"vkey":"VK_OEM_PLUS","value":"=","withShift":"+","withAltGr":"¾"},"BracketLeft":{"vkey":"VK_OEM_4","value":"^","withShift":"^","withAltGr":"["},"BracketRight":{"vkey":"VK_OEM_6","value":"¸","withShift":"¨","withAltGr":"]"},"Backslash":{"vkey":"VK_OEM_5","value":"<","withShift":">","withAltGr":"}"},"Semicolon":{"vkey":"VK_OEM_1","value":";","withShift":":","withAltGr":"~"},"Quote":{"vkey":"VK_OEM_3","value":"`","withShift":"`","withAltGr":"{"},"Backquote":{"vkey":"VK_OEM_7","value":"#","withShift":"|","withAltGr":"\\\\"},"Comma":{"vkey":"VK_OEM_COMMA","value":",","withShift":"\'","withAltGr":"¯"},"Period":{"vkey":"VK_OEM_PERIOD","value":".","withShift":"."},"Slash":{"vkey":"VK_OEM_2","value":"é","withShift":"É","withAltGr":"´"},"IntlBackslash":{"vkey":"VK_OEM_102","value":"«","withShift":"»","withAltGr":"°"},"IntlRo":{"vkey":"VK_ABNT_C1"},"IntlYen":{"vkey":"VK_UNKNOWN"}}}');

/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/src/common/keyboard/layouts/fr-French-mac.json":
/*!*************************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/src/common/keyboard/layouts/fr-French-mac.json ***!
  \*************************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"info":{"id":"com.apple.keylayout.French","lang":"fr"},"mapping":{"KeyA":{"value":"q","withShift":"Q","withAltGr":"‡","withShiftAltGr":"Ω"},"KeyB":{"value":"b","withShift":"B","withAltGr":"ß","withShiftAltGr":"∫"},"KeyC":{"value":"c","withShift":"C","withAltGr":"©","withShiftAltGr":"¢"},"KeyD":{"value":"d","withShift":"D","withAltGr":"∂","withShiftAltGr":"∆"},"KeyE":{"value":"e","withShift":"E","withAltGr":"ê","withShiftAltGr":"Ê"},"KeyF":{"value":"f","withShift":"F","withAltGr":"ƒ","withShiftAltGr":"·"},"KeyG":{"value":"g","withShift":"G","withAltGr":"ﬁ","withShiftAltGr":"ﬂ"},"KeyH":{"value":"h","withShift":"H","withAltGr":"Ì","withShiftAltGr":"Î"},"KeyI":{"value":"i","withShift":"I","withAltGr":"î","withShiftAltGr":"ï"},"KeyJ":{"value":"j","withShift":"J","withAltGr":"Ï","withShiftAltGr":"Í"},"KeyK":{"value":"k","withShift":"K","withAltGr":"È","withShiftAltGr":"Ë"},"KeyL":{"value":"l","withShift":"L","withAltGr":"¬","withShiftAltGr":"|"},"KeyM":{"value":",","withShift":"?","withAltGr":"∞","withShiftAltGr":"¿"},"KeyN":{"value":"n","withShift":"N","withAltGr":"~","withShiftAltGr":"ı"},"KeyO":{"value":"o","withShift":"O","withAltGr":"œ","withShiftAltGr":"Œ"},"KeyP":{"value":"p","withShift":"P","withAltGr":"π","withShiftAltGr":"∏"},"KeyQ":{"value":"a","withShift":"A","withAltGr":"æ","withShiftAltGr":"Æ"},"KeyR":{"value":"r","withShift":"R","withAltGr":"®","withShiftAltGr":"‚"},"KeyS":{"value":"s","withShift":"S","withAltGr":"Ò","withShiftAltGr":"∑"},"KeyT":{"value":"t","withShift":"T","withAltGr":"†","withShiftAltGr":"™"},"KeyU":{"value":"u","withShift":"U","withAltGr":"º","withShiftAltGr":"ª"},"KeyV":{"value":"v","withShift":"V","withAltGr":"◊","withShiftAltGr":"√"},"KeyW":{"value":"z","withShift":"Z","withAltGr":"Â","withShiftAltGr":"Å"},"KeyX":{"value":"x","withShift":"X","withAltGr":"≈","withShiftAltGr":"⁄"},"KeyY":{"value":"y","withShift":"Y","withAltGr":"Ú","withShiftAltGr":"Ÿ"},"KeyZ":{"value":"w","withShift":"W","withAltGr":"‹","withShiftAltGr":"›"},"Digit1":{"value":"&","withShift":"1","withAltGr":"","withShiftAltGr":"´"},"Digit2":{"value":"é","withShift":"2","withAltGr":"ë","withShiftAltGr":"„"},"Digit3":{"value":"\\"","withShift":"3","withAltGr":"“","withShiftAltGr":"”"},"Digit4":{"value":"\'","withShift":"4","withAltGr":"‘","withShiftAltGr":"’"},"Digit5":{"value":"(","withShift":"5","withAltGr":"{","withShiftAltGr":"["},"Digit6":{"value":"§","withShift":"6","withAltGr":"¶","withShiftAltGr":"å"},"Digit7":{"value":"è","withShift":"7","withAltGr":"«","withShiftAltGr":"»"},"Digit8":{"value":"!","withShift":"8","withAltGr":"¡","withShiftAltGr":"Û"},"Digit9":{"value":"ç","withShift":"9","withAltGr":"Ç","withShiftAltGr":"Á"},"Digit0":{"value":"à","withShift":"0","withAltGr":"ø","withShiftAltGr":"Ø"},"Minus":{"value":")","withShift":"°","withAltGr":"}","withShiftAltGr":"]"},"Equal":{"value":"-","withShift":"_","withAltGr":"—","withShiftAltGr":"–"},"BracketLeft":{"value":"^","withShift":"¨","withAltGr":"ô","withShiftAltGr":"Ô"},"BracketRight":{"value":"$","withShift":"*","withAltGr":"€","withShiftAltGr":"¥"},"Backslash":{"value":"`","withShift":"£","withAltGr":"@","withShiftAltGr":"#"},"Semicolon":{"value":"m","withShift":"M","withAltGr":"µ","withShiftAltGr":"Ó"},"Quote":{"value":"ù","withShift":"%","withAltGr":"Ù","withShiftAltGr":"‰"},"Backquote":{"value":"<","withShift":">","withAltGr":"≤","withShiftAltGr":"≥"},"Comma":{"value":";","withShift":".","withAltGr":"…","withShiftAltGr":"•"},"Period":{"value":":","withShift":"/","withAltGr":"÷","withShiftAltGr":"\\\\"},"Slash":{"value":"=","withShift":"+","withAltGr":"≠","withShiftAltGr":"±"},"IntlBackslash":{"value":"@","withShift":"#","withAltGr":"•","withShiftAltGr":"Ÿ"}}}');

/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/src/common/keyboard/layouts/fr-French-pc.json":
/*!************************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/src/common/keyboard/layouts/fr-French-pc.json ***!
  \************************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"info":{"name":"0000040C","id":"","text":"French"},"mapping":{"KeyA":{"vkey":"VK_Q","value":"q","withShift":"Q"},"KeyB":{"vkey":"VK_B","value":"b","withShift":"B"},"KeyC":{"vkey":"VK_C","value":"c","withShift":"C"},"KeyD":{"vkey":"VK_D","value":"d","withShift":"D"},"KeyE":{"vkey":"VK_E","value":"e","withShift":"E","withAltGr":"€"},"KeyF":{"vkey":"VK_F","value":"f","withShift":"F"},"KeyG":{"vkey":"VK_G","value":"g","withShift":"G"},"KeyH":{"vkey":"VK_H","value":"h","withShift":"H"},"KeyI":{"vkey":"VK_I","value":"i","withShift":"I"},"KeyJ":{"vkey":"VK_J","value":"j","withShift":"J"},"KeyK":{"vkey":"VK_K","value":"k","withShift":"K"},"KeyL":{"vkey":"VK_L","value":"l","withShift":"L"},"KeyM":{"vkey":"VK_OEM_COMMA","value":",","withShift":"?"},"KeyN":{"vkey":"VK_N","value":"n","withShift":"N"},"KeyO":{"vkey":"VK_O","value":"o","withShift":"O"},"KeyP":{"vkey":"VK_P","value":"p","withShift":"P"},"KeyQ":{"vkey":"VK_A","value":"a","withShift":"A"},"KeyR":{"vkey":"VK_R","value":"r","withShift":"R"},"KeyS":{"vkey":"VK_S","value":"s","withShift":"S"},"KeyT":{"vkey":"VK_T","value":"t","withShift":"T"},"KeyU":{"vkey":"VK_U","value":"u","withShift":"U"},"KeyV":{"vkey":"VK_V","value":"v","withShift":"V"},"KeyW":{"vkey":"VK_Z","value":"z","withShift":"Z"},"KeyX":{"vkey":"VK_X","value":"x","withShift":"X"},"KeyY":{"vkey":"VK_Y","value":"y","withShift":"Y"},"KeyZ":{"vkey":"VK_W","value":"w","withShift":"W"},"Digit1":{"vkey":"VK_1","value":"&","withShift":"1"},"Digit2":{"vkey":"VK_2","value":"é","withShift":"2","withAltGr":"~"},"Digit3":{"vkey":"VK_3","value":"\\"","withShift":"3","withAltGr":"#"},"Digit4":{"vkey":"VK_4","value":"\'","withShift":"4","withAltGr":"{"},"Digit5":{"vkey":"VK_5","value":"(","withShift":"5","withAltGr":"["},"Digit6":{"vkey":"VK_6","value":"-","withShift":"6","withAltGr":"|"},"Digit7":{"vkey":"VK_7","value":"è","withShift":"7","withAltGr":"`"},"Digit8":{"vkey":"VK_8","value":"_","withShift":"8","withAltGr":"\\\\"},"Digit9":{"vkey":"VK_9","value":"ç","withShift":"9","withAltGr":"^"},"Digit0":{"vkey":"VK_0","value":"à","withShift":"0","withAltGr":"@"},"Minus":{"vkey":"VK_OEM_4","value":")","withShift":"°","withAltGr":"]"},"Equal":{"vkey":"VK_OEM_PLUS","value":"=","withShift":"+","withAltGr":"}"},"BracketLeft":{"vkey":"VK_OEM_6","value":"^","withShift":"¨"},"BracketRight":{"vkey":"VK_OEM_1","value":"$","withShift":"£","withAltGr":"¤"},"Backslash":{"vkey":"VK_OEM_5","value":"*","withShift":"µ"},"Semicolon":{"vkey":"VK_M","value":"m","withShift":"M"},"Quote":{"vkey":"VK_OEM_3","value":"ù","withShift":"%"},"Backquote":{"vkey":"VK_OEM_7","value":"²"},"Comma":{"vkey":"VK_OEM_PERIOD","value":";","withShift":"."},"Period":{"vkey":"VK_OEM_2","value":":","withShift":"/"},"Slash":{"vkey":"VK_OEM_8","value":"!","withShift":"§"},"IntlBackslash":{"vkey":"VK_OEM_102","value":"<","withShift":">"},"IntlRo":{"vkey":"VK_ABNT_C1"},"IntlYen":{"vkey":"VK_UNKNOWN"}}}');

/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/src/common/keyboard/layouts/fr-Swiss_French-mac.json":
/*!*******************************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/src/common/keyboard/layouts/fr-Swiss_French-mac.json ***!
  \*******************************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"info":{"id":"com.apple.keylayout.SwissFrench","lang":"fr"},"mapping":{"KeyA":{"value":"a","withShift":"A","withAltGr":"å","withShiftAltGr":"Å"},"KeyB":{"value":"b","withShift":"B","withAltGr":"∫"},"KeyC":{"value":"c","withShift":"C","withAltGr":"©"},"KeyD":{"value":"d","withShift":"D","withAltGr":"∂","withShiftAltGr":"ﬂ"},"KeyE":{"value":"e","withShift":"E","withAltGr":"€","withShiftAltGr":"Ë"},"KeyF":{"value":"f","withShift":"F","withAltGr":"ƒ","withShiftAltGr":"‡"},"KeyG":{"value":"g","withShift":"G","withAltGr":"@","withShiftAltGr":"‚"},"KeyH":{"value":"h","withShift":"H","withAltGr":"ª","withShiftAltGr":"·"},"KeyI":{"value":"i","withShift":"I","withAltGr":"¡","withShiftAltGr":"ı"},"KeyJ":{"value":"j","withShift":"J","withAltGr":"º","withShiftAltGr":"˜"},"KeyK":{"value":"k","withShift":"K","withAltGr":"∆","withShiftAltGr":"¯"},"KeyL":{"value":"l","withShift":"L","withAltGr":"¬","withShiftAltGr":"ˆ"},"KeyM":{"value":"m","withShift":"M","withAltGr":"µ","withShiftAltGr":"˚"},"KeyN":{"value":"n","withShift":"N","withAltGr":"~","withShiftAltGr":"˙"},"KeyO":{"value":"o","withShift":"O","withAltGr":"ø","withShiftAltGr":"Ø"},"KeyP":{"value":"p","withShift":"P","withAltGr":"π","withShiftAltGr":"∏"},"KeyQ":{"value":"q","withShift":"Q","withAltGr":"œ","withShiftAltGr":"Œ"},"KeyR":{"value":"r","withShift":"R","withAltGr":"®","withShiftAltGr":"È"},"KeyS":{"value":"s","withShift":"S","withAltGr":"ß","withShiftAltGr":"ﬁ"},"KeyT":{"value":"t","withShift":"T","withAltGr":"†","withShiftAltGr":"Î"},"KeyU":{"value":"u","withShift":"U","withAltGr":"°","withShiftAltGr":"Ù"},"KeyV":{"value":"v","withShift":"V","withAltGr":"√","withShiftAltGr":"◊"},"KeyW":{"value":"w","withShift":"W","withAltGr":"∑","withShiftAltGr":"Á"},"KeyX":{"value":"x","withShift":"X","withAltGr":"≈","withShiftAltGr":"™"},"KeyY":{"value":"z","withShift":"Z","withAltGr":"Ω","withShiftAltGr":"Í"},"KeyZ":{"value":"y","withShift":"Y","withAltGr":"¥","withShiftAltGr":"Ÿ"},"Digit1":{"value":"1","withShift":"+","withAltGr":"±","withShiftAltGr":"∞"},"Digit2":{"value":"2","withShift":"\\"","withAltGr":"“","withShiftAltGr":"”"},"Digit3":{"value":"3","withShift":"*","withAltGr":"#","withShiftAltGr":"‹"},"Digit4":{"value":"4","withShift":"ç","withAltGr":"Ç","withShiftAltGr":"⁄"},"Digit5":{"value":"5","withShift":"%","withAltGr":"[","withShiftAltGr":"["},"Digit6":{"value":"6","withShift":"&","withAltGr":"]","withShiftAltGr":"]"},"Digit7":{"value":"7","withShift":"/","withAltGr":"|","withShiftAltGr":"\\\\"},"Digit8":{"value":"8","withShift":"(","withAltGr":"{","withShiftAltGr":"Ò"},"Digit9":{"value":"9","withShift":")","withAltGr":"}","withShiftAltGr":"Ô"},"Digit0":{"value":"0","withShift":"=","withAltGr":"≠","withShiftAltGr":"Ú"},"Minus":{"value":"\'","withShift":"?","withAltGr":"¿","withShiftAltGr":""},"Equal":{"value":"^","withShift":"`","withAltGr":"´","withShiftAltGr":"^"},"BracketLeft":{"value":"è","withShift":"ü","withAltGr":"§","withShiftAltGr":"ÿ"},"BracketRight":{"value":"¨","withShift":"!","withAltGr":"‘","withShiftAltGr":"’"},"Backslash":{"value":"$","withShift":"£","withAltGr":"¶","withShiftAltGr":"•"},"Semicolon":{"value":"é","withShift":"ö","withAltGr":"¢","withShiftAltGr":"˘"},"Quote":{"value":"à","withShift":"ä","withAltGr":"æ","withShiftAltGr":"Æ"},"Backquote":{"value":"<","withShift":">","withAltGr":"≤","withShiftAltGr":"≥"},"Comma":{"value":",","withShift":";","withAltGr":"«","withShiftAltGr":"»"},"Period":{"value":".","withShift":":","withAltGr":"…","withShiftAltGr":"÷"},"Slash":{"value":"-","withShift":"_","withAltGr":"–","withShiftAltGr":"—"},"IntlBackslash":{"value":"§","withShift":"°","withAltGr":"ﬁ","withShiftAltGr":"‰"}}}');

/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/src/common/keyboard/layouts/fr-Swiss_French-pc.json":
/*!******************************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/src/common/keyboard/layouts/fr-Swiss_French-pc.json ***!
  \******************************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"info":{"name":"0000100C","id":"","text":"Swiss French"},"mapping":{"KeyA":{"vkey":"VK_A","value":"a","withShift":"A"},"KeyB":{"vkey":"VK_B","value":"b","withShift":"B"},"KeyC":{"vkey":"VK_C","value":"c","withShift":"C"},"KeyD":{"vkey":"VK_D","value":"d","withShift":"D"},"KeyE":{"vkey":"VK_E","value":"e","withShift":"E","withAltGr":"€"},"KeyF":{"vkey":"VK_F","value":"f","withShift":"F"},"KeyG":{"vkey":"VK_G","value":"g","withShift":"G"},"KeyH":{"vkey":"VK_H","value":"h","withShift":"H"},"KeyI":{"vkey":"VK_I","value":"i","withShift":"I"},"KeyJ":{"vkey":"VK_J","value":"j","withShift":"J"},"KeyK":{"vkey":"VK_K","value":"k","withShift":"K"},"KeyL":{"vkey":"VK_L","value":"l","withShift":"L"},"KeyM":{"vkey":"VK_M","value":"m","withShift":"M"},"KeyN":{"vkey":"VK_N","value":"n","withShift":"N"},"KeyO":{"vkey":"VK_O","value":"o","withShift":"O"},"KeyP":{"vkey":"VK_P","value":"p","withShift":"P"},"KeyQ":{"vkey":"VK_Q","value":"q","withShift":"Q"},"KeyR":{"vkey":"VK_R","value":"r","withShift":"R"},"KeyS":{"vkey":"VK_S","value":"s","withShift":"S"},"KeyT":{"vkey":"VK_T","value":"t","withShift":"T"},"KeyU":{"vkey":"VK_U","value":"u","withShift":"U"},"KeyV":{"vkey":"VK_V","value":"v","withShift":"V"},"KeyW":{"vkey":"VK_W","value":"w","withShift":"W"},"KeyX":{"vkey":"VK_X","value":"x","withShift":"X"},"KeyY":{"vkey":"VK_Z","value":"z","withShift":"Z"},"KeyZ":{"vkey":"VK_Y","value":"y","withShift":"Y"},"Digit1":{"vkey":"VK_1","value":"1","withShift":"+","withAltGr":"¦"},"Digit2":{"vkey":"VK_2","value":"2","withShift":"\\"","withAltGr":"@"},"Digit3":{"vkey":"VK_3","value":"3","withShift":"*","withAltGr":"#"},"Digit4":{"vkey":"VK_4","value":"4","withShift":"ç","withAltGr":"°"},"Digit5":{"vkey":"VK_5","value":"5","withShift":"%","withAltGr":"§"},"Digit6":{"vkey":"VK_6","value":"6","withShift":"&","withAltGr":"¬"},"Digit7":{"vkey":"VK_7","value":"7","withShift":"/","withAltGr":"|"},"Digit8":{"vkey":"VK_8","value":"8","withShift":"(","withAltGr":"¢"},"Digit9":{"vkey":"VK_9","value":"9","withShift":")"},"Digit0":{"vkey":"VK_0","value":"0","withShift":"="},"Minus":{"vkey":"VK_OEM_4","value":"\'","withShift":"?","withAltGr":"´"},"Equal":{"vkey":"VK_OEM_6","value":"^","withShift":"`","withAltGr":"~"},"BracketLeft":{"vkey":"VK_OEM_1","value":"è","withShift":"ü","withAltGr":"["},"BracketRight":{"vkey":"VK_OEM_3","value":"¨","withShift":"!","withAltGr":"]"},"Backslash":{"vkey":"VK_OEM_8","value":"$","withShift":"£","withAltGr":"}"},"Semicolon":{"vkey":"VK_OEM_7","value":"é","withShift":"ö"},"Quote":{"vkey":"VK_OEM_5","value":"à","withShift":"ä","withAltGr":"{"},"Backquote":{"vkey":"VK_OEM_2","value":"§","withShift":"°"},"Comma":{"vkey":"VK_OEM_COMMA","value":",","withShift":";"},"Period":{"vkey":"VK_OEM_PERIOD","value":".","withShift":":"},"Slash":{"vkey":"VK_OEM_MINUS","value":"-","withShift":"_"},"IntlBackslash":{"vkey":"VK_OEM_102","value":"<","withShift":">","withAltGr":"\\\\"},"IntlRo":{"vkey":"VK_ABNT_C1"},"IntlYen":{"vkey":"VK_UNKNOWN"}}}');

/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/src/common/keyboard/layouts/hu-Hungarian-mac.json":
/*!****************************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/src/common/keyboard/layouts/hu-Hungarian-mac.json ***!
  \****************************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"info":{"id":"com.apple.keylayout.Hungarian","lang":"hu"},"mapping":{"KeyA":{"value":"a","withShift":"A","withAltGr":"ą","withShiftAltGr":"Ą"},"KeyB":{"value":"b","withShift":"B","withAltGr":"”","withShiftAltGr":"’"},"KeyC":{"value":"c","withShift":"C","withAltGr":"ć","withShiftAltGr":"©"},"KeyD":{"value":"d","withShift":"D","withAltGr":"∂","withShiftAltGr":"Ž"},"KeyE":{"value":"e","withShift":"E","withAltGr":"€","withShiftAltGr":"š"},"KeyF":{"value":"f","withShift":"F","withAltGr":"ń","withShiftAltGr":"ž"},"KeyG":{"value":"g","withShift":"G","withAltGr":"©","withShiftAltGr":"Ū"},"KeyH":{"value":"h","withShift":"H","withAltGr":"ķ","withShiftAltGr":"Õ"},"KeyI":{"value":"i","withShift":"I","withAltGr":"^","withShiftAltGr":"ť"},"KeyJ":{"value":"j","withShift":"J","withAltGr":"∆","withShiftAltGr":"Ô"},"KeyK":{"value":"k","withShift":"K","withAltGr":"Ż","withShiftAltGr":"&"},"KeyL":{"value":"l","withShift":"L","withAltGr":"•","withShiftAltGr":"Ů"},"KeyM":{"value":"m","withShift":"M","withAltGr":"Ķ","withShiftAltGr":"ų"},"KeyN":{"value":"n","withShift":"N","withAltGr":"~","withShiftAltGr":"Ų"},"KeyO":{"value":"o","withShift":"O","withAltGr":"Ņ","withShiftAltGr":"Į"},"KeyP":{"value":"p","withShift":"P","withAltGr":"Ļ","withShiftAltGr":"ł"},"KeyQ":{"value":"q","withShift":"Q","withAltGr":"@","withShiftAltGr":"ļ"},"KeyR":{"value":"r","withShift":"R","withAltGr":"¶","withShiftAltGr":"®"},"KeyS":{"value":"s","withShift":"S","withAltGr":"ß","withShiftAltGr":"ż"},"KeyT":{"value":"t","withShift":"T","withAltGr":"†","withShiftAltGr":"ś"},"KeyU":{"value":"u","withShift":"U","withAltGr":"¨","withShiftAltGr":"†"},"KeyV":{"value":"v","withShift":"V","withAltGr":"„","withShiftAltGr":"‚"},"KeyW":{"value":"w","withShift":"W","withAltGr":"ę","withShiftAltGr":"Ł"},"KeyX":{"value":"x","withShift":"X","withAltGr":"»","withShiftAltGr":">"},"KeyY":{"value":"z","withShift":"Z","withAltGr":"ź","withShiftAltGr":"Ź"},"KeyZ":{"value":"y","withShift":"Y","withAltGr":"«","withShiftAltGr":"<"},"Digit1":{"value":"1","withShift":"\'","withAltGr":"&","withShiftAltGr":"ŕ"},"Digit2":{"value":"2","withShift":"\\"","withAltGr":"™","withShiftAltGr":"Ř"},"Digit3":{"value":"3","withShift":"+","withAltGr":"£","withShiftAltGr":"#"},"Digit4":{"value":"4","withShift":"!","withAltGr":"$","withShiftAltGr":"$"},"Digit5":{"value":"5","withShift":"%","withAltGr":"‹","withShiftAltGr":"ř"},"Digit6":{"value":"6","withShift":"/","withAltGr":"›","withShiftAltGr":"Ŗ"},"Digit7":{"value":"7","withShift":"=","withAltGr":"{","withShiftAltGr":"ŗ"},"Digit8":{"value":"8","withShift":"(","withAltGr":"[","withShiftAltGr":"™"},"Digit9":{"value":"9","withShift":")","withAltGr":"]","withShiftAltGr":"}"},"Digit0":{"value":"ö","withShift":"Ö","withAltGr":"}","withShiftAltGr":"°"},"Minus":{"value":"ü","withShift":"Ü","withAltGr":"\\\\","withShiftAltGr":"ī"},"Equal":{"value":"ó","withShift":"Ó","withAltGr":"≠","withShiftAltGr":"Ī"},"BracketLeft":{"value":"ő","withShift":"Ő","withAltGr":"¨","withShiftAltGr":"Ý"},"BracketRight":{"value":"ú","withShift":"Ú","withAltGr":"~","withShiftAltGr":"ý"},"Backslash":{"value":"ű","withShift":"Ű","withAltGr":"`","withShiftAltGr":"Ģ"},"Semicolon":{"value":"é","withShift":"É","withAltGr":"…","withShiftAltGr":"ō"},"Quote":{"value":"á","withShift":"Á","withAltGr":"^","withShiftAltGr":"ˇ"},"Backquote":{"value":"í","withShift":"Í","withAltGr":"|","withShiftAltGr":"Ŕ"},"Comma":{"value":",","withShift":"?","withAltGr":"–","withShiftAltGr":"*"},"Period":{"value":".","withShift":":","withAltGr":";","withShiftAltGr":"÷"},"Slash":{"value":"-","withShift":"_","withAltGr":"–","withShiftAltGr":"—"},"IntlBackslash":{"value":"0","withShift":"§","withAltGr":"¬","withShiftAltGr":"•"}}}');

/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/src/common/keyboard/layouts/hu-Hungarian-pc.json":
/*!***************************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/src/common/keyboard/layouts/hu-Hungarian-pc.json ***!
  \***************************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"info":{"name":"0000040E","id":"","text":"Hungarian"},"mapping":{"KeyA":{"vkey":"VK_A","value":"a","withShift":"A","withAltGr":"ä"},"KeyB":{"vkey":"VK_B","value":"b","withShift":"B","withAltGr":"{"},"KeyC":{"vkey":"VK_C","value":"c","withShift":"C","withAltGr":"&"},"KeyD":{"vkey":"VK_D","value":"d","withShift":"D","withAltGr":"Đ"},"KeyE":{"vkey":"VK_E","value":"e","withShift":"E","withAltGr":"Ä"},"KeyF":{"vkey":"VK_F","value":"f","withShift":"F","withAltGr":"["},"KeyG":{"vkey":"VK_G","value":"g","withShift":"G","withAltGr":"]"},"KeyH":{"vkey":"VK_H","value":"h","withShift":"H"},"KeyI":{"vkey":"VK_I","value":"i","withShift":"I","withAltGr":"Í"},"KeyJ":{"vkey":"VK_J","value":"j","withShift":"J","withAltGr":"í"},"KeyK":{"vkey":"VK_K","value":"k","withShift":"K","withAltGr":"ł"},"KeyL":{"vkey":"VK_L","value":"l","withShift":"L","withAltGr":"Ł"},"KeyM":{"vkey":"VK_M","value":"m","withShift":"M","withAltGr":"<"},"KeyN":{"vkey":"VK_N","value":"n","withShift":"N","withAltGr":"}"},"KeyO":{"vkey":"VK_O","value":"o","withShift":"O"},"KeyP":{"vkey":"VK_P","value":"p","withShift":"P"},"KeyQ":{"vkey":"VK_Q","value":"q","withShift":"Q","withAltGr":"\\\\"},"KeyR":{"vkey":"VK_R","value":"r","withShift":"R"},"KeyS":{"vkey":"VK_S","value":"s","withShift":"S","withAltGr":"đ"},"KeyT":{"vkey":"VK_T","value":"t","withShift":"T"},"KeyU":{"vkey":"VK_U","value":"u","withShift":"U","withAltGr":"€"},"KeyV":{"vkey":"VK_V","value":"v","withShift":"V","withAltGr":"@"},"KeyW":{"vkey":"VK_W","value":"w","withShift":"W","withAltGr":"|"},"KeyX":{"vkey":"VK_X","value":"x","withShift":"X","withAltGr":"#"},"KeyY":{"vkey":"VK_Z","value":"z","withShift":"Z"},"KeyZ":{"vkey":"VK_Y","value":"y","withShift":"Y","withAltGr":">"},"Digit1":{"vkey":"VK_1","value":"1","withShift":"\'","withAltGr":"~"},"Digit2":{"vkey":"VK_2","value":"2","withShift":"\\"","withAltGr":"ˇ"},"Digit3":{"vkey":"VK_3","value":"3","withShift":"+","withAltGr":"^"},"Digit4":{"vkey":"VK_4","value":"4","withShift":"!","withAltGr":"˘"},"Digit5":{"vkey":"VK_5","value":"5","withShift":"%","withAltGr":"°"},"Digit6":{"vkey":"VK_6","value":"6","withShift":"/","withAltGr":"˛"},"Digit7":{"vkey":"VK_7","value":"7","withShift":"=","withAltGr":"`"},"Digit8":{"vkey":"VK_8","value":"8","withShift":"(","withAltGr":"˙"},"Digit9":{"vkey":"VK_9","value":"9","withShift":")","withAltGr":"´"},"Digit0":{"vkey":"VK_OEM_3","value":"ö","withShift":"Ö","withAltGr":"˝"},"Minus":{"vkey":"VK_OEM_2","value":"ü","withShift":"Ü","withAltGr":"¨"},"Equal":{"vkey":"VK_OEM_PLUS","value":"ó","withShift":"Ó","withAltGr":"¸"},"BracketLeft":{"vkey":"VK_OEM_4","value":"ő","withShift":"Ő","withAltGr":"÷"},"BracketRight":{"vkey":"VK_OEM_6","value":"ú","withShift":"Ú","withAltGr":"×"},"Backslash":{"vkey":"VK_OEM_5","value":"ű","withShift":"Ű","withAltGr":"¤"},"Semicolon":{"vkey":"VK_OEM_1","value":"é","withShift":"É","withAltGr":"$"},"Quote":{"vkey":"VK_OEM_7","value":"á","withShift":"Á","withAltGr":"ß"},"Backquote":{"vkey":"VK_0","value":"0","withShift":"§"},"Comma":{"vkey":"VK_OEM_COMMA","value":",","withShift":"?","withAltGr":";"},"Period":{"vkey":"VK_OEM_PERIOD","value":".","withShift":":","withAltGr":">"},"Slash":{"vkey":"VK_OEM_MINUS","value":"-","withShift":"_","withAltGr":"*"},"IntlBackslash":{"vkey":"VK_OEM_102","value":"í","withShift":"Í","withAltGr":"<"},"IntlRo":{"vkey":"VK_ABNT_C1"},"IntlYen":{"vkey":"VK_UNKNOWN"}}}');

/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/src/common/keyboard/layouts/it-Italian-mac.json":
/*!**************************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/src/common/keyboard/layouts/it-Italian-mac.json ***!
  \**************************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"info":{"id":"com.apple.keylayout.Italian-Pro","lang":"it"},"mapping":{"KeyA":{"value":"a","withShift":"A","withAltGr":"å","withShiftAltGr":"Å"},"KeyB":{"value":"b","withShift":"B","withAltGr":"∫","withShiftAltGr":"Í"},"KeyC":{"value":"c","withShift":"C","withAltGr":"©","withShiftAltGr":"Á"},"KeyD":{"value":"d","withShift":"D","withAltGr":"∂","withShiftAltGr":"˘"},"KeyE":{"value":"e","withShift":"E","withAltGr":"€","withShiftAltGr":"È"},"KeyF":{"value":"f","withShift":"F","withAltGr":"ƒ","withShiftAltGr":"˙"},"KeyG":{"value":"g","withShift":"G","withAltGr":"∞","withShiftAltGr":"˚"},"KeyH":{"value":"h","withShift":"H","withAltGr":"∆","withShiftAltGr":"¸"},"KeyI":{"value":"i","withShift":"I","withAltGr":"œ","withShiftAltGr":"Œ"},"KeyJ":{"value":"j","withShift":"J","withAltGr":"ª","withShiftAltGr":"˝"},"KeyK":{"value":"k","withShift":"K","withAltGr":"º","withShiftAltGr":"˛"},"KeyL":{"value":"l","withShift":"L","withAltGr":"¬","withShiftAltGr":"ˇ"},"KeyM":{"value":"m","withShift":"M","withAltGr":"µ","withShiftAltGr":"Ú"},"KeyN":{"value":"n","withShift":"N","withAltGr":"˜","withShiftAltGr":"Ó"},"KeyO":{"value":"o","withShift":"O","withAltGr":"ø","withShiftAltGr":"Ø"},"KeyP":{"value":"p","withShift":"P","withAltGr":"π","withShiftAltGr":"∏"},"KeyQ":{"value":"q","withShift":"Q","withAltGr":"„","withShiftAltGr":"‚"},"KeyR":{"value":"r","withShift":"R","withAltGr":"®","withShiftAltGr":"Ì"},"KeyS":{"value":"s","withShift":"S","withAltGr":"ß","withShiftAltGr":"¯"},"KeyT":{"value":"t","withShift":"T","withAltGr":"™","withShiftAltGr":"Ò"},"KeyU":{"value":"u","withShift":"U","withAltGr":"¨","withShiftAltGr":"Ù"},"KeyV":{"value":"v","withShift":"V","withAltGr":"√","withShiftAltGr":"É"},"KeyW":{"value":"w","withShift":"W","withAltGr":"Ω","withShiftAltGr":"À"},"KeyX":{"value":"x","withShift":"X","withAltGr":"†","withShiftAltGr":"‡"},"KeyY":{"value":"y","withShift":"Y","withAltGr":"æ","withShiftAltGr":"Æ"},"KeyZ":{"value":"z","withShift":"Z","withAltGr":"∑","withShiftAltGr":" "},"Digit1":{"value":"1","withShift":"!","withAltGr":"«","withShiftAltGr":"»"},"Digit2":{"value":"2","withShift":"\\"","withAltGr":"“","withShiftAltGr":"”"},"Digit3":{"value":"3","withShift":"£","withAltGr":"‘","withShiftAltGr":"’"},"Digit4":{"value":"4","withShift":"$","withAltGr":"¥","withShiftAltGr":"¢"},"Digit5":{"value":"5","withShift":"%","withAltGr":"~","withShiftAltGr":"‰"},"Digit6":{"value":"6","withShift":"&","withAltGr":"‹","withShiftAltGr":"›"},"Digit7":{"value":"7","withShift":"/","withAltGr":"÷","withShiftAltGr":"⁄"},"Digit8":{"value":"8","withShift":"(","withAltGr":"´","withShiftAltGr":""},"Digit9":{"value":"9","withShift":")","withAltGr":"`","withShiftAltGr":" "},"Digit0":{"value":"0","withShift":"=","withAltGr":"≠","withShiftAltGr":"≈"},"Minus":{"value":"\'","withShift":"?","withAltGr":"¡","withShiftAltGr":"¿"},"Equal":{"value":"ì","withShift":"^","withAltGr":"ˆ","withShiftAltGr":"±"},"BracketLeft":{"value":"è","withShift":"é","withAltGr":"[","withShiftAltGr":"{"},"BracketRight":{"value":"+","withShift":"*","withAltGr":"]","withShiftAltGr":"}"},"Backslash":{"value":"ù","withShift":"§","withAltGr":"¶","withShiftAltGr":"◊"},"Semicolon":{"value":"ò","withShift":"ç","withAltGr":"@","withShiftAltGr":"Ç"},"Quote":{"value":"à","withShift":"°","withAltGr":"#","withShiftAltGr":"∞"},"Backquote":{"value":"<","withShift":">","withAltGr":"≤","withShiftAltGr":"≥"},"Comma":{"value":",","withShift":";","withAltGr":"…","withShiftAltGr":" "},"Period":{"value":".","withShift":":","withAltGr":"•","withShiftAltGr":"·"},"Slash":{"value":"-","withShift":"_","withAltGr":"–","withShiftAltGr":"—"},"IntlBackslash":{"value":"\\\\","withShift":"|","withAltGr":"`","withShiftAltGr":"ı"}}}');

/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/src/common/keyboard/layouts/it-Italian-pc.json":
/*!*************************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/src/common/keyboard/layouts/it-Italian-pc.json ***!
  \*************************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"info":{"name":"00000410","id":"","text":"Italian"},"mapping":{"KeyA":{"vkey":"VK_A","value":"a","withShift":"A"},"KeyB":{"vkey":"VK_B","value":"b","withShift":"B"},"KeyC":{"vkey":"VK_C","value":"c","withShift":"C"},"KeyD":{"vkey":"VK_D","value":"d","withShift":"D"},"KeyE":{"vkey":"VK_E","value":"e","withShift":"E","withAltGr":"€"},"KeyF":{"vkey":"VK_F","value":"f","withShift":"F"},"KeyG":{"vkey":"VK_G","value":"g","withShift":"G"},"KeyH":{"vkey":"VK_H","value":"h","withShift":"H"},"KeyI":{"vkey":"VK_I","value":"i","withShift":"I"},"KeyJ":{"vkey":"VK_J","value":"j","withShift":"J"},"KeyK":{"vkey":"VK_K","value":"k","withShift":"K"},"KeyL":{"vkey":"VK_L","value":"l","withShift":"L"},"KeyM":{"vkey":"VK_M","value":"m","withShift":"M"},"KeyN":{"vkey":"VK_N","value":"n","withShift":"N"},"KeyO":{"vkey":"VK_O","value":"o","withShift":"O"},"KeyP":{"vkey":"VK_P","value":"p","withShift":"P"},"KeyQ":{"vkey":"VK_Q","value":"q","withShift":"Q"},"KeyR":{"vkey":"VK_R","value":"r","withShift":"R"},"KeyS":{"vkey":"VK_S","value":"s","withShift":"S"},"KeyT":{"vkey":"VK_T","value":"t","withShift":"T"},"KeyU":{"vkey":"VK_U","value":"u","withShift":"U"},"KeyV":{"vkey":"VK_V","value":"v","withShift":"V"},"KeyW":{"vkey":"VK_W","value":"w","withShift":"W"},"KeyX":{"vkey":"VK_X","value":"x","withShift":"X"},"KeyY":{"vkey":"VK_Y","value":"y","withShift":"Y"},"KeyZ":{"vkey":"VK_Z","value":"z","withShift":"Z"},"Digit1":{"vkey":"VK_1","value":"1","withShift":"!"},"Digit2":{"vkey":"VK_2","value":"2","withShift":"\\""},"Digit3":{"vkey":"VK_3","value":"3","withShift":"£"},"Digit4":{"vkey":"VK_4","value":"4","withShift":"$"},"Digit5":{"vkey":"VK_5","value":"5","withShift":"%","withAltGr":"€"},"Digit6":{"vkey":"VK_6","value":"6","withShift":"&"},"Digit7":{"vkey":"VK_7","value":"7","withShift":"/"},"Digit8":{"vkey":"VK_8","value":"8","withShift":"("},"Digit9":{"vkey":"VK_9","value":"9","withShift":")"},"Digit0":{"vkey":"VK_0","value":"0","withShift":"="},"Minus":{"vkey":"VK_OEM_4","value":"\'","withShift":"?"},"Equal":{"vkey":"VK_OEM_6","value":"ì","withShift":"^"},"BracketLeft":{"vkey":"VK_OEM_1","value":"è","withShift":"é","withAltGr":"[","withShiftAltGr":"{"},"BracketRight":{"vkey":"VK_OEM_PLUS","value":"+","withShift":"*","withAltGr":"]","withShiftAltGr":"}"},"Backslash":{"vkey":"VK_OEM_2","value":"ù","withShift":"§"},"Semicolon":{"vkey":"VK_OEM_3","value":"ò","withShift":"ç","withAltGr":"@"},"Quote":{"vkey":"VK_OEM_7","value":"à","withShift":"°","withAltGr":"#"},"Backquote":{"vkey":"VK_OEM_5","value":"\\\\","withShift":"|"},"Comma":{"vkey":"VK_OEM_COMMA","value":",","withShift":";"},"Period":{"vkey":"VK_OEM_PERIOD","value":".","withShift":":"},"Slash":{"vkey":"VK_OEM_MINUS","value":"-","withShift":"_"},"IntlBackslash":{"vkey":"VK_OEM_102","value":"<","withShift":">"},"IntlRo":{"vkey":"VK_ABNT_C1"},"IntlYen":{"vkey":"VK_UNKNOWN"}}}');

/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/src/common/keyboard/layouts/nb-Norwegian-mac.json":
/*!****************************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/src/common/keyboard/layouts/nb-Norwegian-mac.json ***!
  \****************************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"info":{"id":"com.apple.keylayout.Norwegian","lang":"nb"},"mapping":{"KeyA":{"value":"a","withShift":"A","withAltGr":"","withShiftAltGr":"◊"},"KeyB":{"value":"b","withShift":"B","withAltGr":"›","withShiftAltGr":"»"},"KeyC":{"value":"c","withShift":"C","withAltGr":"ç","withShiftAltGr":"Ç"},"KeyD":{"value":"d","withShift":"D","withAltGr":"∂","withShiftAltGr":"∆"},"KeyE":{"value":"e","withShift":"E","withAltGr":"é","withShiftAltGr":"É"},"KeyF":{"value":"f","withShift":"F","withAltGr":"ƒ","withShiftAltGr":"∫"},"KeyG":{"value":"g","withShift":"G","withAltGr":"¸","withShiftAltGr":"¯"},"KeyH":{"value":"h","withShift":"H","withAltGr":"˛","withShiftAltGr":"˘"},"KeyI":{"value":"i","withShift":"I","withAltGr":"ı","withShiftAltGr":"ˆ"},"KeyJ":{"value":"j","withShift":"J","withAltGr":"√","withShiftAltGr":"¬"},"KeyK":{"value":"k","withShift":"K","withAltGr":"ª","withShiftAltGr":"º"},"KeyL":{"value":"l","withShift":"L","withAltGr":"ﬁ","withShiftAltGr":"ﬂ"},"KeyM":{"value":"m","withShift":"M","withAltGr":"’","withShiftAltGr":"”"},"KeyN":{"value":"n","withShift":"N","withAltGr":"‘","withShiftAltGr":"“"},"KeyO":{"value":"o","withShift":"O","withAltGr":"œ","withShiftAltGr":"Œ"},"KeyP":{"value":"p","withShift":"P","withAltGr":"π","withShiftAltGr":"∏"},"KeyQ":{"value":"q","withShift":"Q","withAltGr":"•","withShiftAltGr":"°"},"KeyR":{"value":"r","withShift":"R"},"KeyS":{"value":"s","withShift":"S","withAltGr":"ß","withShiftAltGr":"∑"},"KeyT":{"value":"t","withShift":"T","withAltGr":"†","withShiftAltGr":"‡"},"KeyU":{"value":"u","withShift":"U","withAltGr":"ü","withShiftAltGr":"Ü"},"KeyV":{"value":"v","withShift":"V","withAltGr":"‹","withShiftAltGr":"«"},"KeyW":{"value":"w","withShift":"W","withAltGr":"Ω","withShiftAltGr":"˝"},"KeyX":{"value":"x","withShift":"X","withAltGr":"≈"},"KeyY":{"value":"y","withShift":"Y","withAltGr":"µ","withShiftAltGr":"˜"},"KeyZ":{"value":"z","withShift":"Z","withAltGr":"÷","withShiftAltGr":"⁄"},"Digit1":{"value":"1","withShift":"!","withAltGr":"©","withShiftAltGr":"¡"},"Digit2":{"value":"2","withShift":"\\"","withAltGr":"™","withShiftAltGr":"®"},"Digit3":{"value":"3","withShift":"#","withAltGr":"£","withShiftAltGr":"¥"},"Digit4":{"value":"4","withShift":"$","withAltGr":"€","withShiftAltGr":"¢"},"Digit5":{"value":"5","withShift":"%","withAltGr":"∞","withShiftAltGr":"‰"},"Digit6":{"value":"6","withShift":"&","withAltGr":"§","withShiftAltGr":"¶"},"Digit7":{"value":"7","withShift":"/","withAltGr":"|","withShiftAltGr":"\\\\"},"Digit8":{"value":"8","withShift":"(","withAltGr":"[","withShiftAltGr":"{"},"Digit9":{"value":"9","withShift":")","withAltGr":"]","withShiftAltGr":"}"},"Digit0":{"value":"0","withShift":"=","withAltGr":"≈","withShiftAltGr":"≠"},"Minus":{"value":"+","withShift":"?","withAltGr":"±","withShiftAltGr":"¿"},"Equal":{"value":"´","withShift":"`","withAltGr":"`"},"BracketLeft":{"value":"å","withShift":"Å","withAltGr":"˙","withShiftAltGr":"˚"},"BracketRight":{"value":"¨","withShift":"^","withAltGr":"~","withShiftAltGr":"^"},"Backslash":{"value":"@","withShift":"*","withAltGr":"\'"},"Semicolon":{"value":"ø","withShift":"Ø","withAltGr":"ö","withShiftAltGr":"Ö"},"Quote":{"value":"æ","withShift":"Æ","withAltGr":"ä","withShiftAltGr":"Ä"},"Backquote":{"value":"<","withShift":">","withAltGr":"≤","withShiftAltGr":"≥"},"Comma":{"value":",","withShift":";","withAltGr":"‚","withShiftAltGr":"„"},"Period":{"value":".","withShift":":","withAltGr":"…","withShiftAltGr":"·"},"Slash":{"value":"-","withShift":"_","withAltGr":"–","withShiftAltGr":"—"},"IntlBackslash":{"value":"\'","withShift":"§","withAltGr":"€","withShiftAltGr":"Ÿ"}}}');

/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/src/common/keyboard/layouts/nb-Norwegian-pc.json":
/*!***************************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/src/common/keyboard/layouts/nb-Norwegian-pc.json ***!
  \***************************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"info":{"name":"00000414","id":"","text":"Norwegian"},"mapping":{"KeyA":{"vkey":"VK_A","value":"a","withShift":"A"},"KeyB":{"vkey":"VK_B","value":"b","withShift":"B"},"KeyC":{"vkey":"VK_C","value":"c","withShift":"C"},"KeyD":{"vkey":"VK_D","value":"d","withShift":"D"},"KeyE":{"vkey":"VK_E","value":"e","withShift":"E","withAltGr":"€"},"KeyF":{"vkey":"VK_F","value":"f","withShift":"F"},"KeyG":{"vkey":"VK_G","value":"g","withShift":"G"},"KeyH":{"vkey":"VK_H","value":"h","withShift":"H"},"KeyI":{"vkey":"VK_I","value":"i","withShift":"I"},"KeyJ":{"vkey":"VK_J","value":"j","withShift":"J"},"KeyK":{"vkey":"VK_K","value":"k","withShift":"K"},"KeyL":{"vkey":"VK_L","value":"l","withShift":"L"},"KeyM":{"vkey":"VK_M","value":"m","withShift":"M","withAltGr":"µ"},"KeyN":{"vkey":"VK_N","value":"n","withShift":"N"},"KeyO":{"vkey":"VK_O","value":"o","withShift":"O"},"KeyP":{"vkey":"VK_P","value":"p","withShift":"P"},"KeyQ":{"vkey":"VK_Q","value":"q","withShift":"Q"},"KeyR":{"vkey":"VK_R","value":"r","withShift":"R"},"KeyS":{"vkey":"VK_S","value":"s","withShift":"S"},"KeyT":{"vkey":"VK_T","value":"t","withShift":"T"},"KeyU":{"vkey":"VK_U","value":"u","withShift":"U"},"KeyV":{"vkey":"VK_V","value":"v","withShift":"V"},"KeyW":{"vkey":"VK_W","value":"w","withShift":"W"},"KeyX":{"vkey":"VK_X","value":"x","withShift":"X"},"KeyY":{"vkey":"VK_Y","value":"y","withShift":"Y"},"KeyZ":{"vkey":"VK_Z","value":"z","withShift":"Z"},"Digit1":{"vkey":"VK_1","value":"1","withShift":"!"},"Digit2":{"vkey":"VK_2","value":"2","withShift":"\\"","withAltGr":"@"},"Digit3":{"vkey":"VK_3","value":"3","withShift":"#","withAltGr":"£"},"Digit4":{"vkey":"VK_4","value":"4","withShift":"¤","withAltGr":"$"},"Digit5":{"vkey":"VK_5","value":"5","withShift":"%","withAltGr":"€"},"Digit6":{"vkey":"VK_6","value":"6","withShift":"&"},"Digit7":{"vkey":"VK_7","value":"7","withShift":"/","withAltGr":"{"},"Digit8":{"vkey":"VK_8","value":"8","withShift":"(","withAltGr":"["},"Digit9":{"vkey":"VK_9","value":"9","withShift":")","withAltGr":"]"},"Digit0":{"vkey":"VK_0","value":"0","withShift":"=","withAltGr":"}"},"Minus":{"vkey":"VK_OEM_PLUS","value":"+","withShift":"?"},"Equal":{"vkey":"VK_OEM_4","value":"\\\\","withShift":"`","withAltGr":"´"},"BracketLeft":{"vkey":"VK_OEM_6","value":"å","withShift":"Å"},"BracketRight":{"vkey":"VK_OEM_1","value":"¨","withShift":"^","withAltGr":"~"},"Backslash":{"vkey":"VK_OEM_2","value":"\'","withShift":"*"},"Semicolon":{"vkey":"VK_OEM_3","value":"ø","withShift":"Ø"},"Quote":{"vkey":"VK_OEM_7","value":"æ","withShift":"Æ"},"Backquote":{"vkey":"VK_OEM_5","value":"|","withShift":"§"},"Comma":{"vkey":"VK_OEM_COMMA","value":",","withShift":";"},"Period":{"vkey":"VK_OEM_PERIOD","value":".","withShift":":"},"Slash":{"vkey":"VK_OEM_MINUS","value":"-","withShift":"_"},"IntlBackslash":{"vkey":"VK_OEM_102","value":"<","withShift":">"},"IntlRo":{"vkey":"VK_ABNT_C1"},"IntlYen":{"vkey":"VK_UNKNOWN"}}}');

/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/src/common/keyboard/layouts/nl-Dutch-mac.json":
/*!************************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/src/common/keyboard/layouts/nl-Dutch-mac.json ***!
  \************************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"info":{"id":"com.apple.keylayout.Dutch","lang":"nl"},"mapping":{"KeyA":{"value":"a","withShift":"A","withAltGr":"å","withShiftAltGr":"Å"},"KeyB":{"value":"b","withShift":"B","withAltGr":"∫","withShiftAltGr":"ı"},"KeyC":{"value":"c","withShift":"C","withAltGr":"ç","withShiftAltGr":"Ç"},"KeyD":{"value":"d","withShift":"D","withAltGr":"∂","withShiftAltGr":"Î"},"KeyE":{"value":"e","withShift":"E","withAltGr":"´","withShiftAltGr":"‰"},"KeyF":{"value":"f","withShift":"F","withAltGr":"ƒ","withShiftAltGr":"Ï"},"KeyG":{"value":"g","withShift":"G","withAltGr":"©","withShiftAltGr":"Ì"},"KeyH":{"value":"h","withShift":"H","withAltGr":"˙","withShiftAltGr":"Ó"},"KeyI":{"value":"i","withShift":"I","withAltGr":"^","withShiftAltGr":"È"},"KeyJ":{"value":"j","withShift":"J","withAltGr":"∆","withShiftAltGr":"Ô"},"KeyK":{"value":"k","withShift":"K","withAltGr":"˚","withShiftAltGr":""},"KeyL":{"value":"l","withShift":"L","withAltGr":"¬","withShiftAltGr":"Ò"},"KeyM":{"value":"m","withShift":"M","withAltGr":"µ","withShiftAltGr":"˜"},"KeyN":{"value":"n","withShift":"N","withAltGr":"~","withShiftAltGr":"ˆ"},"KeyO":{"value":"o","withShift":"O","withAltGr":"ø","withShiftAltGr":"Ø"},"KeyP":{"value":"p","withShift":"P","withAltGr":"π","withShiftAltGr":"∏"},"KeyQ":{"value":"q","withShift":"Q","withAltGr":"œ","withShiftAltGr":"Œ"},"KeyR":{"value":"r","withShift":"R","withAltGr":"®","withShiftAltGr":"Â"},"KeyS":{"value":"s","withShift":"S","withAltGr":"ß","withShiftAltGr":"Í"},"KeyT":{"value":"t","withShift":"T","withAltGr":"†","withShiftAltGr":"Ê"},"KeyU":{"value":"u","withShift":"U","withAltGr":"¨","withShiftAltGr":"Ë"},"KeyV":{"value":"v","withShift":"V","withAltGr":"√","withShiftAltGr":"◊"},"KeyW":{"value":"w","withShift":"W","withAltGr":"∑","withShiftAltGr":"„"},"KeyX":{"value":"x","withShift":"X","withAltGr":"≈","withShiftAltGr":"Ù"},"KeyY":{"value":"y","withShift":"Y","withAltGr":"¥","withShiftAltGr":"Á"},"KeyZ":{"value":"z","withShift":"Z","withAltGr":"Ω","withShiftAltGr":"Û"},"Digit1":{"value":"1","withShift":"!","withAltGr":"¡","withShiftAltGr":"⁄"},"Digit2":{"value":"2","withShift":"@","withAltGr":"€","withShiftAltGr":"™"},"Digit3":{"value":"3","withShift":"#","withAltGr":"£","withShiftAltGr":"‹"},"Digit4":{"value":"4","withShift":"$","withAltGr":"¢","withShiftAltGr":"›"},"Digit5":{"value":"5","withShift":"%","withAltGr":"∞","withShiftAltGr":"ﬁ"},"Digit6":{"value":"6","withShift":"^","withAltGr":"§","withShiftAltGr":"ﬂ"},"Digit7":{"value":"7","withShift":"&","withAltGr":"¶","withShiftAltGr":"‡"},"Digit8":{"value":"8","withShift":"*","withAltGr":"•","withShiftAltGr":"°"},"Digit9":{"value":"9","withShift":"(","withAltGr":"ª","withShiftAltGr":"·"},"Digit0":{"value":"0","withShift":")","withAltGr":"º","withShiftAltGr":"‚"},"Minus":{"value":"-","withShift":"_","withAltGr":"–","withShiftAltGr":"—"},"Equal":{"value":"=","withShift":"+","withAltGr":"≠","withShiftAltGr":"±"},"BracketLeft":{"value":"[","withShift":"{","withAltGr":"“","withShiftAltGr":"”"},"BracketRight":{"value":"]","withShift":"}","withAltGr":"‘","withShiftAltGr":"’"},"Backslash":{"value":"\\\\","withShift":"|","withAltGr":"«","withShiftAltGr":"»"},"Semicolon":{"value":";","withShift":":","withAltGr":"…","withShiftAltGr":"Ú"},"Quote":{"value":"\'","withShift":"\\"","withAltGr":"æ","withShiftAltGr":"Æ"},"Backquote":{"value":"`","withShift":"~","withAltGr":"`","withShiftAltGr":"Ÿ"},"Comma":{"value":",","withShift":"<","withAltGr":"≤","withShiftAltGr":"¯"},"Period":{"value":".","withShift":">","withAltGr":"≥","withShiftAltGr":"˘"},"Slash":{"value":"/","withShift":"?","withAltGr":"÷","withShiftAltGr":"¿"},"IntlBackslash":{"value":"§","withShift":"±"}}}');

/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/src/common/keyboard/layouts/nl-Dutch-pc.json":
/*!***********************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/src/common/keyboard/layouts/nl-Dutch-pc.json ***!
  \***********************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"info":{"name":"00000413","id":"","text":"Dutch"},"mapping":{"KeyA":{"vkey":"VK_A","value":"a","withShift":"A"},"KeyB":{"vkey":"VK_B","value":"b","withShift":"B"},"KeyC":{"vkey":"VK_C","value":"c","withShift":"C","withAltGr":"¢"},"KeyD":{"vkey":"VK_D","value":"d","withShift":"D"},"KeyE":{"vkey":"VK_E","value":"e","withShift":"E","withAltGr":"€"},"KeyF":{"vkey":"VK_F","value":"f","withShift":"F"},"KeyG":{"vkey":"VK_G","value":"g","withShift":"G"},"KeyH":{"vkey":"VK_H","value":"h","withShift":"H"},"KeyI":{"vkey":"VK_I","value":"i","withShift":"I"},"KeyJ":{"vkey":"VK_J","value":"j","withShift":"J"},"KeyK":{"vkey":"VK_K","value":"k","withShift":"K"},"KeyL":{"vkey":"VK_L","value":"l","withShift":"L"},"KeyM":{"vkey":"VK_M","value":"m","withShift":"M","withAltGr":"µ"},"KeyN":{"vkey":"VK_N","value":"n","withShift":"N"},"KeyO":{"vkey":"VK_O","value":"o","withShift":"O"},"KeyP":{"vkey":"VK_P","value":"p","withShift":"P"},"KeyQ":{"vkey":"VK_Q","value":"q","withShift":"Q"},"KeyR":{"vkey":"VK_R","value":"r","withShift":"R","withAltGr":"¶"},"KeyS":{"vkey":"VK_S","value":"s","withShift":"S","withAltGr":"ß"},"KeyT":{"vkey":"VK_T","value":"t","withShift":"T"},"KeyU":{"vkey":"VK_U","value":"u","withShift":"U"},"KeyV":{"vkey":"VK_V","value":"v","withShift":"V"},"KeyW":{"vkey":"VK_W","value":"w","withShift":"W"},"KeyX":{"vkey":"VK_X","value":"x","withShift":"X","withAltGr":"»"},"KeyY":{"vkey":"VK_Y","value":"y","withShift":"Y"},"KeyZ":{"vkey":"VK_Z","value":"z","withShift":"Z","withAltGr":"«"},"Digit1":{"vkey":"VK_1","value":"1","withShift":"!","withAltGr":"¹"},"Digit2":{"vkey":"VK_2","value":"2","withShift":"\\"","withAltGr":"²"},"Digit3":{"vkey":"VK_3","value":"3","withShift":"#","withAltGr":"³"},"Digit4":{"vkey":"VK_4","value":"4","withShift":"$","withAltGr":"¼"},"Digit5":{"vkey":"VK_5","value":"5","withShift":"%","withAltGr":"½"},"Digit6":{"vkey":"VK_6","value":"6","withShift":"&","withAltGr":"¾"},"Digit7":{"vkey":"VK_7","value":"7","withShift":"_","withAltGr":"£"},"Digit8":{"vkey":"VK_8","value":"8","withShift":"(","withAltGr":"{"},"Digit9":{"vkey":"VK_9","value":"9","withShift":")","withAltGr":"}"},"Digit0":{"vkey":"VK_0","value":"0","withShift":"\'"},"Minus":{"vkey":"VK_OEM_4","value":"/","withShift":"?","withAltGr":"\\\\"},"Equal":{"vkey":"VK_OEM_2","value":"°","withShift":"~","withAltGr":"¸"},"BracketLeft":{"vkey":"VK_OEM_6","value":"¨","withShift":"^"},"BracketRight":{"vkey":"VK_OEM_1","value":"*","withShift":"|"},"Backslash":{"vkey":"VK_OEM_5","value":"<","withShift":">"},"Semicolon":{"vkey":"VK_OEM_PLUS","value":"+","withShift":"±"},"Quote":{"vkey":"VK_OEM_3","value":"´","withShift":"`"},"Backquote":{"vkey":"VK_OEM_7","value":"@","withShift":"§","withAltGr":"¬"},"Comma":{"vkey":"VK_OEM_COMMA","value":",","withShift":";"},"Period":{"vkey":"VK_OEM_PERIOD","value":".","withShift":":","withAltGr":"·"},"Slash":{"vkey":"VK_OEM_MINUS","value":"-","withShift":"="},"IntlBackslash":{"vkey":"VK_OEM_102","value":"]","withShift":"[","withAltGr":"¦"},"IntlRo":{"vkey":"VK_ABNT_C1"},"IntlYen":{"vkey":"VK_UNKNOWN"}}}');

/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/src/common/keyboard/layouts/pl-Polish-mac.json":
/*!*************************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/src/common/keyboard/layouts/pl-Polish-mac.json ***!
  \*************************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"info":{"id":"com.apple.keylayout.Polish","lang":"pl"},"mapping":{"KeyA":{"value":"a","withShift":"A","withAltGr":"ū","withShiftAltGr":"Ľ"},"KeyB":{"value":"b","withShift":"B","withAltGr":"ű","withShiftAltGr":"ŗ"},"KeyC":{"value":"c","withShift":"C","withAltGr":"ˇ","withShiftAltGr":"Ŗ"},"KeyD":{"value":"d","withShift":"D","withAltGr":"∂","withShiftAltGr":"Ņ"},"KeyE":{"value":"e","withShift":"E","withAltGr":"´","withShiftAltGr":"Į"},"KeyF":{"value":"f","withShift":"F","withAltGr":"Ů","withShiftAltGr":"ņ"},"KeyG":{"value":"g","withShift":"G","withAltGr":"©","withShiftAltGr":"Ő"},"KeyH":{"value":"h","withShift":"H","withAltGr":"ů","withShiftAltGr":"Ō"},"KeyI":{"value":"i","withShift":"I","withAltGr":"^","withShiftAltGr":"Ļ"},"KeyJ":{"value":"j","withShift":"J","withAltGr":"∆","withShiftAltGr":"ō"},"KeyK":{"value":"k","withShift":"K","withAltGr":"Ű","withShiftAltGr":"Ŕ"},"KeyL":{"value":"l","withShift":"L","withAltGr":"¬","withShiftAltGr":"ŕ"},"KeyM":{"value":"m","withShift":"M","withAltGr":"Ų","withShiftAltGr":"ý"},"KeyN":{"value":"n","withShift":"N","withAltGr":"~","withShiftAltGr":"Ý"},"KeyO":{"value":"o","withShift":"O","withAltGr":"£","withShiftAltGr":"ļ"},"KeyP":{"value":"p","withShift":"P","withAltGr":"‘","withShiftAltGr":"“"},"KeyQ":{"value":"q","withShift":"Q","withAltGr":"Ū","withShiftAltGr":"Ė"},"KeyR":{"value":"r","withShift":"R","withAltGr":"®","withShiftAltGr":"į"},"KeyS":{"value":"s","withShift":"S","withAltGr":"ß","withShiftAltGr":"ľ"},"KeyT":{"value":"t","withShift":"T","withAltGr":"†","withShiftAltGr":"Ī"},"KeyU":{"value":"u","withShift":"U","withAltGr":"¨","withShiftAltGr":"Ķ"},"KeyV":{"value":"v","withShift":"V","withAltGr":"√","withShiftAltGr":"◊"},"KeyW":{"value":"w","withShift":"W","withAltGr":"∑","withShiftAltGr":"ė"},"KeyX":{"value":"x","withShift":"X","withAltGr":"≤","withShiftAltGr":"≥"},"KeyY":{"value":"z","withShift":"Z","withAltGr":"°","withShiftAltGr":"ī"},"KeyZ":{"value":"y","withShift":"Y","withAltGr":"‹","withShiftAltGr":"›"},"Digit1":{"value":"1","withShift":"§","withAltGr":"&","withShiftAltGr":"Ā"},"Digit2":{"value":"2","withShift":"%","withAltGr":"@","withShiftAltGr":"ā"},"Digit3":{"value":"3","withShift":"!","withAltGr":"#","withShiftAltGr":"ď"},"Digit4":{"value":"4","withShift":"?","withAltGr":"€","withShiftAltGr":"Ē"},"Digit5":{"value":"5","withShift":"+","withAltGr":"`","withShiftAltGr":"ē"},"Digit6":{"value":"6","withShift":"=","withAltGr":"™","withShiftAltGr":"ķ"},"Digit7":{"value":"7","withShift":":","withAltGr":"¶","withShiftAltGr":"°"},"Digit8":{"value":"8","withShift":"_","withAltGr":"•","withShiftAltGr":"–"},"Digit9":{"value":"9","withShift":"/","withAltGr":"\\\\","withShiftAltGr":"|"},"Digit0":{"value":"0","withShift":"\\"","withAltGr":"„","withShiftAltGr":"”"},"Minus":{"value":"ż","withShift":"Ż","withAltGr":"‚","withShiftAltGr":"’"},"Equal":{"value":"[","withShift":"]","withAltGr":"≠","withShiftAltGr":"÷"},"BracketLeft":{"value":"ó","withShift":"ź","withAltGr":"Ó","withShiftAltGr":"Ź"},"BracketRight":{"value":"(","withShift":")","withAltGr":"{","withShiftAltGr":"}"},"Backslash":{"value":";","withShift":"$","withAltGr":"\'","withShiftAltGr":"~"},"Semicolon":{"value":"ł","withShift":"Ł","withAltGr":"…","withShiftAltGr":"ť"},"Quote":{"value":"ą","withShift":"ę","withAltGr":"Ą","withShiftAltGr":"Ę"},"Backquote":{"value":"<","withShift":">","withAltGr":"«","withShiftAltGr":"»"},"Comma":{"value":".","withShift":"ś","withAltGr":"ų","withShiftAltGr":"Ś"},"Period":{"value":",","withShift":"ń","withAltGr":"Ģ","withShiftAltGr":"Ń"},"Slash":{"value":"-","withShift":"ć","withAltGr":"—","withShiftAltGr":"Ć"},"IntlBackslash":{"value":"^","withShift":"*","withAltGr":"§","withShiftAltGr":"§"}}}');

/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/src/common/keyboard/layouts/pl-Polish-pc.json":
/*!************************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/src/common/keyboard/layouts/pl-Polish-pc.json ***!
  \************************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"info":{"name":"00010415","id":"0007","text":"Polish (214)"},"mapping":{"KeyA":{"vkey":"VK_A","value":"a","withShift":"A"},"KeyB":{"vkey":"VK_B","value":"b","withShift":"B","withAltGr":"{"},"KeyC":{"vkey":"VK_C","value":"c","withShift":"C"},"KeyD":{"vkey":"VK_D","value":"d","withShift":"D","withAltGr":"Đ"},"KeyE":{"vkey":"VK_E","value":"e","withShift":"E"},"KeyF":{"vkey":"VK_F","value":"f","withShift":"F"},"KeyG":{"vkey":"VK_G","value":"g","withShift":"G"},"KeyH":{"vkey":"VK_H","value":"h","withShift":"H"},"KeyI":{"vkey":"VK_I","value":"i","withShift":"I"},"KeyJ":{"vkey":"VK_J","value":"j","withShift":"J"},"KeyK":{"vkey":"VK_K","value":"k","withShift":"K"},"KeyL":{"vkey":"VK_L","value":"l","withShift":"L"},"KeyM":{"vkey":"VK_M","value":"m","withShift":"M","withAltGr":"§"},"KeyN":{"vkey":"VK_N","value":"n","withShift":"N","withAltGr":"}"},"KeyO":{"vkey":"VK_O","value":"o","withShift":"O"},"KeyP":{"vkey":"VK_P","value":"p","withShift":"P"},"KeyQ":{"vkey":"VK_Q","value":"q","withShift":"Q","withAltGr":"\\\\"},"KeyR":{"vkey":"VK_R","value":"r","withShift":"R"},"KeyS":{"vkey":"VK_S","value":"s","withShift":"S","withAltGr":"đ"},"KeyT":{"vkey":"VK_T","value":"t","withShift":"T"},"KeyU":{"vkey":"VK_U","value":"u","withShift":"U","withAltGr":"€"},"KeyV":{"vkey":"VK_V","value":"v","withShift":"V","withAltGr":"@"},"KeyW":{"vkey":"VK_W","value":"w","withShift":"W","withAltGr":"¦"},"KeyX":{"vkey":"VK_X","value":"x","withShift":"X"},"KeyY":{"vkey":"VK_Z","value":"z","withShift":"Z"},"KeyZ":{"vkey":"VK_Y","value":"y","withShift":"Y"},"Digit1":{"vkey":"VK_1","value":"1","withShift":"!","withAltGr":"~"},"Digit2":{"vkey":"VK_2","value":"2","withShift":"\\"","withAltGr":"ˇ"},"Digit3":{"vkey":"VK_3","value":"3","withShift":"#","withAltGr":"^"},"Digit4":{"vkey":"VK_4","value":"4","withShift":"¤","withAltGr":"˘"},"Digit5":{"vkey":"VK_5","value":"5","withShift":"%","withAltGr":"°"},"Digit6":{"vkey":"VK_6","value":"6","withShift":"&","withAltGr":"˛"},"Digit7":{"vkey":"VK_7","value":"7","withShift":"/","withAltGr":"`"},"Digit8":{"vkey":"VK_8","value":"8","withShift":"(","withAltGr":"·"},"Digit9":{"vkey":"VK_9","value":"9","withShift":")","withAltGr":"´"},"Digit0":{"vkey":"VK_0","value":"0","withShift":"=","withAltGr":"˝"},"Minus":{"vkey":"VK_OEM_PLUS","value":"+","withShift":"?","withAltGr":"¨"},"Equal":{"vkey":"VK_OEM_2","value":"\'","withShift":"*","withAltGr":"¸"},"BracketLeft":{"vkey":"VK_OEM_4","value":"ż","withShift":"ń","withAltGr":"÷"},"BracketRight":{"vkey":"VK_OEM_6","value":"ś","withShift":"ć","withAltGr":"×"},"Backslash":{"vkey":"VK_OEM_5","value":"ó","withShift":"ź"},"Semicolon":{"vkey":"VK_OEM_1","value":"ł","withShift":"Ł","withAltGr":"$"},"Quote":{"vkey":"VK_OEM_7","value":"ą","withShift":"ę","withAltGr":"ß"},"Backquote":{"vkey":"VK_OEM_3","value":"˛","withShift":"·"},"Comma":{"vkey":"VK_OEM_COMMA","value":",","withShift":";","withAltGr":"<"},"Period":{"vkey":"VK_OEM_PERIOD","value":".","withShift":":","withAltGr":">"},"Slash":{"vkey":"VK_OEM_MINUS","value":"-","withShift":"_"},"IntlBackslash":{"vkey":"VK_OEM_102","value":"<","withShift":">"},"IntlRo":{"vkey":"VK_ABNT_C1"},"IntlYen":{"vkey":"VK_UNKNOWN"}}}');

/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/src/common/keyboard/layouts/pt-Brazilian-mac.json":
/*!****************************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/src/common/keyboard/layouts/pt-Brazilian-mac.json ***!
  \****************************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"info":{"id":"com.apple.keylayout.Brazilian","lang":"pt"},"mapping":{"KeyA":{"value":"a","withShift":"A","withAltGr":"å","withShiftAltGr":"Å"},"KeyB":{"value":"b","withShift":"B","withAltGr":"∫","withShiftAltGr":"ı"},"KeyC":{"value":"c","withShift":"C","withAltGr":"ç","withShiftAltGr":"Ç"},"KeyD":{"value":"d","withShift":"D","withAltGr":"∂","withShiftAltGr":"Î"},"KeyE":{"value":"e","withShift":"E","withAltGr":"´","withShiftAltGr":"´"},"KeyF":{"value":"f","withShift":"F","withAltGr":"ƒ","withShiftAltGr":"Ï"},"KeyG":{"value":"g","withShift":"G","withAltGr":"©","withShiftAltGr":"˝"},"KeyH":{"value":"h","withShift":"H","withAltGr":"˙","withShiftAltGr":"Ó"},"KeyI":{"value":"i","withShift":"I","withAltGr":"ˆ","withShiftAltGr":"ˆ"},"KeyJ":{"value":"j","withShift":"J","withAltGr":"∆","withShiftAltGr":"Ô"},"KeyK":{"value":"k","withShift":"K","withAltGr":"˚","withShiftAltGr":""},"KeyL":{"value":"l","withShift":"L","withAltGr":"¬","withShiftAltGr":"Ò"},"KeyM":{"value":"m","withShift":"M","withAltGr":"µ","withShiftAltGr":"Â"},"KeyN":{"value":"n","withShift":"N","withAltGr":"˜","withShiftAltGr":"˜"},"KeyO":{"value":"o","withShift":"O","withAltGr":"ø","withShiftAltGr":"Ø"},"KeyP":{"value":"p","withShift":"P","withAltGr":"π","withShiftAltGr":"∏"},"KeyQ":{"value":"q","withShift":"Q","withAltGr":"œ","withShiftAltGr":"Œ"},"KeyR":{"value":"r","withShift":"R","withAltGr":"®","withShiftAltGr":"‰"},"KeyS":{"value":"s","withShift":"S","withAltGr":"ß","withShiftAltGr":"Í"},"KeyT":{"value":"t","withShift":"T","withAltGr":"†","withShiftAltGr":"ˇ"},"KeyU":{"value":"u","withShift":"U","withAltGr":"¨","withShiftAltGr":"¨"},"KeyV":{"value":"v","withShift":"V","withAltGr":"√","withShiftAltGr":"◊"},"KeyW":{"value":"w","withShift":"W","withAltGr":"∑","withShiftAltGr":"„"},"KeyX":{"value":"x","withShift":"X","withAltGr":"≈","withShiftAltGr":"˛"},"KeyY":{"value":"y","withShift":"Y","withAltGr":"¥","withShiftAltGr":"Á"},"KeyZ":{"value":"z","withShift":"Z","withAltGr":"Ω","withShiftAltGr":"¸"},"Digit1":{"value":"1","withShift":"!","withAltGr":"¡","withShiftAltGr":"⁄"},"Digit2":{"value":"2","withShift":"@","withAltGr":"™","withShiftAltGr":"€"},"Digit3":{"value":"3","withShift":"#","withAltGr":"£","withShiftAltGr":"‹"},"Digit4":{"value":"4","withShift":"$","withAltGr":"¢","withShiftAltGr":"›"},"Digit5":{"value":"5","withShift":"%","withAltGr":"∞","withShiftAltGr":"ﬁ"},"Digit6":{"value":"6","withShift":"^","withAltGr":"§","withShiftAltGr":"ﬂ"},"Digit7":{"value":"7","withShift":"&","withAltGr":"¶","withShiftAltGr":"‡"},"Digit8":{"value":"8","withShift":"*","withAltGr":"•","withShiftAltGr":"°"},"Digit9":{"value":"9","withShift":"(","withAltGr":"ª","withShiftAltGr":"·"},"Digit0":{"value":"0","withShift":")","withAltGr":"º","withShiftAltGr":"‚"},"Minus":{"value":"-","withShift":"_","withAltGr":"–","withShiftAltGr":"—"},"Equal":{"value":"=","withShift":"+","withAltGr":"≠","withShiftAltGr":"±"},"BracketLeft":{"value":"[","withShift":"{","withAltGr":"“","withShiftAltGr":"”"},"BracketRight":{"value":"]","withShift":"}","withAltGr":"‘","withShiftAltGr":"’"},"Backslash":{"value":"\\\\","withShift":"|","withAltGr":"«","withShiftAltGr":"»"},"Semicolon":{"value":";","withShift":":","withAltGr":"…","withShiftAltGr":"Ú"},"Quote":{"value":"\'","withShift":"\\"","withAltGr":"æ","withShiftAltGr":"Æ"},"Backquote":{"value":"`","withShift":"~","withAltGr":"`","withShiftAltGr":"`"},"Comma":{"value":",","withShift":"<","withAltGr":"≤","withShiftAltGr":"¯"},"Period":{"value":".","withShift":">","withAltGr":"≥","withShiftAltGr":"˘"},"Slash":{"value":"/","withShift":"?","withAltGr":"÷","withShiftAltGr":"¿"},"IntlBackslash":{"value":"§","withShift":"±","withAltGr":"§","withShiftAltGr":"±"}}}');

/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/src/common/keyboard/layouts/pt-Portuguese-mac.json":
/*!*****************************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/src/common/keyboard/layouts/pt-Portuguese-mac.json ***!
  \*****************************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"info":{"id":"com.apple.keylayout.Portuguese","lang":"pt"},"mapping":{"KeyA":{"value":"a","withShift":"A","withAltGr":"å","withShiftAltGr":"Å"},"KeyB":{"value":"b","withShift":"B","withAltGr":"∫","withShiftAltGr":"∫"},"KeyC":{"value":"c","withShift":"C","withAltGr":"©","withShiftAltGr":"©"},"KeyD":{"value":"d","withShift":"D","withAltGr":"∂","withShiftAltGr":"∆"},"KeyE":{"value":"e","withShift":"E","withAltGr":"æ","withShiftAltGr":"Æ"},"KeyF":{"value":"f","withShift":"F","withAltGr":"ƒ","withShiftAltGr":"ƒ"},"KeyG":{"value":"g","withShift":"G","withAltGr":"˙","withShiftAltGr":"˙"},"KeyH":{"value":"h","withShift":"H","withAltGr":"ˇ","withShiftAltGr":"ˇ"},"KeyI":{"value":"i","withShift":"I","withAltGr":"ı","withShiftAltGr":"˚"},"KeyJ":{"value":"j","withShift":"J","withAltGr":"¯","withShiftAltGr":"¯"},"KeyK":{"value":"k","withShift":"K","withAltGr":"„","withShiftAltGr":"‚"},"KeyL":{"value":"l","withShift":"L","withAltGr":"‘","withShiftAltGr":"’"},"KeyM":{"value":"m","withShift":"M","withAltGr":"µ","withShiftAltGr":"µ"},"KeyN":{"value":"n","withShift":"N","withAltGr":"¬","withShiftAltGr":"¬"},"KeyO":{"value":"o","withShift":"O","withAltGr":"ø","withShiftAltGr":"Ø"},"KeyP":{"value":"p","withShift":"P","withAltGr":"π","withShiftAltGr":"∏"},"KeyQ":{"value":"q","withShift":"Q","withAltGr":"œ","withShiftAltGr":"Œ"},"KeyR":{"value":"r","withShift":"R","withAltGr":"®","withShiftAltGr":"®"},"KeyS":{"value":"s","withShift":"S","withAltGr":"ß","withShiftAltGr":"ß"},"KeyT":{"value":"t","withShift":"T","withAltGr":"™","withShiftAltGr":"™"},"KeyU":{"value":"u","withShift":"U","withAltGr":"†","withShiftAltGr":"‡"},"KeyV":{"value":"v","withShift":"V","withAltGr":"√","withShiftAltGr":"√"},"KeyW":{"value":"w","withShift":"W","withAltGr":"∑","withShiftAltGr":"∑"},"KeyX":{"value":"x","withShift":"X","withAltGr":"«","withShiftAltGr":"»"},"KeyY":{"value":"y","withShift":"Y","withAltGr":"¥","withShiftAltGr":"¥"},"KeyZ":{"value":"z","withShift":"Z","withAltGr":"Ω","withShiftAltGr":"Ω"},"Digit1":{"value":"1","withShift":"!","withAltGr":"","withShiftAltGr":"¡"},"Digit2":{"value":"2","withShift":"\\"","withAltGr":"@","withShiftAltGr":"ﬁ"},"Digit3":{"value":"3","withShift":"#","withAltGr":"€","withShiftAltGr":"ﬂ"},"Digit4":{"value":"4","withShift":"$","withAltGr":"£","withShiftAltGr":"¢"},"Digit5":{"value":"5","withShift":"%","withAltGr":"‰","withShiftAltGr":"∞"},"Digit6":{"value":"6","withShift":"&","withAltGr":"¶","withShiftAltGr":"•"},"Digit7":{"value":"7","withShift":"/","withAltGr":"÷","withShiftAltGr":"⁄"},"Digit8":{"value":"8","withShift":"(","withAltGr":"[","withShiftAltGr":"{"},"Digit9":{"value":"9","withShift":")","withAltGr":"]","withShiftAltGr":"}"},"Digit0":{"value":"0","withShift":"=","withAltGr":"≠","withShiftAltGr":"≈"},"Minus":{"value":"\'","withShift":"?","withAltGr":"§","withShiftAltGr":"¿"},"Equal":{"value":"+","withShift":"*","withAltGr":"±","withShiftAltGr":"◊"},"BracketLeft":{"value":"º","withShift":"ª","withAltGr":"°","withShiftAltGr":"˚"},"BracketRight":{"value":"´","withShift":"`","withAltGr":"¨","withShiftAltGr":"˝"},"Backslash":{"value":"\\\\","withShift":"|","withAltGr":"‹","withShiftAltGr":"›"},"Semicolon":{"value":"ç","withShift":"Ç","withAltGr":"¸","withShiftAltGr":"˛"},"Quote":{"value":"~","withShift":"^","withAltGr":"˜","withShiftAltGr":"ˆ"},"Backquote":{"value":"<","withShift":">","withAltGr":"≤","withShiftAltGr":"≥"},"Comma":{"value":",","withShift":";","withAltGr":"“","withShiftAltGr":"”"},"Period":{"value":".","withShift":":","withAltGr":"…","withShiftAltGr":"·"},"Slash":{"value":"-","withShift":"_","withAltGr":"—","withShiftAltGr":"–"},"IntlBackslash":{"value":"§","withShift":"±","withAltGr":"§","withShiftAltGr":"±"}}}');

/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/src/common/keyboard/layouts/pt-Portuguese-pc.json":
/*!****************************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/src/common/keyboard/layouts/pt-Portuguese-pc.json ***!
  \****************************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"info":{"name":"00000816","id":"","text":"Portuguese"},"mapping":{"KeyA":{"vkey":"VK_A","value":"a","withShift":"A"},"KeyB":{"vkey":"VK_B","value":"b","withShift":"B"},"KeyC":{"vkey":"VK_C","value":"c","withShift":"C"},"KeyD":{"vkey":"VK_D","value":"d","withShift":"D"},"KeyE":{"vkey":"VK_E","value":"e","withShift":"E","withAltGr":"€"},"KeyF":{"vkey":"VK_F","value":"f","withShift":"F"},"KeyG":{"vkey":"VK_G","value":"g","withShift":"G"},"KeyH":{"vkey":"VK_H","value":"h","withShift":"H"},"KeyI":{"vkey":"VK_I","value":"i","withShift":"I"},"KeyJ":{"vkey":"VK_J","value":"j","withShift":"J"},"KeyK":{"vkey":"VK_K","value":"k","withShift":"K"},"KeyL":{"vkey":"VK_L","value":"l","withShift":"L"},"KeyM":{"vkey":"VK_M","value":"m","withShift":"M"},"KeyN":{"vkey":"VK_N","value":"n","withShift":"N"},"KeyO":{"vkey":"VK_O","value":"o","withShift":"O"},"KeyP":{"vkey":"VK_P","value":"p","withShift":"P"},"KeyQ":{"vkey":"VK_Q","value":"q","withShift":"Q"},"KeyR":{"vkey":"VK_R","value":"r","withShift":"R"},"KeyS":{"vkey":"VK_S","value":"s","withShift":"S"},"KeyT":{"vkey":"VK_T","value":"t","withShift":"T"},"KeyU":{"vkey":"VK_U","value":"u","withShift":"U"},"KeyV":{"vkey":"VK_V","value":"v","withShift":"V"},"KeyW":{"vkey":"VK_W","value":"w","withShift":"W"},"KeyX":{"vkey":"VK_X","value":"x","withShift":"X"},"KeyY":{"vkey":"VK_Y","value":"y","withShift":"Y"},"KeyZ":{"vkey":"VK_Z","value":"z","withShift":"Z"},"Digit1":{"vkey":"VK_1","value":"1","withShift":"!"},"Digit2":{"vkey":"VK_2","value":"2","withShift":"\\"","withAltGr":"@"},"Digit3":{"vkey":"VK_3","value":"3","withShift":"#","withAltGr":"£"},"Digit4":{"vkey":"VK_4","value":"4","withShift":"$","withAltGr":"§"},"Digit5":{"vkey":"VK_5","value":"5","withShift":"%","withAltGr":"€"},"Digit6":{"vkey":"VK_6","value":"6","withShift":"&"},"Digit7":{"vkey":"VK_7","value":"7","withShift":"/","withAltGr":"{"},"Digit8":{"vkey":"VK_8","value":"8","withShift":"(","withAltGr":"["},"Digit9":{"vkey":"VK_9","value":"9","withShift":")","withAltGr":"]"},"Digit0":{"vkey":"VK_0","value":"0","withShift":"=","withAltGr":"}"},"Minus":{"vkey":"VK_OEM_4","value":"\'","withShift":"?"},"Equal":{"vkey":"VK_OEM_6","value":"«","withShift":"»"},"BracketLeft":{"vkey":"VK_OEM_PLUS","value":"+","withShift":"*","withAltGr":"¨"},"BracketRight":{"vkey":"VK_OEM_1","value":"´","withShift":"`","withAltGr":"]"},"Backslash":{"vkey":"VK_OEM_2","value":"~","withShift":"^"},"Semicolon":{"vkey":"VK_OEM_3","value":"ç","withShift":"Ç"},"Quote":{"vkey":"VK_OEM_7","value":"º","withShift":"ª"},"Backquote":{"vkey":"VK_OEM_5","value":"\\\\","withShift":"|"},"Comma":{"vkey":"VK_OEM_COMMA","value":",","withShift":";"},"Period":{"vkey":"VK_OEM_PERIOD","value":".","withShift":":"},"Slash":{"vkey":"VK_OEM_MINUS","value":"-","withShift":"_"},"IntlBackslash":{"vkey":"VK_OEM_102","value":"<","withShift":">"},"IntlRo":{"vkey":"VK_ABNT_C1"},"IntlYen":{"vkey":"VK_UNKNOWN"}}}');

/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/src/common/keyboard/layouts/ro-Romanian-mac.json":
/*!***************************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/src/common/keyboard/layouts/ro-Romanian-mac.json ***!
  \***************************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"info":{"id":"com.apple.keylayout.Romanian","lang":"ro"},"mapping":{"KeyA":{"value":"a","withShift":"A","withAltGr":"å","withShiftAltGr":"Å"},"KeyB":{"value":"b","withShift":"B","withAltGr":"∫","withShiftAltGr":"ı"},"KeyC":{"value":"c","withShift":"C","withAltGr":"ç","withShiftAltGr":"Ç"},"KeyD":{"value":"d","withShift":"D","withAltGr":"∂","withShiftAltGr":"`"},"KeyE":{"value":"e","withShift":"E","withAltGr":"´","withShiftAltGr":"´"},"KeyF":{"value":"f","withShift":"F","withAltGr":"ƒ","withShiftAltGr":"Ï"},"KeyG":{"value":"g","withShift":"G","withAltGr":"©","withShiftAltGr":"˝"},"KeyH":{"value":"h","withShift":"H","withAltGr":"˙","withShiftAltGr":"Ó"},"KeyI":{"value":"i","withShift":"I","withAltGr":"ˆ","withShiftAltGr":"ˆ"},"KeyJ":{"value":"j","withShift":"J","withAltGr":"∆","withShiftAltGr":"Ô"},"KeyK":{"value":"k","withShift":"K","withAltGr":"˚","withShiftAltGr":""},"KeyL":{"value":"l","withShift":"L","withAltGr":"¬","withShiftAltGr":"Ò"},"KeyM":{"value":"m","withShift":"M","withAltGr":"µ","withShiftAltGr":"¥"},"KeyN":{"value":"n","withShift":"N","withAltGr":"˜","withShiftAltGr":"˜"},"KeyO":{"value":"o","withShift":"O","withAltGr":"“","withShiftAltGr":"”"},"KeyP":{"value":"p","withShift":"P","withAltGr":"π","withShiftAltGr":"∏"},"KeyQ":{"value":"q","withShift":"Q","withAltGr":"œ","withShiftAltGr":"Œ"},"KeyR":{"value":"r","withShift":"R","withAltGr":"®","withShiftAltGr":"‰"},"KeyS":{"value":"s","withShift":"S","withAltGr":"ß","withShiftAltGr":"Í"},"KeyT":{"value":"t","withShift":"T","withAltGr":"†","withShiftAltGr":"ˇ"},"KeyU":{"value":"u","withShift":"U","withAltGr":"¨","withShiftAltGr":"¨"},"KeyV":{"value":"v","withShift":"V","withAltGr":"√","withShiftAltGr":"◊"},"KeyW":{"value":"w","withShift":"W","withAltGr":"∑","withShiftAltGr":"„"},"KeyX":{"value":"x","withShift":"X","withAltGr":"≈","withShiftAltGr":"˛"},"KeyY":{"value":"y","withShift":"Y","withAltGr":"`","withShiftAltGr":"Á"},"KeyZ":{"value":"z","withShift":"Z","withAltGr":"Ω","withShiftAltGr":"¸"},"Digit1":{"value":"1","withShift":"!","withAltGr":"¡","withShiftAltGr":"⁄"},"Digit2":{"value":"2","withShift":"@","withAltGr":"™","withShiftAltGr":"€"},"Digit3":{"value":"3","withShift":"#","withAltGr":"£","withShiftAltGr":"‹"},"Digit4":{"value":"4","withShift":"$","withAltGr":"¢","withShiftAltGr":"›"},"Digit5":{"value":"5","withShift":"%","withAltGr":"∞","withShiftAltGr":"«"},"Digit6":{"value":"6","withShift":"^","withAltGr":"§","withShiftAltGr":"»"},"Digit7":{"value":"7","withShift":"&","withAltGr":"¶","withShiftAltGr":"‡"},"Digit8":{"value":"8","withShift":"*","withAltGr":"•","withShiftAltGr":"°"},"Digit9":{"value":"9","withShift":"(","withAltGr":"ª","withShiftAltGr":"·"},"Digit0":{"value":"0","withShift":")","withAltGr":"º","withShiftAltGr":"‚"},"Minus":{"value":"-","withShift":"_","withAltGr":"–","withShiftAltGr":"—"},"Equal":{"value":"=","withShift":"+","withAltGr":"≠","withShiftAltGr":"±"},"BracketLeft":{"value":"ă","withShift":"Ă","withAltGr":"[","withShiftAltGr":"{"},"BracketRight":{"value":"â","withShift":"Â","withAltGr":"]","withShiftAltGr":"}"},"Backslash":{"value":"ț","withShift":"Ț","withAltGr":"\\\\","withShiftAltGr":"|"},"Semicolon":{"value":";","withShift":":","withAltGr":"…","withShiftAltGr":"Ú"},"Quote":{"value":"\'","withShift":"\\"","withAltGr":"‘","withShiftAltGr":"’"},"Backquote":{"value":"î","withShift":"Î","withAltGr":"ș","withShiftAltGr":"Ș"},"Comma":{"value":",","withShift":"<","withAltGr":"≤","withShiftAltGr":"¯"},"Period":{"value":".","withShift":">","withAltGr":"≥","withShiftAltGr":"˘"},"Slash":{"value":"/","withShift":"?","withAltGr":"÷","withShiftAltGr":"¿"},"IntlBackslash":{"value":"ș","withShift":"Ș","withAltGr":"`","withShiftAltGr":"~"}}}');

/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/src/common/keyboard/layouts/ro-Romanian-pc.json":
/*!**************************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/src/common/keyboard/layouts/ro-Romanian-pc.json ***!
  \**************************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"info":{"name":"00010418","id":"00a5","text":"Romanian (Standard)"},"mapping":{"KeyA":{"vkey":"VK_A","value":"a","withShift":"A"},"KeyB":{"vkey":"VK_B","value":"b","withShift":"B"},"KeyC":{"vkey":"VK_C","value":"c","withShift":"C","withAltGr":"©"},"KeyD":{"vkey":"VK_D","value":"d","withShift":"D","withAltGr":"đ","withShiftAltGr":"Đ"},"KeyE":{"vkey":"VK_E","value":"e","withShift":"E","withAltGr":"€"},"KeyF":{"vkey":"VK_F","value":"f","withShift":"F"},"KeyG":{"vkey":"VK_G","value":"g","withShift":"G"},"KeyH":{"vkey":"VK_H","value":"h","withShift":"H"},"KeyI":{"vkey":"VK_I","value":"i","withShift":"I"},"KeyJ":{"vkey":"VK_J","value":"j","withShift":"J"},"KeyK":{"vkey":"VK_K","value":"k","withShift":"K"},"KeyL":{"vkey":"VK_L","value":"l","withShift":"L","withAltGr":"ł","withShiftAltGr":"Ł"},"KeyM":{"vkey":"VK_M","value":"m","withShift":"M"},"KeyN":{"vkey":"VK_N","value":"n","withShift":"N"},"KeyO":{"vkey":"VK_O","value":"o","withShift":"O"},"KeyP":{"vkey":"VK_P","value":"p","withShift":"P","withAltGr":"§"},"KeyQ":{"vkey":"VK_Q","value":"q","withShift":"Q"},"KeyR":{"vkey":"VK_R","value":"r","withShift":"R"},"KeyS":{"vkey":"VK_S","value":"s","withShift":"S","withAltGr":"ß"},"KeyT":{"vkey":"VK_T","value":"t","withShift":"T"},"KeyU":{"vkey":"VK_U","value":"u","withShift":"U"},"KeyV":{"vkey":"VK_V","value":"v","withShift":"V"},"KeyW":{"vkey":"VK_W","value":"w","withShift":"W"},"KeyX":{"vkey":"VK_X","value":"x","withShift":"X"},"KeyY":{"vkey":"VK_Y","value":"y","withShift":"Y"},"KeyZ":{"vkey":"VK_Z","value":"z","withShift":"Z"},"Digit1":{"vkey":"VK_1","value":"1","withShift":"!","withAltGr":"~"},"Digit2":{"vkey":"VK_2","value":"2","withShift":"@","withAltGr":"ˇ"},"Digit3":{"vkey":"VK_3","value":"3","withShift":"#","withAltGr":"^"},"Digit4":{"vkey":"VK_4","value":"4","withShift":"$","withAltGr":"˘"},"Digit5":{"vkey":"VK_5","value":"5","withShift":"%","withAltGr":"°"},"Digit6":{"vkey":"VK_6","value":"6","withShift":"^","withAltGr":"˛"},"Digit7":{"vkey":"VK_7","value":"7","withShift":"&","withAltGr":"`"},"Digit8":{"vkey":"VK_8","value":"8","withShift":"*","withAltGr":"˙"},"Digit9":{"vkey":"VK_9","value":"9","withShift":"(","withAltGr":"´"},"Digit0":{"vkey":"VK_0","value":"0","withShift":")","withAltGr":"˝"},"Minus":{"vkey":"VK_OEM_MINUS","value":"-","withShift":"_","withAltGr":"¨","withShiftAltGr":"–"},"Equal":{"vkey":"VK_OEM_PLUS","value":"=","withShift":"+","withAltGr":"¸","withShiftAltGr":"±"},"BracketLeft":{"vkey":"VK_OEM_4","value":"ă","withShift":"Ă","withAltGr":"[","withShiftAltGr":"{"},"BracketRight":{"vkey":"VK_OEM_6","value":"î","withShift":"Î","withAltGr":"]","withShiftAltGr":"}"},"Backslash":{"vkey":"VK_OEM_5","value":"â","withShift":"Â","withAltGr":"\\\\","withShiftAltGr":"|"},"Semicolon":{"vkey":"VK_OEM_1","value":"ș","withShift":"Ș","withAltGr":";","withShiftAltGr":":"},"Quote":{"vkey":"VK_OEM_7","value":"ț","withShift":"Ț","withAltGr":"\'","withShiftAltGr":"\\""},"Backquote":{"vkey":"VK_OEM_3","value":"„","withShift":"”","withAltGr":"`","withShiftAltGr":"~"},"Comma":{"vkey":"VK_OEM_COMMA","value":",","withShift":";","withAltGr":"<","withShiftAltGr":"«"},"Period":{"vkey":"VK_OEM_PERIOD","value":".","withShift":":","withAltGr":">","withShiftAltGr":"»"},"Slash":{"vkey":"VK_OEM_2","value":"/","withShift":"?"},"IntlBackslash":{"vkey":"VK_OEM_102","value":"\\\\","withShift":"|"},"IntlRo":{"vkey":"VK_ABNT_C1"},"IntlYen":{"vkey":"VK_UNKNOWN"}}}');

/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/src/common/keyboard/layouts/sv-Swedish-mac.json":
/*!**************************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/src/common/keyboard/layouts/sv-Swedish-mac.json ***!
  \**************************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"info":{"id":"com.apple.keylayout.Swedish","lang":"sv"},"mapping":{"KeyA":{"value":"a","withShift":"A","withAltGr":"","withShiftAltGr":"◊"},"KeyB":{"value":"b","withShift":"B","withAltGr":"›","withShiftAltGr":"»"},"KeyC":{"value":"c","withShift":"C","withAltGr":"ç","withShiftAltGr":"Ç"},"KeyD":{"value":"d","withShift":"D","withAltGr":"∂","withShiftAltGr":"∆"},"KeyE":{"value":"e","withShift":"E","withAltGr":"é","withShiftAltGr":"É"},"KeyF":{"value":"f","withShift":"F","withAltGr":"ƒ","withShiftAltGr":"∫"},"KeyG":{"value":"g","withShift":"G","withAltGr":"¸","withShiftAltGr":"¯"},"KeyH":{"value":"h","withShift":"H","withAltGr":"˛","withShiftAltGr":"˘"},"KeyI":{"value":"i","withShift":"I","withAltGr":"ı","withShiftAltGr":"ˆ"},"KeyJ":{"value":"j","withShift":"J","withAltGr":"√","withShiftAltGr":"¬"},"KeyK":{"value":"k","withShift":"K","withAltGr":"ª","withShiftAltGr":"º"},"KeyL":{"value":"l","withShift":"L","withAltGr":"ﬁ","withShiftAltGr":"ﬂ"},"KeyM":{"value":"m","withShift":"M","withAltGr":"’","withShiftAltGr":"”"},"KeyN":{"value":"n","withShift":"N","withAltGr":"‘","withShiftAltGr":"“"},"KeyO":{"value":"o","withShift":"O","withAltGr":"œ","withShiftAltGr":"Œ"},"KeyP":{"value":"p","withShift":"P","withAltGr":"π","withShiftAltGr":"∏"},"KeyQ":{"value":"q","withShift":"Q","withAltGr":"•","withShiftAltGr":"°"},"KeyR":{"value":"r","withShift":"R","withAltGr":"®","withShiftAltGr":"√"},"KeyS":{"value":"s","withShift":"S","withAltGr":"ß","withShiftAltGr":"∑"},"KeyT":{"value":"t","withShift":"T","withAltGr":"†","withShiftAltGr":"‡"},"KeyU":{"value":"u","withShift":"U","withAltGr":"ü","withShiftAltGr":"Ü"},"KeyV":{"value":"v","withShift":"V","withAltGr":"‹","withShiftAltGr":"«"},"KeyW":{"value":"w","withShift":"W","withAltGr":"Ω","withShiftAltGr":"˝"},"KeyX":{"value":"x","withShift":"X","withAltGr":"≈","withShiftAltGr":"ˇ"},"KeyY":{"value":"y","withShift":"Y","withAltGr":"µ","withShiftAltGr":"˜"},"KeyZ":{"value":"z","withShift":"Z","withAltGr":"÷","withShiftAltGr":"⁄"},"Digit1":{"value":"1","withShift":"!","withAltGr":"©","withShiftAltGr":"¡"},"Digit2":{"value":"2","withShift":"\\"","withAltGr":"™","withShiftAltGr":"”"},"Digit3":{"value":"3","withShift":"#","withAltGr":"£","withShiftAltGr":"¥"},"Digit4":{"value":"4","withShift":"€","withAltGr":"$","withShiftAltGr":"¢"},"Digit5":{"value":"5","withShift":"%","withAltGr":"∞","withShiftAltGr":"‰"},"Digit6":{"value":"6","withShift":"&","withAltGr":"§","withShiftAltGr":"¶"},"Digit7":{"value":"7","withShift":"/","withAltGr":"|","withShiftAltGr":"\\\\"},"Digit8":{"value":"8","withShift":"(","withAltGr":"[","withShiftAltGr":"{"},"Digit9":{"value":"9","withShift":")","withAltGr":"]","withShiftAltGr":"}"},"Digit0":{"value":"0","withShift":"=","withAltGr":"≈","withShiftAltGr":"≠"},"Minus":{"value":"+","withShift":"?","withAltGr":"±","withShiftAltGr":"¿"},"Equal":{"value":"´","withShift":"`","withAltGr":"´","withShiftAltGr":"`"},"BracketLeft":{"value":"å","withShift":"Å","withAltGr":"˙","withShiftAltGr":"˚"},"BracketRight":{"value":"¨","withShift":"^","withAltGr":"~","withShiftAltGr":"^"},"Backslash":{"value":"\'","withShift":"*","withAltGr":"@","withShiftAltGr":"’"},"Semicolon":{"value":"ö","withShift":"Ö","withAltGr":"ø","withShiftAltGr":"Ø"},"Quote":{"value":"ä","withShift":"Ä","withAltGr":"æ","withShiftAltGr":"Æ"},"Backquote":{"value":"<","withShift":">","withAltGr":"≤","withShiftAltGr":"≥"},"Comma":{"value":",","withShift":";","withAltGr":"‚","withShiftAltGr":"„"},"Period":{"value":".","withShift":":","withAltGr":"…","withShiftAltGr":"·"},"Slash":{"value":"-","withShift":"_","withAltGr":"–","withShiftAltGr":"—"},"IntlBackslash":{"value":"§","withShift":"°","withAltGr":"¶","withShiftAltGr":"•"}}}');

/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/src/common/keyboard/layouts/sv-Swedish-pc.json":
/*!*************************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/src/common/keyboard/layouts/sv-Swedish-pc.json ***!
  \*************************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"info":{"name":"0000041D","id":"","text":"Swedish"},"mapping":{"KeyA":{"vkey":"VK_A","value":"a","withShift":"A"},"KeyB":{"vkey":"VK_B","value":"b","withShift":"B"},"KeyC":{"vkey":"VK_C","value":"c","withShift":"C"},"KeyD":{"vkey":"VK_D","value":"d","withShift":"D"},"KeyE":{"vkey":"VK_E","value":"e","withShift":"E","withAltGr":"€"},"KeyF":{"vkey":"VK_F","value":"f","withShift":"F"},"KeyG":{"vkey":"VK_G","value":"g","withShift":"G"},"KeyH":{"vkey":"VK_H","value":"h","withShift":"H"},"KeyI":{"vkey":"VK_I","value":"i","withShift":"I"},"KeyJ":{"vkey":"VK_J","value":"j","withShift":"J"},"KeyK":{"vkey":"VK_K","value":"k","withShift":"K"},"KeyL":{"vkey":"VK_L","value":"l","withShift":"L"},"KeyM":{"vkey":"VK_M","value":"m","withShift":"M","withAltGr":"µ"},"KeyN":{"vkey":"VK_N","value":"n","withShift":"N"},"KeyO":{"vkey":"VK_O","value":"o","withShift":"O"},"KeyP":{"vkey":"VK_P","value":"p","withShift":"P"},"KeyQ":{"vkey":"VK_Q","value":"q","withShift":"Q"},"KeyR":{"vkey":"VK_R","value":"r","withShift":"R"},"KeyS":{"vkey":"VK_S","value":"s","withShift":"S"},"KeyT":{"vkey":"VK_T","value":"t","withShift":"T"},"KeyU":{"vkey":"VK_U","value":"u","withShift":"U"},"KeyV":{"vkey":"VK_V","value":"v","withShift":"V"},"KeyW":{"vkey":"VK_W","value":"w","withShift":"W"},"KeyX":{"vkey":"VK_X","value":"x","withShift":"X"},"KeyY":{"vkey":"VK_Y","value":"y","withShift":"Y"},"KeyZ":{"vkey":"VK_Z","value":"z","withShift":"Z"},"Digit1":{"vkey":"VK_1","value":"1","withShift":"!"},"Digit2":{"vkey":"VK_2","value":"2","withShift":"\\"","withAltGr":"@"},"Digit3":{"vkey":"VK_3","value":"3","withShift":"#","withAltGr":"£"},"Digit4":{"vkey":"VK_4","value":"4","withShift":"¤","withAltGr":"$"},"Digit5":{"vkey":"VK_5","value":"5","withShift":"%","withAltGr":"€"},"Digit6":{"vkey":"VK_6","value":"6","withShift":"&"},"Digit7":{"vkey":"VK_7","value":"7","withShift":"/","withAltGr":"{"},"Digit8":{"vkey":"VK_8","value":"8","withShift":"(","withAltGr":"["},"Digit9":{"vkey":"VK_9","value":"9","withShift":")","withAltGr":"]"},"Digit0":{"vkey":"VK_0","value":"0","withShift":"=","withAltGr":"}"},"Minus":{"vkey":"VK_OEM_PLUS","value":"+","withShift":"?","withAltGr":"\\\\"},"Equal":{"vkey":"VK_OEM_4","value":"´","withShift":"`"},"BracketLeft":{"vkey":"VK_OEM_6","value":"å","withShift":"Å"},"BracketRight":{"vkey":"VK_OEM_1","value":"¨","withShift":"^","withAltGr":"~"},"Backslash":{"vkey":"VK_OEM_2","value":"\'","withShift":"*"},"Semicolon":{"vkey":"VK_OEM_3","value":"ö","withShift":"Ö"},"Quote":{"vkey":"VK_OEM_7","value":"ä","withShift":"Ä"},"Backquote":{"vkey":"VK_OEM_5","value":"§","withShift":"½"},"Comma":{"vkey":"VK_OEM_COMMA","value":",","withShift":";"},"Period":{"vkey":"VK_OEM_PERIOD","value":".","withShift":":"},"Slash":{"vkey":"VK_OEM_MINUS","value":"-","withShift":"_"},"IntlBackslash":{"vkey":"VK_OEM_102","value":"<","withShift":">","withAltGr":"|"},"IntlRo":{"vkey":"VK_ABNT_C1"},"IntlYen":{"vkey":"VK_UNKNOWN"}}}');

/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/src/common/keyboard/layouts/tr-Turkish_Q-mac.json":
/*!****************************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/src/common/keyboard/layouts/tr-Turkish_Q-mac.json ***!
  \****************************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"info":{"id":"com.apple.keylayout.Turkish-QWERTY-PC","lang":"tr"},"mapping":{"KeyA":{"value":"a","withShift":"A","withAltGr":"æ","withShiftAltGr":"Æ"},"KeyB":{"value":"b","withShift":"B","withAltGr":"∫","withShiftAltGr":"ß"},"KeyC":{"value":"c","withShift":"C","withAltGr":"ç","withShiftAltGr":"Ç"},"KeyD":{"value":"d","withShift":"D","withAltGr":"∂","withShiftAltGr":"Î"},"KeyE":{"value":"e","withShift":"E","withAltGr":"€","withShiftAltGr":"‰"},"KeyF":{"value":"f","withShift":"F","withAltGr":"ƒ","withShiftAltGr":"Ï"},"KeyG":{"value":"g","withShift":"G","withAltGr":"ğ","withShiftAltGr":"Ğ"},"KeyH":{"value":"h","withShift":"H","withAltGr":"^","withShiftAltGr":"Ó"},"KeyI":{"value":"ı","withShift":"I","withAltGr":"i","withShiftAltGr":"İ"},"KeyJ":{"value":"j","withShift":"J","withAltGr":"∆","withShiftAltGr":"Ô"},"KeyK":{"value":"k","withShift":"K","withAltGr":"¨","withShiftAltGr":""},"KeyL":{"value":"l","withShift":"L","withAltGr":"¬","withShiftAltGr":"Ò"},"KeyM":{"value":"m","withShift":"M","withAltGr":"µ","withShiftAltGr":"˜"},"KeyN":{"value":"n","withShift":"N","withAltGr":"~","withShiftAltGr":"ˆ"},"KeyO":{"value":"o","withShift":"O","withAltGr":"ö","withShiftAltGr":"Ö"},"KeyP":{"value":"p","withShift":"P","withAltGr":"π","withShiftAltGr":"∏"},"KeyQ":{"value":"q","withShift":"Q","withAltGr":"@","withShiftAltGr":"Œ"},"KeyR":{"value":"r","withShift":"R","withAltGr":"®","withShiftAltGr":"Â"},"KeyS":{"value":"s","withShift":"S","withAltGr":"ß","withShiftAltGr":"Ş"},"KeyT":{"value":"t","withShift":"T","withAltGr":"₺","withShiftAltGr":"Ê"},"KeyU":{"value":"u","withShift":"U","withAltGr":"ü","withShiftAltGr":"Ü"},"KeyV":{"value":"v","withShift":"V","withAltGr":"√","withShiftAltGr":"◊"},"KeyW":{"value":"w","withShift":"W","withAltGr":"∑","withShiftAltGr":"„"},"KeyX":{"value":"x","withShift":"X","withAltGr":"≈","withShiftAltGr":"Ù"},"KeyY":{"value":"y","withShift":"Y","withAltGr":"¥","withShiftAltGr":"Á"},"KeyZ":{"value":"z","withShift":"Z","withAltGr":"Ω","withShiftAltGr":"Û"},"Digit1":{"value":"1","withShift":"!","withAltGr":">","withShiftAltGr":"·"},"Digit2":{"value":"2","withShift":"\'","withAltGr":"£","withShiftAltGr":"€"},"Digit3":{"value":"3","withShift":"^","withAltGr":"#","withShiftAltGr":"©"},"Digit4":{"value":"4","withShift":"+","withAltGr":"$","withShiftAltGr":"‚"},"Digit5":{"value":"5","withShift":"%","withAltGr":"½","withShiftAltGr":"˚"},"Digit6":{"value":"6","withShift":"&","withAltGr":"§","withShiftAltGr":"˙"},"Digit7":{"value":"7","withShift":"/","withAltGr":"{","withShiftAltGr":"‡"},"Digit8":{"value":"8","withShift":"(","withAltGr":"[","withShiftAltGr":"°"},"Digit9":{"value":"9","withShift":")","withAltGr":"]","withShiftAltGr":"Ø"},"Digit0":{"value":"0","withShift":"=","withAltGr":"}","withShiftAltGr":"ø"},"Minus":{"value":"*","withShift":"?","withAltGr":"\\\\","withShiftAltGr":"—"},"Equal":{"value":"-","withShift":"_","withAltGr":"|","withShiftAltGr":"±"},"BracketLeft":{"value":"ğ","withShift":"Ğ","withAltGr":"¨","withShiftAltGr":"”"},"BracketRight":{"value":"ü","withShift":"Ü","withAltGr":"~","withShiftAltGr":"’"},"Backslash":{"value":",","withShift":";","withAltGr":"`","withShiftAltGr":"»"},"Semicolon":{"value":"ş","withShift":"Ş","withAltGr":"´","withShiftAltGr":"Ú"},"Quote":{"value":"i","withShift":"İ","withAltGr":"æ","withShiftAltGr":"Æ"},"Backquote":{"value":"<","withShift":">","withAltGr":"|","withShiftAltGr":"Ÿ"},"Comma":{"value":"ö","withShift":"Ö","withAltGr":"≤","withShiftAltGr":"¯"},"Period":{"value":"ç","withShift":"Ç","withAltGr":"≥","withShiftAltGr":"˘"},"Slash":{"value":".","withShift":":","withAltGr":"÷","withShiftAltGr":"¿"},"IntlBackslash":{"value":"\\"","withShift":"é","withAltGr":"<"}}}');

/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/@theia/core/src/common/keyboard/layouts/tr-Turkish_Q-pc.json":
/*!***************************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/@theia/core/src/common/keyboard/layouts/tr-Turkish_Q-pc.json ***!
  \***************************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"info":{"name":"0000041F","id":"","text":"Turkish Q"},"mapping":{"KeyA":{"vkey":"VK_A","value":"a","withShift":"A","withAltGr":"æ","withShiftAltGr":"Æ"},"KeyB":{"vkey":"VK_B","value":"b","withShift":"B"},"KeyC":{"vkey":"VK_C","value":"c","withShift":"C"},"KeyD":{"vkey":"VK_D","value":"d","withShift":"D"},"KeyE":{"vkey":"VK_E","value":"e","withShift":"E","withAltGr":"€"},"KeyF":{"vkey":"VK_F","value":"f","withShift":"F"},"KeyG":{"vkey":"VK_G","value":"g","withShift":"G"},"KeyH":{"vkey":"VK_H","value":"h","withShift":"H"},"KeyI":{"vkey":"VK_I","value":"ı","withShift":"I","withAltGr":"i","withShiftAltGr":"İ"},"KeyJ":{"vkey":"VK_J","value":"j","withShift":"J"},"KeyK":{"vkey":"VK_K","value":"k","withShift":"K"},"KeyL":{"vkey":"VK_L","value":"l","withShift":"L"},"KeyM":{"vkey":"VK_M","value":"m","withShift":"M"},"KeyN":{"vkey":"VK_N","value":"n","withShift":"N"},"KeyO":{"vkey":"VK_O","value":"o","withShift":"O"},"KeyP":{"vkey":"VK_P","value":"p","withShift":"P"},"KeyQ":{"vkey":"VK_Q","value":"q","withShift":"Q","withAltGr":"@"},"KeyR":{"vkey":"VK_R","value":"r","withShift":"R"},"KeyS":{"vkey":"VK_S","value":"s","withShift":"S","withAltGr":"ß"},"KeyT":{"vkey":"VK_T","value":"t","withShift":"T","withAltGr":"₺"},"KeyU":{"vkey":"VK_U","value":"u","withShift":"U"},"KeyV":{"vkey":"VK_V","value":"v","withShift":"V"},"KeyW":{"vkey":"VK_W","value":"w","withShift":"W"},"KeyX":{"vkey":"VK_X","value":"x","withShift":"X"},"KeyY":{"vkey":"VK_Y","value":"y","withShift":"Y"},"KeyZ":{"vkey":"VK_Z","value":"z","withShift":"Z"},"Digit1":{"vkey":"VK_1","value":"1","withShift":"!","withAltGr":">"},"Digit2":{"vkey":"VK_2","value":"2","withShift":"\'","withAltGr":"£"},"Digit3":{"vkey":"VK_3","value":"3","withShift":"^","withAltGr":"#"},"Digit4":{"vkey":"VK_4","value":"4","withShift":"+","withAltGr":"$"},"Digit5":{"vkey":"VK_5","value":"5","withShift":"%","withAltGr":"½"},"Digit6":{"vkey":"VK_6","value":"6","withShift":"&"},"Digit7":{"vkey":"VK_7","value":"7","withShift":"/","withAltGr":"{"},"Digit8":{"vkey":"VK_8","value":"8","withShift":"(","withAltGr":"["},"Digit9":{"vkey":"VK_9","value":"9","withShift":")","withAltGr":"]"},"Digit0":{"vkey":"VK_0","value":"0","withShift":"=","withAltGr":"}"},"Minus":{"vkey":"VK_OEM_8","value":"*","withShift":"?","withAltGr":"\\\\"},"Equal":{"vkey":"VK_OEM_MINUS","value":"-","withShift":"_","withAltGr":"|"},"BracketLeft":{"vkey":"VK_OEM_4","value":"ğ","withShift":"Ğ","withAltGr":"¨"},"BracketRight":{"vkey":"VK_OEM_6","value":"ü","withShift":"Ü","withAltGr":"~"},"Backslash":{"vkey":"VK_OEM_COMMA","value":",","withShift":";","withAltGr":"`"},"Semicolon":{"vkey":"VK_OEM_1","value":"ş","withShift":"Ş","withAltGr":"´"},"Quote":{"vkey":"VK_OEM_7","value":"i","withShift":"İ"},"Backquote":{"vkey":"VK_OEM_3","value":"\\"","withShift":"é","withAltGr":"<"},"Comma":{"vkey":"VK_OEM_2","value":"ö","withShift":"Ö"},"Period":{"vkey":"VK_OEM_5","value":"ç","withShift":"Ç"},"Slash":{"vkey":"VK_OEM_PERIOD","value":".","withShift":":"},"IntlBackslash":{"vkey":"VK_OEM_102","value":"<","withShift":">","withAltGr":"|"},"IntlRo":{"vkey":"VK_ABNT_C1"},"IntlYen":{"vkey":"VK_UNKNOWN"}}}');

/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/iconv-lite/encodings/tables/big5-added.json":
/*!**********************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/iconv-lite/encodings/tables/big5-added.json ***!
  \**********************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('[["8740","䏰䰲䘃䖦䕸𧉧䵷䖳𧲱䳢𧳅㮕䜶䝄䱇䱀𤊿𣘗𧍒𦺋𧃒䱗𪍑䝏䗚䲅𧱬䴇䪤䚡𦬣爥𥩔𡩣𣸆𣽡晍囻"],["8767","綕夝𨮹㷴霴𧯯寛𡵞媤㘥𩺰嫑宷峼杮薓𩥅瑡璝㡵𡵓𣚞𦀡㻬"],["87a1","𥣞㫵竼龗𤅡𨤍𣇪𠪊𣉞䌊蒄龖鐯䤰蘓墖靊鈘秐稲晠権袝瑌篅枂稬剏遆㓦珄𥶹瓆鿇垳䤯呌䄱𣚎堘穲𧭥讏䚮𦺈䆁𥶙箮𢒼鿈𢓁𢓉𢓌鿉蔄𣖻䂴鿊䓡𪷿拁灮鿋"],["8840","㇀",4,"𠄌㇅𠃑𠃍㇆㇇𠃋𡿨㇈𠃊㇉㇊㇋㇌𠄎㇍㇎ĀÁǍÀĒÉĚÈŌÓǑÒ࿿Ê̄Ế࿿Ê̌ỀÊāáǎàɑēéěèīíǐìōóǒòūúǔùǖǘǚ"],["88a1","ǜü࿿ê̄ế࿿ê̌ềêɡ⏚⏛"],["8940","𪎩𡅅"],["8943","攊"],["8946","丽滝鵎釟"],["894c","𧜵撑会伨侨兖兴农凤务动医华发变团声处备夲头学实実岚庆总斉柾栄桥济炼电纤纬纺织经统缆缷艺苏药视设询车轧轮"],["89a1","琑糼緍楆竉刧"],["89ab","醌碸酞肼"],["89b0","贋胶𠧧"],["89b5","肟黇䳍鷉鸌䰾𩷶𧀎鸊𪄳㗁"],["89c1","溚舾甙"],["89c5","䤑马骏龙禇𨑬𡷊𠗐𢫦两亁亀亇亿仫伷㑌侽㹈倃傈㑽㒓㒥円夅凛凼刅争剹劐匧㗇厩㕑厰㕓参吣㕭㕲㚁咓咣咴咹哐哯唘唣唨㖘唿㖥㖿嗗㗅"],["8a40","𧶄唥"],["8a43","𠱂𠴕𥄫喐𢳆㧬𠍁蹆𤶸𩓥䁓𨂾睺𢰸㨴䟕𨅝𦧲𤷪擝𠵼𠾴𠳕𡃴撍蹾𠺖𠰋𠽤𢲩𨉖𤓓"],["8a64","𠵆𩩍𨃩䟴𤺧𢳂骲㩧𩗴㿭㔆𥋇𩟔𧣈𢵄鵮頕"],["8a76","䏙𦂥撴哣𢵌𢯊𡁷㧻𡁯"],["8aa1","𦛚𦜖𧦠擪𥁒𠱃蹨𢆡𨭌𠜱"],["8aac","䠋𠆩㿺塳𢶍"],["8ab2","𤗈𠓼𦂗𠽌𠶖啹䂻䎺"],["8abb","䪴𢩦𡂝膪飵𠶜捹㧾𢝵跀嚡摼㹃"],["8ac9","𪘁𠸉𢫏𢳉"],["8ace","𡃈𣧂㦒㨆𨊛㕸𥹉𢃇噒𠼱𢲲𩜠㒼氽𤸻"],["8adf","𧕴𢺋𢈈𪙛𨳍𠹺𠰴𦠜羓𡃏𢠃𢤹㗻𥇣𠺌𠾍𠺪㾓𠼰𠵇𡅏𠹌"],["8af6","𠺫𠮩𠵈𡃀𡄽㿹𢚖搲𠾭"],["8b40","𣏴𧘹𢯎𠵾𠵿𢱑𢱕㨘𠺘𡃇𠼮𪘲𦭐𨳒𨶙𨳊閪哌苄喹"],["8b55","𩻃鰦骶𧝞𢷮煀腭胬尜𦕲脴㞗卟𨂽醶𠻺𠸏𠹷𠻻㗝𤷫㘉𠳖嚯𢞵𡃉𠸐𠹸𡁸𡅈𨈇𡑕𠹹𤹐𢶤婔𡀝𡀞𡃵𡃶垜𠸑"],["8ba1","𧚔𨋍𠾵𠹻𥅾㜃𠾶𡆀𥋘𪊽𤧚𡠺𤅷𨉼墙剨㘚𥜽箲孨䠀䬬鼧䧧鰟鮍𥭴𣄽嗻㗲嚉丨夂𡯁屮靑𠂆乛亻㔾尣彑忄㣺扌攵歺氵氺灬爫丬犭𤣩罒礻糹罓𦉪㓁"],["8bde","𦍋耂肀𦘒𦥑卝衤见𧢲讠贝钅镸长门𨸏韦页风飞饣𩠐鱼鸟黄歯龜丷𠂇阝户钢"],["8c40","倻淾𩱳龦㷉袏𤅎灷峵䬠𥇍㕙𥴰愢𨨲辧釶熑朙玺𣊁𪄇㲋𡦀䬐磤琂冮𨜏䀉橣𪊺䈣蘏𠩯稪𩥇𨫪靕灍匤𢁾鏴盙𨧣龧矝亣俰傼丯众龨吴綋墒壐𡶶庒庙忂𢜒斋"],["8ca1","𣏹椙橃𣱣泿"],["8ca7","爀𤔅玌㻛𤨓嬕璹讃𥲤𥚕窓篬糃繬苸薗龩袐龪躹龫迏蕟駠鈡龬𨶹𡐿䁱䊢娚"],["8cc9","顨杫䉶圽"],["8cce","藖𤥻芿𧄍䲁𦵴嵻𦬕𦾾龭龮宖龯曧繛湗秊㶈䓃𣉖𢞖䎚䔶"],["8ce6","峕𣬚諹屸㴒𣕑嵸龲煗䕘𤃬𡸣䱷㥸㑊𠆤𦱁諌侴𠈹妿腬顖𩣺弻"],["8d40","𠮟"],["8d42","𢇁𨥭䄂䚻𩁹㼇龳𪆵䃸㟖䛷𦱆䅼𨚲𧏿䕭㣔𥒚䕡䔛䶉䱻䵶䗪㿈𤬏㙡䓞䒽䇭崾嵈嵖㷼㠏嶤嶹㠠㠸幂庽弥徃㤈㤔㤿㥍惗愽峥㦉憷憹懏㦸戬抐拥挘㧸嚱"],["8da1","㨃揢揻搇摚㩋擀崕嘡龟㪗斆㪽旿晓㫲暒㬢朖㭂枤栀㭘桊梄㭲㭱㭻椉楃牜楤榟榅㮼槖㯝橥橴橱檂㯬檙㯲檫檵櫔櫶殁毁毪汵沪㳋洂洆洦涁㳯涤涱渕渘温溆𨧀溻滢滚齿滨滩漤漴㵆𣽁澁澾㵪㵵熷岙㶊瀬㶑灐灔灯灿炉𠌥䏁㗱𠻘"],["8e40","𣻗垾𦻓焾𥟠㙎榢𨯩孴穉𥣡𩓙穥穽𥦬窻窰竂竃燑𦒍䇊竚竝竪䇯咲𥰁笋筕笩𥌎𥳾箢筯莜𥮴𦱿篐萡箒箸𥴠㶭𥱥蒒篺簆簵𥳁籄粃𤢂粦晽𤕸糉糇糦籴糳糵糎"],["8ea1","繧䔝𦹄絝𦻖璍綉綫焵綳緒𤁗𦀩緤㴓緵𡟹緥𨍭縝𦄡𦅚繮纒䌫鑬縧罀罁罇礶𦋐駡羗𦍑羣𡙡𠁨䕜𣝦䔃𨌺翺𦒉者耈耝耨耯𪂇𦳃耻耼聡𢜔䦉𦘦𣷣𦛨朥肧𨩈脇脚墰𢛶汿𦒘𤾸擧𡒊舘𡡞橓𤩥𤪕䑺舩𠬍𦩒𣵾俹𡓽蓢荢𦬊𤦧𣔰𡝳𣷸芪椛芳䇛"],["8f40","蕋苐茚𠸖𡞴㛁𣅽𣕚艻苢茘𣺋𦶣𦬅𦮗𣗎㶿茝嗬莅䔋𦶥莬菁菓㑾𦻔橗蕚㒖𦹂𢻯葘𥯤葱㷓䓤檧葊𣲵祘蒨𦮖𦹷𦹃蓞萏莑䒠蒓蓤𥲑䉀𥳀䕃蔴嫲𦺙䔧蕳䔖枿蘖"],["8fa1","𨘥𨘻藁𧂈蘂𡖂𧃍䕫䕪蘨㙈𡢢号𧎚虾蝱𪃸蟮𢰧螱蟚蠏噡虬桖䘏衅衆𧗠𣶹𧗤衞袜䙛袴袵揁装睷𧜏覇覊覦覩覧覼𨨥觧𧤤𧪽誜瞓釾誐𧩙竩𧬺𣾏䜓𧬸煼謌謟𥐰𥕥謿譌譍誩𤩺讐讛誯𡛟䘕衏貛𧵔𧶏貫㜥𧵓賖𧶘𧶽贒贃𡤐賛灜贑𤳉㻐起"],["9040","趩𨀂𡀔𤦊㭼𨆼𧄌竧躭躶軃鋔輙輭𨍥𨐒辥錃𪊟𠩐辳䤪𨧞𨔽𣶻廸𣉢迹𪀔𨚼𨔁𢌥㦀𦻗逷𨔼𧪾遡𨕬𨘋邨𨜓郄𨛦邮都酧㫰醩釄粬𨤳𡺉鈎沟鉁鉢𥖹銹𨫆𣲛𨬌𥗛"],["90a1","𠴱錬鍫𨫡𨯫炏嫃𨫢𨫥䥥鉄𨯬𨰹𨯿鍳鑛躼閅閦鐦閠濶䊹𢙺𨛘𡉼𣸮䧟氜陻隖䅬隣𦻕懚隶磵𨫠隽双䦡𦲸𠉴𦐐𩂯𩃥𤫑𡤕𣌊霱虂霶䨏䔽䖅𤫩灵孁霛靜𩇕靗孊𩇫靟鐥僐𣂷𣂼鞉鞟鞱鞾韀韒韠𥑬韮琜𩐳響韵𩐝𧥺䫑頴頳顋顦㬎𧅵㵑𠘰𤅜"],["9140","𥜆飊颷飈飇䫿𦴧𡛓喰飡飦飬鍸餹𤨩䭲𩡗𩤅駵騌騻騐驘𥜥㛄𩂱𩯕髠髢𩬅髴䰎鬔鬭𨘀倴鬴𦦨㣃𣁽魐魀𩴾婅𡡣鮎𤉋鰂鯿鰌𩹨鷔𩾷𪆒𪆫𪃡𪄣𪇟鵾鶃𪄴鸎梈"],["91a1","鷄𢅛𪆓𪈠𡤻𪈳鴹𪂹𪊴麐麕麞麢䴴麪麯𤍤黁㭠㧥㴝伲㞾𨰫鼂鼈䮖鐤𦶢鼗鼖鼹嚟嚊齅馸𩂋韲葿齢齩竜龎爖䮾𤥵𤦻煷𤧸𤍈𤩑玞𨯚𡣺禟𨥾𨸶鍩鏳𨩄鋬鎁鏋𨥬𤒹爗㻫睲穃烐𤑳𤏸煾𡟯炣𡢾𣖙㻇𡢅𥐯𡟸㜢𡛻𡠹㛡𡝴𡣑𥽋㜣𡛀坛𤨥𡏾𡊨"],["9240","𡏆𡒶蔃𣚦蔃葕𤦔𧅥𣸱𥕜𣻻𧁒䓴𣛮𩦝𦼦柹㜳㰕㷧塬𡤢栐䁗𣜿𤃡𤂋𤄏𦰡哋嚞𦚱嚒𠿟𠮨𠸍鏆𨬓鎜仸儫㠙𤐶亼𠑥𠍿佋侊𥙑婨𠆫𠏋㦙𠌊𠐔㐵伩𠋀𨺳𠉵諚𠈌亘"],["92a1","働儍侢伃𤨎𣺊佂倮偬傁俌俥偘僼兙兛兝兞湶𣖕𣸹𣺿浲𡢄𣺉冨凃𠗠䓝𠒣𠒒𠒑赺𨪜𠜎剙劤𠡳勡鍮䙺熌𤎌𠰠𤦬𡃤槑𠸝瑹㻞璙琔瑖玘䮎𤪼𤂍叐㖄爏𤃉喴𠍅响𠯆圝鉝雴鍦埝垍坿㘾壋媙𨩆𡛺𡝯𡜐娬妸銏婾嫏娒𥥆𡧳𡡡𤊕㛵洅瑃娡𥺃"],["9340","媁𨯗𠐓鏠璌𡌃焅䥲鐈𨧻鎽㞠尞岞幞幈𡦖𡥼𣫮廍孏𡤃𡤄㜁𡢠㛝𡛾㛓脪𨩇𡶺𣑲𨦨弌弎𡤧𡞫婫𡜻孄蘔𧗽衠恾𢡠𢘫忛㺸𢖯𢖾𩂈𦽳懀𠀾𠁆𢘛憙憘恵𢲛𢴇𤛔𩅍"],["93a1","摱𤙥𢭪㨩𢬢𣑐𩣪𢹸挷𪑛撶挱揑𤧣𢵧护𢲡搻敫楲㯴𣂎𣊭𤦉𣊫唍𣋠𡣙𩐿曎𣊉𣆳㫠䆐𥖄𨬢𥖏𡛼𥕛𥐥磮𣄃𡠪𣈴㑤𣈏𣆂𤋉暎𦴤晫䮓昰𧡰𡷫晣𣋒𣋡昞𥡲㣑𣠺𣞼㮙𣞢𣏾瓐㮖枏𤘪梶栞㯄檾㡣𣟕𤒇樳橒櫉欅𡤒攑梘橌㯗橺歗𣿀𣲚鎠鋲𨯪𨫋"],["9440","銉𨀞𨧜鑧涥漋𤧬浧𣽿㶏渄𤀼娽渊塇洤硂焻𤌚𤉶烱牐犇犔𤞏𤜥兹𤪤𠗫瑺𣻸𣙟𤩊𤤗𥿡㼆㺱𤫟𨰣𣼵悧㻳瓌琼鎇琷䒟𦷪䕑疃㽣𤳙𤴆㽘畕癳𪗆㬙瑨𨫌𤦫𤦎㫻"],["94a1","㷍𤩎㻿𤧅𤣳釺圲鍂𨫣𡡤僟𥈡𥇧睸𣈲眎眏睻𤚗𣞁㩞𤣰琸璛㺿𤪺𤫇䃈𤪖𦆮錇𥖁砞碍碈磒珐祙𧝁𥛣䄎禛蒖禥樭𣻺稺秴䅮𡛦䄲鈵秱𠵌𤦌𠊙𣶺𡝮㖗啫㕰㚪𠇔𠰍竢婙𢛵𥪯𥪜娍𠉛磰娪𥯆竾䇹籝籭䈑𥮳𥺼𥺦糍𤧹𡞰粎籼粮檲緜縇緓罎𦉡"],["9540","𦅜𧭈綗𥺂䉪𦭵𠤖柖𠁎𣗏埄𦐒𦏸𤥢翝笧𠠬𥫩𥵃笌𥸎駦虅驣樜𣐿㧢𤧷𦖭騟𦖠蒀𧄧𦳑䓪脷䐂胆脉腂𦞴飃𦩂艢艥𦩑葓𦶧蘐𧈛媆䅿𡡀嬫𡢡嫤𡣘蚠蜨𣶏蠭𧐢娂"],["95a1","衮佅袇袿裦襥襍𥚃襔𧞅𧞄𨯵𨯙𨮜𨧹㺭蒣䛵䛏㟲訽訜𩑈彍鈫𤊄旔焩烄𡡅鵭貟賩𧷜妚矃姰䍮㛔踪躧𤰉輰轊䋴汘澻𢌡䢛潹溋𡟚鯩㚵𤤯邻邗啱䤆醻鐄𨩋䁢𨫼鐧𨰝𨰻蓥訫閙閧閗閖𨴴瑅㻂𤣿𤩂𤏪㻧𣈥随𨻧𨹦𨹥㻌𤧭𤩸𣿮琒瑫㻼靁𩂰"],["9640","桇䨝𩂓𥟟靝鍨𨦉𨰦𨬯𦎾銺嬑譩䤼珹𤈛鞛靱餸𠼦巁𨯅𤪲頟𩓚鋶𩗗釥䓀𨭐𤩧𨭤飜𨩅㼀鈪䤥萔餻饍𧬆㷽馛䭯馪驜𨭥𥣈檏騡嫾騯𩣱䮐𩥈馼䮽䮗鍽塲𡌂堢𤦸"],["96a1","𡓨硄𢜟𣶸棅㵽鑘㤧慐𢞁𢥫愇鱏鱓鱻鰵鰐魿鯏𩸭鮟𪇵𪃾鴡䲮𤄄鸘䲰鴌𪆴𪃭𪃳𩤯鶥蒽𦸒𦿟𦮂藼䔳𦶤𦺄𦷰萠藮𦸀𣟗𦁤秢𣖜𣙀䤭𤧞㵢鏛銾鍈𠊿碹鉷鑍俤㑀遤𥕝砽硔碶硋𡝗𣇉𤥁㚚佲濚濙瀞瀞吔𤆵垻壳垊鴖埗焴㒯𤆬燫𦱀𤾗嬨𡞵𨩉"],["9740","愌嫎娋䊼𤒈㜬䭻𨧼鎻鎸𡣖𠼝葲𦳀𡐓𤋺𢰦𤏁妔𣶷𦝁綨𦅛𦂤𤦹𤦋𨧺鋥珢㻩璴𨭣𡢟㻡𤪳櫘珳珻㻖𤨾𤪔𡟙𤩦𠎧𡐤𤧥瑈𤤖炥𤥶銄珦鍟𠓾錱𨫎𨨖鎆𨯧𥗕䤵𨪂煫"],["97a1","𤥃𠳿嚤𠘚𠯫𠲸唂秄𡟺緾𡛂𤩐𡡒䔮鐁㜊𨫀𤦭妰𡢿𡢃𧒄媡㛢𣵛㚰鉟婹𨪁𡡢鍴㳍𠪴䪖㦊僴㵩㵌𡎜煵䋻𨈘渏𩃤䓫浗𧹏灧沯㳖𣿭𣸭渂漌㵯𠏵畑㚼㓈䚀㻚䡱姄鉮䤾轁𨰜𦯀堒埈㛖𡑒烾𤍢𤩱𢿣𡊰𢎽梹楧𡎘𣓥𧯴𣛟𨪃𣟖𣏺𤲟樚𣚭𦲷萾䓟䓎"],["9840","𦴦𦵑𦲂𦿞漗𧄉茽𡜺菭𦲀𧁓𡟛妉媂𡞳婡婱𡤅𤇼㜭姯𡜼㛇熎鎐暚𤊥婮娫𤊓樫𣻹𧜶𤑛𤋊焝𤉙𨧡侰𦴨峂𤓎𧹍𤎽樌𤉖𡌄炦焳𤏩㶥泟勇𤩏繥姫崯㷳彜𤩝𡟟綤萦"],["98a1","咅𣫺𣌀𠈔坾𠣕𠘙㿥𡾞𪊶瀃𩅛嵰玏糓𨩙𩐠俈翧狍猐𧫴猸猹𥛶獁獈㺩𧬘遬燵𤣲珡臶㻊県㻑沢国琙琞琟㻢㻰㻴㻺瓓㼎㽓畂畭畲疍㽼痈痜㿀癍㿗癴㿜発𤽜熈嘣覀塩䀝睃䀹条䁅㗛瞘䁪䁯属瞾矋売砘点砜䂨砹硇硑硦葈𥔵礳栃礲䄃"],["9940","䄉禑禙辻稆込䅧窑䆲窼艹䇄竏竛䇏両筢筬筻簒簛䉠䉺类粜䊌粸䊔糭输烀𠳏総緔緐緽羮羴犟䎗耠耥笹耮耱联㷌垴炠肷胩䏭脌猪脎脒畠脔䐁㬹腖腙腚"],["99a1","䐓堺腼膄䐥膓䐭膥埯臁臤艔䒏芦艶苊苘苿䒰荗险榊萅烵葤惣蒈䔄蒾蓡蓸蔐蔸蕒䔻蕯蕰藠䕷虲蚒蚲蛯际螋䘆䘗袮裿褤襇覑𧥧訩訸誔誴豑賔賲贜䞘塟跃䟭仮踺嗘坔蹱嗵躰䠷軎転軤軭軲辷迁迊迌逳駄䢭飠鈓䤞鈨鉘鉫銱銮銿"],["9a40","鋣鋫鋳鋴鋽鍃鎄鎭䥅䥑麿鐗匁鐝鐭鐾䥪鑔鑹锭関䦧间阳䧥枠䨤靀䨵鞲韂噔䫤惨颹䬙飱塄餎餙冴餜餷饂饝饢䭰駅䮝騼鬏窃魩鮁鯝鯱鯴䱭鰠㝯𡯂鵉鰺"],["9aa1","黾噐鶓鶽鷀鷼银辶鹻麬麱麽黆铜黢黱黸竈齄𠂔𠊷𠎠椚铃妬𠓗塀铁㞹𠗕𠘕𠙶𡚺块煳𠫂𠫍𠮿呪吆𠯋咞𠯻𠰻𠱓𠱥𠱼惧𠲍噺𠲵𠳝𠳭𠵯𠶲𠷈楕鰯螥𠸄𠸎𠻗𠾐𠼭𠹳尠𠾼帋𡁜𡁏𡁶朞𡁻𡂈𡂖㙇𡂿𡃓𡄯𡄻卤蒭𡋣𡍵𡌶讁𡕷𡘙𡟃𡟇乸炻𡠭𡥪"],["9b40","𡨭𡩅𡰪𡱰𡲬𡻈拃𡻕𡼕熘桕𢁅槩㛈𢉼𢏗𢏺𢜪𢡱𢥏苽𢥧𢦓𢫕覥𢫨辠𢬎鞸𢬿顇骽𢱌"],["9b62","𢲈𢲷𥯨𢴈𢴒𢶷𢶕𢹂𢽴𢿌𣀳𣁦𣌟𣏞徱晈暿𧩹𣕧𣗳爁𤦺矗𣘚𣜖纇𠍆墵朎"],["9ba1","椘𣪧𧙗𥿢𣸑𣺹𧗾𢂚䣐䪸𤄙𨪚𤋮𤌍𤀻𤌴𤎖𤩅𠗊凒𠘑妟𡺨㮾𣳿𤐄𤓖垈𤙴㦛𤜯𨗨𩧉㝢𢇃譞𨭎駖𤠒𤣻𤨕爉𤫀𠱸奥𤺥𤾆𠝹軚𥀬劏圿煱𥊙𥐙𣽊𤪧喼𥑆𥑮𦭒釔㑳𥔿𧘲𥕞䜘𥕢𥕦𥟇𤤿𥡝偦㓻𣏌惞𥤃䝼𨥈𥪮𥮉𥰆𡶐垡煑澶𦄂𧰒遖𦆲𤾚譢𦐂𦑊"],["9c40","嵛𦯷輶𦒄𡤜諪𤧶𦒈𣿯𦔒䯀𦖿𦚵𢜛鑥𥟡憕娧晉侻嚹𤔡𦛼乪𤤴陖涏𦲽㘘襷𦞙𦡮𦐑𦡞營𦣇筂𩃀𠨑𦤦鄄𦤹穅鷰𦧺騦𦨭㙟𦑩𠀡禃𦨴𦭛崬𣔙菏𦮝䛐𦲤画补𦶮墶"],["9ca1","㜜𢖍𧁋𧇍㱔𧊀𧊅銁𢅺𧊋錰𧋦𤧐氹钟𧑐𠻸蠧裵𢤦𨑳𡞱溸𤨪𡠠㦤㚹尐秣䔿暶𩲭𩢤襃𧟌𧡘囖䃟𡘊㦡𣜯𨃨𡏅熭荦𧧝𩆨婧䲷𧂯𨦫𧧽𧨊𧬋𧵦𤅺筃祾𨀉澵𪋟樃𨌘厢𦸇鎿栶靝𨅯𨀣𦦵𡏭𣈯𨁈嶅𨰰𨂃圕頣𨥉嶫𤦈斾槕叒𤪥𣾁㰑朶𨂐𨃴𨄮𡾡𨅏"],["9d40","𨆉𨆯𨈚𨌆𨌯𨎊㗊𨑨𨚪䣺揦𨥖砈鉕𨦸䏲𨧧䏟𨧨𨭆𨯔姸𨰉輋𨿅𩃬筑𩄐𩄼㷷𩅞𤫊运犏嚋𩓧𩗩𩖰𩖸𩜲𩣑𩥉𩥪𩧃𩨨𩬎𩵚𩶛纟𩻸𩼣䲤镇𪊓熢𪋿䶑递𪗋䶜𠲜达嗁"],["9da1","辺𢒰边𤪓䔉繿潖檱仪㓤𨬬𧢝㜺躀𡟵𨀤𨭬𨮙𧨾𦚯㷫𧙕𣲷𥘵𥥖亚𥺁𦉘嚿𠹭踎孭𣺈𤲞揞拐𡟶𡡻攰嘭𥱊吚𥌑㷆𩶘䱽嘢嘞罉𥻘奵𣵀蝰东𠿪𠵉𣚺脗鵞贘瘻鱅癎瞹鍅吲腈苷嘥脲萘肽嗪祢噃吖𠺝㗎嘅嗱曱𨋢㘭甴嗰喺咗啲𠱁𠲖廐𥅈𠹶𢱢"],["9e40","𠺢麫絚嗞𡁵抝靭咔賍燶酶揼掹揾啩𢭃鱲𢺳冚㓟𠶧冧呍唞唓癦踭𦢊疱肶蠄螆裇膶萜𡃁䓬猄𤜆宐茋𦢓噻𢛴𧴯𤆣𧵳𦻐𧊶酰𡇙鈈𣳼𪚩𠺬𠻹牦𡲢䝎𤿂𧿹𠿫䃺"],["9ea1","鱝攟𢶠䣳𤟠𩵼𠿬𠸊恢𧖣𠿭"],["9ead","𦁈𡆇熣纎鵐业丄㕷嬍沲卧㚬㧜卽㚥𤘘墚𤭮舭呋垪𥪕𠥹"],["9ec5","㩒𢑥獴𩺬䴉鯭𣳾𩼰䱛𤾩𩖞𩿞葜𣶶𧊲𦞳𣜠挮紥𣻷𣸬㨪逈勌㹴㙺䗩𠒎癀嫰𠺶硺𧼮墧䂿噼鮋嵴癔𪐴麅䳡痹㟻愙𣃚𤏲"],["9ef5","噝𡊩垧𤥣𩸆刴𧂮㖭汊鵼"],["9f40","籖鬹埞𡝬屓擓𩓐𦌵𧅤蚭𠴨𦴢𤫢𠵱"],["9f4f","凾𡼏嶎霃𡷑麁遌笟鬂峑箣扨挵髿篏鬪籾鬮籂粆鰕篼鬉鼗鰛𤤾齚啳寃俽麘俲剠㸆勑坧偖妷帒韈鶫轜呩鞴饀鞺匬愰"],["9fa1","椬叚鰊鴂䰻陁榀傦畆𡝭駚剳"],["9fae","酙隁酜"],["9fb2","酑𨺗捿𦴣櫊嘑醎畺抅𠏼獏籰𥰡𣳽"],["9fc1","𤤙盖鮝个𠳔莾衂"],["9fc9","届槀僭坺刟巵从氱𠇲伹咜哚劚趂㗾弌㗳"],["9fdb","歒酼龥鮗頮颴骺麨麄煺笔"],["9fe7","毺蠘罸"],["9feb","嘠𪙊蹷齓"],["9ff0","跔蹏鸜踁抂𨍽踨蹵竓𤩷稾磘泪詧瘇"],["a040","𨩚鼦泎蟖痃𪊲硓咢贌狢獱謭猂瓱賫𤪻蘯徺袠䒷"],["a055","𡠻𦸅"],["a058","詾𢔛"],["a05b","惽癧髗鵄鍮鮏蟵"],["a063","蠏賷猬霡鮰㗖犲䰇籑饊𦅙慙䰄麖慽"],["a073","坟慯抦戹拎㩜懢厪𣏵捤栂㗒"],["a0a1","嵗𨯂迚𨸹"],["a0a6","僙𡵆礆匲阸𠼻䁥"],["a0ae","矾"],["a0b0","糂𥼚糚稭聦聣絍甅瓲覔舚朌聢𧒆聛瓰脃眤覉𦟌畓𦻑螩蟎臈螌詉貭譃眫瓸蓚㘵榲趦"],["a0d4","覩瑨涹蟁𤀑瓧㷛煶悤憜㳑煢恷"],["a0e2","罱𨬭牐惩䭾删㰘𣳇𥻗𧙖𥔱𡥄𡋾𩤃𦷜𧂭峁𦆭𨨏𣙷𠃮𦡆𤼎䕢嬟𦍌齐麦𦉫"],["a3c0","␀",31,"␡"],["c6a1","①",9,"⑴",9,"ⅰ",9,"丶丿亅亠冂冖冫勹匸卩厶夊宀巛⼳广廴彐彡攴无疒癶辵隶¨ˆヽヾゝゞ〃仝々〆〇ー［］✽ぁ",23],["c740","す",58,"ァアィイ"],["c7a1","ゥ",81,"А",5,"ЁЖ",4],["c840","Л",26,"ёж",25,"⇧↸↹㇏𠃌乚𠂊刂䒑"],["c8a1","龰冈龱𧘇"],["c8cd","￢￤＇＂㈱№℡゛゜⺀⺄⺆⺇⺈⺊⺌⺍⺕⺜⺝⺥⺧⺪⺬⺮⺶⺼⺾⻆⻊⻌⻍⻏⻖⻗⻞⻣"],["c8f5","ʃɐɛɔɵœøŋʊɪ"],["f9fe","￭"],["fa40","𠕇鋛𠗟𣿅蕌䊵珯况㙉𤥂𨧤鍄𡧛苮𣳈砼杄拟𤤳𨦪𠊠𦮳𡌅侫𢓭倈𦴩𧪄𣘀𤪱𢔓倩𠍾徤𠎀𠍇滛𠐟偽儁㑺儎顬㝃萖𤦤𠒇兠𣎴兪𠯿𢃼𠋥𢔰𠖎𣈳𡦃宂蝽𠖳𣲙冲冸"],["faa1","鴴凉减凑㳜凓𤪦决凢卂凭菍椾𣜭彻刋刦刼劵剗劔効勅簕蕂勠蘍𦬓包𨫞啉滙𣾀𠥔𣿬匳卄𠯢泋𡜦栛珕恊㺪㣌𡛨燝䒢卭却𨚫卾卿𡖖𡘓矦厓𨪛厠厫厮玧𥝲㽙玜叁叅汉义埾叙㪫𠮏叠𣿫𢶣叶𠱷吓灹唫晗浛呭𦭓𠵴啝咏咤䞦𡜍𠻝㶴𠵍"],["fb40","𨦼𢚘啇䳭启琗喆喩嘅𡣗𤀺䕒𤐵暳𡂴嘷曍𣊊暤暭噍噏磱囱鞇叾圀囯园𨭦㘣𡉏坆𤆥汮炋坂㚱𦱾埦𡐖堃𡑔𤍣堦𤯵塜墪㕡壠壜𡈼壻寿坃𪅐𤉸鏓㖡够梦㛃湙"],["fba1","𡘾娤啓𡚒蔅姉𠵎𦲁𦴪𡟜姙𡟻𡞲𦶦浱𡠨𡛕姹𦹅媫婣㛦𤦩婷㜈媖瑥嫓𦾡𢕔㶅𡤑㜲𡚸広勐孶斈孼𧨎䀄䡝𠈄寕慠𡨴𥧌𠖥寳宝䴐尅𡭄尓珎尔𡲥𦬨屉䣝岅峩峯嶋𡷹𡸷崐崘嵆𡺤岺巗苼㠭𤤁𢁉𢅳芇㠶㯂帮檊幵幺𤒼𠳓厦亷廐厨𡝱帉廴𨒂"],["fc40","廹廻㢠廼栾鐛弍𠇁弢㫞䢮𡌺强𦢈𢏐彘𢑱彣鞽𦹮彲鍀𨨶徧嶶㵟𥉐𡽪𧃸𢙨釖𠊞𨨩怱暅𡡷㥣㷇㘹垐𢞴祱㹀悞悤悳𤦂𤦏𧩓璤僡媠慤萤慂慈𦻒憁凴𠙖憇宪𣾷"],["fca1","𢡟懓𨮝𩥝懐㤲𢦀𢣁怣慜攞掋𠄘担𡝰拕𢸍捬𤧟㨗搸揸𡎎𡟼撐澊𢸶頔𤂌𥜝擡擥鑻㩦携㩗敍漖𤨨𤨣斅敭敟𣁾斵𤥀䬷旑䃘𡠩无旣忟𣐀昘𣇷𣇸晄𣆤𣆥晋𠹵晧𥇦晳晴𡸽𣈱𨗴𣇈𥌓矅𢣷馤朂𤎜𤨡㬫槺𣟂杞杧杢𤇍𩃭柗䓩栢湐鈼栁𣏦𦶠桝"],["fd40","𣑯槡樋𨫟楳棃𣗍椁椀㴲㨁𣘼㮀枬楡𨩊䋼椶榘㮡𠏉荣傐槹𣙙𢄪橅𣜃檝㯳枱櫈𩆜㰍欝𠤣惞欵歴𢟍溵𣫛𠎵𡥘㝀吡𣭚毡𣻼毜氷𢒋𤣱𦭑汚舦汹𣶼䓅𣶽𤆤𤤌𤤀"],["fda1","𣳉㛥㳫𠴲鮃𣇹𢒑羏样𦴥𦶡𦷫涖浜湼漄𤥿𤂅𦹲蔳𦽴凇沜渝萮𨬡港𣸯瑓𣾂秌湏媑𣁋濸㜍澝𣸰滺𡒗𤀽䕕鏰潄潜㵎潴𩅰㴻澟𤅄濓𤂑𤅕𤀹𣿰𣾴𤄿凟𤅖𤅗𤅀𦇝灋灾炧炁烌烕烖烟䄄㷨熴熖𤉷焫煅媈煊煮岜𤍥煏鍢𤋁焬𤑚𤨧𤨢熺𨯨炽爎"],["fe40","鑂爕夑鑃爤鍁𥘅爮牀𤥴梽牕牗㹕𣁄栍漽犂猪猫𤠣𨠫䣭𨠄猨献珏玪𠰺𦨮珉瑉𤇢𡛧𤨤昣㛅𤦷𤦍𤧻珷琕椃𤨦琹𠗃㻗瑜𢢭瑠𨺲瑇珤瑶莹瑬㜰瑴鏱樬璂䥓𤪌"],["fea1","𤅟𤩹𨮏孆𨰃𡢞瓈𡦈甎瓩甞𨻙𡩋寗𨺬鎅畍畊畧畮𤾂㼄𤴓疎瑝疞疴瘂瘬癑癏癯癶𦏵皐臯㟸𦤑𦤎皡皥皷盌𦾟葢𥂝𥅽𡸜眞眦着撯𥈠睘𣊬瞯𨥤𨥨𡛁矴砉𡍶𤨒棊碯磇磓隥礮𥗠磗礴碱𧘌辸袄𨬫𦂃𢘜禆褀椂禀𥡗禝𧬹礼禩渪𧄦㺨秆𩄍秔"]]');

/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/iconv-lite/encodings/tables/cp936.json":
/*!*****************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/iconv-lite/encodings/tables/cp936.json ***!
  \*****************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('[["0","\\u0000",127,"€"],["8140","丂丄丅丆丏丒丗丟丠両丣並丩丮丯丱丳丵丷丼乀乁乂乄乆乊乑乕乗乚乛乢乣乤乥乧乨乪",5,"乲乴",9,"乿",6,"亇亊"],["8180","亐亖亗亙亜亝亞亣亪亯亰亱亴亶亷亸亹亼亽亾仈仌仏仐仒仚仛仜仠仢仦仧仩仭仮仯仱仴仸仹仺仼仾伀伂",6,"伋伌伒",4,"伜伝伡伣伨伩伬伭伮伱伳伵伷伹伻伾",4,"佄佅佇",5,"佒佔佖佡佢佦佨佪佫佭佮佱佲併佷佸佹佺佽侀侁侂侅來侇侊侌侎侐侒侓侕侖侘侙侚侜侞侟価侢"],["8240","侤侫侭侰",4,"侶",8,"俀俁係俆俇俈俉俋俌俍俒",4,"俙俛俠俢俤俥俧俫俬俰俲俴俵俶俷俹俻俼俽俿",11],["8280","個倎倐們倓倕倖倗倛倝倞倠倢倣値倧倫倯",10,"倻倽倿偀偁偂偄偅偆偉偊偋偍偐",4,"偖偗偘偙偛偝",7,"偦",5,"偭",8,"偸偹偺偼偽傁傂傃傄傆傇傉傊傋傌傎",20,"傤傦傪傫傭",4,"傳",6,"傼"],["8340","傽",17,"僐",5,"僗僘僙僛",10,"僨僩僪僫僯僰僱僲僴僶",4,"僼",9,"儈"],["8380","儉儊儌",5,"儓",13,"儢",28,"兂兇兊兌兎兏児兒兓兗兘兙兛兝",4,"兣兤兦內兩兪兯兲兺兾兿冃冄円冇冊冋冎冏冐冑冓冔冘冚冝冞冟冡冣冦",4,"冭冮冴冸冹冺冾冿凁凂凃凅凈凊凍凎凐凒",5],["8440","凘凙凚凜凞凟凢凣凥",5,"凬凮凱凲凴凷凾刄刅刉刋刌刏刐刓刔刕刜刞刟刡刢刣別刦刧刪刬刯刱刲刴刵刼刾剄",5,"剋剎剏剒剓剕剗剘"],["8480","剙剚剛剝剟剠剢剣剤剦剨剫剬剭剮剰剱剳",9,"剾劀劃",4,"劉",6,"劑劒劔",6,"劜劤劥劦劧劮劯劰労",9,"勀勁勂勄勅勆勈勊勌勍勎勏勑勓勔動勗務",5,"勠勡勢勣勥",10,"勱",7,"勻勼勽匁匂匃匄匇匉匊匋匌匎"],["8540","匑匒匓匔匘匛匜匞匟匢匤匥匧匨匩匫匬匭匯",9,"匼匽區卂卄卆卋卌卍卐協単卙卛卝卥卨卪卬卭卲卶卹卻卼卽卾厀厁厃厇厈厊厎厏"],["8580","厐",4,"厖厗厙厛厜厞厠厡厤厧厪厫厬厭厯",6,"厷厸厹厺厼厽厾叀參",4,"収叏叐叒叓叕叚叜叝叞叡叢叧叴叺叾叿吀吂吅吇吋吔吘吙吚吜吢吤吥吪吰吳吶吷吺吽吿呁呂呄呅呇呉呌呍呎呏呑呚呝",4,"呣呥呧呩",7,"呴呹呺呾呿咁咃咅咇咈咉咊咍咑咓咗咘咜咞咟咠咡"],["8640","咢咥咮咰咲咵咶咷咹咺咼咾哃哅哊哋哖哘哛哠",4,"哫哬哯哰哱哴",5,"哻哾唀唂唃唄唅唈唊",4,"唒唓唕",5,"唜唝唞唟唡唥唦"],["8680","唨唩唫唭唲唴唵唶唸唹唺唻唽啀啂啅啇啈啋",4,"啑啒啓啔啗",4,"啝啞啟啠啢啣啨啩啫啯",5,"啹啺啽啿喅喆喌喍喎喐喒喓喕喖喗喚喛喞喠",6,"喨",8,"喲喴営喸喺喼喿",4,"嗆嗇嗈嗊嗋嗎嗏嗐嗕嗗",4,"嗞嗠嗢嗧嗩嗭嗮嗰嗱嗴嗶嗸",4,"嗿嘂嘃嘄嘅"],["8740","嘆嘇嘊嘋嘍嘐",7,"嘙嘚嘜嘝嘠嘡嘢嘥嘦嘨嘩嘪嘫嘮嘯嘰嘳嘵嘷嘸嘺嘼嘽嘾噀",11,"噏",4,"噕噖噚噛噝",4],["8780","噣噥噦噧噭噮噯噰噲噳噴噵噷噸噹噺噽",7,"嚇",6,"嚐嚑嚒嚔",14,"嚤",10,"嚰",6,"嚸嚹嚺嚻嚽",12,"囋",8,"囕囖囘囙囜団囥",5,"囬囮囯囲図囶囷囸囻囼圀圁圂圅圇國",6],["8840","園",9,"圝圞圠圡圢圤圥圦圧圫圱圲圴",4,"圼圽圿坁坃坄坅坆坈坉坋坒",4,"坘坙坢坣坥坧坬坮坰坱坲坴坵坸坹坺坽坾坿垀"],["8880","垁垇垈垉垊垍",4,"垔",6,"垜垝垞垟垥垨垪垬垯垰垱垳垵垶垷垹",8,"埄",6,"埌埍埐埑埓埖埗埛埜埞埡埢埣埥",7,"埮埰埱埲埳埵埶執埻埼埾埿堁堃堄堅堈堉堊堌堎堏堐堒堓堔堖堗堘堚堛堜堝堟堢堣堥",4,"堫",4,"報堲堳場堶",7],["8940","堾",5,"塅",6,"塎塏塐塒塓塕塖塗塙",4,"塟",5,"塦",4,"塭",16,"塿墂墄墆墇墈墊墋墌"],["8980","墍",4,"墔",4,"墛墜墝墠",7,"墪",17,"墽墾墿壀壂壃壄壆",10,"壒壓壔壖",13,"壥",5,"壭壯壱売壴壵壷壸壺",7,"夃夅夆夈",4,"夎夐夑夒夓夗夘夛夝夞夠夡夢夣夦夨夬夰夲夳夵夶夻"],["8a40","夽夾夿奀奃奅奆奊奌奍奐奒奓奙奛",4,"奡奣奤奦",12,"奵奷奺奻奼奾奿妀妅妉妋妌妎妏妐妑妔妕妘妚妛妜妝妟妠妡妢妦"],["8a80","妧妬妭妰妱妳",5,"妺妼妽妿",6,"姇姈姉姌姍姎姏姕姖姙姛姞",4,"姤姦姧姩姪姫姭",11,"姺姼姽姾娀娂娊娋娍娎娏娐娒娔娕娖娗娙娚娛娝娞娡娢娤娦娧娨娪",6,"娳娵娷",4,"娽娾娿婁",4,"婇婈婋",9,"婖婗婘婙婛",5],["8b40","婡婣婤婥婦婨婩婫",8,"婸婹婻婼婽婾媀",17,"媓",6,"媜",13,"媫媬"],["8b80","媭",4,"媴媶媷媹",4,"媿嫀嫃",5,"嫊嫋嫍",4,"嫓嫕嫗嫙嫚嫛嫝嫞嫟嫢嫤嫥嫧嫨嫪嫬",4,"嫲",22,"嬊",11,"嬘",25,"嬳嬵嬶嬸",7,"孁",6],["8c40","孈",7,"孒孖孞孠孡孧孨孫孭孮孯孲孴孶孷學孹孻孼孾孿宂宆宊宍宎宐宑宒宔宖実宧宨宩宬宭宮宯宱宲宷宺宻宼寀寁寃寈寉寊寋寍寎寏"],["8c80","寑寔",8,"寠寢寣實寧審",4,"寯寱",6,"寽対尀専尃尅將專尋尌對導尐尒尓尗尙尛尞尟尠尡尣尦尨尩尪尫尭尮尯尰尲尳尵尶尷屃屄屆屇屌屍屒屓屔屖屗屘屚屛屜屝屟屢層屧",6,"屰屲",6,"屻屼屽屾岀岃",4,"岉岊岋岎岏岒岓岕岝",4,"岤",4],["8d40","岪岮岯岰岲岴岶岹岺岻岼岾峀峂峃峅",5,"峌",5,"峓",5,"峚",6,"峢峣峧峩峫峬峮峯峱",9,"峼",4],["8d80","崁崄崅崈",5,"崏",4,"崕崗崘崙崚崜崝崟",4,"崥崨崪崫崬崯",4,"崵",7,"崿",7,"嵈嵉嵍",10,"嵙嵚嵜嵞",10,"嵪嵭嵮嵰嵱嵲嵳嵵",12,"嶃",21,"嶚嶛嶜嶞嶟嶠"],["8e40","嶡",21,"嶸",12,"巆",6,"巎",12,"巜巟巠巣巤巪巬巭"],["8e80","巰巵巶巸",4,"巿帀帄帇帉帊帋帍帎帒帓帗帞",7,"帨",4,"帯帰帲",4,"帹帺帾帿幀幁幃幆",5,"幍",6,"幖",4,"幜幝幟幠幣",14,"幵幷幹幾庁庂広庅庈庉庌庍庎庒庘庛庝庡庢庣庤庨",4,"庮",4,"庴庺庻庼庽庿",6],["8f40","廆廇廈廋",5,"廔廕廗廘廙廚廜",11,"廩廫",8,"廵廸廹廻廼廽弅弆弇弉弌弍弎弐弒弔弖弙弚弜弝弞弡弢弣弤"],["8f80","弨弫弬弮弰弲",6,"弻弽弾弿彁",14,"彑彔彙彚彛彜彞彟彠彣彥彧彨彫彮彯彲彴彵彶彸彺彽彾彿徃徆徍徎徏徑従徔徖徚徛徝從徟徠徢",5,"復徫徬徯",5,"徶徸徹徺徻徾",4,"忇忈忊忋忎忓忔忕忚忛応忞忟忢忣忥忦忨忩忬忯忰忲忳忴忶忷忹忺忼怇"],["9040","怈怉怋怌怐怑怓怗怘怚怞怟怢怣怤怬怭怮怰",4,"怶",4,"怽怾恀恄",6,"恌恎恏恑恓恔恖恗恘恛恜恞恟恠恡恥恦恮恱恲恴恵恷恾悀"],["9080","悁悂悅悆悇悈悊悋悎悏悐悑悓悕悗悘悙悜悞悡悢悤悥悧悩悪悮悰悳悵悶悷悹悺悽",7,"惇惈惉惌",4,"惒惓惔惖惗惙惛惞惡",4,"惪惱惲惵惷惸惻",4,"愂愃愄愅愇愊愋愌愐",4,"愖愗愘愙愛愜愝愞愡愢愥愨愩愪愬",18,"慀",6],["9140","慇慉態慍慏慐慒慓慔慖",6,"慞慟慠慡慣慤慥慦慩",6,"慱慲慳慴慶慸",18,"憌憍憏",4,"憕"],["9180","憖",6,"憞",8,"憪憫憭",9,"憸",5,"憿懀懁懃",4,"應懌",4,"懓懕",16,"懧",13,"懶",8,"戀",5,"戇戉戓戔戙戜戝戞戠戣戦戧戨戩戫戭戯戰戱戲戵戶戸",4,"扂扄扅扆扊"],["9240","扏扐払扖扗扙扚扜",6,"扤扥扨扱扲扴扵扷扸扺扻扽抁抂抃抅抆抇抈抋",5,"抔抙抜抝択抣抦抧抩抪抭抮抯抰抲抳抴抶抷抸抺抾拀拁"],["9280","拃拋拏拑拕拝拞拠拡拤拪拫拰拲拵拸拹拺拻挀挃挄挅挆挊挋挌挍挏挐挒挓挔挕挗挘挙挜挦挧挩挬挭挮挰挱挳",5,"挻挼挾挿捀捁捄捇捈捊捑捒捓捔捖",7,"捠捤捥捦捨捪捫捬捯捰捲捳捴捵捸捹捼捽捾捿掁掃掄掅掆掋掍掑掓掔掕掗掙",6,"採掤掦掫掯掱掲掵掶掹掻掽掿揀"],["9340","揁揂揃揅揇揈揊揋揌揑揓揔揕揗",6,"揟揢揤",4,"揫揬揮揯揰揱揳揵揷揹揺揻揼揾搃搄搆",4,"損搎搑搒搕",5,"搝搟搢搣搤"],["9380","搥搧搨搩搫搮",5,"搵",4,"搻搼搾摀摂摃摉摋",6,"摓摕摖摗摙",4,"摟",7,"摨摪摫摬摮",9,"摻",6,"撃撆撈",8,"撓撔撗撘撚撛撜撝撟",4,"撥撦撧撨撪撫撯撱撲撳撴撶撹撻撽撾撿擁擃擄擆",6,"擏擑擓擔擕擖擙據"],["9440","擛擜擝擟擠擡擣擥擧",24,"攁",7,"攊",7,"攓",4,"攙",8],["9480","攢攣攤攦",4,"攬攭攰攱攲攳攷攺攼攽敀",4,"敆敇敊敋敍敎敐敒敓敔敗敘敚敜敟敠敡敤敥敧敨敩敪敭敮敯敱敳敵敶數",14,"斈斉斊斍斎斏斒斔斕斖斘斚斝斞斠斢斣斦斨斪斬斮斱",7,"斺斻斾斿旀旂旇旈旉旊旍旐旑旓旔旕旘",7,"旡旣旤旪旫"],["9540","旲旳旴旵旸旹旻",4,"昁昄昅昇昈昉昋昍昐昑昒昖昗昘昚昛昜昞昡昢昣昤昦昩昪昫昬昮昰昲昳昷",4,"昽昿晀時晄",6,"晍晎晐晑晘"],["9580","晙晛晜晝晞晠晢晣晥晧晩",4,"晱晲晳晵晸晹晻晼晽晿暀暁暃暅暆暈暉暊暋暍暎暏暐暒暓暔暕暘",4,"暞",8,"暩",4,"暯",4,"暵暶暷暸暺暻暼暽暿",25,"曚曞",7,"曧曨曪",5,"曱曵曶書曺曻曽朁朂會"],["9640","朄朅朆朇朌朎朏朑朒朓朖朘朙朚朜朞朠",5,"朧朩朮朰朲朳朶朷朸朹朻朼朾朿杁杄杅杇杊杋杍杒杔杕杗",4,"杝杢杣杤杦杧杫杬杮東杴杶"],["9680","杸杹杺杻杽枀枂枃枅枆枈枊枌枍枎枏枑枒枓枔枖枙枛枟枠枡枤枦枩枬枮枱枲枴枹",7,"柂柅",9,"柕柖柗柛柟柡柣柤柦柧柨柪柫柭柮柲柵",7,"柾栁栂栃栄栆栍栐栒栔栕栘",4,"栞栟栠栢",6,"栫",6,"栴栵栶栺栻栿桇桋桍桏桒桖",5],["9740","桜桝桞桟桪桬",7,"桵桸",8,"梂梄梇",7,"梐梑梒梔梕梖梘",9,"梣梤梥梩梪梫梬梮梱梲梴梶梷梸"],["9780","梹",6,"棁棃",5,"棊棌棎棏棐棑棓棔棖棗棙棛",4,"棡棢棤",9,"棯棲棳棴棶棷棸棻棽棾棿椀椂椃椄椆",4,"椌椏椑椓",11,"椡椢椣椥",7,"椮椯椱椲椳椵椶椷椸椺椻椼椾楀楁楃",16,"楕楖楘楙楛楜楟"],["9840","楡楢楤楥楧楨楩楪楬業楯楰楲",4,"楺楻楽楾楿榁榃榅榊榋榌榎",5,"榖榗榙榚榝",9,"榩榪榬榮榯榰榲榳榵榶榸榹榺榼榽"],["9880","榾榿槀槂",7,"構槍槏槑槒槓槕",5,"槜槝槞槡",11,"槮槯槰槱槳",9,"槾樀",9,"樋",11,"標",5,"樠樢",5,"権樫樬樭樮樰樲樳樴樶",6,"樿",4,"橅橆橈",7,"橑",6,"橚"],["9940","橜",4,"橢橣橤橦",10,"橲",6,"橺橻橽橾橿檁檂檃檅",8,"檏檒",4,"檘",7,"檡",5],["9980","檧檨檪檭",114,"欥欦欨",6],["9a40","欯欰欱欳欴欵欶欸欻欼欽欿歀歁歂歄歅歈歊歋歍",11,"歚",7,"歨歩歫",13,"歺歽歾歿殀殅殈"],["9a80","殌殎殏殐殑殔殕殗殘殙殜",4,"殢",7,"殫",7,"殶殸",6,"毀毃毄毆",4,"毌毎毐毑毘毚毜",4,"毢",7,"毬毭毮毰毱毲毴毶毷毸毺毻毼毾",6,"氈",4,"氎氒気氜氝氞氠氣氥氫氬氭氱氳氶氷氹氺氻氼氾氿汃汄汅汈汋",4,"汑汒汓汖汘"],["9b40","汙汚汢汣汥汦汧汫",4,"汱汳汵汷汸決汻汼汿沀沄沇沊沋沍沎沑沒沕沖沗沘沚沜沝沞沠沢沨沬沯沰沴沵沶沷沺泀況泂泃泆泇泈泋泍泎泏泑泒泘"],["9b80","泙泚泜泝泟泤泦泧泩泬泭泲泴泹泿洀洂洃洅洆洈洉洊洍洏洐洑洓洔洕洖洘洜洝洟",5,"洦洨洩洬洭洯洰洴洶洷洸洺洿浀浂浄浉浌浐浕浖浗浘浛浝浟浡浢浤浥浧浨浫浬浭浰浱浲浳浵浶浹浺浻浽",4,"涃涄涆涇涊涋涍涏涐涒涖",4,"涜涢涥涬涭涰涱涳涴涶涷涹",5,"淁淂淃淈淉淊"],["9c40","淍淎淏淐淒淓淔淕淗淚淛淜淟淢淣淥淧淨淩淪淭淯淰淲淴淵淶淸淺淽",7,"渆渇済渉渋渏渒渓渕渘渙減渜渞渟渢渦渧渨渪測渮渰渱渳渵"],["9c80","渶渷渹渻",7,"湅",7,"湏湐湑湒湕湗湙湚湜湝湞湠",10,"湬湭湯",14,"満溁溂溄溇溈溊",4,"溑",6,"溙溚溛溝溞溠溡溣溤溦溨溩溫溬溭溮溰溳溵溸溹溼溾溿滀滃滄滅滆滈滉滊滌滍滎滐滒滖滘滙滛滜滝滣滧滪",5],["9d40","滰滱滲滳滵滶滷滸滺",7,"漃漄漅漇漈漊",4,"漐漑漒漖",9,"漡漢漣漥漦漧漨漬漮漰漲漴漵漷",6,"漿潀潁潂"],["9d80","潃潄潅潈潉潊潌潎",9,"潙潚潛潝潟潠潡潣潤潥潧",5,"潯潰潱潳潵潶潷潹潻潽",6,"澅澆澇澊澋澏",12,"澝澞澟澠澢",4,"澨",10,"澴澵澷澸澺",5,"濁濃",5,"濊",6,"濓",10,"濟濢濣濤濥"],["9e40","濦",7,"濰",32,"瀒",7,"瀜",6,"瀤",6],["9e80","瀫",9,"瀶瀷瀸瀺",17,"灍灎灐",13,"灟",11,"灮灱灲灳灴灷灹灺灻災炁炂炃炄炆炇炈炋炌炍炏炐炑炓炗炘炚炛炞",12,"炰炲炴炵炶為炾炿烄烅烆烇烉烋",12,"烚"],["9f40","烜烝烞烠烡烢烣烥烪烮烰",6,"烸烺烻烼烾",10,"焋",4,"焑焒焔焗焛",10,"焧",7,"焲焳焴"],["9f80","焵焷",13,"煆煇煈煉煋煍煏",12,"煝煟",4,"煥煩",4,"煯煰煱煴煵煶煷煹煻煼煾",5,"熅",4,"熋熌熍熎熐熑熒熓熕熖熗熚",4,"熡",6,"熩熪熫熭",5,"熴熶熷熸熺",8,"燄",9,"燏",4],["a040","燖",9,"燡燢燣燤燦燨",5,"燯",9,"燺",11,"爇",19],["a080","爛爜爞",9,"爩爫爭爮爯爲爳爴爺爼爾牀",6,"牉牊牋牎牏牐牑牓牔牕牗牘牚牜牞牠牣牤牥牨牪牫牬牭牰牱牳牴牶牷牸牻牼牽犂犃犅",4,"犌犎犐犑犓",11,"犠",11,"犮犱犲犳犵犺",6,"狅狆狇狉狊狋狌狏狑狓狔狕狖狘狚狛"],["a1a1","　、。·ˉˇ¨〃々—～‖…‘’“”〔〕〈",7,"〖〗【】±×÷∶∧∨∑∏∪∩∈∷√⊥∥∠⌒⊙∫∮≡≌≈∽∝≠≮≯≤≥∞∵∴♂♀°′″℃＄¤￠￡‰§№☆★○●◎◇◆□■△▲※→←↑↓〓"],["a2a1","ⅰ",9],["a2b1","⒈",19,"⑴",19,"①",9],["a2e5","㈠",9],["a2f1","Ⅰ",11],["a3a1","！＂＃￥％",88,"￣"],["a4a1","ぁ",82],["a5a1","ァ",85],["a6a1","Α",16,"Σ",6],["a6c1","α",16,"σ",6],["a6e0","︵︶︹︺︿﹀︽︾﹁﹂﹃﹄"],["a6ee","︻︼︷︸︱"],["a6f4","︳︴"],["a7a1","А",5,"ЁЖ",25],["a7d1","а",5,"ёж",25],["a840","ˊˋ˙–―‥‵℅℉↖↗↘↙∕∟∣≒≦≧⊿═",35,"▁",6],["a880","█",7,"▓▔▕▼▽◢◣◤◥☉⊕〒〝〞"],["a8a1","āáǎàēéěèīíǐìōóǒòūúǔùǖǘǚǜüêɑ"],["a8bd","ńň"],["a8c0","ɡ"],["a8c5","ㄅ",36],["a940","〡",8,"㊣㎎㎏㎜㎝㎞㎡㏄㏎㏑㏒㏕︰￢￤"],["a959","℡㈱"],["a95c","‐"],["a960","ー゛゜ヽヾ〆ゝゞ﹉",9,"﹔﹕﹖﹗﹙",8],["a980","﹢",4,"﹨﹩﹪﹫"],["a996","〇"],["a9a4","─",75],["aa40","狜狝狟狢",5,"狪狫狵狶狹狽狾狿猀猂猄",5,"猋猌猍猏猐猑猒猔猘猙猚猟猠猣猤猦猧猨猭猯猰猲猳猵猶猺猻猼猽獀",8],["aa80","獉獊獋獌獎獏獑獓獔獕獖獘",7,"獡",10,"獮獰獱"],["ab40","獲",11,"獿",4,"玅玆玈玊玌玍玏玐玒玓玔玕玗玘玙玚玜玝玞玠玡玣",5,"玪玬玭玱玴玵玶玸玹玼玽玾玿珁珃",4],["ab80","珋珌珎珒",6,"珚珛珜珝珟珡珢珣珤珦珨珪珫珬珮珯珰珱珳",4],["ac40","珸",10,"琄琇琈琋琌琍琎琑",8,"琜",5,"琣琤琧琩琫琭琯琱琲琷",4,"琽琾琿瑀瑂",11],["ac80","瑎",6,"瑖瑘瑝瑠",12,"瑮瑯瑱",4,"瑸瑹瑺"],["ad40","瑻瑼瑽瑿璂璄璅璆璈璉璊璌璍璏璑",10,"璝璟",7,"璪",15,"璻",12],["ad80","瓈",9,"瓓",8,"瓝瓟瓡瓥瓧",6,"瓰瓱瓲"],["ae40","瓳瓵瓸",6,"甀甁甂甃甅",7,"甎甐甒甔甕甖甗甛甝甞甠",4,"甦甧甪甮甴甶甹甼甽甿畁畂畃畄畆畇畉畊畍畐畑畒畓畕畖畗畘"],["ae80","畝",7,"畧畨畩畫",6,"畳畵當畷畺",4,"疀疁疂疄疅疇"],["af40","疈疉疊疌疍疎疐疓疕疘疛疜疞疢疦",4,"疭疶疷疺疻疿痀痁痆痋痌痎痏痐痑痓痗痙痚痜痝痟痠痡痥痩痬痭痮痯痲痳痵痶痷痸痺痻痽痾瘂瘄瘆瘇"],["af80","瘈瘉瘋瘍瘎瘏瘑瘒瘓瘔瘖瘚瘜瘝瘞瘡瘣瘧瘨瘬瘮瘯瘱瘲瘶瘷瘹瘺瘻瘽癁療癄"],["b040","癅",6,"癎",5,"癕癗",4,"癝癟癠癡癢癤",6,"癬癭癮癰",7,"癹発發癿皀皁皃皅皉皊皌皍皏皐皒皔皕皗皘皚皛"],["b080","皜",7,"皥",8,"皯皰皳皵",9,"盀盁盃啊阿埃挨哎唉哀皑癌蔼矮艾碍爱隘鞍氨安俺按暗岸胺案肮昂盎凹敖熬翱袄傲奥懊澳芭捌扒叭吧笆八疤巴拔跋靶把耙坝霸罢爸白柏百摆佰败拜稗斑班搬扳般颁板版扮拌伴瓣半办绊邦帮梆榜膀绑棒磅蚌镑傍谤苞胞包褒剥"],["b140","盄盇盉盋盌盓盕盙盚盜盝盞盠",4,"盦",7,"盰盳盵盶盷盺盻盽盿眀眂眃眅眆眊県眎",10,"眛眜眝眞眡眣眤眥眧眪眫"],["b180","眬眮眰",4,"眹眻眽眾眿睂睄睅睆睈",7,"睒",7,"睜薄雹保堡饱宝抱报暴豹鲍爆杯碑悲卑北辈背贝钡倍狈备惫焙被奔苯本笨崩绷甭泵蹦迸逼鼻比鄙笔彼碧蓖蔽毕毙毖币庇痹闭敝弊必辟壁臂避陛鞭边编贬扁便变卞辨辩辫遍标彪膘表鳖憋别瘪彬斌濒滨宾摈兵冰柄丙秉饼炳"],["b240","睝睞睟睠睤睧睩睪睭",11,"睺睻睼瞁瞂瞃瞆",5,"瞏瞐瞓",11,"瞡瞣瞤瞦瞨瞫瞭瞮瞯瞱瞲瞴瞶",4],["b280","瞼瞾矀",12,"矎",8,"矘矙矚矝",4,"矤病并玻菠播拨钵波博勃搏铂箔伯帛舶脖膊渤泊驳捕卜哺补埠不布步簿部怖擦猜裁材才财睬踩采彩菜蔡餐参蚕残惭惨灿苍舱仓沧藏操糙槽曹草厕策侧册测层蹭插叉茬茶查碴搽察岔差诧拆柴豺搀掺蝉馋谗缠铲产阐颤昌猖"],["b340","矦矨矪矯矰矱矲矴矵矷矹矺矻矼砃",5,"砊砋砎砏砐砓砕砙砛砞砠砡砢砤砨砪砫砮砯砱砲砳砵砶砽砿硁硂硃硄硆硈硉硊硋硍硏硑硓硔硘硙硚"],["b380","硛硜硞",11,"硯",7,"硸硹硺硻硽",6,"场尝常长偿肠厂敞畅唱倡超抄钞朝嘲潮巢吵炒车扯撤掣彻澈郴臣辰尘晨忱沉陈趁衬撑称城橙成呈乘程惩澄诚承逞骋秤吃痴持匙池迟弛驰耻齿侈尺赤翅斥炽充冲虫崇宠抽酬畴踌稠愁筹仇绸瞅丑臭初出橱厨躇锄雏滁除楚"],["b440","碄碅碆碈碊碋碏碐碒碔碕碖碙碝碞碠碢碤碦碨",7,"碵碶碷碸確碻碼碽碿磀磂磃磄磆磇磈磌磍磎磏磑磒磓磖磗磘磚",9],["b480","磤磥磦磧磩磪磫磭",4,"磳磵磶磸磹磻",5,"礂礃礄礆",6,"础储矗搐触处揣川穿椽传船喘串疮窗幢床闯创吹炊捶锤垂春椿醇唇淳纯蠢戳绰疵茨磁雌辞慈瓷词此刺赐次聪葱囱匆从丛凑粗醋簇促蹿篡窜摧崔催脆瘁粹淬翠村存寸磋撮搓措挫错搭达答瘩打大呆歹傣戴带殆代贷袋待逮"],["b540","礍",5,"礔",9,"礟",4,"礥",14,"礵",4,"礽礿祂祃祄祅祇祊",8,"祔祕祘祙祡祣"],["b580","祤祦祩祪祫祬祮祰",6,"祹祻",4,"禂禃禆禇禈禉禋禌禍禎禐禑禒怠耽担丹单郸掸胆旦氮但惮淡诞弹蛋当挡党荡档刀捣蹈倒岛祷导到稻悼道盗德得的蹬灯登等瞪凳邓堤低滴迪敌笛狄涤翟嫡抵底地蒂第帝弟递缔颠掂滇碘点典靛垫电佃甸店惦奠淀殿碉叼雕凋刁掉吊钓调跌爹碟蝶迭谍叠"],["b640","禓",6,"禛",11,"禨",10,"禴",4,"禼禿秂秄秅秇秈秊秌秎秏秐秓秔秖秗秙",5,"秠秡秢秥秨秪"],["b680","秬秮秱",6,"秹秺秼秾秿稁稄稅稇稈稉稊稌稏",4,"稕稖稘稙稛稜丁盯叮钉顶鼎锭定订丢东冬董懂动栋侗恫冻洞兜抖斗陡豆逗痘都督毒犊独读堵睹赌杜镀肚度渡妒端短锻段断缎堆兑队对墩吨蹲敦顿囤钝盾遁掇哆多夺垛躲朵跺舵剁惰堕蛾峨鹅俄额讹娥恶厄扼遏鄂饿恩而儿耳尔饵洱二"],["b740","稝稟稡稢稤",14,"稴稵稶稸稺稾穀",5,"穇",9,"穒",4,"穘",16],["b780","穩",6,"穱穲穳穵穻穼穽穾窂窅窇窉窊窋窌窎窏窐窓窔窙窚窛窞窡窢贰发罚筏伐乏阀法珐藩帆番翻樊矾钒繁凡烦反返范贩犯饭泛坊芳方肪房防妨仿访纺放菲非啡飞肥匪诽吠肺废沸费芬酚吩氛分纷坟焚汾粉奋份忿愤粪丰封枫蜂峰锋风疯烽逢冯缝讽奉凤佛否夫敷肤孵扶拂辐幅氟符伏俘服"],["b840","窣窤窧窩窪窫窮",4,"窴",10,"竀",10,"竌",9,"竗竘竚竛竜竝竡竢竤竧",5,"竮竰竱竲竳"],["b880","竴",4,"竻竼竾笀笁笂笅笇笉笌笍笎笐笒笓笖笗笘笚笜笝笟笡笢笣笧笩笭浮涪福袱弗甫抚辅俯釜斧脯腑府腐赴副覆赋复傅付阜父腹负富讣附妇缚咐噶嘎该改概钙盖溉干甘杆柑竿肝赶感秆敢赣冈刚钢缸肛纲岗港杠篙皋高膏羔糕搞镐稿告哥歌搁戈鸽胳疙割革葛格蛤阁隔铬个各给根跟耕更庚羹"],["b940","笯笰笲笴笵笶笷笹笻笽笿",5,"筆筈筊筍筎筓筕筗筙筜筞筟筡筣",10,"筯筰筳筴筶筸筺筼筽筿箁箂箃箄箆",6,"箎箏"],["b980","箑箒箓箖箘箙箚箛箞箟箠箣箤箥箮箯箰箲箳箵箶箷箹",7,"篂篃範埂耿梗工攻功恭龚供躬公宫弓巩汞拱贡共钩勾沟苟狗垢构购够辜菇咕箍估沽孤姑鼓古蛊骨谷股故顾固雇刮瓜剐寡挂褂乖拐怪棺关官冠观管馆罐惯灌贯光广逛瑰规圭硅归龟闺轨鬼诡癸桂柜跪贵刽辊滚棍锅郭国果裹过哈"],["ba40","篅篈築篊篋篍篎篏篐篒篔",4,"篛篜篞篟篠篢篣篤篧篨篩篫篬篭篯篰篲",4,"篸篹篺篻篽篿",7,"簈簉簊簍簎簐",5,"簗簘簙"],["ba80","簚",4,"簠",5,"簨簩簫",12,"簹",5,"籂骸孩海氦亥害骇酣憨邯韩含涵寒函喊罕翰撼捍旱憾悍焊汗汉夯杭航壕嚎豪毫郝好耗号浩呵喝荷菏核禾和何合盒貉阂河涸赫褐鹤贺嘿黑痕很狠恨哼亨横衡恒轰哄烘虹鸿洪宏弘红喉侯猴吼厚候后呼乎忽瑚壶葫胡蝴狐糊湖"],["bb40","籃",9,"籎",36,"籵",5,"籾",9],["bb80","粈粊",6,"粓粔粖粙粚粛粠粡粣粦粧粨粩粫粬粭粯粰粴",4,"粺粻弧虎唬护互沪户花哗华猾滑画划化话槐徊怀淮坏欢环桓还缓换患唤痪豢焕涣宦幻荒慌黄磺蝗簧皇凰惶煌晃幌恍谎灰挥辉徽恢蛔回毁悔慧卉惠晦贿秽会烩汇讳诲绘荤昏婚魂浑混豁活伙火获或惑霍货祸击圾基机畸稽积箕"],["bc40","粿糀糂糃糄糆糉糋糎",6,"糘糚糛糝糞糡",6,"糩",5,"糰",7,"糹糺糼",13,"紋",5],["bc80","紑",14,"紡紣紤紥紦紨紩紪紬紭紮細",6,"肌饥迹激讥鸡姬绩缉吉极棘辑籍集及急疾汲即嫉级挤几脊己蓟技冀季伎祭剂悸济寄寂计记既忌际妓继纪嘉枷夹佳家加荚颊贾甲钾假稼价架驾嫁歼监坚尖笺间煎兼肩艰奸缄茧检柬碱硷拣捡简俭剪减荐槛鉴践贱见键箭件"],["bd40","紷",54,"絯",7],["bd80","絸",32,"健舰剑饯渐溅涧建僵姜将浆江疆蒋桨奖讲匠酱降蕉椒礁焦胶交郊浇骄娇嚼搅铰矫侥脚狡角饺缴绞剿教酵轿较叫窖揭接皆秸街阶截劫节桔杰捷睫竭洁结解姐戒藉芥界借介疥诫届巾筋斤金今津襟紧锦仅谨进靳晋禁近烬浸"],["be40","継",12,"綧",6,"綯",42],["be80","線",32,"尽劲荆兢茎睛晶鲸京惊精粳经井警景颈静境敬镜径痉靖竟竞净炯窘揪究纠玖韭久灸九酒厩救旧臼舅咎就疚鞠拘狙疽居驹菊局咀矩举沮聚拒据巨具距踞锯俱句惧炬剧捐鹃娟倦眷卷绢撅攫抉掘倔爵觉决诀绝均菌钧军君峻"],["bf40","緻",62],["bf80","縺縼",4,"繂",4,"繈",21,"俊竣浚郡骏喀咖卡咯开揩楷凯慨刊堪勘坎砍看康慷糠扛抗亢炕考拷烤靠坷苛柯棵磕颗科壳咳可渴克刻客课肯啃垦恳坑吭空恐孔控抠口扣寇枯哭窟苦酷库裤夸垮挎跨胯块筷侩快宽款匡筐狂框矿眶旷况亏盔岿窥葵奎魁傀"],["c040","繞",35,"纃",23,"纜纝纞"],["c080","纮纴纻纼绖绤绬绹缊缐缞缷缹缻",6,"罃罆",9,"罒罓馈愧溃坤昆捆困括扩廓阔垃拉喇蜡腊辣啦莱来赖蓝婪栏拦篮阑兰澜谰揽览懒缆烂滥琅榔狼廊郎朗浪捞劳牢老佬姥酪烙涝勒乐雷镭蕾磊累儡垒擂肋类泪棱楞冷厘梨犁黎篱狸离漓理李里鲤礼莉荔吏栗丽厉励砾历利傈例俐"],["c140","罖罙罛罜罝罞罠罣",4,"罫罬罭罯罰罳罵罶罷罸罺罻罼罽罿羀羂",7,"羋羍羏",4,"羕",4,"羛羜羠羢羣羥羦羨",6,"羱"],["c180","羳",4,"羺羻羾翀翂翃翄翆翇翈翉翋翍翏",4,"翖翗翙",5,"翢翣痢立粒沥隶力璃哩俩联莲连镰廉怜涟帘敛脸链恋炼练粮凉梁粱良两辆量晾亮谅撩聊僚疗燎寥辽潦了撂镣廖料列裂烈劣猎琳林磷霖临邻鳞淋凛赁吝拎玲菱零龄铃伶羚凌灵陵岭领另令溜琉榴硫馏留刘瘤流柳六龙聋咙笼窿"],["c240","翤翧翨翪翫翬翭翯翲翴",6,"翽翾翿耂耇耈耉耊耎耏耑耓耚耛耝耞耟耡耣耤耫",5,"耲耴耹耺耼耾聀聁聄聅聇聈聉聎聏聐聑聓聕聖聗"],["c280","聙聛",13,"聫",5,"聲",11,"隆垄拢陇楼娄搂篓漏陋芦卢颅庐炉掳卤虏鲁麓碌露路赂鹿潞禄录陆戮驴吕铝侣旅履屡缕虑氯律率滤绿峦挛孪滦卵乱掠略抡轮伦仑沦纶论萝螺罗逻锣箩骡裸落洛骆络妈麻玛码蚂马骂嘛吗埋买麦卖迈脉瞒馒蛮满蔓曼慢漫"],["c340","聾肁肂肅肈肊肍",5,"肔肕肗肙肞肣肦肧肨肬肰肳肵肶肸肹肻胅胇",4,"胏",6,"胘胟胠胢胣胦胮胵胷胹胻胾胿脀脁脃脄脅脇脈脋"],["c380","脌脕脗脙脛脜脝脟",12,"脭脮脰脳脴脵脷脹",4,"脿谩芒茫盲氓忙莽猫茅锚毛矛铆卯茂冒帽貌贸么玫枚梅酶霉煤没眉媒镁每美昧寐妹媚门闷们萌蒙檬盟锰猛梦孟眯醚靡糜迷谜弥米秘觅泌蜜密幂棉眠绵冕免勉娩缅面苗描瞄藐秒渺庙妙蔑灭民抿皿敏悯闽明螟鸣铭名命谬摸"],["c440","腀",5,"腇腉腍腎腏腒腖腗腘腛",4,"腡腢腣腤腦腨腪腫腬腯腲腳腵腶腷腸膁膃",4,"膉膋膌膍膎膐膒",5,"膙膚膞",4,"膤膥"],["c480","膧膩膫",7,"膴",5,"膼膽膾膿臄臅臇臈臉臋臍",6,"摹蘑模膜磨摩魔抹末莫墨默沫漠寞陌谋牟某拇牡亩姆母墓暮幕募慕木目睦牧穆拿哪呐钠那娜纳氖乃奶耐奈南男难囊挠脑恼闹淖呢馁内嫩能妮霓倪泥尼拟你匿腻逆溺蔫拈年碾撵捻念娘酿鸟尿捏聂孽啮镊镍涅您柠狞凝宁"],["c540","臔",14,"臤臥臦臨臩臫臮",4,"臵",5,"臽臿舃與",4,"舎舏舑舓舕",5,"舝舠舤舥舦舧舩舮舲舺舼舽舿"],["c580","艀艁艂艃艅艆艈艊艌艍艎艐",7,"艙艛艜艝艞艠",7,"艩拧泞牛扭钮纽脓浓农弄奴努怒女暖虐疟挪懦糯诺哦欧鸥殴藕呕偶沤啪趴爬帕怕琶拍排牌徘湃派攀潘盘磐盼畔判叛乓庞旁耪胖抛咆刨炮袍跑泡呸胚培裴赔陪配佩沛喷盆砰抨烹澎彭蓬棚硼篷膨朋鹏捧碰坯砒霹批披劈琵毗"],["c640","艪艫艬艭艱艵艶艷艸艻艼芀芁芃芅芆芇芉芌芐芓芔芕芖芚芛芞芠芢芣芧芲芵芶芺芻芼芿苀苂苃苅苆苉苐苖苙苚苝苢苧苨苩苪苬苭苮苰苲苳苵苶苸"],["c680","苺苼",4,"茊茋茍茐茒茓茖茘茙茝",9,"茩茪茮茰茲茷茻茽啤脾疲皮匹痞僻屁譬篇偏片骗飘漂瓢票撇瞥拼频贫品聘乒坪苹萍平凭瓶评屏坡泼颇婆破魄迫粕剖扑铺仆莆葡菩蒲埔朴圃普浦谱曝瀑期欺栖戚妻七凄漆柒沏其棋奇歧畦崎脐齐旗祈祁骑起岂乞企启契砌器气迄弃汽泣讫掐"],["c740","茾茿荁荂荄荅荈荊",4,"荓荕",4,"荝荢荰",6,"荹荺荾",6,"莇莈莊莋莌莍莏莐莑莔莕莖莗莙莚莝莟莡",6,"莬莭莮"],["c780","莯莵莻莾莿菂菃菄菆菈菉菋菍菎菐菑菒菓菕菗菙菚菛菞菢菣菤菦菧菨菫菬菭恰洽牵扦钎铅千迁签仟谦乾黔钱钳前潜遣浅谴堑嵌欠歉枪呛腔羌墙蔷强抢橇锹敲悄桥瞧乔侨巧鞘撬翘峭俏窍切茄且怯窃钦侵亲秦琴勤芹擒禽寝沁青轻氢倾卿清擎晴氰情顷请庆琼穷秋丘邱球求囚酋泅趋区蛆曲躯屈驱渠"],["c840","菮華菳",4,"菺菻菼菾菿萀萂萅萇萈萉萊萐萒",5,"萙萚萛萞",5,"萩",7,"萲",5,"萹萺萻萾",7,"葇葈葉"],["c880","葊",6,"葒",4,"葘葝葞葟葠葢葤",4,"葪葮葯葰葲葴葷葹葻葼取娶龋趣去圈颧权醛泉全痊拳犬券劝缺炔瘸却鹊榷确雀裙群然燃冉染瓤壤攘嚷让饶扰绕惹热壬仁人忍韧任认刃妊纫扔仍日戎茸蓉荣融熔溶容绒冗揉柔肉茹蠕儒孺如辱乳汝入褥软阮蕊瑞锐闰润若弱撒洒萨腮鳃塞赛三叁"],["c940","葽",4,"蒃蒄蒅蒆蒊蒍蒏",7,"蒘蒚蒛蒝蒞蒟蒠蒢",12,"蒰蒱蒳蒵蒶蒷蒻蒼蒾蓀蓂蓃蓅蓆蓇蓈蓋蓌蓎蓏蓒蓔蓕蓗"],["c980","蓘",4,"蓞蓡蓢蓤蓧",4,"蓭蓮蓯蓱",10,"蓽蓾蔀蔁蔂伞散桑嗓丧搔骚扫嫂瑟色涩森僧莎砂杀刹沙纱傻啥煞筛晒珊苫杉山删煽衫闪陕擅赡膳善汕扇缮墒伤商赏晌上尚裳梢捎稍烧芍勺韶少哨邵绍奢赊蛇舌舍赦摄射慑涉社设砷申呻伸身深娠绅神沈审婶甚肾慎渗声生甥牲升绳"],["ca40","蔃",8,"蔍蔎蔏蔐蔒蔔蔕蔖蔘蔙蔛蔜蔝蔞蔠蔢",8,"蔭",9,"蔾",4,"蕄蕅蕆蕇蕋",10],["ca80","蕗蕘蕚蕛蕜蕝蕟",4,"蕥蕦蕧蕩",8,"蕳蕵蕶蕷蕸蕼蕽蕿薀薁省盛剩胜圣师失狮施湿诗尸虱十石拾时什食蚀实识史矢使屎驶始式示士世柿事拭誓逝势是嗜噬适仕侍释饰氏市恃室视试收手首守寿授售受瘦兽蔬枢梳殊抒输叔舒淑疏书赎孰熟薯暑曙署蜀黍鼠属术述树束戍竖墅庶数漱"],["cb40","薂薃薆薈",6,"薐",10,"薝",6,"薥薦薧薩薫薬薭薱",5,"薸薺",6,"藂",6,"藊",4,"藑藒"],["cb80","藔藖",5,"藝",6,"藥藦藧藨藪",14,"恕刷耍摔衰甩帅栓拴霜双爽谁水睡税吮瞬顺舜说硕朔烁斯撕嘶思私司丝死肆寺嗣四伺似饲巳松耸怂颂送宋讼诵搜艘擞嗽苏酥俗素速粟僳塑溯宿诉肃酸蒜算虽隋随绥髓碎岁穗遂隧祟孙损笋蓑梭唆缩琐索锁所塌他它她塔"],["cc40","藹藺藼藽藾蘀",4,"蘆",10,"蘒蘓蘔蘕蘗",15,"蘨蘪",13,"蘹蘺蘻蘽蘾蘿虀"],["cc80","虁",11,"虒虓處",4,"虛虜虝號虠虡虣",7,"獭挞蹋踏胎苔抬台泰酞太态汰坍摊贪瘫滩坛檀痰潭谭谈坦毯袒碳探叹炭汤塘搪堂棠膛唐糖倘躺淌趟烫掏涛滔绦萄桃逃淘陶讨套特藤腾疼誊梯剔踢锑提题蹄啼体替嚏惕涕剃屉天添填田甜恬舔腆挑条迢眺跳贴铁帖厅听烃"],["cd40","虭虯虰虲",6,"蚃",6,"蚎",4,"蚔蚖",5,"蚞",4,"蚥蚦蚫蚭蚮蚲蚳蚷蚸蚹蚻",4,"蛁蛂蛃蛅蛈蛌蛍蛒蛓蛕蛖蛗蛚蛜"],["cd80","蛝蛠蛡蛢蛣蛥蛦蛧蛨蛪蛫蛬蛯蛵蛶蛷蛺蛻蛼蛽蛿蜁蜄蜅蜆蜋蜌蜎蜏蜐蜑蜔蜖汀廷停亭庭挺艇通桐酮瞳同铜彤童桶捅筒统痛偷投头透凸秃突图徒途涂屠土吐兔湍团推颓腿蜕褪退吞屯臀拖托脱鸵陀驮驼椭妥拓唾挖哇蛙洼娃瓦袜歪外豌弯湾玩顽丸烷完碗挽晚皖惋宛婉万腕汪王亡枉网往旺望忘妄威"],["ce40","蜙蜛蜝蜟蜠蜤蜦蜧蜨蜪蜫蜬蜭蜯蜰蜲蜳蜵蜶蜸蜹蜺蜼蜽蝀",6,"蝊蝋蝍蝏蝐蝑蝒蝔蝕蝖蝘蝚",5,"蝡蝢蝦",7,"蝯蝱蝲蝳蝵"],["ce80","蝷蝸蝹蝺蝿螀螁螄螆螇螉螊螌螎",4,"螔螕螖螘",6,"螠",4,"巍微危韦违桅围唯惟为潍维苇萎委伟伪尾纬未蔚味畏胃喂魏位渭谓尉慰卫瘟温蚊文闻纹吻稳紊问嗡翁瓮挝蜗涡窝我斡卧握沃巫呜钨乌污诬屋无芜梧吾吴毋武五捂午舞伍侮坞戊雾晤物勿务悟误昔熙析西硒矽晰嘻吸锡牺"],["cf40","螥螦螧螩螪螮螰螱螲螴螶螷螸螹螻螼螾螿蟁",4,"蟇蟈蟉蟌",4,"蟔",6,"蟜蟝蟞蟟蟡蟢蟣蟤蟦蟧蟨蟩蟫蟬蟭蟯",9],["cf80","蟺蟻蟼蟽蟿蠀蠁蠂蠄",5,"蠋",7,"蠔蠗蠘蠙蠚蠜",4,"蠣稀息希悉膝夕惜熄烯溪汐犀檄袭席习媳喜铣洗系隙戏细瞎虾匣霞辖暇峡侠狭下厦夏吓掀锨先仙鲜纤咸贤衔舷闲涎弦嫌显险现献县腺馅羡宪陷限线相厢镶香箱襄湘乡翔祥详想响享项巷橡像向象萧硝霄削哮嚣销消宵淆晓"],["d040","蠤",13,"蠳",5,"蠺蠻蠽蠾蠿衁衂衃衆",5,"衎",5,"衕衖衘衚",6,"衦衧衪衭衯衱衳衴衵衶衸衹衺"],["d080","衻衼袀袃袆袇袉袊袌袎袏袐袑袓袔袕袗",4,"袝",4,"袣袥",5,"小孝校肖啸笑效楔些歇蝎鞋协挟携邪斜胁谐写械卸蟹懈泄泻谢屑薪芯锌欣辛新忻心信衅星腥猩惺兴刑型形邢行醒幸杏性姓兄凶胸匈汹雄熊休修羞朽嗅锈秀袖绣墟戌需虚嘘须徐许蓄酗叙旭序畜恤絮婿绪续轩喧宣悬旋玄"],["d140","袬袮袯袰袲",4,"袸袹袺袻袽袾袿裀裃裄裇裈裊裋裌裍裏裐裑裓裖裗裚",4,"裠裡裦裧裩",6,"裲裵裶裷裺裻製裿褀褁褃",5],["d180","褉褋",4,"褑褔",4,"褜",4,"褢褣褤褦褧褨褩褬褭褮褯褱褲褳褵褷选癣眩绚靴薛学穴雪血勋熏循旬询寻驯巡殉汛训讯逊迅压押鸦鸭呀丫芽牙蚜崖衙涯雅哑亚讶焉咽阉烟淹盐严研蜒岩延言颜阎炎沿奄掩眼衍演艳堰燕厌砚雁唁彦焰宴谚验殃央鸯秧杨扬佯疡羊洋阳氧仰痒养样漾邀腰妖瑶"],["d240","褸",8,"襂襃襅",24,"襠",5,"襧",19,"襼"],["d280","襽襾覀覂覄覅覇",26,"摇尧遥窑谣姚咬舀药要耀椰噎耶爷野冶也页掖业叶曳腋夜液一壹医揖铱依伊衣颐夷遗移仪胰疑沂宜姨彝椅蚁倚已乙矣以艺抑易邑屹亿役臆逸肄疫亦裔意毅忆义益溢诣议谊译异翼翌绎茵荫因殷音阴姻吟银淫寅饮尹引隐"],["d340","覢",30,"觃觍觓觔觕觗觘觙觛觝觟觠觡觢觤觧觨觩觪觬觭觮觰觱觲觴",6],["d380","觻",4,"訁",5,"計",21,"印英樱婴鹰应缨莹萤营荧蝇迎赢盈影颖硬映哟拥佣臃痈庸雍踊蛹咏泳涌永恿勇用幽优悠忧尤由邮铀犹油游酉有友右佑釉诱又幼迂淤于盂榆虞愚舆余俞逾鱼愉渝渔隅予娱雨与屿禹宇语羽玉域芋郁吁遇喻峪御愈欲狱育誉"],["d440","訞",31,"訿",8,"詉",21],["d480","詟",25,"詺",6,"浴寓裕预豫驭鸳渊冤元垣袁原援辕园员圆猿源缘远苑愿怨院曰约越跃钥岳粤月悦阅耘云郧匀陨允运蕴酝晕韵孕匝砸杂栽哉灾宰载再在咱攒暂赞赃脏葬遭糟凿藻枣早澡蚤躁噪造皂灶燥责择则泽贼怎增憎曾赠扎喳渣札轧"],["d540","誁",7,"誋",7,"誔",46],["d580","諃",32,"铡闸眨栅榨咋乍炸诈摘斋宅窄债寨瞻毡詹粘沾盏斩辗崭展蘸栈占战站湛绽樟章彰漳张掌涨杖丈帐账仗胀瘴障招昭找沼赵照罩兆肇召遮折哲蛰辙者锗蔗这浙珍斟真甄砧臻贞针侦枕疹诊震振镇阵蒸挣睁征狰争怔整拯正政"],["d640","諤",34,"謈",27],["d680","謤謥謧",30,"帧症郑证芝枝支吱蜘知肢脂汁之织职直植殖执值侄址指止趾只旨纸志挚掷至致置帜峙制智秩稚质炙痔滞治窒中盅忠钟衷终种肿重仲众舟周州洲诌粥轴肘帚咒皱宙昼骤珠株蛛朱猪诸诛逐竹烛煮拄瞩嘱主著柱助蛀贮铸筑"],["d740","譆",31,"譧",4,"譭",25],["d780","讇",24,"讬讱讻诇诐诪谉谞住注祝驻抓爪拽专砖转撰赚篆桩庄装妆撞壮状椎锥追赘坠缀谆准捉拙卓桌琢茁酌啄着灼浊兹咨资姿滋淄孜紫仔籽滓子自渍字鬃棕踪宗综总纵邹走奏揍租足卒族祖诅阻组钻纂嘴醉最罪尊遵昨左佐柞做作坐座"],["d840","谸",8,"豂豃豄豅豈豊豋豍",7,"豖豗豘豙豛",5,"豣",6,"豬",6,"豴豵豶豷豻",6,"貃貄貆貇"],["d880","貈貋貍",6,"貕貖貗貙",20,"亍丌兀丐廿卅丕亘丞鬲孬噩丨禺丿匕乇夭爻卮氐囟胤馗毓睾鼗丶亟鼐乜乩亓芈孛啬嘏仄厍厝厣厥厮靥赝匚叵匦匮匾赜卦卣刂刈刎刭刳刿剀剌剞剡剜蒯剽劂劁劐劓冂罔亻仃仉仂仨仡仫仞伛仳伢佤仵伥伧伉伫佞佧攸佚佝"],["d940","貮",62],["d980","賭",32,"佟佗伲伽佶佴侑侉侃侏佾佻侪佼侬侔俦俨俪俅俚俣俜俑俟俸倩偌俳倬倏倮倭俾倜倌倥倨偾偃偕偈偎偬偻傥傧傩傺僖儆僭僬僦僮儇儋仝氽佘佥俎龠汆籴兮巽黉馘冁夔勹匍訇匐凫夙兕亠兖亳衮袤亵脔裒禀嬴蠃羸冫冱冽冼"],["da40","贎",14,"贠赑赒赗赟赥赨赩赪赬赮赯赱赲赸",8,"趂趃趆趇趈趉趌",4,"趒趓趕",9,"趠趡"],["da80","趢趤",12,"趲趶趷趹趻趽跀跁跂跅跇跈跉跊跍跐跒跓跔凇冖冢冥讠讦讧讪讴讵讷诂诃诋诏诎诒诓诔诖诘诙诜诟诠诤诨诩诮诰诳诶诹诼诿谀谂谄谇谌谏谑谒谔谕谖谙谛谘谝谟谠谡谥谧谪谫谮谯谲谳谵谶卩卺阝阢阡阱阪阽阼陂陉陔陟陧陬陲陴隈隍隗隰邗邛邝邙邬邡邴邳邶邺"],["db40","跕跘跙跜跠跡跢跥跦跧跩跭跮跰跱跲跴跶跼跾",6,"踆踇踈踋踍踎踐踑踒踓踕",7,"踠踡踤",4,"踫踭踰踲踳踴踶踷踸踻踼踾"],["db80","踿蹃蹅蹆蹌",4,"蹓",5,"蹚",11,"蹧蹨蹪蹫蹮蹱邸邰郏郅邾郐郄郇郓郦郢郜郗郛郫郯郾鄄鄢鄞鄣鄱鄯鄹酃酆刍奂劢劬劭劾哿勐勖勰叟燮矍廴凵凼鬯厶弁畚巯坌垩垡塾墼壅壑圩圬圪圳圹圮圯坜圻坂坩垅坫垆坼坻坨坭坶坳垭垤垌垲埏垧垴垓垠埕埘埚埙埒垸埴埯埸埤埝"],["dc40","蹳蹵蹷",4,"蹽蹾躀躂躃躄躆躈",6,"躑躒躓躕",6,"躝躟",11,"躭躮躰躱躳",6,"躻",7],["dc80","軃",10,"軏",21,"堋堍埽埭堀堞堙塄堠塥塬墁墉墚墀馨鼙懿艹艽艿芏芊芨芄芎芑芗芙芫芸芾芰苈苊苣芘芷芮苋苌苁芩芴芡芪芟苄苎芤苡茉苷苤茏茇苜苴苒苘茌苻苓茑茚茆茔茕苠苕茜荑荛荜茈莒茼茴茱莛荞茯荏荇荃荟荀茗荠茭茺茳荦荥"],["dd40","軥",62],["dd80","輤",32,"荨茛荩荬荪荭荮莰荸莳莴莠莪莓莜莅荼莶莩荽莸荻莘莞莨莺莼菁萁菥菘堇萘萋菝菽菖萜萸萑萆菔菟萏萃菸菹菪菅菀萦菰菡葜葑葚葙葳蒇蒈葺蒉葸萼葆葩葶蒌蒎萱葭蓁蓍蓐蓦蒽蓓蓊蒿蒺蓠蒡蒹蒴蒗蓥蓣蔌甍蔸蓰蔹蔟蔺"],["de40","轅",32,"轪辀辌辒辝辠辡辢辤辥辦辧辪辬辭辮辯農辳辴辵辷辸辺辻込辿迀迃迆"],["de80","迉",4,"迏迒迖迗迚迠迡迣迧迬迯迱迲迴迵迶迺迻迼迾迿逇逈逌逎逓逕逘蕖蔻蓿蓼蕙蕈蕨蕤蕞蕺瞢蕃蕲蕻薤薨薇薏蕹薮薜薅薹薷薰藓藁藜藿蘧蘅蘩蘖蘼廾弈夼奁耷奕奚奘匏尢尥尬尴扌扪抟抻拊拚拗拮挢拶挹捋捃掭揶捱捺掎掴捭掬掊捩掮掼揲揸揠揿揄揞揎摒揆掾摅摁搋搛搠搌搦搡摞撄摭撖"],["df40","這逜連逤逥逧",5,"逰",4,"逷逹逺逽逿遀遃遅遆遈",4,"過達違遖遙遚遜",5,"遤遦遧適遪遫遬遯",4,"遶",6,"遾邁"],["df80","還邅邆邇邉邊邌",4,"邒邔邖邘邚邜邞邟邠邤邥邧邨邩邫邭邲邷邼邽邿郀摺撷撸撙撺擀擐擗擤擢攉攥攮弋忒甙弑卟叱叽叩叨叻吒吖吆呋呒呓呔呖呃吡呗呙吣吲咂咔呷呱呤咚咛咄呶呦咝哐咭哂咴哒咧咦哓哔呲咣哕咻咿哌哙哚哜咩咪咤哝哏哞唛哧唠哽唔哳唢唣唏唑唧唪啧喏喵啉啭啁啕唿啐唼"],["e040","郂郃郆郈郉郋郌郍郒郔郕郖郘郙郚郞郟郠郣郤郥郩郪郬郮郰郱郲郳郵郶郷郹郺郻郼郿鄀鄁鄃鄅",19,"鄚鄛鄜"],["e080","鄝鄟鄠鄡鄤",10,"鄰鄲",6,"鄺",8,"酄唷啖啵啶啷唳唰啜喋嗒喃喱喹喈喁喟啾嗖喑啻嗟喽喾喔喙嗪嗷嗉嘟嗑嗫嗬嗔嗦嗝嗄嗯嗥嗲嗳嗌嗍嗨嗵嗤辔嘞嘈嘌嘁嘤嘣嗾嘀嘧嘭噘嘹噗嘬噍噢噙噜噌噔嚆噤噱噫噻噼嚅嚓嚯囔囗囝囡囵囫囹囿圄圊圉圜帏帙帔帑帱帻帼"],["e140","酅酇酈酑酓酔酕酖酘酙酛酜酟酠酦酧酨酫酭酳酺酻酼醀",4,"醆醈醊醎醏醓",6,"醜",5,"醤",5,"醫醬醰醱醲醳醶醷醸醹醻"],["e180","醼",10,"釈釋釐釒",9,"針",8,"帷幄幔幛幞幡岌屺岍岐岖岈岘岙岑岚岜岵岢岽岬岫岱岣峁岷峄峒峤峋峥崂崃崧崦崮崤崞崆崛嵘崾崴崽嵬嵛嵯嵝嵫嵋嵊嵩嵴嶂嶙嶝豳嶷巅彳彷徂徇徉後徕徙徜徨徭徵徼衢彡犭犰犴犷犸狃狁狎狍狒狨狯狩狲狴狷猁狳猃狺"],["e240","釦",62],["e280","鈥",32,"狻猗猓猡猊猞猝猕猢猹猥猬猸猱獐獍獗獠獬獯獾舛夥飧夤夂饣饧",5,"饴饷饽馀馄馇馊馍馐馑馓馔馕庀庑庋庖庥庠庹庵庾庳赓廒廑廛廨廪膺忄忉忖忏怃忮怄忡忤忾怅怆忪忭忸怙怵怦怛怏怍怩怫怊怿怡恸恹恻恺恂"],["e340","鉆",45,"鉵",16],["e380","銆",7,"銏",24,"恪恽悖悚悭悝悃悒悌悛惬悻悱惝惘惆惚悴愠愦愕愣惴愀愎愫慊慵憬憔憧憷懔懵忝隳闩闫闱闳闵闶闼闾阃阄阆阈阊阋阌阍阏阒阕阖阗阙阚丬爿戕氵汔汜汊沣沅沐沔沌汨汩汴汶沆沩泐泔沭泷泸泱泗沲泠泖泺泫泮沱泓泯泾"],["e440","銨",5,"銯",24,"鋉",31],["e480","鋩",32,"洹洧洌浃浈洇洄洙洎洫浍洮洵洚浏浒浔洳涑浯涞涠浞涓涔浜浠浼浣渚淇淅淞渎涿淠渑淦淝淙渖涫渌涮渫湮湎湫溲湟溆湓湔渲渥湄滟溱溘滠漭滢溥溧溽溻溷滗溴滏溏滂溟潢潆潇漤漕滹漯漶潋潴漪漉漩澉澍澌潸潲潼潺濑"],["e540","錊",51,"錿",10],["e580","鍊",31,"鍫濉澧澹澶濂濡濮濞濠濯瀚瀣瀛瀹瀵灏灞宀宄宕宓宥宸甯骞搴寤寮褰寰蹇謇辶迓迕迥迮迤迩迦迳迨逅逄逋逦逑逍逖逡逵逶逭逯遄遑遒遐遨遘遢遛暹遴遽邂邈邃邋彐彗彖彘尻咫屐屙孱屣屦羼弪弩弭艴弼鬻屮妁妃妍妩妪妣"],["e640","鍬",34,"鎐",27],["e680","鎬",29,"鏋鏌鏍妗姊妫妞妤姒妲妯姗妾娅娆姝娈姣姘姹娌娉娲娴娑娣娓婀婧婊婕娼婢婵胬媪媛婷婺媾嫫媲嫒嫔媸嫠嫣嫱嫖嫦嫘嫜嬉嬗嬖嬲嬷孀尕尜孚孥孳孑孓孢驵驷驸驺驿驽骀骁骅骈骊骐骒骓骖骘骛骜骝骟骠骢骣骥骧纟纡纣纥纨纩"],["e740","鏎",7,"鏗",54],["e780","鐎",32,"纭纰纾绀绁绂绉绋绌绐绔绗绛绠绡绨绫绮绯绱绲缍绶绺绻绾缁缂缃缇缈缋缌缏缑缒缗缙缜缛缟缡",6,"缪缫缬缭缯",4,"缵幺畿巛甾邕玎玑玮玢玟珏珂珑玷玳珀珉珈珥珙顼琊珩珧珞玺珲琏琪瑛琦琥琨琰琮琬"],["e840","鐯",14,"鐿",43,"鑬鑭鑮鑯"],["e880","鑰",20,"钑钖钘铇铏铓铔铚铦铻锜锠琛琚瑁瑜瑗瑕瑙瑷瑭瑾璜璎璀璁璇璋璞璨璩璐璧瓒璺韪韫韬杌杓杞杈杩枥枇杪杳枘枧杵枨枞枭枋杷杼柰栉柘栊柩枰栌柙枵柚枳柝栀柃枸柢栎柁柽栲栳桠桡桎桢桄桤梃栝桕桦桁桧桀栾桊桉栩梵梏桴桷梓桫棂楮棼椟椠棹"],["e940","锧锳锽镃镈镋镕镚镠镮镴镵長",7,"門",42],["e980","閫",32,"椤棰椋椁楗棣椐楱椹楠楂楝榄楫榀榘楸椴槌榇榈槎榉楦楣楹榛榧榻榫榭槔榱槁槊槟榕槠榍槿樯槭樗樘橥槲橄樾檠橐橛樵檎橹樽樨橘橼檑檐檩檗檫猷獒殁殂殇殄殒殓殍殚殛殡殪轫轭轱轲轳轵轶轸轷轹轺轼轾辁辂辄辇辋"],["ea40","闌",27,"闬闿阇阓阘阛阞阠阣",6,"阫阬阭阯阰阷阸阹阺阾陁陃陊陎陏陑陒陓陖陗"],["ea80","陘陙陚陜陝陞陠陣陥陦陫陭",4,"陳陸",12,"隇隉隊辍辎辏辘辚軎戋戗戛戟戢戡戥戤戬臧瓯瓴瓿甏甑甓攴旮旯旰昊昙杲昃昕昀炅曷昝昴昱昶昵耆晟晔晁晏晖晡晗晷暄暌暧暝暾曛曜曦曩贲贳贶贻贽赀赅赆赈赉赇赍赕赙觇觊觋觌觎觏觐觑牮犟牝牦牯牾牿犄犋犍犏犒挈挲掰"],["eb40","隌階隑隒隓隕隖隚際隝",9,"隨",7,"隱隲隴隵隷隸隺隻隿雂雃雈雊雋雐雑雓雔雖",9,"雡",6,"雫"],["eb80","雬雭雮雰雱雲雴雵雸雺電雼雽雿霂霃霅霊霋霌霐霑霒霔霕霗",4,"霝霟霠搿擘耄毪毳毽毵毹氅氇氆氍氕氘氙氚氡氩氤氪氲攵敕敫牍牒牖爰虢刖肟肜肓肼朊肽肱肫肭肴肷胧胨胩胪胛胂胄胙胍胗朐胝胫胱胴胭脍脎胲胼朕脒豚脶脞脬脘脲腈腌腓腴腙腚腱腠腩腼腽腭腧塍媵膈膂膑滕膣膪臌朦臊膻"],["ec40","霡",8,"霫霬霮霯霱霳",4,"霺霻霼霽霿",18,"靔靕靗靘靚靜靝靟靣靤靦靧靨靪",7],["ec80","靲靵靷",4,"靽",7,"鞆",4,"鞌鞎鞏鞐鞓鞕鞖鞗鞙",4,"臁膦欤欷欹歃歆歙飑飒飓飕飙飚殳彀毂觳斐齑斓於旆旄旃旌旎旒旖炀炜炖炝炻烀炷炫炱烨烊焐焓焖焯焱煳煜煨煅煲煊煸煺熘熳熵熨熠燠燔燧燹爝爨灬焘煦熹戾戽扃扈扉礻祀祆祉祛祜祓祚祢祗祠祯祧祺禅禊禚禧禳忑忐"],["ed40","鞞鞟鞡鞢鞤",6,"鞬鞮鞰鞱鞳鞵",46],["ed80","韤韥韨韮",4,"韴韷",23,"怼恝恚恧恁恙恣悫愆愍慝憩憝懋懑戆肀聿沓泶淼矶矸砀砉砗砘砑斫砭砜砝砹砺砻砟砼砥砬砣砩硎硭硖硗砦硐硇硌硪碛碓碚碇碜碡碣碲碹碥磔磙磉磬磲礅磴礓礤礞礴龛黹黻黼盱眄眍盹眇眈眚眢眙眭眦眵眸睐睑睇睃睚睨"],["ee40","頏",62],["ee80","顎",32,"睢睥睿瞍睽瞀瞌瞑瞟瞠瞰瞵瞽町畀畎畋畈畛畲畹疃罘罡罟詈罨罴罱罹羁罾盍盥蠲钅钆钇钋钊钌钍钏钐钔钗钕钚钛钜钣钤钫钪钭钬钯钰钲钴钶",4,"钼钽钿铄铈",6,"铐铑铒铕铖铗铙铘铛铞铟铠铢铤铥铧铨铪"],["ef40","顯",5,"颋颎颒颕颙颣風",37,"飏飐飔飖飗飛飜飝飠",4],["ef80","飥飦飩",30,"铩铫铮铯铳铴铵铷铹铼铽铿锃锂锆锇锉锊锍锎锏锒",4,"锘锛锝锞锟锢锪锫锩锬锱锲锴锶锷锸锼锾锿镂锵镄镅镆镉镌镎镏镒镓镔镖镗镘镙镛镞镟镝镡镢镤",8,"镯镱镲镳锺矧矬雉秕秭秣秫稆嵇稃稂稞稔"],["f040","餈",4,"餎餏餑",28,"餯",26],["f080","饊",9,"饖",12,"饤饦饳饸饹饻饾馂馃馉稹稷穑黏馥穰皈皎皓皙皤瓞瓠甬鸠鸢鸨",4,"鸲鸱鸶鸸鸷鸹鸺鸾鹁鹂鹄鹆鹇鹈鹉鹋鹌鹎鹑鹕鹗鹚鹛鹜鹞鹣鹦",6,"鹱鹭鹳疒疔疖疠疝疬疣疳疴疸痄疱疰痃痂痖痍痣痨痦痤痫痧瘃痱痼痿瘐瘀瘅瘌瘗瘊瘥瘘瘕瘙"],["f140","馌馎馚",10,"馦馧馩",47],["f180","駙",32,"瘛瘼瘢瘠癀瘭瘰瘿瘵癃瘾瘳癍癞癔癜癖癫癯翊竦穸穹窀窆窈窕窦窠窬窨窭窳衤衩衲衽衿袂袢裆袷袼裉裢裎裣裥裱褚裼裨裾裰褡褙褓褛褊褴褫褶襁襦襻疋胥皲皴矜耒耔耖耜耠耢耥耦耧耩耨耱耋耵聃聆聍聒聩聱覃顸颀颃"],["f240","駺",62],["f280","騹",32,"颉颌颍颏颔颚颛颞颟颡颢颥颦虍虔虬虮虿虺虼虻蚨蚍蚋蚬蚝蚧蚣蚪蚓蚩蚶蛄蚵蛎蚰蚺蚱蚯蛉蛏蚴蛩蛱蛲蛭蛳蛐蜓蛞蛴蛟蛘蛑蜃蜇蛸蜈蜊蜍蜉蜣蜻蜞蜥蜮蜚蜾蝈蜴蜱蜩蜷蜿螂蜢蝽蝾蝻蝠蝰蝌蝮螋蝓蝣蝼蝤蝙蝥螓螯螨蟒"],["f340","驚",17,"驲骃骉骍骎骔骕骙骦骩",6,"骲骳骴骵骹骻骽骾骿髃髄髆",4,"髍髎髏髐髒體髕髖髗髙髚髛髜"],["f380","髝髞髠髢髣髤髥髧髨髩髪髬髮髰",8,"髺髼",6,"鬄鬅鬆蟆螈螅螭螗螃螫蟥螬螵螳蟋蟓螽蟑蟀蟊蟛蟪蟠蟮蠖蠓蟾蠊蠛蠡蠹蠼缶罂罄罅舐竺竽笈笃笄笕笊笫笏筇笸笪笙笮笱笠笥笤笳笾笞筘筚筅筵筌筝筠筮筻筢筲筱箐箦箧箸箬箝箨箅箪箜箢箫箴篑篁篌篝篚篥篦篪簌篾篼簏簖簋"],["f440","鬇鬉",5,"鬐鬑鬒鬔",10,"鬠鬡鬢鬤",10,"鬰鬱鬳",7,"鬽鬾鬿魀魆魊魋魌魎魐魒魓魕",5],["f480","魛",32,"簟簪簦簸籁籀臾舁舂舄臬衄舡舢舣舭舯舨舫舸舻舳舴舾艄艉艋艏艚艟艨衾袅袈裘裟襞羝羟羧羯羰羲籼敉粑粝粜粞粢粲粼粽糁糇糌糍糈糅糗糨艮暨羿翎翕翥翡翦翩翮翳糸絷綦綮繇纛麸麴赳趄趔趑趱赧赭豇豉酊酐酎酏酤"],["f540","魼",62],["f580","鮻",32,"酢酡酰酩酯酽酾酲酴酹醌醅醐醍醑醢醣醪醭醮醯醵醴醺豕鹾趸跫踅蹙蹩趵趿趼趺跄跖跗跚跞跎跏跛跆跬跷跸跣跹跻跤踉跽踔踝踟踬踮踣踯踺蹀踹踵踽踱蹉蹁蹂蹑蹒蹊蹰蹶蹼蹯蹴躅躏躔躐躜躞豸貂貊貅貘貔斛觖觞觚觜"],["f640","鯜",62],["f680","鰛",32,"觥觫觯訾謦靓雩雳雯霆霁霈霏霎霪霭霰霾龀龃龅",5,"龌黾鼋鼍隹隼隽雎雒瞿雠銎銮鋈錾鍪鏊鎏鐾鑫鱿鲂鲅鲆鲇鲈稣鲋鲎鲐鲑鲒鲔鲕鲚鲛鲞",5,"鲥",4,"鲫鲭鲮鲰",7,"鲺鲻鲼鲽鳄鳅鳆鳇鳊鳋"],["f740","鰼",62],["f780","鱻鱽鱾鲀鲃鲄鲉鲊鲌鲏鲓鲖鲗鲘鲙鲝鲪鲬鲯鲹鲾",4,"鳈鳉鳑鳒鳚鳛鳠鳡鳌",4,"鳓鳔鳕鳗鳘鳙鳜鳝鳟鳢靼鞅鞑鞒鞔鞯鞫鞣鞲鞴骱骰骷鹘骶骺骼髁髀髅髂髋髌髑魅魃魇魉魈魍魑飨餍餮饕饔髟髡髦髯髫髻髭髹鬈鬏鬓鬟鬣麽麾縻麂麇麈麋麒鏖麝麟黛黜黝黠黟黢黩黧黥黪黯鼢鼬鼯鼹鼷鼽鼾齄"],["f840","鳣",62],["f880","鴢",32],["f940","鵃",62],["f980","鶂",32],["fa40","鶣",62],["fa80","鷢",32],["fb40","鸃",27,"鸤鸧鸮鸰鸴鸻鸼鹀鹍鹐鹒鹓鹔鹖鹙鹝鹟鹠鹡鹢鹥鹮鹯鹲鹴",9,"麀"],["fb80","麁麃麄麅麆麉麊麌",5,"麔",8,"麞麠",5,"麧麨麩麪"],["fc40","麫",8,"麵麶麷麹麺麼麿",4,"黅黆黇黈黊黋黌黐黒黓黕黖黗黙黚點黡黣黤黦黨黫黬黭黮黰",8,"黺黽黿",6],["fc80","鼆",4,"鼌鼏鼑鼒鼔鼕鼖鼘鼚",5,"鼡鼣",8,"鼭鼮鼰鼱"],["fd40","鼲",4,"鼸鼺鼼鼿",4,"齅",10,"齒",38],["fd80","齹",5,"龁龂龍",11,"龜龝龞龡",4,"郎凉秊裏隣"],["fe40","兀嗀﨎﨏﨑﨓﨔礼﨟蘒﨡﨣﨤﨧﨨﨩"]]');

/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/iconv-lite/encodings/tables/cp949.json":
/*!*****************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/iconv-lite/encodings/tables/cp949.json ***!
  \*****************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('[["0","\\u0000",127],["8141","갂갃갅갆갋",4,"갘갞갟갡갢갣갥",6,"갮갲갳갴"],["8161","갵갶갷갺갻갽갾갿걁",9,"걌걎",5,"걕"],["8181","걖걗걙걚걛걝",18,"걲걳걵걶걹걻",4,"겂겇겈겍겎겏겑겒겓겕",6,"겞겢",5,"겫겭겮겱",6,"겺겾겿곀곂곃곅곆곇곉곊곋곍",7,"곖곘",7,"곢곣곥곦곩곫곭곮곲곴곷",4,"곾곿괁괂괃괅괇",4,"괎괐괒괓"],["8241","괔괕괖괗괙괚괛괝괞괟괡",7,"괪괫괮",5],["8261","괶괷괹괺괻괽",6,"굆굈굊",5,"굑굒굓굕굖굗"],["8281","굙",7,"굢굤",7,"굮굯굱굲굷굸굹굺굾궀궃",4,"궊궋궍궎궏궑",10,"궞",5,"궥",17,"궸",7,"귂귃귅귆귇귉",6,"귒귔",7,"귝귞귟귡귢귣귥",18],["8341","귺귻귽귾긂",5,"긊긌긎",5,"긕",7],["8361","긝",18,"긲긳긵긶긹긻긼"],["8381","긽긾긿깂깄깇깈깉깋깏깑깒깓깕깗",4,"깞깢깣깤깦깧깪깫깭깮깯깱",6,"깺깾",5,"꺆",5,"꺍",46,"꺿껁껂껃껅",6,"껎껒",5,"껚껛껝",8],["8441","껦껧껩껪껬껮",5,"껵껶껷껹껺껻껽",8],["8461","꼆꼉꼊꼋꼌꼎꼏꼑",18],["8481","꼤",7,"꼮꼯꼱꼳꼵",6,"꼾꽀꽄꽅꽆꽇꽊",5,"꽑",10,"꽞",5,"꽦",18,"꽺",5,"꾁꾂꾃꾅꾆꾇꾉",6,"꾒꾓꾔꾖",5,"꾝",26,"꾺꾻꾽꾾"],["8541","꾿꿁",5,"꿊꿌꿏",4,"꿕",6,"꿝",4],["8561","꿢",5,"꿪",5,"꿲꿳꿵꿶꿷꿹",6,"뀂뀃"],["8581","뀅",6,"뀍뀎뀏뀑뀒뀓뀕",6,"뀞",9,"뀩",26,"끆끇끉끋끍끏끐끑끒끖끘끚끛끜끞",29,"끾끿낁낂낃낅",6,"낎낐낒",5,"낛낝낞낣낤"],["8641","낥낦낧낪낰낲낶낷낹낺낻낽",6,"냆냊",5,"냒"],["8661","냓냕냖냗냙",6,"냡냢냣냤냦",10],["8681","냱",22,"넊넍넎넏넑넔넕넖넗넚넞",4,"넦넧넩넪넫넭",6,"넶넺",5,"녂녃녅녆녇녉",6,"녒녓녖녗녙녚녛녝녞녟녡",22,"녺녻녽녾녿놁놃",4,"놊놌놎놏놐놑놕놖놗놙놚놛놝"],["8741","놞",9,"놩",15],["8761","놹",18,"뇍뇎뇏뇑뇒뇓뇕"],["8781","뇖",5,"뇞뇠",7,"뇪뇫뇭뇮뇯뇱",7,"뇺뇼뇾",5,"눆눇눉눊눍",6,"눖눘눚",5,"눡",18,"눵",6,"눽",26,"뉙뉚뉛뉝뉞뉟뉡",6,"뉪",4],["8841","뉯",4,"뉶",5,"뉽",6,"늆늇늈늊",4],["8861","늏늒늓늕늖늗늛",4,"늢늤늧늨늩늫늭늮늯늱늲늳늵늶늷"],["8881","늸",15,"닊닋닍닎닏닑닓",4,"닚닜닞닟닠닡닣닧닩닪닰닱닲닶닼닽닾댂댃댅댆댇댉",6,"댒댖",5,"댝",54,"덗덙덚덝덠덡덢덣"],["8941","덦덨덪덬덭덯덲덳덵덶덷덹",6,"뎂뎆",5,"뎍"],["8961","뎎뎏뎑뎒뎓뎕",10,"뎢",5,"뎩뎪뎫뎭"],["8981","뎮",21,"돆돇돉돊돍돏돑돒돓돖돘돚돜돞돟돡돢돣돥돦돧돩",18,"돽",18,"됑",6,"됙됚됛됝됞됟됡",6,"됪됬",7,"됵",15],["8a41","둅",10,"둒둓둕둖둗둙",6,"둢둤둦"],["8a61","둧",4,"둭",18,"뒁뒂"],["8a81","뒃",4,"뒉",19,"뒞",5,"뒥뒦뒧뒩뒪뒫뒭",7,"뒶뒸뒺",5,"듁듂듃듅듆듇듉",6,"듑듒듓듔듖",5,"듞듟듡듢듥듧",4,"듮듰듲",5,"듹",26,"딖딗딙딚딝"],["8b41","딞",5,"딦딫",4,"딲딳딵딶딷딹",6,"땂땆"],["8b61","땇땈땉땊땎땏땑땒땓땕",6,"땞땢",8],["8b81","땫",52,"떢떣떥떦떧떩떬떭떮떯떲떶",4,"떾떿뗁뗂뗃뗅",6,"뗎뗒",5,"뗙",18,"뗭",18],["8c41","똀",15,"똒똓똕똖똗똙",4],["8c61","똞",6,"똦",5,"똭",6,"똵",5],["8c81","똻",12,"뙉",26,"뙥뙦뙧뙩",50,"뚞뚟뚡뚢뚣뚥",5,"뚭뚮뚯뚰뚲",16],["8d41","뛃",16,"뛕",8],["8d61","뛞",17,"뛱뛲뛳뛵뛶뛷뛹뛺"],["8d81","뛻",4,"뜂뜃뜄뜆",33,"뜪뜫뜭뜮뜱",6,"뜺뜼",7,"띅띆띇띉띊띋띍",6,"띖",9,"띡띢띣띥띦띧띩",6,"띲띴띶",5,"띾띿랁랂랃랅",6,"랎랓랔랕랚랛랝랞"],["8e41","랟랡",6,"랪랮",5,"랶랷랹",8],["8e61","럂",4,"럈럊",19],["8e81","럞",13,"럮럯럱럲럳럵",6,"럾렂",4,"렊렋렍렎렏렑",6,"렚렜렞",5,"렦렧렩렪렫렭",6,"렶렺",5,"롁롂롃롅",11,"롒롔",7,"롞롟롡롢롣롥",6,"롮롰롲",5,"롹롺롻롽",7],["8f41","뢅",7,"뢎",17],["8f61","뢠",7,"뢩",6,"뢱뢲뢳뢵뢶뢷뢹",4],["8f81","뢾뢿룂룄룆",5,"룍룎룏룑룒룓룕",7,"룞룠룢",5,"룪룫룭룮룯룱",6,"룺룼룾",5,"뤅",18,"뤙",6,"뤡",26,"뤾뤿륁륂륃륅",6,"륍륎륐륒",5],["9041","륚륛륝륞륟륡",6,"륪륬륮",5,"륶륷륹륺륻륽"],["9061","륾",5,"릆릈릋릌릏",15],["9081","릟",12,"릮릯릱릲릳릵",6,"릾맀맂",5,"맊맋맍맓",4,"맚맜맟맠맢맦맧맩맪맫맭",6,"맶맻",4,"먂",5,"먉",11,"먖",33,"먺먻먽먾먿멁멃멄멅멆"],["9141","멇멊멌멏멐멑멒멖멗멙멚멛멝",6,"멦멪",5],["9161","멲멳멵멶멷멹",9,"몆몈몉몊몋몍",5],["9181","몓",20,"몪몭몮몯몱몳",4,"몺몼몾",5,"뫅뫆뫇뫉",14,"뫚",33,"뫽뫾뫿묁묂묃묅",7,"묎묐묒",5,"묙묚묛묝묞묟묡",6],["9241","묨묪묬",7,"묷묹묺묿",4,"뭆뭈뭊뭋뭌뭎뭑뭒"],["9261","뭓뭕뭖뭗뭙",7,"뭢뭤",7,"뭭",4],["9281","뭲",21,"뮉뮊뮋뮍뮎뮏뮑",18,"뮥뮦뮧뮩뮪뮫뮭",6,"뮵뮶뮸",7,"믁믂믃믅믆믇믉",6,"믑믒믔",35,"믺믻믽믾밁"],["9341","밃",4,"밊밎밐밒밓밙밚밠밡밢밣밦밨밪밫밬밮밯밲밳밵"],["9361","밶밷밹",6,"뱂뱆뱇뱈뱊뱋뱎뱏뱑",8],["9381","뱚뱛뱜뱞",37,"벆벇벉벊벍벏",4,"벖벘벛",4,"벢벣벥벦벩",6,"벲벶",5,"벾벿볁볂볃볅",7,"볎볒볓볔볖볗볙볚볛볝",22,"볷볹볺볻볽"],["9441","볾",5,"봆봈봊",5,"봑봒봓봕",8],["9461","봞",5,"봥",6,"봭",12],["9481","봺",5,"뵁",6,"뵊뵋뵍뵎뵏뵑",6,"뵚",9,"뵥뵦뵧뵩",22,"붂붃붅붆붋",4,"붒붔붖붗붘붛붝",6,"붥",10,"붱",6,"붹",24],["9541","뷒뷓뷖뷗뷙뷚뷛뷝",11,"뷪",5,"뷱"],["9561","뷲뷳뷵뷶뷷뷹",6,"븁븂븄븆",5,"븎븏븑븒븓"],["9581","븕",6,"븞븠",35,"빆빇빉빊빋빍빏",4,"빖빘빜빝빞빟빢빣빥빦빧빩빫",4,"빲빶",4,"빾빿뺁뺂뺃뺅",6,"뺎뺒",5,"뺚",13,"뺩",14],["9641","뺸",23,"뻒뻓"],["9661","뻕뻖뻙",6,"뻡뻢뻦",5,"뻭",8],["9681","뻶",10,"뼂",5,"뼊",13,"뼚뼞",33,"뽂뽃뽅뽆뽇뽉",6,"뽒뽓뽔뽖",44],["9741","뾃",16,"뾕",8],["9761","뾞",17,"뾱",7],["9781","뾹",11,"뿆",5,"뿎뿏뿑뿒뿓뿕",6,"뿝뿞뿠뿢",89,"쀽쀾쀿"],["9841","쁀",16,"쁒",5,"쁙쁚쁛"],["9861","쁝쁞쁟쁡",6,"쁪",15],["9881","쁺",21,"삒삓삕삖삗삙",6,"삢삤삦",5,"삮삱삲삷",4,"삾샂샃샄샆샇샊샋샍샎샏샑",6,"샚샞",5,"샦샧샩샪샫샭",6,"샶샸샺",5,"섁섂섃섅섆섇섉",6,"섑섒섓섔섖",5,"섡섢섥섨섩섪섫섮"],["9941","섲섳섴섵섷섺섻섽섾섿셁",6,"셊셎",5,"셖셗"],["9961","셙셚셛셝",6,"셦셪",5,"셱셲셳셵셶셷셹셺셻"],["9981","셼",8,"솆",5,"솏솑솒솓솕솗",4,"솞솠솢솣솤솦솧솪솫솭솮솯솱",11,"솾",5,"쇅쇆쇇쇉쇊쇋쇍",6,"쇕쇖쇙",6,"쇡쇢쇣쇥쇦쇧쇩",6,"쇲쇴",7,"쇾쇿숁숂숃숅",6,"숎숐숒",5,"숚숛숝숞숡숢숣"],["9a41","숤숥숦숧숪숬숮숰숳숵",16],["9a61","쉆쉇쉉",6,"쉒쉓쉕쉖쉗쉙",6,"쉡쉢쉣쉤쉦"],["9a81","쉧",4,"쉮쉯쉱쉲쉳쉵",6,"쉾슀슂",5,"슊",5,"슑",6,"슙슚슜슞",5,"슦슧슩슪슫슮",5,"슶슸슺",33,"싞싟싡싢싥",5,"싮싰싲싳싴싵싷싺싽싾싿쌁",6,"쌊쌋쌎쌏"],["9b41","쌐쌑쌒쌖쌗쌙쌚쌛쌝",6,"쌦쌧쌪",8],["9b61","쌳",17,"썆",7],["9b81","썎",25,"썪썫썭썮썯썱썳",4,"썺썻썾",5,"쎅쎆쎇쎉쎊쎋쎍",50,"쏁",22,"쏚"],["9c41","쏛쏝쏞쏡쏣",4,"쏪쏫쏬쏮",5,"쏶쏷쏹",5],["9c61","쏿",8,"쐉",6,"쐑",9],["9c81","쐛",8,"쐥",6,"쐭쐮쐯쐱쐲쐳쐵",6,"쐾",9,"쑉",26,"쑦쑧쑩쑪쑫쑭",6,"쑶쑷쑸쑺",5,"쒁",18,"쒕",6,"쒝",12],["9d41","쒪",13,"쒹쒺쒻쒽",8],["9d61","쓆",25],["9d81","쓠",8,"쓪",5,"쓲쓳쓵쓶쓷쓹쓻쓼쓽쓾씂",9,"씍씎씏씑씒씓씕",6,"씝",10,"씪씫씭씮씯씱",6,"씺씼씾",5,"앆앇앋앏앐앑앒앖앚앛앜앟앢앣앥앦앧앩",6,"앲앶",5,"앾앿얁얂얃얅얆얈얉얊얋얎얐얒얓얔"],["9e41","얖얙얚얛얝얞얟얡",7,"얪",9,"얶"],["9e61","얷얺얿",4,"엋엍엏엒엓엕엖엗엙",6,"엢엤엦엧"],["9e81","엨엩엪엫엯엱엲엳엵엸엹엺엻옂옃옄옉옊옋옍옎옏옑",6,"옚옝",6,"옦옧옩옪옫옯옱옲옶옸옺옼옽옾옿왂왃왅왆왇왉",6,"왒왖",5,"왞왟왡",10,"왭왮왰왲",5,"왺왻왽왾왿욁",6,"욊욌욎",5,"욖욗욙욚욛욝",6,"욦"],["9f41","욨욪",5,"욲욳욵욶욷욻",4,"웂웄웆",5,"웎"],["9f61","웏웑웒웓웕",6,"웞웟웢",5,"웪웫웭웮웯웱웲"],["9f81","웳",4,"웺웻웼웾",5,"윆윇윉윊윋윍",6,"윖윘윚",5,"윢윣윥윦윧윩",6,"윲윴윶윸윹윺윻윾윿읁읂읃읅",4,"읋읎읐읙읚읛읝읞읟읡",6,"읩읪읬",7,"읶읷읹읺읻읿잀잁잂잆잋잌잍잏잒잓잕잙잛",4,"잢잧",4,"잮잯잱잲잳잵잶잷"],["a041","잸잹잺잻잾쟂",5,"쟊쟋쟍쟏쟑",6,"쟙쟚쟛쟜"],["a061","쟞",5,"쟥쟦쟧쟩쟪쟫쟭",13],["a081","쟻",4,"젂젃젅젆젇젉젋",4,"젒젔젗",4,"젞젟젡젢젣젥",6,"젮젰젲",5,"젹젺젻젽젾젿졁",6,"졊졋졎",5,"졕",26,"졲졳졵졶졷졹졻",4,"좂좄좈좉좊좎",5,"좕",7,"좞좠좢좣좤"],["a141","좥좦좧좩",18,"좾좿죀죁"],["a161","죂죃죅죆죇죉죊죋죍",6,"죖죘죚",5,"죢죣죥"],["a181","죦",14,"죶",5,"죾죿줁줂줃줇",4,"줎　、。·‥…¨〃­―∥＼∼‘’“”〔〕〈",9,"±×÷≠≤≥∞∴°′″℃Å￠￡￥♂♀∠⊥⌒∂∇≡≒§※☆★○●◎◇◆□■△▲▽▼→←↑↓↔〓≪≫√∽∝∵∫∬∈∋⊆⊇⊂⊃∪∩∧∨￢"],["a241","줐줒",5,"줙",18],["a261","줭",6,"줵",18],["a281","쥈",7,"쥒쥓쥕쥖쥗쥙",6,"쥢쥤",7,"쥭쥮쥯⇒⇔∀∃´～ˇ˘˝˚˙¸˛¡¿ː∮∑∏¤℉‰◁◀▷▶♤♠♡♥♧♣⊙◈▣◐◑▒▤▥▨▧▦▩♨☏☎☜☞¶†‡↕↗↙↖↘♭♩♪♬㉿㈜№㏇™㏂㏘℡€®"],["a341","쥱쥲쥳쥵",6,"쥽",10,"즊즋즍즎즏"],["a361","즑",6,"즚즜즞",16],["a381","즯",16,"짂짃짅짆짉짋",4,"짒짔짗짘짛！",58,"￦］",32,"￣"],["a441","짞짟짡짣짥짦짨짩짪짫짮짲",5,"짺짻짽짾짿쨁쨂쨃쨄"],["a461","쨅쨆쨇쨊쨎",5,"쨕쨖쨗쨙",12],["a481","쨦쨧쨨쨪",28,"ㄱ",93],["a541","쩇",4,"쩎쩏쩑쩒쩓쩕",6,"쩞쩢",5,"쩩쩪"],["a561","쩫",17,"쩾",5,"쪅쪆"],["a581","쪇",16,"쪙",14,"ⅰ",9],["a5b0","Ⅰ",9],["a5c1","Α",16,"Σ",6],["a5e1","α",16,"σ",6],["a641","쪨",19,"쪾쪿쫁쫂쫃쫅"],["a661","쫆",5,"쫎쫐쫒쫔쫕쫖쫗쫚",5,"쫡",6],["a681","쫨쫩쫪쫫쫭",6,"쫵",18,"쬉쬊─│┌┐┘└├┬┤┴┼━┃┏┓┛┗┣┳┫┻╋┠┯┨┷┿┝┰┥┸╂┒┑┚┙┖┕┎┍┞┟┡┢┦┧┩┪┭┮┱┲┵┶┹┺┽┾╀╁╃",7],["a741","쬋",4,"쬑쬒쬓쬕쬖쬗쬙",6,"쬢",7],["a761","쬪",22,"쭂쭃쭄"],["a781","쭅쭆쭇쭊쭋쭍쭎쭏쭑",6,"쭚쭛쭜쭞",5,"쭥",7,"㎕㎖㎗ℓ㎘㏄㎣㎤㎥㎦㎙",9,"㏊㎍㎎㎏㏏㎈㎉㏈㎧㎨㎰",9,"㎀",4,"㎺",5,"㎐",4,"Ω㏀㏁㎊㎋㎌㏖㏅㎭㎮㎯㏛㎩㎪㎫㎬㏝㏐㏓㏃㏉㏜㏆"],["a841","쭭",10,"쭺",14],["a861","쮉",18,"쮝",6],["a881","쮤",19,"쮹",11,"ÆÐªĦ"],["a8a6","Ĳ"],["a8a8","ĿŁØŒºÞŦŊ"],["a8b1","㉠",27,"ⓐ",25,"①",14,"½⅓⅔¼¾⅛⅜⅝⅞"],["a941","쯅",14,"쯕",10],["a961","쯠쯡쯢쯣쯥쯦쯨쯪",18],["a981","쯽",14,"찎찏찑찒찓찕",6,"찞찟찠찣찤æđðħıĳĸŀłøœßþŧŋŉ㈀",27,"⒜",25,"⑴",14,"¹²³⁴ⁿ₁₂₃₄"],["aa41","찥찦찪찫찭찯찱",6,"찺찿",4,"챆챇챉챊챋챍챎"],["aa61","챏",4,"챖챚",5,"챡챢챣챥챧챩",6,"챱챲"],["aa81","챳챴챶",29,"ぁ",82],["ab41","첔첕첖첗첚첛첝첞첟첡",6,"첪첮",5,"첶첷첹"],["ab61","첺첻첽",6,"쳆쳈쳊",5,"쳑쳒쳓쳕",5],["ab81","쳛",8,"쳥",6,"쳭쳮쳯쳱",12,"ァ",85],["ac41","쳾쳿촀촂",5,"촊촋촍촎촏촑",6,"촚촜촞촟촠"],["ac61","촡촢촣촥촦촧촩촪촫촭",11,"촺",4],["ac81","촿",28,"쵝쵞쵟А",5,"ЁЖ",25],["acd1","а",5,"ёж",25],["ad41","쵡쵢쵣쵥",6,"쵮쵰쵲",5,"쵹",7],["ad61","춁",6,"춉",10,"춖춗춙춚춛춝춞춟"],["ad81","춠춡춢춣춦춨춪",5,"춱",18,"췅"],["ae41","췆",5,"췍췎췏췑",16],["ae61","췢",5,"췩췪췫췭췮췯췱",6,"췺췼췾",4],["ae81","츃츅츆츇츉츊츋츍",6,"츕츖츗츘츚",5,"츢츣츥츦츧츩츪츫"],["af41","츬츭츮츯츲츴츶",19],["af61","칊",13,"칚칛칝칞칢",5,"칪칬"],["af81","칮",5,"칶칷칹칺칻칽",6,"캆캈캊",5,"캒캓캕캖캗캙"],["b041","캚",5,"캢캦",5,"캮",12],["b061","캻",5,"컂",19],["b081","컖",13,"컦컧컩컪컭",6,"컶컺",5,"가각간갇갈갉갊감",7,"같",4,"갠갤갬갭갯갰갱갸갹갼걀걋걍걔걘걜거걱건걷걸걺검겁것겄겅겆겉겊겋게겐겔겜겝겟겠겡겨격겪견겯결겸겹겻겼경곁계곈곌곕곗고곡곤곧골곪곬곯곰곱곳공곶과곽관괄괆"],["b141","켂켃켅켆켇켉",6,"켒켔켖",5,"켝켞켟켡켢켣"],["b161","켥",6,"켮켲",5,"켹",11],["b181","콅",14,"콖콗콙콚콛콝",6,"콦콨콪콫콬괌괍괏광괘괜괠괩괬괭괴괵괸괼굄굅굇굉교굔굘굡굣구국군굳굴굵굶굻굼굽굿궁궂궈궉권궐궜궝궤궷귀귁귄귈귐귑귓규균귤그극근귿글긁금급긋긍긔기긱긴긷길긺김깁깃깅깆깊까깍깎깐깔깖깜깝깟깠깡깥깨깩깬깰깸"],["b241","콭콮콯콲콳콵콶콷콹",6,"쾁쾂쾃쾄쾆",5,"쾍"],["b261","쾎",18,"쾢",5,"쾩"],["b281","쾪",5,"쾱",18,"쿅",6,"깹깻깼깽꺄꺅꺌꺼꺽꺾껀껄껌껍껏껐껑께껙껜껨껫껭껴껸껼꼇꼈꼍꼐꼬꼭꼰꼲꼴꼼꼽꼿꽁꽂꽃꽈꽉꽐꽜꽝꽤꽥꽹꾀꾄꾈꾐꾑꾕꾜꾸꾹꾼꿀꿇꿈꿉꿋꿍꿎꿔꿜꿨꿩꿰꿱꿴꿸뀀뀁뀄뀌뀐뀔뀜뀝뀨끄끅끈끊끌끎끓끔끕끗끙"],["b341","쿌",19,"쿢쿣쿥쿦쿧쿩"],["b361","쿪",5,"쿲쿴쿶",5,"쿽쿾쿿퀁퀂퀃퀅",5],["b381","퀋",5,"퀒",5,"퀙",19,"끝끼끽낀낄낌낍낏낑나낙낚난낟날낡낢남납낫",4,"낱낳내낵낸낼냄냅냇냈냉냐냑냔냘냠냥너넉넋넌널넒넓넘넙넛넜넝넣네넥넨넬넴넵넷넸넹녀녁년녈념녑녔녕녘녜녠노녹논놀놂놈놉놋농높놓놔놘놜놨뇌뇐뇔뇜뇝"],["b441","퀮",5,"퀶퀷퀹퀺퀻퀽",6,"큆큈큊",5],["b461","큑큒큓큕큖큗큙",6,"큡",10,"큮큯"],["b481","큱큲큳큵",6,"큾큿킀킂",18,"뇟뇨뇩뇬뇰뇹뇻뇽누눅눈눋눌눔눕눗눙눠눴눼뉘뉜뉠뉨뉩뉴뉵뉼늄늅늉느늑는늘늙늚늠늡늣능늦늪늬늰늴니닉닌닐닒님닙닛닝닢다닥닦단닫",4,"닳담답닷",4,"닿대댁댄댈댐댑댓댔댕댜더덕덖던덛덜덞덟덤덥"],["b541","킕",14,"킦킧킩킪킫킭",5],["b561","킳킶킸킺",5,"탂탃탅탆탇탊",5,"탒탖",4],["b581","탛탞탟탡탢탣탥",6,"탮탲",5,"탹",11,"덧덩덫덮데덱덴델뎀뎁뎃뎄뎅뎌뎐뎔뎠뎡뎨뎬도독돈돋돌돎돐돔돕돗동돛돝돠돤돨돼됐되된될됨됩됫됴두둑둔둘둠둡둣둥둬뒀뒈뒝뒤뒨뒬뒵뒷뒹듀듄듈듐듕드득든듣들듦듬듭듯등듸디딕딘딛딜딤딥딧딨딩딪따딱딴딸"],["b641","턅",7,"턎",17],["b661","턠",15,"턲턳턵턶턷턹턻턼턽턾"],["b681","턿텂텆",5,"텎텏텑텒텓텕",6,"텞텠텢",5,"텩텪텫텭땀땁땃땄땅땋때땍땐땔땜땝땟땠땡떠떡떤떨떪떫떰떱떳떴떵떻떼떽뗀뗄뗌뗍뗏뗐뗑뗘뗬또똑똔똘똥똬똴뙈뙤뙨뚜뚝뚠뚤뚫뚬뚱뛔뛰뛴뛸뜀뜁뜅뜨뜩뜬뜯뜰뜸뜹뜻띄띈띌띔띕띠띤띨띰띱띳띵라락란랄람랍랏랐랑랒랖랗"],["b741","텮",13,"텽",6,"톅톆톇톉톊"],["b761","톋",20,"톢톣톥톦톧"],["b781","톩",6,"톲톴톶톷톸톹톻톽톾톿퇁",14,"래랙랜랠램랩랫랬랭랴략랸럇량러럭런럴럼럽럿렀렁렇레렉렌렐렘렙렛렝려력련렬렴렵렷렸령례롄롑롓로록론롤롬롭롯롱롸롼뢍뢨뢰뢴뢸룀룁룃룅료룐룔룝룟룡루룩룬룰룸룹룻룽뤄뤘뤠뤼뤽륀륄륌륏륑류륙륜률륨륩"],["b841","퇐",7,"퇙",17],["b861","퇫",8,"퇵퇶퇷퇹",13],["b881","툈툊",5,"툑",24,"륫륭르륵른를름릅릇릉릊릍릎리릭린릴림립릿링마막만많",4,"맘맙맛망맞맡맣매맥맨맬맴맵맷맸맹맺먀먁먈먕머먹먼멀멂멈멉멋멍멎멓메멕멘멜멤멥멧멨멩며멱면멸몃몄명몇몌모목몫몬몰몲몸몹못몽뫄뫈뫘뫙뫼"],["b941","툪툫툮툯툱툲툳툵",6,"툾퉀퉂",5,"퉉퉊퉋퉌"],["b961","퉍",14,"퉝",6,"퉥퉦퉧퉨"],["b981","퉩",22,"튂튃튅튆튇튉튊튋튌묀묄묍묏묑묘묜묠묩묫무묵묶문묻물묽묾뭄뭅뭇뭉뭍뭏뭐뭔뭘뭡뭣뭬뮈뮌뮐뮤뮨뮬뮴뮷므믄믈믐믓미믹민믿밀밂밈밉밋밌밍및밑바",4,"받",4,"밤밥밧방밭배백밴밸뱀뱁뱃뱄뱅뱉뱌뱍뱐뱝버벅번벋벌벎범법벗"],["ba41","튍튎튏튒튓튔튖",5,"튝튞튟튡튢튣튥",6,"튭"],["ba61","튮튯튰튲",5,"튺튻튽튾틁틃",4,"틊틌",5],["ba81","틒틓틕틖틗틙틚틛틝",6,"틦",9,"틲틳틵틶틷틹틺벙벚베벡벤벧벨벰벱벳벴벵벼벽변별볍볏볐병볕볘볜보복볶본볼봄봅봇봉봐봔봤봬뵀뵈뵉뵌뵐뵘뵙뵤뵨부북분붇불붉붊붐붑붓붕붙붚붜붤붰붸뷔뷕뷘뷜뷩뷰뷴뷸븀븃븅브븍븐블븜븝븟비빅빈빌빎빔빕빗빙빚빛빠빡빤"],["bb41","틻",4,"팂팄팆",5,"팏팑팒팓팕팗",4,"팞팢팣"],["bb61","팤팦팧팪팫팭팮팯팱",6,"팺팾",5,"퍆퍇퍈퍉"],["bb81","퍊",31,"빨빪빰빱빳빴빵빻빼빽뺀뺄뺌뺍뺏뺐뺑뺘뺙뺨뻐뻑뻔뻗뻘뻠뻣뻤뻥뻬뼁뼈뼉뼘뼙뼛뼜뼝뽀뽁뽄뽈뽐뽑뽕뾔뾰뿅뿌뿍뿐뿔뿜뿟뿡쀼쁑쁘쁜쁠쁨쁩삐삑삔삘삠삡삣삥사삭삯산삳살삵삶삼삽삿샀상샅새색샌샐샘샙샛샜생샤"],["bc41","퍪",17,"퍾퍿펁펂펃펅펆펇"],["bc61","펈펉펊펋펎펒",5,"펚펛펝펞펟펡",6,"펪펬펮"],["bc81","펯",4,"펵펶펷펹펺펻펽",6,"폆폇폊",5,"폑",5,"샥샨샬샴샵샷샹섀섄섈섐섕서",4,"섣설섦섧섬섭섯섰성섶세섹센셀셈셉셋셌셍셔셕션셜셤셥셧셨셩셰셴셸솅소속솎손솔솖솜솝솟송솥솨솩솬솰솽쇄쇈쇌쇔쇗쇘쇠쇤쇨쇰쇱쇳쇼쇽숀숄숌숍숏숑수숙순숟술숨숩숫숭"],["bd41","폗폙",7,"폢폤",7,"폮폯폱폲폳폵폶폷"],["bd61","폸폹폺폻폾퐀퐂",5,"퐉",13],["bd81","퐗",5,"퐞",25,"숯숱숲숴쉈쉐쉑쉔쉘쉠쉥쉬쉭쉰쉴쉼쉽쉿슁슈슉슐슘슛슝스슥슨슬슭슴습슷승시식신싣실싫심십싯싱싶싸싹싻싼쌀쌈쌉쌌쌍쌓쌔쌕쌘쌜쌤쌥쌨쌩썅써썩썬썰썲썸썹썼썽쎄쎈쎌쏀쏘쏙쏜쏟쏠쏢쏨쏩쏭쏴쏵쏸쐈쐐쐤쐬쐰"],["be41","퐸",7,"푁푂푃푅",14],["be61","푔",7,"푝푞푟푡푢푣푥",7,"푮푰푱푲"],["be81","푳",4,"푺푻푽푾풁풃",4,"풊풌풎",5,"풕",8,"쐴쐼쐽쑈쑤쑥쑨쑬쑴쑵쑹쒀쒔쒜쒸쒼쓩쓰쓱쓴쓸쓺쓿씀씁씌씐씔씜씨씩씬씰씸씹씻씽아악안앉않알앍앎앓암압앗았앙앝앞애액앤앨앰앱앳앴앵야약얀얄얇얌얍얏양얕얗얘얜얠얩어억언얹얻얼얽얾엄",6,"엌엎"],["bf41","풞",10,"풪",14],["bf61","풹",18,"퓍퓎퓏퓑퓒퓓퓕"],["bf81","퓖",5,"퓝퓞퓠",7,"퓩퓪퓫퓭퓮퓯퓱",6,"퓹퓺퓼에엑엔엘엠엡엣엥여역엮연열엶엷염",5,"옅옆옇예옌옐옘옙옛옜오옥온올옭옮옰옳옴옵옷옹옻와왁완왈왐왑왓왔왕왜왝왠왬왯왱외왹왼욀욈욉욋욍요욕욘욜욤욥욧용우욱운울욹욺움웁웃웅워웍원월웜웝웠웡웨"],["c041","퓾",5,"픅픆픇픉픊픋픍",6,"픖픘",5],["c061","픞",25],["c081","픸픹픺픻픾픿핁핂핃핅",6,"핎핐핒",5,"핚핛핝핞핟핡핢핣웩웬웰웸웹웽위윅윈윌윔윕윗윙유육윤율윰윱윳융윷으윽은을읊음읍읏응",7,"읜읠읨읫이익인일읽읾잃임입잇있잉잊잎자작잔잖잗잘잚잠잡잣잤장잦재잭잰잴잼잽잿쟀쟁쟈쟉쟌쟎쟐쟘쟝쟤쟨쟬저적전절젊"],["c141","핤핦핧핪핬핮",5,"핶핷핹핺핻핽",6,"햆햊햋"],["c161","햌햍햎햏햑",19,"햦햧"],["c181","햨",31,"점접젓정젖제젝젠젤젬젭젯젱져젼졀졈졉졌졍졔조족존졸졺좀좁좃종좆좇좋좌좍좔좝좟좡좨좼좽죄죈죌죔죕죗죙죠죡죤죵주죽준줄줅줆줌줍줏중줘줬줴쥐쥑쥔쥘쥠쥡쥣쥬쥰쥴쥼즈즉즌즐즘즙즛증지직진짇질짊짐집짓"],["c241","헊헋헍헎헏헑헓",4,"헚헜헞",5,"헦헧헩헪헫헭헮"],["c261","헯",4,"헶헸헺",5,"혂혃혅혆혇혉",6,"혒"],["c281","혖",5,"혝혞혟혡혢혣혥",7,"혮",9,"혺혻징짖짙짚짜짝짠짢짤짧짬짭짯짰짱째짹짼쨀쨈쨉쨋쨌쨍쨔쨘쨩쩌쩍쩐쩔쩜쩝쩟쩠쩡쩨쩽쪄쪘쪼쪽쫀쫄쫌쫍쫏쫑쫓쫘쫙쫠쫬쫴쬈쬐쬔쬘쬠쬡쭁쭈쭉쭌쭐쭘쭙쭝쭤쭸쭹쮜쮸쯔쯤쯧쯩찌찍찐찔찜찝찡찢찧차착찬찮찰참찹찻"],["c341","혽혾혿홁홂홃홄홆홇홊홌홎홏홐홒홓홖홗홙홚홛홝",4],["c361","홢",4,"홨홪",5,"홲홳홵",11],["c381","횁횂횄횆",5,"횎횏횑횒횓횕",7,"횞횠횢",5,"횩횪찼창찾채책챈챌챔챕챗챘챙챠챤챦챨챰챵처척천철첨첩첫첬청체첵첸첼쳄쳅쳇쳉쳐쳔쳤쳬쳰촁초촉촌촐촘촙촛총촤촨촬촹최쵠쵤쵬쵭쵯쵱쵸춈추축춘출춤춥춧충춰췄췌췐취췬췰췸췹췻췽츄츈츌츔츙츠측츤츨츰츱츳층"],["c441","횫횭횮횯횱",7,"횺횼",7,"훆훇훉훊훋"],["c461","훍훎훏훐훒훓훕훖훘훚",5,"훡훢훣훥훦훧훩",4],["c481","훮훯훱훲훳훴훶",5,"훾훿휁휂휃휅",11,"휒휓휔치칙친칟칠칡침칩칫칭카칵칸칼캄캅캇캉캐캑캔캘캠캡캣캤캥캬캭컁커컥컨컫컬컴컵컷컸컹케켁켄켈켐켑켓켕켜켠켤켬켭켯켰켱켸코콕콘콜콤콥콧콩콰콱콴콸쾀쾅쾌쾡쾨쾰쿄쿠쿡쿤쿨쿰쿱쿳쿵쿼퀀퀄퀑퀘퀭퀴퀵퀸퀼"],["c541","휕휖휗휚휛휝휞휟휡",6,"휪휬휮",5,"휶휷휹"],["c561","휺휻휽",6,"흅흆흈흊",5,"흒흓흕흚",4],["c581","흟흢흤흦흧흨흪흫흭흮흯흱흲흳흵",6,"흾흿힀힂",5,"힊힋큄큅큇큉큐큔큘큠크큭큰클큼큽킁키킥킨킬킴킵킷킹타탁탄탈탉탐탑탓탔탕태택탠탤탬탭탯탰탱탸턍터턱턴털턺텀텁텃텄텅테텍텐텔템텝텟텡텨텬텼톄톈토톡톤톨톰톱톳통톺톼퇀퇘퇴퇸툇툉툐투툭툰툴툼툽툿퉁퉈퉜"],["c641","힍힎힏힑",6,"힚힜힞",5],["c6a1","퉤튀튁튄튈튐튑튕튜튠튤튬튱트특튼튿틀틂틈틉틋틔틘틜틤틥티틱틴틸팀팁팃팅파팍팎판팔팖팜팝팟팠팡팥패팩팬팰팸팹팻팼팽퍄퍅퍼퍽펀펄펌펍펏펐펑페펙펜펠펨펩펫펭펴편펼폄폅폈평폐폘폡폣포폭폰폴폼폽폿퐁"],["c7a1","퐈퐝푀푄표푠푤푭푯푸푹푼푿풀풂품풉풋풍풔풩퓌퓐퓔퓜퓟퓨퓬퓰퓸퓻퓽프픈플픔픕픗피픽핀필핌핍핏핑하학한할핥함합핫항해핵핸핼햄햅햇했행햐향허헉헌헐헒험헙헛헝헤헥헨헬헴헵헷헹혀혁현혈혐협혓혔형혜혠"],["c8a1","혤혭호혹혼홀홅홈홉홋홍홑화확환활홧황홰홱홴횃횅회획횐횔횝횟횡효횬횰횹횻후훅훈훌훑훔훗훙훠훤훨훰훵훼훽휀휄휑휘휙휜휠휨휩휫휭휴휵휸휼흄흇흉흐흑흔흖흗흘흙흠흡흣흥흩희흰흴흼흽힁히힉힌힐힘힙힛힝"],["caa1","伽佳假價加可呵哥嘉嫁家暇架枷柯歌珂痂稼苛茄街袈訶賈跏軻迦駕刻却各恪慤殼珏脚覺角閣侃刊墾奸姦干幹懇揀杆柬桿澗癎看磵稈竿簡肝艮艱諫間乫喝曷渴碣竭葛褐蝎鞨勘坎堪嵌感憾戡敢柑橄減甘疳監瞰紺邯鑑鑒龕"],["cba1","匣岬甲胛鉀閘剛堈姜岡崗康强彊慷江畺疆糠絳綱羌腔舡薑襁講鋼降鱇介价個凱塏愷愾慨改槪漑疥皆盖箇芥蓋豈鎧開喀客坑更粳羹醵倨去居巨拒据據擧渠炬祛距踞車遽鉅鋸乾件健巾建愆楗腱虔蹇鍵騫乞傑杰桀儉劍劒檢"],["cca1","瞼鈐黔劫怯迲偈憩揭擊格檄激膈覡隔堅牽犬甄絹繭肩見譴遣鵑抉決潔結缺訣兼慊箝謙鉗鎌京俓倞傾儆勁勍卿坰境庚徑慶憬擎敬景暻更梗涇炅烱璟璥瓊痙硬磬竟競絅經耕耿脛莖警輕逕鏡頃頸驚鯨係啓堺契季屆悸戒桂械"],["cda1","棨溪界癸磎稽系繫繼計誡谿階鷄古叩告呱固姑孤尻庫拷攷故敲暠枯槁沽痼皐睾稿羔考股膏苦苽菰藁蠱袴誥賈辜錮雇顧高鼓哭斛曲梏穀谷鵠困坤崑昆梱棍滾琨袞鯤汨滑骨供公共功孔工恐恭拱控攻珙空蚣貢鞏串寡戈果瓜"],["cea1","科菓誇課跨過鍋顆廓槨藿郭串冠官寬慣棺款灌琯瓘管罐菅觀貫關館刮恝括适侊光匡壙廣曠洸炚狂珖筐胱鑛卦掛罫乖傀塊壞怪愧拐槐魁宏紘肱轟交僑咬喬嬌嶠巧攪敎校橋狡皎矯絞翹膠蕎蛟較轎郊餃驕鮫丘久九仇俱具勾"],["cfa1","區口句咎嘔坵垢寇嶇廐懼拘救枸柩構歐毆毬求溝灸狗玖球瞿矩究絿耉臼舅舊苟衢謳購軀逑邱鉤銶駒驅鳩鷗龜國局菊鞠鞫麴君窘群裙軍郡堀屈掘窟宮弓穹窮芎躬倦券勸卷圈拳捲權淃眷厥獗蕨蹶闕机櫃潰詭軌饋句晷歸貴"],["d0a1","鬼龜叫圭奎揆槻珪硅窺竅糾葵規赳逵閨勻均畇筠菌鈞龜橘克剋劇戟棘極隙僅劤勤懃斤根槿瑾筋芹菫覲謹近饉契今妗擒昑檎琴禁禽芩衾衿襟金錦伋及急扱汲級給亘兢矜肯企伎其冀嗜器圻基埼夔奇妓寄岐崎己幾忌技旗旣"],["d1a1","朞期杞棋棄機欺氣汽沂淇玘琦琪璂璣畸畿碁磯祁祇祈祺箕紀綺羈耆耭肌記譏豈起錡錤飢饑騎騏驥麒緊佶吉拮桔金喫儺喇奈娜懦懶拏拿癩",5,"那樂",4,"諾酪駱亂卵暖欄煖爛蘭難鸞捏捺南嵐枏楠湳濫男藍襤拉"],["d2a1","納臘蠟衲囊娘廊",4,"乃來內奈柰耐冷女年撚秊念恬拈捻寧寗努勞奴弩怒擄櫓爐瑙盧",5,"駑魯",10,"濃籠聾膿農惱牢磊腦賂雷尿壘",7,"嫩訥杻紐勒",5,"能菱陵尼泥匿溺多茶"],["d3a1","丹亶但單團壇彖斷旦檀段湍短端簞緞蛋袒鄲鍛撻澾獺疸達啖坍憺擔曇淡湛潭澹痰聃膽蕁覃談譚錟沓畓答踏遝唐堂塘幢戇撞棠當糖螳黨代垈坮大對岱帶待戴擡玳臺袋貸隊黛宅德悳倒刀到圖堵塗導屠島嶋度徒悼挑掉搗桃"],["d4a1","棹櫂淘渡滔濤燾盜睹禱稻萄覩賭跳蹈逃途道都鍍陶韜毒瀆牘犢獨督禿篤纛讀墩惇敦旽暾沌焞燉豚頓乭突仝冬凍動同憧東桐棟洞潼疼瞳童胴董銅兜斗杜枓痘竇荳讀豆逗頭屯臀芚遁遯鈍得嶝橙燈登等藤謄鄧騰喇懶拏癩羅"],["d5a1","蘿螺裸邏樂洛烙珞絡落諾酪駱丹亂卵欄欒瀾爛蘭鸞剌辣嵐擥攬欖濫籃纜藍襤覽拉臘蠟廊朗浪狼琅瑯螂郞來崍徠萊冷掠略亮倆兩凉梁樑粮粱糧良諒輛量侶儷勵呂廬慮戾旅櫚濾礪藜蠣閭驢驪麗黎力曆歷瀝礫轢靂憐戀攣漣"],["d6a1","煉璉練聯蓮輦連鍊冽列劣洌烈裂廉斂殮濂簾獵令伶囹寧岺嶺怜玲笭羚翎聆逞鈴零靈領齡例澧禮醴隷勞怒撈擄櫓潞瀘爐盧老蘆虜路輅露魯鷺鹵碌祿綠菉錄鹿麓論壟弄朧瀧瓏籠聾儡瀨牢磊賂賚賴雷了僚寮廖料燎療瞭聊蓼"],["d7a1","遼鬧龍壘婁屢樓淚漏瘻累縷蔞褸鏤陋劉旒柳榴流溜瀏琉瑠留瘤硫謬類六戮陸侖倫崙淪綸輪律慄栗率隆勒肋凜凌楞稜綾菱陵俚利厘吏唎履悧李梨浬犁狸理璃異痢籬罹羸莉裏裡里釐離鯉吝潾燐璘藺躪隣鱗麟林淋琳臨霖砬"],["d8a1","立笠粒摩瑪痲碼磨馬魔麻寞幕漠膜莫邈万卍娩巒彎慢挽晩曼滿漫灣瞞萬蔓蠻輓饅鰻唜抹末沫茉襪靺亡妄忘忙望網罔芒茫莽輞邙埋妹媒寐昧枚梅每煤罵買賣邁魅脈貊陌驀麥孟氓猛盲盟萌冪覓免冕勉棉沔眄眠綿緬面麵滅"],["d9a1","蔑冥名命明暝椧溟皿瞑茗蓂螟酩銘鳴袂侮冒募姆帽慕摸摹暮某模母毛牟牡瑁眸矛耗芼茅謀謨貌木沐牧目睦穆鶩歿沒夢朦蒙卯墓妙廟描昴杳渺猫竗苗錨務巫憮懋戊拇撫无楙武毋無珷畝繆舞茂蕪誣貿霧鵡墨默們刎吻問文"],["daa1","汶紊紋聞蚊門雯勿沕物味媚尾嵋彌微未梶楣渼湄眉米美薇謎迷靡黴岷悶愍憫敏旻旼民泯玟珉緡閔密蜜謐剝博拍搏撲朴樸泊珀璞箔粕縛膊舶薄迫雹駁伴半反叛拌搬攀斑槃泮潘班畔瘢盤盼磐磻礬絆般蟠返頒飯勃拔撥渤潑"],["dba1","發跋醱鉢髮魃倣傍坊妨尨幇彷房放方旁昉枋榜滂磅紡肪膀舫芳蒡蚌訪謗邦防龐倍俳北培徘拜排杯湃焙盃背胚裴裵褙賠輩配陪伯佰帛柏栢白百魄幡樊煩燔番磻繁蕃藩飜伐筏罰閥凡帆梵氾汎泛犯範范法琺僻劈壁擘檗璧癖"],["dca1","碧蘗闢霹便卞弁變辨辯邊別瞥鱉鼈丙倂兵屛幷昞昺柄棅炳甁病秉竝輧餠騈保堡報寶普步洑湺潽珤甫菩補褓譜輔伏僕匐卜宓復服福腹茯蔔複覆輹輻馥鰒本乶俸奉封峯峰捧棒烽熢琫縫蓬蜂逢鋒鳳不付俯傅剖副否咐埠夫婦"],["dda1","孚孵富府復扶敷斧浮溥父符簿缶腐腑膚艀芙莩訃負賦賻赴趺部釜阜附駙鳧北分吩噴墳奔奮忿憤扮昐汾焚盆粉糞紛芬賁雰不佛弗彿拂崩朋棚硼繃鵬丕備匕匪卑妃婢庇悲憊扉批斐枇榧比毖毗毘沸泌琵痺砒碑秕秘粃緋翡肥"],["dea1","脾臂菲蜚裨誹譬費鄙非飛鼻嚬嬪彬斌檳殯浜濱瀕牝玭貧賓頻憑氷聘騁乍事些仕伺似使俟僿史司唆嗣四士奢娑寫寺射巳師徙思捨斜斯柶査梭死沙泗渣瀉獅砂社祀祠私篩紗絲肆舍莎蓑蛇裟詐詞謝賜赦辭邪飼駟麝削數朔索"],["dfa1","傘刪山散汕珊産疝算蒜酸霰乷撒殺煞薩三參杉森渗芟蔘衫揷澁鈒颯上傷像償商喪嘗孀尙峠常床庠廂想桑橡湘爽牀狀相祥箱翔裳觴詳象賞霜塞璽賽嗇塞穡索色牲生甥省笙墅壻嶼序庶徐恕抒捿敍暑曙書栖棲犀瑞筮絮緖署"],["e0a1","胥舒薯西誓逝鋤黍鼠夕奭席惜昔晳析汐淅潟石碩蓆釋錫仙僊先善嬋宣扇敾旋渲煽琁瑄璇璿癬禪線繕羨腺膳船蘚蟬詵跣選銑鐥饍鮮卨屑楔泄洩渫舌薛褻設說雪齧剡暹殲纖蟾贍閃陝攝涉燮葉城姓宬性惺成星晟猩珹盛省筬"],["e1a1","聖聲腥誠醒世勢歲洗稅笹細說貰召嘯塑宵小少巢所掃搔昭梳沼消溯瀟炤燒甦疏疎瘙笑篠簫素紹蔬蕭蘇訴逍遡邵銷韶騷俗屬束涑粟續謖贖速孫巽損蓀遜飡率宋悚松淞訟誦送頌刷殺灑碎鎖衰釗修受嗽囚垂壽嫂守岫峀帥愁"],["e2a1","戍手授搜收數樹殊水洙漱燧狩獸琇璲瘦睡秀穗竪粹綏綬繡羞脩茱蒐蓚藪袖誰讐輸遂邃酬銖銹隋隧隨雖需須首髓鬚叔塾夙孰宿淑潚熟琡璹肅菽巡徇循恂旬栒楯橓殉洵淳珣盾瞬筍純脣舜荀蓴蕣詢諄醇錞順馴戌術述鉥崇崧"],["e3a1","嵩瑟膝蝨濕拾習褶襲丞乘僧勝升承昇繩蠅陞侍匙嘶始媤尸屎屍市弑恃施是時枾柴猜矢示翅蒔蓍視試詩諡豕豺埴寔式息拭植殖湜熄篒蝕識軾食飾伸侁信呻娠宸愼新晨燼申神紳腎臣莘薪藎蜃訊身辛辰迅失室實悉審尋心沁"],["e4a1","沈深瀋甚芯諶什十拾雙氏亞俄兒啞娥峨我牙芽莪蛾衙訝阿雅餓鴉鵝堊岳嶽幄惡愕握樂渥鄂鍔顎鰐齷安岸按晏案眼雁鞍顔鮟斡謁軋閼唵岩巖庵暗癌菴闇壓押狎鴨仰央怏昻殃秧鴦厓哀埃崖愛曖涯碍艾隘靄厄扼掖液縊腋額"],["e5a1","櫻罌鶯鸚也倻冶夜惹揶椰爺耶若野弱掠略約若葯蒻藥躍亮佯兩凉壤孃恙揚攘敭暘梁楊樣洋瀁煬痒瘍禳穰糧羊良襄諒讓釀陽量養圄御於漁瘀禦語馭魚齬億憶抑檍臆偃堰彦焉言諺孼蘖俺儼嚴奄掩淹嶪業円予余勵呂女如廬"],["e6a1","旅歟汝濾璵礖礪與艅茹輿轝閭餘驪麗黎亦力域役易曆歷疫繹譯轢逆驛嚥堧姸娟宴年延憐戀捐挻撚椽沇沿涎涓淵演漣烟然煙煉燃燕璉硏硯秊筵緣練縯聯衍軟輦蓮連鉛鍊鳶列劣咽悅涅烈熱裂說閱厭廉念捻染殮炎焰琰艶苒"],["e7a1","簾閻髥鹽曄獵燁葉令囹塋寧嶺嶸影怜映暎楹榮永泳渶潁濚瀛瀯煐營獰玲瑛瑩瓔盈穎纓羚聆英詠迎鈴鍈零霙靈領乂倪例刈叡曳汭濊猊睿穢芮藝蘂禮裔詣譽豫醴銳隸霓預五伍俉傲午吾吳嗚塢墺奧娛寤悟惡懊敖旿晤梧汚澳"],["e8a1","烏熬獒筽蜈誤鰲鼇屋沃獄玉鈺溫瑥瘟穩縕蘊兀壅擁瓮甕癰翁邕雍饔渦瓦窩窪臥蛙蝸訛婉完宛梡椀浣玩琓琬碗緩翫脘腕莞豌阮頑曰往旺枉汪王倭娃歪矮外嵬巍猥畏了僚僥凹堯夭妖姚寥寮尿嶢拗搖撓擾料曜樂橈燎燿瑤療"],["e9a1","窈窯繇繞耀腰蓼蟯要謠遙遼邀饒慾欲浴縟褥辱俑傭冗勇埇墉容庸慂榕涌湧溶熔瑢用甬聳茸蓉踊鎔鏞龍于佑偶優又友右宇寓尤愚憂旴牛玗瑀盂祐禑禹紆羽芋藕虞迂遇郵釪隅雨雩勖彧旭昱栯煜稶郁頊云暈橒殞澐熉耘芸蕓"],["eaa1","運隕雲韻蔚鬱亐熊雄元原員圓園垣媛嫄寃怨愿援沅洹湲源爰猿瑗苑袁轅遠阮院願鴛月越鉞位偉僞危圍委威尉慰暐渭爲瑋緯胃萎葦蔿蝟衛褘謂違韋魏乳侑儒兪劉唯喩孺宥幼幽庾悠惟愈愉揄攸有杻柔柚柳楡楢油洧流游溜"],["eba1","濡猶猷琉瑜由留癒硫紐維臾萸裕誘諛諭踰蹂遊逾遺酉釉鍮類六堉戮毓肉育陸倫允奫尹崙淪潤玧胤贇輪鈗閏律慄栗率聿戎瀜絨融隆垠恩慇殷誾銀隱乙吟淫蔭陰音飮揖泣邑凝應膺鷹依倚儀宜意懿擬椅毅疑矣義艤薏蟻衣誼"],["eca1","議醫二以伊利吏夷姨履已弛彛怡易李梨泥爾珥理異痍痢移罹而耳肄苡荑裏裡貽貳邇里離飴餌匿溺瀷益翊翌翼謚人仁刃印吝咽因姻寅引忍湮燐璘絪茵藺蚓認隣靭靷鱗麟一佚佾壹日溢逸鎰馹任壬妊姙恁林淋稔臨荏賃入卄"],["eda1","立笠粒仍剩孕芿仔刺咨姉姿子字孜恣慈滋炙煮玆瓷疵磁紫者自茨蔗藉諮資雌作勺嚼斫昨灼炸爵綽芍酌雀鵲孱棧殘潺盞岑暫潛箴簪蠶雜丈仗匠場墻壯奬將帳庄張掌暲杖樟檣欌漿牆狀獐璋章粧腸臟臧莊葬蔣薔藏裝贓醬長"],["eea1","障再哉在宰才材栽梓渽滓災縡裁財載齋齎爭箏諍錚佇低儲咀姐底抵杵楮樗沮渚狙猪疽箸紵苧菹著藷詛貯躇這邸雎齟勣吊嫡寂摘敵滴狄炙的積笛籍績翟荻謫賊赤跡蹟迪迹適鏑佃佺傳全典前剪塡塼奠專展廛悛戰栓殿氈澱"],["efa1","煎琠田甸畑癲筌箋箭篆纏詮輾轉鈿銓錢鐫電顚顫餞切截折浙癤竊節絶占岾店漸点粘霑鮎點接摺蝶丁井亭停偵呈姃定幀庭廷征情挺政整旌晶晸柾楨檉正汀淀淨渟湞瀞炡玎珽町睛碇禎程穽精綎艇訂諪貞鄭酊釘鉦鋌錠霆靖"],["f0a1","靜頂鼎制劑啼堤帝弟悌提梯濟祭第臍薺製諸蹄醍除際霽題齊俎兆凋助嘲弔彫措操早晁曺曹朝條棗槽漕潮照燥爪璪眺祖祚租稠窕粗糟組繰肇藻蚤詔調趙躁造遭釣阻雕鳥族簇足鏃存尊卒拙猝倧宗從悰慫棕淙琮種終綜縱腫"],["f1a1","踪踵鍾鐘佐坐左座挫罪主住侏做姝胄呪周嗾奏宙州廚晝朱柱株注洲湊澍炷珠疇籌紂紬綢舟蛛註誅走躊輳週酎酒鑄駐竹粥俊儁准埈寯峻晙樽浚準濬焌畯竣蠢逡遵雋駿茁中仲衆重卽櫛楫汁葺增憎曾拯烝甑症繒蒸證贈之只"],["f2a1","咫地址志持指摯支旨智枝枳止池沚漬知砥祉祗紙肢脂至芝芷蜘誌識贄趾遲直稙稷織職唇嗔塵振搢晉晋桭榛殄津溱珍瑨璡畛疹盡眞瞋秦縉縝臻蔯袗診賑軫辰進鎭陣陳震侄叱姪嫉帙桎瓆疾秩窒膣蛭質跌迭斟朕什執潗緝輯"],["f3a1","鏶集徵懲澄且侘借叉嗟嵯差次此磋箚茶蹉車遮捉搾着窄錯鑿齪撰澯燦璨瓚竄簒纂粲纘讚贊鑽餐饌刹察擦札紮僭參塹慘慙懺斬站讒讖倉倡創唱娼廠彰愴敞昌昶暢槍滄漲猖瘡窓脹艙菖蒼債埰寀寨彩採砦綵菜蔡采釵冊柵策"],["f4a1","責凄妻悽處倜刺剔尺慽戚拓擲斥滌瘠脊蹠陟隻仟千喘天川擅泉淺玔穿舛薦賤踐遷釧闡阡韆凸哲喆徹撤澈綴輟轍鐵僉尖沾添甛瞻簽籤詹諂堞妾帖捷牒疊睫諜貼輒廳晴淸聽菁請靑鯖切剃替涕滯締諦逮遞體初剿哨憔抄招梢"],["f5a1","椒楚樵炒焦硝礁礎秒稍肖艸苕草蕉貂超酢醋醮促囑燭矗蜀觸寸忖村邨叢塚寵悤憁摠總聰蔥銃撮催崔最墜抽推椎楸樞湫皺秋芻萩諏趨追鄒酋醜錐錘鎚雛騶鰍丑畜祝竺筑築縮蓄蹙蹴軸逐春椿瑃出朮黜充忠沖蟲衝衷悴膵萃"],["f6a1","贅取吹嘴娶就炊翠聚脆臭趣醉驟鷲側仄厠惻測層侈値嗤峙幟恥梔治淄熾痔痴癡稚穉緇緻置致蚩輜雉馳齒則勅飭親七柒漆侵寢枕沈浸琛砧針鍼蟄秤稱快他咤唾墮妥惰打拖朶楕舵陀馱駝倬卓啄坼度托拓擢晫柝濁濯琢琸託"],["f7a1","鐸呑嘆坦彈憚歎灘炭綻誕奪脫探眈耽貪塔搭榻宕帑湯糖蕩兌台太怠態殆汰泰笞胎苔跆邰颱宅擇澤撑攄兎吐土討慟桶洞痛筒統通堆槌腿褪退頹偸套妬投透鬪慝特闖坡婆巴把播擺杷波派爬琶破罷芭跛頗判坂板版瓣販辦鈑"],["f8a1","阪八叭捌佩唄悖敗沛浿牌狽稗覇貝彭澎烹膨愎便偏扁片篇編翩遍鞭騙貶坪平枰萍評吠嬖幣廢弊斃肺蔽閉陛佈包匍匏咆哺圃布怖抛抱捕暴泡浦疱砲胞脯苞葡蒲袍褒逋鋪飽鮑幅暴曝瀑爆輻俵剽彪慓杓標漂瓢票表豹飇飄驃"],["f9a1","品稟楓諷豊風馮彼披疲皮被避陂匹弼必泌珌畢疋筆苾馝乏逼下何厦夏廈昰河瑕荷蝦賀遐霞鰕壑學虐謔鶴寒恨悍旱汗漢澣瀚罕翰閑閒限韓割轄函含咸啣喊檻涵緘艦銜陷鹹合哈盒蛤閤闔陜亢伉姮嫦巷恒抗杭桁沆港缸肛航"],["faa1","行降項亥偕咳垓奚孩害懈楷海瀣蟹解該諧邂駭骸劾核倖幸杏荇行享向嚮珦鄕響餉饗香噓墟虛許憲櫶獻軒歇險驗奕爀赫革俔峴弦懸晛泫炫玄玹現眩睍絃絢縣舷衒見賢鉉顯孑穴血頁嫌俠協夾峽挾浹狹脅脇莢鋏頰亨兄刑型"],["fba1","形泂滎瀅灐炯熒珩瑩荊螢衡逈邢鎣馨兮彗惠慧暳蕙蹊醯鞋乎互呼壕壺好岵弧戶扈昊晧毫浩淏湖滸澔濠濩灝狐琥瑚瓠皓祜糊縞胡芦葫蒿虎號蝴護豪鎬頀顥惑或酷婚昏混渾琿魂忽惚笏哄弘汞泓洪烘紅虹訌鴻化和嬅樺火畵"],["fca1","禍禾花華話譁貨靴廓擴攫確碻穫丸喚奐宦幻患換歡晥桓渙煥環紈還驩鰥活滑猾豁闊凰幌徨恍惶愰慌晃晄榥況湟滉潢煌璜皇篁簧荒蝗遑隍黃匯回廻徊恢悔懷晦會檜淮澮灰獪繪膾茴蛔誨賄劃獲宖橫鐄哮嚆孝效斅曉梟涍淆"],["fda1","爻肴酵驍侯候厚后吼喉嗅帿後朽煦珝逅勛勳塤壎焄熏燻薰訓暈薨喧暄煊萱卉喙毁彙徽揮暉煇諱輝麾休携烋畦虧恤譎鷸兇凶匈洶胸黑昕欣炘痕吃屹紇訖欠欽歆吸恰洽翕興僖凞喜噫囍姬嬉希憙憘戱晞曦熙熹熺犧禧稀羲詰"]]');

/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/iconv-lite/encodings/tables/cp950.json":
/*!*****************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/iconv-lite/encodings/tables/cp950.json ***!
  \*****************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('[["0","\\u0000",127],["a140","　，、。．‧；：？！︰…‥﹐﹑﹒·﹔﹕﹖﹗｜–︱—︳╴︴﹏（）︵︶｛｝︷︸〔〕︹︺【】︻︼《》︽︾〈〉︿﹀「」﹁﹂『』﹃﹄﹙﹚"],["a1a1","﹛﹜﹝﹞‘’“”〝〞‵′＃＆＊※§〃○●△▲◎☆★◇◆□■▽▼㊣℅¯￣＿ˍ﹉﹊﹍﹎﹋﹌﹟﹠﹡＋－×÷±√＜＞＝≦≧≠∞≒≡﹢",4,"～∩∪⊥∠∟⊿㏒㏑∫∮∵∴♀♂⊕⊙↑↓←→↖↗↙↘∥∣／"],["a240","＼∕﹨＄￥〒￠￡％＠℃℉﹩﹪﹫㏕㎜㎝㎞㏎㎡㎎㎏㏄°兙兛兞兝兡兣嗧瓩糎▁",7,"▏▎▍▌▋▊▉┼┴┬┤├▔─│▕┌┐└┘╭"],["a2a1","╮╰╯═╞╪╡◢◣◥◤╱╲╳０",9,"Ⅰ",9,"〡",8,"十卄卅Ａ",25,"ａ",21],["a340","ｗｘｙｚΑ",16,"Σ",6,"α",16,"σ",6,"ㄅ",10],["a3a1","ㄐ",25,"˙ˉˊˇˋ"],["a3e1","€"],["a440","一乙丁七乃九了二人儿入八几刀刁力匕十卜又三下丈上丫丸凡久么也乞于亡兀刃勺千叉口土士夕大女子孑孓寸小尢尸山川工己已巳巾干廾弋弓才"],["a4a1","丑丐不中丰丹之尹予云井互五亢仁什仃仆仇仍今介仄元允內六兮公冗凶分切刈勻勾勿化匹午升卅卞厄友及反壬天夫太夭孔少尤尺屯巴幻廿弔引心戈戶手扎支文斗斤方日曰月木欠止歹毋比毛氏水火爪父爻片牙牛犬王丙"],["a540","世丕且丘主乍乏乎以付仔仕他仗代令仙仞充兄冉冊冬凹出凸刊加功包匆北匝仟半卉卡占卯卮去可古右召叮叩叨叼司叵叫另只史叱台句叭叻四囚外"],["a5a1","央失奴奶孕它尼巨巧左市布平幼弁弘弗必戊打扔扒扑斥旦朮本未末札正母民氐永汁汀氾犯玄玉瓜瓦甘生用甩田由甲申疋白皮皿目矛矢石示禾穴立丞丟乒乓乩亙交亦亥仿伉伙伊伕伍伐休伏仲件任仰仳份企伋光兇兆先全"],["a640","共再冰列刑划刎刖劣匈匡匠印危吉吏同吊吐吁吋各向名合吃后吆吒因回囝圳地在圭圬圯圩夙多夷夸妄奸妃好她如妁字存宇守宅安寺尖屹州帆并年"],["a6a1","式弛忙忖戎戌戍成扣扛托收早旨旬旭曲曳有朽朴朱朵次此死氖汝汗汙江池汐汕污汛汍汎灰牟牝百竹米糸缶羊羽老考而耒耳聿肉肋肌臣自至臼舌舛舟艮色艾虫血行衣西阡串亨位住佇佗佞伴佛何估佐佑伽伺伸佃佔似但佣"],["a740","作你伯低伶余佝佈佚兌克免兵冶冷別判利刪刨劫助努劬匣即卵吝吭吞吾否呎吧呆呃吳呈呂君吩告吹吻吸吮吵吶吠吼呀吱含吟听囪困囤囫坊坑址坍"],["a7a1","均坎圾坐坏圻壯夾妝妒妨妞妣妙妖妍妤妓妊妥孝孜孚孛完宋宏尬局屁尿尾岐岑岔岌巫希序庇床廷弄弟彤形彷役忘忌志忍忱快忸忪戒我抄抗抖技扶抉扭把扼找批扳抒扯折扮投抓抑抆改攻攸旱更束李杏材村杜杖杞杉杆杠"],["a840","杓杗步每求汞沙沁沈沉沅沛汪決沐汰沌汨沖沒汽沃汲汾汴沆汶沍沔沘沂灶灼災灸牢牡牠狄狂玖甬甫男甸皂盯矣私秀禿究系罕肖肓肝肘肛肚育良芒"],["a8a1","芋芍見角言谷豆豕貝赤走足身車辛辰迂迆迅迄巡邑邢邪邦那酉釆里防阮阱阪阬並乖乳事些亞享京佯依侍佳使佬供例來侃佰併侈佩佻侖佾侏侑佺兔兒兕兩具其典冽函刻券刷刺到刮制剁劾劻卒協卓卑卦卷卸卹取叔受味呵"],["a940","咖呸咕咀呻呷咄咒咆呼咐呱呶和咚呢周咋命咎固垃坷坪坩坡坦坤坼夜奉奇奈奄奔妾妻委妹妮姑姆姐姍始姓姊妯妳姒姅孟孤季宗定官宜宙宛尚屈居"],["a9a1","屆岷岡岸岩岫岱岳帘帚帖帕帛帑幸庚店府底庖延弦弧弩往征彿彼忝忠忽念忿怏怔怯怵怖怪怕怡性怩怫怛或戕房戾所承拉拌拄抿拂抹拒招披拓拔拋拈抨抽押拐拙拇拍抵拚抱拘拖拗拆抬拎放斧於旺昔易昌昆昂明昀昏昕昊"],["aa40","昇服朋杭枋枕東果杳杷枇枝林杯杰板枉松析杵枚枓杼杪杲欣武歧歿氓氛泣注泳沱泌泥河沽沾沼波沫法泓沸泄油況沮泗泅泱沿治泡泛泊沬泯泜泖泠"],["aaa1","炕炎炒炊炙爬爭爸版牧物狀狎狙狗狐玩玨玟玫玥甽疝疙疚的盂盲直知矽社祀祁秉秈空穹竺糾罔羌羋者肺肥肢肱股肫肩肴肪肯臥臾舍芳芝芙芭芽芟芹花芬芥芯芸芣芰芾芷虎虱初表軋迎返近邵邸邱邶采金長門阜陀阿阻附"],["ab40","陂隹雨青非亟亭亮信侵侯便俠俑俏保促侶俘俟俊俗侮俐俄係俚俎俞侷兗冒冑冠剎剃削前剌剋則勇勉勃勁匍南卻厚叛咬哀咨哎哉咸咦咳哇哂咽咪品"],["aba1","哄哈咯咫咱咻咩咧咿囿垂型垠垣垢城垮垓奕契奏奎奐姜姘姿姣姨娃姥姪姚姦威姻孩宣宦室客宥封屎屏屍屋峙峒巷帝帥帟幽庠度建弈弭彥很待徊律徇後徉怒思怠急怎怨恍恰恨恢恆恃恬恫恪恤扁拜挖按拼拭持拮拽指拱拷"],["ac40","拯括拾拴挑挂政故斫施既春昭映昧是星昨昱昤曷柿染柱柔某柬架枯柵柩柯柄柑枴柚查枸柏柞柳枰柙柢柝柒歪殃殆段毒毗氟泉洋洲洪流津洌洱洞洗"],["aca1","活洽派洶洛泵洹洧洸洩洮洵洎洫炫為炳炬炯炭炸炮炤爰牲牯牴狩狠狡玷珊玻玲珍珀玳甚甭畏界畎畋疫疤疥疢疣癸皆皇皈盈盆盃盅省盹相眉看盾盼眇矜砂研砌砍祆祉祈祇禹禺科秒秋穿突竿竽籽紂紅紀紉紇約紆缸美羿耄"],["ad40","耐耍耑耶胖胥胚胃胄背胡胛胎胞胤胝致舢苧范茅苣苛苦茄若茂茉苒苗英茁苜苔苑苞苓苟苯茆虐虹虻虺衍衫要觔計訂訃貞負赴赳趴軍軌述迦迢迪迥"],["ada1","迭迫迤迨郊郎郁郃酋酊重閂限陋陌降面革韋韭音頁風飛食首香乘亳倌倍倣俯倦倥俸倩倖倆值借倚倒們俺倀倔倨俱倡個候倘俳修倭倪俾倫倉兼冤冥冢凍凌准凋剖剜剔剛剝匪卿原厝叟哨唐唁唷哼哥哲唆哺唔哩哭員唉哮哪"],["ae40","哦唧唇哽唏圃圄埂埔埋埃堉夏套奘奚娑娘娜娟娛娓姬娠娣娩娥娌娉孫屘宰害家宴宮宵容宸射屑展屐峭峽峻峪峨峰島崁峴差席師庫庭座弱徒徑徐恙"],["aea1","恣恥恐恕恭恩息悄悟悚悍悔悌悅悖扇拳挈拿捎挾振捕捂捆捏捉挺捐挽挪挫挨捍捌效敉料旁旅時晉晏晃晒晌晅晁書朔朕朗校核案框桓根桂桔栩梳栗桌桑栽柴桐桀格桃株桅栓栘桁殊殉殷氣氧氨氦氤泰浪涕消涇浦浸海浙涓"],["af40","浬涉浮浚浴浩涌涊浹涅浥涔烊烘烤烙烈烏爹特狼狹狽狸狷玆班琉珮珠珪珞畔畝畜畚留疾病症疲疳疽疼疹痂疸皋皰益盍盎眩真眠眨矩砰砧砸砝破砷"],["afa1","砥砭砠砟砲祕祐祠祟祖神祝祗祚秤秣秧租秦秩秘窄窈站笆笑粉紡紗紋紊素索純紐紕級紜納紙紛缺罟羔翅翁耆耘耕耙耗耽耿胱脂胰脅胭胴脆胸胳脈能脊胼胯臭臬舀舐航舫舨般芻茫荒荔荊茸荐草茵茴荏茲茹茶茗荀茱茨荃"],["b040","虔蚊蚪蚓蚤蚩蚌蚣蚜衰衷袁袂衽衹記訐討訌訕訊託訓訖訏訑豈豺豹財貢起躬軒軔軏辱送逆迷退迺迴逃追逅迸邕郡郝郢酒配酌釘針釗釜釙閃院陣陡"],["b0a1","陛陝除陘陞隻飢馬骨高鬥鬲鬼乾偺偽停假偃偌做偉健偶偎偕偵側偷偏倏偯偭兜冕凰剪副勒務勘動匐匏匙匿區匾參曼商啪啦啄啞啡啃啊唱啖問啕唯啤唸售啜唬啣唳啁啗圈國圉域堅堊堆埠埤基堂堵執培夠奢娶婁婉婦婪婀"],["b140","娼婢婚婆婊孰寇寅寄寂宿密尉專將屠屜屝崇崆崎崛崖崢崑崩崔崙崤崧崗巢常帶帳帷康庸庶庵庾張強彗彬彩彫得徙從徘御徠徜恿患悉悠您惋悴惦悽"],["b1a1","情悻悵惜悼惘惕惆惟悸惚惇戚戛扈掠控捲掖探接捷捧掘措捱掩掉掃掛捫推掄授掙採掬排掏掀捻捩捨捺敝敖救教敗啟敏敘敕敔斜斛斬族旋旌旎晝晚晤晨晦晞曹勗望梁梯梢梓梵桿桶梱梧梗械梃棄梭梆梅梔條梨梟梡梂欲殺"],["b240","毫毬氫涎涼淳淙液淡淌淤添淺清淇淋涯淑涮淞淹涸混淵淅淒渚涵淚淫淘淪深淮淨淆淄涪淬涿淦烹焉焊烽烯爽牽犁猜猛猖猓猙率琅琊球理現琍瓠瓶"],["b2a1","瓷甜產略畦畢異疏痔痕疵痊痍皎盔盒盛眷眾眼眶眸眺硫硃硎祥票祭移窒窕笠笨笛第符笙笞笮粒粗粕絆絃統紮紹紼絀細紳組累終紲紱缽羞羚翌翎習耜聊聆脯脖脣脫脩脰脤舂舵舷舶船莎莞莘荸莢莖莽莫莒莊莓莉莠荷荻荼"],["b340","莆莧處彪蛇蛀蚶蛄蚵蛆蛋蚱蚯蛉術袞袈被袒袖袍袋覓規訪訝訣訥許設訟訛訢豉豚販責貫貨貪貧赧赦趾趺軛軟這逍通逗連速逝逐逕逞造透逢逖逛途"],["b3a1","部郭都酗野釵釦釣釧釭釩閉陪陵陳陸陰陴陶陷陬雀雪雩章竟頂頃魚鳥鹵鹿麥麻傢傍傅備傑傀傖傘傚最凱割剴創剩勞勝勛博厥啻喀喧啼喊喝喘喂喜喪喔喇喋喃喳單喟唾喲喚喻喬喱啾喉喫喙圍堯堪場堤堰報堡堝堠壹壺奠"],["b440","婷媚婿媒媛媧孳孱寒富寓寐尊尋就嵌嵐崴嵇巽幅帽幀幃幾廊廁廂廄弼彭復循徨惑惡悲悶惠愜愣惺愕惰惻惴慨惱愎惶愉愀愒戟扉掣掌描揀揩揉揆揍"],["b4a1","插揣提握揖揭揮捶援揪換摒揚揹敞敦敢散斑斐斯普晰晴晶景暑智晾晷曾替期朝棺棕棠棘棗椅棟棵森棧棹棒棲棣棋棍植椒椎棉棚楮棻款欺欽殘殖殼毯氮氯氬港游湔渡渲湧湊渠渥渣減湛湘渤湖湮渭渦湯渴湍渺測湃渝渾滋"],["b540","溉渙湎湣湄湲湩湟焙焚焦焰無然煮焜牌犄犀猶猥猴猩琺琪琳琢琥琵琶琴琯琛琦琨甥甦畫番痢痛痣痙痘痞痠登發皖皓皴盜睏短硝硬硯稍稈程稅稀窘"],["b5a1","窗窖童竣等策筆筐筒答筍筋筏筑粟粥絞結絨絕紫絮絲絡給絢絰絳善翔翕耋聒肅腕腔腋腑腎脹腆脾腌腓腴舒舜菩萃菸萍菠菅萋菁華菱菴著萊菰萌菌菽菲菊萸萎萄菜萇菔菟虛蛟蛙蛭蛔蛛蛤蛐蛞街裁裂袱覃視註詠評詞証詁"],["b640","詔詛詐詆訴診訶詖象貂貯貼貳貽賁費賀貴買貶貿貸越超趁跎距跋跚跑跌跛跆軻軸軼辜逮逵週逸進逶鄂郵鄉郾酣酥量鈔鈕鈣鈉鈞鈍鈐鈇鈑閔閏開閑"],["b6a1","間閒閎隊階隋陽隅隆隍陲隄雁雅雄集雇雯雲韌項順須飧飪飯飩飲飭馮馭黃黍黑亂傭債傲傳僅傾催傷傻傯僇剿剷剽募勦勤勢勣匯嗟嗨嗓嗦嗎嗜嗇嗑嗣嗤嗯嗚嗡嗅嗆嗥嗉園圓塞塑塘塗塚塔填塌塭塊塢塒塋奧嫁嫉嫌媾媽媼"],["b740","媳嫂媲嵩嵯幌幹廉廈弒彙徬微愚意慈感想愛惹愁愈慎慌慄慍愾愴愧愍愆愷戡戢搓搾搞搪搭搽搬搏搜搔損搶搖搗搆敬斟新暗暉暇暈暖暄暘暍會榔業"],["b7a1","楚楷楠楔極椰概楊楨楫楞楓楹榆楝楣楛歇歲毀殿毓毽溢溯滓溶滂源溝滇滅溥溘溼溺溫滑準溜滄滔溪溧溴煎煙煩煤煉照煜煬煦煌煥煞煆煨煖爺牒猷獅猿猾瑯瑚瑕瑟瑞瑁琿瑙瑛瑜當畸瘀痰瘁痲痱痺痿痴痳盞盟睛睫睦睞督"],["b840","睹睪睬睜睥睨睢矮碎碰碗碘碌碉硼碑碓硿祺祿禁萬禽稜稚稠稔稟稞窟窠筷節筠筮筧粱粳粵經絹綑綁綏絛置罩罪署義羨群聖聘肆肄腱腰腸腥腮腳腫"],["b8a1","腹腺腦舅艇蒂葷落萱葵葦葫葉葬葛萼萵葡董葩葭葆虞虜號蛹蜓蜈蜇蜀蛾蛻蜂蜃蜆蜊衙裟裔裙補裘裝裡裊裕裒覜解詫該詳試詩詰誇詼詣誠話誅詭詢詮詬詹詻訾詨豢貊貉賊資賈賄貲賃賂賅跡跟跨路跳跺跪跤跦躲較載軾輊"],["b940","辟農運遊道遂達逼違遐遇遏過遍遑逾遁鄒鄗酬酪酩釉鈷鉗鈸鈽鉀鈾鉛鉋鉤鉑鈴鉉鉍鉅鈹鈿鉚閘隘隔隕雍雋雉雊雷電雹零靖靴靶預頑頓頊頒頌飼飴"],["b9a1","飽飾馳馱馴髡鳩麂鼎鼓鼠僧僮僥僖僭僚僕像僑僱僎僩兢凳劃劂匱厭嗾嘀嘛嘗嗽嘔嘆嘉嘍嘎嗷嘖嘟嘈嘐嗶團圖塵塾境墓墊塹墅塽壽夥夢夤奪奩嫡嫦嫩嫗嫖嫘嫣孵寞寧寡寥實寨寢寤察對屢嶄嶇幛幣幕幗幔廓廖弊彆彰徹慇"],["ba40","愿態慷慢慣慟慚慘慵截撇摘摔撤摸摟摺摑摧搴摭摻敲斡旗旖暢暨暝榜榨榕槁榮槓構榛榷榻榫榴槐槍榭槌榦槃榣歉歌氳漳演滾漓滴漩漾漠漬漏漂漢"],["baa1","滿滯漆漱漸漲漣漕漫漯澈漪滬漁滲滌滷熔熙煽熊熄熒爾犒犖獄獐瑤瑣瑪瑰瑭甄疑瘧瘍瘋瘉瘓盡監瞄睽睿睡磁碟碧碳碩碣禎福禍種稱窪窩竭端管箕箋筵算箝箔箏箸箇箄粹粽精綻綰綜綽綾綠緊綴網綱綺綢綿綵綸維緒緇綬"],["bb40","罰翠翡翟聞聚肇腐膀膏膈膊腿膂臧臺與舔舞艋蓉蒿蓆蓄蒙蒞蒲蒜蓋蒸蓀蓓蒐蒼蓑蓊蜿蜜蜻蜢蜥蜴蜘蝕蜷蜩裳褂裴裹裸製裨褚裯誦誌語誣認誡誓誤"],["bba1","說誥誨誘誑誚誧豪貍貌賓賑賒赫趙趕跼輔輒輕輓辣遠遘遜遣遙遞遢遝遛鄙鄘鄞酵酸酷酴鉸銀銅銘銖鉻銓銜銨鉼銑閡閨閩閣閥閤隙障際雌雒需靼鞅韶頗領颯颱餃餅餌餉駁骯骰髦魁魂鳴鳶鳳麼鼻齊億儀僻僵價儂儈儉儅凜"],["bc40","劇劈劉劍劊勰厲嘮嘻嘹嘲嘿嘴嘩噓噎噗噴嘶嘯嘰墀墟增墳墜墮墩墦奭嬉嫻嬋嫵嬌嬈寮寬審寫層履嶝嶔幢幟幡廢廚廟廝廣廠彈影德徵慶慧慮慝慕憂"],["bca1","慼慰慫慾憧憐憫憎憬憚憤憔憮戮摩摯摹撞撲撈撐撰撥撓撕撩撒撮播撫撚撬撙撢撳敵敷數暮暫暴暱樣樟槨樁樞標槽模樓樊槳樂樅槭樑歐歎殤毅毆漿潼澄潑潦潔澆潭潛潸潮澎潺潰潤澗潘滕潯潠潟熟熬熱熨牖犛獎獗瑩璋璃"],["bd40","瑾璀畿瘠瘩瘟瘤瘦瘡瘢皚皺盤瞎瞇瞌瞑瞋磋磅確磊碾磕碼磐稿稼穀稽稷稻窯窮箭箱範箴篆篇篁箠篌糊締練緯緻緘緬緝編緣線緞緩綞緙緲緹罵罷羯"],["bda1","翩耦膛膜膝膠膚膘蔗蔽蔚蓮蔬蔭蔓蔑蔣蔡蔔蓬蔥蓿蔆螂蝴蝶蝠蝦蝸蝨蝙蝗蝌蝓衛衝褐複褒褓褕褊誼諒談諄誕請諸課諉諂調誰論諍誶誹諛豌豎豬賠賞賦賤賬賭賢賣賜質賡赭趟趣踫踐踝踢踏踩踟踡踞躺輝輛輟輩輦輪輜輞"],["be40","輥適遮遨遭遷鄰鄭鄧鄱醇醉醋醃鋅銻銷鋪銬鋤鋁銳銼鋒鋇鋰銲閭閱霄霆震霉靠鞍鞋鞏頡頫頜颳養餓餒餘駝駐駟駛駑駕駒駙骷髮髯鬧魅魄魷魯鴆鴉"],["bea1","鴃麩麾黎墨齒儒儘儔儐儕冀冪凝劑劓勳噙噫噹噩噤噸噪器噥噱噯噬噢噶壁墾壇壅奮嬝嬴學寰導彊憲憑憩憊懍憶憾懊懈戰擅擁擋撻撼據擄擇擂操撿擒擔撾整曆曉暹曄曇暸樽樸樺橙橫橘樹橄橢橡橋橇樵機橈歙歷氅濂澱澡"],["bf40","濃澤濁澧澳激澹澶澦澠澴熾燉燐燒燈燕熹燎燙燜燃燄獨璜璣璘璟璞瓢甌甍瘴瘸瘺盧盥瞠瞞瞟瞥磨磚磬磧禦積穎穆穌穋窺篙簑築篤篛篡篩篦糕糖縊"],["bfa1","縑縈縛縣縞縝縉縐罹羲翰翱翮耨膳膩膨臻興艘艙蕊蕙蕈蕨蕩蕃蕉蕭蕪蕞螃螟螞螢融衡褪褲褥褫褡親覦諦諺諫諱謀諜諧諮諾謁謂諷諭諳諶諼豫豭貓賴蹄踱踴蹂踹踵輻輯輸輳辨辦遵遴選遲遼遺鄴醒錠錶鋸錳錯錢鋼錫錄錚"],["c040","錐錦錡錕錮錙閻隧隨險雕霎霑霖霍霓霏靛靜靦鞘頰頸頻頷頭頹頤餐館餞餛餡餚駭駢駱骸骼髻髭鬨鮑鴕鴣鴦鴨鴒鴛默黔龍龜優償儡儲勵嚎嚀嚐嚅嚇"],["c0a1","嚏壕壓壑壎嬰嬪嬤孺尷屨嶼嶺嶽嶸幫彌徽應懂懇懦懋戲戴擎擊擘擠擰擦擬擱擢擭斂斃曙曖檀檔檄檢檜櫛檣橾檗檐檠歜殮毚氈濘濱濟濠濛濤濫濯澀濬濡濩濕濮濰燧營燮燦燥燭燬燴燠爵牆獰獲璩環璦璨癆療癌盪瞳瞪瞰瞬"],["c140","瞧瞭矯磷磺磴磯礁禧禪穗窿簇簍篾篷簌篠糠糜糞糢糟糙糝縮績繆縷縲繃縫總縱繅繁縴縹繈縵縿縯罄翳翼聱聲聰聯聳臆臃膺臂臀膿膽臉膾臨舉艱薪"],["c1a1","薄蕾薜薑薔薯薛薇薨薊虧蟀蟑螳蟒蟆螫螻螺蟈蟋褻褶襄褸褽覬謎謗謙講謊謠謝謄謐豁谿豳賺賽購賸賻趨蹉蹋蹈蹊轄輾轂轅輿避遽還邁邂邀鄹醣醞醜鍍鎂錨鍵鍊鍥鍋錘鍾鍬鍛鍰鍚鍔闊闋闌闈闆隱隸雖霜霞鞠韓顆颶餵騁"],["c240","駿鮮鮫鮪鮭鴻鴿麋黏點黜黝黛鼾齋叢嚕嚮壙壘嬸彝懣戳擴擲擾攆擺擻擷斷曜朦檳檬櫃檻檸櫂檮檯歟歸殯瀉瀋濾瀆濺瀑瀏燻燼燾燸獷獵璧璿甕癖癘"],["c2a1","癒瞽瞿瞻瞼礎禮穡穢穠竄竅簫簧簪簞簣簡糧織繕繞繚繡繒繙罈翹翻職聶臍臏舊藏薩藍藐藉薰薺薹薦蟯蟬蟲蟠覆覲觴謨謹謬謫豐贅蹙蹣蹦蹤蹟蹕軀轉轍邇邃邈醫醬釐鎔鎊鎖鎢鎳鎮鎬鎰鎘鎚鎗闔闖闐闕離雜雙雛雞霤鞣鞦"],["c340","鞭韹額顏題顎顓颺餾餿餽餮馥騎髁鬃鬆魏魎魍鯊鯉鯽鯈鯀鵑鵝鵠黠鼕鼬儳嚥壞壟壢寵龐廬懲懷懶懵攀攏曠曝櫥櫝櫚櫓瀛瀟瀨瀚瀝瀕瀘爆爍牘犢獸"],["c3a1","獺璽瓊瓣疇疆癟癡矇礙禱穫穩簾簿簸簽簷籀繫繭繹繩繪羅繳羶羹羸臘藩藝藪藕藤藥藷蟻蠅蠍蟹蟾襠襟襖襞譁譜識證譚譎譏譆譙贈贊蹼蹲躇蹶蹬蹺蹴轔轎辭邊邋醱醮鏡鏑鏟鏃鏈鏜鏝鏖鏢鏍鏘鏤鏗鏨關隴難霪霧靡韜韻類"],["c440","願顛颼饅饉騖騙鬍鯨鯧鯖鯛鶉鵡鵲鵪鵬麒麗麓麴勸嚨嚷嚶嚴嚼壤孀孃孽寶巉懸懺攘攔攙曦朧櫬瀾瀰瀲爐獻瓏癢癥礦礪礬礫竇競籌籃籍糯糰辮繽繼"],["c4a1","纂罌耀臚艦藻藹蘑藺蘆蘋蘇蘊蠔蠕襤覺觸議譬警譯譟譫贏贍躉躁躅躂醴釋鐘鐃鏽闡霰飄饒饑馨騫騰騷騵鰓鰍鹹麵黨鼯齟齣齡儷儸囁囀囂夔屬巍懼懾攝攜斕曩櫻欄櫺殲灌爛犧瓖瓔癩矓籐纏續羼蘗蘭蘚蠣蠢蠡蠟襪襬覽譴"],["c540","護譽贓躊躍躋轟辯醺鐮鐳鐵鐺鐸鐲鐫闢霸霹露響顧顥饗驅驃驀騾髏魔魑鰭鰥鶯鶴鷂鶸麝黯鼙齜齦齧儼儻囈囊囉孿巔巒彎懿攤權歡灑灘玀瓤疊癮癬"],["c5a1","禳籠籟聾聽臟襲襯觼讀贖贗躑躓轡酈鑄鑑鑒霽霾韃韁顫饕驕驍髒鬚鱉鰱鰾鰻鷓鷗鼴齬齪龔囌巖戀攣攫攪曬欐瓚竊籤籣籥纓纖纔臢蘸蘿蠱變邐邏鑣鑠鑤靨顯饜驚驛驗髓體髑鱔鱗鱖鷥麟黴囑壩攬灞癱癲矗罐羈蠶蠹衢讓讒"],["c640","讖艷贛釀鑪靂靈靄韆顰驟鬢魘鱟鷹鷺鹼鹽鼇齷齲廳欖灣籬籮蠻觀躡釁鑲鑰顱饞髖鬣黌灤矚讚鑷韉驢驥纜讜躪釅鑽鑾鑼鱷鱸黷豔鑿鸚爨驪鬱鸛鸞籲"],["c940","乂乜凵匚厂万丌乇亍囗兀屮彳丏冇与丮亓仂仉仈冘勼卬厹圠夃夬尐巿旡殳毌气爿丱丼仨仜仩仡仝仚刌匜卌圢圣夗夯宁宄尒尻屴屳帄庀庂忉戉扐氕"],["c9a1","氶汃氿氻犮犰玊禸肊阞伎优伬仵伔仱伀价伈伝伂伅伢伓伄仴伒冱刓刉刐劦匢匟卍厊吇囡囟圮圪圴夼妀奼妅奻奾奷奿孖尕尥屼屺屻屾巟幵庄异弚彴忕忔忏扜扞扤扡扦扢扙扠扚扥旯旮朾朹朸朻机朿朼朳氘汆汒汜汏汊汔汋"],["ca40","汌灱牞犴犵玎甪癿穵网艸艼芀艽艿虍襾邙邗邘邛邔阢阤阠阣佖伻佢佉体佤伾佧佒佟佁佘伭伳伿佡冏冹刜刞刡劭劮匉卣卲厎厏吰吷吪呔呅吙吜吥吘"],["caa1","吽呏呁吨吤呇囮囧囥坁坅坌坉坋坒夆奀妦妘妠妗妎妢妐妏妧妡宎宒尨尪岍岏岈岋岉岒岊岆岓岕巠帊帎庋庉庌庈庍弅弝彸彶忒忑忐忭忨忮忳忡忤忣忺忯忷忻怀忴戺抃抌抎抏抔抇扱扻扺扰抁抈扷扽扲扴攷旰旴旳旲旵杅杇"],["cb40","杙杕杌杈杝杍杚杋毐氙氚汸汧汫沄沋沏汱汯汩沚汭沇沕沜汦汳汥汻沎灴灺牣犿犽狃狆狁犺狅玕玗玓玔玒町甹疔疕皁礽耴肕肙肐肒肜芐芏芅芎芑芓"],["cba1","芊芃芄豸迉辿邟邡邥邞邧邠阰阨阯阭丳侘佼侅佽侀侇佶佴侉侄佷佌侗佪侚佹侁佸侐侜侔侞侒侂侕佫佮冞冼冾刵刲刳剆刱劼匊匋匼厒厔咇呿咁咑咂咈呫呺呾呥呬呴呦咍呯呡呠咘呣呧呤囷囹坯坲坭坫坱坰坶垀坵坻坳坴坢"],["cc40","坨坽夌奅妵妺姏姎妲姌姁妶妼姃姖妱妽姀姈妴姇孢孥宓宕屄屇岮岤岠岵岯岨岬岟岣岭岢岪岧岝岥岶岰岦帗帔帙弨弢弣弤彔徂彾彽忞忥怭怦怙怲怋"],["cca1","怴怊怗怳怚怞怬怢怍怐怮怓怑怌怉怜戔戽抭抴拑抾抪抶拊抮抳抯抻抩抰抸攽斨斻昉旼昄昒昈旻昃昋昍昅旽昑昐曶朊枅杬枎枒杶杻枘枆构杴枍枌杺枟枑枙枃杽极杸杹枔欥殀歾毞氝沓泬泫泮泙沶泔沭泧沷泐泂沺泃泆泭泲"],["cd40","泒泝沴沊沝沀泞泀洰泍泇沰泹泏泩泑炔炘炅炓炆炄炑炖炂炚炃牪狖狋狘狉狜狒狔狚狌狑玤玡玭玦玢玠玬玝瓝瓨甿畀甾疌疘皯盳盱盰盵矸矼矹矻矺"],["cda1","矷祂礿秅穸穻竻籵糽耵肏肮肣肸肵肭舠芠苀芫芚芘芛芵芧芮芼芞芺芴芨芡芩苂芤苃芶芢虰虯虭虮豖迒迋迓迍迖迕迗邲邴邯邳邰阹阽阼阺陃俍俅俓侲俉俋俁俔俜俙侻侳俛俇俖侺俀侹俬剄剉勀勂匽卼厗厖厙厘咺咡咭咥哏"],["ce40","哃茍咷咮哖咶哅哆咠呰咼咢咾呲哞咰垵垞垟垤垌垗垝垛垔垘垏垙垥垚垕壴复奓姡姞姮娀姱姝姺姽姼姶姤姲姷姛姩姳姵姠姾姴姭宨屌峐峘峌峗峋峛"],["cea1","峞峚峉峇峊峖峓峔峏峈峆峎峟峸巹帡帢帣帠帤庰庤庢庛庣庥弇弮彖徆怷怹恔恲恞恅恓恇恉恛恌恀恂恟怤恄恘恦恮扂扃拏挍挋拵挎挃拫拹挏挌拸拶挀挓挔拺挕拻拰敁敃斪斿昶昡昲昵昜昦昢昳昫昺昝昴昹昮朏朐柁柲柈枺"],["cf40","柜枻柸柘柀枷柅柫柤柟枵柍枳柷柶柮柣柂枹柎柧柰枲柼柆柭柌枮柦柛柺柉柊柃柪柋欨殂殄殶毖毘毠氠氡洨洴洭洟洼洿洒洊泚洳洄洙洺洚洑洀洝浂"],["cfa1","洁洘洷洃洏浀洇洠洬洈洢洉洐炷炟炾炱炰炡炴炵炩牁牉牊牬牰牳牮狊狤狨狫狟狪狦狣玅珌珂珈珅玹玶玵玴珫玿珇玾珃珆玸珋瓬瓮甮畇畈疧疪癹盄眈眃眄眅眊盷盻盺矧矨砆砑砒砅砐砏砎砉砃砓祊祌祋祅祄秕种秏秖秎窀"],["d040","穾竑笀笁籺籸籹籿粀粁紃紈紁罘羑羍羾耇耎耏耔耷胘胇胠胑胈胂胐胅胣胙胜胊胕胉胏胗胦胍臿舡芔苙苾苹茇苨茀苕茺苫苖苴苬苡苲苵茌苻苶苰苪"],["d0a1","苤苠苺苳苭虷虴虼虳衁衎衧衪衩觓訄訇赲迣迡迮迠郱邽邿郕郅邾郇郋郈釔釓陔陏陑陓陊陎倞倅倇倓倢倰倛俵俴倳倷倬俶俷倗倜倠倧倵倯倱倎党冔冓凊凄凅凈凎剡剚剒剞剟剕剢勍匎厞唦哢唗唒哧哳哤唚哿唄唈哫唑唅哱"],["d140","唊哻哷哸哠唎唃唋圁圂埌堲埕埒垺埆垽垼垸垶垿埇埐垹埁夎奊娙娖娭娮娕娏娗娊娞娳孬宧宭宬尃屖屔峬峿峮峱峷崀峹帩帨庨庮庪庬弳弰彧恝恚恧"],["d1a1","恁悢悈悀悒悁悝悃悕悛悗悇悜悎戙扆拲挐捖挬捄捅挶捃揤挹捋捊挼挩捁挴捘捔捙挭捇挳捚捑挸捗捀捈敊敆旆旃旄旂晊晟晇晑朒朓栟栚桉栲栳栻桋桏栖栱栜栵栫栭栯桎桄栴栝栒栔栦栨栮桍栺栥栠欬欯欭欱欴歭肂殈毦毤"],["d240","毨毣毢毧氥浺浣浤浶洍浡涒浘浢浭浯涑涍淯浿涆浞浧浠涗浰浼浟涂涘洯浨涋浾涀涄洖涃浻浽浵涐烜烓烑烝烋缹烢烗烒烞烠烔烍烅烆烇烚烎烡牂牸"],["d2a1","牷牶猀狺狴狾狶狳狻猁珓珙珥珖玼珧珣珩珜珒珛珔珝珚珗珘珨瓞瓟瓴瓵甡畛畟疰痁疻痄痀疿疶疺皊盉眝眛眐眓眒眣眑眕眙眚眢眧砣砬砢砵砯砨砮砫砡砩砳砪砱祔祛祏祜祓祒祑秫秬秠秮秭秪秜秞秝窆窉窅窋窌窊窇竘笐"],["d340","笄笓笅笏笈笊笎笉笒粄粑粊粌粈粍粅紞紝紑紎紘紖紓紟紒紏紌罜罡罞罠罝罛羖羒翃翂翀耖耾耹胺胲胹胵脁胻脀舁舯舥茳茭荄茙荑茥荖茿荁茦茜茢"],["d3a1","荂荎茛茪茈茼荍茖茤茠茷茯茩荇荅荌荓茞茬荋茧荈虓虒蚢蚨蚖蚍蚑蚞蚇蚗蚆蚋蚚蚅蚥蚙蚡蚧蚕蚘蚎蚝蚐蚔衃衄衭衵衶衲袀衱衿衯袃衾衴衼訒豇豗豻貤貣赶赸趵趷趶軑軓迾迵适迿迻逄迼迶郖郠郙郚郣郟郥郘郛郗郜郤酐"],["d440","酎酏釕釢釚陜陟隼飣髟鬯乿偰偪偡偞偠偓偋偝偲偈偍偁偛偊偢倕偅偟偩偫偣偤偆偀偮偳偗偑凐剫剭剬剮勖勓匭厜啵啶唼啍啐唴唪啑啢唶唵唰啒啅"],["d4a1","唌唲啥啎唹啈唭唻啀啋圊圇埻堔埢埶埜埴堀埭埽堈埸堋埳埏堇埮埣埲埥埬埡堎埼堐埧堁堌埱埩埰堍堄奜婠婘婕婧婞娸娵婭婐婟婥婬婓婤婗婃婝婒婄婛婈媎娾婍娹婌婰婩婇婑婖婂婜孲孮寁寀屙崞崋崝崚崠崌崨崍崦崥崏"],["d540","崰崒崣崟崮帾帴庱庴庹庲庳弶弸徛徖徟悊悐悆悾悰悺惓惔惏惤惙惝惈悱惛悷惊悿惃惍惀挲捥掊掂捽掽掞掭掝掗掫掎捯掇掐据掯捵掜捭掮捼掤挻掟"],["d5a1","捸掅掁掑掍捰敓旍晥晡晛晙晜晢朘桹梇梐梜桭桮梮梫楖桯梣梬梩桵桴梲梏桷梒桼桫桲梪梀桱桾梛梖梋梠梉梤桸桻梑梌梊桽欶欳欷欸殑殏殍殎殌氪淀涫涴涳湴涬淩淢涷淶淔渀淈淠淟淖涾淥淜淝淛淴淊涽淭淰涺淕淂淏淉"],["d640","淐淲淓淽淗淍淣涻烺焍烷焗烴焌烰焄烳焐烼烿焆焓焀烸烶焋焂焎牾牻牼牿猝猗猇猑猘猊猈狿猏猞玈珶珸珵琄琁珽琇琀珺珼珿琌琋珴琈畤畣痎痒痏"],["d6a1","痋痌痑痐皏皉盓眹眯眭眱眲眴眳眽眥眻眵硈硒硉硍硊硌砦硅硐祤祧祩祪祣祫祡离秺秸秶秷窏窔窐笵筇笴笥笰笢笤笳笘笪笝笱笫笭笯笲笸笚笣粔粘粖粣紵紽紸紶紺絅紬紩絁絇紾紿絊紻紨罣羕羜羝羛翊翋翍翐翑翇翏翉耟"],["d740","耞耛聇聃聈脘脥脙脛脭脟脬脞脡脕脧脝脢舑舸舳舺舴舲艴莐莣莨莍荺荳莤荴莏莁莕莙荵莔莩荽莃莌莝莛莪莋荾莥莯莈莗莰荿莦莇莮荶莚虙虖蚿蚷"],["d7a1","蛂蛁蛅蚺蚰蛈蚹蚳蚸蛌蚴蚻蚼蛃蚽蚾衒袉袕袨袢袪袚袑袡袟袘袧袙袛袗袤袬袌袓袎覂觖觙觕訰訧訬訞谹谻豜豝豽貥赽赻赹趼跂趹趿跁軘軞軝軜軗軠軡逤逋逑逜逌逡郯郪郰郴郲郳郔郫郬郩酖酘酚酓酕釬釴釱釳釸釤釹釪"],["d840","釫釷釨釮镺閆閈陼陭陫陱陯隿靪頄飥馗傛傕傔傞傋傣傃傌傎傝偨傜傒傂傇兟凔匒匑厤厧喑喨喥喭啷噅喢喓喈喏喵喁喣喒喤啽喌喦啿喕喡喎圌堩堷"],["d8a1","堙堞堧堣堨埵塈堥堜堛堳堿堶堮堹堸堭堬堻奡媯媔媟婺媢媞婸媦婼媥媬媕媮娷媄媊媗媃媋媩婻婽媌媜媏媓媝寪寍寋寔寑寊寎尌尰崷嵃嵫嵁嵋崿崵嵑嵎嵕崳崺嵒崽崱嵙嵂崹嵉崸崼崲崶嵀嵅幄幁彘徦徥徫惉悹惌惢惎惄愔"],["d940","惲愊愖愅惵愓惸惼惾惁愃愘愝愐惿愄愋扊掔掱掰揎揥揨揯揃撝揳揊揠揶揕揲揵摡揟掾揝揜揄揘揓揂揇揌揋揈揰揗揙攲敧敪敤敜敨敥斌斝斞斮旐旒"],["d9a1","晼晬晻暀晱晹晪晲朁椌棓椄棜椪棬棪棱椏棖棷棫棤棶椓椐棳棡椇棌椈楰梴椑棯棆椔棸棐棽棼棨椋椊椗棎棈棝棞棦棴棑椆棔棩椕椥棇欹欻欿欼殔殗殙殕殽毰毲毳氰淼湆湇渟湉溈渼渽湅湢渫渿湁湝湳渜渳湋湀湑渻渃渮湞"],["da40","湨湜湡渱渨湠湱湫渹渢渰湓湥渧湸湤湷湕湹湒湦渵渶湚焠焞焯烻焮焱焣焥焢焲焟焨焺焛牋牚犈犉犆犅犋猒猋猰猢猱猳猧猲猭猦猣猵猌琮琬琰琫琖"],["daa1","琚琡琭琱琤琣琝琩琠琲瓻甯畯畬痧痚痡痦痝痟痤痗皕皒盚睆睇睄睍睅睊睎睋睌矞矬硠硤硥硜硭硱硪确硰硩硨硞硢祴祳祲祰稂稊稃稌稄窙竦竤筊笻筄筈筌筎筀筘筅粢粞粨粡絘絯絣絓絖絧絪絏絭絜絫絒絔絩絑絟絎缾缿罥"],["db40","罦羢羠羡翗聑聏聐胾胔腃腊腒腏腇脽腍脺臦臮臷臸臹舄舼舽舿艵茻菏菹萣菀菨萒菧菤菼菶萐菆菈菫菣莿萁菝菥菘菿菡菋菎菖菵菉萉萏菞萑萆菂菳"],["dba1","菕菺菇菑菪萓菃菬菮菄菻菗菢萛菛菾蛘蛢蛦蛓蛣蛚蛪蛝蛫蛜蛬蛩蛗蛨蛑衈衖衕袺裗袹袸裀袾袶袼袷袽袲褁裉覕覘覗觝觚觛詎詍訹詙詀詗詘詄詅詒詈詑詊詌詏豟貁貀貺貾貰貹貵趄趀趉跘跓跍跇跖跜跏跕跙跈跗跅軯軷軺"],["dc40","軹軦軮軥軵軧軨軶軫軱軬軴軩逭逴逯鄆鄬鄄郿郼鄈郹郻鄁鄀鄇鄅鄃酡酤酟酢酠鈁鈊鈥鈃鈚鈦鈏鈌鈀鈒釿釽鈆鈄鈧鈂鈜鈤鈙鈗鈅鈖镻閍閌閐隇陾隈"],["dca1","隉隃隀雂雈雃雱雰靬靰靮頇颩飫鳦黹亃亄亶傽傿僆傮僄僊傴僈僂傰僁傺傱僋僉傶傸凗剺剸剻剼嗃嗛嗌嗐嗋嗊嗝嗀嗔嗄嗩喿嗒喍嗏嗕嗢嗖嗈嗲嗍嗙嗂圔塓塨塤塏塍塉塯塕塎塝塙塥塛堽塣塱壼嫇嫄嫋媺媸媱媵媰媿嫈媻嫆"],["dd40","媷嫀嫊媴媶嫍媹媐寖寘寙尟尳嵱嵣嵊嵥嵲嵬嵞嵨嵧嵢巰幏幎幊幍幋廅廌廆廋廇彀徯徭惷慉慊愫慅愶愲愮慆愯慏愩慀戠酨戣戥戤揅揱揫搐搒搉搠搤"],["dda1","搳摃搟搕搘搹搷搢搣搌搦搰搨摁搵搯搊搚摀搥搧搋揧搛搮搡搎敯斒旓暆暌暕暐暋暊暙暔晸朠楦楟椸楎楢楱椿楅楪椹楂楗楙楺楈楉椵楬椳椽楥棰楸椴楩楀楯楄楶楘楁楴楌椻楋椷楜楏楑椲楒椯楻椼歆歅歃歂歈歁殛嗀毻毼"],["de40","毹毷毸溛滖滈溏滀溟溓溔溠溱溹滆滒溽滁溞滉溷溰滍溦滏溲溾滃滜滘溙溒溎溍溤溡溿溳滐滊溗溮溣煇煔煒煣煠煁煝煢煲煸煪煡煂煘煃煋煰煟煐煓"],["dea1","煄煍煚牏犍犌犑犐犎猼獂猻猺獀獊獉瑄瑊瑋瑒瑑瑗瑀瑏瑐瑎瑂瑆瑍瑔瓡瓿瓾瓽甝畹畷榃痯瘏瘃痷痾痼痹痸瘐痻痶痭痵痽皙皵盝睕睟睠睒睖睚睩睧睔睙睭矠碇碚碔碏碄碕碅碆碡碃硹碙碀碖硻祼禂祽祹稑稘稙稒稗稕稢稓"],["df40","稛稐窣窢窞竫筦筤筭筴筩筲筥筳筱筰筡筸筶筣粲粴粯綈綆綀綍絿綅絺綎絻綃絼綌綔綄絽綒罭罫罧罨罬羦羥羧翛翜耡腤腠腷腜腩腛腢腲朡腞腶腧腯"],["dfa1","腄腡舝艉艄艀艂艅蓱萿葖葶葹蒏蒍葥葑葀蒆葧萰葍葽葚葙葴葳葝蔇葞萷萺萴葺葃葸萲葅萩菙葋萯葂萭葟葰萹葎葌葒葯蓅蒎萻葇萶萳葨葾葄萫葠葔葮葐蜋蜄蛷蜌蛺蛖蛵蝍蛸蜎蜉蜁蛶蜍蜅裖裋裍裎裞裛裚裌裐覅覛觟觥觤"],["e040","觡觠觢觜触詶誆詿詡訿詷誂誄詵誃誁詴詺谼豋豊豥豤豦貆貄貅賌赨赩趑趌趎趏趍趓趔趐趒跰跠跬跱跮跐跩跣跢跧跲跫跴輆軿輁輀輅輇輈輂輋遒逿"],["e0a1","遄遉逽鄐鄍鄏鄑鄖鄔鄋鄎酮酯鉈鉒鈰鈺鉦鈳鉥鉞銃鈮鉊鉆鉭鉬鉏鉠鉧鉯鈶鉡鉰鈱鉔鉣鉐鉲鉎鉓鉌鉖鈲閟閜閞閛隒隓隑隗雎雺雽雸雵靳靷靸靲頏頍頎颬飶飹馯馲馰馵骭骫魛鳪鳭鳧麀黽僦僔僗僨僳僛僪僝僤僓僬僰僯僣僠"],["e140","凘劀劁勩勫匰厬嘧嘕嘌嘒嗼嘏嘜嘁嘓嘂嗺嘝嘄嗿嗹墉塼墐墘墆墁塿塴墋塺墇墑墎塶墂墈塻墔墏壾奫嫜嫮嫥嫕嫪嫚嫭嫫嫳嫢嫠嫛嫬嫞嫝嫙嫨嫟孷寠"],["e1a1","寣屣嶂嶀嵽嶆嵺嶁嵷嶊嶉嶈嵾嵼嶍嵹嵿幘幙幓廘廑廗廎廜廕廙廒廔彄彃彯徶愬愨慁慞慱慳慒慓慲慬憀慴慔慺慛慥愻慪慡慖戩戧戫搫摍摛摝摴摶摲摳摽摵摦撦摎撂摞摜摋摓摠摐摿搿摬摫摙摥摷敳斠暡暠暟朅朄朢榱榶槉"],["e240","榠槎榖榰榬榼榑榙榎榧榍榩榾榯榿槄榽榤槔榹槊榚槏榳榓榪榡榞槙榗榐槂榵榥槆歊歍歋殞殟殠毃毄毾滎滵滱漃漥滸漷滻漮漉潎漙漚漧漘漻漒滭漊"],["e2a1","漶潳滹滮漭潀漰漼漵滫漇漎潃漅滽滶漹漜滼漺漟漍漞漈漡熇熐熉熀熅熂熏煻熆熁熗牄牓犗犕犓獃獍獑獌瑢瑳瑱瑵瑲瑧瑮甀甂甃畽疐瘖瘈瘌瘕瘑瘊瘔皸瞁睼瞅瞂睮瞀睯睾瞃碲碪碴碭碨硾碫碞碥碠碬碢碤禘禊禋禖禕禔禓"],["e340","禗禈禒禐稫穊稰稯稨稦窨窫窬竮箈箜箊箑箐箖箍箌箛箎箅箘劄箙箤箂粻粿粼粺綧綷緂綣綪緁緀緅綝緎緄緆緋緌綯綹綖綼綟綦綮綩綡緉罳翢翣翥翞"],["e3a1","耤聝聜膉膆膃膇膍膌膋舕蒗蒤蒡蒟蒺蓎蓂蒬蒮蒫蒹蒴蓁蓍蒪蒚蒱蓐蒝蒧蒻蒢蒔蓇蓌蒛蒩蒯蒨蓖蒘蒶蓏蒠蓗蓔蓒蓛蒰蒑虡蜳蜣蜨蝫蝀蜮蜞蜡蜙蜛蝃蜬蝁蜾蝆蜠蜲蜪蜭蜼蜒蜺蜱蜵蝂蜦蜧蜸蜤蜚蜰蜑裷裧裱裲裺裾裮裼裶裻"],["e440","裰裬裫覝覡覟覞觩觫觨誫誙誋誒誏誖谽豨豩賕賏賗趖踉踂跿踍跽踊踃踇踆踅跾踀踄輐輑輎輍鄣鄜鄠鄢鄟鄝鄚鄤鄡鄛酺酲酹酳銥銤鉶銛鉺銠銔銪銍"],["e4a1","銦銚銫鉹銗鉿銣鋮銎銂銕銢鉽銈銡銊銆銌銙銧鉾銇銩銝銋鈭隞隡雿靘靽靺靾鞃鞀鞂靻鞄鞁靿韎韍頖颭颮餂餀餇馝馜駃馹馻馺駂馽駇骱髣髧鬾鬿魠魡魟鳱鳲鳵麧僿儃儰僸儆儇僶僾儋儌僽儊劋劌勱勯噈噂噌嘵噁噊噉噆噘"],["e540","噚噀嘳嘽嘬嘾嘸嘪嘺圚墫墝墱墠墣墯墬墥墡壿嫿嫴嫽嫷嫶嬃嫸嬂嫹嬁嬇嬅嬏屧嶙嶗嶟嶒嶢嶓嶕嶠嶜嶡嶚嶞幩幝幠幜緳廛廞廡彉徲憋憃慹憱憰憢憉"],["e5a1","憛憓憯憭憟憒憪憡憍慦憳戭摮摰撖撠撅撗撜撏撋撊撌撣撟摨撱撘敶敺敹敻斲斳暵暰暩暲暷暪暯樀樆樗槥槸樕槱槤樠槿槬槢樛樝槾樧槲槮樔槷槧橀樈槦槻樍槼槫樉樄樘樥樏槶樦樇槴樖歑殥殣殢殦氁氀毿氂潁漦潾澇濆澒"],["e640","澍澉澌潢潏澅潚澖潶潬澂潕潲潒潐潗澔澓潝漀潡潫潽潧澐潓澋潩潿澕潣潷潪潻熲熯熛熰熠熚熩熵熝熥熞熤熡熪熜熧熳犘犚獘獒獞獟獠獝獛獡獚獙"],["e6a1","獢璇璉璊璆璁瑽璅璈瑼瑹甈甇畾瘥瘞瘙瘝瘜瘣瘚瘨瘛皜皝皞皛瞍瞏瞉瞈磍碻磏磌磑磎磔磈磃磄磉禚禡禠禜禢禛歶稹窲窴窳箷篋箾箬篎箯箹篊箵糅糈糌糋緷緛緪緧緗緡縃緺緦緶緱緰緮緟罶羬羰羭翭翫翪翬翦翨聤聧膣膟"],["e740","膞膕膢膙膗舖艏艓艒艐艎艑蔤蔻蔏蔀蔩蔎蔉蔍蔟蔊蔧蔜蓻蔫蓺蔈蔌蓴蔪蓲蔕蓷蓫蓳蓼蔒蓪蓩蔖蓾蔨蔝蔮蔂蓽蔞蓶蔱蔦蓧蓨蓰蓯蓹蔘蔠蔰蔋蔙蔯虢"],["e7a1","蝖蝣蝤蝷蟡蝳蝘蝔蝛蝒蝡蝚蝑蝞蝭蝪蝐蝎蝟蝝蝯蝬蝺蝮蝜蝥蝏蝻蝵蝢蝧蝩衚褅褌褔褋褗褘褙褆褖褑褎褉覢覤覣觭觰觬諏諆誸諓諑諔諕誻諗誾諀諅諘諃誺誽諙谾豍貏賥賟賙賨賚賝賧趠趜趡趛踠踣踥踤踮踕踛踖踑踙踦踧"],["e840","踔踒踘踓踜踗踚輬輤輘輚輠輣輖輗遳遰遯遧遫鄯鄫鄩鄪鄲鄦鄮醅醆醊醁醂醄醀鋐鋃鋄鋀鋙銶鋏鋱鋟鋘鋩鋗鋝鋌鋯鋂鋨鋊鋈鋎鋦鋍鋕鋉鋠鋞鋧鋑鋓"],["e8a1","銵鋡鋆銴镼閬閫閮閰隤隢雓霅霈霂靚鞊鞎鞈韐韏頞頝頦頩頨頠頛頧颲餈飺餑餔餖餗餕駜駍駏駓駔駎駉駖駘駋駗駌骳髬髫髳髲髱魆魃魧魴魱魦魶魵魰魨魤魬鳼鳺鳽鳿鳷鴇鴀鳹鳻鴈鴅鴄麃黓鼏鼐儜儓儗儚儑凞匴叡噰噠噮"],["e940","噳噦噣噭噲噞噷圜圛壈墽壉墿墺壂墼壆嬗嬙嬛嬡嬔嬓嬐嬖嬨嬚嬠嬞寯嶬嶱嶩嶧嶵嶰嶮嶪嶨嶲嶭嶯嶴幧幨幦幯廩廧廦廨廥彋徼憝憨憖懅憴懆懁懌憺"],["e9a1","憿憸憌擗擖擐擏擉撽撉擃擛擳擙攳敿敼斢曈暾曀曊曋曏暽暻暺曌朣樴橦橉橧樲橨樾橝橭橶橛橑樨橚樻樿橁橪橤橐橏橔橯橩橠樼橞橖橕橍橎橆歕歔歖殧殪殫毈毇氄氃氆澭濋澣濇澼濎濈潞濄澽澞濊澨瀄澥澮澺澬澪濏澿澸"],["ea40","澢濉澫濍澯澲澰燅燂熿熸燖燀燁燋燔燊燇燏熽燘熼燆燚燛犝犞獩獦獧獬獥獫獪瑿璚璠璔璒璕璡甋疀瘯瘭瘱瘽瘳瘼瘵瘲瘰皻盦瞚瞝瞡瞜瞛瞢瞣瞕瞙"],["eaa1","瞗磝磩磥磪磞磣磛磡磢磭磟磠禤穄穈穇窶窸窵窱窷篞篣篧篝篕篥篚篨篹篔篪篢篜篫篘篟糒糔糗糐糑縒縡縗縌縟縠縓縎縜縕縚縢縋縏縖縍縔縥縤罃罻罼罺羱翯耪耩聬膱膦膮膹膵膫膰膬膴膲膷膧臲艕艖艗蕖蕅蕫蕍蕓蕡蕘"],["eb40","蕀蕆蕤蕁蕢蕄蕑蕇蕣蔾蕛蕱蕎蕮蕵蕕蕧蕠薌蕦蕝蕔蕥蕬虣虥虤螛螏螗螓螒螈螁螖螘蝹螇螣螅螐螑螝螄螔螜螚螉褞褦褰褭褮褧褱褢褩褣褯褬褟觱諠"],["eba1","諢諲諴諵諝謔諤諟諰諈諞諡諨諿諯諻貑貒貐賵賮賱賰賳赬赮趥趧踳踾踸蹀蹅踶踼踽蹁踰踿躽輶輮輵輲輹輷輴遶遹遻邆郺鄳鄵鄶醓醐醑醍醏錧錞錈錟錆錏鍺錸錼錛錣錒錁鍆錭錎錍鋋錝鋺錥錓鋹鋷錴錂錤鋿錩錹錵錪錔錌"],["ec40","錋鋾錉錀鋻錖閼闍閾閹閺閶閿閵閽隩雔霋霒霐鞙鞗鞔韰韸頵頯頲餤餟餧餩馞駮駬駥駤駰駣駪駩駧骹骿骴骻髶髺髹髷鬳鮀鮅鮇魼魾魻鮂鮓鮒鮐魺鮕"],["eca1","魽鮈鴥鴗鴠鴞鴔鴩鴝鴘鴢鴐鴙鴟麈麆麇麮麭黕黖黺鼒鼽儦儥儢儤儠儩勴嚓嚌嚍嚆嚄嚃噾嚂噿嚁壖壔壏壒嬭嬥嬲嬣嬬嬧嬦嬯嬮孻寱寲嶷幬幪徾徻懃憵憼懧懠懥懤懨懞擯擩擣擫擤擨斁斀斶旚曒檍檖檁檥檉檟檛檡檞檇檓檎"],["ed40","檕檃檨檤檑橿檦檚檅檌檒歛殭氉濌澩濴濔濣濜濭濧濦濞濲濝濢濨燡燱燨燲燤燰燢獳獮獯璗璲璫璐璪璭璱璥璯甐甑甒甏疄癃癈癉癇皤盩瞵瞫瞲瞷瞶"],["eda1","瞴瞱瞨矰磳磽礂磻磼磲礅磹磾礄禫禨穜穛穖穘穔穚窾竀竁簅簏篲簀篿篻簎篴簋篳簂簉簃簁篸篽簆篰篱簐簊糨縭縼繂縳顈縸縪繉繀繇縩繌縰縻縶繄縺罅罿罾罽翴翲耬膻臄臌臊臅臇膼臩艛艚艜薃薀薏薧薕薠薋薣蕻薤薚薞"],["ee40","蕷蕼薉薡蕺蕸蕗薎薖薆薍薙薝薁薢薂薈薅蕹蕶薘薐薟虨螾螪螭蟅螰螬螹螵螼螮蟉蟃蟂蟌螷螯蟄蟊螴螶螿螸螽蟞螲褵褳褼褾襁襒褷襂覭覯覮觲觳謞"],["eea1","謘謖謑謅謋謢謏謒謕謇謍謈謆謜謓謚豏豰豲豱豯貕貔賹赯蹎蹍蹓蹐蹌蹇轃轀邅遾鄸醚醢醛醙醟醡醝醠鎡鎃鎯鍤鍖鍇鍼鍘鍜鍶鍉鍐鍑鍠鍭鎏鍌鍪鍹鍗鍕鍒鍏鍱鍷鍻鍡鍞鍣鍧鎀鍎鍙闇闀闉闃闅閷隮隰隬霠霟霘霝霙鞚鞡鞜"],["ef40","鞞鞝韕韔韱顁顄顊顉顅顃餥餫餬餪餳餲餯餭餱餰馘馣馡騂駺駴駷駹駸駶駻駽駾駼騃骾髾髽鬁髼魈鮚鮨鮞鮛鮦鮡鮥鮤鮆鮢鮠鮯鴳鵁鵧鴶鴮鴯鴱鴸鴰"],["efa1","鵅鵂鵃鴾鴷鵀鴽翵鴭麊麉麍麰黈黚黻黿鼤鼣鼢齔龠儱儭儮嚘嚜嚗嚚嚝嚙奰嬼屩屪巀幭幮懘懟懭懮懱懪懰懫懖懩擿攄擽擸攁攃擼斔旛曚曛曘櫅檹檽櫡櫆檺檶檷櫇檴檭歞毉氋瀇瀌瀍瀁瀅瀔瀎濿瀀濻瀦濼濷瀊爁燿燹爃燽獶"],["f040","璸瓀璵瓁璾璶璻瓂甔甓癜癤癙癐癓癗癚皦皽盬矂瞺磿礌礓礔礉礐礒礑禭禬穟簜簩簙簠簟簭簝簦簨簢簥簰繜繐繖繣繘繢繟繑繠繗繓羵羳翷翸聵臑臒"],["f0a1","臐艟艞薴藆藀藃藂薳薵薽藇藄薿藋藎藈藅薱薶藒蘤薸薷薾虩蟧蟦蟢蟛蟫蟪蟥蟟蟳蟤蟔蟜蟓蟭蟘蟣螤蟗蟙蠁蟴蟨蟝襓襋襏襌襆襐襑襉謪謧謣謳謰謵譇謯謼謾謱謥謷謦謶謮謤謻謽謺豂豵貙貘貗賾贄贂贀蹜蹢蹠蹗蹖蹞蹥蹧"],["f140","蹛蹚蹡蹝蹩蹔轆轇轈轋鄨鄺鄻鄾醨醥醧醯醪鎵鎌鎒鎷鎛鎝鎉鎧鎎鎪鎞鎦鎕鎈鎙鎟鎍鎱鎑鎲鎤鎨鎴鎣鎥闒闓闑隳雗雚巂雟雘雝霣霢霥鞬鞮鞨鞫鞤鞪"],["f1a1","鞢鞥韗韙韖韘韺顐顑顒颸饁餼餺騏騋騉騍騄騑騊騅騇騆髀髜鬈鬄鬅鬩鬵魊魌魋鯇鯆鯃鮿鯁鮵鮸鯓鮶鯄鮹鮽鵜鵓鵏鵊鵛鵋鵙鵖鵌鵗鵒鵔鵟鵘鵚麎麌黟鼁鼀鼖鼥鼫鼪鼩鼨齌齕儴儵劖勷厴嚫嚭嚦嚧嚪嚬壚壝壛夒嬽嬾嬿巃幰"],["f240","徿懻攇攐攍攉攌攎斄旞旝曞櫧櫠櫌櫑櫙櫋櫟櫜櫐櫫櫏櫍櫞歠殰氌瀙瀧瀠瀖瀫瀡瀢瀣瀩瀗瀤瀜瀪爌爊爇爂爅犥犦犤犣犡瓋瓅璷瓃甖癠矉矊矄矱礝礛"],["f2a1","礡礜礗礞禰穧穨簳簼簹簬簻糬糪繶繵繸繰繷繯繺繲繴繨罋罊羃羆羷翽翾聸臗臕艤艡艣藫藱藭藙藡藨藚藗藬藲藸藘藟藣藜藑藰藦藯藞藢蠀蟺蠃蟶蟷蠉蠌蠋蠆蟼蠈蟿蠊蠂襢襚襛襗襡襜襘襝襙覈覷覶觶譐譈譊譀譓譖譔譋譕"],["f340","譑譂譒譗豃豷豶貚贆贇贉趬趪趭趫蹭蹸蹳蹪蹯蹻軂轒轑轏轐轓辴酀鄿醰醭鏞鏇鏏鏂鏚鏐鏹鏬鏌鏙鎩鏦鏊鏔鏮鏣鏕鏄鏎鏀鏒鏧镽闚闛雡霩霫霬霨霦"],["f3a1","鞳鞷鞶韝韞韟顜顙顝顗颿颽颻颾饈饇饃馦馧騚騕騥騝騤騛騢騠騧騣騞騜騔髂鬋鬊鬎鬌鬷鯪鯫鯠鯞鯤鯦鯢鯰鯔鯗鯬鯜鯙鯥鯕鯡鯚鵷鶁鶊鶄鶈鵱鶀鵸鶆鶋鶌鵽鵫鵴鵵鵰鵩鶅鵳鵻鶂鵯鵹鵿鶇鵨麔麑黀黼鼭齀齁齍齖齗齘匷嚲"],["f440","嚵嚳壣孅巆巇廮廯忀忁懹攗攖攕攓旟曨曣曤櫳櫰櫪櫨櫹櫱櫮櫯瀼瀵瀯瀷瀴瀱灂瀸瀿瀺瀹灀瀻瀳灁爓爔犨獽獼璺皫皪皾盭矌矎矏矍矲礥礣礧礨礤礩"],["f4a1","禲穮穬穭竷籉籈籊籇籅糮繻繾纁纀羺翿聹臛臙舋艨艩蘢藿蘁藾蘛蘀藶蘄蘉蘅蘌藽蠙蠐蠑蠗蠓蠖襣襦覹觷譠譪譝譨譣譥譧譭趮躆躈躄轙轖轗轕轘轚邍酃酁醷醵醲醳鐋鐓鏻鐠鐏鐔鏾鐕鐐鐨鐙鐍鏵鐀鏷鐇鐎鐖鐒鏺鐉鏸鐊鏿"],["f540","鏼鐌鏶鐑鐆闞闠闟霮霯鞹鞻韽韾顠顢顣顟飁飂饐饎饙饌饋饓騲騴騱騬騪騶騩騮騸騭髇髊髆鬐鬒鬑鰋鰈鯷鰅鰒鯸鱀鰇鰎鰆鰗鰔鰉鶟鶙鶤鶝鶒鶘鶐鶛"],["f5a1","鶠鶔鶜鶪鶗鶡鶚鶢鶨鶞鶣鶿鶩鶖鶦鶧麙麛麚黥黤黧黦鼰鼮齛齠齞齝齙龑儺儹劘劗囃嚽嚾孈孇巋巏廱懽攛欂櫼欃櫸欀灃灄灊灈灉灅灆爝爚爙獾甗癪矐礭礱礯籔籓糲纊纇纈纋纆纍罍羻耰臝蘘蘪蘦蘟蘣蘜蘙蘧蘮蘡蘠蘩蘞蘥"],["f640","蠩蠝蠛蠠蠤蠜蠫衊襭襩襮襫觺譹譸譅譺譻贐贔趯躎躌轞轛轝酆酄酅醹鐿鐻鐶鐩鐽鐼鐰鐹鐪鐷鐬鑀鐱闥闤闣霵霺鞿韡顤飉飆飀饘饖騹騽驆驄驂驁騺"],["f6a1","騿髍鬕鬗鬘鬖鬺魒鰫鰝鰜鰬鰣鰨鰩鰤鰡鶷鶶鶼鷁鷇鷊鷏鶾鷅鷃鶻鶵鷎鶹鶺鶬鷈鶱鶭鷌鶳鷍鶲鹺麜黫黮黭鼛鼘鼚鼱齎齥齤龒亹囆囅囋奱孋孌巕巑廲攡攠攦攢欋欈欉氍灕灖灗灒爞爟犩獿瓘瓕瓙瓗癭皭礵禴穰穱籗籜籙籛籚"],["f740","糴糱纑罏羇臞艫蘴蘵蘳蘬蘲蘶蠬蠨蠦蠪蠥襱覿覾觻譾讄讂讆讅譿贕躕躔躚躒躐躖躗轠轢酇鑌鑐鑊鑋鑏鑇鑅鑈鑉鑆霿韣顪顩飋饔饛驎驓驔驌驏驈驊"],["f7a1","驉驒驐髐鬙鬫鬻魖魕鱆鱈鰿鱄鰹鰳鱁鰼鰷鰴鰲鰽鰶鷛鷒鷞鷚鷋鷐鷜鷑鷟鷩鷙鷘鷖鷵鷕鷝麶黰鼵鼳鼲齂齫龕龢儽劙壨壧奲孍巘蠯彏戁戃戄攩攥斖曫欑欒欏毊灛灚爢玂玁玃癰矔籧籦纕艬蘺虀蘹蘼蘱蘻蘾蠰蠲蠮蠳襶襴襳觾"],["f840","讌讎讋讈豅贙躘轤轣醼鑢鑕鑝鑗鑞韄韅頀驖驙鬞鬟鬠鱒鱘鱐鱊鱍鱋鱕鱙鱌鱎鷻鷷鷯鷣鷫鷸鷤鷶鷡鷮鷦鷲鷰鷢鷬鷴鷳鷨鷭黂黐黲黳鼆鼜鼸鼷鼶齃齏"],["f8a1","齱齰齮齯囓囍孎屭攭曭曮欓灟灡灝灠爣瓛瓥矕礸禷禶籪纗羉艭虃蠸蠷蠵衋讔讕躞躟躠躝醾醽釂鑫鑨鑩雥靆靃靇韇韥驞髕魙鱣鱧鱦鱢鱞鱠鸂鷾鸇鸃鸆鸅鸀鸁鸉鷿鷽鸄麠鼞齆齴齵齶囔攮斸欘欙欗欚灢爦犪矘矙礹籩籫糶纚"],["f940","纘纛纙臠臡虆虇虈襹襺襼襻觿讘讙躥躤躣鑮鑭鑯鑱鑳靉顲饟鱨鱮鱭鸋鸍鸐鸏鸒鸑麡黵鼉齇齸齻齺齹圞灦籯蠼趲躦釃鑴鑸鑶鑵驠鱴鱳鱱鱵鸔鸓黶鼊"],["f9a1","龤灨灥糷虪蠾蠽蠿讞貜躩軉靋顳顴飌饡馫驤驦驧鬤鸕鸗齈戇欞爧虌躨钂钀钁驩驨鬮鸙爩虋讟钃鱹麷癵驫鱺鸝灩灪麤齾齉龘碁銹裏墻恒粧嫺╔╦╗╠╬╣╚╩╝╒╤╕╞╪╡╘╧╛╓╥╖╟╫╢╙╨╜║═╭╮╰╯▓"]]');

/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/iconv-lite/encodings/tables/eucjp.json":
/*!*****************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/iconv-lite/encodings/tables/eucjp.json ***!
  \*****************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('[["0","\\u0000",127],["8ea1","｡",62],["a1a1","　、。，．・：；？！゛゜´｀¨＾￣＿ヽヾゝゞ〃仝々〆〇ー―‐／＼～∥｜…‥‘’“”（）〔〕［］｛｝〈",9,"＋－±×÷＝≠＜＞≦≧∞∴♂♀°′″℃￥＄￠￡％＃＆＊＠§☆★○●◎◇"],["a2a1","◆□■△▲▽▼※〒→←↑↓〓"],["a2ba","∈∋⊆⊇⊂⊃∪∩"],["a2ca","∧∨￢⇒⇔∀∃"],["a2dc","∠⊥⌒∂∇≡≒≪≫√∽∝∵∫∬"],["a2f2","Å‰♯♭♪†‡¶"],["a2fe","◯"],["a3b0","０",9],["a3c1","Ａ",25],["a3e1","ａ",25],["a4a1","ぁ",82],["a5a1","ァ",85],["a6a1","Α",16,"Σ",6],["a6c1","α",16,"σ",6],["a7a1","А",5,"ЁЖ",25],["a7d1","а",5,"ёж",25],["a8a1","─│┌┐┘└├┬┤┴┼━┃┏┓┛┗┣┳┫┻╋┠┯┨┷┿┝┰┥┸╂"],["ada1","①",19,"Ⅰ",9],["adc0","㍉㌔㌢㍍㌘㌧㌃㌶㍑㍗㌍㌦㌣㌫㍊㌻㎜㎝㎞㎎㎏㏄㎡"],["addf","㍻〝〟№㏍℡㊤",4,"㈱㈲㈹㍾㍽㍼≒≡∫∮∑√⊥∠∟⊿∵∩∪"],["b0a1","亜唖娃阿哀愛挨姶逢葵茜穐悪握渥旭葦芦鯵梓圧斡扱宛姐虻飴絢綾鮎或粟袷安庵按暗案闇鞍杏以伊位依偉囲夷委威尉惟意慰易椅為畏異移維緯胃萎衣謂違遺医井亥域育郁磯一壱溢逸稲茨芋鰯允印咽員因姻引飲淫胤蔭"],["b1a1","院陰隠韻吋右宇烏羽迂雨卯鵜窺丑碓臼渦嘘唄欝蔚鰻姥厩浦瓜閏噂云運雲荏餌叡営嬰影映曳栄永泳洩瑛盈穎頴英衛詠鋭液疫益駅悦謁越閲榎厭円園堰奄宴延怨掩援沿演炎焔煙燕猿縁艶苑薗遠鉛鴛塩於汚甥凹央奥往応"],["b2a1","押旺横欧殴王翁襖鴬鴎黄岡沖荻億屋憶臆桶牡乙俺卸恩温穏音下化仮何伽価佳加可嘉夏嫁家寡科暇果架歌河火珂禍禾稼箇花苛茄荷華菓蝦課嘩貨迦過霞蚊俄峨我牙画臥芽蛾賀雅餓駕介会解回塊壊廻快怪悔恢懐戒拐改"],["b3a1","魁晦械海灰界皆絵芥蟹開階貝凱劾外咳害崖慨概涯碍蓋街該鎧骸浬馨蛙垣柿蛎鈎劃嚇各廓拡撹格核殻獲確穫覚角赫較郭閣隔革学岳楽額顎掛笠樫橿梶鰍潟割喝恰括活渇滑葛褐轄且鰹叶椛樺鞄株兜竃蒲釜鎌噛鴨栢茅萱"],["b4a1","粥刈苅瓦乾侃冠寒刊勘勧巻喚堪姦完官寛干幹患感慣憾換敢柑桓棺款歓汗漢澗潅環甘監看竿管簡緩缶翰肝艦莞観諌貫還鑑間閑関陥韓館舘丸含岸巌玩癌眼岩翫贋雁頑顔願企伎危喜器基奇嬉寄岐希幾忌揮机旗既期棋棄"],["b5a1","機帰毅気汽畿祈季稀紀徽規記貴起軌輝飢騎鬼亀偽儀妓宜戯技擬欺犠疑祇義蟻誼議掬菊鞠吉吃喫桔橘詰砧杵黍却客脚虐逆丘久仇休及吸宮弓急救朽求汲泣灸球究窮笈級糾給旧牛去居巨拒拠挙渠虚許距鋸漁禦魚亨享京"],["b6a1","供侠僑兇競共凶協匡卿叫喬境峡強彊怯恐恭挟教橋況狂狭矯胸脅興蕎郷鏡響饗驚仰凝尭暁業局曲極玉桐粁僅勤均巾錦斤欣欽琴禁禽筋緊芹菌衿襟謹近金吟銀九倶句区狗玖矩苦躯駆駈駒具愚虞喰空偶寓遇隅串櫛釧屑屈"],["b7a1","掘窟沓靴轡窪熊隈粂栗繰桑鍬勲君薫訓群軍郡卦袈祁係傾刑兄啓圭珪型契形径恵慶慧憩掲携敬景桂渓畦稽系経継繋罫茎荊蛍計詣警軽頚鶏芸迎鯨劇戟撃激隙桁傑欠決潔穴結血訣月件倹倦健兼券剣喧圏堅嫌建憲懸拳捲"],["b8a1","検権牽犬献研硯絹県肩見謙賢軒遣鍵険顕験鹸元原厳幻弦減源玄現絃舷言諺限乎個古呼固姑孤己庫弧戸故枯湖狐糊袴股胡菰虎誇跨鈷雇顧鼓五互伍午呉吾娯後御悟梧檎瑚碁語誤護醐乞鯉交佼侯候倖光公功効勾厚口向"],["b9a1","后喉坑垢好孔孝宏工巧巷幸広庚康弘恒慌抗拘控攻昂晃更杭校梗構江洪浩港溝甲皇硬稿糠紅紘絞綱耕考肯肱腔膏航荒行衡講貢購郊酵鉱砿鋼閤降項香高鴻剛劫号合壕拷濠豪轟麹克刻告国穀酷鵠黒獄漉腰甑忽惚骨狛込"],["baa1","此頃今困坤墾婚恨懇昏昆根梱混痕紺艮魂些佐叉唆嵯左差査沙瑳砂詐鎖裟坐座挫債催再最哉塞妻宰彩才採栽歳済災采犀砕砦祭斎細菜裁載際剤在材罪財冴坂阪堺榊肴咲崎埼碕鷺作削咋搾昨朔柵窄策索錯桜鮭笹匙冊刷"],["bba1","察拶撮擦札殺薩雑皐鯖捌錆鮫皿晒三傘参山惨撒散桟燦珊産算纂蚕讃賛酸餐斬暫残仕仔伺使刺司史嗣四士始姉姿子屍市師志思指支孜斯施旨枝止死氏獅祉私糸紙紫肢脂至視詞詩試誌諮資賜雌飼歯事似侍児字寺慈持時"],["bca1","次滋治爾璽痔磁示而耳自蒔辞汐鹿式識鴫竺軸宍雫七叱執失嫉室悉湿漆疾質実蔀篠偲柴芝屡蕊縞舎写射捨赦斜煮社紗者謝車遮蛇邪借勺尺杓灼爵酌釈錫若寂弱惹主取守手朱殊狩珠種腫趣酒首儒受呪寿授樹綬需囚収周"],["bda1","宗就州修愁拾洲秀秋終繍習臭舟蒐衆襲讐蹴輯週酋酬集醜什住充十従戎柔汁渋獣縦重銃叔夙宿淑祝縮粛塾熟出術述俊峻春瞬竣舜駿准循旬楯殉淳準潤盾純巡遵醇順処初所暑曙渚庶緒署書薯藷諸助叙女序徐恕鋤除傷償"],["bea1","勝匠升召哨商唱嘗奨妾娼宵将小少尚庄床廠彰承抄招掌捷昇昌昭晶松梢樟樵沼消渉湘焼焦照症省硝礁祥称章笑粧紹肖菖蒋蕉衝裳訟証詔詳象賞醤鉦鍾鐘障鞘上丈丞乗冗剰城場壌嬢常情擾条杖浄状畳穣蒸譲醸錠嘱埴飾"],["bfa1","拭植殖燭織職色触食蝕辱尻伸信侵唇娠寝審心慎振新晋森榛浸深申疹真神秦紳臣芯薪親診身辛進針震人仁刃塵壬尋甚尽腎訊迅陣靭笥諏須酢図厨逗吹垂帥推水炊睡粋翠衰遂酔錐錘随瑞髄崇嵩数枢趨雛据杉椙菅頗雀裾"],["c0a1","澄摺寸世瀬畝是凄制勢姓征性成政整星晴棲栖正清牲生盛精聖声製西誠誓請逝醒青静斉税脆隻席惜戚斥昔析石積籍績脊責赤跡蹟碩切拙接摂折設窃節説雪絶舌蝉仙先千占宣専尖川戦扇撰栓栴泉浅洗染潜煎煽旋穿箭線"],["c1a1","繊羨腺舛船薦詮賎践選遷銭銑閃鮮前善漸然全禅繕膳糎噌塑岨措曾曽楚狙疏疎礎祖租粗素組蘇訴阻遡鼠僧創双叢倉喪壮奏爽宋層匝惣想捜掃挿掻操早曹巣槍槽漕燥争痩相窓糟総綜聡草荘葬蒼藻装走送遭鎗霜騒像増憎"],["c2a1","臓蔵贈造促側則即息捉束測足速俗属賊族続卒袖其揃存孫尊損村遜他多太汰詑唾堕妥惰打柁舵楕陀駄騨体堆対耐岱帯待怠態戴替泰滞胎腿苔袋貸退逮隊黛鯛代台大第醍題鷹滝瀧卓啄宅托択拓沢濯琢託鐸濁諾茸凧蛸只"],["c3a1","叩但達辰奪脱巽竪辿棚谷狸鱈樽誰丹単嘆坦担探旦歎淡湛炭短端箪綻耽胆蛋誕鍛団壇弾断暖檀段男談値知地弛恥智池痴稚置致蜘遅馳築畜竹筑蓄逐秩窒茶嫡着中仲宙忠抽昼柱注虫衷註酎鋳駐樗瀦猪苧著貯丁兆凋喋寵"],["c4a1","帖帳庁弔張彫徴懲挑暢朝潮牒町眺聴脹腸蝶調諜超跳銚長頂鳥勅捗直朕沈珍賃鎮陳津墜椎槌追鎚痛通塚栂掴槻佃漬柘辻蔦綴鍔椿潰坪壷嬬紬爪吊釣鶴亭低停偵剃貞呈堤定帝底庭廷弟悌抵挺提梯汀碇禎程締艇訂諦蹄逓"],["c5a1","邸鄭釘鼎泥摘擢敵滴的笛適鏑溺哲徹撤轍迭鉄典填天展店添纏甜貼転顛点伝殿澱田電兎吐堵塗妬屠徒斗杜渡登菟賭途都鍍砥砺努度土奴怒倒党冬凍刀唐塔塘套宕島嶋悼投搭東桃梼棟盗淘湯涛灯燈当痘祷等答筒糖統到"],["c6a1","董蕩藤討謄豆踏逃透鐙陶頭騰闘働動同堂導憧撞洞瞳童胴萄道銅峠鴇匿得徳涜特督禿篤毒独読栃橡凸突椴届鳶苫寅酉瀞噸屯惇敦沌豚遁頓呑曇鈍奈那内乍凪薙謎灘捺鍋楢馴縄畷南楠軟難汝二尼弐迩匂賑肉虹廿日乳入"],["c7a1","如尿韮任妊忍認濡禰祢寧葱猫熱年念捻撚燃粘乃廼之埜嚢悩濃納能脳膿農覗蚤巴把播覇杷波派琶破婆罵芭馬俳廃拝排敗杯盃牌背肺輩配倍培媒梅楳煤狽買売賠陪這蝿秤矧萩伯剥博拍柏泊白箔粕舶薄迫曝漠爆縛莫駁麦"],["c8a1","函箱硲箸肇筈櫨幡肌畑畠八鉢溌発醗髪伐罰抜筏閥鳩噺塙蛤隼伴判半反叛帆搬斑板氾汎版犯班畔繁般藩販範釆煩頒飯挽晩番盤磐蕃蛮匪卑否妃庇彼悲扉批披斐比泌疲皮碑秘緋罷肥被誹費避非飛樋簸備尾微枇毘琵眉美"],["c9a1","鼻柊稗匹疋髭彦膝菱肘弼必畢筆逼桧姫媛紐百謬俵彪標氷漂瓢票表評豹廟描病秒苗錨鋲蒜蛭鰭品彬斌浜瀕貧賓頻敏瓶不付埠夫婦富冨布府怖扶敷斧普浮父符腐膚芙譜負賦赴阜附侮撫武舞葡蕪部封楓風葺蕗伏副復幅服"],["caa1","福腹複覆淵弗払沸仏物鮒分吻噴墳憤扮焚奮粉糞紛雰文聞丙併兵塀幣平弊柄並蔽閉陛米頁僻壁癖碧別瞥蔑箆偏変片篇編辺返遍便勉娩弁鞭保舗鋪圃捕歩甫補輔穂募墓慕戊暮母簿菩倣俸包呆報奉宝峰峯崩庖抱捧放方朋"],["cba1","法泡烹砲縫胞芳萌蓬蜂褒訪豊邦鋒飽鳳鵬乏亡傍剖坊妨帽忘忙房暴望某棒冒紡肪膨謀貌貿鉾防吠頬北僕卜墨撲朴牧睦穆釦勃没殆堀幌奔本翻凡盆摩磨魔麻埋妹昧枚毎哩槙幕膜枕鮪柾鱒桝亦俣又抹末沫迄侭繭麿万慢満"],["cca1","漫蔓味未魅巳箕岬密蜜湊蓑稔脈妙粍民眠務夢無牟矛霧鵡椋婿娘冥名命明盟迷銘鳴姪牝滅免棉綿緬面麺摸模茂妄孟毛猛盲網耗蒙儲木黙目杢勿餅尤戻籾貰問悶紋門匁也冶夜爺耶野弥矢厄役約薬訳躍靖柳薮鑓愉愈油癒"],["cda1","諭輸唯佑優勇友宥幽悠憂揖有柚湧涌猶猷由祐裕誘遊邑郵雄融夕予余与誉輿預傭幼妖容庸揚揺擁曜楊様洋溶熔用窯羊耀葉蓉要謡踊遥陽養慾抑欲沃浴翌翼淀羅螺裸来莱頼雷洛絡落酪乱卵嵐欄濫藍蘭覧利吏履李梨理璃"],["cea1","痢裏裡里離陸律率立葎掠略劉流溜琉留硫粒隆竜龍侶慮旅虜了亮僚両凌寮料梁涼猟療瞭稜糧良諒遼量陵領力緑倫厘林淋燐琳臨輪隣鱗麟瑠塁涙累類令伶例冷励嶺怜玲礼苓鈴隷零霊麗齢暦歴列劣烈裂廉恋憐漣煉簾練聯"],["cfa1","蓮連錬呂魯櫓炉賂路露労婁廊弄朗楼榔浪漏牢狼篭老聾蝋郎六麓禄肋録論倭和話歪賄脇惑枠鷲亙亘鰐詫藁蕨椀湾碗腕"],["d0a1","弌丐丕个丱丶丼丿乂乖乘亂亅豫亊舒弍于亞亟亠亢亰亳亶从仍仄仆仂仗仞仭仟价伉佚估佛佝佗佇佶侈侏侘佻佩佰侑佯來侖儘俔俟俎俘俛俑俚俐俤俥倚倨倔倪倥倅伜俶倡倩倬俾俯們倆偃假會偕偐偈做偖偬偸傀傚傅傴傲"],["d1a1","僉僊傳僂僖僞僥僭僣僮價僵儉儁儂儖儕儔儚儡儺儷儼儻儿兀兒兌兔兢竸兩兪兮冀冂囘册冉冏冑冓冕冖冤冦冢冩冪冫决冱冲冰况冽凅凉凛几處凩凭凰凵凾刄刋刔刎刧刪刮刳刹剏剄剋剌剞剔剪剴剩剳剿剽劍劔劒剱劈劑辨"],["d2a1","辧劬劭劼劵勁勍勗勞勣勦飭勠勳勵勸勹匆匈甸匍匐匏匕匚匣匯匱匳匸區卆卅丗卉卍凖卞卩卮夘卻卷厂厖厠厦厥厮厰厶參簒雙叟曼燮叮叨叭叺吁吽呀听吭吼吮吶吩吝呎咏呵咎呟呱呷呰咒呻咀呶咄咐咆哇咢咸咥咬哄哈咨"],["d3a1","咫哂咤咾咼哘哥哦唏唔哽哮哭哺哢唹啀啣啌售啜啅啖啗唸唳啝喙喀咯喊喟啻啾喘喞單啼喃喩喇喨嗚嗅嗟嗄嗜嗤嗔嘔嗷嘖嗾嗽嘛嗹噎噐營嘴嘶嘲嘸噫噤嘯噬噪嚆嚀嚊嚠嚔嚏嚥嚮嚶嚴囂嚼囁囃囀囈囎囑囓囗囮囹圀囿圄圉"],["d4a1","圈國圍圓團圖嗇圜圦圷圸坎圻址坏坩埀垈坡坿垉垓垠垳垤垪垰埃埆埔埒埓堊埖埣堋堙堝塲堡塢塋塰毀塒堽塹墅墹墟墫墺壞墻墸墮壅壓壑壗壙壘壥壜壤壟壯壺壹壻壼壽夂夊夐夛梦夥夬夭夲夸夾竒奕奐奎奚奘奢奠奧奬奩"],["d5a1","奸妁妝佞侫妣妲姆姨姜妍姙姚娥娟娑娜娉娚婀婬婉娵娶婢婪媚媼媾嫋嫂媽嫣嫗嫦嫩嫖嫺嫻嬌嬋嬖嬲嫐嬪嬶嬾孃孅孀孑孕孚孛孥孩孰孳孵學斈孺宀它宦宸寃寇寉寔寐寤實寢寞寥寫寰寶寳尅將專對尓尠尢尨尸尹屁屆屎屓"],["d6a1","屐屏孱屬屮乢屶屹岌岑岔妛岫岻岶岼岷峅岾峇峙峩峽峺峭嶌峪崋崕崗嵜崟崛崑崔崢崚崙崘嵌嵒嵎嵋嵬嵳嵶嶇嶄嶂嶢嶝嶬嶮嶽嶐嶷嶼巉巍巓巒巖巛巫已巵帋帚帙帑帛帶帷幄幃幀幎幗幔幟幢幤幇幵并幺麼广庠廁廂廈廐廏"],["d7a1","廖廣廝廚廛廢廡廨廩廬廱廳廰廴廸廾弃弉彝彜弋弑弖弩弭弸彁彈彌彎弯彑彖彗彙彡彭彳彷徃徂彿徊很徑徇從徙徘徠徨徭徼忖忻忤忸忱忝悳忿怡恠怙怐怩怎怱怛怕怫怦怏怺恚恁恪恷恟恊恆恍恣恃恤恂恬恫恙悁悍惧悃悚"],["d8a1","悄悛悖悗悒悧悋惡悸惠惓悴忰悽惆悵惘慍愕愆惶惷愀惴惺愃愡惻惱愍愎慇愾愨愧慊愿愼愬愴愽慂慄慳慷慘慙慚慫慴慯慥慱慟慝慓慵憙憖憇憬憔憚憊憑憫憮懌懊應懷懈懃懆憺懋罹懍懦懣懶懺懴懿懽懼懾戀戈戉戍戌戔戛"],["d9a1","戞戡截戮戰戲戳扁扎扞扣扛扠扨扼抂抉找抒抓抖拔抃抔拗拑抻拏拿拆擔拈拜拌拊拂拇抛拉挌拮拱挧挂挈拯拵捐挾捍搜捏掖掎掀掫捶掣掏掉掟掵捫捩掾揩揀揆揣揉插揶揄搖搴搆搓搦搶攝搗搨搏摧摯摶摎攪撕撓撥撩撈撼"],["daa1","據擒擅擇撻擘擂擱擧舉擠擡抬擣擯攬擶擴擲擺攀擽攘攜攅攤攣攫攴攵攷收攸畋效敖敕敍敘敞敝敲數斂斃變斛斟斫斷旃旆旁旄旌旒旛旙无旡旱杲昊昃旻杳昵昶昴昜晏晄晉晁晞晝晤晧晨晟晢晰暃暈暎暉暄暘暝曁暹曉暾暼"],["dba1","曄暸曖曚曠昿曦曩曰曵曷朏朖朞朦朧霸朮朿朶杁朸朷杆杞杠杙杣杤枉杰枩杼杪枌枋枦枡枅枷柯枴柬枳柩枸柤柞柝柢柮枹柎柆柧檜栞框栩桀桍栲桎梳栫桙档桷桿梟梏梭梔條梛梃檮梹桴梵梠梺椏梍桾椁棊椈棘椢椦棡椌棍"],["dca1","棔棧棕椶椒椄棗棣椥棹棠棯椨椪椚椣椡棆楹楷楜楸楫楔楾楮椹楴椽楙椰楡楞楝榁楪榲榮槐榿槁槓榾槎寨槊槝榻槃榧樮榑榠榜榕榴槞槨樂樛槿權槹槲槧樅榱樞槭樔槫樊樒櫁樣樓橄樌橲樶橸橇橢橙橦橈樸樢檐檍檠檄檢檣"],["dda1","檗蘗檻櫃櫂檸檳檬櫞櫑櫟檪櫚櫪櫻欅蘖櫺欒欖鬱欟欸欷盜欹飮歇歃歉歐歙歔歛歟歡歸歹歿殀殄殃殍殘殕殞殤殪殫殯殲殱殳殷殼毆毋毓毟毬毫毳毯麾氈氓气氛氤氣汞汕汢汪沂沍沚沁沛汾汨汳沒沐泄泱泓沽泗泅泝沮沱沾"],["dea1","沺泛泯泙泪洟衍洶洫洽洸洙洵洳洒洌浣涓浤浚浹浙涎涕濤涅淹渕渊涵淇淦涸淆淬淞淌淨淒淅淺淙淤淕淪淮渭湮渮渙湲湟渾渣湫渫湶湍渟湃渺湎渤滿渝游溂溪溘滉溷滓溽溯滄溲滔滕溏溥滂溟潁漑灌滬滸滾漿滲漱滯漲滌"],["dfa1","漾漓滷澆潺潸澁澀潯潛濳潭澂潼潘澎澑濂潦澳澣澡澤澹濆澪濟濕濬濔濘濱濮濛瀉瀋濺瀑瀁瀏濾瀛瀚潴瀝瀘瀟瀰瀾瀲灑灣炙炒炯烱炬炸炳炮烟烋烝烙焉烽焜焙煥煕熈煦煢煌煖煬熏燻熄熕熨熬燗熹熾燒燉燔燎燠燬燧燵燼"],["e0a1","燹燿爍爐爛爨爭爬爰爲爻爼爿牀牆牋牘牴牾犂犁犇犒犖犢犧犹犲狃狆狄狎狒狢狠狡狹狷倏猗猊猜猖猝猴猯猩猥猾獎獏默獗獪獨獰獸獵獻獺珈玳珎玻珀珥珮珞璢琅瑯琥珸琲琺瑕琿瑟瑙瑁瑜瑩瑰瑣瑪瑶瑾璋璞璧瓊瓏瓔珱"],["e1a1","瓠瓣瓧瓩瓮瓲瓰瓱瓸瓷甄甃甅甌甎甍甕甓甞甦甬甼畄畍畊畉畛畆畚畩畤畧畫畭畸當疆疇畴疊疉疂疔疚疝疥疣痂疳痃疵疽疸疼疱痍痊痒痙痣痞痾痿痼瘁痰痺痲痳瘋瘍瘉瘟瘧瘠瘡瘢瘤瘴瘰瘻癇癈癆癜癘癡癢癨癩癪癧癬癰"],["e2a1","癲癶癸發皀皃皈皋皎皖皓皙皚皰皴皸皹皺盂盍盖盒盞盡盥盧盪蘯盻眈眇眄眩眤眞眥眦眛眷眸睇睚睨睫睛睥睿睾睹瞎瞋瞑瞠瞞瞰瞶瞹瞿瞼瞽瞻矇矍矗矚矜矣矮矼砌砒礦砠礪硅碎硴碆硼碚碌碣碵碪碯磑磆磋磔碾碼磅磊磬"],["e3a1","磧磚磽磴礇礒礑礙礬礫祀祠祗祟祚祕祓祺祿禊禝禧齋禪禮禳禹禺秉秕秧秬秡秣稈稍稘稙稠稟禀稱稻稾稷穃穗穉穡穢穩龝穰穹穽窈窗窕窘窖窩竈窰窶竅竄窿邃竇竊竍竏竕竓站竚竝竡竢竦竭竰笂笏笊笆笳笘笙笞笵笨笶筐"],["e4a1","筺笄筍笋筌筅筵筥筴筧筰筱筬筮箝箘箟箍箜箚箋箒箏筝箙篋篁篌篏箴篆篝篩簑簔篦篥籠簀簇簓篳篷簗簍篶簣簧簪簟簷簫簽籌籃籔籏籀籐籘籟籤籖籥籬籵粃粐粤粭粢粫粡粨粳粲粱粮粹粽糀糅糂糘糒糜糢鬻糯糲糴糶糺紆"],["e5a1","紂紜紕紊絅絋紮紲紿紵絆絳絖絎絲絨絮絏絣經綉絛綏絽綛綺綮綣綵緇綽綫總綢綯緜綸綟綰緘緝緤緞緻緲緡縅縊縣縡縒縱縟縉縋縢繆繦縻縵縹繃縷縲縺繧繝繖繞繙繚繹繪繩繼繻纃緕繽辮繿纈纉續纒纐纓纔纖纎纛纜缸缺"],["e6a1","罅罌罍罎罐网罕罔罘罟罠罨罩罧罸羂羆羃羈羇羌羔羞羝羚羣羯羲羹羮羶羸譱翅翆翊翕翔翡翦翩翳翹飜耆耄耋耒耘耙耜耡耨耿耻聊聆聒聘聚聟聢聨聳聲聰聶聹聽聿肄肆肅肛肓肚肭冐肬胛胥胙胝胄胚胖脉胯胱脛脩脣脯腋"],["e7a1","隋腆脾腓腑胼腱腮腥腦腴膃膈膊膀膂膠膕膤膣腟膓膩膰膵膾膸膽臀臂膺臉臍臑臙臘臈臚臟臠臧臺臻臾舁舂舅與舊舍舐舖舩舫舸舳艀艙艘艝艚艟艤艢艨艪艫舮艱艷艸艾芍芒芫芟芻芬苡苣苟苒苴苳苺莓范苻苹苞茆苜茉苙"],["e8a1","茵茴茖茲茱荀茹荐荅茯茫茗茘莅莚莪莟莢莖茣莎莇莊荼莵荳荵莠莉莨菴萓菫菎菽萃菘萋菁菷萇菠菲萍萢萠莽萸蔆菻葭萪萼蕚蒄葷葫蒭葮蒂葩葆萬葯葹萵蓊葢蒹蒿蒟蓙蓍蒻蓚蓐蓁蓆蓖蒡蔡蓿蓴蔗蔘蔬蔟蔕蔔蓼蕀蕣蕘蕈"],["e9a1","蕁蘂蕋蕕薀薤薈薑薊薨蕭薔薛藪薇薜蕷蕾薐藉薺藏薹藐藕藝藥藜藹蘊蘓蘋藾藺蘆蘢蘚蘰蘿虍乕虔號虧虱蚓蚣蚩蚪蚋蚌蚶蚯蛄蛆蚰蛉蠣蚫蛔蛞蛩蛬蛟蛛蛯蜒蜆蜈蜀蜃蛻蜑蜉蜍蛹蜊蜴蜿蜷蜻蜥蜩蜚蝠蝟蝸蝌蝎蝴蝗蝨蝮蝙"],["eaa1","蝓蝣蝪蠅螢螟螂螯蟋螽蟀蟐雖螫蟄螳蟇蟆螻蟯蟲蟠蠏蠍蟾蟶蟷蠎蟒蠑蠖蠕蠢蠡蠱蠶蠹蠧蠻衄衂衒衙衞衢衫袁衾袞衵衽袵衲袂袗袒袮袙袢袍袤袰袿袱裃裄裔裘裙裝裹褂裼裴裨裲褄褌褊褓襃褞褥褪褫襁襄褻褶褸襌褝襠襞"],["eba1","襦襤襭襪襯襴襷襾覃覈覊覓覘覡覩覦覬覯覲覺覽覿觀觚觜觝觧觴觸訃訖訐訌訛訝訥訶詁詛詒詆詈詼詭詬詢誅誂誄誨誡誑誥誦誚誣諄諍諂諚諫諳諧諤諱謔諠諢諷諞諛謌謇謚諡謖謐謗謠謳鞫謦謫謾謨譁譌譏譎證譖譛譚譫"],["eca1","譟譬譯譴譽讀讌讎讒讓讖讙讚谺豁谿豈豌豎豐豕豢豬豸豺貂貉貅貊貍貎貔豼貘戝貭貪貽貲貳貮貶賈賁賤賣賚賽賺賻贄贅贊贇贏贍贐齎贓賍贔贖赧赭赱赳趁趙跂趾趺跏跚跖跌跛跋跪跫跟跣跼踈踉跿踝踞踐踟蹂踵踰踴蹊"],["eda1","蹇蹉蹌蹐蹈蹙蹤蹠踪蹣蹕蹶蹲蹼躁躇躅躄躋躊躓躑躔躙躪躡躬躰軆躱躾軅軈軋軛軣軼軻軫軾輊輅輕輒輙輓輜輟輛輌輦輳輻輹轅轂輾轌轉轆轎轗轜轢轣轤辜辟辣辭辯辷迚迥迢迪迯邇迴逅迹迺逑逕逡逍逞逖逋逧逶逵逹迸"],["eea1","遏遐遑遒逎遉逾遖遘遞遨遯遶隨遲邂遽邁邀邊邉邏邨邯邱邵郢郤扈郛鄂鄒鄙鄲鄰酊酖酘酣酥酩酳酲醋醉醂醢醫醯醪醵醴醺釀釁釉釋釐釖釟釡釛釼釵釶鈞釿鈔鈬鈕鈑鉞鉗鉅鉉鉤鉈銕鈿鉋鉐銜銖銓銛鉚鋏銹銷鋩錏鋺鍄錮"],["efa1","錙錢錚錣錺錵錻鍜鍠鍼鍮鍖鎰鎬鎭鎔鎹鏖鏗鏨鏥鏘鏃鏝鏐鏈鏤鐚鐔鐓鐃鐇鐐鐶鐫鐵鐡鐺鑁鑒鑄鑛鑠鑢鑞鑪鈩鑰鑵鑷鑽鑚鑼鑾钁鑿閂閇閊閔閖閘閙閠閨閧閭閼閻閹閾闊濶闃闍闌闕闔闖關闡闥闢阡阨阮阯陂陌陏陋陷陜陞"],["f0a1","陝陟陦陲陬隍隘隕隗險隧隱隲隰隴隶隸隹雎雋雉雍襍雜霍雕雹霄霆霈霓霎霑霏霖霙霤霪霰霹霽霾靄靆靈靂靉靜靠靤靦靨勒靫靱靹鞅靼鞁靺鞆鞋鞏鞐鞜鞨鞦鞣鞳鞴韃韆韈韋韜韭齏韲竟韶韵頏頌頸頤頡頷頽顆顏顋顫顯顰"],["f1a1","顱顴顳颪颯颱颶飄飃飆飩飫餃餉餒餔餘餡餝餞餤餠餬餮餽餾饂饉饅饐饋饑饒饌饕馗馘馥馭馮馼駟駛駝駘駑駭駮駱駲駻駸騁騏騅駢騙騫騷驅驂驀驃騾驕驍驛驗驟驢驥驤驩驫驪骭骰骼髀髏髑髓體髞髟髢髣髦髯髫髮髴髱髷"],["f2a1","髻鬆鬘鬚鬟鬢鬣鬥鬧鬨鬩鬪鬮鬯鬲魄魃魏魍魎魑魘魴鮓鮃鮑鮖鮗鮟鮠鮨鮴鯀鯊鮹鯆鯏鯑鯒鯣鯢鯤鯔鯡鰺鯲鯱鯰鰕鰔鰉鰓鰌鰆鰈鰒鰊鰄鰮鰛鰥鰤鰡鰰鱇鰲鱆鰾鱚鱠鱧鱶鱸鳧鳬鳰鴉鴈鳫鴃鴆鴪鴦鶯鴣鴟鵄鴕鴒鵁鴿鴾鵆鵈"],["f3a1","鵝鵞鵤鵑鵐鵙鵲鶉鶇鶫鵯鵺鶚鶤鶩鶲鷄鷁鶻鶸鶺鷆鷏鷂鷙鷓鷸鷦鷭鷯鷽鸚鸛鸞鹵鹹鹽麁麈麋麌麒麕麑麝麥麩麸麪麭靡黌黎黏黐黔黜點黝黠黥黨黯黴黶黷黹黻黼黽鼇鼈皷鼕鼡鼬鼾齊齒齔齣齟齠齡齦齧齬齪齷齲齶龕龜龠"],["f4a1","堯槇遙瑤凜熙"],["f9a1","纊褜鍈銈蓜俉炻昱棈鋹曻彅丨仡仼伀伃伹佖侒侊侚侔俍偀倢俿倞偆偰偂傔僴僘兊兤冝冾凬刕劜劦勀勛匀匇匤卲厓厲叝﨎咜咊咩哿喆坙坥垬埈埇﨏塚增墲夋奓奛奝奣妤妺孖寀甯寘寬尞岦岺峵崧嵓﨑嵂嵭嶸嶹巐弡弴彧德"],["faa1","忞恝悅悊惞惕愠惲愑愷愰憘戓抦揵摠撝擎敎昀昕昻昉昮昞昤晥晗晙晴晳暙暠暲暿曺朎朗杦枻桒柀栁桄棏﨓楨﨔榘槢樰橫橆橳橾櫢櫤毖氿汜沆汯泚洄涇浯涖涬淏淸淲淼渹湜渧渼溿澈澵濵瀅瀇瀨炅炫焏焄煜煆煇凞燁燾犱"],["fba1","犾猤猪獷玽珉珖珣珒琇珵琦琪琩琮瑢璉璟甁畯皂皜皞皛皦益睆劯砡硎硤硺礰礼神祥禔福禛竑竧靖竫箞精絈絜綷綠緖繒罇羡羽茁荢荿菇菶葈蒴蕓蕙蕫﨟薰蘒﨡蠇裵訒訷詹誧誾諟諸諶譓譿賰賴贒赶﨣軏﨤逸遧郞都鄕鄧釚"],["fca1","釗釞釭釮釤釥鈆鈐鈊鈺鉀鈼鉎鉙鉑鈹鉧銧鉷鉸鋧鋗鋙鋐﨧鋕鋠鋓錥錡鋻﨨錞鋿錝錂鍰鍗鎤鏆鏞鏸鐱鑅鑈閒隆﨩隝隯霳霻靃靍靏靑靕顗顥飯飼餧館馞驎髙髜魵魲鮏鮱鮻鰀鵰鵫鶴鸙黑"],["fcf1","ⅰ",9,"￢￤＇＂"],["8fa2af","˘ˇ¸˙˝¯˛˚～΄΅"],["8fa2c2","¡¦¿"],["8fa2eb","ºª©®™¤№"],["8fa6e1","ΆΈΉΊΪ"],["8fa6e7","Ό"],["8fa6e9","ΎΫ"],["8fa6ec","Ώ"],["8fa6f1","άέήίϊΐόςύϋΰώ"],["8fa7c2","Ђ",10,"ЎЏ"],["8fa7f2","ђ",10,"ўџ"],["8fa9a1","ÆĐ"],["8fa9a4","Ħ"],["8fa9a6","Ĳ"],["8fa9a8","ŁĿ"],["8fa9ab","ŊØŒ"],["8fa9af","ŦÞ"],["8fa9c1","æđðħıĳĸłŀŉŋøœßŧþ"],["8faaa1","ÁÀÄÂĂǍĀĄÅÃĆĈČÇĊĎÉÈËÊĚĖĒĘ"],["8faaba","ĜĞĢĠĤÍÌÏÎǏİĪĮĨĴĶĹĽĻŃŇŅÑÓÒÖÔǑŐŌÕŔŘŖŚŜŠŞŤŢÚÙÜÛŬǓŰŪŲŮŨǗǛǙǕŴÝŸŶŹŽŻ"],["8faba1","áàäâăǎāąåãćĉčçċďéèëêěėēęǵĝğ"],["8fabbd","ġĥíìïîǐ"],["8fabc5","īįĩĵķĺľļńňņñóòöôǒőōõŕřŗśŝšşťţúùüûŭǔűūųůũǘǜǚǖŵýÿŷźžż"],["8fb0a1","丂丄丅丌丒丟丣两丨丫丮丯丰丵乀乁乄乇乑乚乜乣乨乩乴乵乹乿亍亖亗亝亯亹仃仐仚仛仠仡仢仨仯仱仳仵份仾仿伀伂伃伈伋伌伒伕伖众伙伮伱你伳伵伷伹伻伾佀佂佈佉佋佌佒佔佖佘佟佣佪佬佮佱佷佸佹佺佽佾侁侂侄"],["8fb1a1","侅侉侊侌侎侐侒侓侔侗侙侚侞侟侲侷侹侻侼侽侾俀俁俅俆俈俉俋俌俍俏俒俜俠俢俰俲俼俽俿倀倁倄倇倊倌倎倐倓倗倘倛倜倝倞倢倧倮倰倲倳倵偀偁偂偅偆偊偌偎偑偒偓偗偙偟偠偢偣偦偧偪偭偰偱倻傁傃傄傆傊傎傏傐"],["8fb2a1","傒傓傔傖傛傜傞",4,"傪傯傰傹傺傽僀僃僄僇僌僎僐僓僔僘僜僝僟僢僤僦僨僩僯僱僶僺僾儃儆儇儈儋儌儍儎僲儐儗儙儛儜儝儞儣儧儨儬儭儯儱儳儴儵儸儹兂兊兏兓兕兗兘兟兤兦兾冃冄冋冎冘冝冡冣冭冸冺冼冾冿凂"],["8fb3a1","凈减凑凒凓凕凘凞凢凥凮凲凳凴凷刁刂刅划刓刕刖刘刢刨刱刲刵刼剅剉剕剗剘剚剜剟剠剡剦剮剷剸剹劀劂劅劊劌劓劕劖劗劘劚劜劤劥劦劧劯劰劶劷劸劺劻劽勀勄勆勈勌勏勑勔勖勛勜勡勥勨勩勪勬勰勱勴勶勷匀匃匊匋"],["8fb4a1","匌匑匓匘匛匜匞匟匥匧匨匩匫匬匭匰匲匵匼匽匾卂卌卋卙卛卡卣卥卬卭卲卹卾厃厇厈厎厓厔厙厝厡厤厪厫厯厲厴厵厷厸厺厽叀叅叏叒叓叕叚叝叞叠另叧叵吂吓吚吡吧吨吪启吱吴吵呃呄呇呍呏呞呢呤呦呧呩呫呭呮呴呿"],["8fb5a1","咁咃咅咈咉咍咑咕咖咜咟咡咦咧咩咪咭咮咱咷咹咺咻咿哆哊响哎哠哪哬哯哶哼哾哿唀唁唅唈唉唌唍唎唕唪唫唲唵唶唻唼唽啁啇啉啊啍啐啑啘啚啛啞啠啡啤啦啿喁喂喆喈喎喏喑喒喓喔喗喣喤喭喲喿嗁嗃嗆嗉嗋嗌嗎嗑嗒"],["8fb6a1","嗓嗗嗘嗛嗞嗢嗩嗶嗿嘅嘈嘊嘍",5,"嘙嘬嘰嘳嘵嘷嘹嘻嘼嘽嘿噀噁噃噄噆噉噋噍噏噔噞噠噡噢噣噦噩噭噯噱噲噵嚄嚅嚈嚋嚌嚕嚙嚚嚝嚞嚟嚦嚧嚨嚩嚫嚬嚭嚱嚳嚷嚾囅囉囊囋囏囐囌囍囙囜囝囟囡囤",4,"囱囫园"],["8fb7a1","囶囷圁圂圇圊圌圑圕圚圛圝圠圢圣圤圥圩圪圬圮圯圳圴圽圾圿坅坆坌坍坒坢坥坧坨坫坭",4,"坳坴坵坷坹坺坻坼坾垁垃垌垔垗垙垚垜垝垞垟垡垕垧垨垩垬垸垽埇埈埌埏埕埝埞埤埦埧埩埭埰埵埶埸埽埾埿堃堄堈堉埡"],["8fb8a1","堌堍堛堞堟堠堦堧堭堲堹堿塉塌塍塏塐塕塟塡塤塧塨塸塼塿墀墁墇墈墉墊墌墍墏墐墔墖墝墠墡墢墦墩墱墲壄墼壂壈壍壎壐壒壔壖壚壝壡壢壩壳夅夆夋夌夒夓夔虁夝夡夣夤夨夯夰夳夵夶夿奃奆奒奓奙奛奝奞奟奡奣奫奭"],["8fb9a1","奯奲奵奶她奻奼妋妌妎妒妕妗妟妤妧妭妮妯妰妳妷妺妼姁姃姄姈姊姍姒姝姞姟姣姤姧姮姯姱姲姴姷娀娄娌娍娎娒娓娞娣娤娧娨娪娭娰婄婅婇婈婌婐婕婞婣婥婧婭婷婺婻婾媋媐媓媖媙媜媞媟媠媢媧媬媱媲媳媵媸媺媻媿"],["8fbaa1","嫄嫆嫈嫏嫚嫜嫠嫥嫪嫮嫵嫶嫽嬀嬁嬈嬗嬴嬙嬛嬝嬡嬥嬭嬸孁孋孌孒孖孞孨孮孯孼孽孾孿宁宄宆宊宎宐宑宓宔宖宨宩宬宭宯宱宲宷宺宼寀寁寍寏寖",4,"寠寯寱寴寽尌尗尞尟尣尦尩尫尬尮尰尲尵尶屙屚屜屢屣屧屨屩"],["8fbba1","屭屰屴屵屺屻屼屽岇岈岊岏岒岝岟岠岢岣岦岪岲岴岵岺峉峋峒峝峗峮峱峲峴崁崆崍崒崫崣崤崦崧崱崴崹崽崿嵂嵃嵆嵈嵕嵑嵙嵊嵟嵠嵡嵢嵤嵪嵭嵰嵹嵺嵾嵿嶁嶃嶈嶊嶒嶓嶔嶕嶙嶛嶟嶠嶧嶫嶰嶴嶸嶹巃巇巋巐巎巘巙巠巤"],["8fbca1","巩巸巹帀帇帍帒帔帕帘帟帠帮帨帲帵帾幋幐幉幑幖幘幛幜幞幨幪",4,"幰庀庋庎庢庤庥庨庪庬庱庳庽庾庿廆廌廋廎廑廒廔廕廜廞廥廫异弆弇弈弎弙弜弝弡弢弣弤弨弫弬弮弰弴弶弻弽弿彀彄彅彇彍彐彔彘彛彠彣彤彧"],["8fbda1","彯彲彴彵彸彺彽彾徉徍徏徖徜徝徢徧徫徤徬徯徰徱徸忄忇忈忉忋忐",4,"忞忡忢忨忩忪忬忭忮忯忲忳忶忺忼怇怊怍怓怔怗怘怚怟怤怭怳怵恀恇恈恉恌恑恔恖恗恝恡恧恱恾恿悂悆悈悊悎悑悓悕悘悝悞悢悤悥您悰悱悷"],["8fbea1","悻悾惂惄惈惉惊惋惎惏惔惕惙惛惝惞惢惥惲惵惸惼惽愂愇愊愌愐",4,"愖愗愙愜愞愢愪愫愰愱愵愶愷愹慁慅慆慉慞慠慬慲慸慻慼慿憀憁憃憄憋憍憒憓憗憘憜憝憟憠憥憨憪憭憸憹憼懀懁懂懎懏懕懜懝懞懟懡懢懧懩懥"],["8fbfa1","懬懭懯戁戃戄戇戓戕戜戠戢戣戧戩戫戹戽扂扃扄扆扌扐扑扒扔扖扚扜扤扭扯扳扺扽抍抎抏抐抦抨抳抶抷抺抾抿拄拎拕拖拚拪拲拴拼拽挃挄挊挋挍挐挓挖挘挩挪挭挵挶挹挼捁捂捃捄捆捊捋捎捒捓捔捘捛捥捦捬捭捱捴捵"],["8fc0a1","捸捼捽捿掂掄掇掊掐掔掕掙掚掞掤掦掭掮掯掽揁揅揈揎揑揓揔揕揜揠揥揪揬揲揳揵揸揹搉搊搐搒搔搘搞搠搢搤搥搩搪搯搰搵搽搿摋摏摑摒摓摔摚摛摜摝摟摠摡摣摭摳摴摻摽撅撇撏撐撑撘撙撛撝撟撡撣撦撨撬撳撽撾撿"],["8fc1a1","擄擉擊擋擌擎擐擑擕擗擤擥擩擪擭擰擵擷擻擿攁攄攈攉攊攏攓攔攖攙攛攞攟攢攦攩攮攱攺攼攽敃敇敉敐敒敔敟敠敧敫敺敽斁斅斊斒斕斘斝斠斣斦斮斲斳斴斿旂旈旉旎旐旔旖旘旟旰旲旴旵旹旾旿昀昄昈昉昍昑昒昕昖昝"],["8fc2a1","昞昡昢昣昤昦昩昪昫昬昮昰昱昳昹昷晀晅晆晊晌晑晎晗晘晙晛晜晠晡曻晪晫晬晾晳晵晿晷晸晹晻暀晼暋暌暍暐暒暙暚暛暜暟暠暤暭暱暲暵暻暿曀曂曃曈曌曎曏曔曛曟曨曫曬曮曺朅朇朎朓朙朜朠朢朳朾杅杇杈杌杔杕杝"],["8fc3a1","杦杬杮杴杶杻极构枎枏枑枓枖枘枙枛枰枱枲枵枻枼枽柹柀柂柃柅柈柉柒柗柙柜柡柦柰柲柶柷桒栔栙栝栟栨栧栬栭栯栰栱栳栻栿桄桅桊桌桕桗桘桛桫桮",4,"桵桹桺桻桼梂梄梆梈梖梘梚梜梡梣梥梩梪梮梲梻棅棈棌棏"],["8fc4a1","棐棑棓棖棙棜棝棥棨棪棫棬棭棰棱棵棶棻棼棽椆椉椊椐椑椓椖椗椱椳椵椸椻楂楅楉楎楗楛楣楤楥楦楨楩楬楰楱楲楺楻楿榀榍榒榖榘榡榥榦榨榫榭榯榷榸榺榼槅槈槑槖槗槢槥槮槯槱槳槵槾樀樁樃樏樑樕樚樝樠樤樨樰樲"],["8fc5a1","樴樷樻樾樿橅橆橉橊橎橐橑橒橕橖橛橤橧橪橱橳橾檁檃檆檇檉檋檑檛檝檞檟檥檫檯檰檱檴檽檾檿櫆櫉櫈櫌櫐櫔櫕櫖櫜櫝櫤櫧櫬櫰櫱櫲櫼櫽欂欃欆欇欉欏欐欑欗欛欞欤欨欫欬欯欵欶欻欿歆歊歍歒歖歘歝歠歧歫歮歰歵歽"],["8fc6a1","歾殂殅殗殛殟殠殢殣殨殩殬殭殮殰殸殹殽殾毃毄毉毌毖毚毡毣毦毧毮毱毷毹毿氂氄氅氉氍氎氐氒氙氟氦氧氨氬氮氳氵氶氺氻氿汊汋汍汏汒汔汙汛汜汫汭汯汴汶汸汹汻沅沆沇沉沔沕沗沘沜沟沰沲沴泂泆泍泏泐泑泒泔泖"],["8fc7a1","泚泜泠泧泩泫泬泮泲泴洄洇洊洎洏洑洓洚洦洧洨汧洮洯洱洹洼洿浗浞浟浡浥浧浯浰浼涂涇涑涒涔涖涗涘涪涬涴涷涹涽涿淄淈淊淎淏淖淛淝淟淠淢淥淩淯淰淴淶淼渀渄渞渢渧渲渶渹渻渼湄湅湈湉湋湏湑湒湓湔湗湜湝湞"],["8fc8a1","湢湣湨湳湻湽溍溓溙溠溧溭溮溱溳溻溿滀滁滃滇滈滊滍滎滏滫滭滮滹滻滽漄漈漊漌漍漖漘漚漛漦漩漪漯漰漳漶漻漼漭潏潑潒潓潗潙潚潝潞潡潢潨潬潽潾澃澇澈澋澌澍澐澒澓澔澖澚澟澠澥澦澧澨澮澯澰澵澶澼濅濇濈濊"],["8fc9a1","濚濞濨濩濰濵濹濼濽瀀瀅瀆瀇瀍瀗瀠瀣瀯瀴瀷瀹瀼灃灄灈灉灊灋灔灕灝灞灎灤灥灬灮灵灶灾炁炅炆炔",4,"炛炤炫炰炱炴炷烊烑烓烔烕烖烘烜烤烺焃",4,"焋焌焏焞焠焫焭焯焰焱焸煁煅煆煇煊煋煐煒煗煚煜煞煠"],["8fcaa1","煨煹熀熅熇熌熒熚熛熠熢熯熰熲熳熺熿燀燁燄燋燌燓燖燙燚燜燸燾爀爇爈爉爓爗爚爝爟爤爫爯爴爸爹牁牂牃牅牎牏牐牓牕牖牚牜牞牠牣牨牫牮牯牱牷牸牻牼牿犄犉犍犎犓犛犨犭犮犱犴犾狁狇狉狌狕狖狘狟狥狳狴狺狻"],["8fcba1","狾猂猄猅猇猋猍猒猓猘猙猞猢猤猧猨猬猱猲猵猺猻猽獃獍獐獒獖獘獝獞獟獠獦獧獩獫獬獮獯獱獷獹獼玀玁玃玅玆玎玐玓玕玗玘玜玞玟玠玢玥玦玪玫玭玵玷玹玼玽玿珅珆珉珋珌珏珒珓珖珙珝珡珣珦珧珩珴珵珷珹珺珻珽"],["8fcca1","珿琀琁琄琇琊琑琚琛琤琦琨",9,"琹瑀瑃瑄瑆瑇瑋瑍瑑瑒瑗瑝瑢瑦瑧瑨瑫瑭瑮瑱瑲璀璁璅璆璇璉璏璐璑璒璘璙璚璜璟璠璡璣璦璨璩璪璫璮璯璱璲璵璹璻璿瓈瓉瓌瓐瓓瓘瓚瓛瓞瓟瓤瓨瓪瓫瓯瓴瓺瓻瓼瓿甆"],["8fcda1","甒甖甗甠甡甤甧甩甪甯甶甹甽甾甿畀畃畇畈畎畐畒畗畞畟畡畯畱畹",5,"疁疅疐疒疓疕疙疜疢疤疴疺疿痀痁痄痆痌痎痏痗痜痟痠痡痤痧痬痮痯痱痹瘀瘂瘃瘄瘇瘈瘊瘌瘏瘒瘓瘕瘖瘙瘛瘜瘝瘞瘣瘥瘦瘩瘭瘲瘳瘵瘸瘹"],["8fcea1","瘺瘼癊癀癁癃癄癅癉癋癕癙癟癤癥癭癮癯癱癴皁皅皌皍皕皛皜皝皟皠皢",6,"皪皭皽盁盅盉盋盌盎盔盙盠盦盨盬盰盱盶盹盼眀眆眊眎眒眔眕眗眙眚眜眢眨眭眮眯眴眵眶眹眽眾睂睅睆睊睍睎睏睒睖睗睜睞睟睠睢"],["8fcfa1","睤睧睪睬睰睲睳睴睺睽瞀瞄瞌瞍瞔瞕瞖瞚瞟瞢瞧瞪瞮瞯瞱瞵瞾矃矉矑矒矕矙矞矟矠矤矦矪矬矰矱矴矸矻砅砆砉砍砎砑砝砡砢砣砭砮砰砵砷硃硄硇硈硌硎硒硜硞硠硡硣硤硨硪确硺硾碊碏碔碘碡碝碞碟碤碨碬碭碰碱碲碳"],["8fd0a1","碻碽碿磇磈磉磌磎磒磓磕磖磤磛磟磠磡磦磪磲磳礀磶磷磺磻磿礆礌礐礚礜礞礟礠礥礧礩礭礱礴礵礻礽礿祄祅祆祊祋祏祑祔祘祛祜祧祩祫祲祹祻祼祾禋禌禑禓禔禕禖禘禛禜禡禨禩禫禯禱禴禸离秂秄秇秈秊秏秔秖秚秝秞"],["8fd1a1","秠秢秥秪秫秭秱秸秼稂稃稇稉稊稌稑稕稛稞稡稧稫稭稯稰稴稵稸稹稺穄穅穇穈穌穕穖穙穜穝穟穠穥穧穪穭穵穸穾窀窂窅窆窊窋窐窑窔窞窠窣窬窳窵窹窻窼竆竉竌竎竑竛竨竩竫竬竱竴竻竽竾笇笔笟笣笧笩笪笫笭笮笯笰"],["8fd2a1","笱笴笽笿筀筁筇筎筕筠筤筦筩筪筭筯筲筳筷箄箉箎箐箑箖箛箞箠箥箬箯箰箲箵箶箺箻箼箽篂篅篈篊篔篖篗篙篚篛篨篪篲篴篵篸篹篺篼篾簁簂簃簄簆簉簋簌簎簏簙簛簠簥簦簨簬簱簳簴簶簹簺籆籊籕籑籒籓籙",5],["8fd3a1","籡籣籧籩籭籮籰籲籹籼籽粆粇粏粔粞粠粦粰粶粷粺粻粼粿糄糇糈糉糍糏糓糔糕糗糙糚糝糦糩糫糵紃紇紈紉紏紑紒紓紖紝紞紣紦紪紭紱紼紽紾絀絁絇絈絍絑絓絗絙絚絜絝絥絧絪絰絸絺絻絿綁綂綃綅綆綈綋綌綍綑綖綗綝"],["8fd4a1","綞綦綧綪綳綶綷綹緂",4,"緌緍緎緗緙縀緢緥緦緪緫緭緱緵緶緹緺縈縐縑縕縗縜縝縠縧縨縬縭縯縳縶縿繄繅繇繎繐繒繘繟繡繢繥繫繮繯繳繸繾纁纆纇纊纍纑纕纘纚纝纞缼缻缽缾缿罃罄罇罏罒罓罛罜罝罡罣罤罥罦罭"],["8fd5a1","罱罽罾罿羀羋羍羏羐羑羖羗羜羡羢羦羪羭羴羼羿翀翃翈翎翏翛翟翣翥翨翬翮翯翲翺翽翾翿耇耈耊耍耎耏耑耓耔耖耝耞耟耠耤耦耬耮耰耴耵耷耹耺耼耾聀聄聠聤聦聭聱聵肁肈肎肜肞肦肧肫肸肹胈胍胏胒胔胕胗胘胠胭胮"],["8fd6a1","胰胲胳胶胹胺胾脃脋脖脗脘脜脞脠脤脧脬脰脵脺脼腅腇腊腌腒腗腠腡腧腨腩腭腯腷膁膐膄膅膆膋膎膖膘膛膞膢膮膲膴膻臋臃臅臊臎臏臕臗臛臝臞臡臤臫臬臰臱臲臵臶臸臹臽臿舀舃舏舓舔舙舚舝舡舢舨舲舴舺艃艄艅艆"],["8fd7a1","艋艎艏艑艖艜艠艣艧艭艴艻艽艿芀芁芃芄芇芉芊芎芑芔芖芘芚芛芠芡芣芤芧芨芩芪芮芰芲芴芷芺芼芾芿苆苐苕苚苠苢苤苨苪苭苯苶苷苽苾茀茁茇茈茊茋荔茛茝茞茟茡茢茬茭茮茰茳茷茺茼茽荂荃荄荇荍荎荑荕荖荗荰荸"],["8fd8a1","荽荿莀莂莄莆莍莒莔莕莘莙莛莜莝莦莧莩莬莾莿菀菇菉菏菐菑菔菝荓菨菪菶菸菹菼萁萆萊萏萑萕萙莭萯萹葅葇葈葊葍葏葑葒葖葘葙葚葜葠葤葥葧葪葰葳葴葶葸葼葽蒁蒅蒒蒓蒕蒞蒦蒨蒩蒪蒯蒱蒴蒺蒽蒾蓀蓂蓇蓈蓌蓏蓓"],["8fd9a1","蓜蓧蓪蓯蓰蓱蓲蓷蔲蓺蓻蓽蔂蔃蔇蔌蔎蔐蔜蔞蔢蔣蔤蔥蔧蔪蔫蔯蔳蔴蔶蔿蕆蕏",4,"蕖蕙蕜",6,"蕤蕫蕯蕹蕺蕻蕽蕿薁薅薆薉薋薌薏薓薘薝薟薠薢薥薧薴薶薷薸薼薽薾薿藂藇藊藋藎薭藘藚藟藠藦藨藭藳藶藼"],["8fdaa1","藿蘀蘄蘅蘍蘎蘐蘑蘒蘘蘙蘛蘞蘡蘧蘩蘶蘸蘺蘼蘽虀虂虆虒虓虖虗虘虙虝虠",4,"虩虬虯虵虶虷虺蚍蚑蚖蚘蚚蚜蚡蚦蚧蚨蚭蚱蚳蚴蚵蚷蚸蚹蚿蛀蛁蛃蛅蛑蛒蛕蛗蛚蛜蛠蛣蛥蛧蚈蛺蛼蛽蜄蜅蜇蜋蜎蜏蜐蜓蜔蜙蜞蜟蜡蜣"],["8fdba1","蜨蜮蜯蜱蜲蜹蜺蜼蜽蜾蝀蝃蝅蝍蝘蝝蝡蝤蝥蝯蝱蝲蝻螃",6,"螋螌螐螓螕螗螘螙螞螠螣螧螬螭螮螱螵螾螿蟁蟈蟉蟊蟎蟕蟖蟙蟚蟜蟟蟢蟣蟤蟪蟫蟭蟱蟳蟸蟺蟿蠁蠃蠆蠉蠊蠋蠐蠙蠒蠓蠔蠘蠚蠛蠜蠞蠟蠨蠭蠮蠰蠲蠵"],["8fdca1","蠺蠼衁衃衅衈衉衊衋衎衑衕衖衘衚衜衟衠衤衩衱衹衻袀袘袚袛袜袟袠袨袪袺袽袾裀裊",4,"裑裒裓裛裞裧裯裰裱裵裷褁褆褍褎褏褕褖褘褙褚褜褠褦褧褨褰褱褲褵褹褺褾襀襂襅襆襉襏襒襗襚襛襜襡襢襣襫襮襰襳襵襺"],["8fdda1","襻襼襽覉覍覐覔覕覛覜覟覠覥覰覴覵覶覷覼觔",4,"觥觩觫觭觱觳觶觹觽觿訄訅訇訏訑訒訔訕訞訠訢訤訦訫訬訯訵訷訽訾詀詃詅詇詉詍詎詓詖詗詘詜詝詡詥詧詵詶詷詹詺詻詾詿誀誃誆誋誏誐誒誖誗誙誟誧誩誮誯誳"],["8fdea1","誶誷誻誾諃諆諈諉諊諑諓諔諕諗諝諟諬諰諴諵諶諼諿謅謆謋謑謜謞謟謊謭謰謷謼譂",4,"譈譒譓譔譙譍譞譣譭譶譸譹譼譾讁讄讅讋讍讏讔讕讜讞讟谸谹谽谾豅豇豉豋豏豑豓豔豗豘豛豝豙豣豤豦豨豩豭豳豵豶豻豾貆"],["8fdfa1","貇貋貐貒貓貙貛貜貤貹貺賅賆賉賋賏賖賕賙賝賡賨賬賯賰賲賵賷賸賾賿贁贃贉贒贗贛赥赩赬赮赿趂趄趈趍趐趑趕趞趟趠趦趫趬趯趲趵趷趹趻跀跅跆跇跈跊跎跑跔跕跗跙跤跥跧跬跰趼跱跲跴跽踁踄踅踆踋踑踔踖踠踡踢"],["8fe0a1","踣踦踧踱踳踶踷踸踹踽蹀蹁蹋蹍蹎蹏蹔蹛蹜蹝蹞蹡蹢蹩蹬蹭蹯蹰蹱蹹蹺蹻躂躃躉躐躒躕躚躛躝躞躢躧躩躭躮躳躵躺躻軀軁軃軄軇軏軑軔軜軨軮軰軱軷軹軺軭輀輂輇輈輏輐輖輗輘輞輠輡輣輥輧輨輬輭輮輴輵輶輷輺轀轁"],["8fe1a1","轃轇轏轑",4,"轘轝轞轥辝辠辡辤辥辦辵辶辸达迀迁迆迊迋迍运迒迓迕迠迣迤迨迮迱迵迶迻迾适逄逈逌逘逛逨逩逯逪逬逭逳逴逷逿遃遄遌遛遝遢遦遧遬遰遴遹邅邈邋邌邎邐邕邗邘邙邛邠邡邢邥邰邲邳邴邶邽郌邾郃"],["8fe2a1","郄郅郇郈郕郗郘郙郜郝郟郥郒郶郫郯郰郴郾郿鄀鄄鄅鄆鄈鄍鄐鄔鄖鄗鄘鄚鄜鄞鄠鄥鄢鄣鄧鄩鄮鄯鄱鄴鄶鄷鄹鄺鄼鄽酃酇酈酏酓酗酙酚酛酡酤酧酭酴酹酺酻醁醃醅醆醊醎醑醓醔醕醘醞醡醦醨醬醭醮醰醱醲醳醶醻醼醽醿"],["8fe3a1","釂釃釅釓釔釗釙釚釞釤釥釩釪釬",5,"釷釹釻釽鈀鈁鈄鈅鈆鈇鈉鈊鈌鈐鈒鈓鈖鈘鈜鈝鈣鈤鈥鈦鈨鈮鈯鈰鈳鈵鈶鈸鈹鈺鈼鈾鉀鉂鉃鉆鉇鉊鉍鉎鉏鉑鉘鉙鉜鉝鉠鉡鉥鉧鉨鉩鉮鉯鉰鉵",4,"鉻鉼鉽鉿銈銉銊銍銎銒銗"],["8fe4a1","銙銟銠銤銥銧銨銫銯銲銶銸銺銻銼銽銿",4,"鋅鋆鋇鋈鋋鋌鋍鋎鋐鋓鋕鋗鋘鋙鋜鋝鋟鋠鋡鋣鋥鋧鋨鋬鋮鋰鋹鋻鋿錀錂錈錍錑錔錕錜錝錞錟錡錤錥錧錩錪錳錴錶錷鍇鍈鍉鍐鍑鍒鍕鍗鍘鍚鍞鍤鍥鍧鍩鍪鍭鍯鍰鍱鍳鍴鍶"],["8fe5a1","鍺鍽鍿鎀鎁鎂鎈鎊鎋鎍鎏鎒鎕鎘鎛鎞鎡鎣鎤鎦鎨鎫鎴鎵鎶鎺鎩鏁鏄鏅鏆鏇鏉",4,"鏓鏙鏜鏞鏟鏢鏦鏧鏹鏷鏸鏺鏻鏽鐁鐂鐄鐈鐉鐍鐎鐏鐕鐖鐗鐟鐮鐯鐱鐲鐳鐴鐻鐿鐽鑃鑅鑈鑊鑌鑕鑙鑜鑟鑡鑣鑨鑫鑭鑮鑯鑱鑲钄钃镸镹"],["8fe6a1","镾閄閈閌閍閎閝閞閟閡閦閩閫閬閴閶閺閽閿闆闈闉闋闐闑闒闓闙闚闝闞闟闠闤闦阝阞阢阤阥阦阬阱阳阷阸阹阺阼阽陁陒陔陖陗陘陡陮陴陻陼陾陿隁隂隃隄隉隑隖隚隝隟隤隥隦隩隮隯隳隺雊雒嶲雘雚雝雞雟雩雯雱雺霂"],["8fe7a1","霃霅霉霚霛霝霡霢霣霨霱霳靁靃靊靎靏靕靗靘靚靛靣靧靪靮靳靶靷靸靻靽靿鞀鞉鞕鞖鞗鞙鞚鞞鞟鞢鞬鞮鞱鞲鞵鞶鞸鞹鞺鞼鞾鞿韁韄韅韇韉韊韌韍韎韐韑韔韗韘韙韝韞韠韛韡韤韯韱韴韷韸韺頇頊頙頍頎頔頖頜頞頠頣頦"],["8fe8a1","頫頮頯頰頲頳頵頥頾顄顇顊顑顒顓顖顗顙顚顢顣顥顦顪顬颫颭颮颰颴颷颸颺颻颿飂飅飈飌飡飣飥飦飧飪飳飶餂餇餈餑餕餖餗餚餛餜餟餢餦餧餫餱",4,"餹餺餻餼饀饁饆饇饈饍饎饔饘饙饛饜饞饟饠馛馝馟馦馰馱馲馵"],["8fe9a1","馹馺馽馿駃駉駓駔駙駚駜駞駧駪駫駬駰駴駵駹駽駾騂騃騄騋騌騐騑騖騞騠騢騣騤騧騭騮騳騵騶騸驇驁驄驊驋驌驎驑驔驖驝骪骬骮骯骲骴骵骶骹骻骾骿髁髃髆髈髎髐髒髕髖髗髛髜髠髤髥髧髩髬髲髳髵髹髺髽髿",4],["8feaa1","鬄鬅鬈鬉鬋鬌鬍鬎鬐鬒鬖鬙鬛鬜鬠鬦鬫鬭鬳鬴鬵鬷鬹鬺鬽魈魋魌魕魖魗魛魞魡魣魥魦魨魪",4,"魳魵魷魸魹魿鮀鮄鮅鮆鮇鮉鮊鮋鮍鮏鮐鮔鮚鮝鮞鮦鮧鮩鮬鮰鮱鮲鮷鮸鮻鮼鮾鮿鯁鯇鯈鯎鯐鯗鯘鯝鯟鯥鯧鯪鯫鯯鯳鯷鯸"],["8feba1","鯹鯺鯽鯿鰀鰂鰋鰏鰑鰖鰘鰙鰚鰜鰞鰢鰣鰦",4,"鰱鰵鰶鰷鰽鱁鱃鱄鱅鱉鱊鱎鱏鱐鱓鱔鱖鱘鱛鱝鱞鱟鱣鱩鱪鱜鱫鱨鱮鱰鱲鱵鱷鱻鳦鳲鳷鳹鴋鴂鴑鴗鴘鴜鴝鴞鴯鴰鴲鴳鴴鴺鴼鵅鴽鵂鵃鵇鵊鵓鵔鵟鵣鵢鵥鵩鵪鵫鵰鵶鵷鵻"],["8feca1","鵼鵾鶃鶄鶆鶊鶍鶎鶒鶓鶕鶖鶗鶘鶡鶪鶬鶮鶱鶵鶹鶼鶿鷃鷇鷉鷊鷔鷕鷖鷗鷚鷞鷟鷠鷥鷧鷩鷫鷮鷰鷳鷴鷾鸊鸂鸇鸎鸐鸑鸒鸕鸖鸙鸜鸝鹺鹻鹼麀麂麃麄麅麇麎麏麖麘麛麞麤麨麬麮麯麰麳麴麵黆黈黋黕黟黤黧黬黭黮黰黱黲黵"],["8feda1","黸黿鼂鼃鼉鼏鼐鼑鼒鼔鼖鼗鼙鼚鼛鼟鼢鼦鼪鼫鼯鼱鼲鼴鼷鼹鼺鼼鼽鼿齁齃",4,"齓齕齖齗齘齚齝齞齨齩齭",4,"齳齵齺齽龏龐龑龒龔龖龗龞龡龢龣龥"]]');

/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/iconv-lite/encodings/tables/gb18030-ranges.json":
/*!**************************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/iconv-lite/encodings/tables/gb18030-ranges.json ***!
  \**************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"uChars":[128,165,169,178,184,216,226,235,238,244,248,251,253,258,276,284,300,325,329,334,364,463,465,467,469,471,473,475,477,506,594,610,712,716,730,930,938,962,970,1026,1104,1106,8209,8215,8218,8222,8231,8241,8244,8246,8252,8365,8452,8454,8458,8471,8482,8556,8570,8596,8602,8713,8720,8722,8726,8731,8737,8740,8742,8748,8751,8760,8766,8777,8781,8787,8802,8808,8816,8854,8858,8870,8896,8979,9322,9372,9548,9588,9616,9622,9634,9652,9662,9672,9676,9680,9702,9735,9738,9793,9795,11906,11909,11913,11917,11928,11944,11947,11951,11956,11960,11964,11979,12284,12292,12312,12319,12330,12351,12436,12447,12535,12543,12586,12842,12850,12964,13200,13215,13218,13253,13263,13267,13270,13384,13428,13727,13839,13851,14617,14703,14801,14816,14964,15183,15471,15585,16471,16736,17208,17325,17330,17374,17623,17997,18018,18212,18218,18301,18318,18760,18811,18814,18820,18823,18844,18848,18872,19576,19620,19738,19887,40870,59244,59336,59367,59413,59417,59423,59431,59437,59443,59452,59460,59478,59493,63789,63866,63894,63976,63986,64016,64018,64021,64025,64034,64037,64042,65074,65093,65107,65112,65127,65132,65375,65510,65536],"gbChars":[0,36,38,45,50,81,89,95,96,100,103,104,105,109,126,133,148,172,175,179,208,306,307,308,309,310,311,312,313,341,428,443,544,545,558,741,742,749,750,805,819,820,7922,7924,7925,7927,7934,7943,7944,7945,7950,8062,8148,8149,8152,8164,8174,8236,8240,8262,8264,8374,8380,8381,8384,8388,8390,8392,8393,8394,8396,8401,8406,8416,8419,8424,8437,8439,8445,8482,8485,8496,8521,8603,8936,8946,9046,9050,9063,9066,9076,9092,9100,9108,9111,9113,9131,9162,9164,9218,9219,11329,11331,11334,11336,11346,11361,11363,11366,11370,11372,11375,11389,11682,11686,11687,11692,11694,11714,11716,11723,11725,11730,11736,11982,11989,12102,12336,12348,12350,12384,12393,12395,12397,12510,12553,12851,12962,12973,13738,13823,13919,13933,14080,14298,14585,14698,15583,15847,16318,16434,16438,16481,16729,17102,17122,17315,17320,17402,17418,17859,17909,17911,17915,17916,17936,17939,17961,18664,18703,18814,18962,19043,33469,33470,33471,33484,33485,33490,33497,33501,33505,33513,33520,33536,33550,37845,37921,37948,38029,38038,38064,38065,38066,38069,38075,38076,38078,39108,39109,39113,39114,39115,39116,39265,39394,189000]}');

/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/iconv-lite/encodings/tables/gbk-added.json":
/*!*********************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/iconv-lite/encodings/tables/gbk-added.json ***!
  \*********************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('[["a140","",62],["a180","",32],["a240","",62],["a280","",32],["a2ab","",5],["a2e3","€"],["a2ef",""],["a2fd",""],["a340","",62],["a380","",31,"　"],["a440","",62],["a480","",32],["a4f4","",10],["a540","",62],["a580","",32],["a5f7","",7],["a640","",62],["a680","",32],["a6b9","",7],["a6d9","",6],["a6ec",""],["a6f3",""],["a6f6","",8],["a740","",62],["a780","",32],["a7c2","",14],["a7f2","",12],["a896","",10],["a8bc","ḿ"],["a8bf","ǹ"],["a8c1",""],["a8ea","",20],["a958",""],["a95b",""],["a95d",""],["a989","〾⿰",11],["a997","",12],["a9f0","",14],["aaa1","",93],["aba1","",93],["aca1","",93],["ada1","",93],["aea1","",93],["afa1","",93],["d7fa","",4],["f8a1","",93],["f9a1","",93],["faa1","",93],["fba1","",93],["fca1","",93],["fda1","",93],["fe50","⺁⺄㑳㑇⺈⺋㖞㘚㘎⺌⺗㥮㤘㧏㧟㩳㧐㭎㱮㳠⺧⺪䁖䅟⺮䌷⺳⺶⺷䎱䎬⺻䏝䓖䙡䙌"],["fe80","䜣䜩䝼䞍⻊䥇䥺䥽䦂䦃䦅䦆䦟䦛䦷䦶䲣䲟䲠䲡䱷䲢䴓",6,"䶮",93],["8135f437",""]]');

/***/ }),

/***/ "../node_modules/@theia/editor/node_modules/iconv-lite/encodings/tables/shiftjis.json":
/*!********************************************************************************************!*\
  !*** ../node_modules/@theia/editor/node_modules/iconv-lite/encodings/tables/shiftjis.json ***!
  \********************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('[["0","\\u0000",128],["a1","｡",62],["8140","　、。，．・：；？！゛゜´｀¨＾￣＿ヽヾゝゞ〃仝々〆〇ー―‐／＼～∥｜…‥‘’“”（）〔〕［］｛｝〈",9,"＋－±×"],["8180","÷＝≠＜＞≦≧∞∴♂♀°′″℃￥＄￠￡％＃＆＊＠§☆★○●◎◇◆□■△▲▽▼※〒→←↑↓〓"],["81b8","∈∋⊆⊇⊂⊃∪∩"],["81c8","∧∨￢⇒⇔∀∃"],["81da","∠⊥⌒∂∇≡≒≪≫√∽∝∵∫∬"],["81f0","Å‰♯♭♪†‡¶"],["81fc","◯"],["824f","０",9],["8260","Ａ",25],["8281","ａ",25],["829f","ぁ",82],["8340","ァ",62],["8380","ム",22],["839f","Α",16,"Σ",6],["83bf","α",16,"σ",6],["8440","А",5,"ЁЖ",25],["8470","а",5,"ёж",7],["8480","о",17],["849f","─│┌┐┘└├┬┤┴┼━┃┏┓┛┗┣┳┫┻╋┠┯┨┷┿┝┰┥┸╂"],["8740","①",19,"Ⅰ",9],["875f","㍉㌔㌢㍍㌘㌧㌃㌶㍑㍗㌍㌦㌣㌫㍊㌻㎜㎝㎞㎎㎏㏄㎡"],["877e","㍻"],["8780","〝〟№㏍℡㊤",4,"㈱㈲㈹㍾㍽㍼≒≡∫∮∑√⊥∠∟⊿∵∩∪"],["889f","亜唖娃阿哀愛挨姶逢葵茜穐悪握渥旭葦芦鯵梓圧斡扱宛姐虻飴絢綾鮎或粟袷安庵按暗案闇鞍杏以伊位依偉囲夷委威尉惟意慰易椅為畏異移維緯胃萎衣謂違遺医井亥域育郁磯一壱溢逸稲茨芋鰯允印咽員因姻引飲淫胤蔭"],["8940","院陰隠韻吋右宇烏羽迂雨卯鵜窺丑碓臼渦嘘唄欝蔚鰻姥厩浦瓜閏噂云運雲荏餌叡営嬰影映曳栄永泳洩瑛盈穎頴英衛詠鋭液疫益駅悦謁越閲榎厭円"],["8980","園堰奄宴延怨掩援沿演炎焔煙燕猿縁艶苑薗遠鉛鴛塩於汚甥凹央奥往応押旺横欧殴王翁襖鴬鴎黄岡沖荻億屋憶臆桶牡乙俺卸恩温穏音下化仮何伽価佳加可嘉夏嫁家寡科暇果架歌河火珂禍禾稼箇花苛茄荷華菓蝦課嘩貨迦過霞蚊俄峨我牙画臥芽蛾賀雅餓駕介会解回塊壊廻快怪悔恢懐戒拐改"],["8a40","魁晦械海灰界皆絵芥蟹開階貝凱劾外咳害崖慨概涯碍蓋街該鎧骸浬馨蛙垣柿蛎鈎劃嚇各廓拡撹格核殻獲確穫覚角赫較郭閣隔革学岳楽額顎掛笠樫"],["8a80","橿梶鰍潟割喝恰括活渇滑葛褐轄且鰹叶椛樺鞄株兜竃蒲釜鎌噛鴨栢茅萱粥刈苅瓦乾侃冠寒刊勘勧巻喚堪姦完官寛干幹患感慣憾換敢柑桓棺款歓汗漢澗潅環甘監看竿管簡緩缶翰肝艦莞観諌貫還鑑間閑関陥韓館舘丸含岸巌玩癌眼岩翫贋雁頑顔願企伎危喜器基奇嬉寄岐希幾忌揮机旗既期棋棄"],["8b40","機帰毅気汽畿祈季稀紀徽規記貴起軌輝飢騎鬼亀偽儀妓宜戯技擬欺犠疑祇義蟻誼議掬菊鞠吉吃喫桔橘詰砧杵黍却客脚虐逆丘久仇休及吸宮弓急救"],["8b80","朽求汲泣灸球究窮笈級糾給旧牛去居巨拒拠挙渠虚許距鋸漁禦魚亨享京供侠僑兇競共凶協匡卿叫喬境峡強彊怯恐恭挟教橋況狂狭矯胸脅興蕎郷鏡響饗驚仰凝尭暁業局曲極玉桐粁僅勤均巾錦斤欣欽琴禁禽筋緊芹菌衿襟謹近金吟銀九倶句区狗玖矩苦躯駆駈駒具愚虞喰空偶寓遇隅串櫛釧屑屈"],["8c40","掘窟沓靴轡窪熊隈粂栗繰桑鍬勲君薫訓群軍郡卦袈祁係傾刑兄啓圭珪型契形径恵慶慧憩掲携敬景桂渓畦稽系経継繋罫茎荊蛍計詣警軽頚鶏芸迎鯨"],["8c80","劇戟撃激隙桁傑欠決潔穴結血訣月件倹倦健兼券剣喧圏堅嫌建憲懸拳捲検権牽犬献研硯絹県肩見謙賢軒遣鍵険顕験鹸元原厳幻弦減源玄現絃舷言諺限乎個古呼固姑孤己庫弧戸故枯湖狐糊袴股胡菰虎誇跨鈷雇顧鼓五互伍午呉吾娯後御悟梧檎瑚碁語誤護醐乞鯉交佼侯候倖光公功効勾厚口向"],["8d40","后喉坑垢好孔孝宏工巧巷幸広庚康弘恒慌抗拘控攻昂晃更杭校梗構江洪浩港溝甲皇硬稿糠紅紘絞綱耕考肯肱腔膏航荒行衡講貢購郊酵鉱砿鋼閤降"],["8d80","項香高鴻剛劫号合壕拷濠豪轟麹克刻告国穀酷鵠黒獄漉腰甑忽惚骨狛込此頃今困坤墾婚恨懇昏昆根梱混痕紺艮魂些佐叉唆嵯左差査沙瑳砂詐鎖裟坐座挫債催再最哉塞妻宰彩才採栽歳済災采犀砕砦祭斎細菜裁載際剤在材罪財冴坂阪堺榊肴咲崎埼碕鷺作削咋搾昨朔柵窄策索錯桜鮭笹匙冊刷"],["8e40","察拶撮擦札殺薩雑皐鯖捌錆鮫皿晒三傘参山惨撒散桟燦珊産算纂蚕讃賛酸餐斬暫残仕仔伺使刺司史嗣四士始姉姿子屍市師志思指支孜斯施旨枝止"],["8e80","死氏獅祉私糸紙紫肢脂至視詞詩試誌諮資賜雌飼歯事似侍児字寺慈持時次滋治爾璽痔磁示而耳自蒔辞汐鹿式識鴫竺軸宍雫七叱執失嫉室悉湿漆疾質実蔀篠偲柴芝屡蕊縞舎写射捨赦斜煮社紗者謝車遮蛇邪借勺尺杓灼爵酌釈錫若寂弱惹主取守手朱殊狩珠種腫趣酒首儒受呪寿授樹綬需囚収周"],["8f40","宗就州修愁拾洲秀秋終繍習臭舟蒐衆襲讐蹴輯週酋酬集醜什住充十従戎柔汁渋獣縦重銃叔夙宿淑祝縮粛塾熟出術述俊峻春瞬竣舜駿准循旬楯殉淳"],["8f80","準潤盾純巡遵醇順処初所暑曙渚庶緒署書薯藷諸助叙女序徐恕鋤除傷償勝匠升召哨商唱嘗奨妾娼宵将小少尚庄床廠彰承抄招掌捷昇昌昭晶松梢樟樵沼消渉湘焼焦照症省硝礁祥称章笑粧紹肖菖蒋蕉衝裳訟証詔詳象賞醤鉦鍾鐘障鞘上丈丞乗冗剰城場壌嬢常情擾条杖浄状畳穣蒸譲醸錠嘱埴飾"],["9040","拭植殖燭織職色触食蝕辱尻伸信侵唇娠寝審心慎振新晋森榛浸深申疹真神秦紳臣芯薪親診身辛進針震人仁刃塵壬尋甚尽腎訊迅陣靭笥諏須酢図厨"],["9080","逗吹垂帥推水炊睡粋翠衰遂酔錐錘随瑞髄崇嵩数枢趨雛据杉椙菅頗雀裾澄摺寸世瀬畝是凄制勢姓征性成政整星晴棲栖正清牲生盛精聖声製西誠誓請逝醒青静斉税脆隻席惜戚斥昔析石積籍績脊責赤跡蹟碩切拙接摂折設窃節説雪絶舌蝉仙先千占宣専尖川戦扇撰栓栴泉浅洗染潜煎煽旋穿箭線"],["9140","繊羨腺舛船薦詮賎践選遷銭銑閃鮮前善漸然全禅繕膳糎噌塑岨措曾曽楚狙疏疎礎祖租粗素組蘇訴阻遡鼠僧創双叢倉喪壮奏爽宋層匝惣想捜掃挿掻"],["9180","操早曹巣槍槽漕燥争痩相窓糟総綜聡草荘葬蒼藻装走送遭鎗霜騒像増憎臓蔵贈造促側則即息捉束測足速俗属賊族続卒袖其揃存孫尊損村遜他多太汰詑唾堕妥惰打柁舵楕陀駄騨体堆対耐岱帯待怠態戴替泰滞胎腿苔袋貸退逮隊黛鯛代台大第醍題鷹滝瀧卓啄宅托択拓沢濯琢託鐸濁諾茸凧蛸只"],["9240","叩但達辰奪脱巽竪辿棚谷狸鱈樽誰丹単嘆坦担探旦歎淡湛炭短端箪綻耽胆蛋誕鍛団壇弾断暖檀段男談値知地弛恥智池痴稚置致蜘遅馳築畜竹筑蓄"],["9280","逐秩窒茶嫡着中仲宙忠抽昼柱注虫衷註酎鋳駐樗瀦猪苧著貯丁兆凋喋寵帖帳庁弔張彫徴懲挑暢朝潮牒町眺聴脹腸蝶調諜超跳銚長頂鳥勅捗直朕沈珍賃鎮陳津墜椎槌追鎚痛通塚栂掴槻佃漬柘辻蔦綴鍔椿潰坪壷嬬紬爪吊釣鶴亭低停偵剃貞呈堤定帝底庭廷弟悌抵挺提梯汀碇禎程締艇訂諦蹄逓"],["9340","邸鄭釘鼎泥摘擢敵滴的笛適鏑溺哲徹撤轍迭鉄典填天展店添纏甜貼転顛点伝殿澱田電兎吐堵塗妬屠徒斗杜渡登菟賭途都鍍砥砺努度土奴怒倒党冬"],["9380","凍刀唐塔塘套宕島嶋悼投搭東桃梼棟盗淘湯涛灯燈当痘祷等答筒糖統到董蕩藤討謄豆踏逃透鐙陶頭騰闘働動同堂導憧撞洞瞳童胴萄道銅峠鴇匿得徳涜特督禿篤毒独読栃橡凸突椴届鳶苫寅酉瀞噸屯惇敦沌豚遁頓呑曇鈍奈那内乍凪薙謎灘捺鍋楢馴縄畷南楠軟難汝二尼弐迩匂賑肉虹廿日乳入"],["9440","如尿韮任妊忍認濡禰祢寧葱猫熱年念捻撚燃粘乃廼之埜嚢悩濃納能脳膿農覗蚤巴把播覇杷波派琶破婆罵芭馬俳廃拝排敗杯盃牌背肺輩配倍培媒梅"],["9480","楳煤狽買売賠陪這蝿秤矧萩伯剥博拍柏泊白箔粕舶薄迫曝漠爆縛莫駁麦函箱硲箸肇筈櫨幡肌畑畠八鉢溌発醗髪伐罰抜筏閥鳩噺塙蛤隼伴判半反叛帆搬斑板氾汎版犯班畔繁般藩販範釆煩頒飯挽晩番盤磐蕃蛮匪卑否妃庇彼悲扉批披斐比泌疲皮碑秘緋罷肥被誹費避非飛樋簸備尾微枇毘琵眉美"],["9540","鼻柊稗匹疋髭彦膝菱肘弼必畢筆逼桧姫媛紐百謬俵彪標氷漂瓢票表評豹廟描病秒苗錨鋲蒜蛭鰭品彬斌浜瀕貧賓頻敏瓶不付埠夫婦富冨布府怖扶敷"],["9580","斧普浮父符腐膚芙譜負賦赴阜附侮撫武舞葡蕪部封楓風葺蕗伏副復幅服福腹複覆淵弗払沸仏物鮒分吻噴墳憤扮焚奮粉糞紛雰文聞丙併兵塀幣平弊柄並蔽閉陛米頁僻壁癖碧別瞥蔑箆偏変片篇編辺返遍便勉娩弁鞭保舗鋪圃捕歩甫補輔穂募墓慕戊暮母簿菩倣俸包呆報奉宝峰峯崩庖抱捧放方朋"],["9640","法泡烹砲縫胞芳萌蓬蜂褒訪豊邦鋒飽鳳鵬乏亡傍剖坊妨帽忘忙房暴望某棒冒紡肪膨謀貌貿鉾防吠頬北僕卜墨撲朴牧睦穆釦勃没殆堀幌奔本翻凡盆"],["9680","摩磨魔麻埋妹昧枚毎哩槙幕膜枕鮪柾鱒桝亦俣又抹末沫迄侭繭麿万慢満漫蔓味未魅巳箕岬密蜜湊蓑稔脈妙粍民眠務夢無牟矛霧鵡椋婿娘冥名命明盟迷銘鳴姪牝滅免棉綿緬面麺摸模茂妄孟毛猛盲網耗蒙儲木黙目杢勿餅尤戻籾貰問悶紋門匁也冶夜爺耶野弥矢厄役約薬訳躍靖柳薮鑓愉愈油癒"],["9740","諭輸唯佑優勇友宥幽悠憂揖有柚湧涌猶猷由祐裕誘遊邑郵雄融夕予余与誉輿預傭幼妖容庸揚揺擁曜楊様洋溶熔用窯羊耀葉蓉要謡踊遥陽養慾抑欲"],["9780","沃浴翌翼淀羅螺裸来莱頼雷洛絡落酪乱卵嵐欄濫藍蘭覧利吏履李梨理璃痢裏裡里離陸律率立葎掠略劉流溜琉留硫粒隆竜龍侶慮旅虜了亮僚両凌寮料梁涼猟療瞭稜糧良諒遼量陵領力緑倫厘林淋燐琳臨輪隣鱗麟瑠塁涙累類令伶例冷励嶺怜玲礼苓鈴隷零霊麗齢暦歴列劣烈裂廉恋憐漣煉簾練聯"],["9840","蓮連錬呂魯櫓炉賂路露労婁廊弄朗楼榔浪漏牢狼篭老聾蝋郎六麓禄肋録論倭和話歪賄脇惑枠鷲亙亘鰐詫藁蕨椀湾碗腕"],["989f","弌丐丕个丱丶丼丿乂乖乘亂亅豫亊舒弍于亞亟亠亢亰亳亶从仍仄仆仂仗仞仭仟价伉佚估佛佝佗佇佶侈侏侘佻佩佰侑佯來侖儘俔俟俎俘俛俑俚俐俤俥倚倨倔倪倥倅伜俶倡倩倬俾俯們倆偃假會偕偐偈做偖偬偸傀傚傅傴傲"],["9940","僉僊傳僂僖僞僥僭僣僮價僵儉儁儂儖儕儔儚儡儺儷儼儻儿兀兒兌兔兢竸兩兪兮冀冂囘册冉冏冑冓冕冖冤冦冢冩冪冫决冱冲冰况冽凅凉凛几處凩凭"],["9980","凰凵凾刄刋刔刎刧刪刮刳刹剏剄剋剌剞剔剪剴剩剳剿剽劍劔劒剱劈劑辨辧劬劭劼劵勁勍勗勞勣勦飭勠勳勵勸勹匆匈甸匍匐匏匕匚匣匯匱匳匸區卆卅丗卉卍凖卞卩卮夘卻卷厂厖厠厦厥厮厰厶參簒雙叟曼燮叮叨叭叺吁吽呀听吭吼吮吶吩吝呎咏呵咎呟呱呷呰咒呻咀呶咄咐咆哇咢咸咥咬哄哈咨"],["9a40","咫哂咤咾咼哘哥哦唏唔哽哮哭哺哢唹啀啣啌售啜啅啖啗唸唳啝喙喀咯喊喟啻啾喘喞單啼喃喩喇喨嗚嗅嗟嗄嗜嗤嗔嘔嗷嘖嗾嗽嘛嗹噎噐營嘴嘶嘲嘸"],["9a80","噫噤嘯噬噪嚆嚀嚊嚠嚔嚏嚥嚮嚶嚴囂嚼囁囃囀囈囎囑囓囗囮囹圀囿圄圉圈國圍圓團圖嗇圜圦圷圸坎圻址坏坩埀垈坡坿垉垓垠垳垤垪垰埃埆埔埒埓堊埖埣堋堙堝塲堡塢塋塰毀塒堽塹墅墹墟墫墺壞墻墸墮壅壓壑壗壙壘壥壜壤壟壯壺壹壻壼壽夂夊夐夛梦夥夬夭夲夸夾竒奕奐奎奚奘奢奠奧奬奩"],["9b40","奸妁妝佞侫妣妲姆姨姜妍姙姚娥娟娑娜娉娚婀婬婉娵娶婢婪媚媼媾嫋嫂媽嫣嫗嫦嫩嫖嫺嫻嬌嬋嬖嬲嫐嬪嬶嬾孃孅孀孑孕孚孛孥孩孰孳孵學斈孺宀"],["9b80","它宦宸寃寇寉寔寐寤實寢寞寥寫寰寶寳尅將專對尓尠尢尨尸尹屁屆屎屓屐屏孱屬屮乢屶屹岌岑岔妛岫岻岶岼岷峅岾峇峙峩峽峺峭嶌峪崋崕崗嵜崟崛崑崔崢崚崙崘嵌嵒嵎嵋嵬嵳嵶嶇嶄嶂嶢嶝嶬嶮嶽嶐嶷嶼巉巍巓巒巖巛巫已巵帋帚帙帑帛帶帷幄幃幀幎幗幔幟幢幤幇幵并幺麼广庠廁廂廈廐廏"],["9c40","廖廣廝廚廛廢廡廨廩廬廱廳廰廴廸廾弃弉彝彜弋弑弖弩弭弸彁彈彌彎弯彑彖彗彙彡彭彳彷徃徂彿徊很徑徇從徙徘徠徨徭徼忖忻忤忸忱忝悳忿怡恠"],["9c80","怙怐怩怎怱怛怕怫怦怏怺恚恁恪恷恟恊恆恍恣恃恤恂恬恫恙悁悍惧悃悚悄悛悖悗悒悧悋惡悸惠惓悴忰悽惆悵惘慍愕愆惶惷愀惴惺愃愡惻惱愍愎慇愾愨愧慊愿愼愬愴愽慂慄慳慷慘慙慚慫慴慯慥慱慟慝慓慵憙憖憇憬憔憚憊憑憫憮懌懊應懷懈懃懆憺懋罹懍懦懣懶懺懴懿懽懼懾戀戈戉戍戌戔戛"],["9d40","戞戡截戮戰戲戳扁扎扞扣扛扠扨扼抂抉找抒抓抖拔抃抔拗拑抻拏拿拆擔拈拜拌拊拂拇抛拉挌拮拱挧挂挈拯拵捐挾捍搜捏掖掎掀掫捶掣掏掉掟掵捫"],["9d80","捩掾揩揀揆揣揉插揶揄搖搴搆搓搦搶攝搗搨搏摧摯摶摎攪撕撓撥撩撈撼據擒擅擇撻擘擂擱擧舉擠擡抬擣擯攬擶擴擲擺攀擽攘攜攅攤攣攫攴攵攷收攸畋效敖敕敍敘敞敝敲數斂斃變斛斟斫斷旃旆旁旄旌旒旛旙无旡旱杲昊昃旻杳昵昶昴昜晏晄晉晁晞晝晤晧晨晟晢晰暃暈暎暉暄暘暝曁暹曉暾暼"],["9e40","曄暸曖曚曠昿曦曩曰曵曷朏朖朞朦朧霸朮朿朶杁朸朷杆杞杠杙杣杤枉杰枩杼杪枌枋枦枡枅枷柯枴柬枳柩枸柤柞柝柢柮枹柎柆柧檜栞框栩桀桍栲桎"],["9e80","梳栫桙档桷桿梟梏梭梔條梛梃檮梹桴梵梠梺椏梍桾椁棊椈棘椢椦棡椌棍棔棧棕椶椒椄棗棣椥棹棠棯椨椪椚椣椡棆楹楷楜楸楫楔楾楮椹楴椽楙椰楡楞楝榁楪榲榮槐榿槁槓榾槎寨槊槝榻槃榧樮榑榠榜榕榴槞槨樂樛槿權槹槲槧樅榱樞槭樔槫樊樒櫁樣樓橄樌橲樶橸橇橢橙橦橈樸樢檐檍檠檄檢檣"],["9f40","檗蘗檻櫃櫂檸檳檬櫞櫑櫟檪櫚櫪櫻欅蘖櫺欒欖鬱欟欸欷盜欹飮歇歃歉歐歙歔歛歟歡歸歹歿殀殄殃殍殘殕殞殤殪殫殯殲殱殳殷殼毆毋毓毟毬毫毳毯"],["9f80","麾氈氓气氛氤氣汞汕汢汪沂沍沚沁沛汾汨汳沒沐泄泱泓沽泗泅泝沮沱沾沺泛泯泙泪洟衍洶洫洽洸洙洵洳洒洌浣涓浤浚浹浙涎涕濤涅淹渕渊涵淇淦涸淆淬淞淌淨淒淅淺淙淤淕淪淮渭湮渮渙湲湟渾渣湫渫湶湍渟湃渺湎渤滿渝游溂溪溘滉溷滓溽溯滄溲滔滕溏溥滂溟潁漑灌滬滸滾漿滲漱滯漲滌"],["e040","漾漓滷澆潺潸澁澀潯潛濳潭澂潼潘澎澑濂潦澳澣澡澤澹濆澪濟濕濬濔濘濱濮濛瀉瀋濺瀑瀁瀏濾瀛瀚潴瀝瀘瀟瀰瀾瀲灑灣炙炒炯烱炬炸炳炮烟烋烝"],["e080","烙焉烽焜焙煥煕熈煦煢煌煖煬熏燻熄熕熨熬燗熹熾燒燉燔燎燠燬燧燵燼燹燿爍爐爛爨爭爬爰爲爻爼爿牀牆牋牘牴牾犂犁犇犒犖犢犧犹犲狃狆狄狎狒狢狠狡狹狷倏猗猊猜猖猝猴猯猩猥猾獎獏默獗獪獨獰獸獵獻獺珈玳珎玻珀珥珮珞璢琅瑯琥珸琲琺瑕琿瑟瑙瑁瑜瑩瑰瑣瑪瑶瑾璋璞璧瓊瓏瓔珱"],["e140","瓠瓣瓧瓩瓮瓲瓰瓱瓸瓷甄甃甅甌甎甍甕甓甞甦甬甼畄畍畊畉畛畆畚畩畤畧畫畭畸當疆疇畴疊疉疂疔疚疝疥疣痂疳痃疵疽疸疼疱痍痊痒痙痣痞痾痿"],["e180","痼瘁痰痺痲痳瘋瘍瘉瘟瘧瘠瘡瘢瘤瘴瘰瘻癇癈癆癜癘癡癢癨癩癪癧癬癰癲癶癸發皀皃皈皋皎皖皓皙皚皰皴皸皹皺盂盍盖盒盞盡盥盧盪蘯盻眈眇眄眩眤眞眥眦眛眷眸睇睚睨睫睛睥睿睾睹瞎瞋瞑瞠瞞瞰瞶瞹瞿瞼瞽瞻矇矍矗矚矜矣矮矼砌砒礦砠礪硅碎硴碆硼碚碌碣碵碪碯磑磆磋磔碾碼磅磊磬"],["e240","磧磚磽磴礇礒礑礙礬礫祀祠祗祟祚祕祓祺祿禊禝禧齋禪禮禳禹禺秉秕秧秬秡秣稈稍稘稙稠稟禀稱稻稾稷穃穗穉穡穢穩龝穰穹穽窈窗窕窘窖窩竈窰"],["e280","窶竅竄窿邃竇竊竍竏竕竓站竚竝竡竢竦竭竰笂笏笊笆笳笘笙笞笵笨笶筐筺笄筍笋筌筅筵筥筴筧筰筱筬筮箝箘箟箍箜箚箋箒箏筝箙篋篁篌篏箴篆篝篩簑簔篦篥籠簀簇簓篳篷簗簍篶簣簧簪簟簷簫簽籌籃籔籏籀籐籘籟籤籖籥籬籵粃粐粤粭粢粫粡粨粳粲粱粮粹粽糀糅糂糘糒糜糢鬻糯糲糴糶糺紆"],["e340","紂紜紕紊絅絋紮紲紿紵絆絳絖絎絲絨絮絏絣經綉絛綏絽綛綺綮綣綵緇綽綫總綢綯緜綸綟綰緘緝緤緞緻緲緡縅縊縣縡縒縱縟縉縋縢繆繦縻縵縹繃縷"],["e380","縲縺繧繝繖繞繙繚繹繪繩繼繻纃緕繽辮繿纈纉續纒纐纓纔纖纎纛纜缸缺罅罌罍罎罐网罕罔罘罟罠罨罩罧罸羂羆羃羈羇羌羔羞羝羚羣羯羲羹羮羶羸譱翅翆翊翕翔翡翦翩翳翹飜耆耄耋耒耘耙耜耡耨耿耻聊聆聒聘聚聟聢聨聳聲聰聶聹聽聿肄肆肅肛肓肚肭冐肬胛胥胙胝胄胚胖脉胯胱脛脩脣脯腋"],["e440","隋腆脾腓腑胼腱腮腥腦腴膃膈膊膀膂膠膕膤膣腟膓膩膰膵膾膸膽臀臂膺臉臍臑臙臘臈臚臟臠臧臺臻臾舁舂舅與舊舍舐舖舩舫舸舳艀艙艘艝艚艟艤"],["e480","艢艨艪艫舮艱艷艸艾芍芒芫芟芻芬苡苣苟苒苴苳苺莓范苻苹苞茆苜茉苙茵茴茖茲茱荀茹荐荅茯茫茗茘莅莚莪莟莢莖茣莎莇莊荼莵荳荵莠莉莨菴萓菫菎菽萃菘萋菁菷萇菠菲萍萢萠莽萸蔆菻葭萪萼蕚蒄葷葫蒭葮蒂葩葆萬葯葹萵蓊葢蒹蒿蒟蓙蓍蒻蓚蓐蓁蓆蓖蒡蔡蓿蓴蔗蔘蔬蔟蔕蔔蓼蕀蕣蕘蕈"],["e540","蕁蘂蕋蕕薀薤薈薑薊薨蕭薔薛藪薇薜蕷蕾薐藉薺藏薹藐藕藝藥藜藹蘊蘓蘋藾藺蘆蘢蘚蘰蘿虍乕虔號虧虱蚓蚣蚩蚪蚋蚌蚶蚯蛄蛆蚰蛉蠣蚫蛔蛞蛩蛬"],["e580","蛟蛛蛯蜒蜆蜈蜀蜃蛻蜑蜉蜍蛹蜊蜴蜿蜷蜻蜥蜩蜚蝠蝟蝸蝌蝎蝴蝗蝨蝮蝙蝓蝣蝪蠅螢螟螂螯蟋螽蟀蟐雖螫蟄螳蟇蟆螻蟯蟲蟠蠏蠍蟾蟶蟷蠎蟒蠑蠖蠕蠢蠡蠱蠶蠹蠧蠻衄衂衒衙衞衢衫袁衾袞衵衽袵衲袂袗袒袮袙袢袍袤袰袿袱裃裄裔裘裙裝裹褂裼裴裨裲褄褌褊褓襃褞褥褪褫襁襄褻褶褸襌褝襠襞"],["e640","襦襤襭襪襯襴襷襾覃覈覊覓覘覡覩覦覬覯覲覺覽覿觀觚觜觝觧觴觸訃訖訐訌訛訝訥訶詁詛詒詆詈詼詭詬詢誅誂誄誨誡誑誥誦誚誣諄諍諂諚諫諳諧"],["e680","諤諱謔諠諢諷諞諛謌謇謚諡謖謐謗謠謳鞫謦謫謾謨譁譌譏譎證譖譛譚譫譟譬譯譴譽讀讌讎讒讓讖讙讚谺豁谿豈豌豎豐豕豢豬豸豺貂貉貅貊貍貎貔豼貘戝貭貪貽貲貳貮貶賈賁賤賣賚賽賺賻贄贅贊贇贏贍贐齎贓賍贔贖赧赭赱赳趁趙跂趾趺跏跚跖跌跛跋跪跫跟跣跼踈踉跿踝踞踐踟蹂踵踰踴蹊"],["e740","蹇蹉蹌蹐蹈蹙蹤蹠踪蹣蹕蹶蹲蹼躁躇躅躄躋躊躓躑躔躙躪躡躬躰軆躱躾軅軈軋軛軣軼軻軫軾輊輅輕輒輙輓輜輟輛輌輦輳輻輹轅轂輾轌轉轆轎轗轜"],["e780","轢轣轤辜辟辣辭辯辷迚迥迢迪迯邇迴逅迹迺逑逕逡逍逞逖逋逧逶逵逹迸遏遐遑遒逎遉逾遖遘遞遨遯遶隨遲邂遽邁邀邊邉邏邨邯邱邵郢郤扈郛鄂鄒鄙鄲鄰酊酖酘酣酥酩酳酲醋醉醂醢醫醯醪醵醴醺釀釁釉釋釐釖釟釡釛釼釵釶鈞釿鈔鈬鈕鈑鉞鉗鉅鉉鉤鉈銕鈿鉋鉐銜銖銓銛鉚鋏銹銷鋩錏鋺鍄錮"],["e840","錙錢錚錣錺錵錻鍜鍠鍼鍮鍖鎰鎬鎭鎔鎹鏖鏗鏨鏥鏘鏃鏝鏐鏈鏤鐚鐔鐓鐃鐇鐐鐶鐫鐵鐡鐺鑁鑒鑄鑛鑠鑢鑞鑪鈩鑰鑵鑷鑽鑚鑼鑾钁鑿閂閇閊閔閖閘閙"],["e880","閠閨閧閭閼閻閹閾闊濶闃闍闌闕闔闖關闡闥闢阡阨阮阯陂陌陏陋陷陜陞陝陟陦陲陬隍隘隕隗險隧隱隲隰隴隶隸隹雎雋雉雍襍雜霍雕雹霄霆霈霓霎霑霏霖霙霤霪霰霹霽霾靄靆靈靂靉靜靠靤靦靨勒靫靱靹鞅靼鞁靺鞆鞋鞏鞐鞜鞨鞦鞣鞳鞴韃韆韈韋韜韭齏韲竟韶韵頏頌頸頤頡頷頽顆顏顋顫顯顰"],["e940","顱顴顳颪颯颱颶飄飃飆飩飫餃餉餒餔餘餡餝餞餤餠餬餮餽餾饂饉饅饐饋饑饒饌饕馗馘馥馭馮馼駟駛駝駘駑駭駮駱駲駻駸騁騏騅駢騙騫騷驅驂驀驃"],["e980","騾驕驍驛驗驟驢驥驤驩驫驪骭骰骼髀髏髑髓體髞髟髢髣髦髯髫髮髴髱髷髻鬆鬘鬚鬟鬢鬣鬥鬧鬨鬩鬪鬮鬯鬲魄魃魏魍魎魑魘魴鮓鮃鮑鮖鮗鮟鮠鮨鮴鯀鯊鮹鯆鯏鯑鯒鯣鯢鯤鯔鯡鰺鯲鯱鯰鰕鰔鰉鰓鰌鰆鰈鰒鰊鰄鰮鰛鰥鰤鰡鰰鱇鰲鱆鰾鱚鱠鱧鱶鱸鳧鳬鳰鴉鴈鳫鴃鴆鴪鴦鶯鴣鴟鵄鴕鴒鵁鴿鴾鵆鵈"],["ea40","鵝鵞鵤鵑鵐鵙鵲鶉鶇鶫鵯鵺鶚鶤鶩鶲鷄鷁鶻鶸鶺鷆鷏鷂鷙鷓鷸鷦鷭鷯鷽鸚鸛鸞鹵鹹鹽麁麈麋麌麒麕麑麝麥麩麸麪麭靡黌黎黏黐黔黜點黝黠黥黨黯"],["ea80","黴黶黷黹黻黼黽鼇鼈皷鼕鼡鼬鼾齊齒齔齣齟齠齡齦齧齬齪齷齲齶龕龜龠堯槇遙瑤凜熙"],["ed40","纊褜鍈銈蓜俉炻昱棈鋹曻彅丨仡仼伀伃伹佖侒侊侚侔俍偀倢俿倞偆偰偂傔僴僘兊兤冝冾凬刕劜劦勀勛匀匇匤卲厓厲叝﨎咜咊咩哿喆坙坥垬埈埇﨏"],["ed80","塚增墲夋奓奛奝奣妤妺孖寀甯寘寬尞岦岺峵崧嵓﨑嵂嵭嶸嶹巐弡弴彧德忞恝悅悊惞惕愠惲愑愷愰憘戓抦揵摠撝擎敎昀昕昻昉昮昞昤晥晗晙晴晳暙暠暲暿曺朎朗杦枻桒柀栁桄棏﨓楨﨔榘槢樰橫橆橳橾櫢櫤毖氿汜沆汯泚洄涇浯涖涬淏淸淲淼渹湜渧渼溿澈澵濵瀅瀇瀨炅炫焏焄煜煆煇凞燁燾犱"],["ee40","犾猤猪獷玽珉珖珣珒琇珵琦琪琩琮瑢璉璟甁畯皂皜皞皛皦益睆劯砡硎硤硺礰礼神祥禔福禛竑竧靖竫箞精絈絜綷綠緖繒罇羡羽茁荢荿菇菶葈蒴蕓蕙"],["ee80","蕫﨟薰蘒﨡蠇裵訒訷詹誧誾諟諸諶譓譿賰賴贒赶﨣軏﨤逸遧郞都鄕鄧釚釗釞釭釮釤釥鈆鈐鈊鈺鉀鈼鉎鉙鉑鈹鉧銧鉷鉸鋧鋗鋙鋐﨧鋕鋠鋓錥錡鋻﨨錞鋿錝錂鍰鍗鎤鏆鏞鏸鐱鑅鑈閒隆﨩隝隯霳霻靃靍靏靑靕顗顥飯飼餧館馞驎髙髜魵魲鮏鮱鮻鰀鵰鵫鶴鸙黑"],["eeef","ⅰ",9,"￢￤＇＂"],["f040","",62],["f080","",124],["f140","",62],["f180","",124],["f240","",62],["f280","",124],["f340","",62],["f380","",124],["f440","",62],["f480","",124],["f540","",62],["f580","",124],["f640","",62],["f680","",124],["f740","",62],["f780","",124],["f840","",62],["f880","",124],["f940",""],["fa40","ⅰ",9,"Ⅰ",9,"￢￤＇＂㈱№℡∵纊褜鍈銈蓜俉炻昱棈鋹曻彅丨仡仼伀伃伹佖侒侊侚侔俍偀倢俿倞偆偰偂傔僴僘兊"],["fa80","兤冝冾凬刕劜劦勀勛匀匇匤卲厓厲叝﨎咜咊咩哿喆坙坥垬埈埇﨏塚增墲夋奓奛奝奣妤妺孖寀甯寘寬尞岦岺峵崧嵓﨑嵂嵭嶸嶹巐弡弴彧德忞恝悅悊惞惕愠惲愑愷愰憘戓抦揵摠撝擎敎昀昕昻昉昮昞昤晥晗晙晴晳暙暠暲暿曺朎朗杦枻桒柀栁桄棏﨓楨﨔榘槢樰橫橆橳橾櫢櫤毖氿汜沆汯泚洄涇浯"],["fb40","涖涬淏淸淲淼渹湜渧渼溿澈澵濵瀅瀇瀨炅炫焏焄煜煆煇凞燁燾犱犾猤猪獷玽珉珖珣珒琇珵琦琪琩琮瑢璉璟甁畯皂皜皞皛皦益睆劯砡硎硤硺礰礼神"],["fb80","祥禔福禛竑竧靖竫箞精絈絜綷綠緖繒罇羡羽茁荢荿菇菶葈蒴蕓蕙蕫﨟薰蘒﨡蠇裵訒訷詹誧誾諟諸諶譓譿賰賴贒赶﨣軏﨤逸遧郞都鄕鄧釚釗釞釭釮釤釥鈆鈐鈊鈺鉀鈼鉎鉙鉑鈹鉧銧鉷鉸鋧鋗鋙鋐﨧鋕鋠鋓錥錡鋻﨨錞鋿錝錂鍰鍗鎤鏆鏞鏸鐱鑅鑈閒隆﨩隝隯霳霻靃靍靏靑靕顗顥飯飼餧館馞驎髙"],["fc40","髜魵魲鮏鮱鮻鰀鵰鵫鶴鸙黑"]]');

/***/ })

}]);
//# sourceMappingURL=vendors-node_modules_theia_editor_lib_browser_editor-frontend-module_js-node_modules_theia_ed-74a151.js.map